_RNCINvMs_NtCsH2dyrj3mWd_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMs_NtCsH2dyrj3mWd_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    151|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    151|        self.0.unsync_init(|| init() as usize) != 0
   55|    151|    }
_RINvMNtCsH2dyrj3mWd_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    151|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    151|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    151|        let mut val = self.0.load(Relaxed);
   37|    151|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    150|        }
   41|    151|        val
   42|    151|    }

_RNvCsH2dyrj3mWd_9getrandom9getrandomCscworrPyzRd7_9rand_core:
  366|    151|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    151|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    151|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    151|    // `dest`.
  370|    151|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    151|    Ok(())
  372|    151|}
_RNvCsH2dyrj3mWd_9getrandom16getrandom_uninitCscworrPyzRd7_9rand_core:
  396|    151|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    151|    if !dest.is_empty() {
  398|    151|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    151|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    151|}

_RNvNtCsH2dyrj3mWd_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}
_RNvNtCsH2dyrj3mWd_9getrandom3imp15getrandom_inner:
    9|    151|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    151|    // getrandom(2) was introduced in Linux 3.17
   11|    151|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    151|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    151|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    151|}

_RINvNtCsH2dyrj3mWd_9getrandom4util21slice_assume_init_muthECscworrPyzRd7_9rand_core:
    8|    151|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    151|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    151|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    151|}
_RINvNtCsH2dyrj3mWd_9getrandom4util19slice_as_uninit_muthECscworrPyzRd7_9rand_core:
   32|    151|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    151|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    151|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    151|}

_RINvNtCsH2dyrj3mWd_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    151|pub fn sys_fill_exact(
   56|    151|    mut buf: &mut [MaybeUninit<u8>],
   57|    151|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    151|) -> Result<(), Error> {
   59|    302|    while !buf.is_empty() {
   60|    151|        let res = sys_fill(buf);
   61|    151|        match res {
   62|    151|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    151|    Ok(())
   77|    151|}
_RNvNtCsH2dyrj3mWd_9getrandom9util_libc17getrandom_syscall:
  153|    152|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    152|    unsafe {
  155|    152|        libc::syscall(
  156|    152|            libc::SYS_getrandom,
  157|    152|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    152|            buf.len(),
  159|    152|            0,
  160|    152|        ) as libc::ssize_t
  161|    152|    }
  162|    152|}

rust_fuzzer_test_input:
  209|  8.29k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  8.29k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  8.29k|                }
  223|  8.29k|
  224|  8.29k|                __libfuzzer_sys_run(bytes);
  225|  8.29k|                0
  226|  8.29k|            }
_RNvNvCsa6d1IKvoGEd_4trig1__19___libfuzzer_sys_run:
  241|  8.29k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  8.29k|            }
LLVMFuzzerTestOneInput:
   58|  8.29k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  8.29k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  8.29k|    });
   63|  8.29k|
   64|  8.29k|    match test_input {
   65|  8.29k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  8.29k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCscKWFZP2b1L7_13libfuzzer_sys15test_input_wrap0B3_:
   59|  8.29k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  8.29k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  8.29k|        rust_fuzzer_test_input(data_slice)
   62|  8.29k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs4HPcYfJdze0_5oxttl:
 1125|  2.91M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.91M|    haystack: &[u8],
 1127|  2.91M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.91M|) -> Option<usize> {
 1129|  2.91M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.91M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.91M|    // a &[u8].
 1132|  2.91M|    let start = haystack.as_ptr();
 1133|  2.91M|    let end = start.add(haystack.len());
 1134|  2.91M|    let found = find_raw(start, end)?;
 1135|  2.63M|    Some(found.distance(start))
 1136|  2.91M|}
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECs4HPcYfJdze0_5oxttl:
 1044|  14.4M|    pub(crate) unsafe fn next(
 1045|  14.4M|        &mut self,
 1046|  14.4M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  14.4M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  14.4M|        let found = find_raw(self.start, self.end)?;
 1057|  22.3k|        let result = found.distance(self.original_start);
 1058|  22.3k|        self.start = found.add(1);
 1059|  22.3k|        Some(result)
 1060|  14.4M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs4HPcYfJdze0_5oxttl:
 1125|  14.9k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  14.9k|    haystack: &[u8],
 1127|  14.9k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  14.9k|) -> Option<usize> {
 1129|  14.9k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  14.9k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  14.9k|    // a &[u8].
 1132|  14.9k|    let start = haystack.as_ptr();
 1133|  14.9k|    let end = start.add(haystack.len());
 1134|  14.9k|    let found = find_raw(start, end)?;
 1135|  1.96k|    Some(found.distance(start))
 1136|  14.9k|}
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  14.4M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  14.4M|        Iter {
 1029|  14.4M|            original_start: haystack.as_ptr(),
 1030|  14.4M|            start: haystack.as_ptr(),
 1031|  14.4M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  14.4M|            haystack: core::marker::PhantomData,
 1033|  14.4M|        }
 1034|  14.4M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|  31.7k|    pub(crate) fn needle1(&self) -> u8 {
  118|  31.7k|        self.s1
  119|  31.7k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  17.0k|    unsafe fn search_chunk(
  417|  17.0k|        &self,
  418|  17.0k|        cur: *const u8,
  419|  17.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  17.0k|    ) -> Option<*const u8> {
  421|  17.0k|        let chunk = V::load_unaligned(cur);
  422|  17.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  17.0k|        if mask.has_non_zero() {
  424|  1.28k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  15.7k|            None
  427|       |        }
  428|  17.0k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  14.9k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  14.9k|        One { s1: needle, v1: V::splat(needle) }
  113|  14.9k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  28.9M|    pub(crate) fn needle2(&self) -> u8 {
  468|  28.9M|        self.s2
  469|  28.9M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  14.9k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  14.9k|        One { s1: needle, v1: V::splat(needle) }
  113|  14.9k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.83M|    pub(crate) unsafe fn find_raw(
  494|  2.83M|        &self,
  495|  2.83M|        start: *const u8,
  496|  2.83M|        end: *const u8,
  497|  2.83M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.83M|        let topos = V::Mask::first_offset;
  505|  2.83M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.83M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  2.34M|            return Some(cur);
  517|   494k|        }
  518|   494k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   494k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   494k|        if len >= Self::LOOP_SIZE {
  522|   407k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   346k|                let a = V::load_aligned(cur);
  526|   346k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   346k|                let eqa1 = self.v1.cmpeq(a);
  528|   346k|                let eqb1 = self.v1.cmpeq(b);
  529|   346k|                let eqa2 = self.v2.cmpeq(a);
  530|   346k|                let eqb2 = self.v2.cmpeq(b);
  531|   346k|                let or1 = eqa1.or(eqb1);
  532|   346k|                let or2 = eqa2.or(eqb2);
  533|   346k|                let or3 = or1.or(or2);
  534|   346k|                if or3.movemask_will_have_non_zero() {
  535|   114k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|   114k|                    if mask.has_non_zero() {
  537|  60.3k|                        return Some(cur.add(topos(mask)));
  538|  54.5k|                    }
  539|  54.5k|
  540|  54.5k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  54.5k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   231k|                }
  544|   231k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   318k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   494k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   118k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.64k|                return Some(cur);
  554|   114k|            }
  555|   114k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   376k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   364k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   364k|            return self.search_chunk(cur, topos);
  566|  11.3k|        }
  567|  11.3k|        None
  568|  2.83M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.94M|    pub(crate) unsafe fn find_raw(
  494|  1.94M|        &self,
  495|  1.94M|        start: *const u8,
  496|  1.94M|        end: *const u8,
  497|  1.94M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.94M|        let topos = V::Mask::first_offset;
  505|  1.94M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.94M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  62.7k|            return Some(cur);
  517|  1.88M|        }
  518|  1.88M|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.88M|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.88M|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.88M|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  2.63M|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   756k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  5.71k|                return Some(cur);
  554|   750k|            }
  555|   750k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.87M|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.75M|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.75M|            return self.search_chunk(cur, topos);
  566|   118k|        }
  567|   118k|        None
  568|  1.94M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  17.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.3M|        Two {
  452|  17.3M|            s1: needle1,
  453|  17.3M|            s2: needle2,
  454|  17.3M|            v1: V::splat(needle1),
  455|  17.3M|            v2: V::splat(needle2),
  456|  17.3M|        }
  457|  17.3M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  4.63k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  4.63k|    start: *const u8,
 1150|  4.63k|    end: *const u8,
 1151|  4.63k|    confirm: F,
 1152|  4.63k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  4.63k|    let mut ptr = start;
 1155|  36.1k|    while ptr < end {
 1156|  31.7k|        if confirm(*ptr) {
 1157|    226|            return Some(ptr);
 1158|  31.5k|        }
 1159|  31.5k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.41k|    None
 1162|  4.63k|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  6.27k|    pub(crate) unsafe fn find_raw(
  144|  6.27k|        &self,
  145|  6.27k|        start: *const u8,
  146|  6.27k|        end: *const u8,
  147|  6.27k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.27k|        let topos = V::Mask::first_offset;
  155|  6.27k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.27k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.03k|            return Some(cur);
  167|  5.23k|        }
  168|  5.23k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  5.23k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  5.23k|        if len >= Self::LOOP_SIZE {
  172|  4.04k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  1.84k|                let a = V::load_aligned(cur);
  176|  1.84k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  1.84k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  1.84k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  1.84k|                let eqa = self.v1.cmpeq(a);
  180|  1.84k|                let eqb = self.v1.cmpeq(b);
  181|  1.84k|                let eqc = self.v1.cmpeq(c);
  182|  1.84k|                let eqd = self.v1.cmpeq(d);
  183|  1.84k|                let or1 = eqa.or(eqb);
  184|  1.84k|                let or2 = eqc.or(eqd);
  185|  1.84k|                let or3 = or1.or(or2);
  186|  1.84k|                if or3.movemask_will_have_non_zero() {
  187|    222|                    let mask = eqa.movemask();
  188|    222|                    if mask.has_non_zero() {
  189|     69|                        return Some(cur.add(topos(mask)));
  190|    153|                    }
  191|    153|
  192|    153|                    let mask = eqb.movemask();
  193|    153|                    if mask.has_non_zero() {
  194|     76|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     77|                    }
  196|     77|
  197|     77|                    let mask = eqc.movemask();
  198|     77|                    if mask.has_non_zero() {
  199|     34|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     43|                    }
  201|     43|
  202|     43|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     43|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  1.62k|                }
  206|  1.62k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.81k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  10.9k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  6.05k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     79|                return Some(cur);
  216|  5.97k|            }
  217|  5.97k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.93k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  4.70k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  4.70k|            return self.search_chunk(cur, topos);
  228|    232|        }
  229|    232|        None
  230|  6.27k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  17.3M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.3M|        Two {
  452|  17.3M|            s1: needle1,
  453|  17.3M|            s2: needle2,
  454|  17.3M|            v1: V::splat(needle1),
  455|  17.3M|            v2: V::splat(needle2),
  456|  17.3M|        }
  457|  17.3M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  11.0M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  11.0M|    start: *const u8,
 1150|  11.0M|    end: *const u8,
 1151|  11.0M|    confirm: F,
 1152|  11.0M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  11.0M|    let mut ptr = start;
 1155|  39.9M|    while ptr < end {
 1156|  29.0M|        if confirm(*ptr) {
 1157|   120k|            return Some(ptr);
 1158|  28.9M|        }
 1159|  28.9M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  10.8M|    None
 1162|  11.0M|}
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  6.47k|    unsafe fn search_chunk(
  417|  6.47k|        &self,
  418|  6.47k|        cur: *const u8,
  419|  6.47k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.47k|    ) -> Option<*const u8> {
  421|  6.47k|        let chunk = V::load_unaligned(cur);
  422|  6.47k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.47k|        if mask.has_non_zero() {
  424|    226|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.24k|            None
  427|       |        }
  428|  6.47k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  4.45M|    unsafe fn search_chunk(
  671|  4.45M|        &self,
  672|  4.45M|        cur: *const u8,
  673|  4.45M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  4.45M|    ) -> Option<*const u8> {
  675|  4.45M|        let chunk = V::load_unaligned(cur);
  676|  4.45M|        let eq1 = self.v1.cmpeq(chunk);
  677|  4.45M|        let eq2 = self.v2.cmpeq(chunk);
  678|  4.45M|        let mask = eq1.or(eq2).movemask();
  679|  4.45M|        if mask.has_non_zero() {
  680|  73.3k|            let mask1 = eq1.movemask();
  681|  73.3k|            let mask2 = eq2.movemask();
  682|  73.3k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  4.38M|            None
  685|       |        }
  686|  4.45M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  2.97k|    pub(crate) unsafe fn find_raw(
  144|  2.97k|        &self,
  145|  2.97k|        start: *const u8,
  146|  2.97k|        end: *const u8,
  147|  2.97k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.97k|        let topos = V::Mask::first_offset;
  155|  2.97k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.97k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     95|            return Some(cur);
  167|  2.87k|        }
  168|  2.87k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.87k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.87k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.87k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  3.79k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    993|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     79|                return Some(cur);
  216|    914|            }
  217|    914|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.79k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.50k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.50k|            return self.search_chunk(cur, topos);
  228|    290|        }
  229|    290|        None
  230|  2.97k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  3.31M|    unsafe fn search_chunk(
  671|  3.31M|        &self,
  672|  3.31M|        cur: *const u8,
  673|  3.31M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  3.31M|    ) -> Option<*const u8> {
  675|  3.31M|        let chunk = V::load_unaligned(cur);
  676|  3.31M|        let eq1 = self.v1.cmpeq(chunk);
  677|  3.31M|        let eq2 = self.v2.cmpeq(chunk);
  678|  3.31M|        let mask = eq1.or(eq2).movemask();
  679|  3.31M|        if mask.has_non_zero() {
  680|  2.34M|            let mask1 = eq1.movemask();
  681|  2.34M|            let mask2 = eq2.movemask();
  682|  2.34M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   967k|            None
  685|       |        }
  686|  3.31M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  29.0M|    pub(crate) fn needle1(&self) -> u8 {
  462|  29.0M|        self.s1
  463|  29.0M|    }

_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  29.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  29.0M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  29.0M|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  6.27k|    unsafe fn find_raw_avx2(
  397|  6.27k|        &self,
  398|  6.27k|        start: *const u8,
  399|  6.27k|        end: *const u8,
  400|  6.27k|    ) -> Option<*const u8> {
  401|  6.27k|        self.avx2.find_raw(start, end)
  402|  6.27k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  31.7k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  31.7k|                    b == self.sse2.needle1()
  194|  31.7k|                })
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  17.3M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  17.3M|        Two {
  558|  17.3M|            sse2: generic::Two::new(needle1, needle2),
  559|  17.3M|            avx2: generic::Two::new(needle1, needle2),
  560|  17.3M|        }
  561|  17.3M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  17.3M|    pub unsafe fn find_raw(
  655|  17.3M|        &self,
  656|  17.3M|        start: *const u8,
  657|  17.3M|        end: *const u8,
  658|  17.3M|    ) -> Option<*const u8> {
  659|  17.3M|        if start >= end {
  660|  1.61M|            return None;
  661|  15.7M|        }
  662|  15.7M|        let len = end.distance(start);
  663|  15.7M|        if len < __m256i::BYTES {
  664|  12.9M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  11.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  11.0M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.94M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.83M|        }
  676|  2.83M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.83M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.83M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.83M|        // responsibility.
  680|  2.83M|        //
  681|  2.83M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.83M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.83M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.83M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.83M|        // The real problem is that a routine with a `target_feature`
  686|  2.83M|        // annotation generally can't be inlined into caller code unless
  687|  2.83M|        // the caller code has the same target feature annotations. Namely,
  688|  2.83M|        // the common case (at time of writing) is for calling code to not
  689|  2.83M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.83M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.83M|        // handle some of the short-haystack cases above without touching the
  692|  2.83M|        // architecture specific code.
  693|  2.83M|        self.find_raw_avx2(start, end)
  694|  17.3M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.83M|    unsafe fn find_raw_avx2(
  805|  2.83M|        &self,
  806|  2.83M|        start: *const u8,
  807|  2.83M|        end: *const u8,
  808|  2.83M|    ) -> Option<*const u8> {
  809|  2.83M|        self.avx2.find_raw(start, end)
  810|  2.83M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  14.9k|    pub unsafe fn find_raw(
  180|  14.9k|        &self,
  181|  14.9k|        start: *const u8,
  182|  14.9k|        end: *const u8,
  183|  14.9k|    ) -> Option<*const u8> {
  184|  14.9k|        if start >= end {
  185|  1.09k|            return None;
  186|  13.8k|        }
  187|  13.8k|        let len = end.distance(start);
  188|  13.8k|        if len < __m256i::BYTES {
  189|  7.61k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  4.63k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  4.63k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  2.97k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  6.27k|        }
  201|  6.27k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  6.27k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  6.27k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  6.27k|        // responsibility.
  205|  6.27k|        //
  206|  6.27k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  6.27k|        // means we'd have to annotate this routine with `target_feature`.
  208|  6.27k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  6.27k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  6.27k|        // The real problem is that a routine with a `target_feature`
  211|  6.27k|        // annotation generally can't be inlined into caller code unless
  212|  6.27k|        // the caller code has the same target feature annotations. Namely,
  213|  6.27k|        // the common case (at time of writing) is for calling code to not
  214|  6.27k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  6.27k|        // `target_feature` on this routine, it can be inlined which will
  216|  6.27k|        // handle some of the short-haystack cases above without touching the
  217|  6.27k|        // architecture specific code.
  218|  6.27k|        self.find_raw_avx2(start, end)
  219|  14.9k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.94M|    unsafe fn find_raw_sse2(
  765|  1.94M|        &self,
  766|  1.94M|        start: *const u8,
  767|  1.94M|        end: *const u8,
  768|  1.94M|    ) -> Option<*const u8> {
  769|  1.94M|        self.sse2.find_raw(start, end)
  770|  1.94M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  2.97k|    unsafe fn find_raw_sse2(
  337|  2.97k|        &self,
  338|  2.97k|        start: *const u8,
  339|  2.97k|        end: *const u8,
  340|  2.97k|    ) -> Option<*const u8> {
  341|  2.97k|        self.sse2.find_raw(start, end)
  342|  2.97k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  14.9k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  14.9k|        One {
   71|  14.9k|            sse2: generic::One::new(needle),
   72|  14.9k|            avx2: generic::One::new(needle),
   73|  14.9k|        }
   74|  14.9k|    }

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  17.3M|pub(crate) fn memchr2_raw(
  221|  17.3M|    n1: u8,
  222|  17.3M|    n2: u8,
  223|  17.3M|    start: *const u8,
  224|  17.3M|    end: *const u8,
  225|  17.3M|) -> Option<*const u8> {
  226|  17.3M|    // SAFETY: We provide a valid function pointer type.
  227|  17.3M|    unsafe_ifunc!(
  228|  17.3M|        Two,
  229|  17.3M|        find_raw,
  230|  17.3M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  17.3M|        Option<*const u8>,
  232|  17.3M|        start,
  233|  17.3M|        end,
  234|  17.3M|        n1,
  235|  17.3M|        n2
  236|  17.3M|    )
  237|  17.3M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|  14.9k|pub(crate) fn memchr_raw(
  175|  14.9k|    n1: u8,
  176|  14.9k|    start: *const u8,
  177|  14.9k|    end: *const u8,
  178|  14.9k|) -> Option<*const u8> {
  179|  14.9k|    // SAFETY: We provide a valid function pointer type.
  180|  14.9k|    unsafe_ifunc!(
  181|  14.9k|        One,
  182|  14.9k|        find_raw,
  183|  14.9k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  14.9k|        Option<*const u8>,
  185|  14.9k|        start,
  186|  14.9k|        end,
  187|  14.9k|        n1
  188|  14.9k|    )
  189|  14.9k|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  17.3M|        unsafe fn find_avx2(
   79|  17.3M|            $($needle: u8),+,
   80|  17.3M|            $hay_start: *const u8,
   81|  17.3M|            $hay_end: *const u8,
   82|  17.3M|        ) -> $retty {
   83|  17.3M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  17.3M|            $memchrty::new_unchecked($($needle),+)
   85|  17.3M|                .$memchrfind($hay_start, $hay_end)
   86|  17.3M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  14.9k|        unsafe fn find_avx2(
   79|  14.9k|            $($needle: u8),+,
   80|  14.9k|            $hay_start: *const u8,
   81|  14.9k|            $hay_end: *const u8,
   82|  14.9k|        ) -> $retty {
   83|  14.9k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  14.9k|            $memchrty::new_unchecked($($needle),+)
   85|  14.9k|                .$memchrfind($hay_start, $hay_end)
   86|  14.9k|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  25.3M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  25.3M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  25.3M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  25.3M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  2.38M|    fn as_usize(self) -> usize {
   27|  2.38M|        self as usize
   28|  2.38M|    }

_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCs4HPcYfJdze0_5oxttl:
  377|  14.4M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  14.4M|        Memchr2 {
  379|  14.4M|            needle1,
  380|  14.4M|            needle2,
  381|  14.4M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  14.4M|        }
  383|  14.4M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCs4HPcYfJdze0_5oxttl:
  574|  17.3M|unsafe fn memchr2_raw(
  575|  17.3M|    needle1: u8,
  576|  17.3M|    needle2: u8,
  577|  17.3M|    start: *const u8,
  578|  17.3M|    end: *const u8,
  579|  17.3M|) -> Option<*const u8> {
  580|  17.3M|    #[cfg(target_arch = "x86_64")]
  581|  17.3M|    {
  582|  17.3M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  17.3M|    }
  584|  17.3M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  17.3M|    {
  586|  17.3M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  17.3M|    }
  588|  17.3M|    #[cfg(target_arch = "aarch64")]
  589|  17.3M|    {
  590|  17.3M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  17.3M|    }
  592|  17.3M|    #[cfg(not(any(
  593|  17.3M|        target_arch = "x86_64",
  594|  17.3M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  17.3M|        target_arch = "aarch64"
  596|  17.3M|    )))]
  597|  17.3M|    {
  598|  17.3M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  17.3M|            .find_raw(start, end)
  600|  17.3M|    }
  601|  17.3M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCs4HPcYfJdze0_5oxttl:
  232|  14.4M|pub fn memchr2_iter<'h>(
  233|  14.4M|    needle1: u8,
  234|  14.4M|    needle2: u8,
  235|  14.4M|    haystack: &'h [u8],
  236|  14.4M|) -> Memchr2<'h> {
  237|  14.4M|    Memchr2::new(needle1, needle2, haystack)
  238|  14.4M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCs4HPcYfJdze0_5oxttl:
   27|  14.9k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  14.9k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  14.9k|    // pointer between start and end.
   30|  14.9k|    unsafe {
   31|  14.9k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  14.9k|        })
   34|  14.9k|    }
   35|  14.9k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr7memchr2Cs4HPcYfJdze0_5oxttl:
   92|  2.91M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  2.91M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  2.91M|    // pointer between start and end.
   95|  2.91M|    unsafe {
   96|  2.91M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  2.91M|        })
   99|  2.91M|    }
  100|  2.91M|}
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs4HPcYfJdze0_5oxttl:
  390|  14.4M|    fn next(&mut self) -> Option<usize> {
  391|  14.4M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  14.4M|        // pointers returns will fall within the start and end bounds, and this
  393|  14.4M|        // upholds the safety contract of `self.it.next`.
  394|  14.4M|        unsafe {
  395|  14.4M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  14.4M|        }
  397|  14.4M|    }
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr7memchr20Cs4HPcYfJdze0_5oxttl:
   96|  2.91M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  2.91M|            memchr2_raw(needle1, needle2, start, end)
   98|  2.91M|        })
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Cs4HPcYfJdze0_5oxttl:
  395|  14.4M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|  14.9k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  14.9k|            memchr_raw(needle, start, end)
   33|  14.9k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|  14.9k|unsafe fn memchr_raw(
  505|  14.9k|    needle: u8,
  506|  14.9k|    start: *const u8,
  507|  14.9k|    end: *const u8,
  508|  14.9k|) -> Option<*const u8> {
  509|  14.9k|    #[cfg(target_arch = "x86_64")]
  510|  14.9k|    {
  511|  14.9k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  14.9k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  14.9k|        // time. This function also handles using a fallback if neither AVX2
  514|  14.9k|        // nor SSE2 (unusual) are available.
  515|  14.9k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  14.9k|    }
  517|  14.9k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  14.9k|    {
  519|  14.9k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  14.9k|    }
  521|  14.9k|    #[cfg(target_arch = "aarch64")]
  522|  14.9k|    {
  523|  14.9k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  14.9k|    }
  525|  14.9k|    #[cfg(not(any(
  526|  14.9k|        target_arch = "x86_64",
  527|  14.9k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  14.9k|        target_arch = "aarch64"
  529|  14.9k|    )))]
  530|  14.9k|    {
  531|  14.9k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  14.9k|    }
  533|  14.9k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  4.46M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  4.46M|            _mm_loadu_si128(data as *const __m128i)
  222|  4.46M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  8.91M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  8.91M|            _mm_cmpeq_epi8(self, vector2)
  232|  8.91M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  2.53M|    fn first_offset(self) -> usize {
  174|  2.53M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  2.53M|        // the bytes so we are in practice), where the most significant byte
  176|  2.53M|        // is at a higher address. That means the least significant bit that
  177|  2.53M|        // is set corresponds to the position of our first matching byte.
  178|  2.53M|        // That position corresponds to the number of zeros after the least
  179|  2.53M|        // significant bit.
  180|  2.53M|        self.get_for_offset().trailing_zeros() as usize
  181|  2.53M|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  2.53M|    fn get_for_offset(self) -> u32 {
  129|  2.53M|        #[cfg(target_endian = "big")]
  130|  2.53M|        {
  131|  2.53M|            self.0.swap_bytes()
  132|  2.53M|        }
  133|  2.53M|        #[cfg(target_endian = "little")]
  134|  2.53M|        {
  135|  2.53M|            self.0
  136|  2.53M|        }
  137|  2.53M|    }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  8.26M|    fn has_non_zero(self) -> bool {
  149|  8.26M|        self.0 != 0
  150|  8.26M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  4.60M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  4.60M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  4.60M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  8.72M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  8.72M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  8.72M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   348k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   348k|        self.movemask().has_non_zero()
   67|   348k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  3.33M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  3.33M|            _mm256_loadu_si256(data as *const __m256i)
  272|  3.33M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  8.04M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  8.04M|            _mm256_cmpeq_epi8(self, vector2)
  282|  8.04M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  34.8M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  34.8M|            _mm_set1_epi8(byte as i8)
  212|  34.8M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  4.45M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  4.45M|            _mm_or_si128(self, vector2)
  242|  4.45M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  2.59M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  2.59M|        SensibleMoveMask(self.0 | other.0)
  165|  2.59M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   700k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   700k|            _mm256_load_si256(data as *const __m256i)
  267|   700k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  34.8M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  34.8M|            _mm256_set1_epi8(byte as i8)
  262|  34.8M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  4.36M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  4.36M|            _mm256_or_si256(self, vector2)
  292|  4.36M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCscKWFZP2b1L7_13libfuzzer_sys:
   49|  8.29k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  8.29k|        // An `Acquire` load is enough because that makes all the initialization
   51|  8.29k|        // operations visible to us, and, this being a fast path, weaker
   52|  8.29k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  8.29k|        // `SeqCst` operations on the slow path.
   54|  8.29k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  8.29k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCscKWFZP2b1L7_13libfuzzer_sys:
  963|  8.29k|        pub fn get(&self) -> Option<&T> {
  964|  8.29k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  8.29k|                None
  969|       |            }
  970|  8.29k|        }

_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE5parseCs4HPcYfJdze0_5oxttl:
   49|  24.1k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  24.1k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  20.1k|        Ok(Self { tag, positions })
   52|  24.1k|    }
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE10into_innerCs4HPcYfJdze0_5oxttl:
   62|  20.1k|    pub fn into_inner(self) -> T {
   63|  20.1k|        self.tag
   64|  20.1k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs4HPcYfJdze0_5oxttl:
  558|  24.1k|#[derive(Default)]
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsflNycjbQork_5oxrdf:
  571|  25.9k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsflNycjbQork_5oxrdf:
  571|  3.97k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsflNycjbQork_5oxrdf:
  632|  20.6k|fn parse_langtag(
  633|  20.6k|    input: &str,
  634|  20.6k|    output: &mut impl OutputBuffer,
  635|  20.6k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  20.6k|    #[derive(PartialEq, Eq)]
  637|  20.6k|    enum State {
  638|  20.6k|        Start,
  639|  20.6k|        AfterLanguage,
  640|  20.6k|        AfterExtLang,
  641|  20.6k|        AfterScript,
  642|  20.6k|        AfterRegion,
  643|  20.6k|        InExtension { expected: bool },
  644|  20.6k|        InPrivateUse { expected: bool },
  645|  20.6k|    }
  646|  20.6k|
  647|  20.6k|    let mut state = State::Start;
  648|  20.6k|    let mut language_end = 0;
  649|  20.6k|    let mut extlang_end = 0;
  650|  20.6k|    let mut script_end = 0;
  651|  20.6k|    let mut region_end = 0;
  652|  20.6k|    let mut variant_end = 0;
  653|  20.6k|    let mut extension_end = 0;
  654|  20.6k|    let mut extlangs_count = 0;
  655|  38.9k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  38.9k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|  38.9k|        }
  661|  38.9k|        if subtag.len() > 8 {
  662|    240|            return Err(LanguageTagParseError {
  663|    240|                kind: TagParseErrorKind::SubtagTooLong,
  664|    240|            });
  665|  38.7k|        }
  666|  38.7k|        if state == State::Start {
  667|       |            // Primary language
  668|  20.3k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  2.00k|                return Err(LanguageTagParseError {
  670|  2.00k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  2.00k|                });
  672|  18.3k|            }
  673|  18.3k|            language_end = end;
  674|  18.3k|            output.extend(to_lowercase(subtag));
  675|  18.3k|            if subtag.len() < 4 {
  676|  9.38k|                // extlangs are only allowed for short language tags
  677|  9.38k|                state = State::AfterLanguage;
  678|  9.38k|            } else {
  679|  9.00k|                state = State::AfterExtLang;
  680|  9.00k|            }
  681|  18.3k|        } else if let State::InPrivateUse { .. } = state {
  682|  2.65k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  2.65k|            }
  687|  2.65k|            output.push('-');
  688|  2.65k|            output.extend(to_lowercase(subtag));
  689|  2.65k|            state = State::InPrivateUse { expected: false };
  690|  15.6k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  2.88k|            if let State::InExtension { expected: true } = state {
  693|    248|                return Err(LanguageTagParseError {
  694|    248|                    kind: TagParseErrorKind::EmptyExtension,
  695|    248|                });
  696|  2.63k|            }
  697|  2.63k|            output.push('-');
  698|  2.63k|            output.push('x');
  699|  2.63k|            state = State::InPrivateUse { expected: true };
  700|  12.7k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  3.18k|            if let State::InExtension { expected: true } = state {
  703|    342|                return Err(LanguageTagParseError {
  704|    342|                    kind: TagParseErrorKind::EmptyExtension,
  705|    342|                });
  706|  2.84k|            }
  707|  2.84k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  2.84k|            output.push('-');
  709|  2.84k|            output.push(extension_tag);
  710|  2.84k|            state = State::InExtension { expected: true };
  711|  9.58k|        } else if let State::InExtension { .. } = state {
  712|  3.18k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  3.18k|            }
  717|  3.18k|            extension_end = end;
  718|  3.18k|            output.push('-');
  719|  3.18k|            output.extend(to_lowercase(subtag));
  720|  3.18k|            state = State::InExtension { expected: false };
  721|  6.40k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|    716|            extlangs_count += 1;
  723|    716|            if extlangs_count > 3 {
  724|     96|                return Err(LanguageTagParseError {
  725|     96|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|     96|                });
  727|    620|            }
  728|    620|            // valid extlangs
  729|    620|            extlang_end = end;
  730|    620|            output.push('-');
  731|    620|            output.extend(to_lowercase(subtag));
  732|  5.68k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  5.24k|            && subtag.len() == 4
  734|    249|            && is_alphabetic(subtag)
  735|    249|        {
  736|    249|            // Script
  737|    249|            script_end = end;
  738|    249|            output.push('-');
  739|    249|            output.extend(to_uppercase_first(subtag));
  740|    249|            state = State::AfterScript;
  741|  5.43k|        } else if (state == State::AfterLanguage
  742|    855|            || state == State::AfterExtLang
  743|    442|            || state == State::AfterScript)
  744|  5.09k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  1.12k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  3.97k|        {
  747|  3.97k|            // Region
  748|  3.97k|            region_end = end;
  749|  3.97k|            output.push('-');
  750|  3.97k|            output.extend(to_uppercase(subtag));
  751|  3.97k|            state = State::AfterRegion;
  752|  3.97k|        } else if (state == State::AfterLanguage
  753|    530|            || state == State::AfterExtLang
  754|    426|            || state == State::AfterScript
  755|    343|            || state == State::AfterRegion)
  756|  1.46k|            && is_alphanumeric(subtag)
  757|  1.46k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|    370|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  1.09k|        {
  760|  1.09k|            // Variant
  761|  1.09k|            variant_end = end;
  762|  1.09k|            output.push('-');
  763|  1.09k|            output.extend(to_lowercase(subtag));
  764|  1.09k|            state = State::AfterRegion;
  765|  1.09k|        } else {
  766|    370|            return Err(LanguageTagParseError {
  767|    370|                kind: TagParseErrorKind::InvalidSubtag,
  768|    370|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  17.3k|    if let State::InExtension { expected: true } = state {
  774|    592|        return Err(LanguageTagParseError {
  775|    592|            kind: TagParseErrorKind::EmptyExtension,
  776|    592|        });
  777|  16.7k|    }
  778|  16.7k|    if let State::InPrivateUse { expected: true } = state {
  779|    156|        return Err(LanguageTagParseError {
  780|    156|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    156|        });
  782|  16.5k|    }
  783|  16.5k|
  784|  16.5k|    //We make sure we have not skipped anyone
  785|  16.5k|    if extlang_end < language_end {
  786|  16.2k|        extlang_end = language_end;
  787|  16.2k|    }
  788|  16.5k|    if script_end < extlang_end {
  789|  16.3k|        script_end = extlang_end;
  790|  16.3k|    }
  791|  16.5k|    if region_end < script_end {
  792|  12.8k|        region_end = script_end;
  793|  12.8k|    }
  794|  16.5k|    if variant_end < region_end {
  795|  15.4k|        variant_end = region_end;
  796|  15.4k|    }
  797|  16.5k|    if extension_end < variant_end {
  798|  14.9k|        extension_end = variant_end;
  799|  14.9k|    }
  800|       |
  801|  16.5k|    Ok(TagElementsPositions {
  802|  16.5k|        language_end,
  803|  16.5k|        extlang_end,
  804|  16.5k|        script_end,
  805|  16.5k|        region_end,
  806|  16.5k|        variant_end,
  807|  16.5k|        extension_end,
  808|  16.5k|    })
  809|  20.6k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsflNycjbQork_5oxrdf:
  571|    249|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsflNycjbQork_5oxrdf:
  587|  24.1k|fn parse_language_tag(
  588|  24.1k|    input: &str,
  589|  24.1k|    output: &mut impl OutputBuffer,
  590|  24.1k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  24.1k|    if let Some(tag) = GRANDFATHEREDS
  593|  24.1k|        .iter()
  594|  24.1k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  24.1k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  3.55k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  3.55k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  3.55k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  3.55k|            Ok(TagElementsPositions {
  618|  3.55k|                language_end: input.len(),
  619|  3.55k|                extlang_end: input.len(),
  620|  3.55k|                script_end: input.len(),
  621|  3.55k|                region_end: input.len(),
  622|  3.55k|                variant_end: input.len(),
  623|  3.55k|                extension_end: input.len(),
  624|  3.55k|            })
  625|       |        }
  626|       |    } else {
  627|  20.6k|        parse_langtag(input, output)
  628|       |    }
  629|  24.1k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsflNycjbQork_5oxrdf:
  571|  3.55k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsflNycjbQork_5oxrdf:
  594|   628k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCsflNycjbQork_5oxrdf:
  891|  3.97k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  3.97k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  3.97k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsflNycjbQork_5oxrdf:
  636|  61.2k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCsflNycjbQork_5oxrdf:
  881|  10.4k|fn is_alphanumeric(s: &str) -> bool {
  882|  10.4k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  10.4k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCsflNycjbQork_5oxrdf:
  897|    249|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|    249|    let mut chars = s.chars();
  899|    249|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|    249|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsflNycjbQork_5oxrdf:
  563|  22.7k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCsflNycjbQork_5oxrdf:
  871|  24.4k|fn is_alphabetic(s: &str) -> bool {
  872|  24.4k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  24.4k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCsflNycjbQork_5oxrdf:
  886|  3.55k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  3.55k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  3.55k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCsflNycjbQork_5oxrdf:
  903|  25.9k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  25.9k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  25.9k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCsflNycjbQork_5oxrdf:
  876|    334|fn is_numeric(s: &str) -> bool {
  877|    334|    s.chars().all(|x| x.is_ascii_digit())
  878|    334|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsflNycjbQork_5oxrdf:
  862|  56.2k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  56.2k|        let tag = self.split.next()?;
  864|  38.9k|        let tag_end = self.position + tag.len();
  865|  38.9k|        self.position = tag_end + 1;
  866|  38.9k|        Some((tag, tag_end))
  867|  56.2k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCsflNycjbQork_5oxrdf:
  850|  20.6k|    fn new(input: &'a str) -> Self {
  851|  20.6k|        Self {
  852|  20.6k|            split: input.split('-'),
  853|  20.6k|            position: 0,
  854|  20.6k|        }
  855|  20.6k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|    334|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|  23.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_Cs87w0kKV82sz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  490|  4.04k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  4.04k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  1.18k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    156|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|    370|            TagParseErrorKind::InvalidSubtag => write!(
  502|    370|                f,
  503|    370|                "A subtag fails to parse, it does not match any other subtags"
  504|    370|            ),
  505|  2.00k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|    240|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|     96|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  4.04k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  84.7k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  56.9k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer4pushCs4HPcYfJdze0_5oxttl:
 1104|  3.51M|    fn push(&mut self, c: char) {
 1105|  3.51M|        self.push(c);
 1106|  3.51M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer5clearCs4HPcYfJdze0_5oxttl:
 1114|  78.6k|    fn clear(&mut self) {
 1115|  78.6k|        self.clear();
 1116|  78.6k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8push_strCs4HPcYfJdze0_5oxttl:
 1109|   581k|    fn push_str(&mut self, s: &str) {
 1110|   581k|        self.push_str(s);
 1111|   581k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8truncateCs4HPcYfJdze0_5oxttl:
 1119|   723k|    fn truncate(&mut self, new_len: usize) {
 1120|   723k|        self.truncate(new_len);
 1121|   723k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer3lenCs4HPcYfJdze0_5oxttl:
 1124|  1.41M|    fn len(&self) -> usize {
 1125|  1.41M|        self.len()
 1126|  1.41M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer6as_strCs4HPcYfJdze0_5oxttl:
 1129|  2.19M|    fn as_str(&self) -> &str {
 1130|  2.19M|        self.as_str()
 1131|  2.19M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCs4HPcYfJdze0_5oxttl:
 1629|   152k|fn is_url_query_code_point(c: char) -> bool {
 1630|   152k|    is_url_code_point(c)
 1631|  5.20k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   152k|}
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs4HPcYfJdze0_5oxttl:
 1092|  46.9k|    fn len(&self) -> usize {
 1093|  46.9k|        self.len
 1094|  46.9k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs4HPcYfJdze0_5oxttl:
 1087|  9.78k|    fn truncate(&mut self, new_len: usize) {
 1088|  9.78k|        self.len = new_len;
 1089|  9.78k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs4HPcYfJdze0_5oxttl:
 1065|  11.7k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs4HPcYfJdze0_5oxttl:
 1072|   582k|    fn push(&mut self, c: char) {
 1073|   582k|        self.len += c.len_utf8();
 1074|   582k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs4HPcYfJdze0_5oxttl:
 1097|  25.5k|    fn as_str(&self) -> &str {
 1098|  25.5k|        ""
 1099|  25.5k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCs4HPcYfJdze0_5oxttl:
 1141|  4.10M|    fn next(&mut self) -> Option<char> {
 1142|  4.10M|        if let Some(head) = self.value.next() {
 1143|  3.51M|            self.position += head.len_utf8();
 1144|  3.51M|            Some(head)
 1145|       |        } else {
 1146|   595k|            None
 1147|       |        }
 1148|  4.10M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCs4HPcYfJdze0_5oxttl:
 1151|  1.19M|    fn front(&self) -> Option<char> {
 1152|  1.19M|        self.value.clone().next()
 1153|  1.19M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCs4HPcYfJdze0_5oxttl:
 1156|   376k|    fn starts_with(&self, c: char) -> bool {
 1157|   376k|        self.value.as_str().starts_with(c)
 1158|   376k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCs4HPcYfJdze0_5oxttl:
 1584|  1.14M|fn is_url_code_point(c: char) -> bool {
 1585|  1.14M|    matches!(c,
 1586|   217k|        'a'..='z'
 1587|   246k|        | 'A'..='Z'
 1588|   286k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  17.2k|        | '\u{A0}'..='\u{D7FF}'
 1609|  4.18k|        | '\u{F900}'..='\u{FDCF}'
 1610|  3.24k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  3.24k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  3.24k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  3.24k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  3.24k|        | '\u{40000}'..='\u{4FFFD}'
 1615|    800|        | '\u{50000}'..='\u{5FFFD}'
 1616|    778|        | '\u{60000}'..='\u{6FFFD}'
 1617|    778|        | '\u{70000}'..='\u{7FFFD}'
 1618|    778|        | '\u{80000}'..='\u{8FFFD}'
 1619|    770|        | '\u{90000}'..='\u{9FFFD}'
 1620|    770|        | '\u{A0000}'..='\u{AFFFD}'
 1621|      4|        | '\u{B0000}'..='\u{BFFFD}'
 1622|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  1.14M|}
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E12parse_schemeCs4HPcYfJdze0_5oxttl:
 1213|  33.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   126k|        loop {
 1215|   126k|            let c = self.input.next();
 1216|   122k|            match c {
 1217|   122k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  93.1k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  7.68k|                    self.output.push(':');
 1222|  7.68k|                    self.output_positions.scheme_end = self.output.len();
 1223|  7.68k|                    self.input_scheme_end = self.input.position;
 1224|  7.68k|                    return if self.input.starts_with('/') {
 1225|  3.76k|                        self.input.next();
 1226|  3.76k|                        self.output.push('/');
 1227|  3.76k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  3.92k|                        self.output_positions.authority_end = self.output.len();
 1230|  3.92k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  26.0k|                    self.input = ParserInput {
 1235|  26.0k|                        value: self.iri.chars(),
 1236|  26.0k|                        position: 0,
 1237|  26.0k|                    }; // reset
 1238|  26.0k|                    self.output.clear();
 1239|  26.0k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  33.7k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCs4HPcYfJdze0_5oxttl:
   70|  11.7k|    pub fn parse_unchecked(iri: T) -> Self {
   71|  11.7k|        let positions =
   72|  11.7k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|  11.7k|        Self { iri, positions }
   74|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCs4HPcYfJdze0_5oxttl:
 1468|  8.93k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   108k|        loop {
 1470|   108k|            let c = self.input.next();
 1471|   108k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  12.7k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  12.7k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  12.7k|                    } else if c == Some('/') {
 1481|  3.83k|                        self.output.push('/');
 1482|  8.93k|                    }
 1483|       |
 1484|  12.7k|                    if c == Some('?') {
 1485|  1.89k|                        self.output_positions.path_end = self.output.len();
 1486|  1.89k|                        self.output.push('?');
 1487|  1.89k|                        return self.parse_query();
 1488|  10.8k|                    } else if c == Some('#') {
 1489|    950|                        self.output_positions.path_end = self.output.len();
 1490|    950|                        self.output_positions.query_end = self.output.len();
 1491|    950|                        self.output.push('#');
 1492|    950|                        return self.parse_fragment();
 1493|  9.92k|                    } else if c.is_none() {
 1494|  6.08k|                        self.output_positions.path_end = self.output.len();
 1495|  6.08k|                        self.output_positions.query_end = self.output.len();
 1496|  6.08k|                        return Ok(());
 1497|  3.83k|                    }
 1498|       |                }
 1499|  95.3k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  8.93k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E10parse_portCs4HPcYfJdze0_5oxttl:
 1420|  1.39k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  4.59k|        loop {
 1422|  4.59k|            let c = self.input.next();
 1423|  4.59k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.39k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.39k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  3.19k|                Some(c) => {
 1429|  3.19k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  3.19k|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.39k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E27read_url_codepoint_or_echarCs4HPcYfJdze0_5oxttl:
 1534|   644k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   644k|        if UNCHECKED || is_url_code_point(c) {
 1536|   644k|            self.output.push(c);
 1537|   644k|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   644k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCs4HPcYfJdze0_5oxttl:
 1245|  10.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  10.5k|        if self.input.starts_with('/') {
 1247|  10.0k|            self.input.next();
 1248|  10.0k|            self.output.push('/');
 1249|  10.0k|            self.parse_authority()
 1250|       |        } else {
 1251|    558|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    558|            self.parse_path()
 1253|       |        }
 1254|  10.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCs4HPcYfJdze0_5oxttl:
 1439|  10.0k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  10.0k|        match c {
 1441|       |            None => {
 1442|  2.15k|                self.output_positions.path_end = self.output.len();
 1443|  2.15k|                self.output_positions.query_end = self.output.len();
 1444|  2.15k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    317|                self.output_positions.path_end = self.output.len();
 1448|    317|                self.output.push('?');
 1449|    317|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    334|                self.output_positions.path_end = self.output.len();
 1453|    334|                self.output_positions.query_end = self.output.len();
 1454|    334|                self.output.push('#');
 1455|    334|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  7.22k|                self.output.push('/');
 1459|  7.22k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  10.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E11parse_queryCs4HPcYfJdze0_5oxttl:
 1504|  6.58k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  99.9k|        while let Some(c) = self.input.next() {
 1506|  93.9k|            if c == '#' {
 1507|    620|                self.output_positions.query_end = self.output.len();
 1508|    620|                self.output.push('#');
 1509|    620|                return self.parse_fragment();
 1510|       |            } else {
 1511|  93.3k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  5.96k|        self.output_positions.query_end = self.output.len();
 1515|  5.96k|        Ok(())
 1516|  6.58k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E20parse_relative_slashCs4HPcYfJdze0_5oxttl:
 1317|  96.4k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|  96.4k|        if self.input.starts_with('/') {
 1319|  4.34k|            self.input.next();
 1320|  4.34k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|  4.34k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|  4.34k|            self.output.push('/');
 1323|  4.34k|            self.output.push('/');
 1324|  4.34k|            self.parse_authority()
 1325|       |        } else {
 1326|  92.1k|            self.output
 1327|  92.1k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|  92.1k|            self.output.push('/');
 1329|  92.1k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|  92.1k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|  92.1k|            self.parse_path()
 1332|       |        }
 1333|  96.4k|    }
_RNvXsg_CsbOXESBDtkxG_5oxiriINtB5_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCs4HPcYfJdze0_5oxttl:
  417|  74.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|  74.8k|        self.iri.fmt(f)
  419|  74.8k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E23parse_path_or_authorityCs4HPcYfJdze0_5oxttl:
 1245|  7.56k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  7.56k|        if self.input.starts_with('/') {
 1247|  6.42k|            self.input.next();
 1248|  6.42k|            self.output.push('/');
 1249|  6.42k|            self.parse_authority()
 1250|       |        } else {
 1251|  1.14k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  1.14k|            self.parse_path()
 1253|       |        }
 1254|  7.56k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E16parse_path_startCs4HPcYfJdze0_5oxttl:
 1439|  9.41k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  9.41k|        match c {
 1441|       |            None => {
 1442|  6.73k|                self.output_positions.path_end = self.output.len();
 1443|  6.73k|                self.output_positions.query_end = self.output.len();
 1444|  6.73k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    406|                self.output_positions.path_end = self.output.len();
 1448|    406|                self.output.push('?');
 1449|    406|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    926|                self.output_positions.path_end = self.output.len();
 1453|    926|                self.output_positions.query_end = self.output.len();
 1454|    926|                self.output.push('#');
 1455|    926|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  1.34k|                self.output.push('/');
 1459|  1.34k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  9.41k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCs4HPcYfJdze0_5oxttl:
  717|  6.60k|    pub fn path(&self) -> &str {
  718|  6.60k|        self.0.path()
  719|  6.60k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCs4HPcYfJdze0_5oxttl:
 1335|  10.0k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   112k|        loop {
 1338|   112k|            let c = self.input.next();
 1339|   112k|            match c {
 1340|       |                Some('@') => {
 1341|    244|                    self.output.push('@');
 1342|    244|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  9.78k|                    self.input = ParserInput {
 1346|  9.78k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  9.78k|                        position: self.input_scheme_end + 2,
 1348|  9.78k|                    };
 1349|  9.78k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  9.78k|                    return self.parse_host();
 1351|       |                }
 1352|   102k|                Some(c) => {
 1353|   102k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  10.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCs4HPcYfJdze0_5oxttl:
 1518|  1.53k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  57.6k|        while let Some(c) = self.input.next() {
 1520|  56.1k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  1.53k|        Ok(())
 1523|  1.53k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_strCs4HPcYfJdze0_5oxttl:
  651|  4.13k|    pub fn as_str(&self) -> &str {
  652|  4.13k|        self.0.as_str()
  653|  4.13k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E5parseCs4HPcYfJdze0_5oxttl:
 1174|   200k|    fn parse(
 1175|   200k|        iri: &'a str,
 1176|   200k|        base: Option<IriRef<&'a str>>,
 1177|   200k|        output: &'a mut O,
 1178|   200k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   200k|        let mut parser = Self {
 1180|   200k|            iri,
 1181|   200k|            base,
 1182|   200k|            input: ParserInput {
 1183|   200k|                value: iri.chars(),
 1184|   200k|                position: 0,
 1185|   200k|            },
 1186|   200k|            output,
 1187|   200k|            output_positions: IriElementsPositions {
 1188|   200k|                scheme_end: 0,
 1189|   200k|                authority_end: 0,
 1190|   200k|                path_end: 0,
 1191|   200k|                query_end: 0,
 1192|   200k|            },
 1193|   200k|            input_scheme_end: 0,
 1194|   200k|        };
 1195|   200k|        parser.parse_scheme_start()?;
 1196|   200k|        Ok(parser.output_positions)
 1197|   200k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E12parse_schemeCs4HPcYfJdze0_5oxttl:
 1213|  67.5k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   255k|        loop {
 1215|   255k|            let c = self.input.next();
 1216|   246k|            match c {
 1217|   246k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   187k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  15.0k|                    self.output.push(':');
 1222|  15.0k|                    self.output_positions.scheme_end = self.output.len();
 1223|  15.0k|                    self.input_scheme_end = self.input.position;
 1224|  15.0k|                    return if self.input.starts_with('/') {
 1225|  7.56k|                        self.input.next();
 1226|  7.56k|                        self.output.push('/');
 1227|  7.56k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  7.44k|                        self.output_positions.authority_end = self.output.len();
 1230|  7.44k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  52.5k|                    self.input = ParserInput {
 1235|  52.5k|                        value: self.iri.chars(),
 1236|  52.5k|                        position: 0,
 1237|  52.5k|                    }; // reset
 1238|  52.5k|                    self.output.clear();
 1239|  52.5k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  67.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCs4HPcYfJdze0_5oxttl:
 1546|   119k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   119k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   119k|            self.output.push(c);
 1549|   119k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   119k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_portCs4HPcYfJdze0_5oxttl:
 1420|  1.79k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  3.75k|        loop {
 1422|  3.75k|            let c = self.input.next();
 1423|  3.75k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.51k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.51k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  2.23k|                Some(c) => {
 1429|  2.23k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  1.96k|                        self.output.push(c)
 1431|       |                    } else {
 1432|    274|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.79k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCs4HPcYfJdze0_5oxttl:
 1534|   992k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   992k|        if UNCHECKED || is_url_code_point(c) {
 1536|   964k|            self.output.push(c);
 1537|   964k|            Ok(())
 1538|  28.2k|        } else if c == '%' {
 1539|  3.56k|            self.read_echar()
 1540|       |        } else {
 1541|  24.6k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   992k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCs4HPcYfJdze0_5oxttl:
 1199|  11.7k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  11.7k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|     29|                if UNCHECKED {
 1203|     29|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  11.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCs4HPcYfJdze0_5oxttl:
 1213|  11.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  63.7k|        loop {
 1215|  63.7k|            let c = self.input.next();
 1216|  63.7k|            match c {
 1217|  63.7k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  51.9k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  11.7k|                    self.output.push(':');
 1222|  11.7k|                    self.output_positions.scheme_end = self.output.len();
 1223|  11.7k|                    self.input_scheme_end = self.input.position;
 1224|  11.7k|                    return if self.input.starts_with('/') {
 1225|  10.5k|                        self.input.next();
 1226|  10.5k|                        self.output.push('/');
 1227|  10.5k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  1.15k|                        self.output_positions.authority_end = self.output.len();
 1230|  1.15k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCs4HPcYfJdze0_5oxttl:
 1420|    893|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  1.65k|        loop {
 1422|  1.65k|            let c = self.input.next();
 1423|  1.65k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|    893|                    self.output_positions.authority_end = self.output.len();
 1426|    893|                    return self.parse_path_start(c);
 1427|       |                }
 1428|    766|                Some(c) => {
 1429|    766|                    if UNCHECKED || c.is_ascii_digit() {
 1430|    766|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|    893|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCs4HPcYfJdze0_5oxttl:
 1546|   152k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   152k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   148k|            self.output.push(c);
 1549|   148k|            Ok(())
 1550|  3.85k|        } else if c == '%' {
 1551|  1.86k|            self.read_echar()
 1552|       |        } else {
 1553|  1.98k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   152k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE17resolve_uncheckedCs4HPcYfJdze0_5oxttl:
  597|   200k|    pub fn resolve_unchecked(&self, iri: &str) -> Iri<String> {
  598|   200k|        Iri(self.0.resolve_unchecked(iri))
  599|   200k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E18parse_scheme_startCs4HPcYfJdze0_5oxttl:
 1199|   404k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   404k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    464|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|    464|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   392k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   336k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   404k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_hostCs4HPcYfJdze0_5oxttl:
 1359|  12.2k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  12.2k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  2.33k|            let start_position = self.input.position;
 1363|  45.8k|            while let Some(c) = self.input.next() {
 1364|  45.1k|                self.output.push(c);
 1365|  45.1k|                if c == ']' {
 1366|  1.64k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  1.64k|                    if !UNCHECKED {
 1368|  1.64k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  1.64k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  43.5k|                }
 1393|       |            }
 1394|    690|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|    690|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  75.9k|            loop {
 1404|  75.9k|                let c = self.input.next();
 1405|  75.9k|                match c {
 1406|       |                    Some(':') => {
 1407|  1.79k|                        self.output.push(':');
 1408|  1.79k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  7.89k|                        self.output_positions.authority_end = self.output.len();
 1412|  7.89k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  66.2k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  12.2k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E19remove_last_segmentCs4HPcYfJdze0_5oxttl:
 1525|   467k|    fn remove_last_segment(&mut self) {
 1526|   467k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   467k|            .rfind('/')
 1528|   467k|            .unwrap_or(0);
 1529|   467k|        self.output
 1530|   467k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   467k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCs4HPcYfJdze0_5oxttl:
 1504|  2.21k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   121k|        while let Some(c) = self.input.next() {
 1506|   119k|            if c == '#' {
 1507|    254|                self.output_positions.query_end = self.output.len();
 1508|    254|                self.output.push('#');
 1509|    254|                return self.parse_fragment();
 1510|       |            } else {
 1511|   119k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  1.96k|        self.output_positions.query_end = self.output.len();
 1515|  1.96k|        Ok(())
 1516|  2.21k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E16parse_path_startCs4HPcYfJdze0_5oxttl:
 1439|  7.54k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  7.54k|        match c {
 1441|       |            None => {
 1442|  4.99k|                self.output_positions.path_end = self.output.len();
 1443|  4.99k|                self.output_positions.query_end = self.output.len();
 1444|  4.99k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    267|                self.output_positions.path_end = self.output.len();
 1448|    267|                self.output.push('?');
 1449|    267|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    619|                self.output_positions.path_end = self.output.len();
 1453|    619|                self.output_positions.query_end = self.output.len();
 1454|    619|                self.output.push('#');
 1455|    619|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  1.66k|                self.output.push('/');
 1459|  1.66k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  7.54k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E23parse_path_or_authorityCs4HPcYfJdze0_5oxttl:
 1245|  3.76k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  3.76k|        if self.input.starts_with('/') {
 1247|  3.20k|            self.input.next();
 1248|  3.20k|            self.output.push('/');
 1249|  3.20k|            self.parse_authority()
 1250|       |        } else {
 1251|    562|            self.output_positions.authority_end = self.output.len() - 1;
 1252|    562|            self.parse_path()
 1253|       |        }
 1254|  3.76k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E5parseCs4HPcYfJdze0_5oxttl:
 1174|   404k|    fn parse(
 1175|   404k|        iri: &'a str,
 1176|   404k|        base: Option<IriRef<&'a str>>,
 1177|   404k|        output: &'a mut O,
 1178|   404k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   404k|        let mut parser = Self {
 1180|   404k|            iri,
 1181|   404k|            base,
 1182|   404k|            input: ParserInput {
 1183|   404k|                value: iri.chars(),
 1184|   404k|                position: 0,
 1185|   404k|            },
 1186|   404k|            output,
 1187|   404k|            output_positions: IriElementsPositions {
 1188|   404k|                scheme_end: 0,
 1189|   404k|                authority_end: 0,
 1190|   404k|                path_end: 0,
 1191|   404k|                query_end: 0,
 1192|   404k|            },
 1193|   404k|            input_scheme_end: 0,
 1194|   404k|        };
 1195|   404k|        parser.parse_scheme_start()?;
 1196|   372k|        Ok(parser.output_positions)
 1197|   404k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E15parse_authorityCs4HPcYfJdze0_5oxttl:
 1335|  7.54k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  69.1k|        loop {
 1338|  69.1k|            let c = self.input.next();
 1339|  69.1k|            match c {
 1340|       |                Some('@') => {
 1341|    324|                    self.output.push('@');
 1342|    324|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  7.22k|                    self.input = ParserInput {
 1346|  7.22k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  7.22k|                        position: self.input_scheme_end + 2,
 1348|  7.22k|                    };
 1349|  7.22k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  7.22k|                    return self.parse_host();
 1351|       |                }
 1352|  61.5k|                Some(c) => {
 1353|  61.5k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  7.54k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E14parse_fragmentCs4HPcYfJdze0_5oxttl:
 1518|  3.57k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  46.3k|        while let Some(c) = self.input.next() {
 1520|  42.7k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  3.57k|        Ok(())
 1523|  3.57k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_refCs4HPcYfJdze0_5oxttl:
  154|   604k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   604k|        IriRef {
  156|   604k|            iri: &self.iri,
  157|   604k|            positions: self.positions,
  158|   604k|        }
  159|   604k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCs4HPcYfJdze0_5oxttl:
  258|  6.60k|    pub fn path(&self) -> &str {
  259|  6.60k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|  6.60k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCs4HPcYfJdze0_5oxttl:
 1174|  11.7k|    fn parse(
 1175|  11.7k|        iri: &'a str,
 1176|  11.7k|        base: Option<IriRef<&'a str>>,
 1177|  11.7k|        output: &'a mut O,
 1178|  11.7k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  11.7k|        let mut parser = Self {
 1180|  11.7k|            iri,
 1181|  11.7k|            base,
 1182|  11.7k|            input: ParserInput {
 1183|  11.7k|                value: iri.chars(),
 1184|  11.7k|                position: 0,
 1185|  11.7k|            },
 1186|  11.7k|            output,
 1187|  11.7k|            output_positions: IriElementsPositions {
 1188|  11.7k|                scheme_end: 0,
 1189|  11.7k|                authority_end: 0,
 1190|  11.7k|                path_end: 0,
 1191|  11.7k|                query_end: 0,
 1192|  11.7k|            },
 1193|  11.7k|            input_scheme_end: 0,
 1194|  11.7k|        };
 1195|  11.7k|        parser.parse_scheme_start()?;
 1196|  11.7k|        Ok(parser.output_positions)
 1197|  11.7k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCs4HPcYfJdze0_5oxttl:
   89|   404k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   404k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   404k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   372k|        Ok(IriRef {
   93|   372k|            iri: target_buffer,
   94|   372k|            positions,
   95|   372k|        })
   96|   404k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E33read_url_query_codepoint_or_echarCs4HPcYfJdze0_5oxttl:
 1546|  93.3k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  93.3k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  93.3k|            self.output.push(c);
 1549|  93.3k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  93.3k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCs4HPcYfJdze0_5oxttl:
  584|   404k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   404k|        Ok(Iri(self.0.resolve(iri)?))
  586|   404k|    }
_RNvXsL_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCs4HPcYfJdze0_5oxttl:
  896|  74.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|  74.8k|        self.0.fmt(f)
  898|  74.8k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E18parse_scheme_startCs4HPcYfJdze0_5oxttl:
 1199|   200k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   200k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|    232|                if UNCHECKED {
 1203|    232|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   194k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   166k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   200k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E10parse_hostCs4HPcYfJdze0_5oxttl:
 1359|  7.54k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  7.54k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  1.16k|            let start_position = self.input.position;
 1363|  24.1k|            while let Some(c) = self.input.next() {
 1364|  23.5k|                self.output.push(c);
 1365|  23.5k|                if c == ']' {
 1366|    832|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|    832|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|    832|                    }
 1372|       |
 1373|    832|                    let c = self.input.next();
 1374|    832|                    return match c {
 1375|       |                        Some(':') => {
 1376|    168|                            self.output.push(':');
 1377|    168|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|    405|                            self.output_positions.authority_end = self.output.len();
 1381|    405|                            self.parse_path_start(c)
 1382|       |                        }
 1383|    259|                        Some(c) => {
 1384|    259|                            if UNCHECKED {
 1385|    259|                                self.output.push(c);
 1386|    259|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  22.6k|                }
 1393|       |            }
 1394|    594|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|    594|                self.output_positions.authority_end = self.output.len();
 1397|    594|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  65.0k|            loop {
 1404|  65.0k|                let c = self.input.next();
 1405|  65.0k|                match c {
 1406|       |                    Some(':') => {
 1407|  1.23k|                        self.output.push(':');
 1408|  1.23k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  5.14k|                        self.output_positions.authority_end = self.output.len();
 1412|  5.14k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  58.6k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  7.54k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E19remove_last_segmentCs4HPcYfJdze0_5oxttl:
 1525|   237k|    fn remove_last_segment(&mut self) {
 1526|   237k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   237k|            .rfind('/')
 1528|   237k|            .unwrap_or(0);
 1529|   237k|        self.output
 1530|   237k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   237k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_strCs4HPcYfJdze0_5oxttl:
  171|  4.13k|    pub fn as_str(&self) -> &str {
  172|  4.13k|        &self.iri
  173|  4.13k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echars_0Cs4HPcYfJdze0_5oxttl:
 1562|  3.43k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E14parse_relativeCs4HPcYfJdze0_5oxttl:
 1256|   192k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   192k|        if let Some(base) = self.base {
 1258|   192k|            match self.input.front() {
 1259|       |                None => {
 1260|  5.69k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  5.69k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  5.69k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  5.69k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  5.69k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  5.69k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|  96.4k|                    self.input.next();
 1269|  96.4k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  4.37k|                    self.input.next();
 1273|  4.37k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  4.37k|                    self.output.push('?');
 1275|  4.37k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  4.37k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  4.37k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  4.37k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|    554|                    self.input.next();
 1282|    554|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|    554|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|    554|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|    554|                    self.output_positions.path_end = base.positions.path_end;
 1286|    554|                    self.output_positions.query_end = base.positions.query_end;
 1287|    554|                    self.output.push('#');
 1288|    554|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|  85.7k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|  85.7k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|  85.7k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|  85.7k|                    self.output_positions.path_end = base.positions.path_end;
 1295|  85.7k|                    self.remove_last_segment();
 1296|  85.7k|                    if self.output.len() > base.positions.scheme_end {
 1297|  83.9k|                        // We have some path or authority, we keep a base '/'
 1298|  83.9k|                        self.output.push('/');
 1299|  83.9k|                    }
 1300|  85.7k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   192k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCs4HPcYfJdze0_5oxttl:
 1534|   351k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   351k|        if UNCHECKED || is_url_code_point(c) {
 1536|   351k|            self.output.push(c);
 1537|   351k|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   351k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb1_E10parse_pathCs4HPcYfJdze0_5oxttl:
 1468|   184k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   741k|        loop {
 1470|   741k|            let c = self.input.next();
 1471|   741k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   260k|                    if self.output.as_str().ends_with("/..") {
 1474|    371|                        self.remove_last_segment();
 1475|    371|                        self.remove_last_segment();
 1476|    371|                        self.output.push('/');
 1477|   260k|                    } else if self.output.as_str().ends_with("/.") {
 1478|   151k|                        self.remove_last_segment();
 1479|   151k|                        self.output.push('/');
 1480|   151k|                    } else if c == Some('/') {
 1481|  76.4k|                        self.output.push('/');
 1482|  76.4k|                    }
 1483|       |
 1484|   260k|                    if c == Some('?') {
 1485|  1.93k|                        self.output_positions.path_end = self.output.len();
 1486|  1.93k|                        self.output.push('?');
 1487|  1.93k|                        return self.parse_query();
 1488|   258k|                    } else if c == Some('#') {
 1489|  1.77k|                        self.output_positions.path_end = self.output.len();
 1490|  1.77k|                        self.output_positions.query_end = self.output.len();
 1491|  1.77k|                        self.output.push('#');
 1492|  1.77k|                        return self.parse_fragment();
 1493|   256k|                    } else if c.is_none() {
 1494|   180k|                        self.output_positions.path_end = self.output.len();
 1495|   180k|                        self.output_positions.query_end = self.output.len();
 1496|   180k|                        return Ok(());
 1497|  76.6k|                    }
 1498|       |                }
 1499|   481k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   184k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E15parse_authorityCs4HPcYfJdze0_5oxttl:
 1335|  15.1k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   115k|        loop {
 1338|   115k|            let c = self.input.next();
 1339|   115k|            match c {
 1340|       |                Some('@') => {
 1341|    586|                    self.output.push('@');
 1342|    586|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  11.6k|                    self.input = ParserInput {
 1346|  11.6k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  11.6k|                        position: self.input_scheme_end + 2,
 1348|  11.6k|                    };
 1349|  11.6k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  11.6k|                    return self.parse_host();
 1351|       |                }
 1352|   103k|                Some(c) => {
 1353|   103k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  15.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_fragmentCs4HPcYfJdze0_5oxttl:
 1518|  6.55k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  66.6k|        while let Some(c) = self.input.next() {
 1520|  61.9k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  4.66k|        Ok(())
 1523|  6.55k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_erroruECs4HPcYfJdze0_5oxttl:
 1578|  31.9k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  31.9k|        Err(IriParseError { kind })
 1580|  31.9k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCs4HPcYfJdze0_5oxttl:
  567|  11.7k|    pub fn parse_unchecked(iri: T) -> Self {
  568|  11.7k|        Iri(IriRef::parse_unchecked(iri))
  569|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E20parse_relative_slashCs4HPcYfJdze0_5oxttl:
 1317|   194k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|   194k|        if self.input.starts_with('/') {
 1319|  8.70k|            self.input.next();
 1320|  8.70k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|  8.70k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|  8.70k|            self.output.push('/');
 1323|  8.70k|            self.output.push('/');
 1324|  8.70k|            self.parse_authority()
 1325|       |        } else {
 1326|   185k|            self.output
 1327|   185k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|   185k|            self.output.push('/');
 1329|   185k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|   185k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|   185k|            self.parse_path()
 1332|       |        }
 1333|   194k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_queryCs4HPcYfJdze0_5oxttl:
 1504|  12.5k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   162k|        while let Some(c) = self.input.next() {
 1506|   153k|            if c == '#' {
 1507|  1.16k|                self.output_positions.query_end = self.output.len();
 1508|  1.16k|                self.output.push('#');
 1509|  1.16k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   152k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  8.70k|        self.output_positions.query_end = self.output.len();
 1515|  8.70k|        Ok(())
 1516|  12.5k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE17resolve_uncheckedCs4HPcYfJdze0_5oxttl:
  107|   200k|    pub fn resolve_unchecked(&self, iri: &str) -> IriRef<String> {
  108|   200k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
  109|   200k|        let positions =
  110|   200k|            IriParser::<_, true>::parse(iri, Some(self.as_ref()), &mut target_buffer).unwrap();
  111|   200k|        IriRef {
  112|   200k|            iri: target_buffer,
  113|   200k|            positions,
  114|   200k|        }
  115|   200k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echar0Cs4HPcYfJdze0_5oxttl:
 1561|  4.80k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCs4HPcYfJdze0_5oxttl:
 1359|  10.0k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  10.0k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|    378|            let start_position = self.input.position;
 1363|  10.2k|            while let Some(c) = self.input.next() {
 1364|  10.2k|                self.output.push(c);
 1365|  10.2k|                if c == ']' {
 1366|    352|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|    352|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|    352|                    }
 1372|       |
 1373|    352|                    let c = self.input.next();
 1374|    352|                    return match c {
 1375|       |                        Some(':') => {
 1376|     56|                            self.output.push(':');
 1377|     56|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|    269|                            self.output_positions.authority_end = self.output.len();
 1381|    269|                            self.parse_path_start(c)
 1382|       |                        }
 1383|     27|                        Some(c) => {
 1384|     27|                            if UNCHECKED {
 1385|     27|                                self.output.push(c);
 1386|     27|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  9.88k|                }
 1393|       |            }
 1394|     53|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|     53|                self.output_positions.authority_end = self.output.len();
 1397|     53|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   107k|            loop {
 1404|   107k|                let c = self.input.next();
 1405|   107k|                match c {
 1406|       |                    Some(':') => {
 1407|    837|                        self.output.push(':');
 1408|    837|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  8.81k|                        self.output_positions.authority_end = self.output.len();
 1412|  8.81k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  98.1k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  10.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_relativeCs4HPcYfJdze0_5oxttl:
 1256|   388k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   388k|        if let Some(base) = self.base {
 1258|   388k|            match self.input.front() {
 1259|       |                None => {
 1260|  11.4k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  11.4k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  11.4k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  11.4k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  11.4k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  11.4k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   194k|                    self.input.next();
 1269|   194k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  8.78k|                    self.input.next();
 1273|  8.78k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  8.78k|                    self.output.push('?');
 1275|  8.78k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  8.78k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  8.78k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  8.78k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  1.28k|                    self.input.next();
 1282|  1.28k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  1.28k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  1.28k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  1.28k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  1.28k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  1.28k|                    self.output.push('#');
 1288|  1.28k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|   173k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|   173k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|   173k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|   173k|                    self.output_positions.path_end = base.positions.path_end;
 1295|   173k|                    self.remove_last_segment();
 1296|   173k|                    if self.output.len() > base.positions.scheme_end {
 1297|   169k|                        // We have some path or authority, we keep a base '/'
 1298|   169k|                        self.output.push('/');
 1299|   169k|                    }
 1300|   173k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   388k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_pathCs4HPcYfJdze0_5oxttl:
 1468|   368k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  1.24M|        loop {
 1470|  1.24M|            let c = self.input.next();
 1471|  1.24M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   486k|                    if self.output.as_str().ends_with("/..") {
 1474|    712|                        self.remove_last_segment();
 1475|    712|                        self.remove_last_segment();
 1476|    712|                        self.output.push('/');
 1477|   485k|                    } else if self.output.as_str().ends_with("/.") {
 1478|   292k|                        self.remove_last_segment();
 1479|   292k|                        self.output.push('/');
 1480|   292k|                    } else if c == Some('/') {
 1481|   138k|                        self.output.push('/');
 1482|   138k|                    }
 1483|       |
 1484|   486k|                    if c == Some('?') {
 1485|  3.32k|                        self.output_positions.path_end = self.output.len();
 1486|  3.32k|                        self.output.push('?');
 1487|  3.32k|                        return self.parse_query();
 1488|   483k|                    } else if c == Some('#') {
 1489|  3.17k|                        self.output_positions.path_end = self.output.len();
 1490|  3.17k|                        self.output_positions.query_end = self.output.len();
 1491|  3.17k|                        self.output.push('#');
 1492|  3.17k|                        return self.parse_fragment();
 1493|   479k|                    } else if c.is_none() {
 1494|   340k|                        self.output_positions.path_end = self.output.len();
 1495|   340k|                        self.output_positions.query_end = self.output.len();
 1496|   340k|                        return Ok(());
 1497|   139k|                    }
 1498|       |                }
 1499|   760k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   368k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echarCs4HPcYfJdze0_5oxttl:
 1558|  5.43k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  5.43k|        let c1 = self.input.next();
 1560|  5.43k|        let c2 = self.input.next();
 1561|  5.43k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  3.43k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  3.26k|            self.output.push('%');
 1565|  3.26k|            self.output.push(c1.unwrap());
 1566|  3.26k|            self.output.push(c2.unwrap());
 1567|  3.26k|            Ok(())
 1568|       |        } else {
 1569|  2.17k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  2.17k|                Some('%'),
 1571|  2.17k|                c1,
 1572|  2.17k|                c2,
 1573|  2.17k|            ]))
 1574|       |        }
 1575|  5.43k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsflNycjbQork_5oxrdf:
 1420|  1.67k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  2.29k|        loop {
 1422|  2.29k|            let c = self.input.next();
 1423|  2.29k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.20k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.20k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  1.08k|                Some(c) => {
 1429|  1.08k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|    616|                        self.output.push(c)
 1431|       |                    } else {
 1432|    469|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.67k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsflNycjbQork_5oxrdf:
 1534|  47.1M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  47.1M|        if UNCHECKED || is_url_code_point(c) {
 1536|  47.1M|            self.output.push(c);
 1537|  47.1M|            Ok(())
 1538|  3.64k|        } else if c == '%' {
 1539|  3.41k|            self.read_echar()
 1540|       |        } else {
 1541|    231|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  47.1M|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsflNycjbQork_5oxrdf:
  185|  2.44M|    pub fn into_inner(self) -> T {
  186|  2.44M|        self.iri
  187|  2.44M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsflNycjbQork_5oxrdf:
 1504|  2.56k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  75.1k|        while let Some(c) = self.input.next() {
 1506|  73.0k|            if c == '#' {
 1507|    309|                self.output_positions.query_end = self.output.len();
 1508|    309|                self.output.push('#');
 1509|    309|                return self.parse_fragment();
 1510|       |            } else {
 1511|  72.7k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  2.09k|        self.output_positions.query_end = self.output.len();
 1515|  2.09k|        Ok(())
 1516|  2.56k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE11is_absoluteCsflNycjbQork_5oxrdf:
  199|  68.7k|    pub fn is_absolute(&self) -> bool {
  200|  68.7k|        self.positions.scheme_end != 0
  201|  68.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsflNycjbQork_5oxrdf:
 1199|  1.96M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  1.96M|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      2|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      2|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  1.96M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  1.96M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsflNycjbQork_5oxrdf:
 1359|  1.95M|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  1.95M|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|    342|            let start_position = self.input.position;
 1363|  10.6k|            while let Some(c) = self.input.next() {
 1364|  10.4k|                self.output.push(c);
 1365|  10.4k|                if c == ']' {
 1366|    220|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|    220|                    if !UNCHECKED {
 1368|    220|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|    220|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  10.2k|                }
 1393|       |            }
 1394|    122|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|    122|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  23.2M|            loop {
 1404|  23.2M|                let c = self.input.next();
 1405|  23.2M|                match c {
 1406|       |                    Some(':') => {
 1407|  1.67k|                        self.output.push(':');
 1408|  1.67k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  1.95M|                        self.output_positions.authority_end = self.output.len();
 1412|  1.95M|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  21.3M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  1.95M|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsflNycjbQork_5oxrdf:
   58|  1.89M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  1.89M|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  1.89M|        Ok(Self { iri, positions })
   61|  1.89M|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsflNycjbQork_5oxrdf:
 1562|  3.59k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsflNycjbQork_5oxrdf:
 1439|  1.95M|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  1.95M|        match c {
 1441|       |            None => {
 1442|  2.92k|                self.output_positions.path_end = self.output.len();
 1443|  2.92k|                self.output_positions.query_end = self.output.len();
 1444|  2.92k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    505|                self.output_positions.path_end = self.output.len();
 1448|    505|                self.output.push('?');
 1449|    505|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    607|                self.output_positions.path_end = self.output.len();
 1453|    607|                self.output_positions.query_end = self.output.len();
 1454|    607|                self.output.push('#');
 1455|    607|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  1.95M|                self.output.push('/');
 1459|  1.95M|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  1.95M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsflNycjbQork_5oxrdf:
 1245|  1.96M|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  1.96M|        if self.input.starts_with('/') {
 1247|  1.95M|            self.input.next();
 1248|  1.95M|            self.output.push('/');
 1249|  1.95M|            self.parse_authority()
 1250|       |        } else {
 1251|  3.77k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  3.77k|            self.parse_path()
 1253|       |        }
 1254|  1.96M|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsflNycjbQork_5oxrdf:
  556|  1.89M|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  1.89M|        IriRef::parse(iri)?.try_into()
  558|  1.89M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsflNycjbQork_5oxrdf:
 1468|  1.96M|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  7.25M|        loop {
 1470|  7.25M|            let c = self.input.next();
 1471|  7.25M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  3.34M|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  3.34M|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  3.34M|                    } else if c == Some('/') {
 1481|  1.38M|                        self.output.push('/');
 1482|  1.96M|                    }
 1483|       |
 1484|  3.34M|                    if c == Some('?') {
 1485|  2.06k|                        self.output_positions.path_end = self.output.len();
 1486|  2.06k|                        self.output.push('?');
 1487|  2.06k|                        return self.parse_query();
 1488|  3.34M|                    } else if c == Some('#') {
 1489|  92.3k|                        self.output_positions.path_end = self.output.len();
 1490|  92.3k|                        self.output_positions.query_end = self.output.len();
 1491|  92.3k|                        self.output.push('#');
 1492|  92.3k|                        return self.parse_fragment();
 1493|  3.24M|                    } else if c.is_none() {
 1494|  1.86M|                        self.output_positions.path_end = self.output.len();
 1495|  1.86M|                        self.output_positions.query_end = self.output.len();
 1496|  1.86M|                        return Ok(());
 1497|  1.38M|                    }
 1498|       |                }
 1499|  3.91M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  1.96M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsflNycjbQork_5oxrdf:
 1174|  1.96M|    fn parse(
 1175|  1.96M|        iri: &'a str,
 1176|  1.96M|        base: Option<IriRef<&'a str>>,
 1177|  1.96M|        output: &'a mut O,
 1178|  1.96M|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  1.96M|        let mut parser = Self {
 1180|  1.96M|            iri,
 1181|  1.96M|            base,
 1182|  1.96M|            input: ParserInput {
 1183|  1.96M|                value: iri.chars(),
 1184|  1.96M|                position: 0,
 1185|  1.96M|            },
 1186|  1.96M|            output,
 1187|  1.96M|            output_positions: IriElementsPositions {
 1188|  1.96M|                scheme_end: 0,
 1189|  1.96M|                authority_end: 0,
 1190|  1.96M|                path_end: 0,
 1191|  1.96M|                query_end: 0,
 1192|  1.96M|            },
 1193|  1.96M|            input_scheme_end: 0,
 1194|  1.96M|        };
 1195|  1.96M|        parser.parse_scheme_start()?;
 1196|  1.96M|        Ok(parser.output_positions)
 1197|  1.96M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsflNycjbQork_5oxrdf:
 1335|  1.95M|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  23.3M|        loop {
 1338|  23.3M|            let c = self.input.next();
 1339|  23.3M|            match c {
 1340|       |                Some('@') => {
 1341|  1.30k|                    self.output.push('@');
 1342|  1.30k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  1.95M|                    self.input = ParserInput {
 1346|  1.95M|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  1.95M|                        position: self.input_scheme_end + 2,
 1348|  1.95M|                    };
 1349|  1.95M|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  1.95M|                    return self.parse_host();
 1351|       |                }
 1352|  21.3M|                Some(c) => {
 1353|  21.3M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  1.95M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsflNycjbQork_5oxrdf:
 1558|  4.09k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  4.09k|        let c1 = self.input.next();
 1560|  4.09k|        let c2 = self.input.next();
 1561|  4.09k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  3.59k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  3.45k|            self.output.push('%');
 1565|  3.45k|            self.output.push(c1.unwrap());
 1566|  3.45k|            self.output.push(c2.unwrap());
 1567|  3.45k|            Ok(())
 1568|       |        } else {
 1569|    636|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|    636|                Some('%'),
 1571|    636|                c1,
 1572|    636|                c2,
 1573|    636|            ]))
 1574|       |        }
 1575|  4.09k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE5parseCsflNycjbQork_5oxrdf:
   58|  70.4k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  70.4k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  68.7k|        Ok(Self { iri, positions })
   61|  70.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsflNycjbQork_5oxrdf:
 1213|  1.96M|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  9.84M|        loop {
 1215|  9.84M|            let c = self.input.next();
 1216|  9.84M|            match c {
 1217|  9.84M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  7.87M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  1.96M|                    self.output.push(':');
 1222|  1.96M|                    self.output_positions.scheme_end = self.output.len();
 1223|  1.96M|                    self.input_scheme_end = self.input.position;
 1224|  1.96M|                    return if self.input.starts_with('/') {
 1225|  1.96M|                        self.input.next();
 1226|  1.96M|                        self.output.push('/');
 1227|  1.96M|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  4.22k|                        self.output_positions.authority_end = self.output.len();
 1230|  4.22k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  1.96M|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsflNycjbQork_5oxrdf:
 1561|  3.91k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCsflNycjbQork_5oxrdf:
  199|  1.89M|    pub fn is_absolute(&self) -> bool {
  200|  1.89M|        self.positions.scheme_end != 0
  201|  1.89M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsflNycjbQork_5oxrdf:
 1518|  93.2k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   609k|        while let Some(c) = self.input.next() {
 1520|   516k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  93.0k|        Ok(())
 1523|  93.2k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsflNycjbQork_5oxrdf:
 1546|  72.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  72.7k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  72.0k|            self.output.push(c);
 1549|  72.0k|            Ok(())
 1550|    749|        } else if c == '%' {
 1551|    680|            self.read_echar()
 1552|       |        } else {
 1553|     69|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  72.7k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriReE5parseCsflNycjbQork_5oxrdf:
  556|  70.4k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  70.4k|        IriRef::parse(iri)?.try_into()
  558|  70.4k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsflNycjbQork_5oxrdf:
  968|  1.89M|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  1.89M|        if iri.is_absolute() {
  970|  1.89M|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  1.89M|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsflNycjbQork_5oxrdf:
  665|  2.44M|    pub fn into_inner(self) -> T {
  666|  2.44M|        self.0.into_inner()
  667|  2.44M|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsflNycjbQork_5oxrdf:
 1578|  1.74k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  1.74k|        Err(IriParseError { kind })
 1580|  1.74k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriReEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsflNycjbQork_5oxrdf:
  968|  68.7k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  68.7k|        if iri.is_absolute() {
  970|  68.7k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  68.7k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsflNycjbQork_5oxrdf:
 1156|  5.89M|    fn starts_with(&self, c: char) -> bool {
 1157|  5.89M|        self.value.as_str().starts_with(c)
 1158|  5.89M|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsflNycjbQork_5oxrdf:
 1065|  1.96M|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsflNycjbQork_5oxrdf:
 1092|  7.86M|    fn len(&self) -> usize {
 1093|  7.86M|        self.len
 1094|  7.86M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsflNycjbQork_5oxrdf:
 1072|  64.4M|    fn push(&mut self, c: char) {
 1073|  64.4M|        self.len += c.len_utf8();
 1074|  64.4M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsflNycjbQork_5oxrdf:
 1097|  6.68M|    fn as_str(&self) -> &str {
 1098|  6.68M|        ""
 1099|  6.68M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsflNycjbQork_5oxrdf:
 1087|  1.95M|    fn truncate(&mut self, new_len: usize) {
 1088|  1.95M|        self.len = new_len;
 1089|  1.95M|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsflNycjbQork_5oxrdf:
 1584|  47.1M|fn is_url_code_point(c: char) -> bool {
 1585|  47.1M|    matches!(c,
 1586|  39.9M|        'a'..='z'
 1587|   393k|        | 'A'..='Z'
 1588|  2.38M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  15.8k|        | '\u{A0}'..='\u{D7FF}'
 1609|  1.07k|        | '\u{F900}'..='\u{FDCF}'
 1610|    540|        | '\u{FDF0}'..='\u{FFEF}'
 1611|    540|        | '\u{10000}'..='\u{1FFFD}'
 1612|    540|        | '\u{20000}'..='\u{2FFFD}'
 1613|    540|        | '\u{30000}'..='\u{3FFFD}'
 1614|    540|        | '\u{40000}'..='\u{4FFFD}'
 1615|    251|        | '\u{50000}'..='\u{5FFFD}'
 1616|    249|        | '\u{60000}'..='\u{6FFFD}'
 1617|    249|        | '\u{70000}'..='\u{7FFFD}'
 1618|    249|        | '\u{80000}'..='\u{8FFFD}'
 1619|    249|        | '\u{90000}'..='\u{9FFFD}'
 1620|    249|        | '\u{A0000}'..='\u{AFFFD}'
 1621|      2|        | '\u{B0000}'..='\u{BFFFD}'
 1622|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  47.1M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsflNycjbQork_5oxrdf:
 1141|  68.3M|    fn next(&mut self) -> Option<char> {
 1142|  68.3M|        if let Some(head) = self.value.next() {
 1143|  66.3M|            self.position += head.len_utf8();
 1144|  66.3M|            Some(head)
 1145|       |        } else {
 1146|  1.97M|            None
 1147|       |        }
 1148|  68.3M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsflNycjbQork_5oxrdf:
 1629|  72.7k|fn is_url_query_code_point(c: char) -> bool {
 1630|  72.7k|    is_url_code_point(c)
 1631|  1.40k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|  72.7k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsflNycjbQork_5oxrdf:
 1151|  1.96M|    fn front(&self) -> Option<char> {
 1152|  1.96M|        self.value.clone().next()
 1153|  1.96M|    }
_RNvXsW_CsbOXESBDtkxG_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1003|  33.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|  33.6k|        match &self.kind {
 1005|    466|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|    812|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|    812|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  1.86k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|    743|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  26.9k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  26.9k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  2.80k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  2.80k|                f,
 1016|  2.80k|                "Invalid IRI percent encoding '{}'",
 1017|  2.80k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  2.80k|            ),
 1019|       |        }
 1020|  33.6k|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CseN5i3NvhuWE_11rand_chacha:
   42|   463k|        fn $fn(self) -> Self {
   43|   463k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   463k|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CseN5i3NvhuWE_11rand_chacha:
   42|   463k|        fn $fn(self) -> Self {
   43|   463k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   463k|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CseN5i3NvhuWE_11rand_chacha:
   42|   463k|        fn $fn(self) -> Self {
   43|   463k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   463k|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCseN5i3NvhuWE_11rand_chacha:
   13|  5.29M|    pub fn new(xs: [W; 2]) -> Self {
   14|  5.29M|        x2(xs, PhantomData)
   15|  5.29M|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCseN5i3NvhuWE_11rand_chacha:
   32|  1.85M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.85M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.85M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.85M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CseN5i3NvhuWE_11rand_chacha:
  208|   463k|    fn shuffle_lane_words1230(self) -> Self {
  209|   463k|        Self::new([
  210|   463k|            self.0[0].shuffle_lane_words1230(),
  211|   463k|            self.0[1].shuffle_lane_words1230(),
  212|   463k|        ])
  213|   463k|    }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCseN5i3NvhuWE_11rand_chacha:
   22|  1.85M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.85M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.85M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CseN5i3NvhuWE_11rand_chacha:
  201|   463k|    fn shuffle_lane_words2301(self) -> Self {
  202|   463k|        Self::new([
  203|   463k|            self.0[0].shuffle_lane_words2301(),
  204|   463k|            self.0[1].shuffle_lane_words2301(),
  205|   463k|        ])
  206|   463k|    }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CseN5i3NvhuWE_11rand_chacha:
  215|   463k|    fn shuffle_lane_words3012(self) -> Self {
  216|   463k|        Self::new([
  217|   463k|            self.0[0].shuffle_lane_words3012(),
  218|   463k|            self.0[1].shuffle_lane_words3012(),
  219|   463k|        ])
  220|   463k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CseN5i3NvhuWE_11rand_chacha:
   42|   463k|        fn $fn(self) -> Self {
   43|   463k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   463k|        }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECseN5i3NvhuWE_11rand_chacha:
  251|  38.6k|    fn vec<V, A>(self, a: A) -> V
  252|  38.6k|    where
  253|  38.6k|        V: MultiLane<A>,
  254|  38.6k|    {
  255|  38.6k|        V::from_lanes(a)
  256|  38.6k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECseN5i3NvhuWE_11rand_chacha:
  259|    302|    fn read_le<V>(self, input: &[u8]) -> V
  260|    302|    where
  261|    302|        V: StoreBytes,
  262|    302|    {
  263|    302|        unsafe { V::unsafe_read_le(input) }
  264|    302|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECseN5i3NvhuWE_11rand_chacha:
  246|   347k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   347k|        unsafe { V::unpack(s) }
  248|   347k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECseN5i3NvhuWE_11rand_chacha:
  246|  38.6k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  38.6k|        unsafe { V::unpack(s) }
  248|  38.6k|    }

_RNvNvNtCseN5i3NvhuWE_11rand_chacha4guts11init_chacha8impl_avx:
  338|    151|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    151|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    151|            }
_RNvNtCseN5i3NvhuWE_11rand_chacha4guts11init_chacha:
  333|    151|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    151|            #[inline(always)]
  335|    151|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    151|            use std::arch::x86_64::*;
  337|    151|            #[target_feature(enable = "avx")]
  338|    151|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    151|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    151|            }
  341|    151|            #[target_feature(enable = "sse2")]
  342|    151|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    151|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    151|            }
  345|    151|            unsafe {
  346|    151|                if is_x86_feature_detected!("avx") {
  347|    151|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    151|        }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCseN5i3NvhuWE_11rand_chacha:
   64|    151|    unsafe fn instance() -> Self {
   65|    151|        SseMachine(PhantomData)
   66|    151|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCseN5i3NvhuWE_11rand_chacha:
   92|  38.6k|    unsafe fn instance() -> Self {
   93|  38.6k|        Avx2Machine(PhantomData)
   94|  38.6k|    }
_RNvNtCseN5i3NvhuWE_11rand_chacha4guts11refill_wide:
  250|  38.6k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  38.6k|            #[inline(always)]
  252|  38.6k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  38.6k|            use std::arch::x86_64::*;
  254|  38.6k|            #[target_feature(enable = "avx2")]
  255|  38.6k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  38.6k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  38.6k|                _mm256_zeroupper();
  258|  38.6k|                ret
  259|  38.6k|            }
  260|  38.6k|            #[target_feature(enable = "avx")]
  261|  38.6k|            #[target_feature(enable = "sse4.1")]
  262|  38.6k|            #[target_feature(enable = "ssse3")]
  263|  38.6k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  38.6k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  38.6k|                _mm256_zeroupper();
  266|  38.6k|                ret
  267|  38.6k|            }
  268|  38.6k|            #[target_feature(enable = "sse4.1")]
  269|  38.6k|            #[target_feature(enable = "ssse3")]
  270|  38.6k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  38.6k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  38.6k|            }
  273|  38.6k|            #[target_feature(enable = "ssse3")]
  274|  38.6k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  38.6k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  38.6k|            }
  277|  38.6k|            #[target_feature(enable = "sse2")]
  278|  38.6k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  38.6k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  38.6k|            }
  281|  38.6k|            unsafe {
  282|  38.6k|                if is_x86_feature_detected!("avx2") {
  283|  38.6k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  38.6k|        }
_RNvNvNtCseN5i3NvhuWE_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  38.6k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  38.6k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  38.6k|                _mm256_zeroupper();
  258|  38.6k|                ret
  259|  38.6k|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|    151|    fn from(u32x4: [u32; 4]) -> Self {
  131|    151|        vec128_storage { u32x4 }
  132|    151|    }

_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCseN5i3NvhuWE_11rand_chacha:
 1543|  3.70M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.70M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.70M|                }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCseN5i3NvhuWE_11rand_chacha:
   89|   617k|            fn write_le(self, out: &mut [u8]) {
   90|   617k|                assert_eq!(out.len(), 16);
   91|   617k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   617k|            }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCseN5i3NvhuWE_11rand_chacha:
 1430|   308k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   308k|            unsafe {
 1432|   308k|                [
 1433|   308k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   308k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   308k|                ]
 1436|   308k|            }
 1437|   308k|        }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCseN5i3NvhuWE_11rand_chacha:
 1402|  77.2k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  77.2k|            Self::new(p.avx)
 1404|  77.2k|        }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCseN5i3NvhuWE_11rand_chacha:
   18|   617k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   617k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   617k|            }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCseN5i3NvhuWE_11rand_chacha:
 1439|   308k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   308k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   308k|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCseN5i3NvhuWE_11rand_chacha:
 1602|  38.6k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  38.6k|            Self::new([
 1604|  38.6k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  38.6k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  38.6k|            ])
 1607|  38.6k|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CseN5i3NvhuWE_11rand_chacha:
 1470|   926k|            fn $name(self) -> Self {
 1471|   926k|                Self::new(unsafe {
 1472|   926k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   926k|                })
 1474|   926k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CseN5i3NvhuWE_11rand_chacha:
 1590|   926k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   926k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   926k|        }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCseN5i3NvhuWE_11rand_chacha:
 1394|  14.2M|        fn new(x: __m256i) -> Self {
 1395|  14.2M|            Self { x, ni: PhantomData }
 1396|  14.2M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CseN5i3NvhuWE_11rand_chacha:
 1470|   926k|            fn $name(self) -> Self {
 1471|   926k|                Self::new(unsafe {
 1472|   926k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   926k|                })
 1474|   926k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CseN5i3NvhuWE_11rand_chacha:
 1586|   926k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   926k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   926k|        }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCseN5i3NvhuWE_11rand_chacha:
 1543|  3.70M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.70M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.70M|                }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCseN5i3NvhuWE_11rand_chacha:
  519|   154k|    fn extract(self, i: u32) -> u32 {
  520|   154k|        self.to_lanes()[i as usize]
  521|   154k|    }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCseN5i3NvhuWE_11rand_chacha:
   79|    302|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    302|                assert_eq!(input.len(), 16);
   81|    302|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    302|            }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCseN5i3NvhuWE_11rand_chacha:
 1611|   154k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   154k|            let [a, b] = self.0[0].to_lanes();
 1613|   154k|            let [c, d] = self.0[1].to_lanes();
 1614|   154k|            [a, b, c, d]
 1615|   154k|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCseN5i3NvhuWE_11rand_chacha:
  323|   154k|    fn to_lanes(self) -> [u32; 4] {
  324|   154k|        unsafe {
  325|   154k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   154k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   154k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   154k|        }
  329|   154k|    }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCseN5i3NvhuWE_11rand_chacha:
 1527|  3.70M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  3.70M|                    *self = self.$bin_fn(rhs);
 1529|  3.70M|                }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CseN5i3NvhuWE_11rand_chacha:
 1480|   926k|            fn $name(self) -> Self {
 1481|   926k|                Self::new(unsafe {
 1482|   926k|                    _mm256_or_si256(
 1483|   926k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   926k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   926k|                    )
 1486|   926k|                })
 1487|   926k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CseN5i3NvhuWE_11rand_chacha:
 1582|   926k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   926k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   926k|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCseN5i3NvhuWE_11rand_chacha:
 1617|   154k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   154k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   154k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   154k|            Self::new([ab, cd])
 1621|   154k|        }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCseN5i3NvhuWE_11rand_chacha:
   64|  2.16M|            fn new(x: __m128i) -> Self {
   65|  2.16M|                $vec {
   66|  2.16M|                    x,
   67|  2.16M|                    s3: PhantomData,
   68|  2.16M|                    s4: PhantomData,
   69|  2.16M|                    ni: PhantomData,
   70|  2.16M|                }
   71|  2.16M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CseN5i3NvhuWE_11rand_chacha:
 1480|   926k|            fn $name(self) -> Self {
 1481|   926k|                Self::new(unsafe {
 1482|   926k|                    _mm256_or_si256(
 1483|   926k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   926k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   926k|                    )
 1486|   926k|                })
 1487|   926k|            }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCseN5i3NvhuWE_11rand_chacha:
   52|   347k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   347k|                Self::new(x.sse2)
   54|   347k|            }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCseN5i3NvhuWE_11rand_chacha:
  523|   540k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   540k|        Self::new(unsafe {
  525|   540k|            match i {
  526|   270k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   270k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   540k|    }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCseN5i3NvhuWE_11rand_chacha:
  331|  38.6k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  38.6k|        unsafe {
  333|  38.6k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  38.6k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  38.6k|            Self::new(x)
  336|  38.6k|        }
  337|  38.6k|    }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCseN5i3NvhuWE_11rand_chacha:
 1683|  38.6k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  38.6k|            Self {
 1685|  38.6k|                avx: [
 1686|  38.6k|                    vec256_storage { avx: x.0[0].x },
 1687|  38.6k|                    vec256_storage { avx: x.0[1].x },
 1688|  38.6k|                ],
 1689|  38.6k|            }
 1690|  38.6k|        }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCseN5i3NvhuWE_11rand_chacha:
   58|  38.9k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  38.9k|                vec128_storage { sse2: x.x }
   60|  38.9k|            }

_RINvXs2_NtNtCs27YbrSKC5UQ_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs4HPcYfJdze0_5oxttl:
   51|   617k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   617k|        // Use LE; we explicitly generate one value before the next.
   53|   617k|        let x = u128::from(rng.next_u64());
   54|   617k|        let y = u128::from(rng.next_u64());
   55|   617k|        (y << 64) | x
   56|   617k|    }

_RINvCs27YbrSKC5UQ_4rand6randomoECs4HPcYfJdze0_5oxttl:
  183|   617k|pub fn random<T>() -> T
  184|   617k|where Standard: Distribution<T> {
  185|   617k|    thread_rng().gen()
  186|   617k|}

_RINvYNtNtNtCs27YbrSKC5UQ_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs4HPcYfJdze0_5oxttl:
   93|   617k|    fn gen<T>(&mut self) -> T
   94|   617k|    where Standard: Distribution<T> {
   95|   617k|        Standard.sample(self)
   96|   617k|    }

_RNvXs_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs4HPcYfJdze0_5oxttl:
  124|  1.23M|    fn next_u64(&mut self) -> u64 {
  125|  1.23M|        self.0.next_u64()
  126|  1.23M|    }
_RNvNtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvMs3_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngE9is_forkedBb_:
  226|  38.6k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  38.6k|        // In theory, on 32-bit platforms, it is possible for
  228|  38.6k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  38.6k|        //
  230|  38.6k|        // This check will detect a fork in the normal case where
  231|  38.6k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  38.6k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  38.6k|        //
  234|  38.6k|        // It will still fail to detect a fork if there have been more than
  235|  38.6k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  38.6k|        // enough.
  237|  38.6k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  38.6k|    }
_RNvMs3_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    150|    fn reseed_and_generate(
  242|    150|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    150|    ) {
  244|    150|        #![allow(clippy::if_same_then_else)] // false positive
  245|    150|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    150|        } else {
  248|    150|            trace!("Reseeding RNG (periodic reseed)");
  249|    150|        }
  250|       |
  251|    150|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    150|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    150|        }
  257|    150|        self.fork_counter = global_fork_counter;
  258|    150|
  259|    150|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    150|        self.inner.generate(results);
  261|    150|    }
_RNCNvNtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNCNvMs3_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngE6reseed0Bd_:
  220|    150|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    150|            self.bytes_until_reseed = self.threshold;
  222|    150|            self.inner = result
  223|    150|        })
_RNvNtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  38.6k|    pub fn get_fork_counter() -> usize {
  308|  38.6k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  38.6k|    }
_RNvXs2_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  38.6k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  38.6k|        let global_fork_counter = fork::get_fork_counter();
  175|  38.6k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    150|            return self.reseed_and_generate(results, global_fork_counter);
  180|  38.4k|        }
  181|  38.4k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  38.4k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  38.4k|        self.inner.generate(results);
  184|  38.6k|    }
_RNvMs3_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngE6reseedBb_:
  219|    150|    fn reseed(&mut self) -> Result<(), Error> {
  220|    150|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    150|        })
  224|    150|    }
_RNvMNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvMs3_NtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }

_RNvXs_NtNtCs27YbrSKC5UQ_4rand4rngs6threadNtB4_9ThreadRngNtCscworrPyzRd7_9rand_core7RngCore8next_u64:
  109|  1.23M|    fn next_u64(&mut self) -> u64 {
  110|  1.23M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.23M|        // creates another mutable reference
  112|  1.23M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.23M|        rng.next_u64()
  114|  1.23M|    }
_RNCNvNtNtCs27YbrSKC5UQ_4rand4rngs6thread10thread_rng0B7_:
   89|   617k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNvNtNtCs27YbrSKC5UQ_4rand4rngs6thread10thread_rng:
   88|   617k|pub fn thread_rng() -> ThreadRng {
   89|   617k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   617k|    ThreadRng { rng }
   91|   617k|}
_RNCNvNvNtNtCs27YbrSKC5UQ_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCseN5i3NvhuWE_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCscworrPyzRd7_9rand_core5block12BlockRngCore8generateCs27YbrSKC5UQ_4rand:
   89|  38.6k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  38.6k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  38.6k|                self.state.refill4($rounds, unsafe {
   92|  38.6k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  38.6k|                });
   94|  2.47M|                for x in r.as_mut() {
   95|  2.47M|                    *x = x.to_le();
   96|  2.47M|                }
   97|  38.6k|            }
_RNvXsn_NtCseN5i3NvhuWE_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCscworrPyzRd7_9rand_core11SeedableRng9from_seedCs27YbrSKC5UQ_4rand:
  103|    151|            fn from_seed(seed: Self::Seed) -> Self {
  104|    151|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    151|            }
_RNvXs0_NtCseN5i3NvhuWE_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|  38.6k|    fn as_mut(&mut self) -> &mut [T] {
   52|  38.6k|        &mut self.0
   53|  38.6k|    }
_RNvXNtCseN5i3NvhuWE_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }
_RNvXs_NtCseN5i3NvhuWE_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|  2.54M|    fn as_ref(&self) -> &[T] {
   47|  2.54M|        &self.0
   48|  2.54M|    }

_RNvMNtCseN5i3NvhuWE_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  38.6k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  38.6k|        refill_wide(self, drounds, out)
   86|  38.6k|    }
_RNvMNtCseN5i3NvhuWE_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    151|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    151|        init_chacha(key, nonce)
   74|    151|    }
_RINvNvNtCseN5i3NvhuWE_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    151|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    151|        let ctr_nonce = [
  237|       |            0,
  238|    151|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    151|                0
  242|       |            },
  243|    151|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    151|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    151|        ];
  246|    151|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    151|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    151|        ChaCha {
  249|    151|            b: key0.into(),
  250|    151|            c: key1.into(),
  251|    151|            d: ctr_nonce.into(),
  252|    151|        }
_RINvNtCseN5i3NvhuWE_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   231k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   231k|    x.b = x.b.shuffle_lane_words3012();
   58|   231k|    x.c = x.c.shuffle_lane_words2301();
   59|   231k|    x.d = x.d.shuffle_lane_words1230();
   60|   231k|    x
   61|   231k|}
_RINvNtCseN5i3NvhuWE_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  38.6k|fn refill_wide_impl<Mach: Machine>(
  117|  38.6k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  38.6k|) {
  119|  38.6k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  38.6k|    let mut pos = state.pos64(m);
  121|  38.6k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  38.6k|    pos = pos.wrapping_add(1);
  123|  38.6k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  38.6k|    pos = pos.wrapping_add(1);
  125|  38.6k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  38.6k|    pos = pos.wrapping_add(1);
  127|  38.6k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  38.6k|
  129|  38.6k|    let b = m.unpack(state.b);
  130|  38.6k|    let c = m.unpack(state.c);
  131|  38.6k|    let mut x = State {
  132|  38.6k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  38.6k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  38.6k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  38.6k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  38.6k|    };
  137|   231k|    for _ in 0..drounds {
  138|   231k|        x = round(x);
  139|   231k|        x = undiagonalize(round(diagonalize(x)));
  140|   231k|    }
  141|  38.6k|    let mut pos = state.pos64(m);
  142|  38.6k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  38.6k|    pos = pos.wrapping_add(1);
  144|  38.6k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  38.6k|    pos = pos.wrapping_add(1);
  146|  38.6k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  38.6k|    pos = pos.wrapping_add(1);
  148|  38.6k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  38.6k|    pos = pos.wrapping_add(1);
  150|  38.6k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  38.6k|
  152|  38.6k|    let (a, b, c, d) = (
  153|  38.6k|        x.a.to_lanes(),
  154|  38.6k|        x.b.to_lanes(),
  155|  38.6k|        x.c.to_lanes(),
  156|  38.6k|        x.d.to_lanes(),
  157|  38.6k|    );
  158|  38.6k|    let sb = m.unpack(state.b);
  159|  38.6k|    let sc = m.unpack(state.c);
  160|  38.6k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  38.6k|    state.d = d4.into();
  162|  38.6k|    let mut words = out.chunks_exact_mut(16);
  163|   154k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   154k|        (a + k).write_le(words.next().unwrap());
  165|   154k|        (b + sb).write_le(words.next().unwrap());
  166|   154k|        (c + sc).write_le(words.next().unwrap());
  167|   154k|        (d + sd).write_le(words.next().unwrap());
  168|   154k|    }
  169|  38.6k|}
_RNvNtCseN5i3NvhuWE_11rand_chacha4guts10read_u32le:
  229|    302|fn read_u32le(xs: &[u8]) -> u32 {
  230|    302|    assert_eq!(xs.len(), 4);
  231|    302|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    302|}
_RINvNtCseN5i3NvhuWE_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   463k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   463k|    x.a += x.b;
   45|   463k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   463k|    x.c += x.d;
   47|   463k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   463k|    x.a += x.b;
   49|   463k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   463k|    x.c += x.d;
   51|   463k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   463k|    x
   53|   463k|}
_RINvMNtCseN5i3NvhuWE_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  77.2k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  77.2k|        let d: M::u32x4 = m.unpack(self.d);
   79|  77.2k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  77.2k|    }
_RINvNtCseN5i3NvhuWE_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   231k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   231k|    x.b = x.b.shuffle_lane_words1230();
   65|   231k|    x.c = x.c.shuffle_lane_words2301();
   66|   231k|    x.d = x.d.shuffle_lane_words3012();
   67|   231k|    x
   68|   231k|}
_RINvNvNtCseN5i3NvhuWE_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  38.6k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  38.6k|        refill_wide_impl(m, state, drounds, out);
  174|  38.6k|    }

_RNCNvXs0_NtCscworrPyzRd7_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs4HPcYfJdze0_5oxttl:
  198|  1.23M|        let read_u64 = |results: &[u32], index| {
  199|  1.23M|            let data = &results[index..=index + 1];
  200|  1.23M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.23M|        };
_RNvXs0_NtCscworrPyzRd7_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs4HPcYfJdze0_5oxttl:
  197|  1.23M|    fn next_u64(&mut self) -> u64 {
  198|  1.23M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.23M|        let len = self.results.as_ref().len();
  204|  1.23M|
  205|  1.23M|        let index = self.index;
  206|  1.23M|        if index < len - 1 {
  207|  1.19M|            self.index += 2;
  208|  1.19M|            // Read an u64 from the current index
  209|  1.19M|            read_u64(self.results.as_ref(), index)
  210|  38.6k|        } else if index >= len {
  211|  38.6k|            self.generate_and_set(2);
  212|  38.6k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.23M|    }
_RNvMs_NtCscworrPyzRd7_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  38.6k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  38.6k|        assert!(index < self.results.as_ref().len());
  176|  38.6k|        self.core.generate(&mut self.results);
  177|  38.6k|        self.index = index;
  178|  38.6k|    }
_RNvMs_NtCscworrPyzRd7_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs27YbrSKC5UQ_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RNvXs_CscworrPyzRd7_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs27YbrSKC5UQ_4rand:
  441|    150|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    150|        (**self).try_fill_bytes(dest)
  443|    150|    }
_RINvYNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtCscworrPyzRd7_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs27YbrSKC5UQ_4rand:
  390|    150|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    150|        let mut seed = Self::Seed::default();
  392|    150|        rng.try_fill_bytes(seed.as_mut())?;
  393|    150|        Ok(Self::from_seed(seed))
  394|    150|    }
_RINvYNtNtCseN5i3NvhuWE_11rand_chacha6chacha12ChaCha12CoreNtCscworrPyzRd7_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs27YbrSKC5UQ_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCscworrPyzRd7_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    151|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    151|        getrandom(dest)?;
   69|    151|        Ok(())
   70|    151|    }

_RNvNvNtNtCs27YbrSKC5UQ_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   617k|            unsafe fn __getit(
   84|   617k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   617k|            ) -> $crate::option::Option<&'static $t> {
   86|   617k|                #[thread_local]
   87|   617k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   617k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   617k|
   90|   617k|                unsafe {
   91|   617k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   617k|                    })
  101|   617k|                }
  102|   617k|            }
_RNvNvNtNtCs27YbrSKC5UQ_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNvCsa6d1IKvoGEd_4trig24count_triple_blank_nodes:
   49|  1.91M|fn count_triple_blank_nodes(triple: &Triple) -> usize {
   50|  1.91M|    (match &triple.subject {
   51|    645|        Subject::BlankNode(_) => 1,
   52|  1.83M|        Subject::Triple(t) => count_triple_blank_nodes(t),
   53|  79.7k|        _ => 0,
   54|  1.91M|    }) + (match &triple.object {
   55|  1.13k|        Term::BlankNode(_) => 1,
   56|     51|        Term::Triple(t) => count_triple_blank_nodes(t),
   57|  1.91M|        _ => 0,
   58|       |    })
   59|  1.91M|}
_RNvCsa6d1IKvoGEd_4trig22count_quad_blank_nodes:
   61|   188k|fn count_quad_blank_nodes(quad: &Quad) -> usize {
   62|   188k|    (match &quad.subject {
   63|  90.2k|        Subject::BlankNode(_) => 1,
   64|  78.4k|        Subject::Triple(t) => count_triple_blank_nodes(t),
   65|  20.0k|        _ => 0,
   66|   188k|    }) + (match &quad.object {
   67|  69.9k|        Term::BlankNode(_) => 1,
   68|  1.88k|        Term::Triple(t) => count_triple_blank_nodes(t),
   69|   116k|        _ => 0,
   70|   188k|    }) + usize::from(matches!(quad.graph_name, GraphName::BlankNode(_)))
   71|   188k|}
_RNvCsa6d1IKvoGEd_4trig15serialize_quads:
   73|  8.29k|fn serialize_quads(quads: &[Quad], prefixes: Vec<(String, String)>) -> Vec<u8> {
   74|  8.29k|    let mut serializer = TriGSerializer::new();
   75|  9.59k|    for (prefix_name, prefix_iri) in prefixes {
   76|  1.29k|        serializer = serializer.with_prefix(prefix_name, prefix_iri).unwrap();
   77|  1.29k|    }
   78|  8.29k|    let mut writer = serializer.serialize_to_write(Vec::new());
   79|   197k|    for quad in quads {
   80|   188k|        writer.write_quad(quad).unwrap();
   81|   188k|    }
   82|  8.29k|    writer.finish().unwrap()
   83|  8.29k|}
_RINvCsa6d1IKvoGEd_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_runs0_0EEB2_:
    8|  8.29k|fn parse<'a>(
    9|  8.29k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.29k|    unchecked: bool,
   11|  8.29k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.29k|    let mut quads = Vec::new();
   13|  8.29k|    let mut errors = Vec::new();
   14|  8.29k|    let mut parser = TriGParser::new()
   15|  8.29k|        .with_quoted_triples()
   16|  8.29k|        .with_base_iri("http://example.com/")
   17|  8.29k|        .unwrap();
   18|  8.29k|    if unchecked {
   19|  8.29k|        parser = parser.unchecked();
   20|  8.29k|    }
   21|  8.29k|    let mut reader = parser.parse();
   22|   846k|    for chunk in chunks {
   23|   837k|        reader.extend_from_slice(chunk);
   24|  1.65M|        while let Some(result) = reader.read_next() {
   25|   820k|            match result {
   26|   196k|                Ok(quad) => quads.push(quad),
   27|   623k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.29k|    reader.end();
   32|  12.9k|    while let Some(result) = reader.read_next() {
   33|  4.62k|        match result {
   34|    206|            Ok(quad) => quads.push(quad),
   35|  4.42k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.29k|    assert!(reader.is_end());
   39|  8.29k|    (
   40|  8.29k|        quads,
   41|  8.29k|        errors,
   42|  8.29k|        reader
   43|  8.29k|            .prefixes()
   44|  8.29k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.29k|            .collect(),
   46|  8.29k|    )
   47|  8.29k|}
_RNCINvCsa6d1IKvoGEd_4trig5parseARShj1_E0B4_:
   44|  1.29k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsa6d1IKvoGEd_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_run0EE0B4_:
   44|  1.29k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCINvCsa6d1IKvoGEd_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB4_1__19___libfuzzer_sys_runs0_0EE0B4_:
   44|  1.54k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
_RNCNvNvCsa6d1IKvoGEd_4trig1__19___libfuzzer_sys_runs_0B5_:
   93|  5.23M|            .filter(|c| *c != 0xFF)
_RNCNvNvCsa6d1IKvoGEd_4trig1__19___libfuzzer_sys_runs0_0B5_:
   98|  5.23M|    let (quads_unchecked, errors_unchecked, _) = parse(data.split(|c| *c == 0xFF), true);
_RINvCsa6d1IKvoGEd_4trig5parseARShj1_EB2_:
    8|  8.29k|fn parse<'a>(
    9|  8.29k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.29k|    unchecked: bool,
   11|  8.29k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.29k|    let mut quads = Vec::new();
   13|  8.29k|    let mut errors = Vec::new();
   14|  8.29k|    let mut parser = TriGParser::new()
   15|  8.29k|        .with_quoted_triples()
   16|  8.29k|        .with_base_iri("http://example.com/")
   17|  8.29k|        .unwrap();
   18|  8.29k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  8.29k|    }
   21|  8.29k|    let mut reader = parser.parse();
   22|  16.5k|    for chunk in chunks {
   23|  8.29k|        reader.extend_from_slice(chunk);
   24|   834k|        while let Some(result) = reader.read_next() {
   25|   826k|            match result {
   26|   188k|                Ok(quad) => quads.push(quad),
   27|   637k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.29k|    reader.end();
   32|  12.8k|    while let Some(result) = reader.read_next() {
   33|  4.51k|        match result {
   34|    187|            Ok(quad) => quads.push(quad),
   35|  4.32k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.29k|    assert!(reader.is_end());
   39|  8.29k|    (
   40|  8.29k|        quads,
   41|  8.29k|        errors,
   42|  8.29k|        reader
   43|  8.29k|            .prefixes()
   44|  8.29k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.29k|            .collect(),
   46|  8.29k|    )
   47|  8.29k|}
_RINvCsa6d1IKvoGEd_4trig5parseINtNtNtCs9nhK3FOW46N_4core5slice4iter5SplithNCNvNvB2_1__19___libfuzzer_sys_run0EEB2_:
    8|  8.29k|fn parse<'a>(
    9|  8.29k|    chunks: impl IntoIterator<Item = &'a [u8]>,
   10|  8.29k|    unchecked: bool,
   11|  8.29k|) -> (Vec<Quad>, Vec<String>, Vec<(String, String)>) {
   12|  8.29k|    let mut quads = Vec::new();
   13|  8.29k|    let mut errors = Vec::new();
   14|  8.29k|    let mut parser = TriGParser::new()
   15|  8.29k|        .with_quoted_triples()
   16|  8.29k|        .with_base_iri("http://example.com/")
   17|  8.29k|        .unwrap();
   18|  8.29k|    if unchecked {
   19|      0|        parser = parser.unchecked();
   20|  8.29k|    }
   21|  8.29k|    let mut reader = parser.parse();
   22|   846k|    for chunk in chunks {
   23|   837k|        reader.extend_from_slice(chunk);
   24|  1.66M|        while let Some(result) = reader.read_next() {
   25|   826k|            match result {
   26|   188k|                Ok(quad) => quads.push(quad),
   27|   637k|                Err(error) => errors.push(error.to_string()),
   28|       |            }
   29|       |        }
   30|       |    }
   31|  8.29k|    reader.end();
   32|  12.8k|    while let Some(result) = reader.read_next() {
   33|  4.51k|        match result {
   34|    187|            Ok(quad) => quads.push(quad),
   35|  4.32k|            Err(error) => errors.push(error.to_string()),
   36|       |        }
   37|       |    }
   38|  8.29k|    assert!(reader.is_end());
   39|  8.29k|    (
   40|  8.29k|        quads,
   41|  8.29k|        errors,
   42|  8.29k|        reader
   43|  8.29k|            .prefixes()
   44|  8.29k|            .map(|(k, v)| (k.to_owned(), v.to_owned()))
   45|  8.29k|            .collect(),
   46|  8.29k|    )
   47|  8.29k|}
_RNCNvNvCsa6d1IKvoGEd_4trig1__19___libfuzzer_sys_run0B5_:
   87|  5.23M|    let (quads, errors, prefixes) = parse(data.split(|c| *c == 0xFF), false);

_RNvXsH_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
  249|    193|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsb_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
   19|   168k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStr3newCsa6d1IKvoGEd_4trig:
  254|  83.7k|    fn new(id: u128) -> Self {
  255|  83.7k|        let mut str = [0; 32];
  256|  83.7k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  83.7k|        Self(str)
  258|  83.7k|    }
_RNvXsk_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
   22|    312|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedCsa6d1IKvoGEd_4trig:
  203|  84.7k|    pub fn into_owned(self) -> BlankNode {
  204|  84.7k|        BlankNode(match self.0 {
  205|    925|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  206|  83.7k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  207|  83.7k|                id,
  208|  83.7k|                str: IdStr::new(id),
  209|  83.7k|            },
  210|       |        })
  211|  84.7k|    }
_RNvMNtCsflNycjbQork_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsa6d1IKvoGEd_4trig:
   87|   277k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|   277k|        BlankNodeRef(match &self.0 {
   89|  8.21k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|   269k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|   269k|                id: *id,
   92|   269k|                str: str.as_str(),
   93|   269k|            },
   94|       |        })
   95|   277k|    }
_RNvXsv_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_19BlankNodeRefContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  137|  89.2k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RNvXsg_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
   22|   168k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  249|   164k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsp_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  134|  89.2k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsa6d1IKvoGEd_4trig:
  261|   269k|    fn as_str(&self) -> &str {
  262|   269k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|   269k|        str::from_utf8(&self.0[..len]).unwrap()
  264|   269k|    }
_RNvXsd_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
   19|    312|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCsflNycjbQork_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs4HPcYfJdze0_5oxttl:
   48|   172k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|   172k|        let id = id.into();
   50|   172k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|   161k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  11.3k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|   172k|    }
_RNvXs2_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCs4HPcYfJdze0_5oxttl:
  216|   156k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  217|   156k|        write!(f, "_:{}", self.as_str())
  218|   156k|    }
_RNvXsk_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
   22|   822k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs4HPcYfJdze0_5oxttl:
  175|   156k|    pub const fn as_str(self) -> &'a str {
  176|   156k|        match self.0 {
  177|  2.45k|            BlankNodeRefContent::Named(id) => id,
  178|   153k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|   156k|    }
_RNvMNtCsflNycjbQork_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs4HPcYfJdze0_5oxttl:
   87|  1.68k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  1.68k|        BlankNodeRef(match &self.0 {
   89|    431|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  1.25k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  1.25k|                id: *id,
   92|  1.25k|                str: str.as_str(),
   93|  1.25k|            },
   94|       |        })
   95|  1.68k|    }
_RNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs4HPcYfJdze0_5oxttl:
  261|   619k|    fn as_str(&self) -> &str {
  262|   619k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|   619k|        str::from_utf8(&self.0[..len]).unwrap()
  264|   619k|    }
_RNvXsH_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
  249|   810k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
   19|   822k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvNtCsflNycjbQork_5oxrdf10blank_node13to_integer_idCs4HPcYfJdze0_5oxttl:
  327|   172k|fn to_integer_id(id: &str) -> Option<u128> {
  328|   172k|    let digits = id.as_bytes();
  329|   172k|    let mut value: u128 = 0;
  330|   172k|    if let None | Some(b'0') = digits.first() {
  331|  6.56k|        return None; // No empty string or leading zeros
  332|   166k|    }
  333|  5.10M|    for digit in digits {
  334|  4.94M|        value = value.checked_mul(16)?.checked_add(
  335|  4.94M|            match *digit {
  336|  4.94M|                b'0'..=b'9' => digit - b'0',
  337|  1.94M|                b'a'..=b'f' => digit - b'a' + 10,
  338|  4.59k|                _ => return None,
  339|       |            }
  340|  4.93M|            .into(),
  341|      0|        )?;
  342|       |    }
  343|   161k|    Some(value)
  344|   172k|}
_RNvMNtCsflNycjbQork_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs4HPcYfJdze0_5oxttl:
   61|   161k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|   161k|        Self(BlankNodeContent::Anonymous {
   63|   161k|            id,
   64|   161k|            str: IdStr::new(id),
   65|   161k|        })
   66|   161k|    }
_RNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStr3newCs4HPcYfJdze0_5oxttl:
  254|   779k|    fn new(id: u128) -> Self {
  255|   779k|        let mut str = [0; 32];
  256|   779k|        write!(&mut str[..], "{id:x}").unwrap();
  257|   779k|        Self(str)
  258|   779k|    }
_RNvXs0_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs4HPcYfJdze0_5oxttl:
  108|   247k|    fn default() -> Self {
  109|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  110|   617k|        loop {
  111|   617k|            let id = random();
  112|   617k|            let str = IdStr::new(id);
  113|   617k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  114|   247k|                return Self(BlankNodeContent::Anonymous { id, str });
  115|   370k|            }
  116|       |        }
  117|   247k|    }
_RNCNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  28.4M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsflNycjbQork_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   61|  11.4k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  11.4k|        Self(BlankNodeContent::Anonymous {
   63|  11.4k|            id,
   64|  11.4k|            str: IdStr::new(id),
   65|  11.4k|        })
   66|  11.4k|    }
_RNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  254|  13.0k|    fn new(id: u128) -> Self {
  255|  13.0k|        let mut str = [0; 32];
  256|  13.0k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  13.0k|        Self(str)
  258|  13.0k|    }
_RNvMs1_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strB7_:
  175|  23.1k|    pub const fn as_str(self) -> &'a str {
  176|  23.1k|        match self.0 {
  177|  1.56k|            BlankNodeRefContent::Named(id) => id,
  178|  21.6k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|  23.1k|    }
_RNvMs7_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStr6as_strB7_:
  261|  14.6k|    fn as_str(&self) -> &str {
  262|  14.6k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  14.6k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  14.6k|    }
_RNvMs1_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRef10into_ownedB7_:
  203|  1.95k|    pub fn into_owned(self) -> BlankNode {
  204|  1.95k|        BlankNode(match self.0 {
  205|    296|            BlankNodeRefContent::Named(id) => BlankNodeContent::Named(id.to_owned()),
  206|  1.66k|            BlankNodeRefContent::Anonymous { id, .. } => BlankNodeContent::Anonymous {
  207|  1.66k|                id,
  208|  1.66k|                str: IdStr::new(id),
  209|  1.66k|            },
  210|       |        })
  211|  1.95k|    }
_RNvXsd_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   19|  9.22k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsk_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   22|  9.22k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs1_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRef13new_uncheckedB7_:
  162|  6.26k|    pub fn new_unchecked(id: &'a str) -> Self {
  163|  6.26k|        if let Some(numerical_id) = to_integer_id(id) {
  164|  6.26k|            Self(BlankNodeRefContent::Anonymous {
  165|  6.26k|                id: numerical_id,
  166|  6.26k|                str: id,
  167|  6.26k|            })
  168|       |        } else {
  169|      0|            Self(BlankNodeRefContent::Named(id))
  170|       |        }
  171|  6.26k|    }
_RNvNtCsflNycjbQork_5oxrdf10blank_node13to_integer_idB3_:
  327|  6.26k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  6.26k|    let digits = id.as_bytes();
  329|  6.26k|    let mut value: u128 = 0;
  330|  6.26k|    if let None | Some(b'0') = digits.first() {
  331|      0|        return None; // No empty string or leading zeros
  332|  6.26k|    }
  333|   106k|    for digit in digits {
  334|  99.8k|        value = value.checked_mul(16)?.checked_add(
  335|  99.8k|            match *digit {
  336|  99.8k|                b'0'..=b'9' => digit - b'0',
  337|  35.7k|                b'a'..=b'f' => digit - b'a' + 10,
  338|      0|                _ => return None,
  339|       |            }
  340|  99.8k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  6.26k|    Some(value)
  344|  6.26k|}
_RNvMs1_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_12BlankNodeRef9unique_idB7_:
  195|  33.8k|    pub const fn unique_id(&self) -> Option<u128> {
  196|  33.8k|        match self.0 {
  197|  1.56k|            BlankNodeRefContent::Named(_) => None,
  198|  32.2k|            BlankNodeRefContent::Anonymous { id, .. } => Some(id),
  199|       |        }
  200|  33.8k|    }
_RNvMNtCsflNycjbQork_5oxrdf10blank_nodeNtB2_9BlankNode6as_refB4_:
   87|  14.9k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  14.9k|        BlankNodeRef(match &self.0 {
   89|    296|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  14.6k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  14.6k|                id: *id,
   92|  14.6k|                str: str.as_str(),
   93|  14.6k|            },
   94|       |        })
   95|  14.9k|    }
_RNvXsH_NtCsflNycjbQork_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  249|  6.92k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]

_RINvXs5_NtCsflNycjbQork_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendRNtNtB8_6triple4QuadE6extendINtNtNtBW_5slice4iter4IterB1H_EECsa6d1IKvoGEd_4trig:
  981|  5.35k|    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  982|   186k|        for t in iter {
  983|   181k|            self.insert(t);
  984|   181k|        }
  985|  5.35k|    }
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsa6d1IKvoGEd_4trig:
  360|   181k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|   181k|        let quad = self.encode_quad(quad.into());
  362|   181k|        self.insert_encoded(quad)
  363|   181k|    }
_RINvXs3_NtCsflNycjbQork_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12FromIteratorRNtNtB8_6triple4QuadE9from_iterINtNtNtBW_5slice4iter4IterB1O_EECsa6d1IKvoGEd_4trig:
  965|  5.35k|    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
  966|  5.35k|        let mut g = Self::new();
  967|  5.35k|        g.extend(iter);
  968|  5.35k|        g
  969|  5.35k|    }
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  82.1k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  82.1k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  82.1k|    }
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodes0B6_:
  571|  11.4k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  82.1k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  82.1k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  82.1k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  82.1k|    }
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset11distinguishs_0B6_:
  815|  41.9k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset10hash_tupleTyyyEEB5_:
  803|  18.6k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  18.6k|        let mut hasher = DefaultHasher::new();
  805|  18.6k|        v.hash(&mut hasher);
  806|  18.6k|        hasher.finish()
  807|  18.6k|    }
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset11distinguish0B6_:
  815|  41.9k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset33canonicalize_interned_blank_nodess_0B6_:
  576|  11.4k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset11hash_bnodess_0B6_:
  715|  39.0k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  82.1k|    pub(super) fn encoded_named_node<'a>(
  455|  82.1k|        &self,
  456|  82.1k|        node: impl Into<NamedNodeRef<'a>>,
  457|  82.1k|    ) -> Option<InternedNamedNode> {
  458|  82.1k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  82.1k|    }
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset10hash_tupleTylEEB5_:
  803|  9.89k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  9.89k|        let mut hasher = DefaultHasher::new();
  805|  9.89k|        v.hash(&mut hasher);
  806|  9.89k|        hasher.finish()
  807|  9.89k|    }
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  82.1k|    pub(super) fn encoded_subject<'a>(
  462|  82.1k|        &self,
  463|  82.1k|        node: impl Into<SubjectRef<'a>>,
  464|  82.1k|    ) -> Option<InternedSubject> {
  465|  82.1k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  82.1k|    }
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset11distinguishs1_0B6_:
  826|  5.50k|                .reduce(|a, b| {
  827|  5.50k|                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|  5.50k|                    a_hashes.sort();
  829|  5.50k|                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|  5.50k|                    b_hashes.sort();
  831|  5.50k|                    if a_hashes <= b_hashes {
  832|  5.50k|                        a
  833|       |                    } else {
  834|      0|                        b
  835|       |                    }
  836|  5.50k|                })
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset11hash_bnodes0B6_:
  680|  47.7k|            .map(|bnode| (*bnode, true))
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|   164k|            .map(|(s, p, o, g)| {
  857|   164k|                (
  858|   164k|                    match s {
  859|  17.3k|                        InternedSubject::NamedNode(_) => s,
  860|  9.46k|                        InternedSubject::BlankNode(bnode) => {
  861|  9.46k|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|  9.46k|                                bnode_mapping[&bnode].as_ref(),
  863|  9.46k|                                &mut self.interner,
  864|  9.46k|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|   137k|                        InternedSubject::Triple(triple) => {
  868|   137k|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|   137k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|   137k|                                &mut self.interner,
  871|   137k|                            )))
  872|       |                        }
  873|       |                    },
  874|   164k|                    p,
  875|   164k|                    match o {
  876|   160k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|  2.44k|                        InternedTerm::BlankNode(bnode) => {
  878|  2.44k|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|  2.44k|                                bnode_mapping[&bnode].as_ref(),
  880|  2.44k|                                &mut self.interner,
  881|  2.44k|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|  1.56k|                        InternedTerm::Triple(triple) => {
  885|  1.56k|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|  1.56k|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|  1.56k|                                &mut self.interner,
  888|  1.56k|                            )))
  889|       |                        }
  890|       |                    },
  891|   164k|                    match g {
  892|   163k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|    614|                        InternedGraphName::BlankNode(bnode) => {
  894|    614|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|    614|                                bnode_mapping[&bnode].as_ref(),
  896|    614|                                &mut self.interner,
  897|    614|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|   164k|            })
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  82.1k|    pub(super) fn encoded_graph_name<'a>(
  473|  82.1k|        &self,
  474|  82.1k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  82.1k|    ) -> Option<InternedGraphName> {
  476|  82.1k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  82.1k|    }
_RNCNvMNtCsflNycjbQork_5oxrdf7datasetNtB4_7Dataset11distinguishs0_0B6_:
  819|  9.89k|                .map(|b| {
  820|  9.89k|                    let mut hash_prime = hash.clone();
  821|  9.89k|                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|  9.89k|                    let (hash_prime_prime, partition_prime) =
  823|  9.89k|                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|  9.89k|                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  9.89k|                })
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_10named_node12NamedNodeRefEB5_:
  803|   176k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|   176k|        let mut hasher = DefaultHasher::new();
  805|   176k|        v.hash(&mut hasher);
  806|   176k|        hasher.finish()
  807|   176k|    }
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset10hash_tupleNtNtB5_7literal10LiteralRefEB5_:
  803|  65.6k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  65.6k|        let mut hasher = DefaultHasher::new();
  805|  65.6k|        v.hash(&mut hasher);
  806|  65.6k|        hasher.finish()
  807|  65.6k|    }
_RINvMNtCsflNycjbQork_5oxrdf7datasetNtB3_7Dataset10hash_tupleTRINtNtCsjOdcKtOMjJI_5alloc3vec3VecTyyyyEEyEEB5_:
  803|  95.5k|    fn hash_tuple(v: impl Hash) -> u64 {
  804|  95.5k|        let mut hasher = DefaultHasher::new();
  805|  95.5k|        v.hash(&mut hasher);
  806|  95.5k|        hasher.finish()
  807|  95.5k|    }
_RNCNvXsg_NtCsflNycjbQork_5oxrdf7datasetNtB7_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  82.1k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset11hash_triple:
  790|  18.6k|    fn hash_triple(
  791|  18.6k|        &self,
  792|  18.6k|        triple: &InternedTriple,
  793|  18.6k|        current_blank_node: InternedBlankNode,
  794|  18.6k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  795|  18.6k|    ) -> u64 {
  796|  18.6k|        Self::hash_tuple((
  797|  18.6k|            self.hash_subject(&triple.subject, current_blank_node, bnodes_hash),
  798|  18.6k|            self.hash_named_node(triple.predicate),
  799|  18.6k|            self.hash_term(&triple.object, current_blank_node, bnodes_hash),
  800|  18.6k|        ))
  801|  18.6k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  5.35k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  5.35k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  5.35k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  5.35k|        self.clear();
  543|   169k|        for quad in new_quads {
  544|   164k|            self.insert_encoded(quad);
  545|   164k|        }
  546|  5.35k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  5.35k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  5.35k|        let mut bnodes = HashSet::new();
  584|   169k|        for (g, s, _, o) in &self.gspo {
  585|   164k|            if let InternedSubject::BlankNode(bnode) = s {
  586|  9.46k|                bnodes.insert(*bnode);
  587|   154k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|   164k|            if let InternedSubject::Triple(triple) = s {
  590|   137k|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|   137k|            }
  592|   164k|            if let InternedTerm::BlankNode(bnode) = o {
  593|  2.44k|                bnodes.insert(*bnode);
  594|   161k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|   164k|            if let InternedTerm::Triple(triple) = o {
  597|  1.56k|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|   162k|            }
  599|   164k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|    614|                bnodes.insert(*bnode);
  601|   163k|            }
  602|       |        }
  603|  5.35k|        bnodes
  604|  5.35k|    }
_RNvXsg_NtCsflNycjbQork_5oxrdf7datasetNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 1551|  84.7k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  84.7k|        self.inner
 1553|  84.7k|            .next()
 1554|  84.7k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  84.7k|    }
_RNvXsj_NtCsflNycjbQork_5oxrdf7datasetNtB5_7DatasetNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   66|  5.35k|#[derive(Debug, Default, Clone)]
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  82.1k|    fn decode_spog(
  480|  82.1k|        &self,
  481|  82.1k|        quad: (
  482|  82.1k|            &InternedSubject,
  483|  82.1k|            &InternedNamedNode,
  484|  82.1k|            &InternedTerm,
  485|  82.1k|            &InternedGraphName,
  486|  82.1k|        ),
  487|  82.1k|    ) -> QuadRef<'_> {
  488|  82.1k|        QuadRef {
  489|  82.1k|            subject: quad.0.decode_from(&self.interner),
  490|  82.1k|            predicate: quad.1.decode_from(&self.interner),
  491|  82.1k|            object: quad.2.decode_from(&self.interner),
  492|  82.1k|            graph_name: quad.3.decode_from(&self.interner),
  493|  82.1k|        }
  494|  82.1k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset15hash_graph_name:
  772|   100k|    fn hash_graph_name(
  773|   100k|        &self,
  774|   100k|        graph_name: &InternedGraphName,
  775|   100k|        current_blank_node: InternedBlankNode,
  776|   100k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  777|   100k|    ) -> u64 {
  778|   100k|        match graph_name {
  779|  11.1k|            InternedGraphName::NamedNode(node) => {
  780|  11.1k|                Self::hash_tuple(node.decode_from(&self.interner))
  781|       |            }
  782|  8.22k|            InternedGraphName::BlankNode(bnode) => {
  783|  8.22k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  784|       |            }
  785|  81.0k|            InternedGraphName::DefaultGraph => 0,
  786|       |        }
  787|   100k|    }
_RNvXs_NtCsflNycjbQork_5oxrdf7datasetNtB4_7DatasetNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  932|  2.68k|    fn eq(&self, other: &Self) -> bool {
  933|  2.68k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  2.68k|        }
  936|  84.7k|        for q in self {
  937|  82.1k|            if !other.contains(q) {
  938|      0|                return false;
  939|  82.1k|            }
  940|       |        }
  941|  2.68k|        true
  942|  2.68k|    }
_RNvXs1_NtCsflNycjbQork_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  2.68k|    fn into_iter(self) -> Self::IntoIter {
  952|  2.68k|        self.iter()
  953|  2.68k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset3len:
  350|  5.36k|    pub fn len(&self) -> usize {
  351|  5.36k|        self.gspo.len()
  352|  5.36k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  5.35k|    fn canonicalize_interned_blank_nodes(
  563|  5.35k|        &self,
  564|  5.35k|        algorithm: CanonicalizationAlgorithm,
  565|  5.35k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  5.35k|        match algorithm {
  567|  5.35k|            CanonicalizationAlgorithm::Unstable => {
  568|  5.35k|                let bnodes = self.blank_nodes();
  569|  5.35k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  5.35k|                let (hash, partition) = self.hash_bnodes(
  571|  5.35k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  5.35k|                    &quads_per_blank_node,
  573|  5.35k|                );
  574|  5.35k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  5.35k|                    .into_iter()
  576|  5.35k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  5.35k|                    .collect()
  578|  5.35k|            }
  579|  5.35k|        }
  580|  5.35k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset55add_quad_with_quoted_triple_to_quad_per_blank_nodes_map:
  645|  3.49M|    fn add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(
  646|  3.49M|        quad: &(
  647|  3.49M|            InternedSubject,
  648|  3.49M|            InternedNamedNode,
  649|  3.49M|            InternedTerm,
  650|  3.49M|            InternedGraphName,
  651|  3.49M|        ),
  652|  3.49M|        triple: &InternedTriple,
  653|  3.49M|        map: &mut QuadsPerBlankNode,
  654|  3.49M|    ) {
  655|  3.49M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  656|    432|            map.entry(*bnode).or_default().push(quad.clone());
  657|  3.49M|        }
  658|  3.49M|        if let InternedSubject::Triple(t) = &triple.subject {
  659|  3.35M|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  660|  3.35M|        }
  661|  3.49M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  662|    546|            map.entry(*bnode).or_default().push(quad.clone());
  663|  3.49M|        }
  664|  3.49M|        if let InternedTerm::Triple(t) = &triple.object {
  665|     66|            Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, map);
  666|  3.49M|        }
  667|  3.49M|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset12hash_subject:
  735|   119k|    fn hash_subject(
  736|   119k|        &self,
  737|   119k|        node: &InternedSubject,
  738|   119k|        current_blank_node: InternedBlankNode,
  739|   119k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  740|   119k|    ) -> u64 {
  741|   119k|        match node {
  742|  40.1k|            InternedSubject::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  743|  74.5k|            InternedSubject::BlankNode(bnode) => {
  744|  74.5k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  745|       |            }
  746|       |            #[cfg(feature = "rdf-star")]
  747|  4.35k|            InternedSubject::Triple(triple) => {
  748|  4.35k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  749|       |            }
  750|       |        }
  751|   119k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  15.2k|    fn hash_bnodes(
  670|  15.2k|        &self,
  671|  15.2k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  15.2k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  15.2k|    ) -> (
  674|  15.2k|        HashMap<InternedBlankNode, u64>,
  675|  15.2k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  15.2k|    ) {
  677|  15.2k|        let mut to_hash = Vec::new();
  678|  15.2k|        let mut to_do = hashes
  679|  15.2k|            .keys()
  680|  15.2k|            .map(|bnode| (*bnode, true))
  681|  15.2k|            .collect::<HashMap<_, _>>();
  682|  15.2k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  15.2k|        let mut old_partition_count = usize::MAX;
  684|  45.7k|        while old_partition_count != partition.len() {
  685|  30.5k|            old_partition_count = partition.len();
  686|  30.5k|            partition.clear();
  687|  30.5k|            let mut new_hashes = hashes.clone();
  688|  95.5k|            for bnode in hashes.keys() {
  689|  95.5k|                let hash = if to_do.contains_key(bnode) {
  690|   100k|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|   100k|                        to_hash.push((
  692|   100k|                            self.hash_subject(s, *bnode, &hashes),
  693|   100k|                            self.hash_named_node(*p),
  694|   100k|                            self.hash_term(o, *bnode, &hashes),
  695|   100k|                            self.hash_graph_name(g, *bnode, &hashes),
  696|   100k|                        ));
  697|   100k|                    }
  698|  95.5k|                    to_hash.sort_unstable();
  699|  95.5k|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|  95.5k|                    to_hash.clear();
  701|  95.5k|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|  95.5k|                    } else {
  704|  95.5k|                        new_hashes.insert(*bnode, hash);
  705|  95.5k|                    }
  706|  95.5k|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|  95.5k|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  30.5k|            hashes = new_hashes;
  713|       |        }
  714|  15.2k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  15.2k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  15.2k|        (hashes, partition)
  717|  15.2k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset9hash_term:
  753|   119k|    fn hash_term(
  754|   119k|        &self,
  755|   119k|        term: &InternedTerm,
  756|   119k|        current_blank_node: InternedBlankNode,
  757|   119k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  758|   119k|    ) -> u64 {
  759|   119k|        match term {
  760|  6.56k|            InternedTerm::NamedNode(node) => Self::hash_tuple(node.decode_from(&self.interner)),
  761|  32.5k|            InternedTerm::BlankNode(bnode) => {
  762|  32.5k|                Self::hash_blank_node(*bnode, current_blank_node, bnodes_hash)
  763|       |            }
  764|  65.6k|            InternedTerm::Literal(literal) => Self::hash_tuple(literal.decode_from(&self.interner)),
  765|       |            #[cfg(feature = "rdf-star")]
  766|  14.2k|            InternedTerm::Triple(triple) => {
  767|  14.2k|                self.hash_triple(triple, current_blank_node, bnodes_hash)
  768|       |            }
  769|       |        }
  770|   119k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  2.68k|    pub fn iter(&self) -> Iter<'_> {
  170|  2.68k|        let iter = self.spog.iter();
  171|  2.68k|        Iter {
  172|  2.68k|            dataset: self,
  173|  2.68k|            inner: iter,
  174|  2.68k|        }
  175|  2.68k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset3new:
  109|  5.35k|    pub fn new() -> Self {
  110|  5.35k|        Self::default()
  111|  5.35k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  5.35k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  5.35k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|   169k|        for quad in &self.spog {
  623|   164k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|  9.46k|                map.entry(*bnode).or_default().push(quad.clone());
  625|   154k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|   164k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|   137k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|   137k|            }
  630|   164k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|  2.44k|                map.entry(*bnode).or_default().push(quad.clone());
  632|   161k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|   164k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|  1.56k|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|   162k|            }
  637|   164k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|    614|                map.entry(*bnode).or_default().push(quad.clone());
  639|   163k|            }
  640|       |        }
  641|  5.35k|        map
  642|  5.35k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset15hash_blank_node:
  723|   115k|    fn hash_blank_node(
  724|   115k|        node: InternedBlankNode,
  725|   115k|        current_blank_node: InternedBlankNode,
  726|   115k|        bnodes_hash: &HashMap<InternedBlankNode, u64>,
  727|   115k|    ) -> u64 {
  728|   115k|        if node == current_blank_node {
  729|   100k|            u64::MAX
  730|       |        } else {
  731|  14.6k|            bnodes_hash[&node]
  732|       |        }
  733|   115k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  15.2k|    fn distinguish(
  810|  15.2k|        &self,
  811|  15.2k|        hash: HashMap<InternedBlankNode, u64>,
  812|  15.2k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  15.2k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  15.2k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  15.2k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  15.2k|        if let Some(b_prime) = b_prime {
  817|  4.38k|            b_prime
  818|  4.38k|                .iter()
  819|  4.38k|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|  4.38k|                })
  826|  4.38k|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|  4.38k|                })
  837|  4.38k|                .unwrap_or_default()
  838|       |        } else {
  839|  10.8k|            hash
  840|       |        }
  841|  15.2k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|   181k|    fn encode_quad(
  421|   181k|        &mut self,
  422|   181k|        quad: QuadRef<'_>,
  423|   181k|    ) -> (
  424|   181k|        InternedSubject,
  425|   181k|        InternedNamedNode,
  426|   181k|        InternedTerm,
  427|   181k|        InternedGraphName,
  428|   181k|    ) {
  429|   181k|        (
  430|   181k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|   181k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|   181k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|   181k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|   181k|        )
  435|   181k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset22map_triple_blank_nodes:
  906|  3.49M|    fn map_triple_blank_nodes(
  907|  3.49M|        &mut self,
  908|  3.49M|        triple: &InternedTriple,
  909|  3.49M|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  910|  3.49M|    ) -> Triple {
  911|       |        Triple {
  912|  3.49M|            subject: if let InternedSubject::BlankNode(bnode) = &triple.subject {
  913|    432|                bnode_mapping[bnode].clone().into()
  914|  3.49M|            } else if let InternedSubject::Triple(t) = &triple.subject {
  915|  3.35M|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  916|       |            } else {
  917|   138k|                triple.subject.decode_from(&self.interner).into_owned()
  918|       |            },
  919|  3.49M|            predicate: triple.predicate.decode_from(&self.interner).into_owned(),
  920|  3.49M|            object: if let InternedTerm::BlankNode(bnode) = &triple.object {
  921|    546|                bnode_mapping[bnode].clone().into()
  922|  3.49M|            } else if let InternedTerm::Triple(t) = &triple.object {
  923|     66|                self.map_triple_blank_nodes(t, bnode_mapping).into()
  924|       |            } else {
  925|  3.49M|                triple.object.decode_from(&self.interner).into_owned()
  926|       |            },
  927|       |        }
  928|  3.49M|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|   345k|    fn insert_encoded(
  366|   345k|        &mut self,
  367|   345k|        quad: (
  368|   345k|            InternedSubject,
  369|   345k|            InternedNamedNode,
  370|   345k|            InternedTerm,
  371|   345k|            InternedGraphName,
  372|   345k|        ),
  373|   345k|    ) -> bool {
  374|   345k|        let (s, p, o, g) = quad;
  375|   345k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|   345k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|   345k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|   345k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|   345k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|   345k|        self.ospg.insert((o, s, p, g))
  381|   345k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  82.1k|    fn encoded_quad(
  438|  82.1k|        &self,
  439|  82.1k|        quad: QuadRef<'_>,
  440|  82.1k|    ) -> Option<(
  441|  82.1k|        InternedSubject,
  442|  82.1k|        InternedNamedNode,
  443|  82.1k|        InternedTerm,
  444|  82.1k|        InternedGraphName,
  445|  82.1k|    )> {
  446|  82.1k|        Some((
  447|  82.1k|            self.encoded_subject(quad.subject)?,
  448|  82.1k|            self.encoded_named_node(quad.predicate)?,
  449|  82.1k|            self.encoded_term(quad.object)?,
  450|  82.1k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  82.1k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  5.35k|    pub fn clear(&mut self) {
  412|  5.35k|        self.gspo.clear();
  413|  5.35k|        self.gpos.clear();
  414|  5.35k|        self.gosp.clear();
  415|  5.35k|        self.spog.clear();
  416|  5.35k|        self.posg.clear();
  417|  5.35k|        self.ospg.clear();
  418|  5.35k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset18triple_blank_nodes:
  607|  3.49M|    fn triple_blank_nodes(triple: &InternedTriple, bnodes: &mut HashSet<InternedBlankNode>) {
  608|  3.49M|        if let InternedSubject::BlankNode(bnode) = &triple.subject {
  609|    432|            bnodes.insert(*bnode);
  610|  3.49M|        } else if let InternedSubject::Triple(t) = &triple.subject {
  611|  3.35M|            Self::triple_blank_nodes(t, bnodes);
  612|  3.35M|        }
  613|  3.49M|        if let InternedTerm::BlankNode(bnode) = &triple.object {
  614|    546|            bnodes.insert(*bnode);
  615|  3.49M|        } else if let InternedTerm::Triple(t) = &triple.object {
  616|     66|            Self::triple_blank_nodes(t, bnodes);
  617|  3.49M|        }
  618|  3.49M|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset15hash_named_node:
  719|   119k|    fn hash_named_node(&self, node: InternedNamedNode) -> u64 {
  720|   119k|        Self::hash_tuple(node.decode_from(&self.interner))
  721|   119k|    }
_RNvMNtCsflNycjbQork_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  5.35k|    fn map_blank_nodes(
  845|  5.35k|        &mut self,
  846|  5.35k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  5.35k|    ) -> Vec<(
  848|  5.35k|        InternedSubject,
  849|  5.35k|        InternedNamedNode,
  850|  5.35k|        InternedTerm,
  851|  5.35k|        InternedGraphName,
  852|  5.35k|    )> {
  853|  5.35k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  5.35k|        old_quads
  855|  5.35k|            .into_iter()
  856|  5.35k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  5.35k|            })
  902|  5.35k|            .collect()
  903|  5.35k|    }

_RNCNvMs1_NtCsflNycjbQork_5oxrdf9interningNtB7_17InternedBlankNode12encoded_into0B9_:
  135|  21.6k|                .or_insert_with(|| blank_node.as_str().into());
_RINvXs1g_NtCsflNycjbQork_5oxrdf9interningNtB7_12InternedTermNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB9_:
  392|   214M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXsv_NtCsflNycjbQork_5oxrdf9interningNtB6_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
   86|   438M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsP_NtCsflNycjbQork_5oxrdf9interningNtB6_15InternedLiteralNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  174|   181M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsF_NtCsflNycjbQork_5oxrdf9interningNtB6_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  123|   635k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXsY_NtCsflNycjbQork_5oxrdf9interningNtB6_15InternedSubjectNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  267|   214M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvXsl_NtCsflNycjbQork_5oxrdf9interningNtB6_3KeyNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
   69|   620M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RINvXs1p_NtCsflNycjbQork_5oxrdf9interningNtB7_14InternedTripleNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB9_:
  465|   214M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsflNycjbQork_5oxrdf9interningNtB2_8Interner4hash:
   53|  26.1M|    fn hash(&self, value: &str) -> u64 {
   54|  26.1M|        let mut hasher = self.hasher.build_hasher();
   55|  26.1M|        hasher.write(value.as_bytes());
   56|  26.1M|        let hash = hasher.finish();
   57|  26.1M|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  26.1M|            hash
   61|       |        }
   62|  26.1M|    }
_RNvMs5_NtCsflNycjbQork_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  3.57M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  3.57M|        match self {
  438|   564k|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|  1.22k|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|  3.00M|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|    781|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  3.57M|    }
_RNvMs6_NtCsflNycjbQork_5oxrdf9interningNtB5_14InternedTriple12encoded_into:
  474|  7.05M|    pub fn encoded_into(triple: TripleRef<'_>, interner: &mut Interner) -> Self {
  475|  7.05M|        let interned_triple = Self {
  476|  7.05M|            subject: InternedSubject::encoded_into(triple.subject, interner),
  477|  7.05M|            predicate: InternedNamedNode::encoded_into(triple.predicate, interner),
  478|  7.05M|            object: InternedTerm::encoded_into(triple.object, interner),
  479|  7.05M|        };
  480|  7.05M|        interner
  481|  7.05M|            .triples
  482|  7.05M|            .insert(interned_triple.clone(), triple.into_owned());
  483|  7.05M|        interned_triple
  484|  7.05M|    }
_RNvMNtCsflNycjbQork_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  20.8M|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  20.8M|        let mut hash = self.hash(value);
   20|  20.8M|        loop {
   21|  20.8M|            match self.string_for_hash.entry(hash) {
   22|  60.9k|                Entry::Vacant(e) => {
   23|  60.9k|                    e.insert(value.into());
   24|  60.9k|                    return Key(hash);
   25|       |                }
   26|  20.8M|                Entry::Occupied(e) => loop {
   27|  20.8M|                    if e.get() == value {
   28|  20.8M|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  20.8M|    }
_RNvXsz_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  123|   648k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsflNycjbQork_5oxrdf9interningNtB2_8Interner3get:
   39|  5.27M|    fn get(&self, value: &str) -> Option<Key> {
   40|  5.27M|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  5.27M|            let v = self.string_for_hash.get(&hash)?;
   43|  5.27M|            if v == value {
   44|  5.27M|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  5.27M|    }
_RNvMs1_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedBlankNode11decode_from:
  157|  6.26k|    pub fn decode_from(self, interner: &Interner) -> BlankNodeRef<'_> {
  158|  6.26k|        BlankNodeRef::new_unchecked(match self {
  159|  6.26k|            Self::Number { id } => &interner.string_for_blank_node_id[&id],
  160|      0|            Self::Other { id } => interner.resolve(id),
  161|       |        })
  162|  6.26k|    }
_RNvMs5_NtCsflNycjbQork_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  1.82M|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  1.82M|        Some(match term {
  421|   287k|            TermRef::NamedNode(term) => {
  422|   287k|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|  1.49k|            TermRef::BlankNode(term) => {
  425|  1.49k|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|  1.53M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|    814|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|    814|                triple.as_ref(),
  431|    814|                interner,
  432|    814|            )?)),
  433|       |        })
  434|  1.82M|    }
_RNvXs7_NtCsflNycjbQork_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core4hash11BuildHasher12build_hasher:
  513|  36.8M|    fn build_hasher(&self) -> Self::Hasher {
  514|  36.8M|        Self::Hasher::default()
  515|  36.8M|    }
_RNvXsX_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  267|   208M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsT_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  267|   210M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCsflNycjbQork_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  392|  17.1M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  82.1k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  82.1k|        match self {
  369|  71.5k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|  10.2k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|    307|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  82.1k|    }
_RNvMs5_NtCsflNycjbQork_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  7.23M|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  7.23M|        match term {
  404|  1.13M|            TermRef::NamedNode(term) => {
  405|  1.13M|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|  3.53k|            TermRef::BlankNode(term) => {
  408|  3.53k|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  6.08M|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|  1.90k|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|  1.90k|                triple.as_ref(),
  414|  1.90k|                interner,
  415|  1.90k|            ))),
  416|       |        }
  417|  7.23M|    }
_RNvXsq_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   86|  27.4M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   86|   248M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCsflNycjbQork_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  392|   208M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1k_NtCsflNycjbQork_5oxrdf9interningNtB6_14InternedTripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  465|   210M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1b_NtCsflNycjbQork_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  392|   209M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsK_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  174|  14.7M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  174|   176M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  82.1k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  82.1k|        Some(match node {
  357|  71.5k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|  10.2k|            GraphNameRef::NamedNode(node) => {
  359|  10.2k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|    307|            GraphNameRef::BlankNode(node) => {
  362|    307|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  82.1k|    }
_RNvMs1_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedBlankNode12encoded_from:
  144|  6.75k|    pub fn encoded_from(blank_node: BlankNodeRef<'_>, interner: &Interner) -> Option<Self> {
  145|  6.75k|        if let Some(id) = blank_node.unique_id() {
  146|  6.75k|            interner
  147|  6.75k|                .string_for_blank_node_id
  148|  6.75k|                .contains_key(&id)
  149|  6.75k|                .then_some(Self::Number { id })
  150|       |        } else {
  151|       |            Some(Self::Other {
  152|      0|                id: interner.get(blank_node.as_str())?,
  153|       |            })
  154|       |        }
  155|  6.75k|    }
_RNvMs2_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|  3.07M|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|  3.07M|        match self {
  230|  13.7k|            Self::String { value_id } => {
  231|  13.7k|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|  2.99k|                value_id,
  235|  2.99k|                language_id,
  236|  2.99k|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|  2.99k|                interner.resolve(*value_id),
  238|  2.99k|                interner.resolve(*language_id),
  239|  2.99k|            ),
  240|  3.05M|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|  3.05M|                interner.resolve(*value_id),
  242|  3.05M|                datatype.decode_from(interner),
  243|  3.05M|            ),
  244|       |        }
  245|  3.07M|    }
_RNvMs3_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|   220k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|   220k|        match self {
  310|   147k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|  4.73k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|  68.7k|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|   220k|    }
_RNvMs4_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|   181k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|   181k|        match node {
  345|   157k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  23.0k|            GraphNameRef::NamedNode(node) => {
  347|  23.0k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|    614|            GraphNameRef::BlankNode(node) => {
  350|    614|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|   181k|    }
_RNvMs0_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  3.74M|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  3.74M|        Some(Self {
  100|  3.74M|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  3.74M|    }
_RNvMs1_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedBlankNode12encoded_into:
  130|  27.0k|    pub fn encoded_into(blank_node: BlankNodeRef<'_>, interner: &mut Interner) -> Self {
  131|  27.0k|        if let Some(id) = blank_node.unique_id() {
  132|  25.5k|            interner
  133|  25.5k|                .string_for_blank_node_id
  134|  25.5k|                .entry(id)
  135|  25.5k|                .or_insert_with(|| blank_node.as_str().into());
  136|  25.5k|            Self::Number { id }
  137|       |        } else {
  138|  1.56k|            Self::Other {
  139|  1.56k|                id: interner.get_or_intern(blank_node.as_str()),
  140|  1.56k|            }
  141|       |        }
  142|  27.0k|    }
_RNvMs0_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|  7.52M|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|  7.52M|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|  7.52M|    }
_RNvXs8_NtCsflNycjbQork_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher9write_u64:
  532|  36.8M|    fn write_u64(&mut self, i: u64) {
  533|  36.8M|        self.value = i
  534|  36.8M|    }
_RNvMs2_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|  1.53M|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|  1.53M|        let value_id = interner.get(literal.value())?;
  211|  1.53M|        Some(if literal.is_plain() {
  212|  1.05k|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    372|                    value_id,
  215|    372|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|    686|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|  1.53M|                value_id,
  223|  1.53M|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|  1.53M|    }
_RNvMs3_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  1.82M|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  1.82M|        Some(match node {
  294|  77.9k|            SubjectRef::NamedNode(node) => {
  295|  77.9k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|  4.95k|            SubjectRef::BlankNode(node) => {
  298|  4.95k|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|  1.74M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|  1.74M|                triple.as_ref(),
  303|  1.74M|                interner,
  304|  1.74M|            )?)),
  305|       |        })
  306|  1.82M|    }
_RNvXsa_NtCsflNycjbQork_5oxrdf9interningNtB5_8InternerNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
    7|  5.35k|#[derive(Debug, Default, Clone)]
_RNvMNtCsflNycjbQork_5oxrdf9interningNtB2_8Interner7resolve:
   64|  10.6M|    fn resolve(&self, key: Key) -> &str {
   65|  10.6M|        &self.string_for_hash[&key.0]
   66|  10.6M|    }
_RNvXsg_NtCsflNycjbQork_5oxrdf9interningNtB5_3KeyNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   69|  42.1M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   86|   427M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsJ_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  174|   177M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs2_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  6.08M|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  6.08M|        let value_id = interner.get_or_intern(literal.value());
  192|  6.08M|        if literal.is_plain() {
  193|  2.42k|            if let Some(language) = literal.language() {
  194|    812|                Self::LanguageTaggedString {
  195|    812|                    value_id,
  196|    812|                    language_id: interner.get_or_intern(language),
  197|    812|                }
  198|       |            } else {
  199|  1.61k|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  6.08M|            Self::TypedLiteral {
  203|  6.08M|                value_id,
  204|  6.08M|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  6.08M|            }
  206|       |        }
  207|  6.08M|    }
_RNvMs3_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  7.23M|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  7.23M|        match node {
  278|   311k|            SubjectRef::NamedNode(node) => {
  279|   311k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|  10.3k|            SubjectRef::BlankNode(node) => {
  282|  10.3k|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|  6.91M|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|  6.91M|                triple.as_ref(),
  287|  6.91M|                interner,
  288|  6.91M|            ))),
  289|       |        }
  290|  7.23M|    }
_RNvXsf_NtCsflNycjbQork_5oxrdf9interningNtB5_3KeyNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   69|   604M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsA_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  123|  58.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsD_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedBlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  123|   170k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1l_NtCsflNycjbQork_5oxrdf9interningNtB6_14InternedTripleNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  465|   280M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1o_NtCsflNycjbQork_5oxrdf9interningNtB6_14InternedTripleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  465|   207M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1q_NtCsflNycjbQork_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  507|  5.35k|#[derive(Default, Clone)]
_RNvXs1s_NtCsflNycjbQork_5oxrdf9interningNtB6_14IdentityHasherNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  518|  36.8M|#[derive(Default)]
_RNvXs13_NtCsflNycjbQork_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  335|  9.79M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCsflNycjbQork_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  335|  1.90M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsU_NtCsflNycjbQork_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  267|   293M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs0_NtCsflNycjbQork_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  14.7M|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  14.7M|        Self {
   94|  14.7M|            id: interner.get_or_intern(named_node.as_str()),
   95|  14.7M|        }
   96|  14.7M|    }
_RNvMs6_NtCsflNycjbQork_5oxrdf9interningNtB5_14InternedTriple12encoded_from:
  486|  1.74M|    pub fn encoded_from(triple: TripleRef<'_>, interner: &Interner) -> Option<Self> {
  487|  1.74M|        let interned_triple = Self {
  488|  1.74M|            subject: InternedSubject::encoded_from(triple.subject, interner)?,
  489|  1.74M|            predicate: InternedNamedNode::encoded_from(triple.predicate, interner)?,
  490|  1.74M|            object: InternedTerm::encoded_from(triple.object, interner)?,
  491|       |        };
  492|  1.74M|        interner
  493|  1.74M|            .triples
  494|  1.74M|            .contains_key(&interned_triple)
  495|  1.74M|            .then_some(interned_triple)
  496|  1.74M|    }
_RNvXs8_NtCsflNycjbQork_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher6finish:
  524|  36.8M|    fn finish(&self) -> u64 {
  525|  36.8M|        self.value
  526|  36.8M|    }

_RNvXsM_NtCsflNycjbQork_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
   37|  50.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMNtCsflNycjbQork_5oxrdf7literalNtB2_7Literal6as_refCsa6d1IKvoGEd_4trig:
  129|   255k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   255k|        LiteralRef(match &self.0 {
  131|  5.02k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  1.58k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  1.58k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   248k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   248k|                value,
  137|   248k|                datatype: datatype.as_ref(),
  138|   248k|            },
  139|       |        })
  140|   255k|    }
_RNvXsI_NtCsflNycjbQork_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
   37|  2.16M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsflNycjbQork_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
   34|  2.16M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCsflNycjbQork_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
   34|  50.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCsflNycjbQork_5oxrdf7literalNtB3_7Literal18new_simple_literalRNtNtCsjOdcKtOMjJI_5alloc6string6StringECs4HPcYfJdze0_5oxttl:
   47|    233|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    233|        Self(LiteralContent::String(value.into()))
   49|    233|    }
_RNvXsF_NtCsflNycjbQork_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
   34|   403k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsflNycjbQork_5oxrdf7literalNtB2_7Literal6as_refCs4HPcYfJdze0_5oxttl:
  129|  1.22M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.22M|        LiteralRef(match &self.0 {
  131|    182|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     41|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     41|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.22M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.22M|                value,
  137|  1.22M|                datatype: datatype.as_ref(),
  138|  1.22M|            },
  139|       |        })
  140|  1.22M|    }
_RNvXsM_NtCsflNycjbQork_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
   37|   403k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef5valueCs4HPcYfJdze0_5oxttl:
  488|  1.32M|    pub const fn value(self) -> &'a str {
  489|  1.32M|        match self.0 {
  490|  4.06k|            LiteralRefContent::String(value)
  491|    936|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  1.32M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  1.32M|        }
  494|  1.32M|    }
_RNvXsu_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCs4HPcYfJdze0_5oxttl:
  565|  5.23k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  5.23k|        match self.0 {
  567|  4.30k|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    936|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    936|                print_quoted_str(value, f)?;
  570|    936|                write!(f, "@{language}")
  571|       |            }
  572|      0|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|      0|                print_quoted_str(value, f)?;
  574|      0|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  5.23k|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef8datatypeCs4HPcYfJdze0_5oxttl:
  513|  1.32M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.32M|        match self.0 {
  515|  4.06k|            LiteralRefContent::String(_) => xsd::STRING,
  516|    936|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.31M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.32M|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalCs4HPcYfJdze0_5oxttl:
  459|    234|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|    234|        LiteralRef(LiteralRefContent::String(value))
  461|    234|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef8is_plainCs4HPcYfJdze0_5oxttl:
  526|  5.23k|    pub const fn is_plain(self) -> bool {
  527|    234|        matches!(
  528|  5.23k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  5.23k|    }
_RINvMNtCsflNycjbQork_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  1.61M|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  1.61M|        let value = value.into();
   55|  1.61M|        let datatype = datatype.into();
   56|  1.61M|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  1.61M|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  1.61M|    }
_RINvXsV_NtCsflNycjbQork_5oxrdf7literalNtB6_10LiteralRefNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  440|  65.6k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvXs13_NtCsflNycjbQork_5oxrdf7literalNtB7_17LiteralRefContentNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB9_:
  443|  65.6k|#[derive(PartialEq, Eq, Debug, Clone, Copy, Hash)]
_RINvMNtCsflNycjbQork_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    951|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    951|        let value = value.into();
   55|    951|        let datatype = datatype.into();
   56|    951|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|    951|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    951|    }
_RINvMst_NtCsflNycjbQork_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  465|  3.05M|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  466|  3.05M|        let datatype = datatype.into();
  467|  3.05M|        LiteralRef(if datatype == xsd::STRING {
  468|      0|            LiteralRefContent::String(value)
  469|       |        } else {
  470|  3.05M|            LiteralRefContent::TypedLiteral { value, datatype }
  471|       |        })
  472|  3.05M|    }
_RINvMNtCsflNycjbQork_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  3.77k|    pub fn new_language_tagged_literal_unchecked(
   86|  3.77k|        value: impl Into<String>,
   87|  3.77k|        language: impl Into<String>,
   88|  3.77k|    ) -> Self {
   89|  3.77k|        Self(LiteralContent::LanguageTaggedString {
   90|  3.77k|            value: value.into(),
   91|  3.77k|            language: language.into(),
   92|  3.77k|        })
   93|  3.77k|    }
_RINvNtCsflNycjbQork_5oxrdf7literal16print_quoted_strNtNtCs9nhK3FOW46N_4core3fmt9FormatterEB4_:
  616|  5.23k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  5.23k|    f.write_char('"')?;
  618|  43.1k|    for c in string.chars() {
  619|  43.1k|        match c {
  620|    222|            '\u{08}' => f.write_str("\\b"),
  621|    264|            '\t' => f.write_str("\\t"),
  622|    290|            '\n' => f.write_str("\\n"),
  623|    326|            '\u{0C}' => f.write_str("\\f"),
  624|    149|            '\r' => f.write_str("\\r"),
  625|    867|            '"' => f.write_str("\\\""),
  626|     71|            '\\' => f.write_str("\\\\"),
  627|  40.9k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  22.1k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  5.23k|    f.write_char('"')
  632|  5.23k|}
_RINvMNtCsflNycjbQork_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  15.7k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  15.7k|        Self(LiteralContent::String(value.into()))
   49|  15.7k|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  3.48k|    pub const fn language(self) -> Option<&'a str> {
  502|  3.48k|        match self.0 {
  503|  1.18k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  2.30k|            _ => None,
  505|       |        }
  506|  3.48k|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  513|  7.62M|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  7.62M|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  7.62M|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  7.62M|    }
_RNvMNtCsflNycjbQork_5oxrdf7literalNtB2_7Literal6as_refB4_:
  129|  7.40M|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  7.40M|        LiteralRef(match &self.0 {
  131|    600|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    150|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    150|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  7.39M|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  7.39M|                value,
  137|  7.39M|                datatype: datatype.as_ref(),
  138|  7.39M|            },
  139|       |        })
  140|  7.40M|    }
_RNvXsF_NtCsflNycjbQork_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   34|   147M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsflNycjbQork_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   37|   147M|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|  13.7k|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|  13.7k|        LiteralRef(LiteralRefContent::String(value))
  461|  13.7k|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  7.62M|    pub const fn is_plain(self) -> bool {
  527|  7.62M|        matches!(
  528|  7.62M|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  7.62M|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef10into_ownedB7_:
  534|  8.86M|    pub fn into_owned(self) -> Literal {
  535|  8.86M|        Literal(match self.0 {
  536|    720|            LiteralRefContent::String(value) => LiteralContent::String(value.to_owned()),
  537|    180|            LiteralRefContent::LanguageTaggedString { value, language } => {
  538|    180|                LiteralContent::LanguageTaggedString {
  539|    180|                    value: value.to_owned(),
  540|    180|                    language: language.to_owned(),
  541|    180|                }
  542|       |            }
  543|  8.86M|            LiteralRefContent::TypedLiteral { value, datatype } => LiteralContent::TypedLiteral {
  544|  8.86M|                value: value.to_owned(),
  545|  8.86M|                datatype: datatype.into_owned(),
  546|  8.86M|            },
  547|       |        })
  548|  8.86M|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  482|  2.99k|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  483|  2.99k|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  484|  2.99k|    }
_RNvMst_NtCsflNycjbQork_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  7.62M|    pub const fn value(self) -> &'a str {
  489|  7.62M|        match self.0 {
  490|  2.30k|            LiteralRefContent::String(value)
  491|  1.18k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  7.62M|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  7.62M|        }
  494|  7.62M|    }

_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsa6d1IKvoGEd_4trig:
  128|   801k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   801k|        Self { iri }
  130|   801k|    }
_RNvXs8_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRefINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_9NamedNodeE2eqCsa6d1IKvoGEd_4trig:
  166|  31.9k|    fn eq(&self, other: &NamedNode) -> bool {
  167|  31.9k|        self.as_str() == other.as_str()
  168|  31.9k|    }
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsa6d1IKvoGEd_4trig:
  133|  31.9k|    pub const fn as_str(self) -> &'a str {
  134|  31.9k|        self.iri
  135|  31.9k|    }
_RNvMNtCsflNycjbQork_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsa6d1IKvoGEd_4trig:
   54|   801k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   801k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   801k|    }
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsa6d1IKvoGEd_4trig:
  138|   181k|    pub fn into_owned(self) -> NamedNode {
  139|   181k|        NamedNode::new_unchecked(self.iri)
  140|   181k|    }
_RNvXsl_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
   17|  5.34M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  106|  28.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
   17|   123k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsflNycjbQork_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsa6d1IKvoGEd_4trig:
   44|  31.9k|    pub fn as_str(&self) -> &str {
   45|  31.9k|        self.iri.as_str()
   46|  31.9k|    }
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs4HPcYfJdze0_5oxttl:
  138|  10.0k|    pub fn into_owned(self) -> NamedNode {
  139|  10.0k|        NamedNode::new_unchecked(self.iri)
  140|  10.0k|    }
_RNvXsp_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
   17|  1.52M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs4HPcYfJdze0_5oxttl:
  106|   165k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs4HPcYfJdze0_5oxttl:
  128|  2.96M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  2.96M|        Self { iri }
  130|  2.96M|    }
_RNvXs5_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCs4HPcYfJdze0_5oxttl:
  145|  1.87M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  1.87M|        write!(f, "<{}>", self.as_str())
  147|  1.87M|    }
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs4HPcYfJdze0_5oxttl:
  133|  2.00M|    pub const fn as_str(self) -> &'a str {
  134|  2.00M|        self.iri
  135|  2.00M|    }
_RNvMNtCsflNycjbQork_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs4HPcYfJdze0_5oxttl:
   54|  2.96M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  2.96M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  2.96M|    }
_RINvMNtCsflNycjbQork_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  23.5M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  23.5M|        Self { iri: iri.into() }
   41|  23.5M|    }
_RINvMNtCsflNycjbQork_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  2.36M|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.36M|        Self { iri: iri.into() }
   41|  2.36M|    }
_RINvXsA_NtCsflNycjbQork_5oxrdf10named_nodeNtB6_12NamedNodeRefNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  106|   227k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  20.1M|    pub const fn as_str(self) -> &'a str {
  134|  20.1M|        self.iri
  135|  20.1M|    }
_RNvMNtCsflNycjbQork_5oxrdf10named_nodeNtB2_9NamedNode6as_refB4_:
   54|  17.9M|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  17.9M|        NamedNodeRef::new_unchecked(&self.iri)
   56|  17.9M|    }
_RNvXsp_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   17|   356M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  106|  3.05M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  23.3M|    pub fn into_owned(self) -> NamedNode {
  139|  23.3M|        NamedNode::new_unchecked(self.iri)
  140|  23.3M|    }
_RNvXs9_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  1.61M|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  1.61M|        self.as_str() == other.as_str()
  175|  1.61M|    }
_RNvMNtCsflNycjbQork_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  1.61M|    pub fn as_str(&self) -> &str {
   45|  1.61M|        self.iri.as_str()
   46|  1.61M|    }
_RNvMs4_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  25.4M|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  25.4M|        Self { iri }
  130|  25.4M|    }
_RNvXs6_NtCsflNycjbQork_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  1.86M|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  1.86M|        node.into_owned()
  154|  1.86M|    }

_RNvXs2V_NtCsflNycjbQork_5oxrdf6tripleNtB6_4QuadNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
 1149|   194k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1c_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphName16is_default_graphCsa6d1IKvoGEd_4trig:
  960|   173k|    pub fn is_default_graph(&self) -> bool {
  961|   173k|        self.as_ref().is_default_graph()
  962|   173k|    }
_RNvXs2p_NtCsflNycjbQork_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  780|  3.83M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsn_NtCsflNycjbQork_5oxrdf6tripleNtB5_10SubjectRef10into_ownedCsa6d1IKvoGEd_4trig:
  294|   156k|    pub fn into_owned(self) -> Subject {
  295|   156k|        match self {
  296|  13.1k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|  83.7k|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  59.9k|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|   156k|    }
_RNvXs1X_NtCsflNycjbQork_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
  155|  59.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1A_NtCsflNycjbQork_5oxrdf6tripleNtB6_7QuadRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_4QuadE4fromCsa6d1IKvoGEd_4trig:
 1298|   370k|    fn from(quad: &'a Quad) -> Self {
 1299|   370k|        quad.as_ref()
 1300|   370k|    }
_RNvXs1V_NtCsflNycjbQork_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  155|  4.03M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1c_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphName6as_refCsa6d1IKvoGEd_4trig:
  965|   738k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|   738k|        match self {
  967|  82.7k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|  19.6k|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|   636k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|   738k|    }
_RNvXs2E_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  940|   194k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMs1k_NtCsflNycjbQork_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsa6d1IKvoGEd_4trig:
 1048|   173k|    pub fn is_default_graph(&self) -> bool {
 1049|   173k|        matches!(self, Self::DefaultGraph)
 1050|   173k|    }
_RNvXs2M_NtCsflNycjbQork_5oxrdf6tripleNtB6_12GraphNameRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
 1028|   188k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash, Default)]
_RNvXs2c_NtCsflNycjbQork_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
  385|  59.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2a_NtCsflNycjbQork_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  385|  2.64M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1u_NtCsflNycjbQork_5oxrdf6tripleNtB6_4Quad6as_refCsa6d1IKvoGEd_4trig:
 1182|   370k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|   370k|        QuadRef {
 1184|   370k|            subject: self.subject.as_ref(),
 1185|   370k|            predicate: self.predicate.as_ref(),
 1186|   370k|            object: self.object.as_ref(),
 1187|   370k|            graph_name: self.graph_name.as_ref(),
 1188|   370k|        }
 1189|   370k|    }
_RNvMsc_NtCsflNycjbQork_5oxrdf6tripleNtB5_7Subject6as_refCsa6d1IKvoGEd_4trig:
  181|   548k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|   548k|        match self {
  183|  61.1k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|   185k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|   301k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|   548k|    }
_RNvXs22_NtCsflNycjbQork_5oxrdf6tripleNtB6_10SubjectRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsa6d1IKvoGEd_4trig:
  268|   178k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvMsy_NtCsflNycjbQork_5oxrdf6tripleNtB5_4Term6as_refCsa6d1IKvoGEd_4trig:
  417|   370k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   370k|        match self {
  419|  38.4k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  72.3k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   255k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  3.65k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   370k|    }
_RNvXs2r_NtCsflNycjbQork_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsa6d1IKvoGEd_4trig:
  780|  59.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1k_NtCsflNycjbQork_5oxrdf6tripleNtB6_12GraphNameRef10into_ownedCsa6d1IKvoGEd_4trig:
 1053|  6.14k|    pub fn into_owned(self) -> GraphName {
 1054|  6.14k|        match self {
 1055|  2.90k|            Self::NamedNode(node) => GraphName::NamedNode(node.into_owned()),
 1056|    962|            Self::BlankNode(node) => GraphName::BlankNode(node.into_owned()),
 1057|  2.27k|            Self::DefaultGraph => GraphName::DefaultGraph,
 1058|       |        }
 1059|  6.14k|    }
_RINvMs16_NtCsflNycjbQork_5oxrdf6tripleNtB7_6Triple3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermECs4HPcYfJdze0_5oxttl:
  795|  1.64M|    pub fn new(
  796|  1.64M|        subject: impl Into<Subject>,
  797|  1.64M|        predicate: impl Into<NamedNode>,
  798|  1.64M|        object: impl Into<Term>,
  799|  1.64M|    ) -> Self {
  800|  1.64M|        Self {
  801|  1.64M|            subject: subject.into(),
  802|  1.64M|            predicate: predicate.into(),
  803|  1.64M|            object: object.into(),
  804|  1.64M|        }
  805|  1.64M|    }
_RINvMs1u_NtCsflNycjbQork_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefB11_NtB7_9GraphNameECs4HPcYfJdze0_5oxttl:
 1167|  6.17k|    pub fn new(
 1168|  6.17k|        subject: impl Into<Subject>,
 1169|  6.17k|        predicate: impl Into<NamedNode>,
 1170|  6.17k|        object: impl Into<Term>,
 1171|  6.17k|        graph_name: impl Into<GraphName>,
 1172|  6.17k|    ) -> Self {
 1173|  6.17k|        Self {
 1174|  6.17k|            subject: subject.into(),
 1175|  6.17k|            predicate: predicate.into(),
 1176|  6.17k|            object: object.into(),
 1177|  6.17k|            graph_name: graph_name.into(),
 1178|  6.17k|        }
 1179|  6.17k|    }
_RINvMs1u_NtCsflNycjbQork_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node12NamedNodeRefNtNtB9_10blank_node9BlankNodeNtB7_9GraphNameECs4HPcYfJdze0_5oxttl:
 1167|  39.5k|    pub fn new(
 1168|  39.5k|        subject: impl Into<Subject>,
 1169|  39.5k|        predicate: impl Into<NamedNode>,
 1170|  39.5k|        object: impl Into<Term>,
 1171|  39.5k|        graph_name: impl Into<GraphName>,
 1172|  39.5k|    ) -> Self {
 1173|  39.5k|        Self {
 1174|  39.5k|            subject: subject.into(),
 1175|  39.5k|            predicate: predicate.into(),
 1176|  39.5k|            object: object.into(),
 1177|  39.5k|            graph_name: graph_name.into(),
 1178|  39.5k|        }
 1179|  39.5k|    }
_RINvMs1u_NtCsflNycjbQork_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECs4HPcYfJdze0_5oxttl:
 1167|   717k|    pub fn new(
 1168|   717k|        subject: impl Into<Subject>,
 1169|   717k|        predicate: impl Into<NamedNode>,
 1170|   717k|        object: impl Into<Term>,
 1171|   717k|        graph_name: impl Into<GraphName>,
 1172|   717k|    ) -> Self {
 1173|   717k|        Self {
 1174|   717k|            subject: subject.into(),
 1175|   717k|            predicate: predicate.into(),
 1176|   717k|            object: object.into(),
 1177|   717k|            graph_name: graph_name.into(),
 1178|   717k|        }
 1179|   717k|    }
_RNvXs12_NtCsflNycjbQork_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_10SubjectRefE4fromCs4HPcYfJdze0_5oxttl:
  732|  1.60M|    fn from(node: SubjectRef<'a>) -> Self {
  733|  1.60M|        match node {
  734|  74.3k|            SubjectRef::NamedNode(node) => node.into(),
  735|  84.3k|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|  1.45M|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  1.60M|    }
_RNvXs1i_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_16NamedOrBlankNodeE4fromCs4HPcYfJdze0_5oxttl:
 1011|  20.5k|    fn from(node: NamedOrBlankNode) -> Self {
 1012|  20.5k|        match node {
 1013|  15.8k|            NamedOrBlankNode::NamedNode(node) => node.into(),
 1014|  4.66k|            NamedOrBlankNode::BlankNode(node) => node.into(),
 1015|       |        }
 1016|  20.5k|    }
_RNvXsT_NtCsflNycjbQork_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4HPcYfJdze0_5oxttl:
  665|  1.69M|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|  1.69M|        Self::NamedNode(node)
  667|  1.69M|    }
_RNvXsV_NtCsflNycjbQork_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs4HPcYfJdze0_5oxttl:
  679|  85.3k|    fn from(node: BlankNodeRef<'a>) -> Self {
  680|  85.3k|        Self::BlankNode(node)
  681|  85.3k|    }
_RNvXs1g_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs4HPcYfJdze0_5oxttl:
  997|  4.66k|    fn from(node: BlankNode) -> Self {
  998|  4.66k|        Self::BlankNode(node)
  999|  4.66k|    }
_RNvXsl_NtCsflNycjbQork_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_16NamedOrBlankNodeE4fromCs4HPcYfJdze0_5oxttl:
  252|   151k|    fn from(node: NamedOrBlankNode) -> Self {
  253|   151k|        match node {
  254|  78.2k|            NamedOrBlankNode::NamedNode(node) => node.into(),
  255|  73.3k|            NamedOrBlankNode::BlankNode(node) => node.into(),
  256|       |        }
  257|   151k|    }
_RNvXs1e_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCs4HPcYfJdze0_5oxttl:
  983|  15.8k|    fn from(node: NamedNode) -> Self {
  984|  15.8k|        Self::NamedNode(node)
  985|  15.8k|    }
_RNvXs0_NtCsflNycjbQork_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromCs4HPcYfJdze0_5oxttl:
   43|   109k|    fn from(node: NamedNode) -> Self {
   44|   109k|        Self::NamedNode(node)
   45|   109k|    }
_RNvXs2c_NtCsflNycjbQork_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
  385|   717k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsZ_NtCsflNycjbQork_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_6TripleE4fromCs4HPcYfJdze0_5oxttl:
  708|  1.45M|    fn from(node: &'a Triple) -> Self {
  709|  1.45M|        Self::Triple(node)
  710|  1.45M|    }
_RNvMsc_NtCsflNycjbQork_5oxrdf6tripleNtB5_7Subject6as_refCs4HPcYfJdze0_5oxttl:
  181|  1.45M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.45M|        match self {
  183|  61.2k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    594|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.39M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.45M|    }
_RNvXs2_NtCsflNycjbQork_5oxrdf6tripleNtB5_16NamedOrBlankNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromCs4HPcYfJdze0_5oxttl:
   57|  78.6k|    fn from(node: BlankNode) -> Self {
   58|  78.6k|        Self::BlankNode(node)
   59|  78.6k|    }
_RNvXsL_NtCsflNycjbQork_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7SubjectE4fromCs4HPcYfJdze0_5oxttl:
  520|    241|    fn from(node: Subject) -> Self {
  521|    241|        match node {
  522|      0|            Subject::NamedNode(node) => node.into(),
  523|    241|            Subject::BlankNode(node) => node.into(),
  524|       |            #[cfg(feature = "rdf-star")]
  525|      0|            Subject::Triple(triple) => Self::Triple(triple),
  526|       |        }
  527|    241|    }
_RNvMsy_NtCsflNycjbQork_5oxrdf6tripleNtB5_4Term6as_refCs4HPcYfJdze0_5oxttl:
  417|  1.45M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  1.45M|        match self {
  419|   229k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.09k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  1.22M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|     51|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  1.45M|    }
_RNvXsf_NtCsflNycjbQork_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4HPcYfJdze0_5oxttl:
  207|    177|    fn from(node: NamedNodeRef<'_>) -> Self {
  208|    177|        node.into_owned().into()
  209|    177|    }
_RNvXs1X_NtCsflNycjbQork_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
  155|   901k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsB_NtCsflNycjbQork_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs4HPcYfJdze0_5oxttl:
  444|  9.87k|    fn from(node: NamedNodeRef<'_>) -> Self {
  445|  9.87k|        node.into_owned().into()
  446|  9.87k|    }
_RNvXs2G_NtCsflNycjbQork_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4HPcYfJdze0_5oxttl:
  940|   763k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsC_NtCsflNycjbQork_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   285k|    fn from(node: BlankNode) -> Self {
  452|   285k|        Self::BlankNode(node)
  453|   285k|    }
_RNvXsA_NtCsflNycjbQork_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   300k|    fn from(node: NamedNode) -> Self {
  438|   300k|        Self::NamedNode(node)
  439|   300k|    }
_RNvXs1X_NtCsflNycjbQork_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  155|   174M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsG_NtCsflNycjbQork_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  7.88k|    fn from(triple: Triple) -> Self {
  481|  7.88k|        Self::Triple(Box::new(triple))
  482|  7.88k|    }
_RNvMsy_NtCsflNycjbQork_5oxrdf6tripleNtB5_4Term6as_refB7_:
  417|  8.79M|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  8.79M|        match self {
  419|  1.39M|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  1.36k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  7.40M|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|    165|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  8.79M|    }
_RNvXs2r_NtCsflNycjbQork_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  780|   174M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs16_NtCsflNycjbQork_5oxrdf6tripleNtB6_6Triple6as_refB8_:
  835|  8.79M|    pub fn as_ref(&self) -> TripleRef<'_> {
  836|  8.79M|        TripleRef {
  837|  8.79M|            subject: self.subject.as_ref(),
  838|  8.79M|            predicate: self.predicate.as_ref(),
  839|  8.79M|            object: self.object.as_ref(),
  840|  8.79M|        }
  841|  8.79M|    }
_RNvXs2c_NtCsflNycjbQork_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  385|   174M|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMsR_NtCsflNycjbQork_5oxrdf6tripleNtB5_7TermRef10into_ownedB7_:
  637|  10.5M|    pub fn into_owned(self) -> Term {
  638|  10.5M|        match self {
  639|  1.67M|            Self::NamedNode(node) => Term::NamedNode(node.into_owned()),
  640|  1.09k|            Self::BlankNode(node) => Term::BlankNode(node.into_owned()),
  641|  8.86M|            Self::Literal(literal) => Term::Literal(literal.into_owned()),
  642|       |            #[cfg(feature = "rdf-star")]
  643|    132|            Self::Triple(triple) => Term::Triple(Box::new(triple.clone())),
  644|       |        }
  645|  10.5M|    }
_RNvXse_NtCsflNycjbQork_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|   161k|    fn from(node: NamedNode) -> Self {
  201|   161k|        Self::NamedNode(node)
  202|   161k|    }
_RNvMsn_NtCsflNycjbQork_5oxrdf6tripleNtB5_10SubjectRef10into_ownedB7_:
  294|  7.19M|    pub fn into_owned(self) -> Subject {
  295|  7.19M|        match self {
  296|   424k|            Self::NamedNode(node) => Subject::NamedNode(node.into_owned()),
  297|    866|            Self::BlankNode(node) => Subject::BlankNode(node.into_owned()),
  298|       |            #[cfg(feature = "rdf-star")]
  299|  6.76M|            Self::Triple(triple) => Subject::Triple(Box::new(triple.clone())),
  300|       |        }
  301|  7.19M|    }
_RNvMsc_NtCsflNycjbQork_5oxrdf6tripleNtB5_7Subject6as_refB7_:
  181|  8.79M|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  8.79M|        match self {
  183|   355k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  1.08k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  8.44M|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  8.79M|    }
_RNvXsi_NtCsflNycjbQork_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  229|  4.98M|    fn from(node: Triple) -> Self {
  230|  4.98M|        Self::Triple(Box::new(node))
  231|  4.98M|    }
_RNvXsg_NtCsflNycjbQork_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|   367k|    fn from(node: BlankNode) -> Self {
  215|   367k|        Self::BlankNode(node)
  216|   367k|    }
_RNvXsE_NtCsflNycjbQork_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  1.63M|    fn from(literal: Literal) -> Self {
  466|  1.63M|        Self::Literal(literal)
  467|  1.63M|    }
_RNvMs18_NtCsflNycjbQork_5oxrdf6tripleNtB6_9TripleRef10into_ownedB8_:
  908|  7.05M|    pub fn into_owned(self) -> Triple {
  909|  7.05M|        Triple {
  910|  7.05M|            subject: self.subject.into_owned(),
  911|  7.05M|            predicate: self.predicate.into_owned(),
  912|  7.05M|            object: self.object.into_owned(),
  913|  7.05M|        }
  914|  7.05M|    }

_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  33.1k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  33.1k|        Self { mode, unchecked }
  175|  33.1k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  2.10M|    fn recognize_pname_or_keyword<'a>(
  238|  2.10M|        &self,
  239|  2.10M|        data: &'a [u8],
  240|  2.10M|        is_ending: bool,
  241|  2.10M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  2.10M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  2.10M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  2.10M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  2.10M|        let mut i = 0;
  246|       |        loop {
  247|  4.38M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  4.18M|                match r {
  249|  3.78M|                    Ok((c, consumed)) => {
  250|  3.78M|                        if c == ':' {
  251|   193k|                            i += consumed;
  252|   193k|                            break;
  253|  3.59M|                        } else if i == 0 {
  254|  1.53M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.12M|                                return Some((
  256|  1.12M|                                    consumed,
  257|  1.12M|                                    Err((
  258|  1.12M|                                        0..consumed,
  259|  1.12M|                                        format!(
  260|  1.12M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.12M|                                        ),
  262|  1.12M|                                    )
  263|  1.12M|                                        .into()),
  264|  1.12M|                                ));
  265|   415k|                            }
  266|   415k|                            i += consumed;
  267|  2.05M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  1.86M|                            i += consumed;
  269|  1.86M|                        } else {
  270|   248k|                            while data[..i].ends_with(b".") {
  271|  58.1k|                                i -= 1;
  272|  58.1k|                            }
  273|   190k|                            return Some((
  274|   190k|                                i,
  275|   190k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   190k|                            ));
  277|       |                        }
  278|       |                    }
  279|   393k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   199k|            } else if is_ending {
  282|  4.19k|                while data[..i].ends_with(b".") {
  283|    716|                    i -= 1;
  284|    716|                }
  285|  3.48k|                return Some(if i == 0 {
  286|  1.04k|                    (
  287|  1.04k|                        1,
  288|  1.04k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.04k|                    )
  290|       |                } else {
  291|  2.43k|                    (
  292|  2.43k|                        i,
  293|  2.43k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  2.43k|                    )
  295|       |                });
  296|       |            } else {
  297|   196k|                return None;
  298|       |            }
  299|       |        }
  300|   193k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   193k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   193k|        if pn_prefix.ends_with('.') {
  305|    150|            return Some((
  306|    150|                i,
  307|    150|                Err((
  308|    150|                    0..i,
  309|    150|                    format!(
  310|    150|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    150|                )
  312|    150|                    .into()),
  313|    150|            ));
  314|   193k|        }
  315|       |
  316|   145k|        let (consumed, pn_local_result) =
  317|   193k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   145k|        Some((
  319|   145k|            consumed + i,
  320|   145k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   145k|            }),
  325|   145k|        ))
  326|  2.10M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   243k|    fn recognize_optional_pn_local<'a>(
  348|   243k|        &self,
  349|   243k|        data: &'a [u8],
  350|   243k|        is_ending: bool,
  351|   243k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   243k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   243k|        let mut i = 0;
  354|   243k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   243k|        let mut position_that_is_already_in_buffer = 0;
  356|   243k|        let mut might_be_invalid_iri = false;
  357|   243k|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  1.31M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  1.25M|                match r {
  361|  1.24M|                    Ok((c, consumed)) => {
  362|  1.24M|                        if c == '%' {
  363|  5.08k|                            i += 1;
  364|  5.08k|                            let a = char::from(*data.get(i)?);
  365|  2.84k|                            i += 1;
  366|  2.84k|                            let b = char::from(*data.get(i)?);
  367|  2.36k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|    387|                                return Some((i + 1, Err((
  369|    387|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|    387|                                ).into())));
  371|  1.97k|                            }
  372|  1.97k|                            i += 1;
  373|  1.97k|                            ends_with_unescaped_dot = 0;
  374|  1.24M|                        } else if c == '\\' {
  375|   189k|                            i += 1;
  376|   189k|                            let a = char::from(*data.get(i)?);
  377|   187k|                            if self.unchecked
  378|   136k|                                || matches!(
  379|   171k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  50.2k|                            {
  396|  50.2k|                                // ok to escape
  397|   136k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   134k|                                // ok to escape but requires IRI validation
  399|   134k|                                might_be_invalid_iri = true;
  400|   134k|                            } else {
  401|  2.60k|                                return Some((i + 1, Err((
  402|  2.60k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  2.60k|                                ).into())));
  404|       |                            }
  405|   184k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   184k|                            // We add the missing bytes
  407|   184k|                            if i - position_that_is_already_in_buffer > 1 {
  408|  48.2k|                                buffer.push_str(
  409|  48.2k|                                    match str_from_utf8(
  410|  48.2k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|  48.2k|                                        position_that_is_already_in_buffer..i - 1,
  412|  48.2k|                                    ) {
  413|  48.2k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   136k|                            }
  418|   184k|                            buffer.push(a);
  419|   184k|                            i += 1;
  420|   184k|                            position_that_is_already_in_buffer = i;
  421|   184k|                            ends_with_unescaped_dot = 0;
  422|  1.05M|                        } else if i == 0 {
  423|   153k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|  45.7k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   107k|                            }
  427|   107k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  73.3k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  73.3k|                                        || c == ':';
  431|  33.9k|                            }
  432|   107k|                            i += consumed;
  433|   898k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|   682k|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|   456k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|   456k|                                        || c == ':';
  438|   225k|                            }
  439|   682k|                            i += consumed;
  440|   682k|                            ends_with_unescaped_dot = 0;
  441|   216k|                        } else if c == '.' {
  442|  94.0k|                            i += consumed;
  443|  94.0k|                            ends_with_unescaped_dot += 1;
  444|  94.0k|                        } else {
  445|   122k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  72.3k|                                buffer.push_str(
  447|  72.3k|                                    match str_from_utf8(
  448|  72.3k|                                        &data[position_that_is_already_in_buffer..i],
  449|  72.3k|                                        position_that_is_already_in_buffer..i,
  450|  72.3k|                                    ) {
  451|  72.3k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  72.3k|                                for _ in 0..ends_with_unescaped_dot {
  457|  1.92k|                                    buffer.pop();
  458|  1.92k|                                }
  459|  72.3k|                                i -= ends_with_unescaped_dot;
  460|  72.3k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|  49.8k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|  49.8k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|  49.8k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|  49.8k|                                i -= ends_with_unescaped_dot;
  469|  49.8k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   122k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  4.09k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  63.1k|            } else if is_ending {
  477|  1.20k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    769|                    while buffer.ends_with('.') {
  480|    391|                        buffer.pop();
  481|    391|                        i -= 1;
  482|    391|                    }
  483|    378|                    Cow::Owned(buffer)
  484|       |                } else {
  485|    828|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|    828|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  1.31k|                    while let Some(d) = data.strip_suffix('.') {
  491|    490|                        data = d;
  492|    490|                        i -= 1;
  493|    490|                    }
  494|    828|                    Cow::Borrowed(data)
  495|       |                };
  496|  1.20k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  61.9k|                return None;
  499|       |            }
  500|       |        }
  501|   243k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|  2.08M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|  2.08M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  665|  2.08M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  666|  2.08M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|  2.08M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  668|  2.08M|        let mut i = 0;
  669|  2.08M|        let c = *data.first()?;
  670|  2.08M|        if matches!(c, b'+' | b'-') {
  671|  47.0k|            i += 1;
  672|  2.04M|        }
  673|       |        // We read the digits before .
  674|  2.08M|        let mut count_before: usize = 0;
  675|       |        loop {
  676|  6.80M|            let c = *data.get(i)?;
  677|  6.72M|            if c.is_ascii_digit() {
  678|  4.71M|                i += 1;
  679|  4.71M|                count_before += 1;
  680|  4.71M|            } else {
  681|  2.00M|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|  2.00M|        let count_after = if *data.get(i)? == b'.' {
  688|   123k|            i += 1;
  689|   123k|
  690|   123k|            let mut count_after = 0;
  691|       |            loop {
  692|   230k|                let c = *data.get(i)?;
  693|   213k|                if c.is_ascii_digit() {
  694|   106k|                    i += 1;
  695|   106k|                    count_after += 1;
  696|   106k|                } else {
  697|   106k|                    break;
  698|   106k|                }
  699|   106k|            }
  700|   106k|            Some(count_after)
  701|       |        } else {
  702|  1.88M|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|  1.99M|        let c = *data.get(i)?;
  707|  1.99M|        if matches!(c, b'e' | b'E') {
  708|  1.38M|            i += 1;
  709|       |
  710|  1.38M|            let c = *data.get(i)?;
  711|  1.38M|            if matches!(c, b'+' | b'-') {
  712|  2.41k|                i += 1;
  713|  1.38M|            }
  714|       |
  715|  1.38M|            let mut found = false;
  716|       |            loop {
  717|  7.12M|                let c = *data.get(i)?;
  718|  7.07M|                if c.is_ascii_digit() {
  719|  5.74M|                    i += 1;
  720|  5.74M|                    found = true;
  721|  5.74M|                } else {
  722|  1.32M|                    break;
  723|  1.32M|                }
  724|  1.32M|            }
  725|  1.32M|            Some((
  726|  1.32M|                i,
  727|  1.32M|                if !found {
  728|  3.62k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|  1.32M|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|     99|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|  1.32M|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   604k|        } else if let Some(count_after) = count_after {
  736|   104k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|  74.8k|                i -= 1;
  739|  74.8k|                Some((
  740|  74.8k|                    i,
  741|  74.8k|                    if count_before == 0 {
  742|  10.1k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|  64.6k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  29.2k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   500k|                i,
  753|   500k|                if count_before == 0 {
  754|  23.8k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   476k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|  2.08M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|  36.1k|    fn recognize_hex_char(
  798|  36.1k|        data: &[u8],
  799|  36.1k|        len: usize,
  800|  36.1k|        escape_char: char,
  801|  36.1k|        position: usize,
  802|  36.1k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|  36.1k|        if data.len() < len {
  804|  1.11k|            return Ok(None);
  805|  35.0k|        }
  806|  35.0k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  34.7k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  34.7k|        })?;
  815|  34.4k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  34.4k|        })?;
  823|  34.2k|        Ok(Some(c))
  824|  36.1k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  10.4M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  10.4M|        matches!(c,
  901|  4.56M|        'A'..='Z'
  902|  3.19M|        | 'a'..='z'
  903|  27.4k|        | '\u{00C0}'..='\u{00D6}'
  904|  27.4k|        | '\u{00D8}'..='\u{00F6}'
  905|  27.3k|        | '\u{00F8}'..='\u{02FF}'
  906|  23.0k|        | '\u{0370}'..='\u{037D}'
  907|  22.9k|        | '\u{037F}'..='\u{1FFF}'
  908|  3.67k|        | '\u{200C}'..='\u{200D}'
  909|  3.67k|        | '\u{2070}'..='\u{218F}'
  910|  3.66k|        | '\u{2C00}'..='\u{2FEF}'
  911|  3.65k|        | '\u{3001}'..='\u{D7FF}'
  912|  1.41k|        | '\u{F900}'..='\u{FDCF}'
  913|  1.13k|        | '\u{FDF0}'..='\u{FFFD}'
  914|  1.13k|        | '\u{10000}'..='\u{EFFFF}')
  915|  10.4M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   234k|    fn recognize_blank_node_label(
  504|   234k|        data: &[u8],
  505|   234k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   234k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   234k|        let mut i = 2;
  508|       |        loop {
  509|  5.50M|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|  5.44M|                Ok((c, consumed)) => {
  511|  5.44M|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|  5.24M|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  5.26M|                    {
  514|  5.26M|                        // Ok
  515|  5.26M|                    } else if i > 2 && c == '.' {
  516|  8.43k|                        if data[i - 1] == b'.' {
  517|    219|                            i -= 1;
  518|    219|                            return Some((
  519|    219|                                i,
  520|    219|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|    219|                            ));
  522|  8.21k|                        }
  523|   178k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|   178k|                    } else if data[i - 1] == b'.' {
  529|  1.63k|                        i -= 1;
  530|  1.63k|                        return Some((
  531|  1.63k|                            i,
  532|  1.63k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.63k|                        ));
  534|       |                    } else {
  535|   176k|                        return Some((
  536|   176k|                            i,
  537|   176k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|   176k|                        ));
  539|       |                    }
  540|  5.27M|                    i += consumed;
  541|       |                }
  542|    700|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   234k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|  77.2k|    fn recognize_string(
  588|  77.2k|        data: &[u8],
  589|  77.2k|        delimiter: u8,
  590|  77.2k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|  77.2k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|  77.2k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|  77.2k|        let mut string = String::new();
  594|  77.2k|        let mut i = 1;
  595|       |        loop {
  596|   125k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|  92.1k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|  90.6k|                Ok(s) => string.push_str(s),
  599|  1.48k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|  90.6k|            i += end;
  602|  90.6k|            match data[i] {
  603|  90.6k|                c if c == delimiter => {
  604|  20.7k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|  69.9k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|  63.5k|                    i += additional + 1;
  609|  63.5k|                    match c {
  610|  48.6k|                        Ok(c) => {
  611|  48.6k|                            string.push(c);
  612|  48.6k|                        }
  613|  14.9k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|  14.9k|                            let end = memchr(delimiter, &data[i..])?;
  616|  1.96k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|  77.2k|    }
_RNvNtCs4HPcYfJdze0_5oxttl5lexer18resolve_local_name:
  936|  93.9k|pub fn resolve_local_name(
  937|  93.9k|    prefix: &str,
  938|  93.9k|    local: &str,
  939|  93.9k|    might_be_invalid_iri: bool,
  940|  93.9k|    prefixes: &HashMap<String, Iri<String>>,
  941|  93.9k|) -> Result<NamedNode, String> {
  942|  93.9k|    if let Some(start) = prefixes.get(prefix) {
  943|  74.8k|        let iri = format!("{start}{local}");
  944|  74.8k|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|  70.4k|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|  1.74k|                return Err(format!(
  948|  1.74k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|  1.74k|                ));
  950|  68.7k|            }
  951|  4.36k|        }
  952|  73.0k|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|  19.1k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|  93.9k|}
_RNvXs2_NtCs4HPcYfJdze0_5oxttl5lexerNtB5_7N3TokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   12|  4.60M|#[derive(Debug, PartialEq, Eq)]
_RNvNtCs4HPcYfJdze0_5oxttl5lexer16string_from_utf8:
  968|  2.49M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|  2.49M|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|  2.49M|    })
  977|  2.49M|}
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|  29.8k|    fn recognize_long_string(
  626|  29.8k|        data: &[u8],
  627|  29.8k|        delimiter: u8,
  628|  29.8k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|  29.8k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|  29.8k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|  29.8k|        let mut string = String::new();
  632|  29.8k|        let mut i = 3;
  633|       |        loop {
  634|  53.1k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|  35.9k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|  34.7k|                Ok(s) => string.push_str(s),
  637|  1.25k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|  34.7k|            i += end;
  640|  34.7k|            match data[i] {
  641|  34.7k|                c if c == delimiter => {
  642|  31.2k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  9.80k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|  20.4k|                    }
  645|  20.4k|                    i += 1;
  646|  20.4k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  3.44k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  3.07k|                    i += additional + 1;
  651|  3.07k|                    match c {
  652|  2.93k|                        Ok(c) => {
  653|  2.93k|                            string.push(c);
  654|  2.93k|                        }
  655|    148|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|  29.8k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  11.2M|    fn recognize_unicode_char(
  827|  11.2M|        data: &[u8],
  828|  11.2M|        position: usize,
  829|  11.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  11.2M|        let mut code_point: u32;
  831|  11.2M|        let bytes_needed: usize;
  832|  11.2M|        let mut lower_boundary = 0x80;
  833|  11.2M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  11.2M|        let byte = *data.first()?;
  836|  10.9M|        match byte {
  837|  10.9M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|   278k|            0xC2..=0xDF => {
  839|   143k|                bytes_needed = 1;
  840|   143k|                code_point = u32::from(byte) & 0x1F;
  841|   143k|            }
  842|   135k|            0xE0..=0xEF => {
  843|  37.2k|                if byte == 0xE0 {
  844|  6.89k|                    lower_boundary = 0xA0;
  845|  30.3k|                }
  846|  37.2k|                if byte == 0xED {
  847|  2.91k|                    upper_boundary = 0x9F;
  848|  34.3k|                }
  849|  37.2k|                bytes_needed = 2;
  850|  37.2k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|  97.8k|            0xF0..=0xF4 => {
  853|  15.8k|                if byte == 0xF0 {
  854|  1.36k|                    lower_boundary = 0x90;
  855|  14.4k|                }
  856|  15.8k|                if byte == 0xF4 {
  857|  4.08k|                    upper_boundary = 0x8F;
  858|  11.7k|                }
  859|  15.8k|                bytes_needed = 3;
  860|  15.8k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   282k|                return Some(Err((
  864|   282k|                    position..=position,
  865|   282k|                    "Invalid UTF-8 character encoding",
  866|   282k|                )
  867|   282k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|   206k|        for i in 1..=bytes_needed {
  872|   206k|            let byte = *data.get(i)?;
  873|   153k|            if byte < lower_boundary || upper_boundary < byte {
  874|   115k|                return Some(Err((
  875|   115k|                    position..=position + i,
  876|   115k|                    "Invalid UTF-8 character encoding",
  877|   115k|                )
  878|   115k|                    .into()));
  879|  38.2k|            }
  880|  38.2k|            lower_boundary = 0x80;
  881|  38.2k|            upper_boundary = 0xBF;
  882|  38.2k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  27.9k|        Some(
  886|  27.9k|            char::from_u32(code_point)
  887|  27.9k|                .map(|c| (c, bytes_needed + 1))
  888|  27.9k|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  27.9k|                }),
  895|  27.9k|        )
  896|  11.2M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|   530k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|   530k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|   530k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|   530k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|   530k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|  35.3k|    fn parse_lang_tag<'a>(
  573|  35.3k|        &self,
  574|  35.3k|        lang_tag: &'a [u8],
  575|  35.3k|        position: Range<usize>,
  576|  35.3k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|  35.3k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|  35.3k|        Ok(N3Token::LangTag(if self.unchecked {
  579|  11.1k|            lang_tag
  580|       |        } else {
  581|  24.1k|            LanguageTag::parse(lang_tag)
  582|  24.1k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|  20.1k|                .into_inner()
  584|       |        }))
  585|  35.3k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  2.71M|    fn recognize_iri(
  178|  2.71M|        &self,
  179|  2.71M|        data: &[u8],
  180|  2.71M|        options: &N3LexerOptions,
  181|  2.71M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  2.71M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  2.71M|        let mut string = Vec::new();
  184|  2.71M|        let mut i = 1;
  185|       |        loop {
  186|  2.71M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  2.50M|            string.extend_from_slice(&data[i..i + end]);
  188|  2.50M|            i += end;
  189|  2.50M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  2.49M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  11.3k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  6.11k|                    i += additional + 1;
  197|  6.11k|                    match c {
  198|  2.25k|                        Ok(c) => {
  199|  2.25k|                            let mut buf = [0; 4];
  200|  2.25k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  2.25k|                        }
  202|  3.86k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  2.71M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|  84.7k|    fn recognize_escape(
  763|  84.7k|        data: &[u8],
  764|  84.7k|        position: usize,
  765|  84.7k|        with_echar: bool,
  766|  84.7k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|  84.7k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|  84.7k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  769|  84.7k|        match *data.get(1)? {
  770|  33.1k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  32.8k|                Ok(c) => Some((5, Ok(c?))),
  772|    324|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  2.98k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|  2.49k|                Ok(c) => Some((9, Ok(c?))),
  776|    495|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    491|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    370|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|    531|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|    623|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|    364|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|  1.17k|            b'"' if with_echar => Some((1, Ok('"'))),
  784|    979|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  15.0k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|  18.1k|            c => Some((
  787|  18.1k|                1,
  788|  18.1k|                Err((
  789|  18.1k|                    position..position + 2,
  790|  18.1k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|  18.1k|                )
  792|  18.1k|                    .into()),
  793|  18.1k|            )), // TODO: read until end of string
  794|       |        }
  795|  84.7k|    }
_RNvNtCs4HPcYfJdze0_5oxttl5lexer13str_from_utf8:
  958|  2.83M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|  2.83M|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|  2.83M|    })
  966|  2.83M|}
_RNvXNtCs4HPcYfJdze0_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  12.8M|    fn recognize_next_token<'a>(
   56|  12.8M|        &mut self,
   57|  12.8M|        data: &'a [u8],
   58|  12.8M|        is_ending: bool,
   59|  12.8M|        options: &N3LexerOptions,
   60|  12.8M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  12.8M|        match *data.first()? {
   62|  4.23M|            b'<' => match *data.get(1)? {
   63|  1.49M|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  8.73k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|      0|                        Some(if let Ok(result) = result {
   67|      0|                            (consumed, Ok(result))
   68|       |                        } else {
   69|      0|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|      0|                    } else if is_ending {
   72|      0|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|      0|                        None
   75|       |                    }
   76|       |                }
   77|  4.51k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|      0|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|      0|                        Some(if let Ok(result) = result {
   80|      0|                            (consumed, Ok(result))
   81|       |                        } else {
   82|      0|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|      0|                    } else if is_ending {
   85|      0|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|      0|                        None
   88|       |                    }
   89|       |                }
   90|  2.71M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  1.54M|                if *data.get(1)? == b'>' {
   94|  1.47M|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  67.7k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   278k|            b'_' => match data.get(1)? {
  100|   234k|                b':' => Self::recognize_blank_node_label(data),
  101|  4.21k|                c => Some((
  102|  4.21k|                    1,
  103|  4.21k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  4.21k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  40.7k|                if self.mode != N3LexerMode::NTriples
  108|  40.7k|                    && *data.get(1)? == b'"'
  109|  26.7k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  15.8k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  18.4k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  79.2k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  79.2k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  13.9k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  58.8k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  84.1k|            b'@' => self.recognize_lang_tag(data),
  124|   760k|            b'.' => match data.get(1) {
  125|   230k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   547k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   186k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  14.2k|                if *data.get(1)? == b'^' {
  131|  2.78k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  10.4k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   386k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  34.9k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  28.5k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  12.5k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   347k|                if *data.get(1)? == b'|' {
  142|   235k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  68.0k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  8.87k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   120k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  21.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  13.4k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  5.91k|                if *data.get(1)? == b'}' {
  153|    699|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  3.71k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  26.3k|                if *data.get(1)? == b'>' {
  160|  1.62k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  23.2k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  3.02M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  50.2k|            b'?' => self.recognize_variable(data, is_ending),
  167|  2.10M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  12.8M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  2.49M|    fn parse_iri(
  211|  2.49M|        &self,
  212|  2.49M|        iri: Vec<u8>,
  213|  2.49M|        position: Range<usize>,
  214|  2.49M|        options: &N3LexerOptions,
  215|  2.49M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  2.49M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  2.47M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   604k|                if self.unchecked {
  220|   200k|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   404k|                    base_iri
  223|   404k|                        .resolve(&iri)
  224|   404k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   572k|                .into_inner()
  227|  1.87M|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|  1.87M|                Iri::parse(iri)
  231|  1.87M|                    .map_err(|e| (position, e.to_string()))?
  232|  1.87M|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  2.49M|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  50.2k|    fn recognize_variable<'a>(
  329|  50.2k|        &self,
  330|  50.2k|        data: &'a [u8],
  331|  50.2k|        is_ending: bool,
  332|  50.2k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|  50.2k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  30.4k|        Some((
  336|  30.4k|            consumed + 1,
  337|  30.4k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  30.4k|            }),
  344|  30.4k|        ))
  345|  50.2k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  84.1k|    fn recognize_lang_tag<'a>(
  548|  84.1k|        &self,
  549|  84.1k|        data: &'a [u8],
  550|  84.1k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  84.1k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  84.1k|        let mut is_last_block_empty = true;
  553|   519k|        for (i, c) in data[1..].iter().enumerate() {
  554|   519k|            if c.is_ascii_alphabetic() {
  555|   417k|                is_last_block_empty = false;
  556|   417k|            } else if i == 0 {
  557|  10.2k|                return Some((
  558|  10.2k|                    1,
  559|  10.2k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  10.2k|                ));
  561|  91.9k|            } else if is_last_block_empty {
  562|  2.13k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|  89.8k|            } else if *c == b'-' {
  564|  56.6k|                is_last_block_empty = true;
  565|  56.6k|            } else {
  566|  33.1k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  38.5k|        None
  570|  84.1k|    }
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  8.90M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  919|  8.90M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  8.90M|    }
_RNvXs8_NtCs4HPcYfJdze0_5oxttl5lexerNtB5_11N3LexerModeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   31|   133k|#[derive(Eq, PartialEq)]
_RNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  8.47M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  924|  8.47M|        Self::is_possible_pn_chars_u(c)
  925|  4.66M|            || matches!(c,
  926|  3.68M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  8.47M|    }
_RNCNvNtCs4HPcYfJdze0_5oxttl5lexer13str_from_utf80B5_:
  959|  2.97k|    str::from_utf8(data).map_err(|e| {
  960|  2.97k|        (
  961|  2.97k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  2.97k|            format!("Invalid UTF-8: {e}"),
  963|  2.97k|        )
  964|  2.97k|            .into()
  965|  2.97k|    })
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  31.9k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  27.9k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    215|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    215|            (
  817|    215|                position..position + len +2,
  818|    215|                format!(
  819|    215|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    215|                ),
  821|    215|            )
  822|    215|        })?;
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   142k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   142k|                prefix: pn_prefix,
  322|   142k|                local,
  323|   142k|                might_be_invalid_iri,
  324|   142k|            }),
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  26.8k|            result.and_then(|(name, _)| {
  338|  26.8k|                if name.is_empty() {
  339|  20.8k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  6.03k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  26.8k|            }),
_RNCNvNtCs4HPcYfJdze0_5oxttl5lexer16string_from_utf80B5_:
  969|  14.7k|    String::from_utf8(data).map_err(|e| {
  970|  14.7k|        (
  971|  14.7k|            range.start + e.utf8_error().valid_up_to()
  972|  14.7k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  14.7k|            format!("Invalid UTF-8: {e}"),
  974|  14.7k|        )
  975|  14.7k|            .into()
  976|  14.7k|    })
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  4.04k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs4HPcYfJdze0_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|    365|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|    365|            (
  809|    365|                position..position + len + 2,
  810|    365|                format!(
  811|    365|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|    365|                ),
  813|    365|            )
  814|    365|        })?;

_RNvXs_NtCs4HPcYfJdze0_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer14recognize_next:
   51|  11.6M|    fn recognize_next(
   52|  11.6M|        mut self,
   53|  11.6M|        token: N3Token<'_>,
   54|  11.6M|        context: &mut TriGRecognizerContext,
   55|  11.6M|        results: &mut Vec<Quad>,
   56|  11.6M|        errors: &mut Vec<RuleRecognizerError>,
   57|  11.6M|    ) -> Self {
   58|  11.6M|        if let Some(rule) = self.stack.pop() {
   59|  10.2M|            match rule {
   60|       |                // [1g] trigDoc      ::=  (directive | block)*
   61|       |                // [2g] block        ::=  triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
   62|       |                // [3]  directive    ::=  prefixID | base | sparqlPrefix | sparqlBase
   63|       |                // [4]  prefixID     ::=  '@prefix' PNAME_NS IRIREF '.'
   64|       |                // [5]  base         ::=  '@base' IRIREF '.'
   65|       |                // [5s] sparqlPrefix ::=  "PREFIX" PNAME_NS IRIREF
   66|       |                // [6s] sparqlBase   ::=  "BASE" IRIREF
   67|       |                TriGState::TriGDoc => {
   68|   464k|                    self.cur_graph = GraphName::DefaultGraph;
   69|   464k|                    self.stack.push(TriGState::TriGDoc);
   70|  23.0k|                    match token {
   71|  22.6k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
   72|  5.79k|                            self.stack.push(TriGState::BaseExpectIri);
   73|  5.79k|                            self
   74|       |                        }
   75|  16.8k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
   76|    133|                            self.stack.push(TriGState::PrefixExpectPrefix);
   77|    133|                            self
   78|       |                        }
   79|  10.9k|                        N3Token::LangTag("prefix") => {
   80|  9.68k|                            self.stack.push(TriGState::ExpectDot);
   81|  9.68k|                            self.stack.push(TriGState::PrefixExpectPrefix);
   82|  9.68k|                            self
   83|       |                        }
   84|  1.25k|                        N3Token::LangTag("base") => {
   85|    128|                            self.stack.push(TriGState::ExpectDot);
   86|    128|                            self.stack.push(TriGState::BaseExpectIri);
   87|    128|                            self
   88|       |                        }
   89|      0|                        N3Token::PlainKeyword(k)
   90|  16.7k|                            if k.eq_ignore_ascii_case("graph") && context.with_graph_name =>
   91|      0|                        {
   92|      0|                            self.stack.push(TriGState::WrappedGraph);
   93|      0|                            self.stack.push(TriGState::GraphName);
   94|      0|                            self
   95|       |                        }
   96|   213k|                        N3Token::Punctuation("{") if context.with_graph_name => {
   97|  6.29k|                            self.stack.push(TriGState::WrappedGraph);
   98|  6.29k|                            self.recognize_next(token, context, results, errors)
   99|       |                        }
  100|       |                        _ => {
  101|   442k|                            self.stack.push(TriGState::TriplesOrGraph);
  102|   442k|                            self.recognize_next(token, context, results, errors)
  103|       |                        }
  104|       |                    }
  105|       |                }
  106|       |                TriGState::ExpectDot => {
  107|   176k|                    self.cur_subject.pop();
  108|   176k|                    if token == N3Token::Punctuation(".") {
  109|   145k|                        self
  110|       |                    } else {
  111|  31.2k|                        errors.push("A dot is expected at the end of statements".into());
  112|  31.2k|                        self.recognize_next(token, context, results, errors)
  113|       |                    }
  114|       |                }
  115|       |                TriGState::BaseExpectIri => {
  116|  5.00k|                    if let N3Token::IriRef(iri) = token {
  117|  4.81k|                        context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  118|  4.81k|                        self
  119|       |                    } else {
  120|    189|                        self.error(errors, "The BASE keyword should be followed by an IRI")
  121|       |                    }
  122|       |                }
  123|  9.00k|                TriGState::PrefixExpectPrefix => match token {
  124|  9.00k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  125|  8.83k|                        self.stack.push(TriGState::PrefixExpectIri {
  126|  8.83k|                            name: prefix.to_owned(),
  127|  8.83k|                        });
  128|  8.83k|                        self
  129|       |                    }
  130|    780|                    _ => self.error(
  131|    780|                        errors,
  132|    780|                        "The PREFIX keyword should be followed by a prefix like 'ex:'",
  133|    780|                    ),
  134|       |                },
  135|  7.13k|                TriGState::PrefixExpectIri { name } => {
  136|  7.13k|                    if let N3Token::IriRef(iri) = token {
  137|  6.92k|                        context.prefixes.insert(name, Iri::parse_unchecked(iri));
  138|  6.92k|                        self
  139|       |                    } else {
  140|    205|                        self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  141|       |                    }
  142|       |                }
  143|       |                // [3g]  triplesOrGraph  ::=  labelOrSubject ( wrappedGraph | predicateObjectList '.' ) | quotedTriple predicateObjectList '.'
  144|       |                // [4g]  triples2        ::=  blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
  145|  58.0k|                TriGState::TriplesOrGraph => match token {
  146|   107k|                    N3Token::IriRef(iri) => {
  147|   107k|                        self.stack
  148|   107k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  149|   107k|                                term: NamedNode::new_unchecked(iri).into(),
  150|   107k|                            });
  151|   107k|                        self
  152|       |                    }
  153|       |                    N3Token::PrefixedName {
  154|  20.0k|                        prefix,
  155|  20.0k|                        local,
  156|  20.0k|                        might_be_invalid_iri,
  157|  20.0k|                    } => match resolve_local_name(
  158|  20.0k|                        prefix,
  159|  20.0k|                        &local,
  160|  20.0k|                        might_be_invalid_iri,
  161|  20.0k|                        &context.prefixes,
  162|  20.0k|                    ) {
  163|  2.55k|                        Ok(t) => {
  164|  2.55k|                            self.stack
  165|  2.55k|                                .push(TriGState::WrappedGraphOrPredicateObjectList {
  166|  2.55k|                                    term: t.into(),
  167|  2.55k|                                });
  168|  2.55k|                            self
  169|       |                        }
  170|  17.5k|                        Err(e) => self.error(errors, e),
  171|       |                    },
  172|  77.4k|                    N3Token::BlankNodeLabel(label) => {
  173|  77.4k|                        self.stack
  174|  77.4k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  175|  77.4k|                                term: BlankNode::new_unchecked(label).into(),
  176|  77.4k|                            });
  177|  77.4k|                        self
  178|       |                    }
  179|   207k|                    N3Token::Punctuation("[") => {
  180|  7.29k|                        self.stack
  181|  7.29k|                            .push(TriGState::WrappedGraphBlankNodePropertyListCurrent);
  182|  7.29k|                        self
  183|       |                    }
  184|   199k|                    N3Token::Punctuation("(") => {
  185|  32.2k|                        self.stack.push(TriGState::ExpectDot);
  186|  32.2k|                        self.stack.push(TriGState::PredicateObjectList);
  187|  32.2k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  188|  32.2k|                        self
  189|       |                    }
  190|       |                    #[cfg(feature = "rdf-star")]
  191|   167k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  192|  58.0k|                        self.stack.push(TriGState::ExpectDot);
  193|  58.0k|                        self.stack.push(TriGState::PredicateObjectList);
  194|  58.0k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  195|  58.0k|                        self.stack.push(TriGState::QuotedObject);
  196|  58.0k|                        self.stack.push(TriGState::Verb);
  197|  58.0k|                        self.stack.push(TriGState::QuotedSubject);
  198|  58.0k|                        self
  199|       |                    }
  200|   139k|                    _ => self.error(errors, "TOKEN is not a valid subject or graph name"),
  201|       |                },
  202|   172k|                TriGState::WrappedGraphOrPredicateObjectList { term } => {
  203|   172k|                    if token == N3Token::Punctuation("{") && context.with_graph_name {
  204|  20.5k|                        self.cur_graph = term.into();
  205|  20.5k|                        self.stack.push(TriGState::WrappedGraph);
  206|   151k|                    } else {
  207|   151k|                        self.cur_subject.push(term.into());
  208|   151k|                        self.stack.push(TriGState::ExpectDot);
  209|   151k|                        self.stack.push(TriGState::PredicateObjectList);
  210|   151k|                    }
  211|   172k|                    self.recognize_next(token, context, results, errors)
  212|       |                }
  213|       |                TriGState::WrappedGraphBlankNodePropertyListCurrent => {
  214|  6.89k|                    if token == N3Token::Punctuation("]") {
  215|  1.21k|                        self.stack
  216|  1.21k|                            .push(TriGState::WrappedGraphOrPredicateObjectList {
  217|  1.21k|                                term: BlankNode::default().into(),
  218|  1.21k|                            });
  219|  1.21k|                        self
  220|       |                    } else {
  221|  5.68k|                        self.cur_subject.push(BlankNode::default().into());
  222|  5.68k|                        self.stack.push(TriGState::ExpectDot);
  223|  5.68k|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  224|  5.68k|                        self.stack.push(TriGState::PredicateObjectList);
  225|  5.68k|                        self.recognize_next(token, context, results, errors)
  226|       |                    }
  227|       |                }
  228|       |                TriGState::SubjectBlankNodePropertyListEnd => {
  229|  2.78k|                    if token == N3Token::Punctuation("]") {
  230|  1.28k|                        self.stack
  231|  1.28k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  232|  1.28k|                        self
  233|       |                    } else {
  234|  1.50k|                        errors.push("blank node property lists should end with a ']'".into());
  235|  1.50k|                        self.stack
  236|  1.50k|                            .push(TriGState::SubjectBlankNodePropertyListAfter);
  237|  1.50k|                        self.recognize_next(token, context, results, errors)
  238|       |                    }
  239|       |                }
  240|       |                TriGState::SubjectBlankNodePropertyListAfter => {
  241|  2.77k|                    if matches!(token, N3Token::Punctuation("." | "}")) {
  242|  1.65k|                        self.recognize_next(token, context, results, errors)
  243|       |                    } else {
  244|  1.12k|                        self.stack.push(TriGState::PredicateObjectList);
  245|  1.12k|                        self.recognize_next(token, context, results, errors)
  246|       |                    }
  247|       |                }
  248|       |                TriGState::SubjectCollectionBeginning => {
  249|  33.8k|                    if let N3Token::Punctuation(")") = token {
  250|    177|                        self.cur_subject.push(rdf::NIL.into());
  251|    177|                        self
  252|       |                    } else {
  253|  33.7k|                        let root = BlankNode::default();
  254|  33.7k|                        self.cur_subject.push(root.clone().into());
  255|  33.7k|                        self.cur_subject.push(root.into());
  256|  33.7k|                        self.cur_predicate.push(rdf::FIRST.into());
  257|  33.7k|                        self.stack.push(TriGState::SubjectCollectionPossibleEnd);
  258|  33.7k|                        self.stack.push(TriGState::Object);
  259|  33.7k|                        self.recognize_next(token, context, results, errors)
  260|       |                    }
  261|       |                }
  262|       |                TriGState::SubjectCollectionPossibleEnd => {
  263|  11.9k|                    let old = self.cur_subject.pop().unwrap();
  264|  11.9k|                    self.cur_object.pop();
  265|  11.9k|                    if let N3Token::Punctuation(")") = token {
  266|    634|                        self.cur_predicate.pop();
  267|    634|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  268|    634|                        self
  269|       |                    } else {
  270|  11.2k|                        let new = BlankNode::default();
  271|  11.2k|                        results.push(Quad::new(
  272|  11.2k|                            old,
  273|  11.2k|                            rdf::REST,
  274|  11.2k|                            new.clone(),
  275|  11.2k|                            self.cur_graph.clone(),
  276|  11.2k|                        ));
  277|  11.2k|                        self.cur_subject.push(new.into());
  278|  11.2k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  279|  11.2k|                        self.stack.push(TriGState::Object);
  280|  11.2k|                        self.recognize_next(token, context, results, errors)
  281|       |                    }
  282|       |                }
  283|       |                // [5g]  wrappedGraph  ::=  '{' triplesBlock? '}'
  284|       |                // [6g]  triplesBlock  ::=  triples ('.' triplesBlock?)?
  285|       |                TriGState::WrappedGraph => {
  286|  26.8k|                    if token == N3Token::Punctuation("{") {
  287|  26.8k|                        self.stack.push(TriGState::WrappedGraphPossibleEnd);
  288|  26.8k|                        self.stack.push(TriGState::Triples);
  289|  26.8k|                        self
  290|       |                    } else {
  291|      0|                        self.error(errors, "The GRAPH keyword should be followed by a graph name and a value in '{'")
  292|       |                    }
  293|       |                }
  294|       |                TriGState::WrappedGraphPossibleEnd => {
  295|  32.3k|                    self.cur_subject.pop();
  296|  32.3k|                    match token {
  297|  27.5k|                        N3Token::Punctuation("}") => self,
  298|  23.6k|                        N3Token::Punctuation(".") => {
  299|  22.7k|                            self.stack.push(TriGState::WrappedGraphPossibleEnd);
  300|  22.7k|                            self.stack.push(TriGState::Triples);
  301|  22.7k|                            self
  302|       |                        }
  303|       |                        _ => {
  304|  5.63k|                            errors.push(
  305|  5.63k|                                "A '}' or a '.' is expected at the end of a graph block".into(),
  306|  5.63k|                            );
  307|  5.63k|                            self.recognize_next(token, context, results, errors)
  308|       |                        }
  309|       |                    }
  310|       |                }
  311|       |                // [6]  triples   ::=  subject predicateObjectList | blankNodePropertyList predicateObjectList?
  312|       |                // [10]  subject  ::=  iri | BlankNode | collection | quotedTriple
  313|  7.83k|                TriGState::Triples => match token {
  314|  22.3k|                    N3Token::Punctuation("}") => {
  315|  3.98k|                        self.recognize_next(token, context, results, errors) // Early end
  316|       |                    }
  317|  18.3k|                    N3Token::Punctuation("[") => {
  318|    388|                        self.cur_subject.push(BlankNode::default().into());
  319|    388|                        self.stack
  320|    388|                            .push(TriGState::TriplesBlankNodePropertyListCurrent);
  321|    388|                        self
  322|       |                    }
  323|  10.6k|                    N3Token::IriRef(iri) => {
  324|  10.6k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  325|  10.6k|                        self.stack.push(TriGState::PredicateObjectList);
  326|  10.6k|                        self
  327|       |                    }
  328|       |                    N3Token::PrefixedName {
  329|    956|                        prefix,
  330|    956|                        local,
  331|    956|                        might_be_invalid_iri,
  332|    956|                    } => match resolve_local_name(
  333|    956|                        prefix,
  334|    956|                        &local,
  335|    956|                        might_be_invalid_iri,
  336|    956|                        &context.prefixes,
  337|    956|                    ) {
  338|    303|                        Ok(t) => {
  339|    303|                            self.cur_subject.push(t.into());
  340|    303|                            self.stack.push(TriGState::PredicateObjectList);
  341|    303|                            self
  342|       |                        }
  343|    653|                        Err(e) => self.error(errors, e),
  344|       |                    },
  345|  13.5k|                    N3Token::BlankNodeLabel(label) => {
  346|  13.5k|                        self.cur_subject
  347|  13.5k|                            .push(BlankNode::new_unchecked(label).into());
  348|  13.5k|                        self.stack.push(TriGState::PredicateObjectList);
  349|  13.5k|                        self
  350|       |                    }
  351|  17.9k|                    N3Token::Punctuation("(") => {
  352|  8.65k|                        self.stack.push(TriGState::PredicateObjectList);
  353|  8.65k|                        self.stack.push(TriGState::SubjectCollectionBeginning);
  354|  8.65k|                        self
  355|       |                    }
  356|       |                    #[cfg(feature = "rdf-star")]
  357|  9.29k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  358|  7.83k|                        self.stack.push(TriGState::PredicateObjectList);
  359|  7.83k|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  360|  7.83k|                        self.stack.push(TriGState::QuotedObject);
  361|  7.83k|                        self.stack.push(TriGState::Verb);
  362|  7.83k|                        self.stack.push(TriGState::QuotedSubject);
  363|  7.83k|                        self
  364|       |                    }
  365|  2.06k|                    _ => self.error(errors, "TOKEN is not a valid RDF subject"),
  366|       |                },
  367|       |                TriGState::TriplesBlankNodePropertyListCurrent => {
  368|    381|                    if token == N3Token::Punctuation("]") {
  369|     82|                        self.stack.push(TriGState::PredicateObjectList);
  370|     82|                        self
  371|       |                    } else {
  372|    299|                        self.stack.push(TriGState::SubjectBlankNodePropertyListEnd);
  373|    299|                        self.stack.push(TriGState::PredicateObjectList);
  374|    299|                        self.recognize_next(token, context, results, errors)
  375|       |                    }
  376|       |                }
  377|       |                // [7g]  labelOrSubject  ::=  iri | BlankNode
  378|      0|                TriGState::GraphName => match token {
  379|      0|                    N3Token::IriRef(iri) => {
  380|      0|                        self.cur_graph = NamedNode::new_unchecked(iri).into();
  381|      0|                        self
  382|       |                    }
  383|       |                    N3Token::PrefixedName {
  384|      0|                        prefix,
  385|      0|                        local,
  386|      0|                        might_be_invalid_iri,
  387|      0|                    } => match resolve_local_name(
  388|      0|                        prefix,
  389|      0|                        &local,
  390|      0|                        might_be_invalid_iri,
  391|      0|                        &context.prefixes,
  392|      0|                    ) {
  393|      0|                        Ok(t) => {
  394|      0|                            self.cur_graph = t.into();
  395|      0|                            self
  396|       |                        }
  397|      0|                        Err(e) => self.error(errors, e),
  398|       |                    },
  399|      0|                    N3Token::BlankNodeLabel(label) => {
  400|      0|                        self.cur_graph = BlankNode::new_unchecked(label).into();
  401|      0|                        self
  402|       |                    }
  403|      0|                    N3Token::Punctuation("[") => {
  404|      0|                        self.stack.push(TriGState::GraphNameAnonEnd);
  405|      0|                        self
  406|       |                    }
  407|      0|                    _ => self.error(errors, "TOKEN is not a valid graph name"),
  408|       |                },
  409|       |                TriGState::GraphNameAnonEnd => {
  410|      0|                    if token == N3Token::Punctuation("]") {
  411|      0|                        self.cur_graph = BlankNode::default().into();
  412|      0|                        self
  413|       |                    } else {
  414|      0|                        self.error(errors, "Anonymous blank node with a property list are not allowed as graph name")
  415|       |                    }
  416|       |                }
  417|       |                // [7]  predicateObjectList  ::=  verb objectList (';' (verb objectList)?)*
  418|       |                TriGState::PredicateObjectList => {
  419|   427k|                    self.stack.push(TriGState::PredicateObjectListEnd);
  420|   427k|                    self.stack.push(TriGState::ObjectsList);
  421|   427k|                    self.stack.push(TriGState::Verb);
  422|   427k|                    self.recognize_next(token, context, results, errors)
  423|       |                }
  424|       |                TriGState::PredicateObjectListEnd => {
  425|   215k|                    self.cur_predicate.pop();
  426|   215k|                    if token == N3Token::Punctuation(";") {
  427|  9.50k|                        self.stack
  428|  9.50k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  429|  9.50k|                        self
  430|       |                    } else {
  431|   206k|                        self.recognize_next(token, context, results, errors)
  432|       |                    }
  433|       |                }
  434|       |                TriGState::PredicateObjectListPossibleContinuation => {
  435|  11.7k|                    if token == N3Token::Punctuation(";") {
  436|  2.30k|                        self.stack
  437|  2.30k|                            .push(TriGState::PredicateObjectListPossibleContinuation);
  438|  2.30k|                        self
  439|  9.49k|                    } else if matches!(token, N3Token::Punctuation("." | "}" | "]")) {
  440|    303|                        self.recognize_next(token, context, results, errors)
  441|       |                    } else {
  442|  9.18k|                        self.stack.push(TriGState::PredicateObjectListEnd);
  443|  9.18k|                        self.stack.push(TriGState::ObjectsList);
  444|  9.18k|                        self.stack.push(TriGState::Verb);
  445|  9.18k|                        self.recognize_next(token, context, results, errors)
  446|       |                    }
  447|       |                }
  448|       |                // [8]   objectList  ::=  object annotation? ( ',' object annotation? )*
  449|       |                // [30t] annotation  ::=  '{|' predicateObjectList '|}'
  450|       |                TriGState::ObjectsList => {
  451|   418k|                    self.stack.push(TriGState::ObjectsListEnd);
  452|   418k|                    self.stack.push(TriGState::Object);
  453|   418k|                    self.recognize_next(token, context, results, errors)
  454|       |                }
  455|   481k|                TriGState::ObjectsListEnd => match token {
  456|   451k|                    N3Token::Punctuation(",") => {
  457|  81.1k|                        self.cur_object.pop();
  458|  81.1k|                        self.stack.push(TriGState::ObjectsListEnd);
  459|  81.1k|                        self.stack.push(TriGState::Object);
  460|  81.1k|                        self
  461|       |                    }
  462|       |                    #[cfg(feature = "rdf-star")]
  463|   370k|                    N3Token::Punctuation("{|") => {
  464|   184k|                        let triple = Triple::new(
  465|   184k|                            self.cur_subject.last().unwrap().clone(),
  466|   184k|                            self.cur_predicate.last().unwrap().clone(),
  467|   184k|                            self.cur_object.pop().unwrap(),
  468|   184k|                        );
  469|   184k|                        self.cur_subject.push(triple.into());
  470|   184k|                        self.stack.push(TriGState::AnnotationEnd);
  471|   184k|                        self.stack.push(TriGState::PredicateObjectList);
  472|   184k|                        self
  473|       |                    }
  474|       |                    _ => {
  475|   215k|                        self.cur_object.pop();
  476|   215k|                        self.recognize_next(token, context, results, errors)
  477|       |                    }
  478|       |                },
  479|       |                #[cfg(feature = "rdf-star")]
  480|       |                TriGState::AnnotationEnd => {
  481|  6.06k|                    self.cur_subject.pop();
  482|  6.06k|                    self.stack.push(TriGState::ObjectsListAfterAnnotation);
  483|  6.06k|                    if token == N3Token::Punctuation("|}") {
  484|    310|                        self
  485|       |                    } else {
  486|  5.75k|                        self.error(errors, "Annotations should end with '|}'")
  487|       |                    }
  488|       |                }
  489|       |                #[cfg(feature = "rdf-star")]
  490|       |                TriGState::ObjectsListAfterAnnotation => {
  491|    226|                    if token == N3Token::Punctuation(",") {
  492|    132|                        self.stack.push(TriGState::ObjectsListEnd);
  493|    132|                        self.stack.push(TriGState::Object);
  494|    132|                        self
  495|       |                    } else {
  496|     94|                        self.recognize_next(token, context, results, errors)
  497|       |                    }
  498|       |                }
  499|       |                // [9]   verb       ::=  predicate | 'a'
  500|       |                // [11]  predicate  ::=  iri
  501|  1.89M|                TriGState::Verb => match token {
  502|  10.0k|                    N3Token::PlainKeyword("a") => {
  503|  7.08k|                        self.cur_predicate.push(rdf::TYPE.into());
  504|  7.08k|                        self
  505|       |                    }
  506|  1.81M|                    N3Token::IriRef(iri) => {
  507|  1.81M|                        self.cur_predicate.push(NamedNode::new_unchecked(iri));
  508|  1.81M|                        self
  509|       |                    }
  510|       |                    N3Token::PrefixedName {
  511|  67.1k|                        prefix,
  512|  67.1k|                        local,
  513|  67.1k|                        might_be_invalid_iri,
  514|  67.1k|                    } => match resolve_local_name(
  515|  67.1k|                        prefix,
  516|  67.1k|                        &local,
  517|  67.1k|                        might_be_invalid_iri,
  518|  67.1k|                        &context.prefixes,
  519|  67.1k|                    ) {
  520|  66.5k|                        Ok(t) => {
  521|  66.5k|                            self.cur_predicate.push(t);
  522|  66.5k|                            self
  523|       |                        }
  524|    619|                        Err(e) => self.error(errors, e),
  525|       |                    },
  526|  15.3k|                    _ => self.error(errors, "TOKEN is not a valid predicate"),
  527|       |                },
  528|       |                // [12]    object                 ::=  iri | BlankNode | collection | blankNodePropertyList | literal | quotedTriple
  529|       |                // [13]    literal                ::=  RDFLiteral | NumericLiteral | BooleanLiteral
  530|       |                // [14]    blank                  ::=  BlankNode | collection
  531|       |                // [15]    blankNodePropertyList  ::=  '[' predicateObjectList ']'
  532|       |                // [16]    collection             ::=  '(' object* ')'
  533|       |                // [17]    NumericLiteral         ::=  INTEGER | DECIMAL | DOUBLE
  534|       |                // [128s]  RDFLiteral             ::=  String (LANGTAG | '^^' iri)?
  535|       |                // [133s]  BooleanLiteral         ::=  'true' | 'false'
  536|       |                // [18]    String                 ::=  STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
  537|       |                // [135s]  iri                    ::=  IRIREF | PrefixedName
  538|       |                // [136s]  PrefixedName           ::=  PNAME_LN | PNAME_NS
  539|       |                // [137s]  BlankNode              ::=  BLANK_NODE_LABEL | ANON
  540|  9.17k|                TriGState::Object => match token {
  541|  58.7k|                    N3Token::IriRef(iri) => {
  542|  58.7k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  543|  58.7k|                        self.emit_quad(results);
  544|  58.7k|                        self
  545|       |                    }
  546|       |                    N3Token::PrefixedName {
  547|  3.52k|                        prefix,
  548|  3.52k|                        local,
  549|  3.52k|                        might_be_invalid_iri,
  550|  3.52k|                    } => match resolve_local_name(
  551|  3.52k|                        prefix,
  552|  3.52k|                        &local,
  553|  3.52k|                        might_be_invalid_iri,
  554|  3.52k|                        &context.prefixes,
  555|  3.52k|                    ) {
  556|  1.97k|                        Ok(t) => {
  557|  1.97k|                            self.cur_object.push(t.into());
  558|  1.97k|                            self.emit_quad(results);
  559|  1.97k|                            self
  560|       |                        }
  561|  1.55k|                        Err(e) => self.error(errors, e),
  562|       |                    },
  563|  76.3k|                    N3Token::BlankNodeLabel(label) => {
  564|  76.3k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  565|  76.3k|                        self.emit_quad(results);
  566|  76.3k|                        self
  567|       |                    }
  568|   188k|                    N3Token::Punctuation("[") => {
  569|  2.78k|                        self.stack
  570|  2.78k|                            .push(TriGState::ObjectBlankNodePropertyListCurrent);
  571|  2.78k|                        self
  572|       |                    }
  573|   185k|                    N3Token::Punctuation("(") => {
  574|   170k|                        self.stack.push(TriGState::ObjectCollectionBeginning);
  575|   170k|                        self
  576|       |                    }
  577|  21.3k|                    N3Token::String(value) => {
  578|  21.3k|                        self.stack
  579|  21.3k|                            .push(TriGState::LiteralPossibleSuffix { value, emit: true });
  580|  21.3k|                        self
  581|       |                    }
  582|   170k|                    N3Token::Integer(v) => {
  583|   170k|                        self.cur_object
  584|   170k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  585|   170k|                        self.emit_quad(results);
  586|   170k|                        self
  587|       |                    }
  588|  8.56k|                    N3Token::Decimal(v) => {
  589|  8.56k|                        self.cur_object
  590|  8.56k|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  591|  8.56k|                        self.emit_quad(results);
  592|  8.56k|                        self
  593|       |                    }
  594|   204k|                    N3Token::Double(v) => {
  595|   204k|                        self.cur_object
  596|   204k|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  597|   204k|                        self.emit_quad(results);
  598|   204k|                        self
  599|       |                    }
  600|  5.12k|                    N3Token::PlainKeyword("true") => {
  601|    339|                        self.cur_object
  602|    339|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  603|    339|                        self.emit_quad(results);
  604|    339|                        self
  605|       |                    }
  606|  4.78k|                    N3Token::PlainKeyword("false") => {
  607|    155|                        self.cur_object
  608|    155|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  609|    155|                        self.emit_quad(results);
  610|    155|                        self
  611|       |                    }
  612|       |                    #[cfg(feature = "rdf-star")]
  613|  15.5k|                    N3Token::Punctuation("<<") if context.with_quoted_triples => {
  614|  9.17k|                        self.stack
  615|  9.17k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: true });
  616|  9.17k|                        self.stack.push(TriGState::QuotedObject);
  617|  9.17k|                        self.stack.push(TriGState::Verb);
  618|  9.17k|                        self.stack.push(TriGState::QuotedSubject);
  619|  9.17k|                        self
  620|       |                    }
  621|  11.2k|                    _ => self.error(errors, "TOKEN is not a valid RDF object"),
  622|       |                },
  623|       |                TriGState::ObjectBlankNodePropertyListCurrent => {
  624|  2.73k|                    if token == N3Token::Punctuation("]") {
  625|  1.50k|                        self.cur_object.push(BlankNode::default().into());
  626|  1.50k|                        self.emit_quad(results);
  627|  1.50k|                        self
  628|       |                    } else {
  629|  1.22k|                        self.cur_subject.push(BlankNode::default().into());
  630|  1.22k|                        self.stack.push(TriGState::ObjectBlankNodePropertyListEnd);
  631|  1.22k|                        self.stack.push(TriGState::PredicateObjectList);
  632|  1.22k|                        self.recognize_next(token, context, results, errors)
  633|       |                    }
  634|       |                }
  635|       |                TriGState::ObjectBlankNodePropertyListEnd => {
  636|    458|                    if token == N3Token::Punctuation("]") {
  637|    241|                        self.cur_object.push(self.cur_subject.pop().unwrap().into());
  638|    241|                        self.emit_quad(results);
  639|    241|                        self
  640|       |                    } else {
  641|    217|                        self.error(errors, "blank node property lists should end with a ']'")
  642|       |                    }
  643|       |                }
  644|       |                TriGState::ObjectCollectionBeginning => {
  645|   167k|                    if let N3Token::Punctuation(")") = token {
  646|  3.70k|                        self.cur_object.push(rdf::NIL.into());
  647|  3.70k|                        self.emit_quad(results);
  648|  3.70k|                        self
  649|       |                    } else {
  650|   164k|                        let root = BlankNode::default();
  651|   164k|                        self.cur_object.push(root.clone().into());
  652|   164k|                        self.emit_quad(results);
  653|   164k|                        self.cur_subject.push(root.into());
  654|   164k|                        self.cur_predicate.push(rdf::FIRST.into());
  655|   164k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  656|   164k|                        self.stack.push(TriGState::Object);
  657|   164k|                        self.recognize_next(token, context, results, errors)
  658|       |                    }
  659|       |                }
  660|       |                TriGState::ObjectCollectionPossibleEnd => {
  661|  33.8k|                    let old = self.cur_subject.pop().unwrap();
  662|  33.8k|                    self.cur_object.pop();
  663|  33.8k|                    if let N3Token::Punctuation(")") = token {
  664|  5.53k|                        self.cur_predicate.pop();
  665|  5.53k|                        results.push(Quad::new(old, rdf::REST, rdf::NIL, self.cur_graph.clone()));
  666|  5.53k|                        self
  667|       |                    } else {
  668|  28.2k|                        let new = BlankNode::default();
  669|  28.2k|                        results.push(Quad::new(
  670|  28.2k|                            old,
  671|  28.2k|                            rdf::REST,
  672|  28.2k|                            new.clone(),
  673|  28.2k|                            self.cur_graph.clone(),
  674|  28.2k|                        ));
  675|  28.2k|                        self.cur_subject.push(new.into());
  676|  28.2k|                        self.stack.push(TriGState::ObjectCollectionPossibleEnd);
  677|  28.2k|                        self.stack.push(TriGState::Object);
  678|  28.2k|                        self.recognize_next(token, context, results, errors)
  679|       |                    }
  680|       |                }
  681|  20.9k|                TriGState::LiteralPossibleSuffix { value, emit } => match token {
  682|  3.77k|                    N3Token::LangTag(lang) => {
  683|  3.77k|                        self.cur_object.push(
  684|  3.77k|                            Literal::new_language_tagged_literal_unchecked(
  685|  3.77k|                                value,
  686|  3.77k|                                lang.to_ascii_lowercase(),
  687|  3.77k|                            )
  688|  3.77k|                            .into(),
  689|  3.77k|                        );
  690|  3.77k|                        if emit {
  691|  3.69k|                            self.emit_quad(results);
  692|  3.69k|                        }
  693|  3.77k|                        self
  694|       |                    }
  695|  10.4k|                    N3Token::Punctuation("^^") => {
  696|  1.42k|                        self.stack
  697|  1.42k|                            .push(TriGState::LiteralExpectDatatype { value, emit });
  698|  1.42k|                        self
  699|       |                    }
  700|       |                    _ => {
  701|  15.7k|                        self.cur_object
  702|  15.7k|                            .push(Literal::new_simple_literal(value).into());
  703|  15.7k|                        if emit {
  704|  15.3k|                            self.emit_quad(results);
  705|  15.3k|                        }
  706|  15.7k|                        self.recognize_next(token, context, results, errors)
  707|       |                    }
  708|       |                },
  709|  1.28k|                TriGState::LiteralExpectDatatype { value, emit } => match token {
  710|    541|                    N3Token::IriRef(datatype) => {
  711|    541|                        self.cur_object.push(
  712|    541|                            Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype))
  713|    541|                                .into(),
  714|    541|                        );
  715|    541|                        if emit {
  716|    541|                            self.emit_quad(results);
  717|    541|                        }
  718|    541|                        self
  719|       |                    }
  720|       |                    N3Token::PrefixedName {
  721|    565|                        prefix,
  722|    565|                        local,
  723|    565|                        might_be_invalid_iri,
  724|    565|                    } => match resolve_local_name(
  725|    565|                        prefix,
  726|    565|                        &local,
  727|    565|                        might_be_invalid_iri,
  728|    565|                        &context.prefixes,
  729|    565|                    ) {
  730|    410|                        Ok(t) => {
  731|    410|                            self.cur_object
  732|    410|                                .push(Literal::new_typed_literal(value, t).into());
  733|    410|                            if emit {
  734|    410|                                self.emit_quad(results);
  735|    410|                            }
  736|    410|                            self
  737|       |                        }
  738|    155|                        Err(e) => self.error(errors, e),
  739|       |                    },
  740|    174|                    _ => self
  741|    174|                        .error(errors, "Expecting a datatype IRI after ^^, found TOKEN")
  742|    174|                        .recognize_next(token, context, results, errors),
  743|       |                },
  744|       |                // [27t]  quotedTriple  ::=  '<<' qtSubject verb qtObject '>>'
  745|       |                #[cfg(feature = "rdf-star")]
  746|       |                TriGState::SubjectQuotedTripleEnd => {
  747|  1.45M|                    let triple = Triple::new(
  748|  1.45M|                        self.cur_subject.pop().unwrap(),
  749|  1.45M|                        self.cur_predicate.pop().unwrap(),
  750|  1.45M|                        self.cur_object.pop().unwrap(),
  751|  1.45M|                    );
  752|  1.45M|                    self.cur_subject.push(triple.into());
  753|  1.45M|                    if token == N3Token::Punctuation(">>") {
  754|  1.45M|                        self
  755|       |                    } else {
  756|  1.60k|                        self.error(
  757|  1.60k|                            errors,
  758|  1.60k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  759|  1.60k|                        )
  760|       |                    }
  761|       |                }
  762|       |                #[cfg(feature = "rdf-star")]
  763|  7.81k|                TriGState::ObjectQuotedTripleEnd { emit } => {
  764|  7.81k|                    let triple = Triple::new(
  765|  7.81k|                        self.cur_subject.pop().unwrap(),
  766|  7.81k|                        self.cur_predicate.pop().unwrap(),
  767|  7.81k|                        self.cur_object.pop().unwrap(),
  768|  7.81k|                    );
  769|  7.81k|                    self.cur_object.push(triple.into());
  770|  7.81k|                    if emit {
  771|  7.39k|                        self.emit_quad(results);
  772|  7.39k|                    }
  773|  7.81k|                    if token == N3Token::Punctuation(">>") {
  774|  2.36k|                        self
  775|       |                    } else {
  776|  5.45k|                        self.error(
  777|  5.45k|                            errors,
  778|  5.45k|                            "Expecting '>>' to close a quoted triple, found TOKEN",
  779|  5.45k|                        )
  780|       |                    }
  781|       |                }
  782|       |                // [28t]  qtSubject  ::=  iri | BlankNode | quotedTriple
  783|       |                #[cfg(feature = "rdf-star")]
  784|  1.47M|                TriGState::QuotedSubject => match token {
  785|  1.40M|                    N3Token::Punctuation("[") => {
  786|    236|                        self.cur_subject.push(BlankNode::default().into());
  787|    236|                        self.stack.push(TriGState::QuotedAnonEnd);
  788|    236|                        self
  789|       |                    }
  790|  70.8k|                    N3Token::IriRef(iri) => {
  791|  70.8k|                        self.cur_subject.push(NamedNode::new_unchecked(iri).into());
  792|  70.8k|                        self
  793|       |                    }
  794|       |                    N3Token::PrefixedName {
  795|  1.11k|                        prefix,
  796|  1.11k|                        local,
  797|  1.11k|                        might_be_invalid_iri,
  798|  1.11k|                    } => match resolve_local_name(
  799|  1.11k|                        prefix,
  800|  1.11k|                        &local,
  801|  1.11k|                        might_be_invalid_iri,
  802|  1.11k|                        &context.prefixes,
  803|  1.11k|                    ) {
  804|    847|                        Ok(t) => {
  805|    847|                            self.cur_subject.push(t.into());
  806|    847|                            self
  807|       |                        }
  808|    271|                        Err(e) => self.error(errors, e),
  809|       |                    },
  810|  1.82k|                    N3Token::BlankNodeLabel(label) => {
  811|  1.82k|                        self.cur_subject
  812|  1.82k|                            .push(BlankNode::new_unchecked(label).into());
  813|  1.82k|                        self
  814|       |                    }
  815|  1.40M|                    N3Token::Punctuation("<<") => {
  816|  1.40M|                        self.stack.push(TriGState::SubjectQuotedTripleEnd);
  817|  1.40M|                        self.stack.push(TriGState::QuotedObject);
  818|  1.40M|                        self.stack.push(TriGState::Verb);
  819|  1.40M|                        self.stack.push(TriGState::QuotedSubject);
  820|  1.40M|                        self
  821|       |                    }
  822|    903|                    _ => self.error(
  823|    903|                        errors,
  824|    903|                        "TOKEN is not a valid RDF quoted triple subject: TOKEN",
  825|    903|                    ),
  826|       |                },
  827|       |                // [29t]  qtObject  ::=  iri | BlankNode | literal | quotedTriple
  828|       |                #[cfg(feature = "rdf-star")]
  829|  1.46M|                TriGState::QuotedObject => match token {
  830|  1.40k|                    N3Token::Punctuation("[") => {
  831|    126|                        self.cur_object.push(BlankNode::default().into());
  832|    126|                        self.stack.push(TriGState::QuotedAnonEnd);
  833|    126|                        self
  834|       |                    }
  835|   229k|                    N3Token::IriRef(iri) => {
  836|   229k|                        self.cur_object.push(NamedNode::new_unchecked(iri).into());
  837|   229k|                        self
  838|       |                    }
  839|       |                    N3Token::PrefixedName {
  840|    530|                        prefix,
  841|    530|                        local,
  842|    530|                        might_be_invalid_iri,
  843|    530|                    } => match resolve_local_name(
  844|    530|                        prefix,
  845|    530|                        &local,
  846|    530|                        might_be_invalid_iri,
  847|    530|                        &context.prefixes,
  848|    530|                    ) {
  849|    430|                        Ok(t) => {
  850|    430|                            self.cur_object.push(t.into());
  851|    430|                            self
  852|       |                        }
  853|    100|                        Err(e) => self.error(errors, e),
  854|       |                    },
  855|  3.51k|                    N3Token::BlankNodeLabel(label) => {
  856|  3.51k|                        self.cur_object.push(BlankNode::new_unchecked(label).into());
  857|  3.51k|                        self
  858|       |                    }
  859|    542|                    N3Token::String(value) => {
  860|    542|                        self.stack
  861|    542|                            .push(TriGState::LiteralPossibleSuffix { value, emit: false });
  862|    542|                        self
  863|       |                    }
  864|   169k|                    N3Token::Integer(v) => {
  865|   169k|                        self.cur_object
  866|   169k|                            .push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  867|   169k|                        self
  868|       |                    }
  869|    589|                    N3Token::Decimal(v) => {
  870|    589|                        self.cur_object
  871|    589|                            .push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  872|    589|                        self
  873|       |                    }
  874|  1.05M|                    N3Token::Double(v) => {
  875|  1.05M|                        self.cur_object
  876|  1.05M|                            .push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  877|  1.05M|                        self
  878|       |                    }
  879|    426|                    N3Token::PlainKeyword("true") => {
  880|     77|                        self.cur_object
  881|     77|                            .push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  882|     77|                        self
  883|       |                    }
  884|    349|                    N3Token::PlainKeyword("false") => {
  885|    160|                        self.cur_object
  886|    160|                            .push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  887|    160|                        self
  888|       |                    }
  889|  1.28k|                    N3Token::Punctuation("<<") => {
  890|  1.02k|                        self.stack
  891|  1.02k|                            .push(TriGState::ObjectQuotedTripleEnd { emit: false });
  892|  1.02k|                        self.stack.push(TriGState::QuotedObject);
  893|  1.02k|                        self.stack.push(TriGState::Verb);
  894|  1.02k|                        self.stack.push(TriGState::QuotedSubject);
  895|  1.02k|                        self
  896|       |                    }
  897|    698|                    _ => self.error(errors, "TOKEN is not a valid RDF quoted triple object"),
  898|       |                },
  899|       |                #[cfg(feature = "rdf-star")]
  900|       |                TriGState::QuotedAnonEnd => {
  901|    317|                    if token == N3Token::Punctuation("]") {
  902|    218|                        self
  903|       |                    } else {
  904|     99|                        self.error(errors, "Anonymous blank node with a property list are not allowed in quoted triples")
  905|       |                    }
  906|       |                }
  907|       |            }
  908|  1.40M|        } else if token == N3Token::Punctuation(".") || token == N3Token::Punctuation("}") {
  909|       |            // TODO: be smarter depending if we are in '{' or not
  910|   298k|            self.stack.push(TriGState::TriGDoc);
  911|   298k|            self
  912|       |        } else {
  913|  1.11M|            self
  914|       |        }
  915|  11.6M|    }
_RNvMs0_NtCs4HPcYfJdze0_5oxttl5terseNtB5_14TriGRecognizer10new_parser:
  954|  33.1k|    pub fn new_parser(
  955|  33.1k|        with_graph_name: bool,
  956|  33.1k|        #[cfg(feature = "rdf-star")] with_quoted_triples: bool,
  957|  33.1k|        unchecked: bool,
  958|  33.1k|        base_iri: Option<Iri<String>>,
  959|  33.1k|        prefixes: HashMap<String, Iri<String>>,
  960|  33.1k|    ) -> Parser<Self> {
  961|  33.1k|        Parser::new(
  962|  33.1k|            Lexer::new(
  963|  33.1k|                N3Lexer::new(N3LexerMode::Turtle, unchecked),
  964|  33.1k|                MIN_BUFFER_SIZE,
  965|  33.1k|                MAX_BUFFER_SIZE,
  966|  33.1k|                true,
  967|  33.1k|                Some(b"#"),
  968|  33.1k|            ),
  969|  33.1k|            Self {
  970|  33.1k|                stack: vec![TriGState::TriGDoc],
  971|  33.1k|                cur_subject: Vec::new(),
  972|  33.1k|                cur_predicate: Vec::new(),
  973|  33.1k|                cur_object: Vec::new(),
  974|  33.1k|                cur_graph: GraphName::DefaultGraph,
  975|  33.1k|            },
  976|  33.1k|            TriGRecognizerContext {
  977|  33.1k|                with_graph_name,
  978|  33.1k|                #[cfg(feature = "rdf-star")]
  979|  33.1k|                with_quoted_triples,
  980|  33.1k|                prefixes,
  981|  33.1k|                lexer_options: N3LexerOptions { base_iri },
  982|  33.1k|            },
  983|  33.1k|        )
  984|  33.1k|    }
_RNvXs_NtCs4HPcYfJdze0_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13recognize_end:
  917|  33.1k|    fn recognize_end(
  918|  33.1k|        mut self,
  919|  33.1k|        _context: &mut TriGRecognizerContext,
  920|  33.1k|        results: &mut Vec<Self::Output>,
  921|  33.1k|        errors: &mut Vec<RuleRecognizerError>,
  922|  33.1k|    ) {
  923|  33.1k|        match &*self.stack {
  924|  33.1k|            [] | [TriGState::TriGDoc] => {
  925|       |                debug_assert!(
  926|      0|                    self.cur_subject.is_empty(),
  927|      0|                    "The cur_subject stack must be empty if the state stack is empty"
  928|       |                );
  929|       |                debug_assert!(
  930|      0|                    self.cur_predicate.is_empty(),
  931|      0|                    "The cur_predicate stack must be empty if the state stack is empty"
  932|       |                );
  933|       |                debug_assert!(
  934|      0|                    self.cur_object.is_empty(),
  935|      0|                    "The cur_object stack must be empty if the state stack is empty"
  936|       |                );
  937|       |            }
  938|    233|            [.., TriGState::LiteralPossibleSuffix { value, emit: true }] => {
  939|    233|                self.cur_object
  940|    233|                    .push(Literal::new_simple_literal(value).into());
  941|    233|                self.emit_quad(results);
  942|    233|                errors.push("Triples should be followed by a dot".into())
  943|       |            }
  944|  1.35k|            _ => errors.push("Unexpected end".into()), // TODO
  945|       |        }
  946|  33.1k|    }
_RNvMs0_NtCs4HPcYfJdze0_5oxttl5terseNtB5_14TriGRecognizer9emit_quad:
 1001|   717k|    fn emit_quad(&mut self, results: &mut Vec<Quad>) {
 1002|   717k|        results.push(Quad::new(
 1003|   717k|            self.cur_subject.last().unwrap().clone(),
 1004|   717k|            self.cur_predicate.last().unwrap().clone(),
 1005|   717k|            self.cur_object.last().unwrap().clone(),
 1006|   717k|            self.cur_graph.clone(),
 1007|   717k|        ));
 1008|   717k|    }
_RNvXs_NtCs4HPcYfJdze0_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer13lexer_options:
  948|  12.9M|    fn lexer_options(context: &TriGRecognizerContext) -> &N3LexerOptions {
  949|  12.9M|        &context.lexer_options
  950|  12.9M|    }
_RNvXs_NtCs4HPcYfJdze0_5oxttl5terseNtB4_14TriGRecognizerNtNtNtB6_7toolkit6parser14RuleRecognizer20error_recovery_state:
   42|  1.66M|    fn error_recovery_state(mut self) -> Self {
   43|  1.66M|        self.stack.clear();
   44|  1.66M|        self.cur_subject.clear();
   45|  1.66M|        self.cur_predicate.clear();
   46|  1.66M|        self.cur_object.clear();
   47|  1.66M|        self.cur_graph = GraphName::DefaultGraph;
   48|  1.66M|        self
   49|  1.66M|    }
_RNvMNtCs4HPcYfJdze0_5oxttl5terseNtB2_21TriGRecognizerContext8prefixes:
   32|  24.8k|    pub fn prefixes(&self) -> Iter<'_, String, Iri<String>> {
   33|  24.8k|        self.prefixes.iter()
   34|  24.8k|    }
_RINvMs0_NtCs4HPcYfJdze0_5oxttl5terseNtB6_14TriGRecognizer5errorReEB8_:
  987|   184k|    fn error(
  988|   184k|        mut self,
  989|   184k|        errors: &mut Vec<RuleRecognizerError>,
  990|   184k|        msg: impl Into<RuleRecognizerError>,
  991|   184k|    ) -> Self {
  992|   184k|        errors.push(msg.into());
  993|   184k|        self.stack.clear();
  994|   184k|        self.cur_subject.clear();
  995|   184k|        self.cur_predicate.clear();
  996|   184k|        self.cur_object.clear();
  997|   184k|        self.cur_graph = GraphName::DefaultGraph;
  998|   184k|        self
  999|   184k|    }
_RINvMs0_NtCs4HPcYfJdze0_5oxttl5terseNtB6_14TriGRecognizer5errorNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
  987|  20.8k|    fn error(
  988|  20.8k|        mut self,
  989|  20.8k|        errors: &mut Vec<RuleRecognizerError>,
  990|  20.8k|        msg: impl Into<RuleRecognizerError>,
  991|  20.8k|    ) -> Self {
  992|  20.8k|        errors.push(msg.into());
  993|  20.8k|        self.stack.clear();
  994|  20.8k|        self.cur_subject.clear();
  995|  20.8k|        self.cur_predicate.clear();
  996|  20.8k|        self.cur_object.clear();
  997|  20.8k|        self.cur_graph = GraphName::DefaultGraph;
  998|  20.8k|        self
  999|  20.8k|    }

_RNvXs_NtNtCs4HPcYfJdze0_5oxttl7toolkit5errorNtB4_17TurtleSyntaxErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsa6d1IKvoGEd_4trig:
   37|  1.91M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   38|  1.91M|        if self.location.start.offset + 1 >= self.location.end.offset {
   39|  1.64M|            write!(
   40|  1.64M|                f,
   41|  1.64M|                "Parser error at line {} column {}: {}",
   42|  1.64M|                self.location.start.line + 1,
   43|  1.64M|                self.location.start.column + 1,
   44|  1.64M|                self.message
   45|  1.64M|            )
   46|   265k|        } else if self.location.start.line == self.location.end.line {
   47|   262k|            write!(
   48|   262k|                f,
   49|   262k|                "Parser error between at line {} between columns {} and column {}: {}",
   50|   262k|                self.location.start.line + 1,
   51|   262k|                self.location.start.column + 1,
   52|   262k|                self.location.end.column + 1,
   53|   262k|                self.message
   54|   262k|            )
   55|       |        } else {
   56|  2.53k|            write!(
   57|  2.53k|                f,
   58|  2.53k|                "Parser error between line {} column {} and line {} column {}: {}",
   59|  2.53k|                self.location.start.line + 1,
   60|  2.53k|                self.location.start.column + 1,
   61|  2.53k|                self.location.end.line + 1,
   62|  2.53k|                self.location.end.column + 1,
   63|  2.53k|                self.message
   64|  2.53k|            )
   65|       |        }
   66|  1.91M|    }

_RINvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB6_5LexerNtNtBa_5lexer7N3LexerE16extend_from_readRShECsa6d1IKvoGEd_4trig:
  113|  30.7k|    pub fn extend_from_read(&mut self, read: &mut impl Read) -> io::Result<()> {
  114|  30.7k|        self.shrink_data();
  115|  30.7k|        if self.data.len() == self.max_buffer_size {
  116|      0|            return Err(io::Error::new(
  117|      0|                io::ErrorKind::OutOfMemory,
  118|      0|                format!(
  119|      0|                    "Reached the buffer maximal size of {}",
  120|      0|                    self.max_buffer_size
  121|      0|                ),
  122|      0|            ));
  123|  30.7k|        }
  124|  30.7k|        let min_end = min(self.data.len() + self.min_buffer_size, self.max_buffer_size);
  125|  30.7k|        let new_start = self.data.len();
  126|  30.7k|        self.data.resize(min_end, 0);
  127|  30.7k|        if self.data.len() < self.data.capacity() {
  128|  11.4k|            // We keep extending to have as much space as available without reallocation
  129|  11.4k|            self.data.resize(self.data.capacity(), 0);
  130|  19.2k|        }
  131|  30.7k|        let read = read.read(&mut self.data[new_start..])?;
  132|  30.7k|        self.data.truncate(new_start + read);
  133|  30.7k|        self.is_ending = read == 0;
  134|  30.7k|        Ok(())
  135|  30.7k|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  33.1k|    pub fn new(
   74|  33.1k|        parser: R,
   75|  33.1k|        min_buffer_size: usize,
   76|  33.1k|        max_buffer_size: usize,
   77|  33.1k|        is_line_jump_whitespace: bool,
   78|  33.1k|        line_comment_start: Option<&'static [u8]>,
   79|  33.1k|    ) -> Self {
   80|  33.1k|        Self {
   81|  33.1k|            parser,
   82|  33.1k|            data: Vec::new(),
   83|  33.1k|            position: Position {
   84|  33.1k|                line_start_buffer_offset: 0,
   85|  33.1k|                buffer_offset: 0,
   86|  33.1k|                global_offset: 0,
   87|  33.1k|                global_line: 0,
   88|  33.1k|            },
   89|  33.1k|            previous_position: Position {
   90|  33.1k|                line_start_buffer_offset: 0,
   91|  33.1k|                buffer_offset: 0,
   92|  33.1k|                global_offset: 0,
   93|  33.1k|                global_line: 0,
   94|  33.1k|            },
   95|  33.1k|            is_ending: false,
   96|  33.1k|            min_buffer_size,
   97|  33.1k|            max_buffer_size,
   98|  33.1k|            is_line_jump_whitespace,
   99|  33.1k|            line_comment_start,
  100|  33.1k|        }
  101|  33.1k|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|  1.65M|    pub fn location_from_buffer_offset_range(
  237|  1.65M|        &self,
  238|  1.65M|        offset_range: Range<usize>,
  239|  1.65M|    ) -> Range<TextPosition> {
  240|  1.65M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|  1.65M|        let (start_extra_line_jumps, start_line_start) =
  242|  1.65M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|  1.65M|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|  1.65M|            );
  245|  1.65M|        let start_line_start = if start_extra_line_jumps > 0 {
  246|  1.30k|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|  1.65M|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|  1.65M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|  1.65M|        let (end_extra_line_jumps, end_line_start) =
  252|  1.65M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|  1.65M|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|  1.65M|            );
  255|  1.65M|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  3.81k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|  1.65M|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|  1.65M|        TextPosition {
  261|  1.65M|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|  1.65M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|  1.65M|            offset: self.previous_position.global_offset
  264|  1.65M|                + u64::try_from(offset_range.start).unwrap(),
  265|  1.65M|        }..TextPosition {
  266|  1.65M|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|  1.65M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|  1.65M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|  1.65M|        }
  270|  1.65M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|  1.71M|    fn shrink_data(&mut self) {
  389|  1.71M|        if self.position.line_start_buffer_offset > 0 {
  390|  31.4k|            self.data
  391|  31.4k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|  31.4k|            self.data
  393|  31.4k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|  31.4k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|  31.4k|            self.position.line_start_buffer_offset = 0;
  396|  31.4k|            self.previous_position = self.position;
  397|  1.68M|        }
  398|  1.71M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|   245k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|   245k|        TextPosition {
  274|   245k|            line: self.previous_position.global_line,
  275|   245k|            column: Self::column_from_bytes(
  276|   245k|                &self.data[self.previous_position.line_start_buffer_offset
  277|   245k|                    ..self.previous_position.buffer_offset],
  278|   245k|            ),
  279|   245k|            offset: self.previous_position.global_offset,
  280|   245k|        }..TextPosition {
  281|   245k|            line: self.position.global_line,
  282|   245k|            column: Self::column_from_bytes(
  283|   245k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|   245k|            ),
  285|   245k|            offset: self.position.global_offset,
  286|   245k|        }
  287|   245k|    }
_RNvXNtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB6_:
   31|  1.20M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.20M|        Self {
   33|  1.20M|            location,
   34|  1.20M|            message: message.into(),
   35|  1.20M|        }
   36|  1.20M|    }
_RNvXs0_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTjNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB9_:
   47|  4.21k|    fn from((location, message): (usize, S)) -> Self {
   48|  4.21k|        (location..=location, message).into()
   49|  4.21k|    }
_RNvXNtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   467k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   467k|        Self {
   33|   467k|            location,
   34|   467k|            message: message.into(),
   35|   467k|        }
   36|   467k|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|  14.4M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|  14.4M|        let mut num_of_jumps = 0;
  402|  14.4M|        let mut last_jump_pos = 0;
  403|  14.4M|        let mut previous_cr = 0;
  404|  14.4M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|  22.3k|            if bytes[pos] == b'\r' {
  406|  7.63k|                previous_cr = pos;
  407|  7.63k|                num_of_jumps += 1;
  408|  7.63k|                last_jump_pos = pos + 1;
  409|  7.63k|            } else {
  410|  14.6k|                if previous_cr < pos - 1 {
  411|  12.3k|                    // We count \r\n as a single line jump
  412|  12.3k|                    num_of_jumps += 1;
  413|  12.3k|                }
  414|  14.6k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|  14.4M|        (num_of_jumps, last_jump_pos)
  418|  14.4M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|  6.50M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|  6.50M|        match str::from_utf8(bytes) {
  422|  3.26M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|  3.24M|            Err(e) => {
  424|  3.24M|                if e.valid_up_to() == 0 {
  425|   556k|                    0
  426|       |                } else {
  427|  2.69M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|  6.50M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|  12.9M|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|  12.9M|        if self.is_line_jump_whitespace {
  340|  12.9M|            let mut i = self.position.buffer_offset;
  341|  19.5M|            while let Some(c) = self.data.get(i) {
  342|  18.8M|                match c {
  343|  6.39M|                    b' ' | b'\t' => {
  344|  6.39M|                        self.position.buffer_offset += 1;
  345|  6.39M|                        self.position.global_offset += 1;
  346|  6.39M|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  29.0k|                        let mut increment: u8 = 1;
  350|  29.0k|                        if let Some(c) = self.data.get(i + 1) {
  351|  22.2k|                            if *c == b'\n' {
  352|    378|                                increment += 1;
  353|    378|                                i += 1;
  354|  21.8k|                            }
  355|  6.88k|                        } else if !self.is_ending {
  356|  6.44k|                            return None; // We need to read more
  357|    435|                        }
  358|  22.6k|                        self.position.buffer_offset += usize::from(increment);
  359|  22.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  22.6k|                        self.position.global_offset += u64::from(increment);
  361|  22.6k|                        self.position.global_line += 1;
  362|       |                    }
  363|   194k|                    b'\n' => {
  364|   194k|                        self.position.buffer_offset += 1;
  365|   194k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|   194k|                        self.position.global_offset += 1;
  367|   194k|                        self.position.global_line += 1;
  368|   194k|                    }
  369|  12.2M|                    _ => return Some(()),
  370|       |                }
  371|  6.61M|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|   642k|        Some(())
  386|  12.9M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.68M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.68M|        self.shrink_data();
  105|  1.68M|        self.data.extend_from_slice(other);
  106|  1.68M|    }
_RNCNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|  1.65M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|  1.65M|            location: self.location_from_buffer_offset_range(e.location),
  232|  1.65M|            message: e.message,
  233|  1.65M|        }))
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  24.8k|    pub fn end(&mut self) {
  110|  24.8k|        self.is_ending = true;
  111|  24.8k|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|   245k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|   245k|        String::from_utf8_lossy(
  291|   245k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|   245k|        )
  293|   245k|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|  1.77M|    pub fn is_end(&self) -> bool {
  296|  1.77M|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|  1.77M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  12.9M|    pub fn read_next(
  167|  12.9M|        &mut self,
  168|  12.9M|        options: &R::Options,
  169|  12.9M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|  12.9M|        self.skip_whitespaces_and_comments()?;
  171|  12.8M|        self.previous_position = self.position;
  172|  12.8M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|  12.8M|            &self.data[self.position.buffer_offset..],
  174|  12.8M|            self.is_ending,
  175|  12.8M|            options,
  176|  12.8M|        ) else {
  177|  1.76M|            return if self.is_ending {
  178|  74.4k|                if self.position.buffer_offset == self.data.len() {
  179|  66.3k|                    None // We have finished
  180|       |                } else {
  181|  8.11k|                    let (new_line_jumps, new_line_start) =
  182|  8.11k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  8.11k|                            &self.data[self.position.buffer_offset..],
  184|  8.11k|                        );
  185|  8.11k|                    if new_line_jumps > 0 {
  186|    527|                        self.position.line_start_buffer_offset =
  187|    527|                            self.position.buffer_offset + new_line_start;
  188|  7.58k|                    }
  189|  8.11k|                    self.position.global_offset +=
  190|  8.11k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  8.11k|                    self.position.buffer_offset = self.data.len();
  192|  8.11k|                    self.position.global_line += new_line_jumps;
  193|  8.11k|                    let new_position = TextPosition {
  194|  8.11k|                        line: self.position.global_line,
  195|  8.11k|                        column: Self::column_from_bytes(
  196|  8.11k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  8.11k|                        ),
  198|  8.11k|                        offset: self.position.global_offset,
  199|  8.11k|                    };
  200|  8.11k|                    let error = TurtleSyntaxError {
  201|  8.11k|                        location: new_position..new_position,
  202|  8.11k|                        message: "Unexpected end of file".into(),
  203|  8.11k|                    };
  204|  8.11k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  8.11k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|  1.68M|                None
  209|       |            };
  210|       |        };
  211|       |        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|       |        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|  11.1M|        let (new_line_jumps, new_line_start) =
  221|  11.1M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|  11.1M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|  11.1M|            );
  224|  11.1M|        if new_line_jumps > 0 {
  225|  6.12k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|  11.1M|        }
  227|  11.1M|        self.position.buffer_offset += consumed;
  228|  11.1M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|  11.1M|        self.position.global_line += new_line_jumps;
  230|  11.1M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|  11.1M|        }))
  234|  12.9M|    }
_RNvMs1_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|  12.9M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|  12.9M|            self.skip_whitespaces()?;
  303|       |
  304|  12.9M|            let buf = &self.data[self.position.buffer_offset..];
  305|  12.9M|            if let Some(line_comment_start) = self.line_comment_start {
  306|  12.9M|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|  16.7k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  5.78k|                        let mut end_position = line_comment_start.len() + end;
  310|  5.78k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  4.73k|                            if let Some(c) = buf.get(end_position + 1) {
  313|  4.03k|                                if *c == b'\n' {
  314|      0|                                    end_position += 1;
  315|  4.03k|                                }
  316|    699|                            } else if !self.is_ending {
  317|    672|                                return None; // We need to read more
  318|     27|                            }
  319|  1.05k|                        }
  320|  5.11k|                        let comment_size = end_position + 1;
  321|  5.11k|                        self.position.buffer_offset += comment_size;
  322|  5.11k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  5.11k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  5.11k|                        self.position.global_line += 1;
  325|  5.11k|                        continue;
  326|  10.9k|                    }
  327|  10.9k|                    if self.is_ending {
  328|    713|                        self.position.buffer_offset = self.data.len(); // EOF
  329|    713|                        return Some(());
  330|  10.2k|                    }
  331|  10.2k|                    return None; // We need more data
  332|  12.8M|                }
  333|      0|            }
  334|  12.8M|            return Some(());
  335|       |        }
  336|  12.9M|    }
_RNvXs_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB8_:
   41|  7.20k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  7.20k|        (*location.start()..*location.end() + 1, message).into()
   43|  7.20k|    }
_RNvXs_NtNtCs4HPcYfJdze0_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   398k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   398k|        (*location.start()..*location.end() + 1, message).into()
   43|   398k|    }

_RINvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB5_6ParserNtNtB9_5terse14TriGRecognizerE10parse_readRShECsa6d1IKvoGEd_4trig:
  124|  8.29k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadIterator<R, RR> {
  125|  8.29k|        FromReadIterator { read, parser: self }
  126|  8.29k|    }
_RNvXs0_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB5_16FromReadIteratorRShNtNtB9_5terse14TriGRecognizerENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsa6d1IKvoGEd_4trig:
  146|   197k|    fn next(&mut self) -> Option<Self::Item> {
  147|   227k|        while !self.parser.is_end() {
  148|   219k|            if let Some(result) = self.parser.read_next() {
  149|   188k|                return Some(result.map_err(TurtleParseError::Syntax));
  150|  30.7k|            }
  151|  30.7k|            if let Err(e) = self.parser.lexer.extend_from_read(&mut self.read) {
  152|      0|                return Some(Err(e.into()));
  153|  30.7k|            }
  154|       |        }
  155|  8.29k|        None
  156|   197k|    }
_RNvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3endB8_:
   71|  24.8k|    pub fn end(&mut self) {
   72|  24.8k|        self.lexer.end()
   73|  24.8k|    }
_RNCNvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_5terse14TriGRecognizerE9read_next0Ba_:
   96|  9.47M|                        self.state = self.state.take().map(|state| {
   97|  9.47M|                            state.recognize_next(
   98|  9.47M|                                token,
   99|  9.47M|                                &mut self.context,
  100|  9.47M|                                &mut self.results,
  101|  9.47M|                                &mut self.errors,
  102|  9.47M|                            )
  103|  9.47M|                        });
_RNvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE17extend_from_sliceB8_:
   66|  1.68M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.68M|        self.lexer.extend_from_slice(other)
   68|  1.68M|    }
_RNvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE6is_endB8_:
   76|   252k|    pub fn is_end(&self) -> bool {
   77|   252k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|   252k|    }
_RNvXNtNtCs4HPcYfJdze0_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjOdcKtOMjJI_5alloc6string6StringE4fromB6_:
   39|  20.8k|    fn from(message: S) -> Self {
   40|  20.8k|        Self {
   41|  20.8k|            message: message.into(),
   42|  20.8k|        }
   43|  20.8k|    }
_RNvXNtNtCs4HPcYfJdze0_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromReE4fromB6_:
   39|   224k|    fn from(message: S) -> Self {
   40|   224k|        Self {
   41|   224k|            message: message.into(),
   42|   224k|        }
   43|   224k|    }
_RNvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE9read_nextB8_:
   80|  4.41M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|  13.9M|            if let Some(error) = self.errors.pop() {
   83|   245k|                return Some(Err(TurtleSyntaxError {
   84|   245k|                    location: self.lexer.last_token_location(),
   85|   245k|                    message: error
   86|   245k|                        .message
   87|   245k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   245k|                }));
   89|  13.6M|            }
   90|  13.6M|            if let Some(result) = self.results.pop() {
   91|   763k|                return Some(Ok(result));
   92|  12.9M|            }
   93|  12.9M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  11.1M|                match result {
   95|  9.47M|                    Ok(token) => {
   96|  9.47M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  9.47M|                        });
  104|  9.47M|                        continue;
  105|       |                    }
  106|  1.66M|                    Err(e) => {
  107|  1.66M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  1.66M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.77M|            }
  112|  1.77M|            if self.lexer.is_end() {
  113|  66.3k|                self.state.take()?.recognize_end(
  114|  33.1k|                    &mut self.context,
  115|  33.1k|                    &mut self.results,
  116|  33.1k|                    &mut self.errors,
  117|  33.1k|                )
  118|       |            } else {
  119|  1.70M|                return None;
  120|       |            }
  121|       |        }
  122|  4.41M|    }
_RNvMs_NtNtCs4HPcYfJdze0_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_5terse14TriGRecognizerE3newB8_:
   56|  33.1k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  33.1k|        Self {
   58|  33.1k|            lexer,
   59|  33.1k|            state: Some(recognizer),
   60|  33.1k|            context,
   61|  33.1k|            results: vec![],
   62|  33.1k|            errors: vec![],
   63|  33.1k|        }
   64|  33.1k|    }

_RNvXs2_NtCs4HPcYfJdze0_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsa6d1IKvoGEd_4trig:
  569|  29.0k|    fn next(&mut self) -> Option<Self::Item> {
  570|  29.0k|        let (key, value) = self.inner.next()?;
  571|  4.13k|        Some((key.as_str(), value.as_str()))
  572|  29.0k|    }
_RNvXs2_NtCs4HPcYfJdze0_5oxttl4trigNtB5_16TriGPrefixesIterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hintCsa6d1IKvoGEd_4trig:
  575|  3.20k|    fn size_hint(&self) -> (usize, Option<usize>) {
  576|  3.20k|        self.inner.size_hint()
  577|  3.20k|    }
_RNvMNtCs4HPcYfJdze0_5oxttl4trigNtB2_10TriGParser19with_quoted_triplesCsa6d1IKvoGEd_4trig:
   97|  33.1k|    pub fn with_quoted_triples(mut self) -> Self {
   98|  33.1k|        self.with_quoted_triples = true;
   99|  33.1k|        self
  100|  33.1k|    }
_RNvMs3_NtCs4HPcYfJdze0_5oxttl4trigNtB5_14TriGSerializer3newCsa6d1IKvoGEd_4trig:
  612|  8.29k|    pub fn new() -> Self {
  613|  8.29k|        Self {
  614|  8.29k|            prefixes: BTreeMap::new(),
  615|  8.29k|        }
  616|  8.29k|    }
_RNvMNtCs4HPcYfJdze0_5oxttl4trigNtB2_10TriGParser3newCsa6d1IKvoGEd_4trig:
   62|  33.1k|    pub fn new() -> Self {
   63|  33.1k|        Self::default()
   64|  33.1k|    }
_RNvXs8_NtCs4HPcYfJdze0_5oxttl4trigNtB5_10TriGParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsa6d1IKvoGEd_4trig:
   49|  33.1k|#[derive(Default)]
_RNvMNtCs4HPcYfJdze0_5oxttl4trigNtB2_10TriGParser9uncheckedCsa6d1IKvoGEd_4trig:
   72|  8.29k|    pub fn unchecked(mut self) -> Self {
   73|  8.29k|        self.unchecked = true;
   74|  8.29k|        self
   75|  8.29k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsflNycjbQork_5oxrdf10named_node12NamedNodeRefECsa6d1IKvoGEd_4trig:
  963|  2.90k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|  2.90k|        TurtleTerm {
  965|  2.90k|            term: term.into(),
  966|  2.90k|            prefixes: &self.prefixes,
  967|  2.90k|        }
  968|  2.90k|    }
_RINvMNtCs4HPcYfJdze0_5oxttl4trigNtB3_10TriGParser13with_base_iriReECsa6d1IKvoGEd_4trig:
   78|  24.8k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
   79|  24.8k|        self.base = Some(Iri::parse(base_iri.into())?);
   80|  24.8k|        Ok(self)
   81|  24.8k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter10write_quadRNtNtCsflNycjbQork_5oxrdf6triple4QuadQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsa6d1IKvoGEd_4trig:
  861|   188k|    pub fn write_quad<'a>(
  862|   188k|        &mut self,
  863|   188k|        q: impl Into<QuadRef<'a>>,
  864|   188k|        mut write: impl Write,
  865|   188k|    ) -> io::Result<()> {
  866|   188k|        if !self.prelude_written {
  867|  4.76k|            self.prelude_written = true;
  868|  5.66k|            for (prefix_iri, prefix_name) in &self.prefixes {
  869|    905|                writeln!(write, "@prefix {prefix_name}: <{prefix_iri}> .")?;
  870|       |            }
  871|   183k|        }
  872|   188k|        let q = q.into();
  873|   188k|        if q.graph_name == self.current_graph_name.as_ref() {
  874|   178k|            if let Some((current_subject, current_predicate)) =
  875|   182k|                self.current_subject_predicate.take()
  876|       |            {
  877|   178k|                if q.subject == current_subject.as_ref() {
  878|  31.9k|                    if q.predicate == current_predicate {
  879|  23.0k|                        self.current_subject_predicate = Some((current_subject, current_predicate));
  880|  23.0k|                        write!(write, " , {}", self.term(q.object))
  881|       |                    } else {
  882|  8.88k|                        self.current_subject_predicate =
  883|  8.88k|                            Some((current_subject, q.predicate.into_owned()));
  884|  8.88k|                        writeln!(write, " ;")?;
  885|  8.88k|                        if !self.current_graph_name.is_default_graph() {
  886|  1.53k|                            write!(write, "\t")?;
  887|  7.35k|                        }
  888|  8.88k|                        write!(
  889|  8.88k|                            write,
  890|  8.88k|                            "\t{} {}",
  891|  8.88k|                            self.predicate(q.predicate),
  892|  8.88k|                            self.term(q.object)
  893|  8.88k|                        )
  894|       |                    }
  895|       |                } else {
  896|   146k|                    self.current_subject_predicate =
  897|   146k|                        Some((q.subject.into_owned(), q.predicate.into_owned()));
  898|   146k|                    writeln!(write, " .")?;
  899|   146k|                    if !self.current_graph_name.is_default_graph() {
  900|  18.2k|                        write!(write, "\t")?;
  901|   128k|                    }
  902|   146k|                    write!(
  903|   146k|                        write,
  904|   146k|                        "{} {} {}",
  905|   146k|                        self.term(q.subject),
  906|   146k|                        self.predicate(q.predicate),
  907|   146k|                        self.term(q.object)
  908|   146k|                    )
  909|       |                }
  910|       |            } else {
  911|  3.92k|                self.current_subject_predicate =
  912|  3.92k|                    Some((q.subject.into_owned(), q.predicate.into_owned()));
  913|  3.92k|                if !self.current_graph_name.is_default_graph() {
  914|      0|                    write!(write, "\t")?;
  915|  3.92k|                }
  916|  3.92k|                write!(
  917|  3.92k|                    write,
  918|  3.92k|                    "{} {} {}",
  919|  3.92k|                    self.term(q.subject),
  920|  3.92k|                    self.predicate(q.predicate),
  921|  3.92k|                    self.term(q.object)
  922|  3.92k|                )
  923|       |            }
  924|       |        } else {
  925|  6.14k|            if self.current_subject_predicate.is_some() {
  926|  5.30k|                writeln!(write, " .")?;
  927|    837|            }
  928|  6.14k|            if !self.current_graph_name.is_default_graph() {
  929|  2.97k|                writeln!(write, "}}")?;
  930|  3.17k|            }
  931|  6.14k|            self.current_graph_name = q.graph_name.into_owned();
  932|  6.14k|            self.current_subject_predicate =
  933|  6.14k|                Some((q.subject.into_owned(), q.predicate.into_owned()));
  934|  6.14k|            match self.current_graph_name.as_ref() {
  935|  2.90k|                GraphNameRef::NamedNode(g) => {
  936|  2.90k|                    writeln!(write, "{} {{", self.term(g))?;
  937|  2.90k|                    write!(write, "\t")?;
  938|       |                }
  939|    962|                GraphNameRef::BlankNode(g) => {
  940|    962|                    writeln!(write, "{} {{", self.term(g))?;
  941|    962|                    write!(write, "\t")?;
  942|       |                }
  943|  2.27k|                GraphNameRef::DefaultGraph => (),
  944|       |            }
  945|       |
  946|  6.14k|            write!(
  947|  6.14k|                write,
  948|  6.14k|                "{} {} {}",
  949|  6.14k|                self.term(q.subject),
  950|  6.14k|                self.predicate(q.predicate),
  951|  6.14k|                self.term(q.object)
  952|  6.14k|            )
  953|       |        }
  954|   188k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsflNycjbQork_5oxrdf6triple10SubjectRefECsa6d1IKvoGEd_4trig:
  963|   156k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   156k|        TurtleTerm {
  965|   156k|            term: term.into(),
  966|   156k|            prefixes: &self.prefixes,
  967|   156k|        }
  968|   156k|    }
_RINvMs3_NtCs4HPcYfJdze0_5oxttl4trigNtB6_14TriGSerializer11with_prefixNtNtCsjOdcKtOMjJI_5alloc6string6StringB15_ECsa6d1IKvoGEd_4trig:
  619|  1.29k|    pub fn with_prefix(
  620|  1.29k|        mut self,
  621|  1.29k|        prefix_name: impl Into<String>,
  622|  1.29k|        prefix_iri: impl Into<String>,
  623|  1.29k|    ) -> Result<Self, IriParseError> {
  624|  1.29k|        self.prefixes.insert(
  625|  1.29k|            Iri::parse(prefix_iri.into())?.into_inner(),
  626|  1.29k|            prefix_name.into(),
  627|  1.29k|        );
  628|  1.29k|        Ok(self)
  629|  1.29k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsflNycjbQork_5oxrdf6triple7TermRefECsa6d1IKvoGEd_4trig:
  963|   188k|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|   188k|        TurtleTerm {
  965|   188k|            term: term.into(),
  966|   188k|            prefixes: &self.prefixes,
  967|   188k|        }
  968|   188k|    }
_RNvMs4_NtCs4HPcYfJdze0_5oxttl4trigINtB5_17ToWriteTriGWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCsa6d1IKvoGEd_4trig:
  767|  8.29k|    pub fn finish(mut self) -> io::Result<W> {
  768|  8.29k|        self.writer.finish(&mut self.write)?;
  769|  8.29k|        Ok(self.write)
  770|  8.29k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter6finishQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsa6d1IKvoGEd_4trig:
  971|  8.29k|    pub fn finish(&mut self, mut write: impl Write) -> io::Result<()> {
  972|  8.29k|        if self.current_subject_predicate.is_some() {
  973|  4.76k|            writeln!(write, " .")?;
  974|  3.53k|        }
  975|  8.29k|        if !self.current_graph_name.is_default_graph() {
  976|    896|            writeln!(write, "}}")?;
  977|  7.40k|        }
  978|  8.29k|        Ok(())
  979|  8.29k|    }
_RNvXs0_NtCs4HPcYfJdze0_5oxttl4trigINtB5_18FromReadTriGReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsa6d1IKvoGEd_4trig:
  319|   197k|    fn next(&mut self) -> Option<Self::Item> {
  320|   197k|        self.inner.next()
  321|   197k|    }
_RINvMs4_NtCs4HPcYfJdze0_5oxttl4trigINtB6_17ToWriteTriGWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE10write_quadRNtNtCsflNycjbQork_5oxrdf6triple4QuadECsa6d1IKvoGEd_4trig:
  762|   188k|    pub fn write_quad<'a>(&mut self, q: impl Into<QuadRef<'a>>) -> io::Result<()> {
  763|   188k|        self.writer.write_quad(q, &mut self.write)
  764|   188k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter9predicateNtNtCsflNycjbQork_5oxrdf10named_node12NamedNodeRefECsa6d1IKvoGEd_4trig:
  956|   165k|    fn predicate<'a>(&'a self, named_node: impl Into<NamedNodeRef<'a>>) -> TurtlePredicate<'a> {
  957|   165k|        TurtlePredicate {
  958|   165k|            named_node: named_node.into(),
  959|   165k|            prefixes: &self.prefixes,
  960|   165k|        }
  961|   165k|    }
_RINvMNtCs4HPcYfJdze0_5oxttl4trigNtB3_10TriGParser10parse_readRShECsa6d1IKvoGEd_4trig:
  128|  8.29k|    pub fn parse_read<R: Read>(self, read: R) -> FromReadTriGReader<R> {
  129|  8.29k|        FromReadTriGReader {
  130|  8.29k|            inner: self.parse().parser.parse_read(read),
  131|  8.29k|        }
  132|  8.29k|    }
_RINvMs3_NtCs4HPcYfJdze0_5oxttl4trigNtB6_14TriGSerializer18serialize_to_writeINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsa6d1IKvoGEd_4trig:
  652|  8.29k|    pub fn serialize_to_write<W: Write>(self, write: W) -> ToWriteTriGWriter<W> {
  653|  8.29k|        ToWriteTriGWriter {
  654|  8.29k|            write,
  655|  8.29k|            writer: self.serialize(),
  656|  8.29k|        }
  657|  8.29k|    }
_RINvMs5_NtCs4HPcYfJdze0_5oxttl4trigNtB6_18LowLevelTriGWriter4termNtNtCsflNycjbQork_5oxrdf10blank_node12BlankNodeRefECsa6d1IKvoGEd_4trig:
  963|    962|    fn term<'a>(&'a self, term: impl Into<TermRef<'a>>) -> TurtleTerm<'a> {
  964|    962|        TurtleTerm {
  965|    962|            term: term.into(),
  966|    962|            prefixes: &self.prefixes,
  967|    962|        }
  968|    962|    }
_RNvXs7_NtCs4HPcYfJdze0_5oxttl4trigNtB5_10TurtleTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1007|  4.87M|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1008|  4.87M|        match self.term {
 1009|  1.94M|            TermRef::NamedNode(v) => {
 1010|  2.00M|                for (prefix_iri, prefix_name) in self.prefixes {
 1011|   137k|                    if let Some(local_name) = v.as_str().strip_prefix(prefix_iri) {
 1012|   102k|                        if let Some(escaped_local_name) = escape_local_name(local_name) {
 1013|  69.7k|                            return write!(f, "{prefix_name}:{escaped_local_name}");
 1014|  32.9k|                        }
 1015|  34.5k|                    }
 1016|       |                }
 1017|  1.87M|                write!(f, "{v}")
 1018|       |            }
 1019|   156k|            TermRef::BlankNode(v) => write!(f, "{v}"),
 1020|  1.32M|            TermRef::Literal(v) => {
 1021|  1.32M|                let value = v.value();
 1022|  1.32M|                let inline = match v.datatype() {
 1023|  1.32M|                    xsd::BOOLEAN => is_turtle_boolean(value),
 1024|  1.32M|                    xsd::INTEGER => is_turtle_integer(value),
 1025|  1.11M|                    xsd::DECIMAL => is_turtle_decimal(value),
 1026|  1.11M|                    xsd::DOUBLE => is_turtle_double(value),
 1027|  5.23k|                    _ => false,
 1028|       |                };
 1029|  1.32M|                if inline {
 1030|  1.31M|                    f.write_str(value)
 1031|  5.23k|                } else if v.is_plain() {
 1032|  5.00k|                    write!(f, "{v}")
 1033|       |                } else {
 1034|    234|                    write!(
 1035|    234|                        f,
 1036|    234|                        "{}^^{}",
 1037|    234|                        LiteralRef::new_simple_literal(v.value()),
 1038|    234|                        TurtleTerm {
 1039|    234|                            term: v.datatype().into(),
 1040|    234|                            prefixes: self.prefixes
 1041|    234|                        }
 1042|    234|                    )
 1043|       |                }
 1044|       |            }
 1045|       |            #[cfg(feature = "rdf-star")]
 1046|  1.45M|            TermRef::Triple(t) => {
 1047|  1.45M|                write!(
 1048|  1.45M|                    f,
 1049|  1.45M|                    "<< {} {} {} >>",
 1050|  1.45M|                    TurtleTerm {
 1051|  1.45M|                        term: t.subject.as_ref().into(),
 1052|  1.45M|                        prefixes: self.prefixes
 1053|  1.45M|                    },
 1054|  1.45M|                    TurtleTerm {
 1055|  1.45M|                        term: t.predicate.as_ref().into(),
 1056|  1.45M|                        prefixes: self.prefixes
 1057|  1.45M|                    },
 1058|  1.45M|                    TurtleTerm {
 1059|  1.45M|                        term: t.object.as_ref(),
 1060|  1.45M|                        prefixes: self.prefixes
 1061|  1.45M|                    }
 1062|  1.45M|                )
 1063|       |            }
 1064|       |        }
 1065|  4.87M|    }
_RNvNtCs4HPcYfJdze0_5oxttl4trig17is_turtle_integer:
 1072|   208k|fn is_turtle_integer(value: &str) -> bool {
 1073|   208k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
 1074|   208k|    let mut value = value.as_bytes();
 1075|   208k|    if let Some(v) = value.strip_prefix(b"+") {
 1076|    602|        value = v;
 1077|   208k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1078|     25|        value = v;
 1079|   208k|    }
 1080|   208k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1081|   208k|}
_RNvMs3_NtCs4HPcYfJdze0_5oxttl4trigNtB5_14TriGSerializer9serialize:
  723|  8.29k|    pub fn serialize(self) -> LowLevelTriGWriter {
  724|  8.29k|        LowLevelTriGWriter {
  725|  8.29k|            prefixes: self.prefixes,
  726|  8.29k|            prelude_written: false,
  727|  8.29k|            current_graph_name: GraphName::DefaultGraph,
  728|  8.29k|            current_subject_predicate: None,
  729|  8.29k|        }
  730|  8.29k|    }
_RNvMs1_NtCs4HPcYfJdze0_5oxttl4trigNtB5_18LowLevelTriGReader9read_next:
  495|  4.19M|    pub fn read_next(&mut self) -> Option<Result<Quad, TurtleSyntaxError>> {
  496|  4.19M|        self.parser.read_next()
  497|  4.19M|    }
_RNvNtCs4HPcYfJdze0_5oxttl4trig16is_turtle_double:
 1100|  1.10M|fn is_turtle_double(value: &str) -> bool {
 1101|  1.10M|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
 1102|  1.10M|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
 1103|  1.10M|    let mut value = value.as_bytes();
 1104|  1.10M|    if let Some(v) = value.strip_prefix(b"+") {
 1105|     74|        value = v;
 1106|  1.10M|    } else if let Some(v) = value.strip_prefix(b"-") {
 1107|    151|        value = v;
 1108|  1.10M|    }
 1109|  1.10M|    let mut with_before = false;
 1110|  3.51M|    while value.first().map_or(false, u8::is_ascii_digit) {
 1111|  2.41M|        value = &value[1..];
 1112|  2.41M|        with_before = true;
 1113|  2.41M|    }
 1114|  1.10M|    let mut with_after = false;
 1115|  1.10M|    if let Some(v) = value.strip_prefix(b".") {
 1116|    619|        value = v;
 1117|  6.13k|        while value.first().map_or(false, u8::is_ascii_digit) {
 1118|  5.51k|            value = &value[1..];
 1119|  5.51k|            with_after = true;
 1120|  5.51k|        }
 1121|  1.10M|    }
 1122|  1.10M|    if let Some(v) = value.strip_prefix(b"e") {
 1123|   114k|        value = v;
 1124|   990k|    } else if let Some(v) = value.strip_prefix(b"E") {
 1125|   990k|        value = v;
 1126|   990k|    } else {
 1127|      0|        return false;
 1128|       |    }
 1129|  1.10M|    if let Some(v) = value.strip_prefix(b"+") {
 1130|    180|        value = v;
 1131|  1.10M|    } else if let Some(v) = value.strip_prefix(b"-") {
 1132|    251|        value = v;
 1133|  1.10M|    }
 1134|  1.10M|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1135|  1.10M|}
_RNvNtCs4HPcYfJdze0_5oxttl4trig28can_be_escaped_in_local_name:
 1167|   157k|fn can_be_escaped_in_local_name(c: char) -> bool {
 1168|     92|    matches!(
 1169|   157k|        c,
 1170|       |        '_' | '~'
 1171|       |            | '.'
 1172|       |            | '-'
 1173|       |            | '!'
 1174|       |            | '$'
 1175|       |            | '&'
 1176|       |            | '\''
 1177|       |            | '('
 1178|       |            | ')'
 1179|       |            | '*'
 1180|       |            | '+'
 1181|       |            | ','
 1182|       |            | ';'
 1183|       |            | '='
 1184|       |            | '/'
 1185|       |            | '?'
 1186|       |            | '#'
 1187|       |            | '@'
 1188|       |            | '%'
 1189|       |    )
 1190|   157k|}
_RNvMs1_NtCs4HPcYfJdze0_5oxttl4trigNtB5_18LowLevelTriGReader3end:
  482|  24.8k|    pub fn end(&mut self) {
  483|  24.8k|        self.parser.end()
  484|  24.8k|    }
_RNvMNtCs4HPcYfJdze0_5oxttl4trigNtB2_10TriGParser5parse:
  212|  33.1k|    pub fn parse(self) -> LowLevelTriGReader {
  213|  33.1k|        LowLevelTriGReader {
  214|  33.1k|            parser: TriGRecognizer::new_parser(
  215|  33.1k|                true,
  216|  33.1k|                #[cfg(feature = "rdf-star")]
  217|  33.1k|                self.with_quoted_triples,
  218|  33.1k|                self.unchecked,
  219|  33.1k|                self.base,
  220|  33.1k|                self.prefixes,
  221|  33.1k|            ),
  222|  33.1k|        }
  223|  33.1k|    }
_RNvXs6_NtCs4HPcYfJdze0_5oxttl4trigNtB5_15TurtlePredicateNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  988|   165k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  989|   165k|        if self.named_node == rdf::TYPE {
  990|  1.57k|            f.write_str("a")
  991|       |        } else {
  992|   164k|            TurtleTerm {
  993|   164k|                term: self.named_node.into(),
  994|   164k|                prefixes: self.prefixes,
  995|   164k|            }
  996|   164k|            .fmt(f)
  997|       |        }
  998|   165k|    }
_RNvNtCs4HPcYfJdze0_5oxttl4trig17is_turtle_boolean:
 1068|    121|fn is_turtle_boolean(value: &str) -> bool {
 1069|    121|    matches!(value, "true" | "false")
 1070|    121|}
_RNvNtCs4HPcYfJdze0_5oxttl4trig17is_turtle_decimal:
 1083|  2.65k|fn is_turtle_decimal(value: &str) -> bool {
 1084|  2.65k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
 1085|  2.65k|    let mut value = value.as_bytes();
 1086|  2.65k|    if let Some(v) = value.strip_prefix(b"+") {
 1087|     68|        value = v;
 1088|  2.58k|    } else if let Some(v) = value.strip_prefix(b"-") {
 1089|     97|        value = v;
 1090|  2.48k|    }
 1091|  4.41k|    while value.first().map_or(false, u8::is_ascii_digit) {
 1092|  1.76k|        value = &value[1..];
 1093|  1.76k|    }
 1094|  2.65k|    let Some(value) = value.strip_prefix(b".") else {
 1095|      0|        return false;
 1096|       |    };
 1097|  2.65k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
 1098|  2.65k|}
_RNvMs1_NtCs4HPcYfJdze0_5oxttl4trigNtB5_18LowLevelTriGReader8prefixes:
  524|  24.8k|    pub fn prefixes(&self) -> TriGPrefixesIter<'_> {
  525|  24.8k|        TriGPrefixesIter {
  526|  24.8k|            inner: self.parser.context.prefixes(),
  527|  24.8k|        }
  528|  24.8k|    }
_RNvNtCs4HPcYfJdze0_5oxttl4trig17escape_local_name:
 1137|   102k|fn escape_local_name(value: &str) -> Option<String> {
 1138|   102k|    // TODO: PLX
 1139|   102k|    // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
 1140|   102k|    let mut output = String::with_capacity(value.len());
 1141|   102k|    let mut chars = value.chars();
 1142|   102k|    let first = chars.next()?;
 1143|  69.8k|    if N3Lexer::is_possible_pn_chars_u(first) || first == ':' || first.is_ascii_digit() {
 1144|  22.0k|        output.push(first);
 1145|  47.7k|    } else if can_be_escaped_in_local_name(first) {
 1146|  47.7k|        output.push('\\');
 1147|  47.7k|        output.push(first);
 1148|  47.7k|    } else {
 1149|     34|        return None;
 1150|       |    }
 1151|       |
 1152|   347k|    while let Some(c) = chars.next() {
 1153|   278k|        if N3Lexer::is_possible_pn_chars(c) || c == ':' || (c == '.' && !chars.as_str().is_empty())
 1154|   168k|        {
 1155|   168k|            output.push(c);
 1156|   168k|        } else if can_be_escaped_in_local_name(c) {
 1157|   109k|            output.push('\\');
 1158|   109k|            output.push(c);
 1159|   109k|        } else {
 1160|     58|            return None;
 1161|       |        }
 1162|       |    }
 1163|       |
 1164|  69.7k|    Some(output)
 1165|   102k|}
_RNvMs1_NtCs4HPcYfJdze0_5oxttl4trigNtB5_18LowLevelTriGReader17extend_from_slice:
  475|  1.68M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  476|  1.68M|        self.parser.extend_from_slice(other)
  477|  1.68M|    }
_RNvMs1_NtCs4HPcYfJdze0_5oxttl4trigNtB5_18LowLevelTriGReader6is_end:
  487|  24.8k|    pub fn is_end(&self) -> bool {
  488|  24.8k|        self.parser.is_end()
  489|  24.8k|    }


_RINvXNtCs6064qOfZ6E5_6anyhow7contextINtNtCskzdpTR3bRvG_4core6result6ResultINtNtCs4XkmH8cVWyK_5alloc3vec3VecNtNtCs6YJc3OKmi2o_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCshXB2kc3dftb_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|  1.30k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.30k|    where
   60|  1.30k|        C: Display + Send + Sync + 'static,
   61|  1.30k|        F: FnOnce() -> C,
   62|  1.30k|    {
   63|  1.30k|        match self {
   64|  1.30k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.30k|    }
_RINvXNtCs6064qOfZ6E5_6anyhow7contextINtNtCskzdpTR3bRvG_4core6result6ResultINtCs6YJc3OKmi2o_10sparesults18QueryResultsReaderRShENtNtB1d_5error10ParseErrorEINtB5_7ContextB1a_B21_E12with_contextNtNtCs4XkmH8cVWyK_5alloc6string6StringNCNvNtCshXB2kc3dftb_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB3L_:
   58|  1.30k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.30k|    where
   60|  1.30k|        C: Display + Send + Sync + 'static,
   61|  1.30k|        F: FnOnce() -> C,
   62|  1.30k|    {
   63|  1.30k|        match self {
   64|  1.30k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.30k|    }

_RNvNvCshtCyySwhNmU_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  2.77k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  2.77k|                $body
  243|  2.77k|            }
rust_fuzzer_test_input:
  215|  2.77k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  2.77k|                }
  223|  2.77k|
  224|  2.77k|                __libfuzzer_sys_run(bytes);
  225|  2.77k|                0
  226|  2.77k|            }
LLVMFuzzerTestOneInput:
   58|  2.77k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.77k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.77k|    });
   63|  2.77k|
   64|  2.77k|    match test_input {
   65|  2.77k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.77k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsf3g8Ba2ibrg_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.77k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.77k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.77k|        rust_fuzzer_test_input(data_slice)
   62|  2.77k|    });

_RNvMs2_NtCs38SJfxQZTUl_9once_cell3impINtB5_8OnceCellNtNtCs4XkmH8cVWyK_5alloc6string6StringE14is_initializedCsf3g8Ba2ibrg_13libfuzzer_sys:
   49|  2.77k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.77k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.77k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.77k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.77k|        // `SeqCst` operations on the slow path.
   54|  2.77k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.77k|    }

_RNvMs4_NtCs38SJfxQZTUl_9once_cell4syncINtB5_8OnceCellNtNtCs4XkmH8cVWyK_5alloc6string6StringE3getCsf3g8Ba2ibrg_13libfuzzer_sys:
  965|  2.77k|        pub fn get(&self) -> Option<&T> {
  966|  2.77k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  2.77k|                None
  971|       |            }
  972|  2.77k|        }

_RINvXsr_CsjWNxXJLxh05_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCskzdpTR3bRvG_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECskGrqaZ7ysJS_5oxrdf:
  560|    446|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsjWNxXJLxh05_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCskzdpTR3bRvG_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECskGrqaZ7ysJS_5oxrdf:
  560|  11.4k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsjWNxXJLxh05_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCskzdpTR3bRvG_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECskGrqaZ7ysJS_5oxrdf:
  560|  2.36k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsjWNxXJLxh05_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCskzdpTR3bRvG_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECskGrqaZ7ysJS_5oxrdf:
  560|    997|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNvMCsjWNxXJLxh05_10oxilangtagINtB2_11LanguageTagNtNtCs4XkmH8cVWyK_5alloc6string6StringE5parseCskGrqaZ7ysJS_5oxrdf:
   41|  5.95k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  5.95k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  5.89k|        Ok(Self { tag, positions })
   44|  5.95k|    }
_RINvCsjWNxXJLxh05_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECskGrqaZ7ysJS_5oxrdf:
  621|  5.50k|fn parse_langtag(
  622|  5.50k|    input: &str,
  623|  5.50k|    output: &mut impl OutputBuffer,
  624|  5.50k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  5.50k|    #[derive(PartialEq, Eq)]
  626|  5.50k|    enum State {
  627|  5.50k|        Start,
  628|  5.50k|        AfterLanguage,
  629|  5.50k|        AfterExtLang,
  630|  5.50k|        AfterScript,
  631|  5.50k|        AfterRegion,
  632|  5.50k|        InExtension { expected: bool },
  633|  5.50k|        InPrivateUse { expected: bool },
  634|  5.50k|    }
  635|  5.50k|
  636|  5.50k|    let mut state = State::Start;
  637|  5.50k|    let mut language_end = 0;
  638|  5.50k|    let mut extlang_end = 0;
  639|  5.50k|    let mut script_end = 0;
  640|  5.50k|    let mut region_end = 0;
  641|  5.50k|    let mut variant_end = 0;
  642|  5.50k|    let mut extension_end = 0;
  643|  5.50k|    let mut extlangs_count = 0;
  644|  15.8k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  15.8k|        if subtag.is_empty() {
  646|     20|            return Err(LanguageTagParseError {
  647|     20|                kind: TagParseErrorKind::EmptySubtag,
  648|     20|            });
  649|  15.7k|        }
  650|  15.7k|        if subtag.len() > 8 {
  651|      6|            return Err(LanguageTagParseError {
  652|      6|                kind: TagParseErrorKind::SubtagTooLong,
  653|      6|            });
  654|  15.7k|        }
  655|  15.7k|        if state == State::Start {
  656|       |            // Primary language
  657|  5.48k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|      3|                return Err(LanguageTagParseError {
  659|      3|                    kind: TagParseErrorKind::InvalidLanguage,
  660|      3|                });
  661|  5.48k|            }
  662|  5.48k|            language_end = end;
  663|  5.48k|            output.extend(to_lowercase(subtag));
  664|  5.48k|            if subtag.len() < 4 {
  665|  3.35k|                // extlangs are only allowed for short language tags
  666|  3.35k|                state = State::AfterLanguage;
  667|  3.35k|            } else {
  668|  2.12k|                state = State::AfterExtLang;
  669|  2.12k|            }
  670|  10.3k|        } else if let State::InPrivateUse { .. } = state {
  671|    406|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    406|            }
  676|    406|            output.push('-');
  677|    406|            output.extend(to_lowercase(subtag));
  678|    406|            state = State::InPrivateUse { expected: false };
  679|  9.89k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    157|            if let State::InExtension { expected: true } = state {
  682|      1|                return Err(LanguageTagParseError {
  683|      1|                    kind: TagParseErrorKind::EmptyExtension,
  684|      1|                });
  685|    156|            }
  686|    156|            output.push('-');
  687|    156|            output.push('x');
  688|    156|            state = State::InPrivateUse { expected: true };
  689|  9.74k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|    808|            if let State::InExtension { expected: true } = state {
  692|     10|                return Err(LanguageTagParseError {
  693|     10|                    kind: TagParseErrorKind::EmptyExtension,
  694|     10|                });
  695|    798|            }
  696|    798|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|    798|            output.push('-');
  698|    798|            output.push(extension_tag);
  699|    798|            state = State::InExtension { expected: true };
  700|  8.93k|        } else if let State::InExtension { .. } = state {
  701|  1.78k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  1.78k|            }
  706|  1.78k|            extension_end = end;
  707|  1.78k|            output.push('-');
  708|  1.78k|            output.extend(to_lowercase(subtag));
  709|  1.78k|            state = State::InExtension { expected: false };
  710|  7.14k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  2.13k|            extlangs_count += 1;
  712|  2.13k|            if extlangs_count > 3 {
  713|      1|                return Err(LanguageTagParseError {
  714|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      1|                });
  716|  2.13k|            }
  717|  2.13k|            // valid extlangs
  718|  2.13k|            extlang_end = end;
  719|  2.13k|            output.push('-');
  720|  2.13k|            output.extend(to_lowercase(subtag));
  721|  5.01k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  2.99k|            && subtag.len() == 4
  723|    997|            && is_alphabetic(subtag)
  724|    997|        {
  725|    997|            // Script
  726|    997|            script_end = end;
  727|    997|            output.push('-');
  728|    997|            output.extend(to_uppercase_first(subtag));
  729|    997|            state = State::AfterScript;
  730|  4.01k|        } else if (state == State::AfterLanguage
  731|  3.16k|            || state == State::AfterExtLang
  732|  2.01k|            || state == State::AfterScript)
  733|  2.92k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    553|                || subtag.len() == 3 && is_numeric(subtag))
  735|  2.36k|        {
  736|  2.36k|            // Region
  737|  2.36k|            region_end = end;
  738|  2.36k|            output.push('-');
  739|  2.36k|            output.extend(to_uppercase(subtag));
  740|  2.36k|            state = State::AfterRegion;
  741|  2.36k|        } else if (state == State::AfterLanguage
  742|  1.50k|            || state == State::AfterExtLang
  743|  1.18k|            || state == State::AfterScript
  744|  1.09k|            || state == State::AfterRegion)
  745|  1.65k|            && is_alphanumeric(subtag)
  746|  1.65k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|     11|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.64k|        {
  749|  1.64k|            // Variant
  750|  1.64k|            variant_end = end;
  751|  1.64k|            output.push('-');
  752|  1.64k|            output.extend(to_lowercase(subtag));
  753|  1.64k|            state = State::AfterRegion;
  754|  1.64k|        } else {
  755|     11|            return Err(LanguageTagParseError {
  756|     11|                kind: TagParseErrorKind::InvalidSubtag,
  757|     11|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  5.45k|    if let State::InExtension { expected: true } = state {
  763|      3|        return Err(LanguageTagParseError {
  764|      3|            kind: TagParseErrorKind::EmptyExtension,
  765|      3|        });
  766|  5.44k|    }
  767|  5.44k|    if let State::InPrivateUse { expected: true } = state {
  768|      1|        return Err(LanguageTagParseError {
  769|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|      1|        });
  771|  5.44k|    }
  772|  5.44k|
  773|  5.44k|    //We make sure we have not skipped anyone
  774|  5.44k|    if extlang_end < language_end {
  775|  4.34k|        extlang_end = language_end;
  776|  4.34k|    }
  777|  5.44k|    if script_end < extlang_end {
  778|  4.45k|        script_end = extlang_end;
  779|  4.45k|    }
  780|  5.44k|    if region_end < script_end {
  781|  3.08k|        region_end = script_end;
  782|  3.08k|    }
  783|  5.44k|    if variant_end < region_end {
  784|  4.88k|        variant_end = region_end;
  785|  4.88k|    }
  786|  5.44k|    if extension_end < variant_end {
  787|  5.19k|        extension_end = variant_end;
  788|  5.19k|    }
  789|       |
  790|  5.44k|    Ok(TagElementsPositions {
  791|  5.44k|        language_end,
  792|  5.44k|        extlang_end,
  793|  5.44k|        script_end,
  794|  5.44k|        region_end,
  795|  5.44k|        variant_end,
  796|  5.44k|        extension_end,
  797|  5.44k|    })
  798|  5.50k|}
_RNvMCsjWNxXJLxh05_10oxilangtagINtB2_11LanguageTagNtNtCs4XkmH8cVWyK_5alloc6string6StringE10into_innerCskGrqaZ7ysJS_5oxrdf:
   54|  5.89k|    pub fn into_inner(self) -> T {
   55|  5.89k|        self.tag
   56|  5.89k|    }
_RNCINvCsjWNxXJLxh05_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CskGrqaZ7ysJS_5oxrdf:
  583|   154k|        .find(|record| record.eq_ignore_ascii_case(input))
_RINvCsjWNxXJLxh05_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECskGrqaZ7ysJS_5oxrdf:
  581|  5.95k|    if let Some(tag) = GRANDFATHEREDS
  582|  5.95k|        .iter()
  583|  5.95k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  5.95k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    447|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    447|        } else if input.len() == 2 {
  601|      1|            Err(LanguageTagParseError {
  602|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      1|            })
  604|       |        } else {
  605|    446|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    446|            Ok(TagElementsPositions {
  607|    446|                language_end: input.len(),
  608|    446|                extlang_end: input.len(),
  609|    446|                script_end: input.len(),
  610|    446|                region_end: input.len(),
  611|    446|                variant_end: input.len(),
  612|    446|                extension_end: input.len(),
  613|    446|            })
  614|       |        }
  615|       |    } else {
  616|  5.50k|        parse_langtag(input, output)
  617|       |    }
  618|  5.95k|}
_RNvCsjWNxXJLxh05_10oxilangtag23is_alphanumeric_or_dashCskGrqaZ7ysJS_5oxrdf:
  875|    447|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    447|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    447|}
_RNvMsv_CsjWNxXJLxh05_10oxilangtagNtB5_14SubTagIterator3newCskGrqaZ7ysJS_5oxrdf:
  839|  5.50k|    fn new(input: &'a str) -> Self {
  840|  5.50k|        Self {
  841|  5.50k|            split: input.split('-'),
  842|  5.50k|            position: 0,
  843|  5.50k|        }
  844|  5.50k|    }
_RNvXsw_CsjWNxXJLxh05_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCskzdpTR3bRvG_4core4iter6traits8iterator8Iterator4nextCskGrqaZ7ysJS_5oxrdf:
  851|  21.2k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  21.2k|        let tag = self.split.next()?;
  853|  15.8k|        let tag_end = self.position + tag.len();
  854|  15.8k|        self.position = tag_end + 1;
  855|  15.8k|        Some((tag, tag_end))
  856|  21.2k|    }
_RNvCsjWNxXJLxh05_10oxilangtag12to_lowercaseCskGrqaZ7ysJS_5oxrdf:
  892|  11.4k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  11.4k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  11.4k|}
_RNvXsE_CsjWNxXJLxh05_10oxilangtagNtB5_16VoidOutputBufferNtNtCskzdpTR3bRvG_4core7default7Default7defaultCskGrqaZ7ysJS_5oxrdf:
  547|  5.95k|#[derive(Default)]
_RNvCsjWNxXJLxh05_10oxilangtag10is_numericCskGrqaZ7ysJS_5oxrdf:
  865|      4|fn is_numeric(s: &str) -> bool {
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
  867|      4|}
_RNvCsjWNxXJLxh05_10oxilangtag12to_uppercaseCskGrqaZ7ysJS_5oxrdf:
  880|  2.36k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  2.36k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  2.36k|}
_RNvXs_NvCsjWNxXJLxh05_10oxilangtag13parse_langtagNtB4_5StateNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCskGrqaZ7ysJS_5oxrdf:
  625|  45.9k|    #[derive(PartialEq, Eq)]
_RNvCsjWNxXJLxh05_10oxilangtag15is_alphanumericCskGrqaZ7ysJS_5oxrdf:
  870|  4.64k|fn is_alphanumeric(s: &str) -> bool {
  871|  4.64k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  4.64k|}
_RNvCsjWNxXJLxh05_10oxilangtag18to_uppercase_firstCskGrqaZ7ysJS_5oxrdf:
  886|    997|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    997|    let mut chars = s.chars();
  888|    997|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    997|}
_RNvXsq_CsjWNxXJLxh05_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCskGrqaZ7ysJS_5oxrdf:
  552|  11.2k|    fn push(&mut self, _: char) {}
_RNvCsjWNxXJLxh05_10oxilangtag13is_alphabeticCskGrqaZ7ysJS_5oxrdf:
  860|  12.6k|fn is_alphabetic(s: &str) -> bool {
  861|  12.6k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  12.6k|}
_RNCNvCsjWNxXJLxh05_10oxilangtag10is_numeric0B3_:
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsjWNxXJLxh05_10oxilangtag15is_alphanumeric0B3_:
  871|  18.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsjWNxXJLxh05_10oxilangtag13is_alphabetic0B3_:
  861|  36.7k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsjWNxXJLxh05_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  5.91k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMCs7Pkhq0IqIgZ_5oxiriINtB2_6IriRefNtNtCs4XkmH8cVWyK_5alloc6string6StringE10into_innerCskGrqaZ7ysJS_5oxrdf:
  132|  13.8k|    pub fn into_inner(self) -> T {
  133|  13.8k|        self.iri
  134|  13.8k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCskGrqaZ7ysJS_5oxrdf:
 1344|  12.4k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  60.8k|        loop {
 1346|  60.8k|            let c = self.input.next();
 1347|  60.8k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  15.6k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  15.6k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  15.6k|                    } else if c == Some('/') {
 1357|  3.25k|                        self.output.push('/');
 1358|  12.3k|                    }
 1359|       |
 1360|  15.6k|                    if c == Some('?') {
 1361|    364|                        self.output_positions.path_end = self.output.len();
 1362|    364|                        self.output.push('?');
 1363|    364|                        return self.parse_query();
 1364|  15.2k|                    } else if c == Some('#') {
 1365|  2.52k|                        self.output_positions.path_end = self.output.len();
 1366|  2.52k|                        self.output_positions.query_end = self.output.len();
 1367|  2.52k|                        self.output.push('#');
 1368|  2.52k|                        return self.parse_fragment();
 1369|  12.7k|                    } else if c == None {
 1370|  9.49k|                        self.output_positions.path_end = self.output.len();
 1371|  9.49k|                        self.output_positions.query_end = self.output.len();
 1372|  9.49k|                        return Ok(());
 1373|  3.25k|                    }
 1374|       |                }
 1375|  45.1k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  12.4k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCskGrqaZ7ysJS_5oxrdf:
 1434|  2.53k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  2.53k|        let c1 = self.input.next();
 1436|  2.53k|        let c2 = self.input.next();
 1437|  2.53k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  2.52k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  2.51k|            self.output.push('%');
 1441|  2.51k|            self.output.push(c1.unwrap());
 1442|  2.51k|            self.output.push(c2.unwrap());
 1443|  2.51k|            Ok(())
 1444|       |        } else {
 1445|     20|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|     20|                Some('%'),
 1447|     20|                c1,
 1448|     20|                c2,
 1449|     20|            ]))
 1450|       |        }
 1451|  2.53k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCskGrqaZ7ysJS_5oxrdf:
 1153|    517|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|    517|            self.output_positions.scheme_end = 0;
 1201|    517|            self.input_scheme_end = 0;
 1202|    517|            if self.input.starts_with('/') {
 1203|    160|                self.input.next();
 1204|    160|                self.output.push('/');
 1205|    160|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|    357|                self.output_positions.authority_end = 0;
 1208|    357|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|    517|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCskGrqaZ7ysJS_5oxrdf:
 1076|  14.3k|    fn parse(
 1077|  14.3k|        iri: &'a str,
 1078|  14.3k|        base: Option<IriRef<&'a str>>,
 1079|  14.3k|        output: &'a mut O,
 1080|  14.3k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  14.3k|        let mut parser = Self {
 1082|  14.3k|            iri,
 1083|  14.3k|            base,
 1084|  14.3k|            input: ParserInput {
 1085|  14.3k|                value: iri.chars(),
 1086|  14.3k|                position: 0,
 1087|  14.3k|            },
 1088|  14.3k|            output,
 1089|  14.3k|            output_positions: IriElementsPositions {
 1090|  14.3k|                scheme_end: 0,
 1091|  14.3k|                authority_end: 0,
 1092|  14.3k|                path_end: 0,
 1093|  14.3k|                query_end: 0,
 1094|  14.3k|            },
 1095|  14.3k|            input_scheme_end: 0,
 1096|  14.3k|        };
 1097|  14.3k|        parser.parse_scheme_start()?;
 1098|  14.2k|        Ok(parser.output_positions)
 1099|  14.3k|    }
_RNvMsp_Cs7Pkhq0IqIgZ_5oxiriINtB5_3IriNtNtCs4XkmH8cVWyK_5alloc6string6StringE5parseCskGrqaZ7ysJS_5oxrdf:
  502|  14.3k|        IriRef::parse(iri)?.try_into()
  503|  14.3k|    }
_RNvMCs7Pkhq0IqIgZ_5oxiriINtB2_6IriRefNtNtCs4XkmH8cVWyK_5alloc6string6StringE5parseCskGrqaZ7ysJS_5oxrdf:
   55|  14.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  14.3k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  14.2k|        Ok(Self { iri, positions })
   58|  14.3k|    }
_RNvMCs7Pkhq0IqIgZ_5oxiriINtB2_6IriRefNtNtCs4XkmH8cVWyK_5alloc6string6StringE11is_absoluteCskGrqaZ7ysJS_5oxrdf:
  146|  14.2k|    pub fn is_absolute(&self) -> bool {
  147|  14.2k|        self.positions.scheme_end != 0
  148|  14.2k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCskGrqaZ7ysJS_5oxrdf:
 1102|  14.3k|        match self.input.front() {
 1103|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  14.3k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|    459|            _ => self.parse_relative(),
 1106|       |        }
 1107|  14.3k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCskGrqaZ7ysJS_5oxrdf:
 1255|  4.67k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  4.67k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|     42|            let start_position = self.input.position;
 1259|  1.43k|            while let Some(c) = self.input.next() {
 1260|  1.39k|                self.output.push(c);
 1261|  1.39k|                if c == ']' {
 1262|      2|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      2|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      2|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  1.39k|                }
 1280|       |            }
 1281|     40|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  37.6k|            loop {
 1285|  37.6k|                let c = self.input.next();
 1286|  37.6k|                match c {
 1287|       |                    Some(':') => {
 1288|  1.33k|                        self.output.push(':');
 1289|  1.33k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  3.29k|                        self.output_positions.authority_end = self.output.len();
 1293|  3.29k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  33.0k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  4.67k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCskGrqaZ7ysJS_5oxrdf:
 1141|  4.97k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  4.97k|        if self.input.starts_with('/') {
 1143|  4.67k|            self.input.next();
 1144|  4.67k|            self.output.push('/');
 1145|  4.67k|            self.parse_authority()
 1146|       |        } else {
 1147|    300|            self.output_positions.authority_end = self.output.len() - 1;
 1148|    300|            self.parse_path()
 1149|       |        }
 1150|  4.97k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCskGrqaZ7ysJS_5oxrdf:
 1315|  4.61k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  4.61k|        match c {
 1317|       |            None => {
 1318|  1.47k|                self.output_positions.path_end = self.output.len();
 1319|  1.47k|                self.output_positions.query_end = self.output.len();
 1320|  1.47k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    153|                self.output_positions.path_end = self.output.len();
 1324|    153|                self.output.push('?');
 1325|    153|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    224|                self.output_positions.path_end = self.output.len();
 1329|    224|                self.output_positions.query_end = self.output.len();
 1330|    224|                self.output.push('#');
 1331|    224|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  2.76k|                self.output.push('/');
 1335|  2.76k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  4.61k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCskGrqaZ7ysJS_5oxrdf:
 1422|  4.66k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  4.66k|        if c == '%' {
 1424|    228|            self.read_echar()
 1425|  4.43k|        } else if is_url_query_code_point(c) {
 1426|  4.42k|            self.output.push(c);
 1427|  4.42k|            Ok(())
 1428|       |        } else {
 1429|     11|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  4.66k|    }
_RNvXsV_Cs7Pkhq0IqIgZ_5oxiriINtB5_3IriNtNtCs4XkmH8cVWyK_5alloc6string6StringEINtNtCskzdpTR3bRvG_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCskGrqaZ7ysJS_5oxrdf:
  871|  14.2k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  14.2k|        if iri.is_absolute() {
  873|  13.8k|            Ok(Self(iri))
  874|       |        } else {
  875|    396|            Err(IriParseError {
  876|    396|                kind: IriParseErrorKind::NoScheme,
  877|    396|            })
  878|       |        }
  879|  14.2k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCskGrqaZ7ysJS_5oxrdf:
 1380|    517|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  5.16k|        while let Some(c) = self.input.next() {
 1382|  4.75k|            if c == '#' {
 1383|     93|                self.output_positions.query_end = self.output.len();
 1384|     93|                self.output.push('#');
 1385|     93|                return self.parse_fragment();
 1386|       |            } else {
 1387|  4.66k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    411|        self.output_positions.query_end = self.output.len();
 1391|    411|        Ok(())
 1392|    517|    }
_RNvMsp_Cs7Pkhq0IqIgZ_5oxiriINtB5_3IriNtNtCs4XkmH8cVWyK_5alloc6string6StringE10into_innerCskGrqaZ7ysJS_5oxrdf:
  568|  13.8k|    pub fn into_inner(self) -> T {
  569|  13.8k|        self.0.into_inner()
  570|  13.8k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCskGrqaZ7ysJS_5oxrdf:
 1231|  4.67k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  42.2k|        loop {
 1234|  42.2k|            let c = self.input.next();
 1235|  42.2k|            match c {
 1236|       |                Some('@') => {
 1237|    663|                    self.output.push('@');
 1238|    663|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  4.01k|                    self.input = ParserInput {
 1242|  4.01k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  4.01k|                        position: self.input_scheme_end + 2,
 1244|  4.01k|                    };
 1245|  4.01k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  4.01k|                    return self.parse_host();
 1247|       |                }
 1248|  37.5k|                Some(c) => {
 1249|  37.5k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  4.67k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCskGrqaZ7ysJS_5oxrdf:
 1394|  2.84k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  24.5k|        while let Some(c) = self.input.next() {
 1396|  21.7k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  2.82k|        Ok(())
 1399|  2.84k|    }
_RNCNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CskGrqaZ7ysJS_5oxrdf:
 1438|  2.51k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCskGrqaZ7ysJS_5oxrdf:
 1109|  13.8k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  43.9k|        loop {
 1111|  43.9k|            let c = self.input.next();
 1112|  43.9k|            match c {
 1113|  43.9k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  30.0k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  13.8k|                    self.output.push(':');
 1118|  13.8k|                    self.output_positions.scheme_end = self.output.len();
 1119|  13.8k|                    self.input_scheme_end = self.input.position;
 1120|  13.8k|                    return if self.input.starts_with('/') {
 1121|  4.81k|                        self.input.next();
 1122|  4.81k|                        self.output.push('/');
 1123|  4.81k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  8.99k|                        self.output_positions.authority_end = self.output.len();
 1126|  8.99k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|     58|                    self.input = ParserInput {
 1131|     58|                        value: self.iri.chars(),
 1132|     58|                        position: 0,
 1133|     58|                    }; // reset
 1134|     58|                    self.output.clear();
 1135|     58|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  13.8k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCskGrqaZ7ysJS_5oxrdf:
 1301|  1.33k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  2.09k|        loop {
 1303|  2.09k|            let c = self.input.next();
 1304|  1.24k|            match c {
 1305|  1.24k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  1.31k|                    self.output_positions.authority_end = self.output.len();
 1308|  1.31k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     17|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  1.33k|    }
_RNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCskGrqaZ7ysJS_5oxrdf:
 1410|   137k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|   137k|        if c == '%' {
 1412|  2.30k|            self.read_echar()
 1413|   135k|        } else if is_url_code_point(c) {
 1414|   135k|            self.output.push(c);
 1415|   135k|            Ok(())
 1416|       |        } else {
 1417|     36|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|   137k|    }
_RNCNvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CskGrqaZ7ysJS_5oxrdf:
 1437|  2.52k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RINvMs11_Cs7Pkhq0IqIgZ_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECskGrqaZ7ysJS_5oxrdf:
 1454|    127|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|    127|        Err(IriParseError { kind })
 1456|    127|    }
_RNvXsY_Cs7Pkhq0IqIgZ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCskGrqaZ7ysJS_5oxrdf:
  985|     58|    fn clear(&mut self) {
  986|     58|        self.len = 0;
  987|     58|    }
_RNvMs10_Cs7Pkhq0IqIgZ_5oxiriNtB6_11ParserInput4nextCskGrqaZ7ysJS_5oxrdf:
 1044|   232k|        if let Some(head) = self.value.next() {
 1045|   217k|            self.position += head.len_utf8();
 1046|   217k|            Some(head)
 1047|       |        } else {
 1048|  15.1k|            None
 1049|       |        }
 1050|   232k|    }
_RNvXs1b_Cs7Pkhq0IqIgZ_5oxiriNtB6_16VoidOutputBufferNtNtCskzdpTR3bRvG_4core7default7Default7defaultCskGrqaZ7ysJS_5oxrdf:
  968|  14.3k|#[derive(Default)]
_RNvMs10_Cs7Pkhq0IqIgZ_5oxiriNtB6_11ParserInput5frontCskGrqaZ7ysJS_5oxrdf:
 1053|  14.3k|    fn front(&self) -> Option<char> {
 1054|  14.3k|        self.value.clone().next()
 1055|  14.3k|    }
_RNvXsY_Cs7Pkhq0IqIgZ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCskGrqaZ7ysJS_5oxrdf:
  995|  56.1k|    fn len(&self) -> usize {
  996|  56.1k|        self.len
  997|  56.1k|    }
_RNvMs10_Cs7Pkhq0IqIgZ_5oxiriNtB6_11ParserInput11starts_withCskGrqaZ7ysJS_5oxrdf:
 1058|  23.9k|    fn starts_with(&self, c: char) -> bool {
 1059|  23.9k|        self.value.as_str().starts_with(c)
 1060|  23.9k|    }
_RNvXsY_Cs7Pkhq0IqIgZ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCskGrqaZ7ysJS_5oxrdf:
 1000|  31.2k|    fn as_str(&self) -> &str {
 1001|  31.2k|        ""
 1002|  31.2k|    }
_RNvXsY_Cs7Pkhq0IqIgZ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCskGrqaZ7ysJS_5oxrdf:
  975|   214k|    fn push(&mut self, c: char) {
  976|   214k|        self.len += c.len_utf8();
  977|   214k|    }
_RNvXsY_Cs7Pkhq0IqIgZ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCskGrqaZ7ysJS_5oxrdf:
  990|  4.01k|    fn truncate(&mut self, new_len: usize) {
  991|  4.01k|        self.len = new_len;
  992|  4.01k|    }
_RNvCs7Pkhq0IqIgZ_5oxiri17is_url_code_point:
 1459|   139k|fn is_url_code_point(c: char) -> bool {
 1460|   139k|    matches!(c,
 1461|  74.0k|        'a'..='z'
 1462|  17.7k|        | 'A'..='Z'
 1463|  39.6k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  3.48k|        | '\u{A0}'..='\u{D7FF}'
 1484|    654|        | '\u{F900}'..='\u{FDCF}'
 1485|    652|        | '\u{FDF0}'..='\u{FFEF}'
 1486|    652|        | '\u{10000}'..='\u{1FFFD}'
 1487|    652|        | '\u{20000}'..='\u{2FFFD}'
 1488|    652|        | '\u{30000}'..='\u{3FFFD}'
 1489|    652|        | '\u{40000}'..='\u{4FFFD}'
 1490|    650|        | '\u{50000}'..='\u{5FFFD}'
 1491|    650|        | '\u{60000}'..='\u{6FFFD}'
 1492|    650|        | '\u{70000}'..='\u{7FFFD}'
 1493|    650|        | '\u{80000}'..='\u{8FFFD}'
 1494|    649|        | '\u{90000}'..='\u{9FFFD}'
 1495|    649|        | '\u{A0000}'..='\u{AFFFD}'
 1496|    649|        | '\u{B0000}'..='\u{BFFFD}'
 1497|    649|        | '\u{C0000}'..='\u{CFFFD}'
 1498|     79|        | '\u{D0000}'..='\u{DFFFD}'
 1499|     72|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|   139k|}
_RNvCs7Pkhq0IqIgZ_5oxiri23is_url_query_code_point:
 1503|  4.43k|fn is_url_query_code_point(c: char) -> bool {
 1504|  4.43k|    is_url_code_point(c)
 1505|     84|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  4.43k|}

_RNvNtCshXB2kc3dftb_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  2.77k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  2.77k|    let parser = QueryResultsParser::from_format(format);
    8|  2.77k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  2.77k|    let Ok(reader) = parser.read_results(data) else {
   11|    176|        return;
   12|       |    };
   13|  2.59k|    match reader {
   14|  2.59k|        QueryResultsReader::Solutions(solutions) => {
   15|  2.59k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|  1.28k|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|  1.30k|            let mut writer = serializer
   21|  1.30k|                .solutions_writer(
   22|  1.30k|                    Vec::new(),
   23|  1.30k|                    solutions
   24|  1.30k|                        .get(0)
   25|  1.30k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|  1.30k|                )
   27|  1.30k|                .unwrap();
   28|  38.0k|            for solution in &solutions {
   29|  36.7k|                writer.write(solution).unwrap();
   30|  36.7k|            }
   31|  1.30k|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|  1.30k|            if let QueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|  1.30k|                .read_results(serialized.as_bytes())
   36|  1.30k|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|  1.30k|                .unwrap()
   38|       |            {
   39|  1.30k|                assert_eq!(
   40|  1.30k|                    roundtrip_solutions
   41|  1.30k|                        .collect::<Result<Vec<_>, _>>()
   42|  1.30k|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|  1.30k|                        .unwrap(),
   44|  1.30k|                    solutions
   45|  1.30k|                )
   46|      0|            }
   47|       |        }
   48|      3|        QueryResultsReader::Boolean(value) => {
   49|      3|            // We try to write again
   50|      3|            let mut serialized = Vec::new();
   51|      3|            serializer
   52|      3|                .write_boolean_result(&mut serialized, value)
   53|      3|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      3|            if let QueryResultsReader::Boolean(roundtrip_value) =
   57|      3|                parser.read_results(serialized.as_slice()).unwrap()
   58|       |            {
   59|      3|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  2.77k|}
_RNCNvNtCshXB2kc3dftb_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|  1.24k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMs1_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCshXB2kc3dftb_13oxigraph_fuzz:
  176|  6.15k|    pub fn as_str(self) -> &'a str {
  177|  6.15k|        match self.0 {
  178|  2.23k|            BlankNodeRefContent::Named(id) => id,
  179|  3.92k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  6.15k|    }
_RNvMs7_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB5_5IdStr6as_strCshXB2kc3dftb_13oxigraph_fuzz:
  259|  3.92k|    fn as_str(&self) -> &str {
  260|  3.92k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  261|  3.92k|        str::from_utf8(&self.0[..len]).unwrap()
  262|  3.92k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCshXB2kc3dftb_13oxigraph_fuzz:
   92|  6.15k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  6.15k|        BlankNodeRef(match &self.0 {
   94|  2.23k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  3.92k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  3.92k|                id: *id,
   97|  3.92k|                str: str.as_str(),
   98|  3.92k|            },
   99|       |        })
  100|  6.15k|    }
_RNvXsd_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
   24|  12.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB5_5IdStrNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
  247|  7.84k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsi_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
   27|  12.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs4XkmH8cVWyK_5alloc6string6StringEB5_:
   53|  12.5k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  12.5k|        let id = id.into();
   55|  12.5k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  7.92k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  4.63k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  12.5k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   40|  12.6k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   41|  12.6k|        let id = id.into();
   42|  12.6k|        validate_blank_node_identifier(&id)?;
   43|  12.5k|        Ok(Self::new_unchecked(id))
   44|  12.6k|    }
_RNCNvMs7_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  260|  56.3k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  7.92k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  7.92k|        Self(BlankNodeContent::Anonymous {
   68|  7.92k|            id,
   69|  7.92k|            str: IdStr::new(id),
   70|  7.92k|        })
   71|  7.92k|    }
_RNvMs7_NtCskGrqaZ7ysJS_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  252|  7.92k|    fn new(id: u128) -> Self {
  253|  7.92k|        let mut str = [0; 32];
  254|  7.92k|        write!(&mut str[..], "{id:x}").unwrap();
  255|  7.92k|        Self(str)
  256|  7.92k|    }
_RNvNtCskGrqaZ7ysJS_5oxrdf10blank_node30validate_blank_node_identifier:
  265|  12.6k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  266|  12.6k|    let mut chars = id.chars();
  267|  12.6k|    let front = chars.next().ok_or(BlankNodeIdParseError {})?;
  268|  12.5k|    match front {
  269|  12.5k|        '0'..='9'
  270|       |        | '_'
  271|       |        | ':'
  272|  2.13k|        | 'A'..='Z'
  273|  1.82k|        | 'a'..='z'
  274|    641|        | '\u{00C0}'..='\u{00D6}'
  275|    641|        | '\u{00D8}'..='\u{00F6}'
  276|    641|        | '\u{00F8}'..='\u{02FF}'
  277|    572|        | '\u{0370}'..='\u{037D}'
  278|    572|        | '\u{037F}'..='\u{1FFF}'
  279|    558|        | '\u{200C}'..='\u{200D}'
  280|    558|        | '\u{2070}'..='\u{218F}'
  281|    546|        | '\u{2C00}'..='\u{2FEF}'
  282|    546|        | '\u{3001}'..='\u{D7FF}'
  283|    430|        | '\u{F900}'..='\u{FDCF}'
  284|    430|        | '\u{FDF0}'..='\u{FFFD}'
  285|  12.5k|        | '\u{10000}'..='\u{EFFFF}' => (),
  286|      4|        _ => return Err(BlankNodeIdParseError {}),
  287|       |    }
  288|   144k|    for c in chars {
  289|   132k|        match c {
  290|       |            '.' // validated later
  291|       |            | '-'
  292|   127k|            | '0'..='9'
  293|       |            | '\u{00B7}'
  294|  1.68k|            | '\u{0300}'..='\u{036F}'
  295|  1.30k|            | '\u{203F}'..='\u{2040}'
  296|       |            | '_'
  297|       |            | ':'
  298|  20.0k|            | 'A'..='Z'
  299|  10.2k|            | 'a'..='z'
  300|  1.69k|            | '\u{00C0}'..='\u{00D6}'
  301|  1.69k|            | '\u{00D8}'..='\u{00F6}'
  302|  1.69k|            | '\u{00F8}'..='\u{02FF}'
  303|  1.68k|            | '\u{0370}'..='\u{037D}'
  304|  1.68k|            | '\u{037F}'..='\u{1FFF}'
  305|  1.30k|            | '\u{200C}'..='\u{200D}'
  306|  1.30k|            | '\u{2070}'..='\u{218F}'
  307|  1.24k|            | '\u{2C00}'..='\u{2FEF}'
  308|  1.24k|            | '\u{3001}'..='\u{D7FF}'
  309|  1.07k|            | '\u{F900}'..='\u{FDCF}'
  310|  1.07k|            | '\u{FDF0}'..='\u{FFFD}'
  311|   132k|            | '\u{10000}'..='\u{EFFFF}' => (),
  312|      8|            _ => return Err(BlankNodeIdParseError {}),
  313|       |        }
  314|       |    }
  315|       |
  316|       |    // Could not end with a dot
  317|  12.5k|    if id.ends_with('.') {
  318|      5|        Err(BlankNodeIdParseError {})
  319|       |    } else {
  320|  12.5k|        Ok(())
  321|       |    }
  322|  12.6k|}
_RNvNtCskGrqaZ7ysJS_5oxrdf10blank_node13to_integer_idB3_:
  325|  12.5k|fn to_integer_id(id: &str) -> Option<u128> {
  326|  12.5k|    let digits = id.as_bytes();
  327|  12.5k|    let mut value: u128 = 0;
  328|  12.5k|    if let None | Some(b'0') = digits.first() {
  329|  1.09k|        return None; // No empty string or leading zeros
  330|  11.4k|    }
  331|   126k|    for digit in digits {
  332|   118k|        value = value.checked_mul(16)?.checked_add(
  333|   118k|            match *digit {
  334|   118k|                b'0'..=b'9' => digit - b'0',
  335|  8.89k|                b'a'..=b'f' => digit - b'a' + 10,
  336|  3.34k|                _ => return None,
  337|       |            }
  338|   115k|            .into(),
  339|      0|        )?;
  340|       |    }
  341|  7.92k|    Some(value)
  342|  12.5k|}

_RNvMst_NtCskGrqaZ7ysJS_5oxrdf7literalNtB5_10LiteralRef5valueCshXB2kc3dftb_13oxigraph_fuzz:
  491|  14.5k|    pub fn value(self) -> &'a str {
  492|  14.5k|        match self.0 {
  493|    551|            LiteralRefContent::String(value)
  494|  2.53k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  14.5k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  14.5k|        }
  497|  14.5k|    }
_RNvMst_NtCskGrqaZ7ysJS_5oxrdf7literalNtB5_10LiteralRef8languageCshXB2kc3dftb_13oxigraph_fuzz:
  504|  14.5k|    pub fn language(self) -> Option<&'a str> {
  505|  14.5k|        match self.0 {
  506|  2.53k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  12.0k|            _ => None,
  508|       |        }
  509|  14.5k|    }
_RNvMst_NtCskGrqaZ7ysJS_5oxrdf7literalNtB5_10LiteralRef8datatypeCshXB2kc3dftb_13oxigraph_fuzz:
  516|  12.0k|    pub fn datatype(self) -> NamedNodeRef<'a> {
  517|  12.0k|        match self.0 {
  518|    551|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  11.4k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  12.0k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf7literalNtB2_7Literal6as_refCshXB2kc3dftb_13oxigraph_fuzz:
  132|  14.5k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  14.5k|        LiteralRef(match &self.0 {
  134|    551|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|  2.53k|            LiteralContent::LanguageTaggedString { value, language } => {
  136|  2.53k|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  11.4k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  11.4k|                value,
  140|  11.4k|                datatype: datatype.as_ref(),
  141|  11.4k|            },
  142|       |        })
  143|  14.5k|    }
_RNvXsD_NtCskGrqaZ7ysJS_5oxrdf7literalNtB5_7LiteralNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
   37|  29.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCskGrqaZ7ysJS_5oxrdf7literalNtB5_14LiteralContentNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
   40|  29.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCskGrqaZ7ysJS_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs4XkmH8cVWyK_5alloc6string6StringEB5_:
   50|  1.12k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  1.12k|        Self(LiteralContent::String(value.into()))
   52|  1.12k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs4XkmH8cVWyK_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   56|  2.49k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  2.49k|        let value = value.into();
   58|  2.49k|        let datatype = datatype.into();
   59|  2.49k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  2.49k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  2.49k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs4XkmH8cVWyK_5alloc6string6StringReEB5_:
   68|  5.95k|    pub fn new_language_tagged_literal(
   69|  5.95k|        value: impl Into<String>,
   70|  5.95k|        language: impl Into<String>,
   71|  5.95k|    ) -> Result<Self, LanguageTagParseError> {
   72|  5.95k|        let mut language = language.into();
   73|  5.95k|        language.make_ascii_lowercase();
   74|  5.95k|        Ok(Self::new_language_tagged_literal_unchecked(
   75|  5.95k|            value,
   76|  5.95k|            LanguageTag::parse(language)?.into_inner(),
   77|       |        ))
   78|  5.95k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  21.9k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  21.9k|        let value = value.into();
   58|  21.9k|        let datatype = datatype.into();
   59|  21.9k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  21.9k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  21.9k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs4XkmH8cVWyK_5alloc6string6StringB1n_EB5_:
   88|  5.89k|    pub fn new_language_tagged_literal_unchecked(
   89|  5.89k|        value: impl Into<String>,
   90|  5.89k|        language: impl Into<String>,
   91|  5.89k|    ) -> Self {
   92|  5.89k|        Self(LiteralContent::LanguageTaggedString {
   93|  5.89k|            value: value.into(),
   94|  5.89k|            language: language.into(),
   95|  5.89k|        })
   96|  5.89k|    }

_RNvMs4_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCshXB2kc3dftb_13oxigraph_fuzz:
  128|  16.1k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  16.1k|        Self { iri }
  130|  16.1k|    }
_RNvMs4_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCshXB2kc3dftb_13oxigraph_fuzz:
  133|  7.16k|    pub const fn as_str(self) -> &'a str {
  134|  7.16k|        self.iri
  135|  7.16k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB2_9NamedNode6as_refCshXB2kc3dftb_13oxigraph_fuzz:
   54|  16.1k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  16.1k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  16.1k|    }
_RNvXsj_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
   17|  32.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  21.9k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  21.9k|        Self { iri: iri.into() }
   41|  21.9k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  14.3k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  14.3k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  14.3k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs4XkmH8cVWyK_5alloc6string6StringEB5_:
   39|  13.8k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  13.8k|        Self { iri: iri.into() }
   41|  13.8k|    }
_RNvMs4_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  24.4k|    pub const fn as_str(self) -> &'a str {
  134|  24.4k|        self.iri
  135|  24.4k|    }
_RNvXs9_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCskzdpTR3bRvG_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  24.4k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  24.4k|        self.as_str() == other.as_str()
  175|  24.4k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  13.8k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  13.8k|        Self::new_unchecked(iri.into_inner())
   31|  13.8k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  24.4k|    pub fn as_str(&self) -> &str {
   45|  24.4k|        self.iri.as_str()
   46|  24.4k|    }
_RNvXs6_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCskzdpTR3bRvG_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  21.9k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  21.9k|        node.into_owned()
  154|  21.9k|    }
_RNvMs4_NtCskGrqaZ7ysJS_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  21.9k|    pub fn into_owned(self) -> NamedNode {
  139|  21.9k|        NamedNode::new_unchecked(self.iri)
  140|  21.9k|    }

_RNvXs3_NtCskGrqaZ7ysJS_5oxrdf6parserNtB5_14TermParseErrorNtNtCskzdpTR3bRvG_4core3fmt7Display3fmtCshXB2kc3dftb_13oxigraph_fuzz:
  414|    115|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  415|    115|        match &self.kind {
  416|      0|            TermParseErrorKind::Iri { error, value } => {
  417|      0|                write!(f, "Error while parsing the named node '{value}': {error}")
  418|       |            }
  419|      0|            TermParseErrorKind::BlankNode { error, value } => {
  420|      0|                write!(f, "Error while parsing the blank node '{value}': {error}")
  421|       |            }
  422|      0|            TermParseErrorKind::LanguageTag { error, value } => {
  423|      0|                write!(f, "Error while parsing the language tag '{value}': {error}")
  424|       |            }
  425|     16|            TermParseErrorKind::Variable { error, value } => {
  426|     16|                write!(f, "Error while parsing the variable '{value}': {error}")
  427|       |            }
  428|     99|            TermParseErrorKind::Msg { msg } => f.write_str(msg),
  429|       |        }
  430|    115|    }
_RNvNtCskGrqaZ7ysJS_5oxrdf6parser12read_literal:
  184|  31.8k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  185|  31.8k|    let s = s.trim();
  186|  31.8k|    if let Some(s) = s.strip_prefix('"') {
  187|  9.68k|        let mut value = String::with_capacity(s.len());
  188|  9.68k|        let mut chars = s.chars();
  189|  76.0k|        while let Some(c) = chars.next() {
  190|  75.9k|            match c {
  191|       |                '"' => {
  192|  9.56k|                    let remain = chars.as_str();
  193|  9.56k|                    return if let Some(remain) = remain.strip_prefix('@') {
  194|  5.95k|                        let end = remain
  195|  5.95k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  196|  5.95k|                            .unwrap_or(remain.len());
  197|  5.95k|                        let (language, remain) = remain.split_at(end);
  198|  5.95k|                        Ok((
  199|  5.95k|                            Literal::new_language_tagged_literal(value, language).map_err(
  200|  5.95k|                                |error| TermParseError {
  201|       |                                    kind: TermParseErrorKind::LanguageTag {
  202|       |                                        value: language.to_owned(),
  203|       |                                        error,
  204|       |                                    },
  205|  5.95k|                                },
  206|  5.95k|                            )?,
  207|  5.89k|                            remain,
  208|       |                        ))
  209|  3.61k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  210|  2.49k|                        let (datatype, remain) = read_named_node(remain)?;
  211|  2.49k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  212|       |                    } else {
  213|  1.12k|                        Ok((Literal::new_simple_literal(value), remain))
  214|       |                    };
  215|       |                }
  216|       |                '\\' => {
  217|  7.83k|                    if let Some(c) = chars.next() {
  218|  7.82k|                        value.push(match c {
  219|    791|                            't' => '\t',
  220|    233|                            'b' => '\u{8}',
  221|    701|                            'n' => '\n',
  222|    873|                            'r' => '\r',
  223|    195|                            'f' => '\u{C}',
  224|    635|                            '"' => '"',
  225|    194|                            '\'' => '\'',
  226|  3.18k|                            '\\' => '\\',
  227|    552|                            'u' => read_hexa_char(&mut chars, 4)?,
  228|    460|                            'U' => read_hexa_char(&mut chars, 8)?,
  229|      6|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  230|       |                        })
  231|       |                    } else {
  232|      1|                        return Err(TermParseError::msg("Unexpected literal end"));
  233|       |                    }
  234|       |                }
  235|  58.5k|                c => value.push(c),
  236|       |            }
  237|       |        }
  238|     79|        Err(TermParseError::msg("Unexpected literal end"))
  239|  22.1k|    } else if let Some(remain) = s.strip_prefix("true") {
  240|  1.29k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  241|  20.8k|    } else if let Some(remain) = s.strip_prefix("false") {
  242|    562|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  243|       |    } else {
  244|  20.2k|        let input = s.as_bytes();
  245|  20.2k|        if input.is_empty() {
  246|     47|            return Err(TermParseError::msg("Empty term serialization"));
  247|  20.2k|        }
  248|       |
  249|  20.2k|        let mut cursor = match input.first() {
  250|  1.19k|            Some(b'+' | b'-') => 1,
  251|  19.0k|            _ => 0,
  252|       |        };
  253|  20.2k|        let mut with_dot = false;
  254|  20.2k|
  255|  20.2k|        let mut count_before: usize = 0;
  256|   102k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  257|  81.9k|            count_before += 1;
  258|  81.9k|            cursor += 1;
  259|  81.9k|        }
  260|       |
  261|  20.2k|        let mut count_after: usize = 0;
  262|  20.2k|        if cursor < input.len() && input[cursor] == b'.' {
  263|  5.54k|            with_dot = true;
  264|  5.54k|            cursor += 1;
  265|  20.9k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  266|  15.4k|                count_after += 1;
  267|  15.4k|                cursor += 1;
  268|  15.4k|            }
  269|  14.6k|        }
  270|       |
  271|  20.2k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  272|  2.58k|            cursor += 1;
  273|  2.58k|            cursor += match input.get(cursor) {
  274|    116|                Some(b'+' | b'-') => 1,
  275|  2.46k|                _ => 0,
  276|       |            };
  277|  2.58k|            let mut count_exponent = 0;
  278|  13.9k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  279|  11.3k|                count_exponent += 1;
  280|  11.3k|                cursor += 1;
  281|  11.3k|            }
  282|  2.58k|            if count_exponent > 0 {
  283|  2.57k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  284|       |            } else {
  285|      8|                Err(TermParseError::msg(
  286|      8|                    "Double serialization with an invalid exponent",
  287|      8|                ))
  288|       |            }
  289|  17.6k|        } else if with_dot {
  290|  4.98k|            if count_after > 0 {
  291|  4.98k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  292|       |            } else {
  293|      2|                Err(TermParseError::msg(
  294|      2|                    "Decimal serialization without floating part",
  295|      2|                ))
  296|       |            }
  297|  12.6k|        } else if count_before > 0 {
  298|  12.5k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  299|       |        } else {
  300|     96|            Err(TermParseError::msg("Empty integer serialization"))
  301|       |        }
  302|       |    }
  303|  31.8k|}
_RNvNtCskGrqaZ7ysJS_5oxrdf6parser15read_blank_node:
  160|  12.6k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  161|  12.6k|    let s = s.trim();
  162|  12.6k|    if let Some(remain) = s.strip_prefix("_:") {
  163|  12.6k|        let end = remain
  164|  12.6k|            .find(|v: char| {
  165|       |                v.is_whitespace()
  166|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  167|  12.6k|            })
  168|  12.6k|            .unwrap_or(remain.len());
  169|  12.6k|        let (value, remain) = remain.split_at(end);
  170|  12.6k|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  171|       |            kind: TermParseErrorKind::BlankNode {
  172|       |                value: value.to_owned(),
  173|       |                error,
  174|       |            },
  175|  12.6k|        })?;
  176|  12.5k|        Ok((term, remain))
  177|       |    } else {
  178|      3|        Err(TermParseError::msg(
  179|      3|            "Blank node serialization should start with '_:'",
  180|      3|        ))
  181|       |    }
  182|  12.6k|}
_RNvNtCskGrqaZ7ysJS_5oxrdf6parser9read_term:
  305|  59.2k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  306|  59.2k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  307|      1|        return Err(TermParseError::msg(
  308|      1|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  309|      1|        ));
  310|  59.2k|    }
  311|  59.2k|    let s = s.trim();
  312|       |    #[allow(unused_variables)]
  313|  59.2k|    if let Some(remain) = s.strip_prefix("<<") {
  314|       |        #[cfg(feature = "rdf-star")]
  315|       |        {
  316|  8.85k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  317|  5.94k|            let (predicate, remain) = read_named_node(remain)?;
  318|  5.86k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  319|  5.16k|            let remain = remain.trim_start();
  320|  5.16k|            if let Some(remain) = remain.strip_prefix(">>") {
  321|       |                Ok((
  322|       |                    Triple {
  323|  5.11k|                        subject: match subject {
  324|  2.31k|                            Term::NamedNode(s) => s.into(),
  325|    661|                            Term::BlankNode(s) => s.into(),
  326|       |                            Term::Literal(_) => {
  327|      1|                                return Err(TermParseError::msg(
  328|      1|                                    "Literals are not allowed in subject position",
  329|      1|                                ))
  330|       |                            }
  331|  2.13k|                            Term::Triple(s) => Subject::Triple(s),
  332|       |                        },
  333|  5.10k|                        predicate,
  334|  5.10k|                        object,
  335|  5.10k|                    }
  336|  5.10k|                    .into(),
  337|  5.10k|                    remain,
  338|       |                ))
  339|       |            } else {
  340|     52|                Err(TermParseError::msg(
  341|     52|                    "Nested triple serialization should be enclosed between << and >>",
  342|     52|                ))
  343|       |            }
  344|       |        }
  345|       |        #[cfg(not(feature = "rdf-star"))]
  346|       |        {
  347|       |            Err(TermParseError::msg("RDF-star is not supported"))
  348|       |        }
  349|  50.4k|    } else if s.starts_with('<') {
  350|  5.99k|        let (term, remain) = read_named_node(s)?;
  351|  5.45k|        Ok((term.into(), remain))
  352|  44.4k|    } else if s.starts_with('_') {
  353|  12.6k|        let (term, remain) = read_blank_node(s)?;
  354|  12.5k|        Ok((term.into(), remain))
  355|       |    } else {
  356|  31.8k|        let (term, remain) = read_literal(s)?;
  357|  31.4k|        Ok((term.into(), remain))
  358|       |    }
  359|  59.2k|}
_RNvNtCskGrqaZ7ysJS_5oxrdf6parser14read_hexa_char:
  361|  1.01k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  362|  1.01k|    let mut value = 0;
  363|  1.01k|    for _ in 0..len {
  364|  5.72k|        if let Some(c) = input.next() {
  365|  5.69k|            value = value * 16
  366|  5.69k|                + match c {
  367|  5.69k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  368|    295|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  369|    788|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  370|       |                    _ => {
  371|     15|                        return Err(TermParseError::msg(
  372|     15|                            "Unexpected character in a unicode escape",
  373|     15|                        ))
  374|       |                    }
  375|       |                }
  376|       |        } else {
  377|     21|            return Err(TermParseError::msg("Unexpected literal string end"));
  378|       |        }
  379|       |    }
  380|    976|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  381|  1.01k|}
_RNvNtCskGrqaZ7ysJS_5oxrdf6parser15read_named_node:
  138|  14.4k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  139|  14.4k|    let s = s.trim();
  140|  14.4k|    if let Some(remain) = s.strip_prefix('<') {
  141|  14.3k|        let end = remain
  142|  14.3k|            .find('>')
  143|  14.3k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  144|  14.3k|        let (value, remain) = remain.split_at(end);
  145|  14.3k|        let remain = &remain[1..];
  146|  14.3k|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  147|       |            kind: TermParseErrorKind::Iri {
  148|       |                value: value.to_owned(),
  149|       |                error,
  150|       |            },
  151|  14.3k|        })?;
  152|  13.8k|        Ok((term, remain))
  153|       |    } else {
  154|     49|        Err(TermParseError::msg(
  155|     49|            "Named node serialization should start with a <",
  156|     49|        ))
  157|       |    }
  158|  14.4k|}
_RNvMs5_NtCskGrqaZ7ysJS_5oxrdf6parserNtB5_14TermParseError3msg:
  436|    608|    pub(crate) fn msg(msg: &'static str) -> Self {
  437|    608|        Self {
  438|    608|            kind: TermParseErrorKind::Msg { msg },
  439|    608|        }
  440|    608|    }
_RNvXs1_NtCskGrqaZ7ysJS_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCskzdpTR3bRvG_4core3str6traits7FromStr8from_str:
  103|  44.5k|    fn from_str(s: &str) -> Result<Self, TermParseError> {
  104|  44.5k|        let (term, left) = read_term(s, 0)?;
  105|  43.5k|        if !left.is_empty() {
  106|     78|            return Err(TermParseError::msg("Invalid term serialization"));
  107|  43.4k|        }
  108|  43.4k|        Ok(term)
  109|  44.5k|    }
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser12read_literals_0B5_:
  200|     57|                                |error| TermParseError {
  201|     57|                                    kind: TermParseErrorKind::LanguageTag {
  202|     57|                                        value: language.to_owned(),
  203|     57|                                        error,
  204|     57|                                    },
  205|     57|                                },
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser15read_blank_node0B5_:
  164|   146k|            .find(|v: char| {
  165|   146k|                v.is_whitespace()
  166|   145k|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  167|   146k|            })
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser14read_hexa_char0B5_:
  380|      2|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser15read_named_nodes_0B5_:
  146|    523|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  147|    523|            kind: TermParseErrorKind::Iri {
  148|    523|                value: value.to_owned(),
  149|    523|                error,
  150|    523|            },
  151|    523|        })?;
_RNCNvXs2_NtCskGrqaZ7ysJS_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCskzdpTR3bRvG_4core3str6traits7FromStr8from_str0B9_:
  129|     16|        Self::new(&s[1..]).map_err(|error| TermParseError {
  130|     16|            kind: TermParseErrorKind::Variable {
  131|     16|                value: s.to_owned(),
  132|     16|                error,
  133|     16|            },
  134|     16|        })
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser15read_named_node0B5_:
  143|     48|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser12read_literal0B5_:
  195|  72.5k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCskGrqaZ7ysJS_5oxrdf6parser15read_blank_nodes_0B5_:
  170|     55|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  171|     55|            kind: TermParseErrorKind::BlankNode {
  172|     55|                value: value.to_owned(),
  173|     55|                error,
  174|     55|            },
  175|     55|        })?;
_RNvXs2_NtCskGrqaZ7ysJS_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCskzdpTR3bRvG_4core3str6traits7FromStr8from_str:
  123|  3.00k|    fn from_str(s: &str) -> Result<Self, TermParseError> {
  124|  3.00k|        if !s.starts_with('?') && !s.starts_with('$') {
  125|     99|            return Err(TermParseError::msg(
  126|     99|                "Variable serialization should start with ? or $",
  127|     99|            ));
  128|  2.90k|        }
  129|  2.90k|        Self::new(&s[1..]).map_err(|error| TermParseError {
  130|       |            kind: TermParseErrorKind::Variable {
  131|       |                value: s.to_owned(),
  132|       |                error,
  133|       |            },
  134|  2.90k|        })
  135|  3.00k|    }

_RNvXsZ_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromRNtB5_7SubjectE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  678|  2.28k|    fn from(node: &'a Subject) -> Self {
  679|  2.28k|        node.as_ref().into()
  680|  2.28k|    }
_RNvXsY_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromNtB5_10SubjectRefE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  666|  2.28k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  2.28k|        match node {
  668|    997|            SubjectRef::NamedNode(node) => node.into(),
  669|    315|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|    976|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  2.28k|    }
_RNvXsP_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  599|  3.28k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  3.28k|        Self::NamedNode(node)
  601|  3.28k|    }
_RNvXs10_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB6_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromRNtB6_4TermE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  685|  23.1k|    fn from(node: &'a Term) -> Self {
  686|  23.1k|        node.as_ref()
  687|  23.1k|    }
_RNvXsR_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  613|    315|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|    315|        Self::BlankNode(node)
  615|    315|    }
_RNvXsV_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromRNtB5_6TripleE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  642|    976|    fn from(node: &'a Triple) -> Self {
  643|    976|        Self::Triple(node)
  644|    976|    }
_RNvXsQ_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7TermRefINtNtCskzdpTR3bRvG_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  606|  2.28k|    fn from(node: &'a NamedNode) -> Self {
  607|  2.28k|        node.as_ref().into()
  608|  2.28k|    }
_RNvMsc_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7Subject6as_refCshXB2kc3dftb_13oxigraph_fuzz:
  181|  2.28k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  2.28k|        match self {
  183|    997|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    315|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|    976|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  2.28k|    }
_RNvMsy_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_4Term6as_refCshXB2kc3dftb_13oxigraph_fuzz:
  417|  23.1k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  23.1k|        match self {
  419|  1.42k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  5.83k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  14.5k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  1.31k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  23.1k|    }
_RNvXs25_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB6_4TermNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
  385|  46.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB6_6TripleNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
  713|  4.57k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Q_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB6_7SubjectNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
  155|  4.57k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsA_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_4TermINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  5.45k|    fn from(node: NamedNode) -> Self {
  438|  5.45k|        Self::NamedNode(node)
  439|  5.45k|    }
_RNvXsg_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7SubjectINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|    661|    fn from(node: BlankNode) -> Self {
  215|    661|        Self::BlankNode(node)
  216|    661|    }
_RNvXse_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_7SubjectINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  2.31k|    fn from(node: NamedNode) -> Self {
  201|  2.31k|        Self::NamedNode(node)
  202|  2.31k|    }
_RNvXsG_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_4TermINtNtCskzdpTR3bRvG_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  5.10k|    fn from(triple: Triple) -> Self {
  481|  5.10k|        Self::Triple(Box::new(triple))
  482|  5.10k|    }
_RNvXsE_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_4TermINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  31.4k|    fn from(literal: Literal) -> Self {
  466|  31.4k|        Self::Literal(literal)
  467|  31.4k|    }
_RNvXsC_NtCskGrqaZ7ysJS_5oxrdf6tripleNtB5_4TermINtNtCskzdpTR3bRvG_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  12.5k|    fn from(node: BlankNode) -> Self {
  452|  12.5k|        Self::BlankNode(node)
  453|  12.5k|    }

_RNvXs_NtCskGrqaZ7ysJS_5oxrdf8variableNtB4_8VariableNtNtCskzdpTR3bRvG_4core3fmt7Display3fmtCshXB2kc3dftb_13oxigraph_fuzz:
   61|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|      8|        self.as_ref().fmt(f)
   63|      8|    }
_RNvXs2_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_11VariableRefINtNtCskzdpTR3bRvG_4core7convert4FromRNtB5_8VariableE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  130|  20.8k|    fn from(variable: &'a Variable) -> Self {
  131|  20.8k|        variable.as_ref()
  132|  20.8k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf8variableNtB2_8Variable6as_strCshXB2kc3dftb_13oxigraph_fuzz:
   44|  1.29k|    pub fn as_str(&self) -> &str {
   45|  1.29k|        &self.name
   46|  1.29k|    }
_RNvXs5_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_8VariableINtNtCskzdpTR3bRvG_4core3cmp9PartialEqNtB5_11VariableRefE2eqCshXB2kc3dftb_13oxigraph_fuzz:
  151|  21.2k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  152|  21.2k|        self.as_ref() == *other
  153|  21.2k|    }
_RNvMNtCskGrqaZ7ysJS_5oxrdf8variableNtB2_8Variable6as_refCshXB2kc3dftb_13oxigraph_fuzz:
   54|  42.1k|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|  42.1k|        VariableRef { name: &self.name }
   56|  42.1k|    }
_RNvXs1_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_11VariableRefNtNtCskzdpTR3bRvG_4core3fmt7Display3fmtCshXB2kc3dftb_13oxigraph_fuzz:
  123|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|      8|        write!(f, "?{}", self.name)
  125|      8|    }
_RNvXs8_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCskzdpTR3bRvG_4core3fmt7Display3fmtCshXB2kc3dftb_13oxigraph_fuzz:
  226|     16|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     16|        write!(f, "The variable name is invalid")
  228|     16|    }
_RNvXsd_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_8VariableNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCshXB2kc3dftb_13oxigraph_fuzz:
   17|    625|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsm_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_11VariableRefNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCshXB2kc3dftb_13oxigraph_fuzz:
   78|  21.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsh_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_8VariableNtNtCskzdpTR3bRvG_4core5clone5Clone5cloneCshXB2kc3dftb_13oxigraph_fuzz:
   17|  1.29k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCskGrqaZ7ysJS_5oxrdf8variableNtB2_8Variable6as_refCs6YJc3OKmi2o_10sparesults:
   54|  84.2k|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|  84.2k|        VariableRef { name: &self.name }
   56|  84.2k|    }
_RNvXs5_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_8VariableINtNtCskzdpTR3bRvG_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs6YJc3OKmi2o_10sparesults:
  151|  42.5k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  152|  42.5k|        self.as_ref() == *other
  153|  42.5k|    }
_RNvXsm_NtCskGrqaZ7ysJS_5oxrdf8variableNtB5_11VariableRefNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eqCs6YJc3OKmi2o_10sparesults:
   78|  42.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvNtCskGrqaZ7ysJS_5oxrdf8variable28validate_variable_identifier:
  170|  2.90k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  2.90k|    let mut chars = id.chars();
  172|  2.90k|    let front = chars.next().ok_or(VariableNameParseError {})?;
  173|  2.90k|    match front {
  174|  2.90k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  1.72k|        | 'A'..='Z'
  178|    356|        | 'a'..='z'
  179|     78|        | '\u{00C0}'..='\u{00D6}'
  180|     78|        | '\u{00D8}'..='\u{00F6}'
  181|     72|        | '\u{00F8}'..='\u{02FF}'
  182|     71|        | '\u{0370}'..='\u{037D}'
  183|     71|        | '\u{037F}'..='\u{1FFF}'
  184|     29|        | '\u{200C}'..='\u{200D}'
  185|     29|        | '\u{2070}'..='\u{218F}'
  186|     26|        | '\u{2C00}'..='\u{2FEF}'
  187|     26|        | '\u{3001}'..='\u{D7FF}'
  188|     11|        | '\u{F900}'..='\u{FDCF}'
  189|     11|        | '\u{FDF0}'..='\u{FFFD}'
  190|  2.89k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      2|        _ => return Err(VariableNameParseError {}),
  192|       |    }
  193|  8.64k|    for c in chars {
  194|  5.75k|        match c {
  195|  5.74k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|    266|            | '\u{00300}'..='\u{036F}'
  198|    195|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  2.52k|            | 'A'..='Z'
  201|  1.15k|            | 'a'..='z'
  202|    269|            | '\u{00C0}'..='\u{00D6}'
  203|    269|            | '\u{00D8}'..='\u{00F6}'
  204|    266|            | '\u{00F8}'..='\u{02FF}'
  205|    266|            | '\u{0370}'..='\u{037D}'
  206|    266|            | '\u{037F}'..='\u{1FFF}'
  207|    195|            | '\u{200C}'..='\u{200D}'
  208|    195|            | '\u{2070}'..='\u{218F}'
  209|    195|            | '\u{2C00}'..='\u{2FEF}'
  210|    194|            | '\u{3001}'..='\u{D7FF}'
  211|     83|            | '\u{F900}'..='\u{FDCF}'
  212|     83|            | '\u{FDF0}'..='\u{FFFD}'
  213|  5.74k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|      9|            _ => return Err(VariableNameParseError {}),
  215|       |        }
  216|       |    }
  217|  2.89k|    Ok(())
  218|  2.90k|}
_RINvMNtCskGrqaZ7ysJS_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs4XkmH8cVWyK_5alloc6string6StringEB5_:
   39|  2.89k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  2.89k|        Self { name: name.into() }
   41|  2.89k|    }
_RINvMNtCskGrqaZ7ysJS_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  2.90k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  2.90k|        let name = name.into();
   28|  2.90k|        validate_variable_identifier(&name)?;
   29|  2.89k|        Ok(Self::new_unchecked(name))
   30|  2.90k|    }

_RINvNtCs6YJc3OKmi2o_10sparesults3csv14write_tsv_termRNtNtCskGrqaZ7ysJS_5oxrdf6triple4TermINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  155|  2.28k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  2.28k|    match term.into() {
  157|     20|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|    451|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|  1.76k|        TermRef::Literal(literal) => {
  160|  1.76k|            let value = literal.value();
  161|  1.76k|            if let Some(language) = literal.language() {
  162|    210|                write_tsv_quoted_str(value, sink)?;
  163|    210|                write!(sink, "@{language}")
  164|       |            } else {
  165|  1.55k|                match literal.datatype() {
  166|  1.55k|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|  1.47k|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|  1.47k|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|  1.47k|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|  1.47k|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|  1.46k|                    datatype => {
  172|  1.46k|                        write_tsv_quoted_str(value, sink)?;
  173|  1.46k|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|     53|        TermRef::Triple(triple) => {
  180|     53|            sink.write_all(b"<< ")?;
  181|     53|            write_tsv_term(&triple.subject, sink)?;
  182|     53|            sink.write_all(b" ")?;
  183|     53|            write_tsv_term(&triple.predicate, sink)?;
  184|     53|            sink.write_all(b" ")?;
  185|     53|            write_tsv_term(&triple.object, sink)?;
  186|     53|            sink.write_all(b" >>")?;
  187|     53|            Ok(())
  188|       |        }
  189|       |    }
  190|  2.28k|}
_RINvNtCs6YJc3OKmi2o_10sparesults3csv14write_tsv_termRNtNtCskGrqaZ7ysJS_5oxrdf6triple7SubjectINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  155|  2.28k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  2.28k|    match term.into() {
  157|    997|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|    315|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|      0|        TermRef::Literal(literal) => {
  160|      0|            let value = literal.value();
  161|      0|            if let Some(language) = literal.language() {
  162|      0|                write_tsv_quoted_str(value, sink)?;
  163|      0|                write!(sink, "@{language}")
  164|       |            } else {
  165|      0|                match literal.datatype() {
  166|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|      0|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|      0|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|      0|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|      0|                    datatype => {
  172|      0|                        write_tsv_quoted_str(value, sink)?;
  173|      0|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|    976|        TermRef::Triple(triple) => {
  180|    976|            sink.write_all(b"<< ")?;
  181|    976|            write_tsv_term(&triple.subject, sink)?;
  182|    976|            sink.write_all(b" ")?;
  183|    976|            write_tsv_term(&triple.predicate, sink)?;
  184|    976|            sink.write_all(b" ")?;
  185|    976|            write_tsv_term(&triple.object, sink)?;
  186|    976|            sink.write_all(b" >>")?;
  187|    976|            Ok(())
  188|       |        }
  189|       |    }
  190|  2.28k|}
_RINvMs_NtCs6YJc3OKmi2o_10sparesults3csvINtB5_18TsvSolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE5writeINtNtNtNtCskzdpTR3bRvG_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs3_B7_INtB7_15SolutionsWriterB11_E5writeRNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableRNtNtB3F_6triple4TermRNtB2x_13QuerySolutionE0EECshXB2kc3dftb_13oxigraph_fuzz:
  125|  36.7k|    pub fn write<'a>(
  126|  36.7k|        &mut self,
  127|  36.7k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  128|  36.7k|    ) -> io::Result<()> {
  129|  36.7k|        let mut values = vec![None; self.variables.len()];
  130|  57.6k|        for (variable, value) in solution {
  131|  20.8k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  132|  20.8k|                values[position] = Some(value);
  133|  20.8k|            }
  134|       |        }
  135|  36.7k|        let mut start_binding = true;
  136|  73.7k|        for value in values {
  137|  36.9k|            if start_binding {
  138|  36.3k|                start_binding = false;
  139|  36.3k|            } else {
  140|    668|                self.sink.write_all(b"\t")?;
  141|       |            }
  142|  36.9k|            if let Some(value) = value {
  143|  20.8k|                write_tsv_term(value, &mut self.sink)?;
  144|  16.1k|            }
  145|       |        }
  146|  36.7k|        self.sink.write_all(b"\n")
  147|  36.7k|    }
_RINvNtCs6YJc3OKmi2o_10sparesults3csv20write_tsv_quoted_strINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  193|  5.53k|    f.write_all(b"\"")?;
  194|  41.5k|    for c in string.bytes() {
  195|  41.5k|        match c {
  196|    389|            b'\t' => f.write_all(b"\\t"),
  197|    302|            b'\n' => f.write_all(b"\\n"),
  198|    869|            b'\r' => f.write_all(b"\\r"),
  199|    312|            b'"' => f.write_all(b"\\\""),
  200|  1.48k|            b'\\' => f.write_all(b"\\\\"),
  201|  38.1k|            c => f.write_all(&[c]),
  202|      0|        }?;
  203|       |    }
  204|  5.53k|    f.write_all(b"\"")
  205|  5.53k|}
_RINvNtCs6YJc3OKmi2o_10sparesults3csv14write_tsv_termRNtNtCskGrqaZ7ysJS_5oxrdf10named_node9NamedNodeINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  155|  2.28k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  2.28k|    match term.into() {
  157|  2.28k|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|      0|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|      0|        TermRef::Literal(literal) => {
  160|      0|            let value = literal.value();
  161|      0|            if let Some(language) = literal.language() {
  162|      0|                write_tsv_quoted_str(value, sink)?;
  163|      0|                write!(sink, "@{language}")
  164|       |            } else {
  165|      0|                match literal.datatype() {
  166|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|      0|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|      0|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|      0|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|      0|                    datatype => {
  172|      0|                        write_tsv_quoted_str(value, sink)?;
  173|      0|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|      0|        TermRef::Triple(triple) => {
  180|      0|            sink.write_all(b"<< ")?;
  181|      0|            write_tsv_term(&triple.subject, sink)?;
  182|      0|            sink.write_all(b" ")?;
  183|      0|            write_tsv_term(&triple.predicate, sink)?;
  184|      0|            sink.write_all(b" ")?;
  185|      0|            write_tsv_term(&triple.object, sink)?;
  186|      0|            sink.write_all(b" >>")?;
  187|      0|            Ok(())
  188|       |        }
  189|       |    }
  190|  2.28k|}
_RNCNvMs0_NtCs6YJc3OKmi2o_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4read0CshXB2kc3dftb_13oxigraph_fuzz:
  294|  10.8k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNvMs0_NtCs6YJc3OKmi2o_10sparesults3csvINtB5_21TsvQueryResultsReaderRShE4readCshXB2kc3dftb_13oxigraph_fuzz:
  287|  4.08k|    pub fn read(mut source: R) -> Result<Self, ParseError> {
  288|  4.08k|        let mut buffer = String::new();
  289|  4.08k|
  290|  4.08k|        // We read the header
  291|  4.08k|        source.read_line(&mut buffer)?;
  292|  4.07k|        let line = buffer
  293|  4.07k|            .as_str()
  294|  4.07k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  295|  4.07k|        if line.eq_ignore_ascii_case("true") {
  296|      2|            return Ok(Self::Boolean(true));
  297|  4.07k|        }
  298|  4.07k|        if line.eq_ignore_ascii_case("false") {
  299|      4|            return Ok(Self::Boolean(false));
  300|  4.07k|        }
  301|  4.07k|        let mut variables = Vec::new();
  302|  4.07k|        if !line.is_empty() {
  303|  3.05k|            for v in line.split('\t') {
  304|  3.05k|                let v = v.trim();
  305|  3.05k|                if v.is_empty() {
  306|     52|                    return Err(SyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar").into());
  307|  3.00k|                }
  308|  3.00k|                let variable = Variable::from_str(v).map_err(|e| {
  309|       |                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  310|  3.00k|                })?;
  311|  2.89k|                if variables.contains(&variable) {
  312|      8|                    return Err(SyntaxError::msg(format!(
  313|      8|                        "The variable {variable} is declared twice"
  314|      8|                    ))
  315|      8|                    .into());
  316|  2.88k|                }
  317|  2.88k|                variables.push(variable);
  318|       |            }
  319|  1.31k|        }
  320|  3.89k|        let column_len = variables.len();
  321|  3.89k|        Ok(Self::Solutions {
  322|  3.89k|            variables,
  323|  3.89k|            solutions: TsvSolutionsReader {
  324|  3.89k|                source,
  325|  3.89k|                buffer,
  326|  3.89k|                column_len,
  327|  3.89k|            },
  328|  3.89k|        })
  329|  4.08k|    }
_RINvNtCs6YJc3OKmi2o_10sparesults3csv24write_boolean_tsv_resultQINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
   99|      3|pub fn write_boolean_tsv_result<W: Write>(mut sink: W, value: bool) -> io::Result<W> {
  100|      3|    sink.write_all(if value { b"true" } else { b"false" })?;
  101|      3|    Ok(sink)
  102|      3|}
_RNCNCNvMs1_NtCs6YJc3OKmi2o_10sparesults3csvINtB9_18TsvSolutionsReaderRShE9read_next00CshXB2kc3dftb_13oxigraph_fuzz:
  352|  1.14k|                    Ok(Some(Term::from_str(v).map_err(|e| SyntaxError {
  353|  1.14k|                        inner: SyntaxErrorKind::Term(e),
  354|  1.14k|                    })?))
_RNCNvMs1_NtCs6YJc3OKmi2o_10sparesults3csvINtB7_18TsvSolutionsReaderRShE9read_next0CshXB2kc3dftb_13oxigraph_fuzz:
  347|  79.9k|            .map(|v| {
  348|  79.9k|                let v = v.trim();
  349|  79.9k|                if v.is_empty() {
  350|  35.3k|                    Ok(None)
  351|       |                } else {
  352|  44.5k|                    Ok(Some(Term::from_str(v).map_err(|e| SyntaxError {
  353|       |                        inner: SyntaxErrorKind::Term(e),
  354|  44.5k|                    })?))
  355|       |                }
  356|  79.9k|            })
_RNvMs_NtCs6YJc3OKmi2o_10sparesults3csvINtB4_18TsvSolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE5startCshXB2kc3dftb_13oxigraph_fuzz:
  110|  1.30k|    pub fn start(mut sink: W, variables: Vec<Variable>) -> io::Result<Self> {
  111|  1.30k|        let mut start_vars = true;
  112|  2.60k|        for variable in &variables {
  113|  1.29k|            if start_vars {
  114|  1.21k|                start_vars = false;
  115|  1.21k|            } else {
  116|     84|                sink.write_all(b"\t")?;
  117|       |            }
  118|  1.29k|            sink.write_all(b"?")?;
  119|  1.29k|            sink.write_all(variable.as_str().as_bytes())?;
  120|       |        }
  121|  1.30k|        sink.write_all(b"\n")?;
  122|  1.30k|        Ok(Self { sink, variables })
  123|  1.30k|    }
_RINvNtCs6YJc3OKmi2o_10sparesults3csv14write_tsv_termNtNtCskGrqaZ7ysJS_5oxrdf6triple7TermRefINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  155|  20.8k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  20.8k|    match term.into() {
  157|  1.40k|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|  5.38k|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|  12.7k|        TermRef::Literal(literal) => {
  160|  12.7k|            let value = literal.value();
  161|  12.7k|            if let Some(language) = literal.language() {
  162|  2.32k|                write_tsv_quoted_str(value, sink)?;
  163|  2.32k|                write!(sink, "@{language}")
  164|       |            } else {
  165|  10.4k|                match literal.datatype() {
  166|  10.4k|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|  9.62k|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|  4.45k|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|  2.22k|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|  1.53k|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|    993|                    datatype => {
  172|    993|                        write_tsv_quoted_str(value, sink)?;
  173|    993|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|  1.25k|        TermRef::Triple(triple) => {
  180|  1.25k|            sink.write_all(b"<< ")?;
  181|  1.25k|            write_tsv_term(&triple.subject, sink)?;
  182|  1.25k|            sink.write_all(b" ")?;
  183|  1.25k|            write_tsv_term(&triple.predicate, sink)?;
  184|  1.25k|            sink.write_all(b" ")?;
  185|  1.25k|            write_tsv_term(&triple.object, sink)?;
  186|  1.25k|            sink.write_all(b" >>")?;
  187|  1.25k|            Ok(())
  188|       |        }
  189|       |    }
  190|  20.8k|}
_RNCINvMs_NtCs6YJc3OKmi2o_10sparesults3csvINtB7_18TsvSolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE5writeINtNtNtNtCskzdpTR3bRvG_4core4iter8adapters3map3MapNtNtB9_8solution4IterNCINvMs3_B9_INtB9_15SolutionsWriterB13_E5writeRNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableRNtNtB3H_6triple4TermRNtB2z_13QuerySolutionE0EE0CshXB2kc3dftb_13oxigraph_fuzz:
  131|  21.2k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNvMs1_NtCs6YJc3OKmi2o_10sparesults3csvINtB5_18TsvSolutionsReaderRShE9read_nextCshXB2kc3dftb_13oxigraph_fuzz:
  339|  80.4k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  340|  80.4k|        self.buffer.clear();
  341|  80.4k|        if self.source.read_line(&mut self.buffer)? == 0 {
  342|  2.61k|            return Ok(None);
  343|  77.7k|        }
  344|  77.7k|        let elements = self
  345|  77.7k|            .buffer
  346|  77.7k|            .split('\t')
  347|  77.7k|            .map(|v| {
  348|       |                let v = v.trim();
  349|       |                if v.is_empty() {
  350|       |                    Ok(None)
  351|       |                } else {
  352|       |                    Ok(Some(Term::from_str(v).map_err(|e| SyntaxError {
  353|       |                        inner: SyntaxErrorKind::Term(e),
  354|       |                    })?))
  355|       |                }
  356|  77.7k|            })
  357|  77.7k|            .collect::<Result<Vec<_>, ParseError>>()?;
  358|  76.6k|        if elements.len() == self.column_len {
  359|  75.3k|            Ok(Some(elements))
  360|  1.24k|        } else if self.column_len == 0 && elements == [None] {
  361|  1.11k|            Ok(Some(Vec::new())) // Zero columns case
  362|       |        } else {
  363|    131|            Err(SyntaxError::msg(format!(
  364|    131|                "This TSV files has {} columns but we found a row with {} columns: {:?}",
  365|    131|                self.column_len,
  366|    131|                elements.len(),
  367|    131|                self.buffer
  368|    131|            ))
  369|    131|            .into())
  370|       |        }
  371|  80.4k|    }
_RNvMs_NtCs6YJc3OKmi2o_10sparesults3csvINtB4_18TsvSolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE6finishCshXB2kc3dftb_13oxigraph_fuzz:
  150|  1.30k|        self.sink.flush()?;
  151|  1.30k|        Ok(self.sink)
  152|  1.30k|    }
_RNCNvMs0_NtCs6YJc3OKmi2o_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4reads_0CshXB2kc3dftb_13oxigraph_fuzz:
  308|    115|                let variable = Variable::from_str(v).map_err(|e| {
  309|    115|                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  310|    115|                })?;
_RNvNtCs6YJc3OKmi2o_10sparesults3csv17is_turtle_boolean:
  207|    923|fn is_turtle_boolean(value: &str) -> bool {
  208|    923|    matches!(value, "true" | "false")
  209|    923|}
_RNvNtCs6YJc3OKmi2o_10sparesults3csv17is_turtle_integer:
  211|  6.54k|fn is_turtle_integer(value: &str) -> bool {
  212|  6.54k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  213|  6.54k|    let mut value = value.as_bytes();
  214|  6.54k|    if let Some(v) = value.strip_prefix(b"+") {
  215|    115|        value = v;
  216|  6.42k|    } else if let Some(v) = value.strip_prefix(b"-") {
  217|     20|        value = v;
  218|  6.40k|    }
  219|  6.54k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  220|  6.54k|}
_RNvNtCs6YJc3OKmi2o_10sparesults3csv17is_turtle_decimal:
  222|  2.24k|fn is_turtle_decimal(value: &str) -> bool {
  223|  2.24k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  224|  2.24k|    let mut value = value.as_bytes();
  225|  2.24k|    if let Some(v) = value.strip_prefix(b"+") {
  226|    326|        value = v;
  227|  1.91k|    } else if let Some(v) = value.strip_prefix(b"-") {
  228|      1|        value = v;
  229|  1.91k|    }
  230|  7.26k|    while value.first().map_or(false, u8::is_ascii_digit) {
  231|  5.01k|        value = &value[1..];
  232|  5.01k|    }
  233|  2.24k|    if let Some(v) = value.strip_prefix(b".") {
  234|  2.24k|        value = v;
  235|  2.24k|    } else {
  236|      2|        return false;
  237|       |    }
  238|  2.24k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  239|  2.24k|}
_RNvNtCs6YJc3OKmi2o_10sparesults3csv16is_turtle_double:
  241|  1.72k|fn is_turtle_double(value: &str) -> bool {
  242|  1.72k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  243|  1.72k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  244|  1.72k|    let mut value = value.as_bytes();
  245|  1.72k|    if let Some(v) = value.strip_prefix(b"+") {
  246|    147|        value = v;
  247|  1.58k|    } else if let Some(v) = value.strip_prefix(b"-") {
  248|      1|        value = v;
  249|  1.57k|    }
  250|  1.72k|    let mut with_before = false;
  251|  4.96k|    while value.first().map_or(false, u8::is_ascii_digit) {
  252|  3.23k|        value = &value[1..];
  253|  3.23k|        with_before = true;
  254|  3.23k|    }
  255|  1.72k|    let mut with_after = false;
  256|  1.72k|    if let Some(v) = value.strip_prefix(b".") {
  257|    429|        value = v;
  258|  1.60k|        while value.first().map_or(false, u8::is_ascii_digit) {
  259|  1.18k|            value = &value[1..];
  260|  1.18k|            with_after = true;
  261|  1.18k|        }
  262|  1.29k|    }
  263|  1.72k|    if let Some(v) = value.strip_prefix(b"e") {
  264|  1.02k|        value = v;
  265|  1.02k|    } else if let Some(v) = value.strip_prefix(b"E") {
  266|    706|        value = v;
  267|    706|    } else {
  268|      0|        return false;
  269|       |    }
  270|  1.72k|    if let Some(v) = value.strip_prefix(b"+") {
  271|     69|        value = v;
  272|  1.65k|    } else if let Some(v) = value.strip_prefix(b"-") {
  273|      1|        value = v;
  274|  1.65k|    }
  275|  1.72k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  276|  1.72k|}

_RNvXs1_NtCs6YJc3OKmi2o_10sparesults5errorNtB5_10ParseErrorINtNtCskzdpTR3bRvG_4core7convert4FromNtB5_11SyntaxErrorE4fromCshXB2kc3dftb_13oxigraph_fuzz:
   43|  1.45k|    fn from(error: SyntaxError) -> Self {
   44|  1.45k|        Self::Syntax(error)
   45|  1.45k|    }
_RNvXs0_NtCs6YJc3OKmi2o_10sparesults5errorNtB5_10ParseErrorINtNtCskzdpTR3bRvG_4core7convert4FromNtNtNtCsgxCHRWrg6Va_3std2io5error5ErrorE4fromCshXB2kc3dftb_13oxigraph_fuzz:
   36|     12|    fn from(error: io::Error) -> Self {
   37|     12|        Self::Io(error)
   38|     12|    }
_RINvMs4_NtCs6YJc3OKmi2o_10sparesults5errorNtB6_11SyntaxError3msgNtNtCs4XkmH8cVWyK_5alloc6string6StringECshXB2kc3dftb_13oxigraph_fuzz:
   86|    254|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    254|        Self {
   88|    254|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|    254|        }
   90|    254|    }
_RINvMs4_NtCs6YJc3OKmi2o_10sparesults5errorNtB6_11SyntaxError3msgReECshXB2kc3dftb_13oxigraph_fuzz:
   86|     52|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|     52|        Self {
   88|     52|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|     52|        }
   90|     52|    }

_RNvMs_Cs6YJc3OKmi2o_10sparesultsNtB4_18QueryResultsParser11from_formatCshXB2kc3dftb_13oxigraph_fuzz:
  166|  2.77k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  167|  2.77k|        Self { format }
  168|  2.77k|    }
_RNvMs2_Cs6YJc3OKmi2o_10sparesultsNtB5_22QueryResultsSerializer11from_formatCshXB2kc3dftb_13oxigraph_fuzz:
  362|  2.77k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  363|  2.77k|        Self { format }
  364|  2.77k|    }
_RNCNvXs1_Cs6YJc3OKmi2o_10sparesultsINtB7_15SolutionsReaderRShENtNtNtNtCskzdpTR3bRvG_4core4iter6traits8iterator8Iterator4next0CshXB2kc3dftb_13oxigraph_fuzz:
  321|  76.5k|            .map(|values| (Rc::clone(&self.variables), values).into()),
_RINvMs2_Cs6YJc3OKmi2o_10sparesultsNtB6_22QueryResultsSerializer16solutions_writerINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  403|  1.30k|    pub fn solutions_writer<W: Write>(
  404|  1.30k|        &self,
  405|  1.30k|        writer: W,
  406|  1.30k|        variables: Vec<Variable>,
  407|  1.30k|    ) -> io::Result<SolutionsWriter<W>> {
  408|  1.30k|        Ok(SolutionsWriter {
  409|  1.30k|            formatter: match self.format {
  410|       |                QueryResultsFormat::Xml => {
  411|      0|                    SolutionsWriterKind::Xml(XmlSolutionsWriter::start(writer, &variables)?)
  412|       |                }
  413|       |                QueryResultsFormat::Json => {
  414|      0|                    SolutionsWriterKind::Json(JsonSolutionsWriter::start(writer, &variables)?)
  415|       |                }
  416|       |                QueryResultsFormat::Csv => {
  417|      0|                    SolutionsWriterKind::Csv(CsvSolutionsWriter::start(writer, variables)?)
  418|       |                }
  419|       |                QueryResultsFormat::Tsv => {
  420|  1.30k|                    SolutionsWriterKind::Tsv(TsvSolutionsWriter::start(writer, variables)?)
  421|       |                }
  422|       |            },
  423|       |        })
  424|  1.30k|    }
_RNvXs1_Cs6YJc3OKmi2o_10sparesultsINtB5_15SolutionsReaderRShENtNtNtNtCskzdpTR3bRvG_4core4iter6traits8iterator8Iterator4nextCshXB2kc3dftb_13oxigraph_fuzz:
  313|  80.4k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  314|  80.4k|        Some(
  315|  80.4k|            match &mut self.solutions {
  316|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  317|      0|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  318|  80.4k|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  319|       |            }
  320|  80.4k|            .transpose()?
  321|  77.7k|            .map(|values| (Rc::clone(&self.variables), values).into()),
  322|       |        )
  323|  80.4k|    }
_RINvMs2_Cs6YJc3OKmi2o_10sparesultsNtB6_22QueryResultsSerializer20write_boolean_resultQINtNtCs4XkmH8cVWyK_5alloc3vec3VechEECshXB2kc3dftb_13oxigraph_fuzz:
  378|      3|    pub fn write_boolean_result<W: Write>(&self, writer: W, value: bool) -> io::Result<W> {
  379|      3|        match self.format {
  380|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(writer, value),
  381|      0|            QueryResultsFormat::Json => write_boolean_json_result(writer, value),
  382|      0|            QueryResultsFormat::Csv => write_boolean_csv_result(writer, value),
  383|      3|            QueryResultsFormat::Tsv => write_boolean_tsv_result(writer, value),
  384|       |        }
  385|      3|    }
_RINvMs3_Cs6YJc3OKmi2o_10sparesultsINtB6_15SolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE5writeRNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableRNtNtB1E_6triple4TermRNtNtB6_8solution13QuerySolutionECshXB2kc3dftb_13oxigraph_fuzz:
  476|  36.7k|    pub fn write<'a>(
  477|  36.7k|        &mut self,
  478|  36.7k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  479|  36.7k|    ) -> io::Result<()> {
  480|  36.7k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  481|  36.7k|        match &mut self.formatter {
  482|      0|            SolutionsWriterKind::Xml(writer) => writer.write(solution),
  483|      0|            SolutionsWriterKind::Json(writer) => writer.write(solution),
  484|      0|            SolutionsWriterKind::Csv(writer) => writer.write(solution),
  485|  36.7k|            SolutionsWriterKind::Tsv(writer) => writer.write(solution),
  486|       |        }
  487|  36.7k|    }
_RINvMs_Cs6YJc3OKmi2o_10sparesultsNtB5_18QueryResultsParser12read_resultsRShECshXB2kc3dftb_13oxigraph_fuzz:
  193|  4.08k|    pub fn read_results<R: BufRead>(&self, reader: R) -> Result<QueryResultsReader<R>, ParseError> {
  194|  4.08k|        Ok(match self.format {
  195|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
  196|      0|                XmlQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  197|       |                XmlQueryResultsReader::Solutions {
  198|      0|                    solutions,
  199|      0|                    variables,
  200|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  201|      0|                    variables: Rc::new(variables),
  202|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
  203|      0|                }),
  204|       |            },
  205|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
  206|      0|                JsonQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  207|       |                JsonQueryResultsReader::Solutions {
  208|      0|                    solutions,
  209|      0|                    variables,
  210|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  211|      0|                    variables: Rc::new(variables),
  212|      0|                    solutions: SolutionsReaderKind::Json(solutions),
  213|      0|                }),
  214|       |            },
  215|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  216|  4.08k|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  217|      6|                TsvQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  218|       |                TsvQueryResultsReader::Solutions {
  219|  3.89k|                    solutions,
  220|  3.89k|                    variables,
  221|  3.89k|                } => QueryResultsReader::Solutions(SolutionsReader {
  222|  3.89k|                    variables: Rc::new(variables),
  223|  3.89k|                    solutions: SolutionsReaderKind::Tsv(solutions),
  224|  3.89k|                }),
  225|       |            },
  226|       |        })
  227|  4.08k|    }
_RNvMs3_Cs6YJc3OKmi2o_10sparesultsINtB5_15SolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE6finishCshXB2kc3dftb_13oxigraph_fuzz:
  490|  1.30k|    pub fn finish(self) -> io::Result<W> {
  491|  1.30k|        match self.formatter {
  492|      0|            SolutionsWriterKind::Xml(write) => write.finish(),
  493|      0|            SolutionsWriterKind::Json(write) => write.finish(),
  494|      0|            SolutionsWriterKind::Csv(write) => write.finish(),
  495|  1.30k|            SolutionsWriterKind::Tsv(write) => write.finish(),
  496|       |        }
  497|  1.30k|    }
_RNCINvMs3_Cs6YJc3OKmi2o_10sparesultsINtB8_15SolutionsWriterINtNtCs4XkmH8cVWyK_5alloc3vec3VechEE5writeRNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableRNtNtB1G_6triple4TermRNtNtB8_8solution13QuerySolutionE0CshXB2kc3dftb_13oxigraph_fuzz:
  480|  20.8k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));

_RNvXs_NtCs6YJc3OKmi2o_10sparesults8solutionNtB4_13QuerySolutionINtNtCskzdpTR3bRvG_4core7convert4FromTINtNtCs4XkmH8cVWyK_5alloc2rc2RcINtNtB1G_3vec3VecNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableEEIB27_INtNtB14_6option6OptionNtNtB2r_6triple4TermEEEE4fromCshXB2kc3dftb_13oxigraph_fuzz:
  121|  76.5k|    fn from((v, s): (V, S)) -> Self {
  122|  76.5k|        Self {
  123|  76.5k|            variables: v.into(),
  124|  76.5k|            values: s.into(),
  125|  76.5k|        }
  126|  76.5k|    }
_RNvMNtCs6YJc3OKmi2o_10sparesults8solutionNtB2_13QuerySolution9variablesCshXB2kc3dftb_13oxigraph_fuzz:
  114|  1.24k|    pub fn variables(&self) -> &[Variable] {
  115|  1.24k|        &self.variables
  116|  1.24k|    }
_RNvXs0_NtCs6YJc3OKmi2o_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCskzdpTR3bRvG_4core4iter6traits7collect12IntoIterator9into_iterCshXB2kc3dftb_13oxigraph_fuzz:
  134|  36.7k|    fn into_iter(self) -> Iter<'a> {
  135|  36.7k|        Iter {
  136|  36.7k|            inner: self.variables.iter().zip(&self.values),
  137|  36.7k|        }
  138|  36.7k|    }
_RNvXs9_NtCs6YJc3OKmi2o_10sparesults8solutionNtB5_4IterNtNtNtNtCskzdpTR3bRvG_4core4iter6traits8iterator8Iterator4nextCshXB2kc3dftb_13oxigraph_fuzz:
  229|  57.6k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|  73.7k|        for (variable, value) in &mut self.inner {
  231|  36.9k|            if let Some(value) = value {
  232|  20.8k|                return Some((variable, value));
  233|  16.1k|            }
  234|       |        }
  235|  36.7k|        None
  236|  57.6k|    }
_RNvXs9_NtCs6YJc3OKmi2o_10sparesults8solutionNtB5_4IterNtNtNtNtCskzdpTR3bRvG_4core4iter6traits8iterator8Iterator4nextB7_:
  229|   115k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|   147k|        for (variable, value) in &mut self.inner {
  231|  73.9k|            if let Some(value) = value {
  232|  41.6k|                return Some((variable, value));
  233|  32.2k|            }
  234|       |        }
  235|  73.5k|        None
  236|   115k|    }
_RNvXs6_NtCs6YJc3OKmi2o_10sparesults8solutionNtB5_13QuerySolutionNtNtCskzdpTR3bRvG_4core3cmp9PartialEq2eq:
  189|  36.7k|    fn eq(&self, other: &Self) -> bool {
  190|  36.7k|        for (k, v) in self.iter() {
  191|  20.8k|            if other.get(k) != Some(v) {
  192|      0|                return false;
  193|  20.8k|            }
  194|       |        }
  195|  36.7k|        for (k, v) in other.iter() {
  196|  20.8k|            if self.get(k) != Some(v) {
  197|      0|                return false;
  198|  20.8k|            }
  199|       |        }
  200|  36.7k|        true
  201|  36.7k|    }
_RNvMNtCs6YJc3OKmi2o_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   86|  73.5k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   87|  73.5k|        self.into_iter()
   88|  73.5k|    }
_RNvXs0_NtCs6YJc3OKmi2o_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCskzdpTR3bRvG_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  134|  73.5k|    fn into_iter(self) -> Iter<'a> {
  135|  73.5k|        Iter {
  136|  73.5k|            inner: self.variables.iter().zip(&self.values),
  137|  73.5k|        }
  138|  73.5k|    }
_RINvMNtCs6YJc3OKmi2o_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableEB5_:
   39|  41.6k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   40|  41.6k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   41|  41.6k|    }
_RNCNvXsc_NtCs6YJc3OKmi2o_10sparesults8solutionNtNtCskGrqaZ7ysJS_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  268|  42.5k|        solution.variables.iter().position(|v| *v == self)
_RNvXsd_NtCs6YJc3OKmi2o_10sparesults8solutionRNtNtCskGrqaZ7ysJS_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  274|  41.6k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  275|  41.6k|        self.as_ref().index(solution)
  276|  41.6k|    }
_RNvXsc_NtCs6YJc3OKmi2o_10sparesults8solutionNtNtCskGrqaZ7ysJS_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  267|  41.6k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  268|  41.6k|        solution.variables.iter().position(|v| *v == self)
  269|  41.6k|    }


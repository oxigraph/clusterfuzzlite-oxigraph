_RINvXNtCs8bHeLVVOEo6_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultINtNtCs3OstG5Tqy1X_5alloc3vec3VecNtNtCs3BxoBVhxb2g_10sparesults8solution13QuerySolutionENtNtB1L_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCs8TUCMN7nV6g_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4h_:
   58|  12.1k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  12.1k|    where
   60|  12.1k|        C: Display + Send + Sync + 'static,
   61|  12.1k|        F: FnOnce() -> C,
   62|  12.1k|    {
   63|  12.1k|        match self {
   64|  12.1k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  12.1k|    }
_RINvXNtCs8bHeLVVOEo6_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultNtNtCs3BxoBVhxb2g_10sparesults6parser29SliceQueryResultsParserOutputNtNtB1e_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2g_E12with_contextNtNtCs3OstG5Tqy1X_5alloc6string6StringNCNvNtCs8TUCMN7nV6g_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4d_:
   58|  12.1k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  12.1k|    where
   60|  12.1k|        C: Display + Send + Sync + 'static,
   61|  12.1k|        F: FnOnce() -> C,
   62|  12.1k|    {
   63|  12.1k|        match self {
   64|  12.1k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  12.1k|    }

rust_fuzzer_test_input:
  209|  21.2k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  21.2k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  21.2k|                }
  223|  21.2k|
  224|  21.2k|                __libfuzzer_sys_run(bytes);
  225|  21.2k|                0
  226|       |            }
_RNvNvCsiUXOT6y5Iwe_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  21.2k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  21.2k|                $body
  243|  21.2k|            }
LLVMFuzzerTestOneInput:
   58|  21.2k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  21.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  21.2k|    });
   63|  21.2k|
   64|  21.2k|    match test_input {
   65|  21.2k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  21.2k|}
_RNCNvCs24IpJFTnVTQ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  21.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  21.2k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  21.2k|        rust_fuzzer_test_input(data_slice)
   62|  21.2k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs3BxoBVhxb2g_10sparesults:
 1125|  2.00M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.00M|    haystack: &[u8],
 1127|  2.00M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.00M|) -> Option<usize> {
 1129|  2.00M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.00M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.00M|    // a &[u8].
 1132|  2.00M|    let start = haystack.as_ptr();
 1133|  2.00M|    let end = start.add(haystack.len());
 1134|  2.00M|    let found = find_raw(start, end)?;
 1135|  1.96M|    Some(found.distance(start))
 1136|  2.00M|}
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|   159k|    pub(crate) fn needle1(&self) -> u8 {
  118|   159k|        self.s1
  119|   159k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  2.00M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.00M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.00M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  2.00M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.00M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.00M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  37.8k|    pub(crate) unsafe fn find_raw(
  144|  37.8k|        &self,
  145|  37.8k|        start: *const u8,
  146|  37.8k|        end: *const u8,
  147|  37.8k|    ) -> Option<*const u8> {
  148|  37.8k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  37.8k|        // need to move up to using a u64 for the masks used below. Currently
  150|  37.8k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  37.8k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  37.8k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  37.8k|        let topos = V::Mask::first_offset;
  155|  37.8k|        let len = end.distance(start);
  156|  37.8k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  37.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  30.2k|            return Some(cur);
  167|  7.60k|        }
  168|  7.60k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  7.60k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  7.60k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  7.60k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  7.60k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  9.11k|        while cur <= end.sub(V::BYTES) {
  213|  2.18k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.18k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    667|                return Some(cur);
  216|  1.51k|            }
  217|  1.51k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.93k|        if cur < end {
  224|  6.72k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  6.72k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  6.72k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  6.72k|            return self.search_chunk(cur, topos);
  228|    212|        }
  229|    212|        None
  230|  37.8k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  1.90M|    pub(crate) unsafe fn find_raw(
  144|  1.90M|        &self,
  145|  1.90M|        start: *const u8,
  146|  1.90M|        end: *const u8,
  147|  1.90M|    ) -> Option<*const u8> {
  148|  1.90M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  1.90M|        // need to move up to using a u64 for the masks used below. Currently
  150|  1.90M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  1.90M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  1.90M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.90M|        let topos = V::Mask::first_offset;
  155|  1.90M|        let len = end.distance(start);
  156|  1.90M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.90M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.64M|            return Some(cur);
  167|   261k|        }
  168|   261k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   261k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   261k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   261k|        if len >= Self::LOOP_SIZE {
  172|   290k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|   285k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   285k|                let a = V::load_aligned(cur);
  176|   285k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   285k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   285k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   285k|                let eqa = self.v1.cmpeq(a);
  180|   285k|                let eqb = self.v1.cmpeq(b);
  181|   285k|                let eqc = self.v1.cmpeq(c);
  182|   285k|                let eqd = self.v1.cmpeq(d);
  183|   285k|                let or1 = eqa.or(eqb);
  184|   285k|                let or2 = eqc.or(eqd);
  185|   285k|                let or3 = or1.or(or2);
  186|   285k|                if or3.movemask_will_have_non_zero() {
  187|   242k|                    let mask = eqa.movemask();
  188|   242k|                    if mask.has_non_zero() {
  189|   122k|                        return Some(cur.add(topos(mask)));
  190|   120k|                    }
  191|   120k|
  192|   120k|                    let mask = eqb.movemask();
  193|   120k|                    if mask.has_non_zero() {
  194|   110k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  9.48k|                    }
  196|  9.48k|
  197|  9.48k|                    let mask = eqc.movemask();
  198|  9.48k|                    if mask.has_non_zero() {
  199|  5.25k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  4.23k|                    }
  201|  4.23k|
  202|  4.23k|                    let mask = eqd.movemask();
  203|  4.23k|                    debug_assert!(mask.has_non_zero());
  204|  4.23k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  42.5k|                }
  206|  42.5k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  13.4k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  31.6k|        while cur <= end.sub(V::BYTES) {
  213|  20.4k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  20.4k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  7.52k|                return Some(cur);
  216|  12.9k|            }
  217|  12.9k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  11.1k|        if cur < end {
  224|  11.0k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  11.0k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  11.0k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  11.0k|            return self.search_chunk(cur, topos);
  228|    162|        }
  229|    162|        None
  230|  1.90M|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  46.7k|    unsafe fn search_chunk(
  417|  46.7k|        &self,
  418|  46.7k|        cur: *const u8,
  419|  46.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  46.7k|    ) -> Option<*const u8> {
  421|  46.7k|        let chunk = V::load_unaligned(cur);
  422|  46.7k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  46.7k|        if mask.has_non_zero() {
  424|  34.0k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  12.6k|            None
  427|       |        }
  428|  46.7k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  1.93M|    unsafe fn search_chunk(
  417|  1.93M|        &self,
  418|  1.93M|        cur: *const u8,
  419|  1.93M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  1.93M|    ) -> Option<*const u8> {
  421|  1.93M|        let chunk = V::load_unaligned(cur);
  422|  1.93M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  1.93M|        if mask.has_non_zero() {
  424|  1.65M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   280k|            None
  427|       |        }
  428|  1.93M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  34.3k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  34.3k|    start: *const u8,
 1150|  34.3k|    end: *const u8,
 1151|  34.3k|    confirm: F,
 1152|  34.3k|) -> Option<*const u8> {
 1153|  34.3k|    debug_assert!(start <= end);
 1154|  34.3k|    let mut ptr = start;
 1155|   167k|    while ptr < end {
 1156|   159k|        if confirm(*ptr) {
 1157|  26.1k|            return Some(ptr);
 1158|   133k|        }
 1159|   133k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  8.15k|    None
 1162|  34.3k|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  2.00M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  2.00M|        One {
   71|  2.00M|            sse2: generic::One::new(needle),
   72|  2.00M|            avx2: generic::One::new(needle),
   73|  2.00M|        }
   74|  2.00M|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  2.00M|    pub unsafe fn find_raw(
  180|  2.00M|        &self,
  181|  2.00M|        start: *const u8,
  182|  2.00M|        end: *const u8,
  183|  2.00M|    ) -> Option<*const u8> {
  184|  2.00M|        if start >= end {
  185|  24.2k|            return None;
  186|  1.97M|        }
  187|  1.97M|        let len = end.distance(start);
  188|  1.97M|        if len < __m256i::BYTES {
  189|  72.1k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  34.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  34.3k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  37.8k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  1.90M|        }
  201|  1.90M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  1.90M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  1.90M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  1.90M|        // responsibility.
  205|  1.90M|        //
  206|  1.90M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  1.90M|        // means we'd have to annotate this routine with `target_feature`.
  208|  1.90M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  1.90M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  1.90M|        // The real problem is that a routine with a `target_feature`
  211|  1.90M|        // annotation generally can't be inlined into caller code unless
  212|  1.90M|        // the caller code has the same target feature annotations. Namely,
  213|  1.90M|        // the common case (at time of writing) is for calling code to not
  214|  1.90M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  1.90M|        // `target_feature` on this routine, it can be inlined which will
  216|  1.90M|        // handle some of the short-haystack cases above without touching the
  217|  1.90M|        // architecture specific code.
  218|  1.90M|        self.find_raw_avx2(start, end)
  219|  2.00M|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   159k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   159k|                    b == self.sse2.needle1()
  194|   159k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  37.8k|    unsafe fn find_raw_sse2(
  337|  37.8k|        &self,
  338|  37.8k|        start: *const u8,
  339|  37.8k|        end: *const u8,
  340|  37.8k|    ) -> Option<*const u8> {
  341|  37.8k|        self.sse2.find_raw(start, end)
  342|  37.8k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  1.90M|    unsafe fn find_raw_avx2(
  397|  1.90M|        &self,
  398|  1.90M|        start: *const u8,
  399|  1.90M|        end: *const u8,
  400|  1.90M|    ) -> Option<*const u8> {
  401|  1.90M|        self.avx2.find_raw(start, end)
  402|  1.90M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  2.00M|pub(crate) fn memchr_raw(
  175|  2.00M|    n1: u8,
  176|  2.00M|    start: *const u8,
  177|  2.00M|    end: *const u8,
  178|  2.00M|) -> Option<*const u8> {
  179|  2.00M|    // SAFETY: We provide a valid function pointer type.
  180|  2.00M|    unsafe_ifunc!(
  181|  2.00M|        One,
  182|  2.00M|        find_raw,
  183|  2.00M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  2.00M|        Option<*const u8>,
  185|  2.00M|        start,
  186|  2.00M|        end,
  187|  2.00M|        n1
  188|  2.00M|    )
  189|  2.00M|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  2.00M|        unsafe fn find_avx2(
   79|  2.00M|            $($needle: u8),+,
   80|  2.00M|            $hay_start: *const u8,
   81|  2.00M|            $hay_end: *const u8,
   82|  2.00M|        ) -> $retty {
   83|  2.00M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.00M|            $memchrty::new_unchecked($($needle),+)
   85|  2.00M|                .$memchrfind($hay_start, $hay_end)
   86|  2.00M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  5.89M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  5.89M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  5.89M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  5.89M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   268k|    fn as_usize(self) -> usize {
   27|   268k|        self as usize
   28|   268k|    }

_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs3BxoBVhxb2g_10sparesults:
   27|  2.00M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.00M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.00M|    // pointer between start and end.
   30|  2.00M|    unsafe {
   31|  2.00M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.00M|        })
   34|  2.00M|    }
   35|  2.00M|}
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  2.00M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  2.00M|            memchr_raw(needle, start, end)
   33|  2.00M|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  2.00M|unsafe fn memchr_raw(
  505|  2.00M|    needle: u8,
  506|  2.00M|    start: *const u8,
  507|  2.00M|    end: *const u8,
  508|  2.00M|) -> Option<*const u8> {
  509|  2.00M|    #[cfg(target_arch = "x86_64")]
  510|  2.00M|    {
  511|  2.00M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  2.00M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  2.00M|        // time. This function also handles using a fallback if neither AVX2
  514|  2.00M|        // nor SSE2 (unusual) are available.
  515|  2.00M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  2.00M|    }
  517|  2.00M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  2.00M|    {
  519|  2.00M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  2.00M|    }
  521|  2.00M|    #[cfg(target_arch = "aarch64")]
  522|  2.00M|    {
  523|  2.00M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  2.00M|    }
  525|  2.00M|    #[cfg(not(any(
  526|  2.00M|        target_arch = "x86_64",
  527|  2.00M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  2.00M|        target_arch = "aarch64"
  529|  2.00M|    )))]
  530|  2.00M|    {
  531|  2.00M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  2.00M|    }
  533|  2.00M|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  1.93M|    fn get_for_offset(self) -> u32 {
  127|  1.93M|        #[cfg(target_endian = "big")]
  128|  1.93M|        {
  129|  1.93M|            self.0.swap_bytes()
  130|  1.93M|        }
  131|  1.93M|        #[cfg(target_endian = "little")]
  132|  1.93M|        {
  133|  1.93M|            self.0
  134|  1.93M|        }
  135|  1.93M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  1.93M|    fn first_offset(self) -> usize {
  172|  1.93M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  1.93M|        // the bytes so we are in practice), where the most significant byte
  174|  1.93M|        // is at a higher address. That means the least significant bit that
  175|  1.93M|        // is set corresponds to the position of our first matching byte.
  176|  1.93M|        // That position corresponds to the number of zeros after the least
  177|  1.93M|        // significant bit.
  178|  1.93M|        self.get_for_offset().trailing_zeros() as usize
  179|  1.93M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  2.64M|    fn has_non_zero(self) -> bool {
  147|  2.64M|        self.0 != 0
  148|  2.64M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  46.7k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  46.7k|            _mm_loadu_si128(data as *const __m128i)
  219|  46.7k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  46.7k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  46.7k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  46.7k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  46.7k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  46.7k|            _mm_cmpeq_epi8(self, vector2)
  229|  46.7k|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   285k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   285k|        self.movemask().has_non_zero()
   65|   285k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  1.93M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  1.93M|            _mm256_loadu_si256(data as *const __m256i)
  268|  1.93M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  2.59M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  2.59M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  2.59M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  3.07M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  3.07M|            _mm256_cmpeq_epi8(self, vector2)
  278|  3.07M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  2.00M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  2.00M|            _mm_set1_epi8(byte as i8)
  209|  2.00M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  2.00M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  2.00M|            _mm256_set1_epi8(byte as i8)
  258|  2.00M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  1.14M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  1.14M|            _mm256_load_si256(data as *const __m256i)
  263|  1.14M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|   855k|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|   855k|            _mm256_or_si256(self, vector2)
  288|   855k|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs24IpJFTnVTQ_13libfuzzer_sys:
   49|  21.2k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  21.2k|        // An `Acquire` load is enough because that makes all the initialization
   51|  21.2k|        // operations visible to us, and, this being a fast path, weaker
   52|  21.2k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  21.2k|        // `SeqCst` operations on the slow path.
   54|  21.2k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  21.2k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs24IpJFTnVTQ_13libfuzzer_sys:
  963|  21.2k|        pub fn get(&self) -> Option<&T> {
  964|  21.2k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  21.2k|                None
  969|       |            }
  970|  21.2k|        }

_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsiVhMQ2GRKjW_5oxrdf:
  632|   176k|fn parse_langtag(
  633|   176k|    input: &str,
  634|   176k|    output: &mut impl OutputBuffer,
  635|   176k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   176k|    #[derive(PartialEq, Eq)]
  637|   176k|    enum State {
  638|   176k|        Start,
  639|   176k|        AfterLanguage,
  640|   176k|        AfterExtLang,
  641|   176k|        AfterScript,
  642|   176k|        AfterRegion,
  643|   176k|        InExtension { expected: bool },
  644|   176k|        InPrivateUse { expected: bool },
  645|   176k|    }
  646|   176k|
  647|   176k|    let mut state = State::Start;
  648|   176k|    let mut language_end = 0;
  649|   176k|    let mut extlang_end = 0;
  650|   176k|    let mut script_end = 0;
  651|   176k|    let mut region_end = 0;
  652|   176k|    let mut variant_end = 0;
  653|   176k|    let mut extension_end = 0;
  654|   176k|    let mut extlangs_count = 0;
  655|   431k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   431k|        if subtag.is_empty() {
  657|    128|            return Err(LanguageTagParseError {
  658|    128|                kind: TagParseErrorKind::EmptySubtag,
  659|    128|            });
  660|   431k|        }
  661|   431k|        if subtag.len() > 8 {
  662|      2|            return Err(LanguageTagParseError {
  663|      2|                kind: TagParseErrorKind::SubtagTooLong,
  664|      2|            });
  665|   431k|        }
  666|   431k|        if state == State::Start {
  667|       |            // Primary language
  668|   176k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|     71|                return Err(LanguageTagParseError {
  670|     71|                    kind: TagParseErrorKind::InvalidLanguage,
  671|     71|                });
  672|   176k|            }
  673|   176k|            language_end = end;
  674|   176k|            output.extend(to_lowercase(subtag));
  675|   176k|            if subtag.len() < 4 {
  676|   131k|                // extlangs are only allowed for short language tags
  677|   131k|                state = State::AfterLanguage;
  678|   131k|            } else {
  679|  44.4k|                state = State::AfterExtLang;
  680|  44.4k|            }
  681|   255k|        } else if let State::InPrivateUse { .. } = state {
  682|  1.51k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  1.51k|            }
  687|  1.51k|            output.push('-');
  688|  1.51k|            output.extend(to_lowercase(subtag));
  689|  1.51k|            state = State::InPrivateUse { expected: false };
  690|   253k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|    976|            if let State::InExtension { expected: true } = state {
  693|      1|                return Err(LanguageTagParseError {
  694|      1|                    kind: TagParseErrorKind::EmptyExtension,
  695|      1|                });
  696|    975|            }
  697|    975|            output.push('-');
  698|    975|            output.push('x');
  699|    975|            state = State::InPrivateUse { expected: true };
  700|   252k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  39.3k|            if let State::InExtension { expected: true } = state {
  703|      9|                return Err(LanguageTagParseError {
  704|      9|                    kind: TagParseErrorKind::EmptyExtension,
  705|      9|                });
  706|  39.3k|            }
  707|  39.3k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  39.3k|            output.push('-');
  709|  39.3k|            output.push(extension_tag);
  710|  39.3k|            state = State::InExtension { expected: true };
  711|   213k|        } else if let State::InExtension { .. } = state {
  712|  56.9k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  56.9k|            }
  717|  56.9k|            extension_end = end;
  718|  56.9k|            output.push('-');
  719|  56.9k|            output.extend(to_lowercase(subtag));
  720|  56.9k|            state = State::InExtension { expected: false };
  721|   156k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  50.1k|            extlangs_count += 1;
  723|  50.1k|            if extlangs_count > 3 {
  724|      1|                return Err(LanguageTagParseError {
  725|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|      1|                });
  727|  50.1k|            }
  728|  50.1k|            // valid extlangs
  729|  50.1k|            extlang_end = end;
  730|  50.1k|            output.push('-');
  731|  50.1k|            output.extend(to_lowercase(subtag));
  732|   106k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  77.0k|            && subtag.len() == 4
  734|  18.3k|            && is_alphabetic(subtag)
  735|  18.3k|        {
  736|  18.3k|            // Script
  737|  18.3k|            script_end = end;
  738|  18.3k|            output.push('-');
  739|  18.3k|            output.extend(to_uppercase_first(subtag));
  740|  18.3k|            state = State::AfterScript;
  741|  87.9k|        } else if (state == State::AfterLanguage
  742|  45.3k|            || state == State::AfterExtLang
  743|  29.2k|            || state == State::AfterScript)
  744|  71.0k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  30.9k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  40.1k|        {
  747|  40.1k|            // Region
  748|  40.1k|            region_end = end;
  749|  40.1k|            output.push('-');
  750|  40.1k|            output.extend(to_uppercase(subtag));
  751|  40.1k|            state = State::AfterRegion;
  752|  47.8k|        } else if (state == State::AfterLanguage
  753|  27.0k|            || state == State::AfterExtLang
  754|  21.4k|            || state == State::AfterScript
  755|  16.8k|            || state == State::AfterRegion)
  756|  47.8k|            && is_alphanumeric(subtag)
  757|  47.8k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|     12|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  47.8k|        {
  760|  47.8k|            // Variant
  761|  47.8k|            variant_end = end;
  762|  47.8k|            output.push('-');
  763|  47.8k|            output.extend(to_lowercase(subtag));
  764|  47.8k|            state = State::AfterRegion;
  765|  47.8k|        } else {
  766|     12|            return Err(LanguageTagParseError {
  767|     12|                kind: TagParseErrorKind::InvalidSubtag,
  768|     12|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   176k|    if let State::InExtension { expected: true } = state {
  774|      5|        return Err(LanguageTagParseError {
  775|      5|            kind: TagParseErrorKind::EmptyExtension,
  776|      5|        });
  777|   176k|    }
  778|   176k|    if let State::InPrivateUse { expected: true } = state {
  779|      1|        return Err(LanguageTagParseError {
  780|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|      1|        });
  782|   176k|    }
  783|   176k|
  784|   176k|    //We make sure we have not skipped anyone
  785|   176k|    if extlang_end < language_end {
  786|   141k|        extlang_end = language_end;
  787|   141k|    }
  788|   176k|    if script_end < extlang_end {
  789|   157k|        script_end = extlang_end;
  790|   157k|    }
  791|   176k|    if region_end < script_end {
  792|   136k|        region_end = script_end;
  793|   136k|    }
  794|   176k|    if variant_end < region_end {
  795|   144k|        variant_end = region_end;
  796|   144k|    }
  797|   176k|    if extension_end < variant_end {
  798|   140k|        extension_end = variant_end;
  799|   140k|    }
  800|       |
  801|   176k|    Ok(TagElementsPositions {
  802|   176k|        language_end,
  803|   176k|        extlang_end,
  804|   176k|        script_end,
  805|   176k|        region_end,
  806|   176k|        variant_end,
  807|   176k|        extension_end,
  808|   176k|    })
  809|   176k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsiVhMQ2GRKjW_5oxrdf:
  587|   183k|fn parse_language_tag(
  588|   183k|    input: &str,
  589|   183k|    output: &mut impl OutputBuffer,
  590|   183k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   183k|    if let Some(tag) = GRANDFATHEREDS
  593|   183k|        .iter()
  594|   183k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   183k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  6.79k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  6.79k|        } else if input.len() == 2 {
  612|      1|            Err(LanguageTagParseError {
  613|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      1|            })
  615|       |        } else {
  616|  6.79k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  6.79k|            Ok(TagElementsPositions {
  618|  6.79k|                language_end: input.len(),
  619|  6.79k|                extlang_end: input.len(),
  620|  6.79k|                script_end: input.len(),
  621|  6.79k|                region_end: input.len(),
  622|  6.79k|                variant_end: input.len(),
  623|  6.79k|                extension_end: input.len(),
  624|  6.79k|            })
  625|       |        }
  626|       |    } else {
  627|   176k|        parse_langtag(input, output)
  628|       |    }
  629|   183k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsiVhMQ2GRKjW_5oxrdf:
  571|  6.79k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsiVhMQ2GRKjW_5oxrdf:
  571|   332k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsiVhMQ2GRKjW_5oxrdf:
  571|  40.1k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsiVhMQ2GRKjW_5oxrdf:
  571|  18.3k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsiVhMQ2GRKjW_5oxrdf:
  594|  4.76M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsiVhMQ2GRKjW_5oxrdf:
   62|   183k|    pub fn into_inner(self) -> T {
   63|   183k|        self.tag
   64|   183k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsiVhMQ2GRKjW_5oxrdf:
   49|   183k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   183k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   183k|        Ok(Self { tag, positions })
   52|   183k|    }
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCsiVhMQ2GRKjW_5oxrdf:
  876|      4|fn is_numeric(s: &str) -> bool {
  877|      4|    s.chars().all(|x| x.is_ascii_digit())
  878|      4|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCsiVhMQ2GRKjW_5oxrdf:
  903|   332k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   332k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   332k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCsiVhMQ2GRKjW_5oxrdf:
  891|  40.1k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  40.1k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  40.1k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCsiVhMQ2GRKjW_5oxrdf:
  871|   332k|fn is_alphabetic(s: &str) -> bool {
  872|   332k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   332k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCsiVhMQ2GRKjW_5oxrdf:
  881|   145k|fn is_alphanumeric(s: &str) -> bool {
  882|   145k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|   145k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCsiVhMQ2GRKjW_5oxrdf:
  897|  18.3k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  18.3k|    let mut chars = s.chars();
  899|  18.3k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  18.3k|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCsiVhMQ2GRKjW_5oxrdf:
  886|  6.79k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  6.79k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  6.79k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCsiVhMQ2GRKjW_5oxrdf:
  850|   176k|    fn new(input: &'a str) -> Self {
  851|   176k|        Self {
  852|   176k|            split: input.split('-'),
  853|   176k|            position: 0,
  854|   176k|        }
  855|   176k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsiVhMQ2GRKjW_5oxrdf:
  563|   295k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsiVhMQ2GRKjW_5oxrdf:
  862|   608k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   608k|        let tag = self.split.next()?;
  864|   431k|        let tag_end = self.position + tag.len();
  865|   431k|        self.position = tag_end + 1;
  866|   431k|        Some((tag, tag_end))
  867|   608k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|   907k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|      4|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|   468k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  98.5k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsiVhMQ2GRKjW_5oxrdf:
 1590|  1.74k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|  1.74k|        Err(IriParseError { kind })
 1592|  1.74k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECsiVhMQ2GRKjW_5oxrdf:
 1556|  3.61M|    fn read_url_codepoint_or_echar(
 1557|  3.61M|        &mut self,
 1558|  3.61M|        c: char,
 1559|  3.61M|        valid: impl Fn(char) -> bool,
 1560|  3.61M|    ) -> Result<(), IriParseError> {
 1561|  3.61M|        if UNCHECKED || valid(c) {
 1562|  3.60M|            self.output.push(c);
 1563|  3.60M|            Ok(())
 1564|  1.77k|        } else if c == '%' {
 1565|  1.70k|            self.read_echar()
 1566|       |        } else {
 1567|     72|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  3.61M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECsiVhMQ2GRKjW_5oxrdf:
 1556|   175k|    fn read_url_codepoint_or_echar(
 1557|   175k|        &mut self,
 1558|   175k|        c: char,
 1559|   175k|        valid: impl Fn(char) -> bool,
 1560|   175k|    ) -> Result<(), IriParseError> {
 1561|   175k|        if UNCHECKED || valid(c) {
 1562|   170k|            self.output.push(c);
 1563|   170k|            Ok(())
 1564|  4.68k|        } else if c == '%' {
 1565|  4.62k|            self.read_echar()
 1566|       |        } else {
 1567|     58|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   175k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECsiVhMQ2GRKjW_5oxrdf:
 1556|  1.60M|    fn read_url_codepoint_or_echar(
 1557|  1.60M|        &mut self,
 1558|  1.60M|        c: char,
 1559|  1.60M|        valid: impl Fn(char) -> bool,
 1560|  1.60M|    ) -> Result<(), IriParseError> {
 1561|  1.60M|        if UNCHECKED || valid(c) {
 1562|  1.59M|            self.output.push(c);
 1563|  1.59M|            Ok(())
 1564|  3.06k|        } else if c == '%' {
 1565|  2.99k|            self.read_echar()
 1566|       |        } else {
 1567|     69|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  1.60M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECsiVhMQ2GRKjW_5oxrdf:
 1556|  2.54M|    fn read_url_codepoint_or_echar(
 1557|  2.54M|        &mut self,
 1558|  2.54M|        c: char,
 1559|  2.54M|        valid: impl Fn(char) -> bool,
 1560|  2.54M|    ) -> Result<(), IriParseError> {
 1561|  2.54M|        if UNCHECKED || valid(c) {
 1562|  2.54M|            self.output.push(c);
 1563|  2.54M|            Ok(())
 1564|  4.53k|        } else if c == '%' {
 1565|  4.52k|            self.read_echar()
 1566|       |        } else {
 1567|      6|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  2.54M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECsiVhMQ2GRKjW_5oxrdf:
 1556|  12.9k|    fn read_url_codepoint_or_echar(
 1557|  12.9k|        &mut self,
 1558|  12.9k|        c: char,
 1559|  12.9k|        valid: impl Fn(char) -> bool,
 1560|  12.9k|    ) -> Result<(), IriParseError> {
 1561|  12.9k|        if UNCHECKED || valid(c) {
 1562|  12.3k|            self.output.push(c);
 1563|  12.3k|            Ok(())
 1564|    604|        } else if c == '%' {
 1565|    471|            self.read_echar()
 1566|       |        } else {
 1567|    133|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  12.9k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECsiVhMQ2GRKjW_5oxrdf:
 1556|  2.48M|    fn read_url_codepoint_or_echar(
 1557|  2.48M|        &mut self,
 1558|  2.48M|        c: char,
 1559|  2.48M|        valid: impl Fn(char) -> bool,
 1560|  2.48M|    ) -> Result<(), IriParseError> {
 1561|  2.48M|        if UNCHECKED || valid(c) {
 1562|  2.47M|            self.output.push(c);
 1563|  2.47M|            Ok(())
 1564|  4.63k|        } else if c == '%' {
 1565|  4.52k|            self.read_echar()
 1566|       |        } else {
 1567|    110|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  2.48M|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0CsiVhMQ2GRKjW_5oxrdf:
 1516|  3.61M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|  3.61M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  3.61M|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsiVhMQ2GRKjW_5oxrdf:
 1574|  18.8k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsiVhMQ2GRKjW_5oxrdf:
 1575|  18.7k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0CsiVhMQ2GRKjW_5oxrdf:
 1530|   175k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   175k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   175k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0CsiVhMQ2GRKjW_5oxrdf:
 1541|  1.60M|            self.read_url_codepoint_or_echar(c, |c| {
 1542|  1.60M|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  1.60M|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0CsiVhMQ2GRKjW_5oxrdf:
 1364|  2.54M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|  2.54M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  2.54M|                    })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0CsiVhMQ2GRKjW_5oxrdf:
 1323|  12.9k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsiVhMQ2GRKjW_5oxrdf:
  185|   625k|    pub fn into_inner(self) -> T {
  186|   625k|        self.iri
  187|   625k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCsiVhMQ2GRKjW_5oxrdf:
  199|   626k|    pub fn is_absolute(&self) -> bool {
  200|   626k|        self.positions.scheme_end != 0
  201|   626k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsiVhMQ2GRKjW_5oxrdf:
   58|   628k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   628k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   626k|        Ok(Self { iri, positions })
   61|   628k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsiVhMQ2GRKjW_5oxrdf:
 1372|   335k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   335k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|  34.1k|            let start_position = self.input.position;
 1376|   242k|            while let Some(c) = self.input.next() {
 1377|   242k|                self.output.push(c);
 1378|   242k|                if c == ']' {
 1379|  34.1k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|  34.1k|                    if !UNCHECKED {
 1381|  34.1k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|  6.57k|                            self.validate_ip_v_future(ip)?;
 1383|  27.5k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|     13|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|  27.5k|                        }
 1386|      0|                    }
 1387|       |
 1388|  33.2k|                    let c = self.input.next();
 1389|  33.2k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  5.37k|                            self.output.push(':');
 1392|  5.37k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  27.7k|                            self.output_positions.authority_end = self.output.len();
 1396|  27.7k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|    131|                        Some(c) => {
 1399|    131|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|    131|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|   208k|                }
 1408|       |            }
 1409|     56|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|     56|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  2.78M|            loop {
 1419|  2.78M|                let c = self.input.next();
 1420|  2.78M|                match c {
 1421|       |                    Some(':') => {
 1422|  33.4k|                        self.output.push(':');
 1423|  33.4k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|   267k|                        self.output_positions.authority_end = self.output.len();
 1427|   267k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  2.48M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   335k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsiVhMQ2GRKjW_5oxrdf:
 1485|   563k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|  4.46M|        loop {
 1487|  4.46M|            let c = self.input.next();
 1488|  4.46M|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   852k|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|   852k|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|   852k|                    } else if c == Some('/') {
 1498|   289k|                        self.output.push('/');
 1499|   563k|                    }
 1500|       |
 1501|   852k|                    if c == Some('?') {
 1502|  29.6k|                        self.output_positions.path_end = self.output.len();
 1503|  29.6k|                        self.output.push('?');
 1504|  29.6k|                        return self.parse_query();
 1505|   823k|                    } else if c == Some('#') {
 1506|   270k|                        self.output_positions.path_end = self.output.len();
 1507|   270k|                        self.output_positions.query_end = self.output.len();
 1508|   270k|                        self.output.push('#');
 1509|   270k|                        return self.parse_fragment();
 1510|   552k|                    } else if c.is_none() {
 1511|   262k|                        self.output_positions.path_end = self.output.len();
 1512|   262k|                        self.output_positions.query_end = self.output.len();
 1513|   262k|                        return Ok(());
 1514|   289k|                    }
 1515|       |                }
 1516|  3.61M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|  3.61M|                })?,
 1519|       |            }
 1520|       |        }
 1521|   563k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsiVhMQ2GRKjW_5oxrdf:
 1435|  38.8k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|  55.1k|        loop {
 1437|  55.1k|            let c = self.input.next();
 1438|  55.1k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  38.7k|                    self.output_positions.authority_end = self.output.len();
 1441|  38.7k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  16.3k|                Some(c) => {
 1444|  16.3k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  16.3k|                        self.output.push(c)
 1446|       |                    } else {
 1447|     64|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  38.8k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsiVhMQ2GRKjW_5oxrdf:
 1571|  18.8k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|  18.8k|        let c1 = self.input.next();
 1573|  18.8k|        let c2 = self.input.next();
 1574|  18.8k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  18.7k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  18.7k|            self.output.push('%');
 1578|  18.7k|            self.output.push(c1.unwrap());
 1579|  18.7k|            self.output.push(c2.unwrap());
 1580|  18.7k|            Ok(())
 1581|       |        } else {
 1582|    120|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|    120|                Some('%'),
 1584|    120|                c1,
 1585|    120|                c2,
 1586|    120|            ]))
 1587|       |        }
 1588|  18.8k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsiVhMQ2GRKjW_5oxrdf:
 1523|  38.8k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   214k|        while let Some(c) = self.input.next() {
 1525|   175k|            if c == '#' {
 1526|    472|                self.output_positions.query_end = self.output.len();
 1527|    472|                self.output.push('#');
 1528|    472|                return self.parse_fragment();
 1529|       |            } else {
 1530|   175k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   175k|                })?
 1533|       |            }
 1534|       |        }
 1535|  38.2k|        self.output_positions.query_end = self.output.len();
 1536|  38.2k|        Ok(())
 1537|  38.8k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsiVhMQ2GRKjW_5oxrdf:
 1213|   626k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  2.23M|        loop {
 1215|  2.23M|            let c = self.input.next();
 1216|  2.23M|            match c {
 1217|  2.23M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  1.60M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   626k|                    self.output.push(':');
 1222|   626k|                    self.output_positions.scheme_end = self.output.len();
 1223|   626k|                    self.input_scheme_end = self.input.position;
 1224|   626k|                    return if self.input.starts_with('/') {
 1225|   366k|                        self.input.next();
 1226|   366k|                        self.output.push('/');
 1227|   366k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|   260k|                        self.output_positions.authority_end = self.output.len();
 1230|   260k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|    417|                    self.input = ParserInput {
 1235|    417|                        value: self.iri.chars(),
 1236|    417|                        position: 0,
 1237|    417|                    }; // reset
 1238|    417|                    self.output.clear();
 1239|    417|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   626k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsiVhMQ2GRKjW_5oxrdf:
 1539|   284k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|  1.88M|        while let Some(c) = self.input.next() {
 1541|  1.60M|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|  1.60M|            })?;
 1544|       |        }
 1545|   284k|        Ok(())
 1546|   284k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsiVhMQ2GRKjW_5oxrdf:
 1256|  1.93k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|  1.93k|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|  1.93k|            self.output_positions.scheme_end = 0;
 1305|  1.93k|            self.input_scheme_end = 0;
 1306|  1.93k|            if self.input.starts_with('/') {
 1307|    797|                self.input.next();
 1308|    797|                self.output.push('/');
 1309|    797|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|  1.13k|                self.output_positions.authority_end = 0;
 1312|  1.13k|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|  1.93k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsiVhMQ2GRKjW_5oxrdf:
 1346|   335k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  2.88M|        loop {
 1349|  2.88M|            let c = self.input.next();
 1350|  2.88M|            match c {
 1351|       |                Some('@') => {
 1352|  10.3k|                    self.output.push('@');
 1353|  10.3k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   325k|                    self.input = ParserInput {
 1357|   325k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   325k|                        position: self.input_scheme_end + 2,
 1359|   325k|                    };
 1360|   325k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   325k|                    return self.parse_host();
 1362|       |                }
 1363|  2.54M|                Some(c) => {
 1364|  2.54M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  2.54M|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   335k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsiVhMQ2GRKjW_5oxrdf:
 1454|   334k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   334k|        match c {
 1456|       |            None => {
 1457|  41.1k|                self.output_positions.path_end = self.output.len();
 1458|  41.1k|                self.output_positions.query_end = self.output.len();
 1459|  41.1k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  9.19k|                self.output_positions.path_end = self.output.len();
 1463|  9.19k|                self.output.push('?');
 1464|  9.19k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  13.2k|                self.output_positions.path_end = self.output.len();
 1468|  13.2k|                self.output_positions.query_end = self.output.len();
 1469|  13.2k|                self.output.push('#');
 1470|  13.2k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|   270k|                self.output.push('/');
 1474|   270k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   334k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsiVhMQ2GRKjW_5oxrdf:
 1199|   628k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   628k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      5|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      5|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   628k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|  1.51k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   628k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCsiVhMQ2GRKjW_5oxrdf:
 1317|  1.13k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|  13.9k|        while let Some(c) = self.input.front() {
 1319|  13.6k|            if matches!(c, '/' | '?' | '#') {
 1320|    680|                break;
 1321|  12.9k|            }
 1322|  12.9k|            self.input.next();
 1323|  12.9k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|    990|        self.parse_path()
 1326|  1.13k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCsiVhMQ2GRKjW_5oxrdf:
 1595|  6.57k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1596|  6.57k|        let mut chars = ip.chars();
 1597|       |
 1598|  6.57k|        let c = chars.next().ok_or(IriParseError {
 1599|  6.57k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1600|  6.57k|        })?;
 1601|  6.57k|        if !matches!(c, 'v' | 'V') {
 1602|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1603|  6.57k|        };
 1604|  6.57k|
 1605|  6.57k|        let mut with_a_version = false;
 1606|  15.9k|        for c in &mut chars {
 1607|  15.8k|            if c == '.' {
 1608|  6.37k|                break;
 1609|  9.52k|            } else if c.is_ascii_hexdigit() {
 1610|  9.35k|                with_a_version = true;
 1611|  9.35k|            } else {
 1612|    176|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1613|       |            }
 1614|       |        }
 1615|  6.40k|        if !with_a_version {
 1616|     48|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1617|     48|                chars.next().unwrap_or(']'),
 1618|     48|            ));
 1619|  6.35k|        }
 1620|  6.35k|
 1621|  6.35k|        if chars.as_str().is_empty() {
 1622|     20|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1623|  6.33k|        };
 1624|  93.3k|        for c in chars {
 1625|  87.6k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1626|    668|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1627|  86.9k|            }
 1628|       |        }
 1629|       |
 1630|  5.66k|        Ok(())
 1631|  6.57k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsiVhMQ2GRKjW_5oxrdf:
 1245|   366k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   366k|        if self.input.starts_with('/') {
 1247|   335k|            self.input.next();
 1248|   335k|            self.output.push('/');
 1249|   335k|            self.parse_authority()
 1250|       |        } else {
 1251|  31.3k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  31.3k|            self.parse_path()
 1253|       |        }
 1254|   366k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsiVhMQ2GRKjW_5oxrdf:
 1174|   628k|    fn parse(
 1175|   628k|        iri: &'a str,
 1176|   628k|        base: Option<IriRef<&'a str>>,
 1177|   628k|        output: &'a mut O,
 1178|   628k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   628k|        let mut parser = Self {
 1180|   628k|            iri,
 1181|   628k|            base,
 1182|   628k|            input: ParserInput {
 1183|   628k|                value: iri.chars(),
 1184|   628k|                position: 0,
 1185|   628k|            },
 1186|   628k|            output,
 1187|   628k|            output_positions: IriElementsPositions {
 1188|   628k|                scheme_end: 0,
 1189|   628k|                authority_end: 0,
 1190|   628k|                path_end: 0,
 1191|   628k|                query_end: 0,
 1192|   628k|            },
 1193|   628k|            input_scheme_end: 0,
 1194|   628k|        };
 1195|   628k|        parser.parse_scheme_start()?;
 1196|   626k|        Ok(parser.output_positions)
 1197|   628k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsiVhMQ2GRKjW_5oxrdf:
  665|   625k|    pub fn into_inner(self) -> T {
  666|   625k|        self.0.into_inner()
  667|   625k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsiVhMQ2GRKjW_5oxrdf:
  556|   628k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   628k|        IriRef::parse(iri)?.try_into()
  558|   628k|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsiVhMQ2GRKjW_5oxrdf:
  968|   626k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   626k|        if iri.is_absolute() {
  970|   625k|            Ok(Self(iri))
  971|       |        } else {
  972|  1.24k|            Err(IriParseError {
  973|  1.24k|                kind: IriParseErrorKind::NoScheme,
  974|  1.24k|            })
  975|       |        }
  976|   626k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCsiVhMQ2GRKjW_5oxrdf:
 1156|  1.33M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.33M|        self.value.as_str().starts_with(c)
 1158|  1.33M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCsiVhMQ2GRKjW_5oxrdf:
 1141|  15.5M|    fn next(&mut self) -> Option<char> {
 1142|  15.5M|        if let Some(head) = self.value.next() {
 1143|  14.8M|            self.position += head.len_utf8();
 1144|  14.8M|            Some(head)
 1145|       |        } else {
 1146|   655k|            None
 1147|       |        }
 1148|  15.5M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCsiVhMQ2GRKjW_5oxrdf:
 1151|   642k|    fn front(&self) -> Option<char> {
 1152|   642k|        self.value.clone().next()
 1153|   642k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsiVhMQ2GRKjW_5oxrdf:
 1092|  2.50M|    fn len(&self) -> usize {
 1093|  2.50M|        self.len
 1094|  2.50M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsiVhMQ2GRKjW_5oxrdf:
 1072|  14.5M|    fn push(&mut self, c: char) {
 1073|  14.5M|        self.len += c.len_utf8();
 1074|  14.5M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsiVhMQ2GRKjW_5oxrdf:
 1082|    417|    fn clear(&mut self) {
 1083|    417|        self.len = 0;
 1084|    417|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsiVhMQ2GRKjW_5oxrdf:
 1097|  1.70M|    fn as_str(&self) -> &str {
 1098|  1.70M|        ""
 1099|  1.70M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsiVhMQ2GRKjW_5oxrdf:
 1087|   325k|    fn truncate(&mut self, new_len: usize) {
 1088|   325k|        self.len = new_len;
 1089|   325k|    }
_RNvCs8SDT0Q3242W_5oxiri28is_iunreserved_or_sub_delims:
 1634|  10.4M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1635|  10.4M|    matches!(c,
 1636|  6.27M|        'a'..='z'
 1637|  1.36M|        | 'A'..='Z'
 1638|  2.01M|        | '0'..='9'
 1639|       |        | '!'
 1640|       |        | '$'
 1641|       |        | '&'
 1642|       |        | '\''
 1643|       |        | '('
 1644|       |        | ')'
 1645|       |        | '*'
 1646|       |        | '+'
 1647|       |        | ','
 1648|       |        | '-'
 1649|       |        | '.'
 1650|       |        | ';'
 1651|       |        | '='
 1652|       |        | '_'
 1653|       |        | '~'
 1654|   116k|        | '\u{A0}'..='\u{D7FF}'
 1655|  19.6k|        | '\u{F900}'..='\u{FDCF}'
 1656|  19.6k|        | '\u{FDF0}'..='\u{FFEF}'
 1657|  19.6k|        | '\u{10000}'..='\u{1FFFD}'
 1658|  19.6k|        | '\u{20000}'..='\u{2FFFD}'
 1659|  19.6k|        | '\u{30000}'..='\u{3FFFD}'
 1660|  19.6k|        | '\u{40000}'..='\u{4FFFD}'
 1661|  19.0k|        | '\u{50000}'..='\u{5FFFD}'
 1662|  19.0k|        | '\u{60000}'..='\u{6FFFD}'
 1663|  19.0k|        | '\u{70000}'..='\u{7FFFD}'
 1664|  19.0k|        | '\u{80000}'..='\u{8FFFD}'
 1665|  19.0k|        | '\u{90000}'..='\u{9FFFD}'
 1666|  19.0k|        | '\u{A0000}'..='\u{AFFFD}'
 1667|  19.0k|        | '\u{B0000}'..='\u{BFFFD}'
 1668|  19.0k|        | '\u{C0000}'..='\u{CFFFD}'
 1669|    627|        | '\u{D0000}'..='\u{DFFFD}'
 1670|    430|        | '\u{E1000}'..='\u{EFFFD}'
 1671|       |    )
 1672|  10.4M|}
_RNvCs8SDT0Q3242W_5oxiri27is_unreserved_or_sub_delims:
 1674|  87.6k|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1675|  87.6k|    matches!(c,
 1676|  19.7k|        'a'..='z'
 1677|  11.0k|        | 'A'..='Z'
 1678|  34.9k|        | '0'..='9'
 1679|       |        | '!'
 1680|       |        | '$'
 1681|       |        | '&'
 1682|       |        | '\''
 1683|       |        | '('
 1684|       |        | ')'
 1685|       |        | '*'
 1686|       |        | '+'
 1687|       |        | ','
 1688|       |        | '-'
 1689|       |        | '.'
 1690|       |        | ';'
 1691|       |        | '='
 1692|       |        | '_'
 1693|       |        | '~'
 1694|       |    )
 1695|  87.6k|}

_RNvXNtCsdelFS9W8VVu_9thiserror7displayRNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB2_9AsDisplay10as_displayCsiVhMQ2GRKjW_5oxrdf:
   19|     18|    fn as_display(&'a self) -> Self::Target {
   20|     18|        *self
   21|     18|    }
_RNvXNtCsdelFS9W8VVu_9thiserror7displayRNtNtCsiVhMQ2GRKjW_5oxrdf8variable22VariableNameParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|     18|    fn as_display(&'a self) -> Self::Target {
   20|     18|        *self
   21|     18|    }
_RNvXNtCsdelFS9W8VVu_9thiserror7displayRReNtB2_9AsDisplay10as_displayCskupW9u3pVUS_12oxsdatatypes:
   19|    124|    fn as_display(&'a self) -> Self::Target {
   20|    124|        *self
   21|    124|    }

_RNvNtCs8TUCMN7nV6g_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  21.2k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  21.2k|    let Ok(reader) = QueryResultsParser::from_format(format).for_slice(data) else {
    8|    232|        return;
    9|       |    };
   10|  21.0k|    match reader {
   11|  21.0k|        SliceQueryResultsParserOutput::Solutions(solutions) => {
   12|  21.0k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|  8.89k|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|  12.1k|            let mut serializer = QueryResultsSerializer::from_format(format)
   18|  12.1k|                .serialize_solutions_to_writer(
   19|  12.1k|                    Vec::new(),
   20|  12.1k|                    solutions
   21|  12.1k|                        .first()
   22|  12.1k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|  12.1k|                )
   24|  12.1k|                .unwrap();
   25|   937k|            for solution in &solutions {
   26|   925k|                serializer.serialize(solution).unwrap();
   27|   925k|            }
   28|  12.1k|            let serialized = serializer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|  12.1k|            if let SliceQueryResultsParserOutput::Solutions(roundtrip_solutions) =
   32|  12.1k|                QueryResultsParser::from_format(format)
   33|  12.1k|                    .for_slice(&serialized)
   34|  12.1k|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|  12.1k|                    .unwrap()
   36|       |            {
   37|  12.1k|                assert_eq!(
   38|  12.1k|                    roundtrip_solutions
   39|  12.1k|                        .collect::<Result<Vec<_>, _>>()
   40|  12.1k|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|  12.1k|                        .unwrap(),
   42|  12.1k|                    solutions
   43|  12.1k|                )
   44|      0|            }
   45|       |        }
   46|      7|        SliceQueryResultsParserOutput::Boolean(value) => {
   47|      7|            // We try to write again
   48|      7|            let mut serialized = Vec::new();
   49|      7|            QueryResultsSerializer::from_format(format)
   50|      7|                .serialize_boolean_to_writer(&mut serialized, value)
   51|      7|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      7|            if let SliceQueryResultsParserOutput::Boolean(roundtrip_value) =
   55|      7|                QueryResultsParser::from_format(format)
   56|      7|                    .for_slice(&serialized)
   57|      7|                    .unwrap()
   58|       |            {
   59|      7|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  21.2k|}
_RNCNvNtCs8TUCMN7nV6g_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|  12.0k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs8TUCMN7nV6g_13oxigraph_fuzz:
   88|   105k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   105k|        BlankNodeRef(match &self.0 {
   90|  23.7k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  81.6k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  81.6k|                id: *id,
   93|  81.6k|                str: str.as_str(),
   94|  81.6k|            },
   95|       |        })
   96|   105k|    }
_RNvMs1_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs8TUCMN7nV6g_13oxigraph_fuzz:
  179|   105k|    pub const fn as_str(self) -> &'a str {
  180|   105k|        match self.0 {
  181|  23.7k|            BlankNodeRefContent::Named(id) => id,
  182|  81.6k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   105k|    }
_RNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs8TUCMN7nV6g_13oxigraph_fuzz:
  265|  81.6k|    fn as_str(&self) -> &str {
  266|  81.6k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  81.6k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  81.6k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|   229k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|   229k|        let id = id.into();
   38|   229k|        validate_blank_node_identifier(&id)?;
   39|   228k|        Ok(Self::new_unchecked(id))
   40|   229k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|   228k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   228k|        let id = id.into();
   51|   228k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   174k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  54.1k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   228k|    }
_RNCNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  1.17M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   174k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   174k|        Self(BlankNodeContent::Anonymous {
   64|   174k|            id: id.to_ne_bytes(),
   65|   174k|            str: IdStr::new(id),
   66|   174k|        })
   67|   174k|    }
_RNvMs7_NtCsiVhMQ2GRKjW_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   174k|    fn new(id: u128) -> Self {
  259|   174k|        let mut str = [0; 32];
  260|   174k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   174k|        Self(str)
  262|   174k|    }
_RNvNtCsiVhMQ2GRKjW_5oxrdf10blank_node30validate_blank_node_identifier:
  271|   229k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|   229k|    let mut chars = id.chars();
  273|   229k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|   228k|    match front {
  275|   228k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  26.7k|        | 'A'..='Z'
  279|  19.6k|        | 'a'..='z'
  280|  6.97k|        | '\u{00C0}'..='\u{00D6}'
  281|  6.97k|        | '\u{00D8}'..='\u{00F6}'
  282|  6.96k|        | '\u{00F8}'..='\u{02FF}'
  283|  6.87k|        | '\u{0370}'..='\u{037D}'
  284|  6.87k|        | '\u{037F}'..='\u{1FFF}'
  285|    886|        | '\u{200C}'..='\u{200D}'
  286|    886|        | '\u{2070}'..='\u{218F}'
  287|    767|        | '\u{2C00}'..='\u{2FEF}'
  288|    767|        | '\u{3001}'..='\u{D7FF}'
  289|    469|        | '\u{F900}'..='\u{FDCF}'
  290|    469|        | '\u{FDF0}'..='\u{FFFD}'
  291|   228k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|     53|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|  2.81M|    for c in chars {
  295|  2.58M|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|  2.56M|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  13.9k|            | '\u{0300}'..='\u{036F}'
  301|  4.31k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|   358k|            | 'A'..='Z'
  305|   224k|            | 'a'..='z'
  306|  14.4k|            | '\u{00C0}'..='\u{00D6}'
  307|  14.4k|            | '\u{00D8}'..='\u{00F6}'
  308|  14.4k|            | '\u{00F8}'..='\u{02FF}'
  309|  13.9k|            | '\u{0370}'..='\u{037D}'
  310|  13.9k|            | '\u{037F}'..='\u{1FFF}'
  311|  4.31k|            | '\u{200C}'..='\u{200D}'
  312|  4.31k|            | '\u{2070}'..='\u{218F}'
  313|  4.24k|            | '\u{2C00}'..='\u{2FEF}'
  314|  4.24k|            | '\u{3001}'..='\u{D7FF}'
  315|  3.64k|            | '\u{F900}'..='\u{FDCF}'
  316|  3.64k|            | '\u{FDF0}'..='\u{FFFD}'
  317|  2.58M|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|     92|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|   228k|    if id.ends_with('.') {
  324|      0|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|   228k|        Ok(())
  327|       |    }
  328|   229k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf10blank_node13to_integer_idB3_:
  331|   228k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   228k|    let digits = id.as_bytes();
  333|   228k|    let mut value: u128 = 0;
  334|   228k|    if let None | Some(b'0') = digits.first() {
  335|  11.7k|        return None; // No empty string or leading zeros
  336|   216k|    }
  337|  2.73M|    for digit in digits {
  338|  2.56M|        value = value.checked_mul(16)?.checked_add(
  339|  2.55M|            match *digit {
  340|  2.55M|                b'0'..=b'9' => digit - b'0',
  341|   193k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  37.0k|                _ => return None,
  343|       |            }
  344|  2.52M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   174k|    Some(value)
  348|   228k|}

_RNvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB2_7Literal6as_refCs8TUCMN7nV6g_13oxigraph_fuzz:
  129|   498k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   498k|        LiteralRef(match &self.0 {
  131|  10.6k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  78.0k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  78.0k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   409k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   409k|                value,
  137|   409k|                datatype: datatype.as_ref(),
  138|   409k|            },
  139|       |        })
  140|   498k|    }
_RNvMst_NtCsiVhMQ2GRKjW_5oxrdf7literalNtB5_10LiteralRef5valueCs8TUCMN7nV6g_13oxigraph_fuzz:
  488|   498k|    pub const fn value(self) -> &'a str {
  489|   498k|        match self.0 {
  490|  10.6k|            LiteralRefContent::String(value)
  491|  78.0k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|   498k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|   498k|        }
  494|   498k|    }
_RNvMst_NtCsiVhMQ2GRKjW_5oxrdf7literalNtB5_10LiteralRef8datatypeCs8TUCMN7nV6g_13oxigraph_fuzz:
  513|   420k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|   420k|        match self.0 {
  515|  10.6k|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|   409k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|   420k|    }
_RNvMst_NtCsiVhMQ2GRKjW_5oxrdf7literalNtB5_10LiteralRef8languageCs8TUCMN7nV6g_13oxigraph_fuzz:
  501|   498k|    pub const fn language(self) -> Option<&'a str> {
  502|   498k|        match self.0 {
  503|  78.0k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|   420k|            _ => None,
  505|       |        }
  506|   498k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  21.6k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  21.6k|        Self(LiteralContent::String(value.into()))
   49|  21.6k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|   252k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   252k|        let value = value.into();
   55|   252k|        let datatype = datatype.into();
   56|   252k|        Self(if datatype == xsd::STRING {
   57|  1.01k|            LiteralContent::String(value)
   58|       |        } else {
   59|   251k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   252k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   611k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   611k|        let value = value.into();
   55|   611k|        let datatype = datatype.into();
   56|   611k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   611k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   611k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringReEB5_:
   65|   183k|    pub fn new_language_tagged_literal(
   66|   183k|        value: impl Into<String>,
   67|   183k|        language: impl Into<String>,
   68|   183k|    ) -> Result<Self, LanguageTagParseError> {
   69|   183k|        let mut language = language.into();
   70|   183k|        language.make_ascii_lowercase();
   71|   183k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|   183k|            value,
   73|   183k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|   183k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|   183k|    pub fn new_language_tagged_literal_unchecked(
   86|   183k|        value: impl Into<String>,
   87|   183k|        language: impl Into<String>,
   88|   183k|    ) -> Self {
   89|   183k|        Self(LiteralContent::LanguageTaggedString {
   90|   183k|            value: value.into(),
   91|   183k|            language: language.into(),
   92|   183k|        })
   93|   183k|    }

_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs8TUCMN7nV6g_13oxigraph_fuzz:
   54|   554k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   554k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   554k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs8TUCMN7nV6g_13oxigraph_fuzz:
  128|   554k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   554k|        Self { iri }
  130|   554k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs8TUCMN7nV6g_13oxigraph_fuzz:
  133|   368k|    pub const fn as_str(self) -> &'a str {
  134|   368k|        self.iri
  135|   368k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|   628k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|   628k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|   628k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   625k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   625k|        Self { iri: iri.into() }
   41|   625k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   611k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   611k|        Self { iri: iri.into() }
   41|   611k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|   625k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|   625k|        Self::new_unchecked(iri.into_inner())
   31|   625k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   864k|    pub fn as_str(&self) -> &str {
   45|   864k|        self.iri.as_str()
   46|   864k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   864k|    pub const fn as_str(self) -> &'a str {
  134|   864k|        self.iri
  135|   864k|    }
_RNvMs4_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   611k|    pub fn into_owned(self) -> NamedNode {
  139|   611k|        NamedNode::new_unchecked(self.iri)
  140|   611k|    }
_RNvXs6_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   611k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   611k|        node.into_owned()
  154|   611k|    }
_RNvXs9_NtCsiVhMQ2GRKjW_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   864k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   864k|        self.as_str() == other.as_str()
  175|   864k|    }

_RNvXs1_NtCsiVhMQ2GRKjW_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  134|  1.36M|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  135|  1.36M|        let (term, left) = read_term(s, 0)?;
  136|  1.36M|        if !left.is_empty() {
  137|  1.32k|            return Err(Self::Err::msg("Invalid term serialization"));
  138|  1.35M|        }
  139|  1.35M|        Ok(term)
  140|  1.36M|    }
_RNvXs4_NtCsiVhMQ2GRKjW_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  228|  29.4k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  229|  29.4k|        if !s.starts_with('?') && !s.starts_with('$') {
  230|    124|            return Err(Self::Err::msg(
  231|    124|                "Variable serialization should start with ? or $",
  232|    124|            ));
  233|  29.2k|        }
  234|  29.2k|        Self::new(&s[1..]).map_err(|error| {
  235|       |            TermParseError(TermParseErrorKind::Variable {
  236|       |                value: s.to_owned(),
  237|       |                error,
  238|       |            })
  239|  29.2k|        })
  240|  29.4k|    }
_RNCNvXs4_NtCsiVhMQ2GRKjW_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str0B9_:
  234|     18|        Self::new(&s[1..]).map_err(|error| {
  235|     18|            TermParseError(TermParseErrorKind::Variable {
  236|     18|                value: s.to_owned(),
  237|     18|                error,
  238|     18|            })
  239|     18|        })
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_named_node0B5_:
  248|    524|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_named_nodes_0B5_:
  251|  2.98k|        let term = NamedNode::new(value).map_err(|error| {
  252|  2.98k|            TermParseError(TermParseErrorKind::Iri {
  253|  2.98k|                value: value.to_owned(),
  254|  2.98k|                error,
  255|  2.98k|            })
  256|  2.98k|        })?;
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_blank_node0B5_:
  269|  2.85M|            .find(|v: char| {
  270|  2.85M|                v.is_whitespace()
  271|  2.83M|                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  272|  2.85M|            })
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_blank_nodes_0B5_:
  282|    639|        let term = BlankNode::new(value).map_err(|error| {
  283|    639|            TermParseError(TermParseErrorKind::BlankNode {
  284|    639|                value: value.to_owned(),
  285|    639|                error,
  286|    639|            })
  287|    639|        })?;
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser12read_literal0B5_:
  307|  1.70M|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser12read_literals_0B5_:
  312|    231|                                |error| {
  313|    231|                                    TermParseError(TermParseErrorKind::LanguageTag {
  314|    231|                                        value: language.to_owned(),
  315|    231|                                        error,
  316|    231|                                    })
  317|    231|                                },
_RNCNvNtCsiVhMQ2GRKjW_5oxrdf6parser14read_hexa_char0B5_:
  501|     30|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_named_node:
  243|   629k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  244|   629k|    let s = s.trim();
  245|   629k|    if let Some(remain) = s.strip_prefix('<') {
  246|   628k|        let end = remain
  247|   628k|            .find('>')
  248|   628k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  249|   628k|        let (value, remain) = remain.split_at(end);
  250|   628k|        let remain = &remain[1..];
  251|   628k|        let term = NamedNode::new(value).map_err(|error| {
  252|       |            TermParseError(TermParseErrorKind::Iri {
  253|       |                value: value.to_owned(),
  254|       |                error,
  255|       |            })
  256|   628k|        })?;
  257|   625k|        Ok((term, remain))
  258|       |    } else {
  259|    341|        Err(TermParseError::msg(
  260|    341|            "Named node serialization should start with a <",
  261|    341|        ))
  262|       |    }
  263|   629k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser15read_blank_node:
  265|   229k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  266|   229k|    let s = s.trim();
  267|   229k|    if let Some(remain) = s.strip_prefix("_:") {
  268|   229k|        let mut end = remain
  269|   229k|            .find(|v: char| {
  270|       |                v.is_whitespace()
  271|       |                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  272|   229k|            })
  273|   229k|            .unwrap_or(remain.len());
  274|   229k|        if let Some(pos) = remain[..end].find("..") {
  275|      4|            end = pos;
  276|   229k|        }
  277|   229k|        if remain[..end].ends_with('.') {
  278|      6|            // It can't end with '.'
  279|      6|            end -= 1;
  280|   229k|        }
  281|   229k|        let (value, remain) = remain.split_at(end);
  282|   229k|        let term = BlankNode::new(value).map_err(|error| {
  283|       |            TermParseError(TermParseErrorKind::BlankNode {
  284|       |                value: value.to_owned(),
  285|       |                error,
  286|       |            })
  287|   229k|        })?;
  288|   228k|        Ok((term, remain))
  289|       |    } else {
  290|     57|        Err(TermParseError::msg(
  291|     57|            "Blank node serialization should start with '_:'",
  292|     57|        ))
  293|       |    }
  294|   229k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser12read_literal:
  296|  1.07M|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  297|  1.07M|    let s = s.trim();
  298|  1.07M|    if let Some(s) = s.strip_prefix('"') {
  299|   458k|        let mut value = String::with_capacity(s.len());
  300|   458k|        let mut chars = s.chars();
  301|  4.94M|        while let Some(c) = chars.next() {
  302|  4.94M|            match c {
  303|       |                '"' => {
  304|   457k|                    let remain = chars.as_str();
  305|   457k|                    return if let Some(remain) = remain.strip_prefix('@') {
  306|   183k|                        let end = remain
  307|   183k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  308|   183k|                            .unwrap_or(remain.len());
  309|   183k|                        let (language, remain) = remain.split_at(end);
  310|   183k|                        Ok((
  311|   183k|                            Literal::new_language_tagged_literal(value, language).map_err(
  312|   183k|                                |error| {
  313|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  314|       |                                        value: language.to_owned(),
  315|       |                                        error,
  316|       |                                    })
  317|   183k|                                },
  318|   183k|                            )?,
  319|   183k|                            remain,
  320|       |                        ))
  321|   274k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  322|   252k|                        let (datatype, remain) = read_named_node(remain)?;
  323|   252k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  324|       |                    } else {
  325|  21.6k|                        Ok((Literal::new_simple_literal(value), remain))
  326|       |                    };
  327|       |                }
  328|       |                '\\' => {
  329|  94.2k|                    if let Some(c) = chars.next() {
  330|  94.2k|                        value.push(match c {
  331|  4.52k|                            't' => '\t',
  332|  3.72k|                            'b' => '\u{08}',
  333|  11.9k|                            'n' => '\n',
  334|  7.53k|                            'r' => '\r',
  335|  3.69k|                            'f' => '\u{0C}',
  336|  18.9k|                            '"' => '"',
  337|    706|                            '\'' => '\'',
  338|  23.9k|                            '\\' => '\\',
  339|  15.6k|                            'u' => read_hexa_char(&mut chars, 4)?,
  340|  3.54k|                            'U' => read_hexa_char(&mut chars, 8)?,
  341|     30|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  342|       |                        })
  343|       |                    } else {
  344|      6|                        return Err(TermParseError::msg("Unexpected literal end"));
  345|       |                    }
  346|       |                }
  347|  4.39M|                _ => value.push(c),
  348|       |            }
  349|       |        }
  350|    137|        Err(TermParseError::msg("Unexpected literal end"))
  351|   612k|    } else if let Some(remain) = s.strip_prefix("true") {
  352|  22.4k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  353|   589k|    } else if let Some(remain) = s.strip_prefix("false") {
  354|  21.3k|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  355|       |    } else {
  356|   568k|        let input = s.as_bytes();
  357|   568k|        if input.is_empty() {
  358|    142|            return Err(TermParseError::msg("Empty term serialization"));
  359|   568k|        }
  360|       |
  361|   568k|        let mut cursor = match input.first() {
  362|  97.3k|            Some(b'+' | b'-') => 1,
  363|   471k|            _ => 0,
  364|       |        };
  365|   568k|        let mut with_dot = false;
  366|   568k|
  367|   568k|        let mut count_before: usize = 0;
  368|  1.38M|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  369|   820k|            count_before += 1;
  370|   820k|            cursor += 1;
  371|   820k|        }
  372|       |
  373|   568k|        let mut count_after: usize = 0;
  374|   568k|        if cursor < input.len() && input[cursor] == b'.' {
  375|   179k|            with_dot = true;
  376|   179k|            cursor += 1;
  377|   475k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  378|   295k|                count_after += 1;
  379|   295k|                cursor += 1;
  380|   295k|            }
  381|   388k|        }
  382|       |
  383|   568k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  384|   212k|            cursor += 1;
  385|   212k|            cursor += match input.get(cursor) {
  386|  2.99k|                Some(b'+' | b'-') => 1,
  387|   209k|                _ => 0,
  388|       |            };
  389|   212k|            let mut count_exponent = 0;
  390|   673k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  391|   460k|                count_exponent += 1;
  392|   460k|                cursor += 1;
  393|   460k|            }
  394|   212k|            if count_exponent > 0 {
  395|   212k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  396|       |            } else {
  397|     13|                Err(TermParseError::msg(
  398|     13|                    "Double serialization with an invalid exponent",
  399|     13|                ))
  400|       |            }
  401|   356k|        } else if with_dot {
  402|   131k|            if count_after > 0 {
  403|   131k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  404|       |            } else {
  405|     66|                Err(TermParseError::msg(
  406|     66|                    "Decimal serialization without floating part",
  407|     66|                ))
  408|       |            }
  409|   224k|        } else if count_before > 0 {
  410|   223k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  411|       |        } else {
  412|    364|            Err(TermParseError::msg("Empty integer serialization"))
  413|       |        }
  414|       |    }
  415|  1.07M|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser9read_term:
  417|  1.70M|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  418|  1.70M|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  419|    213|        return Err(TermParseError::msg(
  420|    213|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  421|    213|        ));
  422|  1.70M|    }
  423|  1.70M|    let s = s.trim();
  424|       |    #[allow(unused_variables)]
  425|  1.70M|    if let Some(remain) = s.strip_prefix("<<") {
  426|       |        #[cfg(feature = "rdf-star")]
  427|       |        {
  428|   183k|            let (triple, remain) = read_triple(remain, number_of_recursive_calls + 1)?;
  429|   131k|            let remain = remain.trim_start();
  430|   131k|            if let Some(remain) = remain.strip_prefix(">>") {
  431|   130k|                Ok((triple.into(), remain))
  432|       |            } else {
  433|    961|                Err(TermParseError::msg(
  434|    961|                    "Nested triple serialization should be enclosed between << and >>",
  435|    961|                ))
  436|       |            }
  437|       |        }
  438|       |        #[cfg(not(feature = "rdf-star"))]
  439|       |        {
  440|       |            Err(TermParseError::msg("RDF-star is not supported"))
  441|       |        }
  442|  1.52M|    } else if s.starts_with('<') {
  443|   221k|        let (term, remain) = read_named_node(s)?;
  444|   218k|        Ok((term.into(), remain))
  445|  1.29M|    } else if s.starts_with('_') {
  446|   229k|        let (term, remain) = read_blank_node(s)?;
  447|   228k|        Ok((term.into(), remain))
  448|       |    } else {
  449|  1.07M|        let (term, remain) = read_literal(s)?;
  450|  1.06M|        Ok((term.into(), remain))
  451|       |    }
  452|  1.70M|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser11read_triple:
  454|   183k|fn read_triple(
  455|   183k|    s: &str,
  456|   183k|    number_of_recursive_calls: usize,
  457|   183k|) -> Result<(Triple, &str), TermParseError> {
  458|   183k|    let s = s.trim();
  459|   183k|    let (subject, remain) = read_term(s, number_of_recursive_calls + 1)?;
  460|   154k|    let (predicate, remain) = read_named_node(remain)?;
  461|   153k|    let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  462|       |    Ok((
  463|       |        Triple {
  464|   131k|            subject: match subject {
  465|  54.2k|                Term::NamedNode(s) => s.into(),
  466|  23.6k|                Term::BlankNode(s) => s.into(),
  467|       |                Term::Literal(_) => {
  468|    179|                    return Err(TermParseError::msg(
  469|    179|                        "Literals are not allowed in subject position",
  470|    179|                    ));
  471|       |                }
  472|       |                #[cfg(feature = "rdf-star")]
  473|  53.1k|                Term::Triple(s) => Subject::Triple(s),
  474|       |            },
  475|   131k|            predicate,
  476|   131k|            object,
  477|   131k|        },
  478|   131k|        remain,
  479|       |    ))
  480|   183k|}
_RNvNtCsiVhMQ2GRKjW_5oxrdf6parser14read_hexa_char:
  482|  19.1k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  483|  19.1k|    let mut value = 0;
  484|  19.1k|    for _ in 0..len {
  485|  90.4k|        if let Some(c) = input.next() {
  486|  90.4k|            value = value * 16
  487|  90.4k|                + match c {
  488|  90.3k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  489|  18.1k|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  490|  13.2k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  491|       |                    _ => {
  492|    119|                        return Err(TermParseError::msg(
  493|    119|                            "Unexpected character in a unicode escape",
  494|    119|                        ));
  495|       |                    }
  496|       |                }
  497|       |        } else {
  498|     66|            return Err(TermParseError::msg("Unexpected literal string end"));
  499|       |        }
  500|       |    }
  501|  18.9k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  502|  19.1k|}
_RNvMs5_NtCsiVhMQ2GRKjW_5oxrdf6parserNtB5_14TermParseError3msg:
  534|  4.69k|    pub(crate) fn msg(msg: &'static str) -> Self {
  535|  4.69k|        Self(TermParseErrorKind::Msg(msg))
  536|  4.69k|    }
_RNvXs8_NtCsiVhMQ2GRKjW_5oxrdf6parserNtB5_14TermParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  505|    142|#[derive(Debug, thiserror::Error)]
_RNvXsc_NtCsiVhMQ2GRKjW_5oxrdf6parserNtB5_18TermParseErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  510|    142|#[derive(Debug, thiserror::Error)]

_RNvMsc_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7Subject6as_refCs8TUCMN7nV6g_13oxigraph_fuzz:
  181|  50.8k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  50.8k|        match self {
  183|  20.3k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  11.3k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  19.1k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  50.8k|    }
_RNvMsy_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4Term6as_refCs8TUCMN7nV6g_13oxigraph_fuzz:
  418|   697k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   697k|        match self {
  420|  73.4k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|  93.9k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|   498k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|  31.7k|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   697k|    }
_RNvXs13_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_7SubjectE4fromCs8TUCMN7nV6g_13oxigraph_fuzz:
  746|  50.8k|    fn from(node: &'a Subject) -> Self {
  747|  50.8k|        node.as_ref().into()
  748|  50.8k|    }
_RNvXs14_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4TermE4fromCs8TUCMN7nV6g_13oxigraph_fuzz:
  753|   697k|    fn from(node: &'a Term) -> Self {
  754|   697k|        node.as_ref()
  755|   697k|    }
_RNvXsU_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCs8TUCMN7nV6g_13oxigraph_fuzz:
  674|  50.8k|    fn from(node: &'a NamedNode) -> Self {
  675|  50.8k|        node.as_ref().into()
  676|  50.8k|    }
_RNvXs12_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtB6_10SubjectRefE4fromCs3BxoBVhxb2g_10sparesults:
  734|  50.8k|    fn from(node: SubjectRef<'a>) -> Self {
  735|  50.8k|        match node {
  736|  20.3k|            SubjectRef::NamedNode(node) => node.into(),
  737|  11.3k|            SubjectRef::BlankNode(node) => node.into(),
  738|       |            #[cfg(feature = "rdf-star")]
  739|  19.1k|            SubjectRef::Triple(triple) => triple.into(),
  740|       |        }
  741|  50.8k|    }
_RNvXsT_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs3BxoBVhxb2g_10sparesults:
  667|   295k|    fn from(node: NamedNodeRef<'a>) -> Self {
  668|   295k|        Self::NamedNode(node)
  669|   295k|    }
_RNvXsV_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs3BxoBVhxb2g_10sparesults:
  681|  11.3k|    fn from(node: BlankNodeRef<'a>) -> Self {
  682|  11.3k|        Self::BlankNode(node)
  683|  11.3k|    }
_RNvXsZ_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_6TripleE4fromCs3BxoBVhxb2g_10sparesults:
  710|  19.1k|    fn from(node: &'a Triple) -> Self {
  711|  19.1k|        Self::Triple(node)
  712|  19.1k|    }
_RNvXse_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  54.2k|    fn from(node: NamedNode) -> Self {
  201|  54.2k|        Self::NamedNode(node)
  202|  54.2k|    }
_RNvXsg_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  23.6k|    fn from(node: BlankNode) -> Self {
  215|  23.6k|        Self::BlankNode(node)
  216|  23.6k|    }
_RNvXsA_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|   218k|    fn from(node: NamedNode) -> Self {
  439|   218k|        Self::NamedNode(node)
  440|   218k|    }
_RNvXsC_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|   228k|    fn from(node: BlankNode) -> Self {
  453|   228k|        Self::BlankNode(node)
  454|   228k|    }
_RNvXsE_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|  1.06M|    fn from(literal: Literal) -> Self {
  467|  1.06M|        Self::Literal(literal)
  468|  1.06M|    }
_RNvXsG_NtCsiVhMQ2GRKjW_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  481|   130k|    fn from(triple: Triple) -> Self {
  482|   130k|        Self::Triple(Box::new(triple))
  483|   130k|    }

_RNvMNtCsiVhMQ2GRKjW_5oxrdf8variableNtB2_8Variable6as_refCs8TUCMN7nV6g_13oxigraph_fuzz:
   50|  1.29M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  1.29M|        VariableRef { name: &self.name }
   52|  1.29M|    }
_RNvXs2_NtCsiVhMQ2GRKjW_5oxrdf8variableNtB5_11VariableRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_8VariableE4fromCs8TUCMN7nV6g_13oxigraph_fuzz:
  123|   646k|    fn from(variable: &'a Variable) -> Self {
  124|   646k|        variable.as_ref()
  125|   646k|    }
_RNvXs5_NtCsiVhMQ2GRKjW_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs8TUCMN7nV6g_13oxigraph_fuzz:
  144|   650k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   650k|        self.as_ref() == *other
  146|   650k|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf8variableNtB2_8Variable6as_refCs3BxoBVhxb2g_10sparesults:
   50|  2.59M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  2.59M|        VariableRef { name: &self.name }
   52|  2.59M|    }
_RNvMNtCsiVhMQ2GRKjW_5oxrdf8variableNtB2_8Variable6as_strCs3BxoBVhxb2g_10sparesults:
   40|  12.2k|    pub fn as_str(&self) -> &str {
   41|  12.2k|        &self.name
   42|  12.2k|    }
_RNvXs1_NtCsiVhMQ2GRKjW_5oxrdf8variableNtB5_11VariableRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3BxoBVhxb2g_10sparesults:
  116|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|     10|        write!(f, "?{}", self.name)
  118|     10|    }
_RNvXs5_NtCsiVhMQ2GRKjW_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs3BxoBVhxb2g_10sparesults:
  144|  1.30M|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|  1.30M|        self.as_ref() == *other
  146|  1.30M|    }
_RNvXs_NtCsiVhMQ2GRKjW_5oxrdf8variableNtB4_8VariableNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3BxoBVhxb2g_10sparesults:
   57|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|     10|        self.as_ref().fmt(f)
   59|     10|    }
_RNvNtCsiVhMQ2GRKjW_5oxrdf8variable28validate_variable_identifier:
  163|  29.2k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  29.2k|    let mut chars = id.chars();
  165|  29.2k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  29.2k|    match front {
  167|  29.2k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  13.8k|        | 'A'..='Z'
  171|  4.23k|        | 'a'..='z'
  172|    186|        | '\u{00C0}'..='\u{00D6}'
  173|    186|        | '\u{00D8}'..='\u{00F6}'
  174|    178|        | '\u{00F8}'..='\u{02FF}'
  175|    178|        | '\u{0370}'..='\u{037D}'
  176|    178|        | '\u{037F}'..='\u{1FFF}'
  177|     43|        | '\u{200C}'..='\u{200D}'
  178|     43|        | '\u{2070}'..='\u{218F}'
  179|     24|        | '\u{2C00}'..='\u{2FEF}'
  180|     24|        | '\u{3001}'..='\u{D7FF}'
  181|      6|        | '\u{F900}'..='\u{FDCF}'
  182|      6|        | '\u{FDF0}'..='\u{FFFD}'
  183|  29.2k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      6|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  63.2k|    for c in chars {
  187|  33.9k|        match c {
  188|  33.9k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  3.02k|            | '\u{0300}'..='\u{036F}'
  191|    691|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  14.1k|            | 'A'..='Z'
  194|  6.52k|            | 'a'..='z'
  195|  3.03k|            | '\u{00C0}'..='\u{00D6}'
  196|  3.03k|            | '\u{00D8}'..='\u{00F6}'
  197|  3.02k|            | '\u{00F8}'..='\u{02FF}'
  198|  3.02k|            | '\u{0370}'..='\u{037D}'
  199|  3.02k|            | '\u{037F}'..='\u{1FFF}'
  200|    691|            | '\u{200C}'..='\u{200D}'
  201|    691|            | '\u{2070}'..='\u{218F}'
  202|    691|            | '\u{2C00}'..='\u{2FEF}'
  203|    690|            | '\u{3001}'..='\u{D7FF}'
  204|    592|            | '\u{F900}'..='\u{FDCF}'
  205|    592|            | '\u{FDF0}'..='\u{FFFD}'
  206|  33.9k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      9|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  29.2k|    Ok(())
  211|  29.2k|}
_RNvXsr_NtCsiVhMQ2GRKjW_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  214|     18|#[derive(Debug, thiserror::Error)]
_RINvMNtCsiVhMQ2GRKjW_5oxrdf8variableNtB3_8Variable3newReEB5_:
   22|  29.2k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  29.2k|        let name = name.into();
   24|  29.2k|        validate_variable_identifier(&name)?;
   25|  29.2k|        Ok(Self::new_unchecked(name))
   26|  29.2k|    }
_RINvMNtCsiVhMQ2GRKjW_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   35|  29.2k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  29.2k|        Self { name: name.into() }
   37|  29.2k|    }

_RINvMs0_NtCs3BxoBVhxb2g_10sparesults3csvINtB6_28WriterTsvSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9serializeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB3e_25WriterSolutionsSerializerB1c_E9serializeRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableRNtNtB4n_6triple4TermRNtB2M_13QuerySolutionE0EECs8TUCMN7nV6g_13oxigraph_fuzz:
  200|   925k|    pub fn serialize<'a>(
  201|   925k|        &mut self,
  202|   925k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  203|   925k|    ) -> io::Result<()> {
  204|   925k|        self.inner.write(&mut self.buffer, solution);
  205|   925k|        self.writer.write_all(self.buffer.as_bytes())?;
  206|   925k|        self.buffer.clear();
  207|   925k|        Ok(())
  208|   925k|    }
_RINvMs1_NtCs3BxoBVhxb2g_10sparesults3csvNtB6_27InnerTsvSolutionsSerializer5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2y_25WriterSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9serializeRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableRNtNtB4c_6triple4TermRNtB26_13QuerySolutionE0EECs8TUCMN7nV6g_13oxigraph_fuzz:
  271|   925k|    fn write<'a>(
  272|   925k|        &self,
  273|   925k|        output: &mut String,
  274|   925k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  275|   925k|    ) {
  276|   925k|        let mut values = vec![None; self.variables.len()];
  277|  1.57M|        for (variable, value) in solution {
  278|   646k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  279|   646k|                values[position] = Some(value);
  280|   646k|            }
  281|       |        }
  282|   925k|        let mut start_binding = true;
  283|  1.85M|        for value in values {
  284|   928k|            if start_binding {
  285|   924k|                start_binding = false;
  286|   924k|            } else {
  287|  4.29k|                output.push('\t');
  288|  4.29k|            }
  289|   928k|            if let Some(value) = value {
  290|   646k|                write_tsv_term(output, value);
  291|   646k|            }
  292|       |        }
  293|   925k|        output.push('\n');
  294|   925k|    }
_RINvNtCs3BxoBVhxb2g_10sparesults3csv14write_tsv_termNtNtCsiVhMQ2GRKjW_5oxrdf10named_node12NamedNodeRefECs8TUCMN7nV6g_13oxigraph_fuzz:
  297|   223k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|   223k|    match term.into() {
  299|   223k|        TermRef::NamedNode(node) => {
  300|   223k|            output.push('<');
  301|   223k|            output.push_str(node.as_str());
  302|   223k|            output.push('>');
  303|   223k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|   223k|}
_RINvNtCs3BxoBVhxb2g_10sparesults3csv14write_tsv_termNtNtCsiVhMQ2GRKjW_5oxrdf6triple7TermRefECs8TUCMN7nV6g_13oxigraph_fuzz:
  297|   646k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|   646k|    match term.into() {
  299|  73.0k|        TermRef::NamedNode(node) => {
  300|  73.0k|            output.push('<');
  301|  73.0k|            output.push_str(node.as_str());
  302|  73.0k|            output.push('>');
  303|  73.0k|        }
  304|  91.1k|        TermRef::BlankNode(node) => {
  305|  91.1k|            output.push_str("_:");
  306|  91.1k|            output.push_str(node.as_str());
  307|  91.1k|        }
  308|   452k|        TermRef::Literal(literal) => {
  309|   452k|            let value = literal.value();
  310|   452k|            if let Some(language) = literal.language() {
  311|  69.9k|                write_tsv_quoted_str(output, value);
  312|  69.9k|                output.push('@');
  313|  69.9k|                output.push_str(language);
  314|  69.9k|            } else {
  315|   382k|                match literal.datatype() {
  316|   382k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|   361k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|   283k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|   221k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|   197k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|   187k|                    datatype => {
  322|   187k|                        write_tsv_quoted_str(output, value);
  323|   187k|                        output.push_str("^^");
  324|   187k|                        write_tsv_term(output, datatype);
  325|   187k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  29.7k|        TermRef::Triple(triple) => {
  331|  29.7k|            output.push_str("<< ");
  332|  29.7k|            write_tsv_term(output, &triple.subject);
  333|  29.7k|            output.push(' ');
  334|  29.7k|            write_tsv_term(output, &triple.predicate);
  335|  29.7k|            output.push(' ');
  336|  29.7k|            write_tsv_term(output, &triple.object);
  337|  29.7k|            output.push_str(" >>");
  338|  29.7k|        }
  339|       |    }
  340|   646k|}
_RINvNtCs3BxoBVhxb2g_10sparesults3csv14write_tsv_termRNtNtCsiVhMQ2GRKjW_5oxrdf10named_node9NamedNodeECs8TUCMN7nV6g_13oxigraph_fuzz:
  297|  50.8k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  50.8k|    match term.into() {
  299|  50.8k|        TermRef::NamedNode(node) => {
  300|  50.8k|            output.push('<');
  301|  50.8k|            output.push_str(node.as_str());
  302|  50.8k|            output.push('>');
  303|  50.8k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|  50.8k|}
_RINvNtCs3BxoBVhxb2g_10sparesults3csv14write_tsv_termRNtNtCsiVhMQ2GRKjW_5oxrdf6triple4TermECs8TUCMN7nV6g_13oxigraph_fuzz:
  297|  50.8k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  50.8k|    match term.into() {
  299|    423|        TermRef::NamedNode(node) => {
  300|    423|            output.push('<');
  301|    423|            output.push_str(node.as_str());
  302|    423|            output.push('>');
  303|    423|        }
  304|  2.86k|        TermRef::BlankNode(node) => {
  305|  2.86k|            output.push_str("_:");
  306|  2.86k|            output.push_str(node.as_str());
  307|  2.86k|        }
  308|  45.5k|        TermRef::Literal(literal) => {
  309|  45.5k|            let value = literal.value();
  310|  45.5k|            if let Some(language) = literal.language() {
  311|  8.06k|                write_tsv_quoted_str(output, value);
  312|  8.06k|                output.push('@');
  313|  8.06k|                output.push_str(language);
  314|  8.06k|            } else {
  315|  37.5k|                match literal.datatype() {
  316|  37.5k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|  36.7k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|  36.7k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|  36.7k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|  36.7k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|  36.5k|                    datatype => {
  322|  36.5k|                        write_tsv_quoted_str(output, value);
  323|  36.5k|                        output.push_str("^^");
  324|  36.5k|                        write_tsv_term(output, datatype);
  325|  36.5k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  1.98k|        TermRef::Triple(triple) => {
  331|  1.98k|            output.push_str("<< ");
  332|  1.98k|            write_tsv_term(output, &triple.subject);
  333|  1.98k|            output.push(' ');
  334|  1.98k|            write_tsv_term(output, &triple.predicate);
  335|  1.98k|            output.push(' ');
  336|  1.98k|            write_tsv_term(output, &triple.object);
  337|  1.98k|            output.push_str(" >>");
  338|  1.98k|        }
  339|       |    }
  340|  50.8k|}
_RINvNtCs3BxoBVhxb2g_10sparesults3csv14write_tsv_termRNtNtCsiVhMQ2GRKjW_5oxrdf6triple7SubjectECs8TUCMN7nV6g_13oxigraph_fuzz:
  297|  50.8k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  50.8k|    match term.into() {
  299|  20.3k|        TermRef::NamedNode(node) => {
  300|  20.3k|            output.push('<');
  301|  20.3k|            output.push_str(node.as_str());
  302|  20.3k|            output.push('>');
  303|  20.3k|        }
  304|  11.3k|        TermRef::BlankNode(node) => {
  305|  11.3k|            output.push_str("_:");
  306|  11.3k|            output.push_str(node.as_str());
  307|  11.3k|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  19.1k|        TermRef::Triple(triple) => {
  331|  19.1k|            output.push_str("<< ");
  332|  19.1k|            write_tsv_term(output, &triple.subject);
  333|  19.1k|            output.push(' ');
  334|  19.1k|            write_tsv_term(output, &triple.predicate);
  335|  19.1k|            output.push(' ');
  336|  19.1k|            write_tsv_term(output, &triple.object);
  337|  19.1k|            output.push_str(" >>");
  338|  19.1k|        }
  339|       |    }
  340|  50.8k|}
_RINvNtCs3BxoBVhxb2g_10sparesults3csv24write_boolean_csv_resultQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs8TUCMN7nV6g_13oxigraph_fuzz:
   14|      7|pub fn write_boolean_csv_result<W: Write>(mut writer: W, value: bool) -> io::Result<W> {
   15|      7|    writer.write_all(if value { b"true" } else { b"false" })?;
   16|      7|    Ok(writer)
   17|      7|}
_RNCINvMs1_NtCs3BxoBVhxb2g_10sparesults3csvNtB8_27InnerTsvSolutionsSerializer5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2A_25WriterSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9serializeRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableRNtNtB4e_6triple4TermRNtB28_13QuerySolutionE0EE0Cs8TUCMN7nV6g_13oxigraph_fuzz:
  278|   650k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNvMs0_NtCs3BxoBVhxb2g_10sparesults3csvINtB5_28WriterTsvSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5startCs8TUCMN7nV6g_13oxigraph_fuzz:
  188|  12.1k|    pub fn start(mut writer: W, variables: Vec<Variable>) -> io::Result<Self> {
  189|  12.1k|        let mut buffer = String::new();
  190|  12.1k|        let inner = InnerTsvSolutionsSerializer::start(&mut buffer, variables);
  191|  12.1k|        writer.write_all(buffer.as_bytes())?;
  192|  12.1k|        buffer.clear();
  193|  12.1k|        Ok(Self {
  194|  12.1k|            inner,
  195|  12.1k|            writer,
  196|  12.1k|            buffer,
  197|  12.1k|        })
  198|  12.1k|    }
_RNvMs0_NtCs3BxoBVhxb2g_10sparesults3csvINtB5_28WriterTsvSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs8TUCMN7nV6g_13oxigraph_fuzz:
  210|  12.1k|    pub fn finish(self) -> W {
  211|  12.1k|        self.writer
  212|  12.1k|    }
_RNvMs1_NtCs3BxoBVhxb2g_10sparesults3csvNtB5_27InnerTsvSolutionsSerializer5start:
  256|  12.1k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  257|  12.1k|        let mut start_vars = true;
  258|  24.3k|        for variable in &variables {
  259|  12.2k|            if start_vars {
  260|  12.0k|                start_vars = false;
  261|  12.0k|            } else {
  262|    186|                output.push('\t');
  263|    186|            }
  264|  12.2k|            output.push('?');
  265|  12.2k|            output.push_str(variable.as_str());
  266|       |        }
  267|  12.1k|        output.push('\n');
  268|  12.1k|        Self { variables }
  269|  12.1k|    }
_RNvNtCs3BxoBVhxb2g_10sparesults3csv20write_tsv_quoted_str:
  342|   312k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  343|   312k|    output.push('"');
  344|  4.11M|    for c in string.chars() {
  345|  4.11M|        match c {
  346|  2.26k|            '\t' => output.push_str("\\t"),
  347|  5.94k|            '\n' => output.push_str("\\n"),
  348|  7.19k|            '\r' => output.push_str("\\r"),
  349|  9.48k|            '"' => output.push_str("\\\""),
  350|  11.9k|            '\\' => output.push_str("\\\\"),
  351|  4.07M|            _ => output.push(c),
  352|       |        };
  353|       |    }
  354|   312k|    output.push('"');
  355|   312k|}
_RNvNtCs3BxoBVhxb2g_10sparesults3csv17is_turtle_boolean:
  357|  23.9k|fn is_turtle_boolean(value: &str) -> bool {
  358|  23.9k|    matches!(value, "true" | "false")
  359|  23.9k|}
_RNvNtCs3BxoBVhxb2g_10sparesults3csv17is_turtle_integer:
  361|   113k|fn is_turtle_integer(value: &str) -> bool {
  362|   113k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  363|   113k|    let mut value = value.as_bytes();
  364|   113k|    if let Some(v) = value.strip_prefix(b"+") {
  365|    923|        value = v;
  366|   112k|    } else if let Some(v) = value.strip_prefix(b"-") {
  367|  1.13k|        value = v;
  368|   111k|    }
  369|   113k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  370|   113k|}
_RNvNtCs3BxoBVhxb2g_10sparesults3csv17is_turtle_decimal:
  372|  64.0k|fn is_turtle_decimal(value: &str) -> bool {
  373|  64.0k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  374|  64.0k|    let mut value = value.as_bytes();
  375|  64.0k|    if let Some(v) = value.strip_prefix(b"+") {
  376|  14.0k|        value = v;
  377|  50.0k|    } else if let Some(v) = value.strip_prefix(b"-") {
  378|  7.08k|        value = v;
  379|  42.9k|    }
  380|   161k|    while value.first().map_or(false, u8::is_ascii_digit) {
  381|  97.6k|        value = &value[1..];
  382|  97.6k|    }
  383|  64.0k|    let Some(value) = value.strip_prefix(b".") else {
  384|  1.94k|        return false;
  385|       |    };
  386|  62.1k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  387|  64.0k|}
_RNvNtCs3BxoBVhxb2g_10sparesults3csv16is_turtle_double:
  389|   198k|fn is_turtle_double(value: &str) -> bool {
  390|   198k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  391|   198k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  392|   198k|    let mut value = value.as_bytes();
  393|   198k|    if let Some(v) = value.strip_prefix(b"+") {
  394|    969|        value = v;
  395|   197k|    } else if let Some(v) = value.strip_prefix(b"-") {
  396|  49.2k|        value = v;
  397|   148k|    }
  398|   198k|    let mut with_before = false;
  399|   237k|    while value.first().map_or(false, u8::is_ascii_digit) {
  400|  38.7k|        value = &value[1..];
  401|  38.7k|        with_before = true;
  402|  38.7k|    }
  403|   198k|    let mut with_after = false;
  404|   198k|    if let Some(v) = value.strip_prefix(b".") {
  405|  45.9k|        value = v;
  406|  76.1k|        while value.first().map_or(false, u8::is_ascii_digit) {
  407|  30.2k|            value = &value[1..];
  408|  30.2k|            with_after = true;
  409|  30.2k|        }
  410|   152k|    }
  411|   198k|    if let Some(v) = value.strip_prefix(b"e") {
  412|   146k|        value = v;
  413|   146k|    } else if let Some(v) = value.strip_prefix(b"E") {
  414|  42.1k|        value = v;
  415|  42.1k|    } else {
  416|  10.1k|        return false;
  417|       |    }
  418|   188k|    if let Some(v) = value.strip_prefix(b"+") {
  419|    170|        value = v;
  420|   188k|    } else if let Some(v) = value.strip_prefix(b"-") {
  421|  2.80k|        value = v;
  422|   185k|    }
  423|   188k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  424|   198k|}
_RNvMs4_NtCs3BxoBVhxb2g_10sparesults3csvNtB5_32SliceTsvQueryResultsParserOutput4read:
  536|  33.4k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  537|  33.4k|        let mut reader = LineReader::new();
  538|  33.4k|        let line = reader.next_line_from_slice(slice)?;
  539|  33.4k|        Ok(match inner_read_first_line(reader, line)? {
  540|       |            TsvInnerQueryResults::Solutions {
  541|  33.1k|                variables,
  542|  33.1k|                solutions,
  543|  33.1k|            } => Self::Solutions {
  544|  33.1k|                variables,
  545|  33.1k|                solutions: SliceTsvSolutionsParser {
  546|  33.1k|                    slice,
  547|  33.1k|                    inner: solutions,
  548|  33.1k|                },
  549|  33.1k|            },
  550|     14|            TsvInnerQueryResults::Boolean(value) => Self::Boolean(value),
  551|       |        })
  552|  33.4k|    }
_RNvMs5_NtCs3BxoBVhxb2g_10sparesults3csvNtB5_23SliceTsvSolutionsParser10parse_next:
  561|  1.96M|    pub fn parse_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  562|  1.96M|        let line = self.inner.line_reader.next_line_from_slice(self.slice)?;
  563|  1.96M|        self.inner.parse_next(line)
  564|  1.96M|    }
_RNvNtCs3BxoBVhxb2g_10sparesults3csv21inner_read_first_line:
  575|  33.4k|fn inner_read_first_line(
  576|  33.4k|    reader: LineReader,
  577|  33.4k|    line: &str,
  578|  33.4k|) -> Result<TsvInnerQueryResults, QueryResultsSyntaxError> {
  579|  33.4k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  580|  33.4k|    if line.eq_ignore_ascii_case("true") {
  581|      6|        return Ok(TsvInnerQueryResults::Boolean(true));
  582|  33.4k|    }
  583|  33.4k|    if line.eq_ignore_ascii_case("false") {
  584|      8|        return Ok(TsvInnerQueryResults::Boolean(false));
  585|  33.4k|    }
  586|  33.4k|    let mut variables = Vec::new();
  587|  33.4k|    if !line.is_empty() {
  588|  29.4k|        for v in line.split('\t') {
  589|  29.4k|            let v = v.trim();
  590|  29.4k|            if v.is_empty() {
  591|     78|                return Err(QueryResultsSyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar"));
  592|  29.4k|            }
  593|  29.4k|            let variable = Variable::from_str(v).map_err(|e| {
  594|       |                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|  29.4k|            })?;
  596|  29.2k|            if variables.contains(&variable) {
  597|     10|                return Err(QueryResultsSyntaxError::msg(format!(
  598|     10|                    "The variable {variable} is declared twice"
  599|     10|                )));
  600|  29.2k|            }
  601|  29.2k|            variables.push(variable);
  602|       |        }
  603|  4.60k|    }
  604|  33.1k|    let column_len = variables.len();
  605|  33.1k|    Ok(TsvInnerQueryResults::Solutions {
  606|  33.1k|        variables,
  607|  33.1k|        solutions: TsvInnerSolutionsParser {
  608|  33.1k|            line_reader: reader,
  609|  33.1k|            column_len,
  610|  33.1k|        },
  611|  33.1k|    })
  612|  33.4k|}
_RNvMs6_NtCs3BxoBVhxb2g_10sparesults3csvNtB5_23TsvInnerSolutionsParser10parse_next:
  621|  1.96M|    pub fn parse_next(
  622|  1.96M|        &self,
  623|  1.96M|        line: &str,
  624|  1.96M|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  625|  1.96M|        if line.is_empty() {
  626|  24.2k|            return Ok(None); // EOF
  627|  1.94M|        }
  628|  1.94M|        let elements = line
  629|  1.94M|            .split('\t')
  630|  1.94M|            .enumerate()
  631|  1.94M|            .map(|(i, v)| {
  632|       |                let v = v.trim();
  633|       |                if v.is_empty() {
  634|       |                    Ok(None)
  635|       |                } else {
  636|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  637|       |                        let start_position_char = line
  638|       |                            .split('\t')
  639|       |                            .take(i)
  640|       |                            .map(|c| c.chars().count() + 1)
  641|       |                            .sum::<usize>();
  642|       |                        let start_position_bytes =
  643|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  644|       |                        QueryResultsSyntaxError::term(
  645|       |                            e,
  646|       |                            v.into(),
  647|       |                            TextPosition {
  648|       |                                line: self.line_reader.line_count - 1,
  649|       |                                column: start_position_char.try_into().unwrap(),
  650|       |                                offset: self.line_reader.last_line_start
  651|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  652|       |                            }..TextPosition {
  653|       |                                line: self.line_reader.line_count - 1,
  654|       |                                column: (start_position_char + v.chars().count())
  655|       |                                    .try_into()
  656|       |                                    .unwrap(),
  657|       |                                offset: self.line_reader.last_line_start
  658|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  659|       |                            },
  660|       |                        )
  661|       |                    })?))
  662|       |                }
  663|  1.94M|            })
  664|  1.94M|            .collect::<Result<Vec<_>, QueryResultsSyntaxError>>()?;
  665|  1.93M|        if elements.len() == self.column_len {
  666|  1.93M|            Ok(Some(elements))
  667|  3.71k|        } else if self.column_len == 0 && elements == [None] {
  668|  3.35k|            Ok(Some(Vec::new())) // Zero columns case
  669|       |        } else {
  670|    358|            Err(QueryResultsSyntaxError::located_message(
  671|    358|                format!(
  672|    358|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  673|    358|                    self.column_len,
  674|    358|                    self.line_reader.line_count - 1,
  675|    358|                    elements.len(),
  676|    358|                    line
  677|    358|                ),
  678|    358|                TextPosition {
  679|    358|                    line: self.line_reader.line_count - 1,
  680|    358|                    column: 0,
  681|    358|                    offset: self.line_reader.last_line_start,
  682|    358|                }..TextPosition {
  683|    358|                    line: self.line_reader.line_count - 1,
  684|    358|                    column: line.chars().count().try_into().unwrap(),
  685|    358|                    offset: self.line_reader.last_line_end,
  686|    358|                },
  687|    358|            ))
  688|       |        }
  689|  1.96M|    }
_RNvMs7_NtCs3BxoBVhxb2g_10sparesults3csvNtB5_10LineReader3new:
  701|  33.4k|    fn new() -> Self {
  702|  33.4k|        Self {
  703|  33.4k|            buffer_start: 0,
  704|  33.4k|            buffer_end: 0,
  705|  33.4k|            line_count: 0,
  706|  33.4k|            last_line_start: 0,
  707|  33.4k|            last_line_end: 0,
  708|  33.4k|        }
  709|  33.4k|    }
_RNvMs7_NtCs3BxoBVhxb2g_10sparesults3csvNtB5_10LineReader20next_line_from_slice:
  795|  2.00M|    fn next_line_from_slice<'a>(
  796|  2.00M|        &mut self,
  797|  2.00M|        slice: &'a [u8],
  798|  2.00M|    ) -> Result<&'a str, QueryResultsSyntaxError> {
  799|  2.00M|        let line_end = memchr(b'\n', &slice[self.buffer_start..])
  800|  2.00M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
  801|  2.00M|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  802|       |            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  803|  2.00M|        });
  804|  2.00M|        self.line_count += 1;
  805|  2.00M|        self.last_line_start = self.last_line_end;
  806|  2.00M|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  807|  2.00M|        self.buffer_start = line_end;
  808|  2.00M|        result
  809|  2.00M|    }
_RNCNvNtCs3BxoBVhxb2g_10sparesults3csv21inner_read_first_line0B5_:
  579|   101k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvNtCs3BxoBVhxb2g_10sparesults3csv21inner_read_first_lines_0B5_:
  593|    142|            let variable = Variable::from_str(v).map_err(|e| {
  594|    142|                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|    142|            })?;
_RNCNvMs6_NtCs3BxoBVhxb2g_10sparesults3csvNtB7_23TsvInnerSolutionsParser10parse_next0B9_:
  631|  1.96M|            .map(|(i, v)| {
  632|  1.96M|                let v = v.trim();
  633|  1.96M|                if v.is_empty() {
  634|   592k|                    Ok(None)
  635|       |                } else {
  636|  1.36M|                    Ok(Some(Term::from_str(v).map_err(|e| {
  637|       |                        let start_position_char = line
  638|       |                            .split('\t')
  639|       |                            .take(i)
  640|       |                            .map(|c| c.chars().count() + 1)
  641|       |                            .sum::<usize>();
  642|       |                        let start_position_bytes =
  643|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  644|       |                        QueryResultsSyntaxError::term(
  645|       |                            e,
  646|       |                            v.into(),
  647|       |                            TextPosition {
  648|       |                                line: self.line_reader.line_count - 1,
  649|       |                                column: start_position_char.try_into().unwrap(),
  650|       |                                offset: self.line_reader.last_line_start
  651|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  652|       |                            }..TextPosition {
  653|       |                                line: self.line_reader.line_count - 1,
  654|       |                                column: (start_position_char + v.chars().count())
  655|       |                                    .try_into()
  656|       |                                    .unwrap(),
  657|       |                                offset: self.line_reader.last_line_start
  658|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  659|       |                            },
  660|       |                        )
  661|  1.36M|                    })?))
  662|       |                }
  663|  1.96M|            })
_RNCNCNvMs6_NtCs3BxoBVhxb2g_10sparesults3csvNtB9_23TsvInnerSolutionsParser10parse_next00Bb_:
  636|  8.43k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  637|  8.43k|                        let start_position_char = line
  638|  8.43k|                            .split('\t')
  639|  8.43k|                            .take(i)
  640|  8.43k|                            .map(|c| c.chars().count() + 1)
  641|  8.43k|                            .sum::<usize>();
  642|  8.43k|                        let start_position_bytes =
  643|  8.43k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  644|  8.43k|                        QueryResultsSyntaxError::term(
  645|  8.43k|                            e,
  646|  8.43k|                            v.into(),
  647|  8.43k|                            TextPosition {
  648|  8.43k|                                line: self.line_reader.line_count - 1,
  649|  8.43k|                                column: start_position_char.try_into().unwrap(),
  650|  8.43k|                                offset: self.line_reader.last_line_start
  651|  8.43k|                                    + u64::try_from(start_position_bytes).unwrap(),
  652|  8.43k|                            }..TextPosition {
  653|  8.43k|                                line: self.line_reader.line_count - 1,
  654|  8.43k|                                column: (start_position_char + v.chars().count())
  655|  8.43k|                                    .try_into()
  656|  8.43k|                                    .unwrap(),
  657|  8.43k|                                offset: self.line_reader.last_line_start
  658|  8.43k|                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  659|  8.43k|                            },
  660|  8.43k|                        )
  661|  8.43k|                    })?))
_RNCNCNCNvMs6_NtCs3BxoBVhxb2g_10sparesults3csvNtBb_23TsvInnerSolutionsParser10parse_next000Bd_:
  640|  2.34k|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs6_NtCs3BxoBVhxb2g_10sparesults3csvNtBb_23TsvInnerSolutionsParser10parse_next00s_0Bd_:
  643|  2.34k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNvMs7_NtCs3BxoBVhxb2g_10sparesults3csvNtB7_10LineReader20next_line_from_slice0B9_:
  800|  42.0k|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCs3BxoBVhxb2g_10sparesults3csvNtB7_10LineReader20next_line_from_slices_0B9_:
  800|  1.96M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCs3BxoBVhxb2g_10sparesults3csvNtB7_10LineReader20next_line_from_slices0_0B9_:
  801|    110|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  802|    110|            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  803|    110|        });

_RNvMs2_NtCs3BxoBVhxb2g_10sparesults5errorNtB5_23QueryResultsSyntaxError4term:
   93|  8.43k|    pub(crate) fn term(error: TermParseError, term: String, location: Range<TextPosition>) -> Self {
   94|  8.43k|        Self(SyntaxErrorKind::Term {
   95|  8.43k|            error,
   96|  8.43k|            term,
   97|  8.43k|            location,
   98|  8.43k|        })
   99|  8.43k|    }
_RINvMs2_NtCs3BxoBVhxb2g_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   86|    262|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    262|        Self(SyntaxErrorKind::Msg {
   88|    262|            msg: msg.into(),
   89|    262|            location: None,
   90|    262|        })
   91|    262|    }
_RINvMs2_NtCs3BxoBVhxb2g_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   86|     78|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|     78|        Self(SyntaxErrorKind::Msg {
   88|     78|            msg: msg.into(),
   89|     78|            location: None,
   90|     78|        })
   91|     78|    }
_RINvMs2_NtCs3BxoBVhxb2g_10sparesults5errorNtB6_23QueryResultsSyntaxError15located_messageNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
  103|    358|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
  104|    358|        Self(SyntaxErrorKind::Msg {
  105|    358|            msg: msg.into(),
  106|    358|            location: Some(location),
  107|    358|        })
  108|    358|    }

_RNvMNtCs3BxoBVhxb2g_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs8TUCMN7nV6g_13oxigraph_fuzz:
   65|  33.4k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  33.4k|        Self { format }
   67|  33.4k|    }
_RNvMNtCs3BxoBVhxb2g_10sparesults6parserNtB2_18QueryResultsParser9for_slice:
  234|  33.4k|    pub fn for_slice(
  235|  33.4k|        self,
  236|  33.4k|        slice: &[u8],
  237|  33.4k|    ) -> Result<SliceQueryResultsParserOutput<'_>, QueryResultsSyntaxError> {
  238|  33.4k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match SliceXmlQueryResultsParserOutput::read(slice)? {
  240|      0|                SliceXmlQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  241|       |                SliceXmlQueryResultsParserOutput::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: SliceSolutionsParserKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match SliceJsonQueryResultsParserOutput::read(slice)? {
  250|      0|                SliceJsonQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  251|       |                SliceJsonQueryResultsParserOutput::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: SliceSolutionsParserKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|  33.4k|            QueryResultsFormat::Tsv => match SliceTsvQueryResultsParserOutput::read(slice)? {
  261|     14|                SliceTsvQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  262|       |                SliceTsvQueryResultsParserOutput::Solutions {
  263|  33.1k|                    solutions,
  264|  33.1k|                    variables,
  265|  33.1k|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  266|  33.1k|                    variables: variables.into(),
  267|  33.1k|                    solutions: SliceSolutionsParserKind::Tsv(solutions),
  268|  33.1k|                }),
  269|       |            },
  270|       |        })
  271|  33.4k|    }
_RNvXs3_NtCs3BxoBVhxb2g_10sparesults6parserNtB5_20SliceSolutionsParserNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  642|  1.96M|    fn next(&mut self) -> Option<Self::Item> {
  643|  1.96M|        Some(
  644|  1.96M|            match &mut self.solutions {
  645|      0|                SliceSolutionsParserKind::Xml(reader) => reader.parse_next(),
  646|      0|                SliceSolutionsParserKind::Json(reader) => reader.parse_next(),
  647|  1.96M|                SliceSolutionsParserKind::Tsv(reader) => reader.parse_next(),
  648|       |            }
  649|  1.96M|            .transpose()?
  650|  1.94M|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|       |        )
  652|  1.96M|    }
_RNCNvXs3_NtCs3BxoBVhxb2g_10sparesults6parserNtB7_20SliceSolutionsParserNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  1.93M|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RINvMNtCs3BxoBVhxb2g_10sparesults10serializerNtB3_22QueryResultsSerializer27serialize_boolean_to_writerQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs8TUCMN7nV6g_13oxigraph_fuzz:
   75|      7|    pub fn serialize_boolean_to_writer<W: Write>(self, writer: W, value: bool) -> io::Result<W> {
   76|      7|        match self.format {
   77|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(writer, value),
   78|      0|            QueryResultsFormat::Json => write_boolean_json_result(writer, value),
   79|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   80|      7|                write_boolean_csv_result(writer, value)
   81|       |            }
   82|       |        }
   83|      7|    }
_RINvMNtCs3BxoBVhxb2g_10sparesults10serializerNtB3_22QueryResultsSerializer29serialize_solutions_to_writerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs8TUCMN7nV6g_13oxigraph_fuzz:
  146|  12.1k|    pub fn serialize_solutions_to_writer<W: Write>(
  147|  12.1k|        self,
  148|  12.1k|        writer: W,
  149|  12.1k|        variables: Vec<Variable>,
  150|  12.1k|    ) -> io::Result<WriterSolutionsSerializer<W>> {
  151|  12.1k|        Ok(WriterSolutionsSerializer {
  152|  12.1k|            formatter: match self.format {
  153|       |                QueryResultsFormat::Xml => WriterSolutionsSerializerKind::Xml(
  154|      0|                    WriterXmlSolutionsSerializer::start(writer, &variables)?,
  155|       |                ),
  156|       |                QueryResultsFormat::Json => WriterSolutionsSerializerKind::Json(
  157|      0|                    WriterJsonSolutionsSerializer::start(writer, &variables)?,
  158|       |                ),
  159|       |                QueryResultsFormat::Csv => WriterSolutionsSerializerKind::Csv(
  160|      0|                    WriterCsvSolutionsSerializer::start(writer, variables)?,
  161|       |                ),
  162|       |                QueryResultsFormat::Tsv => WriterSolutionsSerializerKind::Tsv(
  163|  12.1k|                    WriterTsvSolutionsSerializer::start(writer, variables)?,
  164|       |                ),
  165|       |            },
  166|       |        })
  167|  12.1k|    }
_RINvMs0_NtCs3BxoBVhxb2g_10sparesults10serializerINtB6_25WriterSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9serializeRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableRNtNtB26_6triple4TermRNtNtB8_8solution13QuerySolutionECs8TUCMN7nV6g_13oxigraph_fuzz:
  304|   925k|    pub fn serialize<'a>(
  305|   925k|        &mut self,
  306|   925k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  307|   925k|    ) -> io::Result<()> {
  308|   925k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  309|   925k|        match &mut self.formatter {
  310|      0|            WriterSolutionsSerializerKind::Xml(writer) => writer.serialize(solution),
  311|      0|            WriterSolutionsSerializerKind::Json(writer) => writer.serialize(solution),
  312|      0|            WriterSolutionsSerializerKind::Csv(writer) => writer.serialize(solution),
  313|   925k|            WriterSolutionsSerializerKind::Tsv(writer) => writer.serialize(solution),
  314|       |        }
  315|   925k|    }
_RNCINvMs0_NtCs3BxoBVhxb2g_10sparesults10serializerINtB8_25WriterSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9serializeRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableRNtNtB28_6triple4TermRNtNtBa_8solution13QuerySolutionE0Cs8TUCMN7nV6g_13oxigraph_fuzz:
  308|   646k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RNvMs0_NtCs3BxoBVhxb2g_10sparesults10serializerINtB5_25WriterSolutionsSerializerINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs8TUCMN7nV6g_13oxigraph_fuzz:
  318|  12.1k|    pub fn finish(self) -> io::Result<W> {
  319|  12.1k|        match self.formatter {
  320|      0|            WriterSolutionsSerializerKind::Xml(serializer) => serializer.finish(),
  321|      0|            WriterSolutionsSerializerKind::Json(serializer) => serializer.finish(),
  322|      0|            WriterSolutionsSerializerKind::Csv(serializer) => Ok(serializer.finish()),
  323|  12.1k|            WriterSolutionsSerializerKind::Tsv(serializer) => Ok(serializer.finish()),
  324|       |        }
  325|  12.1k|    }
_RNvMNtCs3BxoBVhxb2g_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs8TUCMN7nV6g_13oxigraph_fuzz:
   59|  12.1k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   60|  12.1k|        Self { format }
   61|  12.1k|    }

_RNvMNtCs3BxoBVhxb2g_10sparesults8solutionNtB2_13QuerySolution9variablesCs8TUCMN7nV6g_13oxigraph_fuzz:
  158|  12.0k|    pub fn variables(&self) -> &[Variable] {
  159|  12.0k|        &self.variables
  160|  12.0k|    }
_RNvXs0_NtCs3BxoBVhxb2g_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterCs8TUCMN7nV6g_13oxigraph_fuzz:
  178|   925k|    fn into_iter(self) -> Self::IntoIter {
  179|   925k|        Iter {
  180|   925k|            inner: self.variables.iter().zip(&self.values),
  181|   925k|        }
  182|   925k|    }
_RNvXs9_NtCs3BxoBVhxb2g_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs8TUCMN7nV6g_13oxigraph_fuzz:
  285|  1.57M|    fn next(&mut self) -> Option<Self::Item> {
  286|  1.85M|        for (variable, value) in &mut self.inner {
  287|   928k|            if let Some(value) = value {
  288|   646k|                return Some((variable, value));
  289|   281k|            }
  290|       |        }
  291|   925k|        None
  292|  1.57M|    }
_RNvMNtCs3BxoBVhxb2g_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  1.85M|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  1.85M|        self.into_iter()
  114|  1.85M|    }
_RNvXs0_NtCs3BxoBVhxb2g_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  1.85M|    fn into_iter(self) -> Self::IntoIter {
  179|  1.85M|        Iter {
  180|  1.85M|            inner: self.variables.iter().zip(&self.values),
  181|  1.85M|        }
  182|  1.85M|    }
_RNvXs6_NtCs3BxoBVhxb2g_10sparesults8solutionNtB5_13QuerySolutionNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  236|   925k|    fn eq(&self, other: &Self) -> bool {
  237|   925k|        for (k, v) in self.iter() {
  238|   646k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|   646k|            }
  241|       |        }
  242|   925k|        for (k, v) in other.iter() {
  243|   646k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|   646k|            }
  246|       |        }
  247|   925k|        true
  248|   925k|    }
_RNvXs9_NtCs3BxoBVhxb2g_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  3.14M|    fn next(&mut self) -> Option<Self::Item> {
  286|  3.70M|        for (variable, value) in &mut self.inner {
  287|  1.85M|            if let Some(value) = value {
  288|  1.29M|                return Some((variable, value));
  289|   563k|            }
  290|       |        }
  291|  1.85M|        None
  292|  3.14M|    }
_RNvXsc_NtCs3BxoBVhxb2g_10sparesults8solutionNtNtCsiVhMQ2GRKjW_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|  1.29M|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|  1.29M|        solution.variables.iter().position(|v| *v == self)
  325|  1.29M|    }
_RNvXsd_NtCs3BxoBVhxb2g_10sparesults8solutionRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|  1.29M|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|  1.29M|        self.as_ref().index(solution)
  332|  1.29M|    }
_RINvMNtCs3BxoBVhxb2g_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableEB5_:
   38|  1.29M|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|  1.29M|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|  1.29M|    }
_RNvXs_NtCs3BxoBVhxb2g_10sparesults8solutionNtB4_13QuerySolutionINtNtCscdEvteftVc2_4core7convert4FromTINtNtCs3OstG5Tqy1X_5alloc4sync3ArcSNtNtCsiVhMQ2GRKjW_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  1.93M|    fn from((v, s): (V, S)) -> Self {
  166|  1.93M|        Self {
  167|  1.93M|            variables: v.into(),
  168|  1.93M|            values: s.into(),
  169|  1.93M|        }
  170|  1.93M|    }
_RNCNvXsc_NtCs3BxoBVhxb2g_10sparesults8solutionNtNtCsiVhMQ2GRKjW_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|  1.30M|        solution.variables.iter().position(|v| *v == self)


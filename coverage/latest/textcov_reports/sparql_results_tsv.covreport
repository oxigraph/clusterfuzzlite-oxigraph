_RINvXNtCs9SFDWUDXas2_6anyhow7contextINtNtCshZc3FwCJ069_4core6result6ResultINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtCseR3GpSb7YJr_10sparesults8solution13QuerySolutionENtNtB1L_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCsiLMV5Kw4euE_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4h_:
   58|  13.8k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  13.8k|    where
   60|  13.8k|        C: Display + Send + Sync + 'static,
   61|  13.8k|        F: FnOnce() -> C,
   62|  13.8k|    {
   63|  13.8k|        match self {
   64|  13.8k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  13.8k|    }
_RINvXNtCs9SFDWUDXas2_6anyhow7contextINtNtCshZc3FwCJ069_4core6result6ResultNtNtCseR3GpSb7YJr_10sparesults6parser29SliceQueryResultsParserOutputNtNtB1e_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2g_E12with_contextNtNtCs8f6x4lOZV33_5alloc6string6StringNCNvNtCsiLMV5Kw4euE_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4d_:
   58|  13.8k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  13.8k|    where
   60|  13.8k|        C: Display + Send + Sync + 'static,
   61|  13.8k|        F: FnOnce() -> C,
   62|  13.8k|    {
   63|  13.8k|        match self {
   64|  13.8k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  13.8k|    }

rust_fuzzer_test_input:
  209|  24.2k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  24.2k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  24.2k|                }
  223|  24.2k|
  224|  24.2k|                __libfuzzer_sys_run(bytes);
  225|  24.2k|                0
  226|       |            }
_RNvNvCs2h8KRR5HoXc_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  24.2k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  24.2k|                $body
  243|  24.2k|            }
LLVMFuzzerTestOneInput:
   58|  24.2k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  24.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  24.2k|    });
   63|  24.2k|
   64|  24.2k|    match test_input {
   65|  24.2k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  24.2k|}
_RNCNvCskxgTfQto6Vo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  24.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  24.2k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  24.2k|        rust_fuzzer_test_input(data_slice)
   62|  24.2k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECseR3GpSb7YJr_10sparesults:
 1125|  2.22M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.22M|    haystack: &[u8],
 1127|  2.22M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.22M|) -> Option<usize> {
 1129|  2.22M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.22M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.22M|    // a &[u8].
 1132|  2.22M|    let start = haystack.as_ptr();
 1133|  2.22M|    let end = start.add(haystack.len());
 1134|  2.22M|    let found = find_raw(start, end)?;
 1135|  2.17M|    Some(found.distance(start))
 1136|  2.22M|}
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1B8_:
  117|   180k|    pub(crate) fn needle1(&self) -> u8 {
  118|   180k|        self.s1
  119|   180k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newB8_:
  111|  2.22M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.22M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.22M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  42.5k|    pub(crate) unsafe fn find_raw(
  144|  42.5k|        &self,
  145|  42.5k|        start: *const u8,
  146|  42.5k|        end: *const u8,
  147|  42.5k|    ) -> Option<*const u8> {
  148|  42.5k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  42.5k|        // need to move up to using a u64 for the masks used below. Currently
  150|  42.5k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  42.5k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  42.5k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  42.5k|        let topos = V::Mask::first_offset;
  155|  42.5k|        let len = end.distance(start);
  156|  42.5k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  42.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  33.8k|            return Some(cur);
  167|  8.70k|        }
  168|  8.70k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  8.70k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  8.70k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  8.70k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  8.70k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  10.4k|        while cur <= end.sub(V::BYTES) {
  213|  2.54k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.54k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    761|                return Some(cur);
  216|  1.78k|            }
  217|  1.78k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  7.93k|        if cur < end {
  224|  7.68k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  7.68k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  7.68k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  7.68k|            return self.search_chunk(cur, topos);
  228|    250|        }
  229|    250|        None
  230|  42.5k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  52.7k|    unsafe fn search_chunk(
  417|  52.7k|        &self,
  418|  52.7k|        cur: *const u8,
  419|  52.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  52.7k|    ) -> Option<*const u8> {
  421|  52.7k|        let chunk = V::load_unaligned(cur);
  422|  52.7k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  52.7k|        if mask.has_non_zero() {
  424|  38.1k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  14.5k|            None
  427|       |        }
  428|  52.7k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newB8_:
  111|  2.22M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.22M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.22M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  2.11M|    pub(crate) unsafe fn find_raw(
  144|  2.11M|        &self,
  145|  2.11M|        start: *const u8,
  146|  2.11M|        end: *const u8,
  147|  2.11M|    ) -> Option<*const u8> {
  148|  2.11M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  2.11M|        // need to move up to using a u64 for the masks used below. Currently
  150|  2.11M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  2.11M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  2.11M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  2.11M|        let topos = V::Mask::first_offset;
  155|  2.11M|        let len = end.distance(start);
  156|  2.11M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  2.11M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.81M|            return Some(cur);
  167|   298k|        }
  168|   298k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   298k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   298k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   298k|        if len >= Self::LOOP_SIZE {
  172|   327k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|   321k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   321k|                let a = V::load_aligned(cur);
  176|   321k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   321k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   321k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   321k|                let eqa = self.v1.cmpeq(a);
  180|   321k|                let eqb = self.v1.cmpeq(b);
  181|   321k|                let eqc = self.v1.cmpeq(c);
  182|   321k|                let eqd = self.v1.cmpeq(d);
  183|   321k|                let or1 = eqa.or(eqb);
  184|   321k|                let or2 = eqc.or(eqd);
  185|   321k|                let or3 = or1.or(or2);
  186|   321k|                if or3.movemask_will_have_non_zero() {
  187|   275k|                    let mask = eqa.movemask();
  188|   275k|                    if mask.has_non_zero() {
  189|   139k|                        return Some(cur.add(topos(mask)));
  190|   136k|                    }
  191|   136k|
  192|   136k|                    let mask = eqb.movemask();
  193|   136k|                    if mask.has_non_zero() {
  194|   124k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  11.3k|                    }
  196|  11.3k|
  197|  11.3k|                    let mask = eqc.movemask();
  198|  11.3k|                    if mask.has_non_zero() {
  199|  6.42k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  4.96k|                    }
  201|  4.96k|
  202|  4.96k|                    let mask = eqd.movemask();
  203|  4.96k|                    debug_assert!(mask.has_non_zero());
  204|  4.96k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  46.0k|                }
  206|  46.0k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  16.5k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  38.5k|        while cur <= end.sub(V::BYTES) {
  213|  25.3k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  25.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  9.60k|                return Some(cur);
  216|  15.7k|            }
  217|  15.7k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  13.1k|        if cur < end {
  224|  12.9k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  12.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  12.9k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  12.9k|            return self.search_chunk(cur, topos);
  228|    248|        }
  229|    248|        None
  230|  2.11M|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  2.15M|    unsafe fn search_chunk(
  417|  2.15M|        &self,
  418|  2.15M|        cur: *const u8,
  419|  2.15M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  2.15M|    ) -> Option<*const u8> {
  421|  2.15M|        let chunk = V::load_unaligned(cur);
  422|  2.15M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  2.15M|        if mask.has_non_zero() {
  424|  1.83M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   320k|            None
  427|       |        }
  428|  2.15M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  38.1k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  38.1k|    start: *const u8,
 1150|  38.1k|    end: *const u8,
 1151|  38.1k|    confirm: F,
 1152|  38.1k|) -> Option<*const u8> {
 1153|  38.1k|    debug_assert!(start <= end);
 1154|  38.1k|    let mut ptr = start;
 1155|   189k|    while ptr < end {
 1156|   180k|        if confirm(*ptr) {
 1157|  28.9k|            return Some(ptr);
 1158|   151k|        }
 1159|   151k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  9.18k|    None
 1162|  38.1k|}

_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  2.22M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  2.22M|        One {
   71|  2.22M|            sse2: generic::One::new(needle),
   72|  2.22M|            avx2: generic::One::new(needle),
   73|  2.22M|        }
   74|  2.22M|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  2.22M|    pub unsafe fn find_raw(
  180|  2.22M|        &self,
  181|  2.22M|        start: *const u8,
  182|  2.22M|        end: *const u8,
  183|  2.22M|    ) -> Option<*const u8> {
  184|  2.22M|        if start >= end {
  185|  27.6k|            return None;
  186|  2.19M|        }
  187|  2.19M|        let len = end.distance(start);
  188|  2.19M|        if len < __m256i::BYTES {
  189|  80.7k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  38.1k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  38.1k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  42.5k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  2.11M|        }
  201|  2.11M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  2.11M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  2.11M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  2.11M|        // responsibility.
  205|  2.11M|        //
  206|  2.11M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  2.11M|        // means we'd have to annotate this routine with `target_feature`.
  208|  2.11M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  2.11M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  2.11M|        // The real problem is that a routine with a `target_feature`
  211|  2.11M|        // annotation generally can't be inlined into caller code unless
  212|  2.11M|        // the caller code has the same target feature annotations. Namely,
  213|  2.11M|        // the common case (at time of writing) is for calling code to not
  214|  2.11M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  2.11M|        // `target_feature` on this routine, it can be inlined which will
  216|  2.11M|        // handle some of the short-haystack cases above without touching the
  217|  2.11M|        // architecture specific code.
  218|  2.11M|        self.find_raw_avx2(start, end)
  219|  2.22M|    }
_RNCNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   180k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   180k|                    b == self.sse2.needle1()
  194|   180k|                })
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  42.5k|    unsafe fn find_raw_sse2(
  337|  42.5k|        &self,
  338|  42.5k|        start: *const u8,
  339|  42.5k|        end: *const u8,
  340|  42.5k|    ) -> Option<*const u8> {
  341|  42.5k|        self.sse2.find_raw(start, end)
  342|  42.5k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  2.11M|    unsafe fn find_raw_avx2(
  397|  2.11M|        &self,
  398|  2.11M|        start: *const u8,
  399|  2.11M|        end: *const u8,
  400|  2.11M|    ) -> Option<*const u8> {
  401|  2.11M|        self.avx2.find_raw(start, end)
  402|  2.11M|    }

_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw:
  174|  2.22M|pub(crate) fn memchr_raw(
  175|  2.22M|    n1: u8,
  176|  2.22M|    start: *const u8,
  177|  2.22M|    end: *const u8,
  178|  2.22M|) -> Option<*const u8> {
  179|  2.22M|    // SAFETY: We provide a valid function pointer type.
  180|  2.22M|    unsafe_ifunc!(
  181|  2.22M|        One,
  182|  2.22M|        find_raw,
  183|  2.22M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  2.22M|        Option<*const u8>,
  185|  2.22M|        start,
  186|  2.22M|        end,
  187|  2.22M|        n1
  188|  2.22M|    )
  189|  2.22M|}
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  2.22M|        unsafe fn find_avx2(
   79|  2.22M|            $($needle: u8),+,
   80|  2.22M|            $hay_start: *const u8,
   81|  2.22M|            $hay_end: *const u8,
   82|  2.22M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.22M|            $memchrty::new_unchecked($($needle),+)
   85|  2.22M|                .$memchrfind($hay_start, $hay_end)
   86|  2.22M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  6.55M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  6.55M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  6.55M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  6.55M|    }
_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   306k|    fn as_usize(self) -> usize {
   27|   306k|        self as usize
   28|   306k|    }

_RNvNtCsgAmdbuUjTpV_6memchr6memchr6memchrCseR3GpSb7YJr_10sparesults:
   27|  2.22M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  2.22M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  2.22M|    // pointer between start and end.
   30|  2.22M|    unsafe {
   31|  2.22M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  2.22M|        })
   34|  2.22M|    }
   35|  2.22M|}
_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr6memchr0B5_:
   31|  2.22M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  2.22M|            memchr_raw(needle, start, end)
   33|  2.22M|        })
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawB3_:
  504|  2.22M|unsafe fn memchr_raw(
  505|  2.22M|    needle: u8,
  506|  2.22M|    start: *const u8,
  507|  2.22M|    end: *const u8,
  508|  2.22M|) -> Option<*const u8> {
  509|  2.22M|    #[cfg(target_arch = "x86_64")]
  510|  2.22M|    {
  511|  2.22M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  2.22M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  2.22M|        // time. This function also handles using a fallback if neither AVX2
  514|  2.22M|        // nor SSE2 (unusual) are available.
  515|  2.22M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  2.22M|    }
  517|  2.22M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  2.22M|    {
  519|  2.22M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  2.22M|    }
  521|  2.22M|    #[cfg(target_arch = "aarch64")]
  522|  2.22M|    {
  523|  2.22M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  2.22M|    }
  525|  2.22M|    #[cfg(not(any(
  526|  2.22M|        target_arch = "x86_64",
  527|  2.22M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  2.22M|        target_arch = "aarch64"
  529|  2.22M|    )))]
  530|  2.22M|    {
  531|  2.22M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  2.22M|    }
  533|  2.22M|}

_RNvYNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtNtCsgAmdbuUjTpV_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   321k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   321k|        self.movemask().has_non_zero()
   65|   321k|    }
_RNvMNtCsgAmdbuUjTpV_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  2.14M|    fn get_for_offset(self) -> u32 {
  127|  2.14M|        #[cfg(target_endian = "big")]
  128|  2.14M|        {
  129|  2.14M|            self.0.swap_bytes()
  130|  2.14M|        }
  131|  2.14M|        #[cfg(target_endian = "little")]
  132|  2.14M|        {
  133|  2.14M|            self.0
  134|  2.14M|        }
  135|  2.14M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  2.95M|    fn has_non_zero(self) -> bool {
  147|  2.95M|        self.0 != 0
  148|  2.95M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  2.14M|    fn first_offset(self) -> usize {
  172|  2.14M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  2.14M|        // the bytes so we are in practice), where the most significant byte
  174|  2.14M|        // is at a higher address. That means the least significant bit that
  175|  2.14M|        // is set corresponds to the position of our first matching byte.
  176|  2.14M|        // That position corresponds to the number of zeros after the least
  177|  2.14M|        // significant bit.
  178|  2.14M|        self.get_for_offset().trailing_zeros() as usize
  179|  2.14M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  52.7k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  52.7k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  52.7k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  2.90M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  2.90M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  2.90M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  52.7k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  52.7k|            _mm_loadu_si128(data as *const __m128i)
  219|  52.7k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  52.7k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  52.7k|            _mm_cmpeq_epi8(self, vector2)
  229|  52.7k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  2.22M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  2.22M|            _mm_set1_epi8(byte as i8)
  209|  2.22M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  2.15M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  2.15M|            _mm256_loadu_si256(data as *const __m256i)
  268|  2.15M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  3.43M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  3.43M|            _mm256_cmpeq_epi8(self, vector2)
  278|  3.43M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  2.22M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  2.22M|            _mm256_set1_epi8(byte as i8)
  258|  2.22M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  1.28M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  1.28M|            _mm256_load_si256(data as *const __m256i)
  263|  1.28M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|   964k|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|   964k|            _mm256_or_si256(self, vector2)
  288|   964k|        }

_RNvMs2_NtCsaMS60HLPCvw_9once_cell3impINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE14is_initializedCskxgTfQto6Vo_13libfuzzer_sys:
   49|  24.2k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  24.2k|        // An `Acquire` load is enough because that makes all the initialization
   51|  24.2k|        // operations visible to us, and, this being a fast path, weaker
   52|  24.2k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  24.2k|        // `SeqCst` operations on the slow path.
   54|  24.2k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  24.2k|    }

_RNvMs4_NtCsaMS60HLPCvw_9once_cell4syncINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE3getCskxgTfQto6Vo_13libfuzzer_sys:
  963|  24.2k|        pub fn get(&self) -> Option<&T> {
  964|  24.2k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  24.2k|                None
  969|       |            }
  970|  24.2k|        }

_RINvCsl9ThLYvim7w_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbS7gf8MXAex_5oxrdf:
  632|   197k|fn parse_langtag(
  633|   197k|    input: &str,
  634|   197k|    output: &mut impl OutputBuffer,
  635|   197k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|       |    #[derive(PartialEq, Eq)]
  637|       |    enum State {
  638|       |        Start,
  639|       |        AfterLanguage,
  640|       |        AfterExtLang,
  641|       |        AfterScript,
  642|       |        AfterRegion,
  643|       |        InExtension { expected: bool },
  644|       |        InPrivateUse { expected: bool },
  645|       |    }
  646|       |
  647|   197k|    let mut state = State::Start;
  648|   197k|    let mut language_end = 0;
  649|   197k|    let mut extlang_end = 0;
  650|   197k|    let mut script_end = 0;
  651|   197k|    let mut region_end = 0;
  652|   197k|    let mut variant_end = 0;
  653|   197k|    let mut extension_end = 0;
  654|   197k|    let mut extlangs_count = 0;
  655|   474k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   474k|        if subtag.is_empty() {
  657|    151|            return Err(LanguageTagParseError {
  658|    151|                kind: TagParseErrorKind::EmptySubtag,
  659|    151|            });
  660|   474k|        }
  661|   474k|        if subtag.len() > 8 {
  662|      2|            return Err(LanguageTagParseError {
  663|      2|                kind: TagParseErrorKind::SubtagTooLong,
  664|      2|            });
  665|   474k|        }
  666|   474k|        if state == State::Start {
  667|       |            // Primary language
  668|   197k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|     80|                return Err(LanguageTagParseError {
  670|     80|                    kind: TagParseErrorKind::InvalidLanguage,
  671|     80|                });
  672|   197k|            }
  673|   197k|            language_end = end;
  674|   197k|            output.extend(to_lowercase(subtag));
  675|   197k|            if subtag.len() < 4 {
  676|   147k|                // extlangs are only allowed for short language tags
  677|   147k|                state = State::AfterLanguage;
  678|   147k|            } else {
  679|  49.6k|                state = State::AfterExtLang;
  680|  49.6k|            }
  681|   277k|        } else if let State::InPrivateUse { .. } = state {
  682|  1.62k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  1.62k|            }
  687|  1.62k|            output.push('-');
  688|  1.62k|            output.extend(to_lowercase(subtag));
  689|  1.62k|            state = State::InPrivateUse { expected: false };
  690|   275k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  1.09k|            if let State::InExtension { expected: true } = state {
  693|      1|                return Err(LanguageTagParseError {
  694|      1|                    kind: TagParseErrorKind::EmptyExtension,
  695|      1|                });
  696|  1.08k|            }
  697|  1.08k|            output.push('-');
  698|  1.08k|            output.push('x');
  699|  1.08k|            state = State::InPrivateUse { expected: true };
  700|   274k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  42.8k|            if let State::InExtension { expected: true } = state {
  703|     10|                return Err(LanguageTagParseError {
  704|     10|                    kind: TagParseErrorKind::EmptyExtension,
  705|     10|                });
  706|  42.8k|            }
  707|  42.8k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  42.8k|            output.push('-');
  709|  42.8k|            output.push(extension_tag);
  710|  42.8k|            state = State::InExtension { expected: true };
  711|   231k|        } else if let State::InExtension { .. } = state {
  712|  61.2k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  61.2k|            }
  717|  61.2k|            extension_end = end;
  718|  61.2k|            output.push('-');
  719|  61.2k|            output.extend(to_lowercase(subtag));
  720|  61.2k|            state = State::InExtension { expected: false };
  721|   170k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  54.3k|            extlangs_count += 1;
  723|  54.3k|            if extlangs_count > 3 {
  724|      1|                return Err(LanguageTagParseError {
  725|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|      1|                });
  727|  54.3k|            }
  728|  54.3k|            // valid extlangs
  729|  54.3k|            extlang_end = end;
  730|  54.3k|            output.push('-');
  731|  54.3k|            output.extend(to_lowercase(subtag));
  732|   115k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  84.3k|            && subtag.len() == 4
  734|  20.6k|            && is_alphabetic(subtag)
  735|  20.6k|        {
  736|  20.6k|            // Script
  737|  20.6k|            script_end = end;
  738|  20.6k|            output.push('-');
  739|  20.6k|            output.extend(to_uppercase_first(subtag));
  740|  20.6k|            state = State::AfterScript;
  741|  95.1k|        } else if (state == State::AfterLanguage
  742|  49.1k|            || state == State::AfterExtLang
  743|  31.4k|            || state == State::AfterScript)
  744|  77.6k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  32.5k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  45.0k|        {
  747|  45.0k|            // Region
  748|  45.0k|            region_end = end;
  749|  45.0k|            output.push('-');
  750|  45.0k|            output.extend(to_uppercase(subtag));
  751|  45.0k|            state = State::AfterRegion;
  752|  50.1k|        } else if (state == State::AfterLanguage
  753|  28.1k|            || state == State::AfterExtLang
  754|  22.3k|            || state == State::AfterScript
  755|  17.5k|            || state == State::AfterRegion)
  756|  50.1k|            && is_alphanumeric(subtag)
  757|  50.1k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|     13|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  50.1k|        {
  760|  50.1k|            // Variant
  761|  50.1k|            variant_end = end;
  762|  50.1k|            output.push('-');
  763|  50.1k|            output.extend(to_lowercase(subtag));
  764|  50.1k|            state = State::AfterRegion;
  765|  50.1k|        } else {
  766|     13|            return Err(LanguageTagParseError {
  767|     13|                kind: TagParseErrorKind::InvalidSubtag,
  768|     13|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   197k|    if let State::InExtension { expected: true } = state {
  774|     12|        return Err(LanguageTagParseError {
  775|     12|            kind: TagParseErrorKind::EmptyExtension,
  776|     12|        });
  777|   197k|    }
  778|   197k|    if let State::InPrivateUse { expected: true } = state {
  779|      1|        return Err(LanguageTagParseError {
  780|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|      1|        });
  782|   197k|    }
  783|   197k|
  784|   197k|    //We make sure we have not skipped anyone
  785|   197k|    if extlang_end < language_end {
  786|   159k|        extlang_end = language_end;
  787|   159k|    }
  788|   197k|    if script_end < extlang_end {
  789|   176k|        script_end = extlang_end;
  790|   176k|    }
  791|   197k|    if region_end < script_end {
  792|   152k|        region_end = script_end;
  793|   152k|    }
  794|   197k|    if variant_end < region_end {
  795|   163k|        variant_end = region_end;
  796|   163k|    }
  797|   197k|    if extension_end < variant_end {
  798|   158k|        extension_end = variant_end;
  799|   158k|    }
  800|       |
  801|   197k|    Ok(TagElementsPositions {
  802|   197k|        language_end,
  803|   197k|        extlang_end,
  804|   197k|        script_end,
  805|   197k|        region_end,
  806|   197k|        variant_end,
  807|   197k|        extension_end,
  808|   197k|    })
  809|   197k|}
_RINvCsl9ThLYvim7w_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbS7gf8MXAex_5oxrdf:
  587|   205k|fn parse_language_tag(
  588|   205k|    input: &str,
  589|   205k|    output: &mut impl OutputBuffer,
  590|   205k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   205k|    if let Some(tag) = GRANDFATHEREDS
  593|   205k|        .iter()
  594|   205k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   205k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  7.69k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  7.69k|        } else if input.len() == 2 {
  612|      1|            Err(LanguageTagParseError {
  613|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      1|            })
  615|       |        } else {
  616|  7.69k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  7.69k|            Ok(TagElementsPositions {
  618|  7.69k|                language_end: input.len(),
  619|  7.69k|                extlang_end: input.len(),
  620|  7.69k|                script_end: input.len(),
  621|  7.69k|                region_end: input.len(),
  622|  7.69k|                variant_end: input.len(),
  623|  7.69k|                extension_end: input.len(),
  624|  7.69k|            })
  625|       |        }
  626|       |    } else {
  627|   197k|        parse_langtag(input, output)
  628|       |    }
  629|   205k|}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbS7gf8MXAex_5oxrdf:
  571|  7.69k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbS7gf8MXAex_5oxrdf:
  571|   364k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbS7gf8MXAex_5oxrdf:
  571|  45.0k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Csl9ThLYvim7w_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbS7gf8MXAex_5oxrdf:
  571|  20.6k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsl9ThLYvim7w_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbS7gf8MXAex_5oxrdf:
  594|  5.34M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCsbS7gf8MXAex_5oxrdf:
   62|   205k|    pub fn into_inner(self) -> T {
   63|   205k|        self.tag
   64|   205k|    }
_RNvMCsl9ThLYvim7w_10oxilangtagINtB2_11LanguageTagNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCsbS7gf8MXAex_5oxrdf:
   49|   205k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   205k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   205k|        Ok(Self { tag, positions })
   52|   205k|    }
_RNvCsl9ThLYvim7w_10oxilangtag10is_numericCsbS7gf8MXAex_5oxrdf:
  876|      5|fn is_numeric(s: &str) -> bool {
  877|      5|    s.chars().all(|x| x.is_ascii_digit())
  878|      5|}
_RNvCsl9ThLYvim7w_10oxilangtag12to_lowercaseCsbS7gf8MXAex_5oxrdf:
  903|   364k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   364k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   364k|}
_RNvCsl9ThLYvim7w_10oxilangtag12to_uppercaseCsbS7gf8MXAex_5oxrdf:
  891|  45.0k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  45.0k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  45.0k|}
_RNvCsl9ThLYvim7w_10oxilangtag13is_alphabeticCsbS7gf8MXAex_5oxrdf:
  871|   367k|fn is_alphabetic(s: &str) -> bool {
  872|   367k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   367k|}
_RNvCsl9ThLYvim7w_10oxilangtag15is_alphanumericCsbS7gf8MXAex_5oxrdf:
  881|   155k|fn is_alphanumeric(s: &str) -> bool {
  882|   155k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|   155k|}
_RNvCsl9ThLYvim7w_10oxilangtag18to_uppercase_firstCsbS7gf8MXAex_5oxrdf:
  897|  20.6k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  20.6k|    let mut chars = s.chars();
  899|  20.6k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  20.6k|}
_RNvCsl9ThLYvim7w_10oxilangtag23is_alphanumeric_or_dashCsbS7gf8MXAex_5oxrdf:
  886|  7.69k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  7.69k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  7.69k|}
_RNvMsv_Csl9ThLYvim7w_10oxilangtagNtB5_14SubTagIterator3newCsbS7gf8MXAex_5oxrdf:
  850|   197k|    fn new(input: &'a str) -> Self {
  851|   197k|        Self {
  852|   197k|            split: input.split('-'),
  853|   197k|            position: 0,
  854|   197k|        }
  855|   197k|    }
_RNvXsq_Csl9ThLYvim7w_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbS7gf8MXAex_5oxrdf:
  563|   320k|    fn push(&mut self, _: char) {}
_RNvXsw_Csl9ThLYvim7w_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCsbS7gf8MXAex_5oxrdf:
  862|   672k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   672k|        let tag = self.split.next()?;
  864|   474k|        let tag_end = self.position + tag.len();
  865|   474k|        self.position = tag_end + 1;
  866|   474k|        Some((tag, tag_end))
  867|   672k|    }
_RNCNvCsl9ThLYvim7w_10oxilangtag13is_alphabetic0B3_:
  872|  1.00M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsl9ThLYvim7w_10oxilangtag10is_numeric0B3_:
  877|      5|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsl9ThLYvim7w_10oxilangtag15is_alphanumeric0B3_:
  882|   497k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsl9ThLYvim7w_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   101k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput11starts_withCsbS7gf8MXAex_5oxrdf:
 1305|  1.53M|    fn starts_with(&self, c: char) -> bool {
 1306|  1.53M|        self.value.as_str().starts_with(c)
 1307|  1.53M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput4nextCsbS7gf8MXAex_5oxrdf:
 1290|  17.7M|    fn next(&mut self) -> Option<char> {
 1291|  17.7M|        if let Some(head) = self.value.next() {
 1292|  17.0M|            self.position += head.len_utf8();
 1293|  17.0M|            Some(head)
 1294|       |        } else {
 1295|   758k|            None
 1296|       |        }
 1297|  17.7M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput5frontCsbS7gf8MXAex_5oxrdf:
 1300|   740k|    fn front(&self) -> Option<char> {
 1301|   740k|        self.value.clone().next()
 1302|   740k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer3lenCsbS7gf8MXAex_5oxrdf:
 1241|  2.88M|    fn len(&self) -> usize {
 1242|  2.88M|        self.len
 1243|  2.88M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer4pushCsbS7gf8MXAex_5oxrdf:
 1221|  16.6M|    fn push(&mut self, c: char) {
 1222|  16.6M|        self.len += c.len_utf8();
 1223|  16.6M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer5clearCsbS7gf8MXAex_5oxrdf:
 1231|    548|    fn clear(&mut self) {
 1232|    548|        self.len = 0;
 1233|    548|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer6as_strCsbS7gf8MXAex_5oxrdf:
 1246|  1.95M|    fn as_str(&self) -> &str {
 1247|  1.95M|        ""
 1248|  1.95M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer8truncateCsbS7gf8MXAex_5oxrdf:
 1236|   372k|    fn truncate(&mut self, new_len: usize) {
 1237|   372k|        self.len = new_len;
 1238|   372k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsbS7gf8MXAex_5oxrdf:
 1739|  2.46k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1740|  2.46k|        Err(IriParseError { kind })
 1741|  2.46k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECsbS7gf8MXAex_5oxrdf:
 1705|  4.12M|    fn read_url_codepoint_or_echar(
 1706|  4.12M|        &mut self,
 1707|  4.12M|        c: char,
 1708|  4.12M|        valid: impl Fn(char) -> bool,
 1709|  4.12M|    ) -> Result<(), IriParseError> {
 1710|  4.12M|        if UNCHECKED || valid(c) {
 1711|  4.12M|            self.output.push(c);
 1712|  4.12M|            Ok(())
 1713|  2.06k|        } else if c == '%' {
 1714|  1.86k|            self.read_echar()
 1715|       |        } else {
 1716|    197|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  4.12M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECsbS7gf8MXAex_5oxrdf:
 1705|   183k|    fn read_url_codepoint_or_echar(
 1706|   183k|        &mut self,
 1707|   183k|        c: char,
 1708|   183k|        valid: impl Fn(char) -> bool,
 1709|   183k|    ) -> Result<(), IriParseError> {
 1710|   183k|        if UNCHECKED || valid(c) {
 1711|   178k|            self.output.push(c);
 1712|   178k|            Ok(())
 1713|  5.07k|        } else if c == '%' {
 1714|  5.01k|            self.read_echar()
 1715|       |        } else {
 1716|     65|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   183k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECsbS7gf8MXAex_5oxrdf:
 1705|  1.82M|    fn read_url_codepoint_or_echar(
 1706|  1.82M|        &mut self,
 1707|  1.82M|        c: char,
 1708|  1.82M|        valid: impl Fn(char) -> bool,
 1709|  1.82M|    ) -> Result<(), IriParseError> {
 1710|  1.82M|        if UNCHECKED || valid(c) {
 1711|  1.82M|            self.output.push(c);
 1712|  1.82M|            Ok(())
 1713|  3.08k|        } else if c == '%' {
 1714|  2.99k|            self.read_echar()
 1715|       |        } else {
 1716|     91|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  1.82M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECsbS7gf8MXAex_5oxrdf:
 1705|  2.92M|    fn read_url_codepoint_or_echar(
 1706|  2.92M|        &mut self,
 1707|  2.92M|        c: char,
 1708|  2.92M|        valid: impl Fn(char) -> bool,
 1709|  2.92M|    ) -> Result<(), IriParseError> {
 1710|  2.92M|        if UNCHECKED || valid(c) {
 1711|  2.91M|            self.output.push(c);
 1712|  2.91M|            Ok(())
 1713|  5.14k|        } else if c == '%' {
 1714|  5.03k|            self.read_echar()
 1715|       |        } else {
 1716|    106|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  2.92M|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECsbS7gf8MXAex_5oxrdf:
 1705|  14.7k|    fn read_url_codepoint_or_echar(
 1706|  14.7k|        &mut self,
 1707|  14.7k|        c: char,
 1708|  14.7k|        valid: impl Fn(char) -> bool,
 1709|  14.7k|    ) -> Result<(), IriParseError> {
 1710|  14.7k|        if UNCHECKED || valid(c) {
 1711|  13.8k|            self.output.push(c);
 1712|  13.8k|            Ok(())
 1713|    912|        } else if c == '%' {
 1714|    482|            self.read_echar()
 1715|       |        } else {
 1716|    430|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  14.7k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECsbS7gf8MXAex_5oxrdf:
 1705|  2.85M|    fn read_url_codepoint_or_echar(
 1706|  2.85M|        &mut self,
 1707|  2.85M|        c: char,
 1708|  2.85M|        valid: impl Fn(char) -> bool,
 1709|  2.85M|    ) -> Result<(), IriParseError> {
 1710|  2.85M|        if UNCHECKED || valid(c) {
 1711|  2.84M|            self.output.push(c);
 1712|  2.84M|            Ok(())
 1713|  5.14k|        } else if c == '%' {
 1714|  5.03k|            self.read_echar()
 1715|       |        } else {
 1716|    110|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  2.85M|    }
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0CsbS7gf8MXAex_5oxrdf:
 1665|  4.12M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|  4.12M|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  4.12M|                })?,
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsbS7gf8MXAex_5oxrdf:
 1723|  20.3k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsbS7gf8MXAex_5oxrdf:
 1724|  20.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0CsbS7gf8MXAex_5oxrdf:
 1679|   183k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|   183k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   159k|                })?
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0CsbS7gf8MXAex_5oxrdf:
 1690|  1.82M|            self.read_url_codepoint_or_echar(c, |c| {
 1691|  1.82M|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|  1.82M|            })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0CsbS7gf8MXAex_5oxrdf:
 1513|  2.92M|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|  2.92M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|  2.92M|                    })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0CsbS7gf8MXAex_5oxrdf:
 1472|  14.7k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCsbS7gf8MXAex_5oxrdf:
  185|   720k|    pub fn into_inner(self) -> T {
  186|   720k|        self.iri
  187|   720k|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE11is_absoluteCsbS7gf8MXAex_5oxrdf:
  199|   722k|    pub fn is_absolute(&self) -> bool {
  200|   722k|        self.positions.scheme_end != 0
  201|   722k|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCsbS7gf8MXAex_5oxrdf:
   58|   724k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   724k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   722k|        Ok(Self { iri, positions })
   61|   724k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsbS7gf8MXAex_5oxrdf:
 1521|   385k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1522|   385k|        if self.input.starts_with('[') {
 1523|       |            // IP v6
 1524|  36.9k|            let start_position = self.input.position;
 1525|   272k|            while let Some(c) = self.input.next() {
 1526|   272k|                self.output.push(c);
 1527|   272k|                if c == ']' {
 1528|  36.8k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1529|  36.8k|                    if !UNCHECKED {
 1530|  36.8k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1531|  7.32k|                            self.validate_ip_v_future(ip)?;
 1532|  29.5k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1533|     14|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1534|  29.4k|                        }
 1535|      0|                    }
 1536|       |
 1537|  35.8k|                    let c = self.input.next();
 1538|  35.8k|                    return match c {
 1539|       |                        Some(':') => {
 1540|  5.37k|                            self.output.push(':');
 1541|  5.37k|                            self.parse_port()
 1542|       |                        }
 1543|       |                        None | Some('/') | Some('?') | Some('#') => {
 1544|  24.5k|                            self.output_positions.authority_end = self.output.len();
 1545|  24.5k|                            self.parse_path_start(c)
 1546|       |                        }
 1547|    131|                        Some(c) => {
 1548|    131|                            if UNCHECKED {
 1549|      0|                                self.output.push(c);
 1550|      0|                                continue;
 1551|       |                            } else {
 1552|    131|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1553|       |                            }
 1554|       |                        }
 1555|       |                    };
 1556|   235k|                }
 1557|       |            }
 1558|    137|            if UNCHECKED {
 1559|       |                // We consider it's valid even if it's not finished
 1560|      0|                self.output_positions.authority_end = self.output.len();
 1561|      0|                self.parse_path_start(None)
 1562|       |            } else {
 1563|    137|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1564|       |            }
 1565|       |        } else {
 1566|       |            // Other host
 1567|       |            loop {
 1568|  3.20M|                let c = self.input.next();
 1569|  3.20M|                match c {
 1570|       |                    Some(':') => {
 1571|  39.6k|                        self.output.push(':');
 1572|  39.6k|                        return self.parse_port();
 1573|       |                    }
 1574|       |                    None | Some('/') | Some('?') | Some('#') => {
 1575|   299k|                        self.output_positions.authority_end = self.output.len();
 1576|   299k|                        return self.parse_path_start(c);
 1577|       |                    }
 1578|  2.85M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1579|       |                }
 1580|       |            }
 1581|       |        }
 1582|   370k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsbS7gf8MXAex_5oxrdf:
 1634|   646k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1635|       |        loop {
 1636|  5.10M|            let c = self.input.next();
 1637|  5.10M|            match c {
 1638|       |                None | Some('/') | Some('?') | Some('#') => {
 1639|   641k|                    if self.output.as_str().ends_with("/..") {
 1640|      0|                        self.remove_last_segment();
 1641|      0|                        self.remove_last_segment();
 1642|      0|                        self.output.push('/');
 1643|   641k|                    } else if self.output.as_str().ends_with("/.") {
 1644|      0|                        self.remove_last_segment();
 1645|      0|                        self.output.push('/');
 1646|   641k|                    } else if c == Some('/') {
 1647|   332k|                        self.output.push('/');
 1648|   646k|                    }
 1649|       |
 1650|   978k|                    if c == Some('?') {
 1651|  31.5k|                        self.output_positions.path_end = self.output.len();
 1652|  31.5k|                        self.output.push('?');
 1653|  31.5k|                        return self.parse_query();
 1654|   946k|                    } else if c == Some('#') {
 1655|   305k|                        self.output_positions.path_end = self.output.len();
 1656|   305k|                        self.output_positions.query_end = self.output.len();
 1657|   305k|                        self.output.push('#');
 1658|   305k|                        return self.parse_fragment();
 1659|   641k|                    } else if c.is_none() {
 1660|   309k|                        self.output_positions.path_end = self.output.len();
 1661|   309k|                        self.output_positions.query_end = self.output.len();
 1662|   309k|                        return Ok(());
 1663|   332k|                    }
 1664|       |                }
 1665|  4.12M|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|  4.12M|                })?,
 1668|       |            }
 1669|       |        }
 1670|   646k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsbS7gf8MXAex_5oxrdf:
 1584|  45.0k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1585|       |        loop {
 1586|  62.8k|            let c = self.input.next();
 1587|  62.8k|            match c {
 1588|       |                Some('/') | Some('?') | Some('#') | None => {
 1589|  34.4k|                    self.output_positions.authority_end = self.output.len();
 1590|  34.4k|                    return self.parse_path_start(c);
 1591|       |                }
 1592|  17.9k|                Some(c) => {
 1593|  17.9k|                    if UNCHECKED || c.is_ascii_digit() {
 1594|  17.8k|                        self.output.push(c)
 1595|       |                    } else {
 1596|     65|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1597|       |                    }
 1598|       |                }
 1599|       |            }
 1600|       |        }
 1601|  34.4k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsbS7gf8MXAex_5oxrdf:
 1720|  20.4k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1721|  20.4k|        let c1 = self.input.next();
 1722|  20.4k|        let c2 = self.input.next();
 1723|  20.4k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1724|  20.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1725|       |        {
 1726|  20.3k|            self.output.push('%');
 1727|  20.3k|            self.output.push(c1.unwrap());
 1728|  20.3k|            self.output.push(c2.unwrap());
 1729|  20.3k|            Ok(())
 1730|       |        } else {
 1731|    126|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1732|    126|                Some('%'),
 1733|    126|                c1,
 1734|    126|                c2,
 1735|    126|            ]))
 1736|       |        }
 1737|  20.4k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsbS7gf8MXAex_5oxrdf:
 1672|  41.7k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1673|   224k|        while let Some(c) = self.input.next() {
 1674|   184k|            if c == '#' {
 1675|    827|                self.output_positions.query_end = self.output.len();
 1676|    827|                self.output.push('#');
 1677|    827|                return self.parse_fragment();
 1678|       |            } else {
 1679|   183k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   183k|                })?
 1682|       |            }
 1683|       |        }
 1684|  40.7k|        self.output_positions.query_end = self.output.len();
 1685|  40.7k|        Ok(())
 1686|  41.7k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsbS7gf8MXAex_5oxrdf:
 1362|   722k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1363|       |        loop {
 1364|  2.57M|            let c = self.input.next();
 1365|  2.57M|            match c {
 1366|  2.57M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1367|  1.85M|                    self.output.push(c)
 1368|       |                }
 1369|       |                Some(':') => {
 1370|   722k|                    self.output.push(':');
 1371|   722k|                    self.output_positions.scheme_end = self.output.len();
 1372|   722k|                    self.input_scheme_end = self.input.position;
 1373|   722k|                    return if self.input.starts_with('/') {
 1374|   420k|                        self.input.next();
 1375|   420k|                        self.output.push('/');
 1376|   420k|                        self.parse_path_or_authority()
 1377|       |                    } else {
 1378|   301k|                        self.output_positions.authority_end = self.output.len();
 1379|   301k|                        self.parse_path()
 1380|       |                    };
 1381|       |                }
 1382|       |                _ => {
 1383|    548|                    self.input = ParserInput {
 1384|    548|                        value: self.iri.chars(),
 1385|    548|                        position: 0,
 1386|    548|                    }; // reset
 1387|    548|                    self.output.clear();
 1388|    548|                    return self.parse_relative();
 1389|       |                }
 1390|       |            }
 1391|       |        }
 1392|   722k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsbS7gf8MXAex_5oxrdf:
 1688|   321k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1689|  2.14M|        while let Some(c) = self.input.next() {
 1690|  1.82M|            self.read_url_codepoint_or_echar(c, |c| {
 1691|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|  1.82M|            })?;
 1693|       |        }
 1694|   321k|        Ok(())
 1695|   321k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsbS7gf8MXAex_5oxrdf:
 1405|  2.49k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1406|  2.49k|        if let Some(base) = self.base {
 1407|      0|            match self.input.front() {
 1408|       |                None => {
 1409|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1410|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1411|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1412|      0|                    self.output_positions.path_end = base.positions.path_end;
 1413|      0|                    self.output_positions.query_end = base.positions.query_end;
 1414|      0|                    Ok(())
 1415|       |                }
 1416|       |                Some('/') => {
 1417|      0|                    self.input.next();
 1418|      0|                    self.parse_relative_slash(&base)
 1419|       |                }
 1420|       |                Some('?') => {
 1421|      0|                    self.input.next();
 1422|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1423|      0|                    self.output.push('?');
 1424|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1425|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1426|      0|                    self.output_positions.path_end = base.positions.path_end;
 1427|      0|                    self.parse_query()
 1428|       |                }
 1429|       |                Some('#') => {
 1430|      0|                    self.input.next();
 1431|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1432|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1433|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1434|      0|                    self.output_positions.path_end = base.positions.path_end;
 1435|      0|                    self.output_positions.query_end = base.positions.query_end;
 1436|      0|                    self.output.push('#');
 1437|      0|                    self.parse_fragment()
 1438|       |                }
 1439|       |                _ => {
 1440|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1441|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1442|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1443|      0|                    self.output_positions.path_end = base.positions.path_end;
 1444|      0|                    self.remove_last_segment();
 1445|      0|                    if self.output.len() > base.positions.scheme_end {
 1446|      0|                        // We have some path or authority, we keep a base '/'
 1447|      0|                        self.output.push('/');
 1448|      0|                    }
 1449|      0|                    self.parse_relative_path()
 1450|       |                }
 1451|       |            }
 1452|       |        } else {
 1453|  2.49k|            self.output_positions.scheme_end = 0;
 1454|  2.49k|            self.input_scheme_end = 0;
 1455|  2.49k|            if self.input.starts_with('/') {
 1456|    974|                self.input.next();
 1457|    974|                self.output.push('/');
 1458|    974|                self.parse_path_or_authority()
 1459|       |            } else {
 1460|  1.52k|                self.output_positions.authority_end = 0;
 1461|  1.52k|                self.parse_relative_path()
 1462|       |            }
 1463|       |        }
 1464|  2.49k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsbS7gf8MXAex_5oxrdf:
 1495|   385k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1496|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1497|       |        loop {
 1498|  3.31M|            let c = self.input.next();
 1499|  3.31M|            match c {
 1500|       |                Some('@') => {
 1501|  13.2k|                    self.output.push('@');
 1502|  13.2k|                    return self.parse_host();
 1503|       |                }
 1504|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1505|  72.8k|                    self.input = ParserInput {
 1506|  72.8k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1507|  72.8k|                        position: self.input_scheme_end + 2,
 1508|  72.8k|                    };
 1509|  72.8k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1510|  72.8k|                    return self.parse_host();
 1511|       |                }
 1512|  2.92M|                Some(c) => {
 1513|  2.92M|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|  2.92M|                    })?;
 1516|       |                }
 1517|       |            }
 1518|       |        }
 1519|  86.1k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsbS7gf8MXAex_5oxrdf:
 1603|   384k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1604|   384k|        match c {
 1605|       |            None => {
 1606|  51.0k|                self.output_positions.path_end = self.output.len();
 1607|  51.0k|                self.output_positions.query_end = self.output.len();
 1608|  51.0k|                Ok(())
 1609|       |            }
 1610|       |            Some('?') => {
 1611|  10.2k|                self.output_positions.path_end = self.output.len();
 1612|  10.2k|                self.output.push('?');
 1613|  10.2k|                self.parse_query()
 1614|       |            }
 1615|       |            Some('#') => {
 1616|  15.0k|                self.output_positions.path_end = self.output.len();
 1617|  15.0k|                self.output_positions.query_end = self.output.len();
 1618|  15.0k|                self.output.push('#');
 1619|  15.0k|                self.parse_fragment()
 1620|       |            }
 1621|       |            Some('/') => {
 1622|   307k|                self.output.push('/');
 1623|   307k|                self.parse_path()
 1624|       |            }
 1625|      0|            Some(c) => {
 1626|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1627|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1628|      0|                })?;
 1629|      0|                self.parse_path()
 1630|       |            }
 1631|       |        }
 1632|   384k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsbS7gf8MXAex_5oxrdf:
 1348|   724k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1349|   724k|        match self.input.front() {
 1350|       |            Some(':') => {
 1351|     70|                if UNCHECKED {
 1352|      0|                    self.parse_scheme()
 1353|       |                } else {
 1354|     70|                    self.parse_error(IriParseErrorKind::NoScheme)
 1355|       |                }
 1356|       |            }
 1357|   724k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1358|  1.94k|            _ => self.parse_relative(),
 1359|       |        }
 1360|   724k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCsbS7gf8MXAex_5oxrdf:
 1466|  1.52k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1467|  15.7k|        while let Some(c) = self.input.front() {
 1468|  15.4k|            if matches!(c, '/' | '?' | '#') {
 1469|    725|                break;
 1470|  14.7k|            }
 1471|  14.7k|            self.input.next();
 1472|  14.7k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1473|       |        }
 1474|  1.07k|        self.parse_path()
 1475|  1.52k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCsbS7gf8MXAex_5oxrdf:
 1744|  7.32k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1745|  7.32k|        let mut chars = ip.chars();
 1746|       |
 1747|  7.32k|        let c = chars.next().ok_or(IriParseError {
 1748|  7.32k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1749|  7.32k|        })?;
 1750|  7.32k|        if !matches!(c, 'v' | 'V') {
 1751|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1752|  7.32k|        };
 1753|  7.32k|
 1754|  7.32k|        let mut with_a_version = false;
 1755|  17.4k|        for c in &mut chars {
 1756|  17.4k|            if c == '.' {
 1757|  7.12k|                break;
 1758|  10.3k|            } else if c.is_ascii_hexdigit() {
 1759|  10.1k|                with_a_version = true;
 1760|  10.1k|            } else {
 1761|    176|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1762|       |            }
 1763|       |        }
 1764|  7.15k|        if !with_a_version {
 1765|     48|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1766|     48|                chars.next().unwrap_or(']'),
 1767|     48|            ));
 1768|  7.10k|        }
 1769|  7.10k|
 1770|  7.10k|        if chars.as_str().is_empty() {
 1771|     20|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1772|  7.08k|        };
 1773|  96.8k|        for c in chars {
 1774|  90.4k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1775|    677|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1776|  89.7k|            }
 1777|       |        }
 1778|       |
 1779|  6.40k|        Ok(())
 1780|  7.32k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsbS7gf8MXAex_5oxrdf:
 1394|   421k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1395|   421k|        if self.input.starts_with('/') {
 1396|   385k|            self.input.next();
 1397|   385k|            self.output.push('/');
 1398|   385k|            self.parse_authority()
 1399|       |        } else {
 1400|  36.1k|            self.output_positions.authority_end = self.output.len() - 1;
 1401|  36.1k|            self.parse_path()
 1402|       |        }
 1403|   421k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsbS7gf8MXAex_5oxrdf:
 1323|   724k|    fn parse(
 1324|   724k|        iri: &'a str,
 1325|   724k|        base: Option<IriRef<&'a str>>,
 1326|   724k|        output: &'a mut O,
 1327|   724k|    ) -> Result<IriElementsPositions, IriParseError> {
 1328|   724k|        let mut parser = Self {
 1329|   724k|            iri,
 1330|   724k|            base,
 1331|   724k|            input: ParserInput {
 1332|   724k|                value: iri.chars(),
 1333|   724k|                position: 0,
 1334|   724k|            },
 1335|   724k|            output,
 1336|   724k|            output_positions: IriElementsPositions {
 1337|   724k|                scheme_end: 0,
 1338|   724k|                authority_end: 0,
 1339|   724k|                path_end: 0,
 1340|   724k|                query_end: 0,
 1341|   724k|            },
 1342|   724k|            input_scheme_end: 0,
 1343|   724k|        };
 1344|   724k|        parser.parse_scheme_start()?;
 1345|   722k|        Ok(parser.output_positions)
 1346|   724k|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCsbS7gf8MXAex_5oxrdf:
  796|   720k|    pub fn into_inner(self) -> T {
  797|   720k|        self.0.into_inner()
  798|   720k|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCsbS7gf8MXAex_5oxrdf:
  556|   724k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   724k|        IriRef::parse(iri)?.try_into()
  558|   724k|    }
_RNvXsV_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringEINtNtCshZc3FwCJ069_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbS7gf8MXAex_5oxrdf:
 1099|   722k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
 1100|   722k|        if iri.is_absolute() {
 1101|   720k|            Ok(Self(iri))
 1102|       |        } else {
 1103|  1.30k|            Err(IriParseError {
 1104|  1.30k|                kind: IriParseErrorKind::NoScheme,
 1105|  1.30k|            })
 1106|       |        }
 1107|   722k|    }
_RNvCsikbtAEUxupI_5oxiri28is_iunreserved_or_sub_delims:
 1783|  11.9M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1784|  11.9M|    matches!(c,
 1785|  7.19M|        'a'..='z'
 1786|  1.52M|        | 'A'..='Z'
 1787|  2.28M|        | '0'..='9'
 1788|       |        | '!'
 1789|       |        | '$'
 1790|       |        | '&'
 1791|       |        | '\''
 1792|       |        | '('
 1793|       |        | ')'
 1794|       |        | '*'
 1795|       |        | '+'
 1796|       |        | ','
 1797|       |        | '-'
 1798|       |        | '.'
 1799|       |        | ';'
 1800|       |        | '='
 1801|       |        | '_'
 1802|       |        | '~'
 1803|   126k|        | '\u{A0}'..='\u{D7FF}'
 1804|  22.1k|        | '\u{F900}'..='\u{FDCF}'
 1805|  22.1k|        | '\u{FDF0}'..='\u{FFEF}'
 1806|  22.1k|        | '\u{10000}'..='\u{1FFFD}'
 1807|  22.1k|        | '\u{20000}'..='\u{2FFFD}'
 1808|  22.1k|        | '\u{30000}'..='\u{3FFFD}'
 1809|  22.0k|        | '\u{40000}'..='\u{4FFFD}'
 1810|  21.3k|        | '\u{50000}'..='\u{5FFFD}'
 1811|  21.3k|        | '\u{60000}'..='\u{6FFFD}'
 1812|  21.3k|        | '\u{70000}'..='\u{7FFFD}'
 1813|  21.3k|        | '\u{80000}'..='\u{8FFFD}'
 1814|  21.3k|        | '\u{90000}'..='\u{9FFFD}'
 1815|  21.3k|        | '\u{A0000}'..='\u{AFFFD}'
 1816|  21.3k|        | '\u{B0000}'..='\u{BFFFD}'
 1817|  21.3k|        | '\u{C0000}'..='\u{CFFFD}'
 1818|    858|        | '\u{D0000}'..='\u{DFFFD}'
 1819|    493|        | '\u{E1000}'..='\u{EFFFD}'
 1820|       |    )
 1821|  10.7M|}
_RNvCsikbtAEUxupI_5oxiri27is_unreserved_or_sub_delims:
 1823|  90.4k|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1824|  90.4k|    matches!(c,
 1825|  20.3k|        'a'..='z'
 1826|  11.3k|        | 'A'..='Z'
 1827|  36.1k|        | '0'..='9'
 1828|       |        | '!'
 1829|       |        | '$'
 1830|       |        | '&'
 1831|       |        | '\''
 1832|       |        | '('
 1833|       |        | ')'
 1834|       |        | '*'
 1835|       |        | '+'
 1836|       |        | ','
 1837|       |        | '-'
 1838|       |        | '.'
 1839|       |        | ';'
 1840|       |        | '='
 1841|       |        | '_'
 1842|       |        | '~'
 1843|       |    )
 1844|  36.6k|}

_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRNtNtCs8f6x4lOZV33_5alloc6string6StringNtB2_9AsDisplay10as_displayCsbS7gf8MXAex_5oxrdf:
   19|     21|    fn as_display(&'a self) -> Self::Target {
   20|     21|        *self
   21|     21|    }
_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRNtNtCsbS7gf8MXAex_5oxrdf8variable22VariableNameParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|     21|    fn as_display(&'a self) -> Self::Target {
   20|     21|        *self
   21|     21|    }
_RNvXNtCsa8D9DvNAnXy_9thiserror7displayRReNtB2_9AsDisplay10as_displayCsieTkyBvGlyt_12oxsdatatypes:
   19|    128|    fn as_display(&'a self) -> Self::Target {
   20|    128|        *self
   21|    128|    }

_RNvNtCsiLMV5Kw4euE_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  24.2k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  24.2k|    let Ok(reader) = QueryResultsParser::from_format(format).for_slice(data) else {
    8|    241|        return;
    9|       |    };
   10|  24.0k|    match reader {
   11|  24.0k|        SliceQueryResultsParserOutput::Solutions(solutions) => {
   12|  24.0k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|  10.1k|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|  13.8k|            let mut serializer = QueryResultsSerializer::from_format(format)
   18|  13.8k|                .serialize_solutions_to_writer(
   19|  13.8k|                    Vec::new(),
   20|  13.8k|                    solutions
   21|  13.8k|                        .first()
   22|  13.8k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|  13.8k|                )
   24|  13.8k|                .unwrap();
   25|  1.04M|            for solution in &solutions {
   26|  1.02M|                serializer.serialize(solution).unwrap();
   27|  1.02M|            }
   28|  13.8k|            let serialized = serializer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|  13.8k|            if let SliceQueryResultsParserOutput::Solutions(roundtrip_solutions) =
   32|  13.8k|                QueryResultsParser::from_format(format)
   33|  13.8k|                    .for_slice(&serialized)
   34|  13.8k|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|  13.8k|                    .unwrap()
   36|       |            {
   37|  13.8k|                assert_eq!(
   38|  13.8k|                    roundtrip_solutions
   39|  13.8k|                        .collect::<Result<Vec<_>, _>>()
   40|  13.8k|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|  13.8k|                        .unwrap(),
   42|  13.8k|                    solutions
   43|  13.8k|                )
   44|      0|            }
   45|       |        }
   46|      7|        SliceQueryResultsParserOutput::Boolean(value) => {
   47|      7|            // We try to write again
   48|      7|            let mut serialized = Vec::new();
   49|      7|            QueryResultsSerializer::from_format(format)
   50|      7|                .serialize_boolean_to_writer(&mut serialized, value)
   51|      7|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      7|            if let SliceQueryResultsParserOutput::Boolean(roundtrip_value) =
   55|      7|                QueryResultsParser::from_format(format)
   56|      7|                    .for_slice(&serialized)
   57|      7|                    .unwrap()
   58|       |            {
   59|      7|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  24.2k|}
_RNCNvNtCsiLMV5Kw4euE_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|  13.7k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsiLMV5Kw4euE_13oxigraph_fuzz:
   88|   126k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   126k|        BlankNodeRef(match &self.0 {
   90|  30.5k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  95.4k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  95.4k|                id: *id,
   93|  95.4k|                str: str.as_str(),
   94|  95.4k|            },
   95|       |        })
   96|   126k|    }
_RNvMs1_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsiLMV5Kw4euE_13oxigraph_fuzz:
  179|   126k|    pub const fn as_str(self) -> &'a str {
  180|   126k|        match self.0 {
  181|  30.5k|            BlankNodeRefContent::Named(id) => id,
  182|  95.4k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   126k|    }
_RNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsiLMV5Kw4euE_13oxigraph_fuzz:
  265|  95.4k|    fn as_str(&self) -> &str {
  266|  95.4k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  95.4k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  95.4k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|   271k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|   271k|        let id = id.into();
   38|   271k|        validate_blank_node_identifier(&id)?;
   39|   270k|        Ok(Self::new_unchecked(id))
   40|   271k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   49|   270k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   270k|        let id = id.into();
   51|   270k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   202k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  68.4k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   270k|    }
_RNCNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  1.37M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   202k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   202k|        Self(BlankNodeContent::Anonymous {
   64|   202k|            id: id.to_ne_bytes(),
   65|   202k|            str: IdStr::new(id),
   66|   202k|        })
   67|   202k|    }
_RNvMs7_NtCsbS7gf8MXAex_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   202k|    fn new(id: u128) -> Self {
  259|   202k|        let mut str = [0; 32];
  260|   202k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   202k|        Self(str)
  262|   202k|    }
_RNvNtCsbS7gf8MXAex_5oxrdf10blank_node30validate_blank_node_identifier:
  271|   271k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|   271k|    let mut chars = id.chars();
  273|   271k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|   270k|    match front {
  275|   270k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  35.3k|        | 'A'..='Z'
  279|  26.9k|        | 'a'..='z'
  280|  12.1k|        | '\u{00C0}'..='\u{00D6}'
  281|  12.1k|        | '\u{00D8}'..='\u{00F6}'
  282|  12.1k|        | '\u{00F8}'..='\u{02FF}'
  283|  12.0k|        | '\u{0370}'..='\u{037D}'
  284|  12.0k|        | '\u{037F}'..='\u{1FFF}'
  285|    967|        | '\u{200C}'..='\u{200D}'
  286|    967|        | '\u{2070}'..='\u{218F}'
  287|    848|        | '\u{2C00}'..='\u{2FEF}'
  288|    848|        | '\u{3001}'..='\u{D7FF}'
  289|    472|        | '\u{F900}'..='\u{FDCF}'
  290|    472|        | '\u{FDF0}'..='\u{FFFD}'
  291|   270k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|     53|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|  3.23M|    for c in chars {
  295|  2.96M|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|  2.95M|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  17.3k|            | '\u{0300}'..='\u{036F}'
  301|  4.57k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|   411k|            | 'A'..='Z'
  305|   257k|            | 'a'..='z'
  306|  17.9k|            | '\u{00C0}'..='\u{00D6}'
  307|  17.9k|            | '\u{00D8}'..='\u{00F6}'
  308|  17.9k|            | '\u{00F8}'..='\u{02FF}'
  309|  17.3k|            | '\u{0370}'..='\u{037D}'
  310|  17.3k|            | '\u{037F}'..='\u{1FFF}'
  311|  4.57k|            | '\u{200C}'..='\u{200D}'
  312|  4.57k|            | '\u{2070}'..='\u{218F}'
  313|  4.51k|            | '\u{2C00}'..='\u{2FEF}'
  314|  4.50k|            | '\u{3001}'..='\u{D7FF}'
  315|  3.90k|            | '\u{F900}'..='\u{FDCF}'
  316|  3.90k|            | '\u{FDF0}'..='\u{FFFD}'
  317|  2.96M|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|     92|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|   270k|    if id.ends_with('.') {
  324|      0|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|   270k|        Ok(())
  327|       |    }
  328|   271k|}
_RNvNtCsbS7gf8MXAex_5oxrdf10blank_node13to_integer_idB3_:
  331|   270k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   270k|    let digits = id.as_bytes();
  333|   270k|    let mut value: u128 = 0;
  334|   270k|    if let None | Some(b'0') = digits.first() {
  335|  14.1k|        return None; // No empty string or leading zeros
  336|   256k|    }
  337|  3.16M|    for digit in digits {
  338|  2.96M|        value = value.checked_mul(16)?.checked_add(
  339|  2.95M|            match *digit {
  340|  2.95M|                b'0'..=b'9' => digit - b'0',
  341|   226k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  48.3k|                _ => return None,
  343|       |            }
  344|  2.90M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   202k|    Some(value)
  348|   270k|}

_RNvMNtCsbS7gf8MXAex_5oxrdf7literalNtB2_7Literal6as_refCsiLMV5Kw4euE_13oxigraph_fuzz:
  129|   559k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   559k|        LiteralRef(match &self.0 {
  131|  12.6k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  87.2k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  87.2k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   459k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   459k|                value,
  137|   459k|                datatype: datatype.as_ref(),
  138|   459k|            },
  139|       |        })
  140|   559k|    }
_RNvMst_NtCsbS7gf8MXAex_5oxrdf7literalNtB5_10LiteralRef5valueCsiLMV5Kw4euE_13oxigraph_fuzz:
  488|   559k|    pub const fn value(self) -> &'a str {
  489|   559k|        match self.0 {
  490|  12.6k|            LiteralRefContent::String(value)
  491|  87.2k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|   559k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|   559k|        }
  494|   559k|    }
_RNvMst_NtCsbS7gf8MXAex_5oxrdf7literalNtB5_10LiteralRef8datatypeCsiLMV5Kw4euE_13oxigraph_fuzz:
  513|   472k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|   472k|        match self.0 {
  515|  12.6k|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|   459k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|   472k|    }
_RNvMst_NtCsbS7gf8MXAex_5oxrdf7literalNtB5_10LiteralRef8languageCsiLMV5Kw4euE_13oxigraph_fuzz:
  501|   559k|    pub const fn language(self) -> Option<&'a str> {
  502|   559k|        match self.0 {
  503|  87.2k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|   472k|            _ => None,
  505|       |        }
  506|   559k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   47|  25.6k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  25.6k|        Self(LiteralContent::String(value.into()))
   49|  25.6k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs8f6x4lOZV33_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|   294k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   294k|        let value = value.into();
   55|   294k|        let datatype = datatype.into();
   56|   294k|        Self(if datatype == xsd::STRING {
   57|  1.07k|            LiteralContent::String(value)
   58|       |        } else {
   59|   293k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   294k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   676k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   676k|        let value = value.into();
   55|   676k|        let datatype = datatype.into();
   56|   676k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   676k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   676k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs8f6x4lOZV33_5alloc6string6StringReEB5_:
   65|   205k|    pub fn new_language_tagged_literal(
   66|   205k|        value: impl Into<String>,
   67|   205k|        language: impl Into<String>,
   68|   205k|    ) -> Result<Self, LanguageTagParseError> {
   69|   205k|        let mut language = language.into();
   70|   205k|        language.make_ascii_lowercase();
   71|   205k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|   205k|            value,
   73|   205k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|   205k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringB1n_EB5_:
   85|   205k|    pub fn new_language_tagged_literal_unchecked(
   86|   205k|        value: impl Into<String>,
   87|   205k|        language: impl Into<String>,
   88|   205k|    ) -> Self {
   89|   205k|        Self(LiteralContent::LanguageTaggedString {
   90|   205k|            value: value.into(),
   91|   205k|            language: language.into(),
   92|   205k|        })
   93|   205k|    }

_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsiLMV5Kw4euE_13oxigraph_fuzz:
   54|   624k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   624k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   624k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsiLMV5Kw4euE_13oxigraph_fuzz:
  128|   624k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   624k|        Self { iri }
  130|   624k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsiLMV5Kw4euE_13oxigraph_fuzz:
  133|   418k|    pub const fn as_str(self) -> &'a str {
  134|   418k|        self.iri
  135|   418k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|   724k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|   724k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|   724k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   39|   720k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   720k|        Self { iri: iri.into() }
   41|   720k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   676k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   676k|        Self { iri: iri.into() }
   41|   676k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|   720k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|   720k|        Self::new_unchecked(iri.into_inner())
   31|   720k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   971k|    pub fn as_str(&self) -> &str {
   45|   971k|        self.iri.as_str()
   46|   971k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   971k|    pub const fn as_str(self) -> &'a str {
  134|   971k|        self.iri
  135|   971k|    }
_RNvMs4_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   676k|    pub fn into_owned(self) -> NamedNode {
  139|   676k|        NamedNode::new_unchecked(self.iri)
  140|   676k|    }
_RNvXs6_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   676k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   676k|        node.into_owned()
  154|   676k|    }
_RNvXs9_NtCsbS7gf8MXAex_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCshZc3FwCJ069_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   971k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   971k|        self.as_str() == other.as_str()
  175|   971k|    }

_RNvNtCsbS7gf8MXAex_5oxrdf6parser15read_named_node:
  244|   725k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  245|   725k|    let s = s.trim();
  246|   725k|    if let Some(remain) = s.strip_prefix('<') {
  247|   725k|        let end = remain
  248|   725k|            .find('>')
  249|   725k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  250|   724k|        let (value, remain) = remain.split_at(end);
  251|   724k|        let remain = &remain[1..];
  252|   724k|        let value = if value.contains('\\') {
  253|  1.93k|            let mut escaped = String::with_capacity(value.len());
  254|  1.93k|            let mut chars = value.chars();
  255|  79.7k|            while let Some(c) = chars.next() {
  256|  77.9k|                if c == '\\' {
  257|  9.92k|                    match chars.next() {
  258|  2.67k|                        Some('u') => escaped.push(read_hexa_char(&mut chars, 4)?),
  259|  1.50k|                        Some('U') => escaped.push(read_hexa_char(&mut chars, 8)?),
  260|  5.68k|                        Some(c) => {
  261|  5.68k|                            escaped.push('\\');
  262|  5.68k|                            escaped.push(c);
  263|  5.68k|                        }
  264|     71|                        None => escaped.push('\\'),
  265|       |                    }
  266|  67.9k|                } else {
  267|  67.9k|                    escaped.push(c);
  268|  67.9k|                }
  269|       |            }
  270|  1.84k|            Cow::Owned(escaped)
  271|       |        } else {
  272|   722k|            Cow::Borrowed(value)
  273|       |        };
  274|   724k|        let term = NamedNode::new(value.as_ref()).map_err(|error| {
  275|       |            TermParseError(TermParseErrorKind::Iri {
  276|       |                value: value.into_owned(),
  277|       |                error,
  278|       |            })
  279|   724k|        })?;
  280|   720k|        Ok((term, remain))
  281|       |    } else {
  282|    396|        Err(TermParseError::msg(
  283|    396|            "Named node serialization should start with a <",
  284|    396|        ))
  285|       |    }
  286|   725k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser15read_blank_node:
  288|   271k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  289|   271k|    let s = s.trim();
  290|   271k|    if let Some(remain) = s.strip_prefix("_:") {
  291|   271k|        let mut end = remain
  292|   271k|            .find(|v: char| {
  293|       |                v.is_whitespace()
  294|       |                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  295|   271k|            })
  296|   271k|            .unwrap_or(remain.len());
  297|   271k|        if let Some(pos) = remain[..end].find("..") {
  298|      4|            end = pos;
  299|   271k|        }
  300|   271k|        if remain[..end].ends_with('.') {
  301|      6|            // It can't end with '.'
  302|      6|            end -= 1;
  303|   271k|        }
  304|   271k|        let (value, remain) = remain.split_at(end);
  305|   271k|        let term = BlankNode::new(value).map_err(|error| {
  306|       |            TermParseError(TermParseErrorKind::BlankNode {
  307|       |                value: value.to_owned(),
  308|       |                error,
  309|       |            })
  310|   271k|        })?;
  311|   270k|        Ok((term, remain))
  312|       |    } else {
  313|     57|        Err(TermParseError::msg(
  314|     57|            "Blank node serialization should start with '_:'",
  315|     57|        ))
  316|       |    }
  317|   271k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser12read_literal:
  319|  1.20M|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  320|  1.20M|    let s = s.trim();
  321|  1.20M|    if let Some(s) = s.strip_prefix('"') {
  322|   526k|        let mut value = String::with_capacity(s.len());
  323|   526k|        let mut chars = s.chars();
  324|  5.33M|        while let Some(c) = chars.next() {
  325|  5.33M|            match c {
  326|       |                '"' => {
  327|   526k|                    let remain = chars.as_str().trim();
  328|   526k|                    return if let Some(remain) = remain.strip_prefix('@') {
  329|   205k|                        let end = remain
  330|   205k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  331|   205k|                            .unwrap_or(remain.len());
  332|   205k|                        let (language, remain) = remain.split_at(end);
  333|   205k|                        Ok((
  334|   205k|                            Literal::new_language_tagged_literal(value, language).map_err(
  335|   205k|                                |error| {
  336|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  337|       |                                        value: language.to_owned(),
  338|       |                                        error,
  339|       |                                    })
  340|   205k|                                },
  341|   205k|                            )?,
  342|   205k|                            remain,
  343|       |                        ))
  344|   320k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  345|   295k|                        let (datatype, remain) = read_named_node(remain)?;
  346|   294k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  347|       |                    } else {
  348|  25.6k|                        Ok((Literal::new_simple_literal(value), remain))
  349|       |                    };
  350|       |                }
  351|       |                '\\' => {
  352|   104k|                    if let Some(c) = chars.next() {
  353|   104k|                        value.push(match c {
  354|  4.55k|                            't' => '\t',
  355|  4.36k|                            'b' => '\u{08}',
  356|  15.8k|                            'n' => '\n',
  357|  8.57k|                            'r' => '\r',
  358|  4.33k|                            'f' => '\u{0C}',
  359|  20.1k|                            '"' => '"',
  360|    706|                            '\'' => '\'',
  361|  25.8k|                            '\\' => '\\',
  362|  16.4k|                            'u' => read_hexa_char(&mut chars, 4)?,
  363|  3.80k|                            'U' => read_hexa_char(&mut chars, 8)?,
  364|     30|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  365|       |                        })
  366|       |                    } else {
  367|      8|                        return Err(TermParseError::msg("Unexpected literal end"));
  368|       |                    }
  369|       |                }
  370|  4.70M|                _ => value.push(c),
  371|       |            }
  372|       |        }
  373|    158|        Err(TermParseError::msg("Unexpected literal end"))
  374|   677k|    } else if let Some(remain) = s.strip_prefix("true") {
  375|  25.3k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  376|   651k|    } else if let Some(remain) = s.strip_prefix("false") {
  377|  22.8k|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  378|       |    } else {
  379|   628k|        let input = s.as_bytes();
  380|   628k|        if input.is_empty() {
  381|    153|            return Err(TermParseError::msg("Empty term serialization"));
  382|   628k|        }
  383|       |
  384|   628k|        let mut cursor = match input.first() {
  385|   103k|            Some(b'+' | b'-') => 1,
  386|   525k|            _ => 0,
  387|       |        };
  388|   628k|        let mut with_dot = false;
  389|   628k|
  390|   628k|        let mut count_before: usize = 0;
  391|  1.53M|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  392|   906k|            count_before += 1;
  393|   906k|            cursor += 1;
  394|   906k|        }
  395|       |
  396|   628k|        let mut count_after: usize = 0;
  397|   628k|        if cursor < input.len() && input[cursor] == b'.' {
  398|   199k|            with_dot = true;
  399|   199k|            cursor += 1;
  400|   528k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  401|   329k|                count_after += 1;
  402|   329k|                cursor += 1;
  403|   329k|            }
  404|   429k|        }
  405|       |
  406|   628k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  407|   231k|            cursor += 1;
  408|   231k|            cursor += match input.get(cursor) {
  409|  3.28k|                Some(b'+' | b'-') => 1,
  410|   228k|                _ => 0,
  411|       |            };
  412|   231k|            let mut count_exponent = 0;
  413|   727k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  414|   495k|                count_exponent += 1;
  415|   495k|                cursor += 1;
  416|   495k|            }
  417|   231k|            if count_exponent > 0 {
  418|   231k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  419|       |            } else {
  420|     13|                Err(TermParseError::msg(
  421|     13|                    "Double serialization with an invalid exponent",
  422|     13|                ))
  423|       |            }
  424|   396k|        } else if with_dot {
  425|   145k|            if count_after > 0 {
  426|   145k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  427|       |            } else {
  428|     67|                Err(TermParseError::msg(
  429|     67|                    "Decimal serialization without floating part",
  430|     67|                ))
  431|       |            }
  432|   251k|        } else if count_before > 0 {
  433|   250k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  434|       |        } else {
  435|    409|            Err(TermParseError::msg("Empty integer serialization"))
  436|       |        }
  437|       |    }
  438|  1.20M|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser9read_term:
  440|  1.93M|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  441|  1.93M|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  442|    213|        return Err(TermParseError::msg(
  443|    213|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  444|    213|        ));
  445|  1.93M|    }
  446|  1.93M|    let s = s.trim();
  447|       |    #[allow(unused_variables)]
  448|  1.93M|    if let Some(remain) = s.strip_prefix("<<") {
  449|       |        #[cfg(feature = "rdf-star")]
  450|       |        {
  451|   212k|            let (triple, remain) = read_triple(remain, number_of_recursive_calls + 1)?;
  452|   153k|            let remain = remain.trim_start();
  453|   153k|            if let Some(remain) = remain.strip_prefix(">>") {
  454|   152k|                Ok((triple.into(), remain))
  455|       |            } else {
  456|  1.06k|                Err(TermParseError::msg(
  457|  1.06k|                    "Nested triple serialization should be enclosed between << and >>",
  458|  1.06k|                ))
  459|       |            }
  460|       |        }
  461|       |        #[cfg(not(feature = "rdf-star"))]
  462|       |        {
  463|       |            Err(TermParseError::msg("RDF-star is not supported"))
  464|       |        }
  465|  1.72M|    } else if s.starts_with('<') {
  466|   250k|        let (term, remain) = read_named_node(s)?;
  467|   247k|        Ok((term.into(), remain))
  468|  1.47M|    } else if s.starts_with('_') {
  469|   271k|        let (term, remain) = read_blank_node(s)?;
  470|   270k|        Ok((term.into(), remain))
  471|       |    } else {
  472|  1.20M|        let (term, remain) = read_literal(s)?;
  473|  1.20M|        Ok((term.into(), remain))
  474|       |    }
  475|  1.93M|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser11read_triple:
  477|   212k|fn read_triple(
  478|   212k|    s: &str,
  479|   212k|    number_of_recursive_calls: usize,
  480|   212k|) -> Result<(Triple, &str), TermParseError> {
  481|   212k|    let s = s.trim();
  482|   212k|    let (subject, remain) = read_term(s, number_of_recursive_calls + 1)?;
  483|   179k|    let (predicate, remain) = read_named_node(remain)?;
  484|   178k|    let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  485|       |    Ok((
  486|       |        Triple {
  487|   153k|            subject: match subject {
  488|  64.4k|                Term::NamedNode(s) => s.into(),
  489|  27.6k|                Term::BlankNode(s) => s.into(),
  490|       |                Term::Literal(_) => {
  491|    180|                    return Err(TermParseError::msg(
  492|    180|                        "Literals are not allowed in subject position",
  493|    180|                    ));
  494|       |                }
  495|       |                #[cfg(feature = "rdf-star")]
  496|  61.1k|                Term::Triple(s) => Subject::Triple(s),
  497|       |            },
  498|   153k|            predicate,
  499|   153k|            object,
  500|   153k|        },
  501|   153k|        remain,
  502|       |    ))
  503|   212k|}
_RNvNtCsbS7gf8MXAex_5oxrdf6parser14read_hexa_char:
  505|  24.3k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  506|  24.3k|    let mut value = 0;
  507|  24.3k|    for _ in 0..len {
  508|   118k|        if let Some(c) = input.next() {
  509|   117k|            value = value * 16
  510|   117k|                + match c {
  511|   117k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  512|  20.5k|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  513|  18.9k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  514|       |                    _ => {
  515|    192|                        return Err(TermParseError::msg(
  516|    192|                            "Unexpected character in a unicode escape",
  517|    192|                        ));
  518|       |                    }
  519|       |                }
  520|       |        } else {
  521|     89|            return Err(TermParseError::msg("Unexpected literal string end"));
  522|       |        }
  523|       |    }
  524|  24.1k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  525|  24.3k|}
_RNvMs5_NtCsbS7gf8MXAex_5oxrdf6parserNtB5_14TermParseError3msg:
  557|  5.14k|    pub(crate) fn msg(msg: &'static str) -> Self {
  558|  5.14k|        Self(TermParseErrorKind::Msg(msg))
  559|  5.14k|    }
_RNvXs1_NtCsbS7gf8MXAex_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_str:
  135|  1.54M|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  136|  1.54M|        let (term, left) = read_term(s, 0)?;
  137|  1.53M|        if !left.is_empty() {
  138|  1.39k|            return Err(Self::Err::msg("Invalid term serialization"));
  139|  1.53M|        }
  140|  1.53M|        Ok(term)
  141|  1.54M|    }
_RNvXs4_NtCsbS7gf8MXAex_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_str:
  229|  33.5k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  230|  33.5k|        if !s.starts_with('?') && !s.starts_with('$') {
  231|    128|            return Err(Self::Err::msg(
  232|    128|                "Variable serialization should start with ? or $",
  233|    128|            ));
  234|  33.4k|        }
  235|  33.4k|        Self::new(&s[1..]).map_err(|error| {
  236|       |            TermParseError(TermParseErrorKind::Variable {
  237|       |                value: s.to_owned(),
  238|       |                error,
  239|       |            })
  240|  33.4k|        })
  241|  33.5k|    }
_RNCNvXs4_NtCsbS7gf8MXAex_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCshZc3FwCJ069_4core3str6traits7FromStr8from_str0B9_:
  235|     21|        Self::new(&s[1..]).map_err(|error| {
  236|     21|            TermParseError(TermParseErrorKind::Variable {
  237|     21|                value: s.to_owned(),
  238|     21|                error,
  239|     21|            })
  240|     21|        })
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_named_node0B5_:
  249|    555|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_named_nodes_0B5_:
  274|  3.76k|        let term = NamedNode::new(value.as_ref()).map_err(|error| {
  275|  3.76k|            TermParseError(TermParseErrorKind::Iri {
  276|  3.76k|                value: value.into_owned(),
  277|  3.76k|                error,
  278|  3.76k|            })
  279|  3.76k|        })?;
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_blank_node0B5_:
  292|  3.29M|            .find(|v: char| {
  293|  3.29M|                v.is_whitespace()
  294|  3.27M|                    || matches!(v, '<' | '?' | '$' | '"' | '\'' | '>' | '@' | '^' | ':')
  295|  3.29M|            })
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser15read_blank_nodes_0B5_:
  305|    641|        let term = BlankNode::new(value).map_err(|error| {
  306|    641|            TermParseError(TermParseErrorKind::BlankNode {
  307|    641|                value: value.to_owned(),
  308|    641|                error,
  309|    641|            })
  310|    641|        })?;
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser12read_literal0B5_:
  330|  1.85M|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser12read_literals_0B5_:
  335|    272|                                |error| {
  336|    272|                                    TermParseError(TermParseErrorKind::LanguageTag {
  337|    272|                                        value: language.to_owned(),
  338|    272|                                        error,
  339|    272|                                    })
  340|    272|                                },
_RNCNvNtCsbS7gf8MXAex_5oxrdf6parser14read_hexa_char0B5_:
  524|     32|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))

_RNvMsc_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7Subject6as_refCsiLMV5Kw4euE_13oxigraph_fuzz:
  181|  58.7k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  58.7k|        match self {
  183|  24.0k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  13.3k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  21.3k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  58.7k|    }
_RNvMsy_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4Term6as_refCsiLMV5Kw4euE_13oxigraph_fuzz:
  418|   791k|    pub fn as_ref(&self) -> TermRef<'_> {
  419|   791k|        match self {
  420|  82.0k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  421|   112k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  422|   559k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  423|       |            #[cfg(feature = "rdf-star")]
  424|  37.3k|            Self::Triple(triple) => TermRef::Triple(triple),
  425|       |        }
  426|   791k|    }
_RNvXs13_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB6_7SubjectE4fromCsiLMV5Kw4euE_13oxigraph_fuzz:
  746|  58.7k|    fn from(node: &'a Subject) -> Self {
  747|  58.7k|        node.as_ref().into()
  748|  58.7k|    }
_RNvXs14_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB6_4TermE4fromCsiLMV5Kw4euE_13oxigraph_fuzz:
  753|   791k|    fn from(node: &'a Term) -> Self {
  754|   791k|        node.as_ref()
  755|   791k|    }
_RNvXsU_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCsiLMV5Kw4euE_13oxigraph_fuzz:
  674|  58.7k|    fn from(node: &'a NamedNode) -> Self {
  675|  58.7k|        node.as_ref().into()
  676|  58.7k|    }
_RNvXs12_NtCsbS7gf8MXAex_5oxrdf6tripleNtB6_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromNtB6_10SubjectRefE4fromCseR3GpSb7YJr_10sparesults:
  734|  58.7k|    fn from(node: SubjectRef<'a>) -> Self {
  735|  58.7k|        match node {
  736|  24.0k|            SubjectRef::NamedNode(node) => node.into(),
  737|  13.3k|            SubjectRef::BlankNode(node) => node.into(),
  738|       |            #[cfg(feature = "rdf-star")]
  739|  21.3k|            SubjectRef::Triple(triple) => triple.into(),
  740|       |        }
  741|  58.7k|    }
_RNvXsT_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCseR3GpSb7YJr_10sparesults:
  667|   336k|    fn from(node: NamedNodeRef<'a>) -> Self {
  668|   336k|        Self::NamedNode(node)
  669|   336k|    }
_RNvXsV_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCseR3GpSb7YJr_10sparesults:
  681|  13.3k|    fn from(node: BlankNodeRef<'a>) -> Self {
  682|  13.3k|        Self::BlankNode(node)
  683|  13.3k|    }
_RNvXsZ_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7TermRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB5_6TripleE4fromCseR3GpSb7YJr_10sparesults:
  710|  21.3k|    fn from(node: &'a Triple) -> Self {
  711|  21.3k|        Self::Triple(node)
  712|  21.3k|    }
_RNvXse_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  64.4k|    fn from(node: NamedNode) -> Self {
  201|  64.4k|        Self::NamedNode(node)
  202|  64.4k|    }
_RNvXsg_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_7SubjectINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  27.6k|    fn from(node: BlankNode) -> Self {
  215|  27.6k|        Self::BlankNode(node)
  216|  27.6k|    }
_RNvXsA_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  438|   247k|    fn from(node: NamedNode) -> Self {
  439|   247k|        Self::NamedNode(node)
  440|   247k|    }
_RNvXsC_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  452|   270k|    fn from(node: BlankNode) -> Self {
  453|   270k|        Self::BlankNode(node)
  454|   270k|    }
_RNvXsE_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  466|  1.20M|    fn from(literal: Literal) -> Self {
  467|  1.20M|        Self::Literal(literal)
  468|  1.20M|    }
_RNvXsG_NtCsbS7gf8MXAex_5oxrdf6tripleNtB5_4TermINtNtCshZc3FwCJ069_4core7convert4FromNtB5_6TripleE4fromB7_:
  481|   152k|    fn from(triple: Triple) -> Self {
  482|   152k|        Self::Triple(Box::new(triple))
  483|   152k|    }

_RNvMNtCsbS7gf8MXAex_5oxrdf8variableNtB2_8Variable6as_refCsiLMV5Kw4euE_13oxigraph_fuzz:
   50|  1.47M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  1.47M|        VariableRef { name: &self.name }
   52|  1.47M|    }
_RNvXs2_NtCsbS7gf8MXAex_5oxrdf8variableNtB5_11VariableRefINtNtCshZc3FwCJ069_4core7convert4FromRNtB5_8VariableE4fromCsiLMV5Kw4euE_13oxigraph_fuzz:
  123|   733k|    fn from(variable: &'a Variable) -> Self {
  124|   733k|        variable.as_ref()
  125|   733k|    }
_RNvXs5_NtCsbS7gf8MXAex_5oxrdf8variableNtB5_8VariableINtNtCshZc3FwCJ069_4core3cmp9PartialEqNtB5_11VariableRefE2eqCsiLMV5Kw4euE_13oxigraph_fuzz:
  144|   737k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   737k|        self.as_ref() == *other
  146|   737k|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf8variableNtB2_8Variable6as_refCseR3GpSb7YJr_10sparesults:
   50|  2.94M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  2.94M|        VariableRef { name: &self.name }
   52|  2.94M|    }
_RNvMNtCsbS7gf8MXAex_5oxrdf8variableNtB2_8Variable6as_strCseR3GpSb7YJr_10sparesults:
   40|  13.9k|    pub fn as_str(&self) -> &str {
   41|  13.9k|        &self.name
   42|  13.9k|    }
_RNvXs1_NtCsbS7gf8MXAex_5oxrdf8variableNtB5_11VariableRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCseR3GpSb7YJr_10sparesults:
  116|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|     10|        write!(f, "?{}", self.name)
  118|     10|    }
_RNvXs5_NtCsbS7gf8MXAex_5oxrdf8variableNtB5_8VariableINtNtCshZc3FwCJ069_4core3cmp9PartialEqNtB5_11VariableRefE2eqCseR3GpSb7YJr_10sparesults:
  144|  1.47M|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|  1.47M|        self.as_ref() == *other
  146|  1.47M|    }
_RNvXs_NtCsbS7gf8MXAex_5oxrdf8variableNtB4_8VariableNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCseR3GpSb7YJr_10sparesults:
   57|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|     10|        self.as_ref().fmt(f)
   59|     10|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf8variableNtB3_8Variable3newReEB5_:
   22|  33.4k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  33.4k|        let name = name.into();
   24|  33.4k|        validate_variable_identifier(&name)?;
   25|  33.3k|        Ok(Self::new_unchecked(name))
   26|  33.4k|    }
_RINvMNtCsbS7gf8MXAex_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   35|  33.3k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  33.3k|        Self { name: name.into() }
   37|  33.3k|    }
_RNvNtCsbS7gf8MXAex_5oxrdf8variable28validate_variable_identifier:
  163|  33.4k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  33.4k|    let mut chars = id.chars();
  165|  33.4k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  33.4k|    match front {
  167|  33.3k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  16.4k|        | 'A'..='Z'
  171|  5.93k|        | 'a'..='z'
  172|    285|        | '\u{00C0}'..='\u{00D6}'
  173|    285|        | '\u{00D8}'..='\u{00F6}'
  174|    271|        | '\u{00F8}'..='\u{02FF}'
  175|    271|        | '\u{0370}'..='\u{037D}'
  176|    271|        | '\u{037F}'..='\u{1FFF}'
  177|     45|        | '\u{200C}'..='\u{200D}'
  178|     45|        | '\u{2070}'..='\u{218F}'
  179|     25|        | '\u{2C00}'..='\u{2FEF}'
  180|     25|        | '\u{3001}'..='\u{D7FF}'
  181|      6|        | '\u{F900}'..='\u{FDCF}'
  182|      6|        | '\u{FDF0}'..='\u{FFFD}'
  183|  33.1k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      6|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  71.3k|    for c in chars {
  187|  38.0k|        match c {
  188|  38.5k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  3.99k|            | '\u{0300}'..='\u{036F}'
  191|  1.33k|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  16.6k|            | 'A'..='Z'
  194|  8.02k|            | 'a'..='z'
  195|  3.99k|            | '\u{00C0}'..='\u{00D6}'
  196|  3.99k|            | '\u{00D8}'..='\u{00F6}'
  197|  3.99k|            | '\u{00F8}'..='\u{02FF}'
  198|  3.99k|            | '\u{0370}'..='\u{037D}'
  199|  3.99k|            | '\u{037F}'..='\u{1FFF}'
  200|  1.33k|            | '\u{200C}'..='\u{200D}'
  201|  1.33k|            | '\u{2070}'..='\u{218F}'
  202|  1.33k|            | '\u{2C00}'..='\u{2FEF}'
  203|  1.33k|            | '\u{3001}'..='\u{D7FF}'
  204|  1.23k|            | '\u{F900}'..='\u{FDCF}'
  205|  1.23k|            | '\u{FDF0}'..='\u{FFFD}'
  206|  38.2k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      9|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  33.3k|    Ok(())
  211|  33.4k|}

_RINvMs0_NtCseR3GpSb7YJr_10sparesults3csvINtB6_28WriterTsvSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeINtNtNtNtCshZc3FwCJ069_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB3e_25WriterSolutionsSerializerB1c_E9serializeRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableRNtNtB4n_6triple4TermRNtB2M_13QuerySolutionE0EECsiLMV5Kw4euE_13oxigraph_fuzz:
  200|  1.02M|    pub fn serialize<'a>(
  201|  1.02M|        &mut self,
  202|  1.02M|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  203|  1.02M|    ) -> io::Result<()> {
  204|  1.02M|        self.inner.write(&mut self.buffer, solution);
  205|  1.02M|        self.writer.write_all(self.buffer.as_bytes())?;
  206|  1.02M|        self.buffer.clear();
  207|  1.02M|        Ok(())
  208|  1.02M|    }
_RINvMs1_NtCseR3GpSb7YJr_10sparesults3csvNtB6_27InnerTsvSolutionsSerializer5writeINtNtNtNtCshZc3FwCJ069_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2y_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableRNtNtB4c_6triple4TermRNtB26_13QuerySolutionE0EECsiLMV5Kw4euE_13oxigraph_fuzz:
  271|  1.02M|    fn write<'a>(
  272|  1.02M|        &self,
  273|  1.02M|        output: &mut String,
  274|  1.02M|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  275|  1.02M|    ) {
  276|  1.02M|        let mut values = vec![None; self.variables.len()];
  277|  1.76M|        for (variable, value) in solution {
  278|   733k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  279|   733k|                values[position] = Some(value);
  280|   733k|            }
  281|       |        }
  282|  1.02M|        let mut start_binding = true;
  283|  2.06M|        for value in values {
  284|  1.03M|            if start_binding {
  285|  1.02M|                start_binding = false;
  286|  1.02M|            } else {
  287|  4.62k|                output.push('\t');
  288|  4.62k|            }
  289|  1.03M|            if let Some(value) = value {
  290|   733k|                write_tsv_term(output, value);
  291|   733k|            }
  292|       |        }
  293|  1.02M|        output.push('\n');
  294|  1.02M|    }
_RINvNtCseR3GpSb7YJr_10sparesults3csv14write_tsv_termNtNtCsbS7gf8MXAex_5oxrdf10named_node12NamedNodeRefECsiLMV5Kw4euE_13oxigraph_fuzz:
  297|   253k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|   253k|    match term.into() {
  299|   253k|        TermRef::NamedNode(node) => {
  300|   253k|            output.push('<');
  301|   253k|            output.push_str(node.as_str());
  302|   253k|            output.push('>');
  303|   253k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|   253k|}
_RINvNtCseR3GpSb7YJr_10sparesults3csv14write_tsv_termNtNtCsbS7gf8MXAex_5oxrdf6triple7TermRefECsiLMV5Kw4euE_13oxigraph_fuzz:
  297|   733k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|   733k|    match term.into() {
  299|  81.6k|        TermRef::NamedNode(node) => {
  300|  81.6k|            output.push('<');
  301|  81.6k|            output.push_str(node.as_str());
  302|  81.6k|            output.push('>');
  303|  81.6k|        }
  304|   109k|        TermRef::BlankNode(node) => {
  305|   109k|            output.push_str("_:");
  306|   109k|            output.push_str(node.as_str());
  307|   109k|        }
  308|   506k|        TermRef::Literal(literal) => {
  309|   506k|            let value = literal.value();
  310|   506k|            if let Some(language) = literal.language() {
  311|  77.7k|                write_tsv_quoted_str(output, value);
  312|  77.7k|                output.push('@');
  313|  77.7k|                output.push_str(language);
  314|  77.7k|            } else {
  315|   429k|                match literal.datatype() {
  316|   429k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|   403k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|   315k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|   245k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|  31.5k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|   210k|                    datatype => {
  322|   210k|                        write_tsv_quoted_str(output, value);
  323|   210k|                        output.push_str("^^");
  324|   210k|                        write_tsv_term(output, datatype);
  325|   210k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  35.2k|        TermRef::Triple(triple) => {
  331|  35.2k|            output.push_str("<< ");
  332|  35.2k|            write_tsv_term(output, &triple.subject);
  333|  35.2k|            output.push(' ');
  334|  35.2k|            write_tsv_term(output, &triple.predicate);
  335|  35.2k|            output.push(' ');
  336|  35.2k|            write_tsv_term(output, &triple.object);
  337|  35.2k|            output.push_str(" >>");
  338|  35.2k|        }
  339|       |    }
  340|   733k|}
_RINvNtCseR3GpSb7YJr_10sparesults3csv14write_tsv_termRNtNtCsbS7gf8MXAex_5oxrdf10named_node9NamedNodeECsiLMV5Kw4euE_13oxigraph_fuzz:
  297|  58.7k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  58.7k|    match term.into() {
  299|  58.7k|        TermRef::NamedNode(node) => {
  300|  58.7k|            output.push('<');
  301|  58.7k|            output.push_str(node.as_str());
  302|  58.7k|            output.push('>');
  303|  58.7k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|  58.7k|}
_RINvNtCseR3GpSb7YJr_10sparesults3csv14write_tsv_termRNtNtCsbS7gf8MXAex_5oxrdf6triple4TermECsiLMV5Kw4euE_13oxigraph_fuzz:
  297|  58.7k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  58.7k|    match term.into() {
  299|    424|        TermRef::NamedNode(node) => {
  300|    424|            output.push('<');
  301|    424|            output.push_str(node.as_str());
  302|    424|            output.push('>');
  303|    424|        }
  304|  3.34k|        TermRef::BlankNode(node) => {
  305|  3.34k|            output.push_str("_:");
  306|  3.34k|            output.push_str(node.as_str());
  307|  3.34k|        }
  308|  52.8k|        TermRef::Literal(literal) => {
  309|  52.8k|            let value = literal.value();
  310|  52.8k|            if let Some(language) = literal.language() {
  311|  9.53k|                write_tsv_quoted_str(output, value);
  312|  9.53k|                output.push('@');
  313|  9.53k|                output.push_str(language);
  314|  9.53k|            } else {
  315|  43.3k|                match literal.datatype() {
  316|  43.3k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|  42.5k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|  3.02k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|  1.95k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|    303|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|  42.3k|                    datatype => {
  322|  42.3k|                        write_tsv_quoted_str(output, value);
  323|  42.3k|                        output.push_str("^^");
  324|  42.3k|                        write_tsv_term(output, datatype);
  325|  42.3k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  2.13k|        TermRef::Triple(triple) => {
  331|  2.13k|            output.push_str("<< ");
  332|  2.13k|            write_tsv_term(output, &triple.subject);
  333|  2.13k|            output.push(' ');
  334|  2.13k|            write_tsv_term(output, &triple.predicate);
  335|  2.13k|            output.push(' ');
  336|  2.13k|            write_tsv_term(output, &triple.object);
  337|  2.13k|            output.push_str(" >>");
  338|  2.13k|        }
  339|       |    }
  340|  58.7k|}
_RINvNtCseR3GpSb7YJr_10sparesults3csv14write_tsv_termRNtNtCsbS7gf8MXAex_5oxrdf6triple7SubjectECsiLMV5Kw4euE_13oxigraph_fuzz:
  297|  58.7k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  58.7k|    match term.into() {
  299|  24.0k|        TermRef::NamedNode(node) => {
  300|  24.0k|            output.push('<');
  301|  24.0k|            output.push_str(node.as_str());
  302|  24.0k|            output.push('>');
  303|  24.0k|        }
  304|  13.3k|        TermRef::BlankNode(node) => {
  305|  13.3k|            output.push_str("_:");
  306|  13.3k|            output.push_str(node.as_str());
  307|  13.3k|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  21.3k|        TermRef::Triple(triple) => {
  331|  21.3k|            output.push_str("<< ");
  332|  21.3k|            write_tsv_term(output, &triple.subject);
  333|  21.3k|            output.push(' ');
  334|  21.3k|            write_tsv_term(output, &triple.predicate);
  335|  21.3k|            output.push(' ');
  336|  21.3k|            write_tsv_term(output, &triple.object);
  337|  21.3k|            output.push_str(" >>");
  338|  21.3k|        }
  339|       |    }
  340|  58.7k|}
_RINvNtCseR3GpSb7YJr_10sparesults3csv24write_boolean_csv_resultQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsiLMV5Kw4euE_13oxigraph_fuzz:
   14|      7|pub fn write_boolean_csv_result<W: Write>(mut writer: W, value: bool) -> io::Result<W> {
   15|      7|    writer.write_all(if value { b"true" } else { b"false" })?;
   16|      7|    Ok(writer)
   17|      7|}
_RNCINvMs1_NtCseR3GpSb7YJr_10sparesults3csvNtB8_27InnerTsvSolutionsSerializer5writeINtNtNtNtCshZc3FwCJ069_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2A_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableRNtNtB4e_6triple4TermRNtB28_13QuerySolutionE0EE0CsiLMV5Kw4euE_13oxigraph_fuzz:
  278|   737k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNvMs0_NtCseR3GpSb7YJr_10sparesults3csvINtB5_28WriterTsvSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE5startCsiLMV5Kw4euE_13oxigraph_fuzz:
  188|  13.8k|    pub fn start(mut writer: W, variables: Vec<Variable>) -> io::Result<Self> {
  189|  13.8k|        let mut buffer = String::new();
  190|  13.8k|        let inner = InnerTsvSolutionsSerializer::start(&mut buffer, variables);
  191|  13.8k|        writer.write_all(buffer.as_bytes())?;
  192|  13.8k|        buffer.clear();
  193|  13.8k|        Ok(Self {
  194|  13.8k|            inner,
  195|  13.8k|            writer,
  196|  13.8k|            buffer,
  197|  13.8k|        })
  198|  13.8k|    }
_RNvMs0_NtCseR3GpSb7YJr_10sparesults3csvINtB5_28WriterTsvSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsiLMV5Kw4euE_13oxigraph_fuzz:
  210|  13.8k|    pub fn finish(self) -> W {
  211|  13.8k|        self.writer
  212|  13.8k|    }
_RNCNvNtCseR3GpSb7YJr_10sparesults3csv21inner_read_first_line0B5_:
  579|   114k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvNtCseR3GpSb7YJr_10sparesults3csv21inner_read_first_lines_0B5_:
  593|    149|            let variable = Variable::from_str(v).map_err(|e| {
  594|    149|                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|    149|            })?;
_RNCNvMs6_NtCseR3GpSb7YJr_10sparesults3csvNtB7_23TsvInnerSolutionsParser10parse_next0B9_:
  631|  2.17M|            .map(|(i, v)| {
  632|  2.17M|                let v = v.trim();
  633|  2.17M|                if v.is_empty() {
  634|   628k|                    Ok(None)
  635|       |                } else {
  636|  1.54M|                    Ok(Some(Term::from_str(v).map_err(|e| {
  637|       |                        let start_position_char = line
  638|       |                            .split('\t')
  639|       |                            .take(i)
  640|       |                            .map(|c| c.chars().count() + 1)
  641|       |                            .sum::<usize>();
  642|       |                        let start_position_bytes =
  643|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  644|       |                        QueryResultsSyntaxError::term(
  645|       |                            e,
  646|       |                            v.into(),
  647|       |                            TextPosition {
  648|       |                                line: self.line_reader.line_count - 1,
  649|       |                                column: start_position_char.try_into().unwrap(),
  650|       |                                offset: self.line_reader.last_line_start
  651|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  652|       |                            }..TextPosition {
  653|       |                                line: self.line_reader.line_count - 1,
  654|       |                                column: (start_position_char + v.chars().count())
  655|       |                                    .try_into()
  656|       |                                    .unwrap(),
  657|       |                                offset: self.line_reader.last_line_start
  658|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  659|       |                            },
  660|       |                        )
  661|  1.54M|                    })?))
  662|       |                }
  663|  2.17M|            })
_RNCNCNvMs6_NtCseR3GpSb7YJr_10sparesults3csvNtB9_23TsvInnerSolutionsParser10parse_next00Bb_:
  636|  9.69k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  637|  9.69k|                        let start_position_char = line
  638|  9.69k|                            .split('\t')
  639|  9.69k|                            .take(i)
  640|  9.69k|                            .map(|c| c.chars().count() + 1)
  641|  9.69k|                            .sum::<usize>();
  642|  9.69k|                        let start_position_bytes =
  643|  9.69k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  644|  9.69k|                        QueryResultsSyntaxError::term(
  645|  9.69k|                            e,
  646|  9.69k|                            v.into(),
  647|  9.69k|                            TextPosition {
  648|  9.69k|                                line: self.line_reader.line_count - 1,
  649|  9.69k|                                column: start_position_char.try_into().unwrap(),
  650|  9.69k|                                offset: self.line_reader.last_line_start
  651|  9.69k|                                    + u64::try_from(start_position_bytes).unwrap(),
  652|  9.69k|                            }..TextPosition {
  653|  9.69k|                                line: self.line_reader.line_count - 1,
  654|  9.69k|                                column: (start_position_char + v.chars().count())
  655|  9.69k|                                    .try_into()
  656|  9.69k|                                    .unwrap(),
  657|  9.69k|                                offset: self.line_reader.last_line_start
  658|  9.69k|                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  659|  9.69k|                            },
  660|  9.69k|                        )
  661|  9.69k|                    })?))
_RNCNCNCNvMs6_NtCseR3GpSb7YJr_10sparesults3csvNtBb_23TsvInnerSolutionsParser10parse_next000Bd_:
  640|  2.51k|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs6_NtCseR3GpSb7YJr_10sparesults3csvNtBb_23TsvInnerSolutionsParser10parse_next00s_0Bd_:
  643|  2.51k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNvMs7_NtCseR3GpSb7YJr_10sparesults3csvNtB7_10LineReader20next_line_from_slice0B9_:
  800|  48.0k|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCseR3GpSb7YJr_10sparesults3csvNtB7_10LineReader20next_line_from_slices_0B9_:
  800|  2.17M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCseR3GpSb7YJr_10sparesults3csvNtB7_10LineReader20next_line_from_slices0_0B9_:
  801|    121|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  802|    121|            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  803|    121|        });
_RNvMs1_NtCseR3GpSb7YJr_10sparesults3csvNtB5_27InnerTsvSolutionsSerializer5start:
  256|  13.8k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  257|  13.8k|        let mut start_vars = true;
  258|  27.7k|        for variable in &variables {
  259|  13.9k|            if start_vars {
  260|  13.7k|                start_vars = false;
  261|  13.7k|            } else {
  262|    195|                output.push('\t');
  263|    195|            }
  264|  13.9k|            output.push('?');
  265|  13.9k|            output.push_str(variable.as_str());
  266|       |        }
  267|  13.8k|        output.push('\n');
  268|  13.8k|        Self { variables }
  269|  13.8k|    }
_RNvNtCseR3GpSb7YJr_10sparesults3csv20write_tsv_quoted_str:
  342|   353k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  343|   353k|    output.push('"');
  344|  4.37M|    for c in string.chars() {
  345|  4.37M|        match c {
  346|  2.27k|            '\t' => output.push_str("\\t"),
  347|  7.93k|            '\n' => output.push_str("\\n"),
  348|  8.22k|            '\r' => output.push_str("\\r"),
  349|  10.0k|            '"' => output.push_str("\\\""),
  350|  12.9k|            '\\' => output.push_str("\\\\"),
  351|  4.33M|            _ => output.push(c),
  352|       |        };
  353|       |    }
  354|   353k|    output.push('"');
  355|   353k|}
_RNvNtCseR3GpSb7YJr_10sparesults3csv17is_turtle_boolean:
  357|  26.7k|fn is_turtle_boolean(value: &str) -> bool {
  358|  26.7k|    matches!(value, "true" | "false")
  359|  26.7k|}
_RNvNtCseR3GpSb7YJr_10sparesults3csv17is_turtle_integer:
  361|   127k|fn is_turtle_integer(value: &str) -> bool {
  362|   127k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  363|   127k|    let mut value = value.as_bytes();
  364|   127k|    if let Some(v) = value.strip_prefix(b"+") {
  365|    941|        value = v;
  366|   126k|    } else if let Some(v) = value.strip_prefix(b"-") {
  367|  1.20k|        value = v;
  368|   125k|    }
  369|   127k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  370|   127k|}
_RNvNtCseR3GpSb7YJr_10sparesults3csv17is_turtle_decimal:
  372|  70.7k|fn is_turtle_decimal(value: &str) -> bool {
  373|  70.7k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  374|  70.7k|    let mut value = value.as_bytes();
  375|  70.7k|    if let Some(v) = value.strip_prefix(b"+") {
  376|  15.8k|        value = v;
  377|  54.9k|    } else if let Some(v) = value.strip_prefix(b"-") {
  378|  7.22k|        value = v;
  379|  47.7k|    }
  380|   177k|    while value.first().map_or(false, u8::is_ascii_digit) {
  381|   106k|        value = &value[1..];
  382|   106k|    }
  383|  70.7k|    let Some(value) = value.strip_prefix(b".") else {
  384|  2.02k|        return false;
  385|       |    };
  386|  68.7k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  387|  70.7k|}
_RNvNtCseR3GpSb7YJr_10sparesults3csv16is_turtle_double:
  389|   215k|fn is_turtle_double(value: &str) -> bool {
  390|   215k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  391|   215k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  392|   215k|    let mut value = value.as_bytes();
  393|   215k|    if let Some(v) = value.strip_prefix(b"+") {
  394|  1.22k|        value = v;
  395|   214k|    } else if let Some(v) = value.strip_prefix(b"-") {
  396|  50.9k|        value = v;
  397|   163k|    }
  398|   215k|    let mut with_before = false;
  399|   260k|    while value.first().map_or(false, u8::is_ascii_digit) {
  400|  44.9k|        value = &value[1..];
  401|  44.9k|        with_before = true;
  402|  44.9k|    }
  403|   215k|    let mut with_after = false;
  404|   215k|    if let Some(v) = value.strip_prefix(b".") {
  405|  52.2k|        value = v;
  406|  87.5k|        while value.first().map_or(false, u8::is_ascii_digit) {
  407|  35.3k|            value = &value[1..];
  408|  35.3k|            with_after = true;
  409|  35.3k|        }
  410|   163k|    }
  411|   215k|    if let Some(v) = value.strip_prefix(b"e") {
  412|   156k|        value = v;
  413|   156k|    } else if let Some(v) = value.strip_prefix(b"E") {
  414|  47.8k|        value = v;
  415|  47.8k|    } else {
  416|  11.9k|        return false;
  417|       |    }
  418|   203k|    if let Some(v) = value.strip_prefix(b"+") {
  419|    170|        value = v;
  420|   203k|    } else if let Some(v) = value.strip_prefix(b"-") {
  421|  3.09k|        value = v;
  422|   200k|    }
  423|   203k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  424|   215k|}
_RNvMs4_NtCseR3GpSb7YJr_10sparesults3csvNtB5_32SliceTsvQueryResultsParserOutput4read:
  536|  38.0k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  537|  38.0k|        let mut reader = LineReader::new();
  538|  38.0k|        let line = reader.next_line_from_slice(slice)?;
  539|  38.0k|        Ok(match inner_read_first_line(reader, line)? {
  540|       |            TsvInnerQueryResults::Solutions {
  541|  37.8k|                variables,
  542|  37.8k|                solutions,
  543|  37.8k|            } => Self::Solutions {
  544|  37.8k|                variables,
  545|  37.8k|                solutions: SliceTsvSolutionsParser {
  546|  37.8k|                    slice,
  547|  37.8k|                    inner: solutions,
  548|  37.8k|                },
  549|  37.8k|            },
  550|     14|            TsvInnerQueryResults::Boolean(value) => Self::Boolean(value),
  551|       |        })
  552|  38.0k|    }
_RNvMs5_NtCseR3GpSb7YJr_10sparesults3csvNtB5_23SliceTsvSolutionsParser10parse_next:
  561|  2.18M|    pub fn parse_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  562|  2.18M|        let line = self.inner.line_reader.next_line_from_slice(self.slice)?;
  563|  2.18M|        self.inner.parse_next(line)
  564|  2.18M|    }
_RNvNtCseR3GpSb7YJr_10sparesults3csv21inner_read_first_line:
  575|  38.0k|fn inner_read_first_line(
  576|  38.0k|    reader: LineReader,
  577|  38.0k|    line: &str,
  578|  38.0k|) -> Result<TsvInnerQueryResults, QueryResultsSyntaxError> {
  579|  38.0k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  580|  38.0k|    if line.eq_ignore_ascii_case("true") {
  581|      6|        return Ok(TsvInnerQueryResults::Boolean(true));
  582|  38.0k|    }
  583|  38.0k|    if line.eq_ignore_ascii_case("false") {
  584|      8|        return Ok(TsvInnerQueryResults::Boolean(false));
  585|  38.0k|    }
  586|  38.0k|    let mut variables = Vec::new();
  587|  38.0k|    if !line.is_empty() {
  588|  33.6k|        for v in line.split('\t') {
  589|  33.6k|            let v = v.trim();
  590|  33.6k|            if v.is_empty() {
  591|     80|                return Err(QueryResultsSyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar"));
  592|  33.5k|            }
  593|  33.5k|            let variable = Variable::from_str(v).map_err(|e| {
  594|       |                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|  33.5k|            })?;
  596|  33.3k|            if variables.contains(&variable) {
  597|     10|                return Err(QueryResultsSyntaxError::msg(format!(
  598|     10|                    "The variable {variable} is declared twice"
  599|     10|                )));
  600|  33.3k|            }
  601|  33.3k|            variables.push(variable);
  602|       |        }
  603|  5.32k|    }
  604|  37.8k|    let column_len = variables.len();
  605|  37.8k|    Ok(TsvInnerQueryResults::Solutions {
  606|  37.8k|        variables,
  607|  37.8k|        solutions: TsvInnerSolutionsParser {
  608|  37.8k|            line_reader: reader,
  609|  37.8k|            column_len,
  610|  37.8k|        },
  611|  37.8k|    })
  612|  38.0k|}
_RNvMs6_NtCseR3GpSb7YJr_10sparesults3csvNtB5_23TsvInnerSolutionsParser10parse_next:
  621|  2.18M|    pub fn parse_next(
  622|  2.18M|        &self,
  623|  2.18M|        line: &str,
  624|  2.18M|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  625|  2.18M|        if line.is_empty() {
  626|  27.6k|            return Ok(None); // EOF
  627|  2.15M|        }
  628|  2.15M|        let elements = line
  629|  2.15M|            .split('\t')
  630|  2.15M|            .enumerate()
  631|  2.15M|            .map(|(i, v)| {
  632|       |                let v = v.trim();
  633|       |                if v.is_empty() {
  634|       |                    Ok(None)
  635|       |                } else {
  636|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  637|       |                        let start_position_char = line
  638|       |                            .split('\t')
  639|       |                            .take(i)
  640|       |                            .map(|c| c.chars().count() + 1)
  641|       |                            .sum::<usize>();
  642|       |                        let start_position_bytes =
  643|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  644|       |                        QueryResultsSyntaxError::term(
  645|       |                            e,
  646|       |                            v.into(),
  647|       |                            TextPosition {
  648|       |                                line: self.line_reader.line_count - 1,
  649|       |                                column: start_position_char.try_into().unwrap(),
  650|       |                                offset: self.line_reader.last_line_start
  651|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  652|       |                            }..TextPosition {
  653|       |                                line: self.line_reader.line_count - 1,
  654|       |                                column: (start_position_char + v.chars().count())
  655|       |                                    .try_into()
  656|       |                                    .unwrap(),
  657|       |                                offset: self.line_reader.last_line_start
  658|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  659|       |                            },
  660|       |                        )
  661|       |                    })?))
  662|       |                }
  663|  2.15M|            })
  664|  2.15M|            .collect::<Result<Vec<_>, QueryResultsSyntaxError>>()?;
  665|  2.14M|        if elements.len() == self.column_len {
  666|  2.14M|            Ok(Some(elements))
  667|  3.73k|        } else if self.column_len == 0 && elements == [None] {
  668|  3.35k|            Ok(Some(Vec::new())) // Zero columns case
  669|       |        } else {
  670|    377|            Err(QueryResultsSyntaxError::located_message(
  671|    377|                format!(
  672|    377|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  673|    377|                    self.column_len,
  674|    377|                    self.line_reader.line_count - 1,
  675|    377|                    elements.len(),
  676|    377|                    line
  677|    377|                ),
  678|    377|                TextPosition {
  679|    377|                    line: self.line_reader.line_count - 1,
  680|    377|                    column: 0,
  681|    377|                    offset: self.line_reader.last_line_start,
  682|    377|                }..TextPosition {
  683|    377|                    line: self.line_reader.line_count - 1,
  684|    377|                    column: line.chars().count().try_into().unwrap(),
  685|    377|                    offset: self.line_reader.last_line_end,
  686|    377|                },
  687|    377|            ))
  688|       |        }
  689|  2.18M|    }
_RNvMs7_NtCseR3GpSb7YJr_10sparesults3csvNtB5_10LineReader3new:
  701|  38.0k|    fn new() -> Self {
  702|  38.0k|        Self {
  703|  38.0k|            buffer_start: 0,
  704|  38.0k|            buffer_end: 0,
  705|  38.0k|            line_count: 0,
  706|  38.0k|            last_line_start: 0,
  707|  38.0k|            last_line_end: 0,
  708|  38.0k|        }
  709|  38.0k|    }
_RNvMs7_NtCseR3GpSb7YJr_10sparesults3csvNtB5_10LineReader20next_line_from_slice:
  795|  2.22M|    fn next_line_from_slice<'a>(
  796|  2.22M|        &mut self,
  797|  2.22M|        slice: &'a [u8],
  798|  2.22M|    ) -> Result<&'a str, QueryResultsSyntaxError> {
  799|  2.22M|        let line_end = memchr(b'\n', &slice[self.buffer_start..])
  800|  2.22M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
  801|  2.22M|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  802|       |            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  803|  2.22M|        });
  804|  2.22M|        self.line_count += 1;
  805|  2.22M|        self.last_line_start = self.last_line_end;
  806|  2.22M|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  807|  2.22M|        self.buffer_start = line_end;
  808|  2.22M|        result
  809|  2.22M|    }

_RINvMs2_NtCseR3GpSb7YJr_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
   86|    280|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    280|        Self(SyntaxErrorKind::Msg {
   88|    280|            msg: msg.into(),
   89|    280|            location: None,
   90|    280|        })
   91|    280|    }
_RINvMs2_NtCseR3GpSb7YJr_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   86|     80|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|     80|        Self(SyntaxErrorKind::Msg {
   88|     80|            msg: msg.into(),
   89|     80|            location: None,
   90|     80|        })
   91|     80|    }
_RINvMs2_NtCseR3GpSb7YJr_10sparesults5errorNtB6_23QueryResultsSyntaxError15located_messageNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
  103|    377|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
  104|    377|        Self(SyntaxErrorKind::Msg {
  105|    377|            msg: msg.into(),
  106|    377|            location: Some(location),
  107|    377|        })
  108|    377|    }
_RNvMs2_NtCseR3GpSb7YJr_10sparesults5errorNtB5_23QueryResultsSyntaxError4term:
   93|  9.69k|    pub(crate) fn term(error: TermParseError, term: String, location: Range<TextPosition>) -> Self {
   94|  9.69k|        Self(SyntaxErrorKind::Term {
   95|  9.69k|            error,
   96|  9.69k|            term,
   97|  9.69k|            location,
   98|  9.69k|        })
   99|  9.69k|    }

_RNvMNtCseR3GpSb7YJr_10sparesults6parserNtB2_18QueryResultsParser11from_formatCsiLMV5Kw4euE_13oxigraph_fuzz:
   65|  38.0k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  38.0k|        Self { format }
   67|  38.0k|    }
_RNvMNtCseR3GpSb7YJr_10sparesults6parserNtB2_18QueryResultsParser9for_slice:
  234|  38.0k|    pub fn for_slice(
  235|  38.0k|        self,
  236|  38.0k|        slice: &[u8],
  237|  38.0k|    ) -> Result<SliceQueryResultsParserOutput<'_>, QueryResultsSyntaxError> {
  238|  38.0k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match SliceXmlQueryResultsParserOutput::read(slice)? {
  240|      0|                SliceXmlQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  241|       |                SliceXmlQueryResultsParserOutput::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: SliceSolutionsParserKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match SliceJsonQueryResultsParserOutput::read(slice)? {
  250|      0|                SliceJsonQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  251|       |                SliceJsonQueryResultsParserOutput::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: SliceSolutionsParserKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|  38.0k|            QueryResultsFormat::Tsv => match SliceTsvQueryResultsParserOutput::read(slice)? {
  261|     14|                SliceTsvQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  262|       |                SliceTsvQueryResultsParserOutput::Solutions {
  263|  37.8k|                    solutions,
  264|  37.8k|                    variables,
  265|  37.8k|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  266|  37.8k|                    variables: variables.into(),
  267|  37.8k|                    solutions: SliceSolutionsParserKind::Tsv(solutions),
  268|  37.8k|                }),
  269|       |            },
  270|       |        })
  271|  38.0k|    }
_RNvXs3_NtCseR3GpSb7YJr_10sparesults6parserNtB5_20SliceSolutionsParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  642|  2.18M|    fn next(&mut self) -> Option<Self::Item> {
  643|  2.18M|        Some(
  644|  2.18M|            match &mut self.solutions {
  645|      0|                SliceSolutionsParserKind::Xml(reader) => reader.parse_next(),
  646|      0|                SliceSolutionsParserKind::Json(reader) => reader.parse_next(),
  647|  2.18M|                SliceSolutionsParserKind::Tsv(reader) => reader.parse_next(),
  648|       |            }
  649|  2.18M|            .transpose()?
  650|  2.15M|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|  2.15M|        )
  652|  2.18M|    }
_RNCNvXs3_NtCseR3GpSb7YJr_10sparesults6parserNtB7_20SliceSolutionsParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  2.14M|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RINvMNtCseR3GpSb7YJr_10sparesults10serializerNtB3_22QueryResultsSerializer27serialize_boolean_to_writerQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsiLMV5Kw4euE_13oxigraph_fuzz:
   75|      7|    pub fn serialize_boolean_to_writer<W: Write>(self, writer: W, value: bool) -> io::Result<W> {
   76|      7|        match self.format {
   77|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(writer, value),
   78|      0|            QueryResultsFormat::Json => write_boolean_json_result(writer, value),
   79|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   80|      7|                write_boolean_csv_result(writer, value)
   81|       |            }
   82|       |        }
   83|      7|    }
_RINvMNtCseR3GpSb7YJr_10sparesults10serializerNtB3_22QueryResultsSerializer29serialize_solutions_to_writerINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsiLMV5Kw4euE_13oxigraph_fuzz:
  146|  13.8k|    pub fn serialize_solutions_to_writer<W: Write>(
  147|  13.8k|        self,
  148|  13.8k|        writer: W,
  149|  13.8k|        variables: Vec<Variable>,
  150|  13.8k|    ) -> io::Result<WriterSolutionsSerializer<W>> {
  151|  13.8k|        Ok(WriterSolutionsSerializer {
  152|  13.8k|            formatter: match self.format {
  153|       |                QueryResultsFormat::Xml => WriterSolutionsSerializerKind::Xml(
  154|      0|                    WriterXmlSolutionsSerializer::start(writer, &variables)?,
  155|       |                ),
  156|       |                QueryResultsFormat::Json => WriterSolutionsSerializerKind::Json(
  157|      0|                    WriterJsonSolutionsSerializer::start(writer, &variables)?,
  158|       |                ),
  159|       |                QueryResultsFormat::Csv => WriterSolutionsSerializerKind::Csv(
  160|      0|                    WriterCsvSolutionsSerializer::start(writer, variables)?,
  161|       |                ),
  162|       |                QueryResultsFormat::Tsv => WriterSolutionsSerializerKind::Tsv(
  163|  13.8k|                    WriterTsvSolutionsSerializer::start(writer, variables)?,
  164|       |                ),
  165|       |            },
  166|       |        })
  167|  13.8k|    }
_RINvMs0_NtCseR3GpSb7YJr_10sparesults10serializerINtB6_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableRNtNtB26_6triple4TermRNtNtB8_8solution13QuerySolutionECsiLMV5Kw4euE_13oxigraph_fuzz:
  304|  1.02M|    pub fn serialize<'a>(
  305|  1.02M|        &mut self,
  306|  1.02M|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  307|  1.02M|    ) -> io::Result<()> {
  308|  1.02M|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  309|  1.02M|        match &mut self.formatter {
  310|      0|            WriterSolutionsSerializerKind::Xml(writer) => writer.serialize(solution),
  311|      0|            WriterSolutionsSerializerKind::Json(writer) => writer.serialize(solution),
  312|      0|            WriterSolutionsSerializerKind::Csv(writer) => writer.serialize(solution),
  313|  1.02M|            WriterSolutionsSerializerKind::Tsv(writer) => writer.serialize(solution),
  314|       |        }
  315|  1.02M|    }
_RNCINvMs0_NtCseR3GpSb7YJr_10sparesults10serializerINtB8_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableRNtNtB28_6triple4TermRNtNtBa_8solution13QuerySolutionE0CsiLMV5Kw4euE_13oxigraph_fuzz:
  308|   733k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RNvMs0_NtCseR3GpSb7YJr_10sparesults10serializerINtB5_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsiLMV5Kw4euE_13oxigraph_fuzz:
  318|  13.8k|    pub fn finish(self) -> io::Result<W> {
  319|  13.8k|        match self.formatter {
  320|      0|            WriterSolutionsSerializerKind::Xml(serializer) => serializer.finish(),
  321|      0|            WriterSolutionsSerializerKind::Json(serializer) => serializer.finish(),
  322|      0|            WriterSolutionsSerializerKind::Csv(serializer) => Ok(serializer.finish()),
  323|  13.8k|            WriterSolutionsSerializerKind::Tsv(serializer) => Ok(serializer.finish()),
  324|       |        }
  325|  13.8k|    }
_RNvMNtCseR3GpSb7YJr_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCsiLMV5Kw4euE_13oxigraph_fuzz:
   59|  13.8k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   60|  13.8k|        Self { format }
   61|  13.8k|    }

_RNvMNtCseR3GpSb7YJr_10sparesults8solutionNtB2_13QuerySolution9variablesCsiLMV5Kw4euE_13oxigraph_fuzz:
  158|  13.7k|    pub fn variables(&self) -> &[Variable] {
  159|  13.7k|        &self.variables
  160|  13.7k|    }
_RNvXs0_NtCseR3GpSb7YJr_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterCsiLMV5Kw4euE_13oxigraph_fuzz:
  178|  1.02M|    fn into_iter(self) -> Self::IntoIter {
  179|  1.02M|        Iter {
  180|  1.02M|            inner: self.variables.iter().zip(&self.values),
  181|  1.02M|        }
  182|  1.02M|    }
_RNvXs9_NtCseR3GpSb7YJr_10sparesults8solutionNtB5_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCsiLMV5Kw4euE_13oxigraph_fuzz:
  285|  1.76M|    fn next(&mut self) -> Option<Self::Item> {
  286|  2.06M|        for (variable, value) in &mut self.inner {
  287|  1.03M|            if let Some(value) = value {
  288|   733k|                return Some((variable, value));
  289|   298k|            }
  290|       |        }
  291|  1.02M|        None
  292|  1.76M|    }
_RNvXsc_NtCseR3GpSb7YJr_10sparesults8solutionNtNtCsbS7gf8MXAex_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|  1.46M|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|  1.46M|        solution.variables.iter().position(|v| *v == self)
  325|  1.46M|    }
_RNvXsd_NtCseR3GpSb7YJr_10sparesults8solutionRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|  1.46M|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|  1.46M|        self.as_ref().index(solution)
  332|  1.46M|    }
_RINvMNtCseR3GpSb7YJr_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableEB5_:
   38|  1.46M|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|  1.46M|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|  1.46M|    }
_RNvXs_NtCseR3GpSb7YJr_10sparesults8solutionNtB4_13QuerySolutionINtNtCshZc3FwCJ069_4core7convert4FromTINtNtCs8f6x4lOZV33_5alloc4sync3ArcSNtNtCsbS7gf8MXAex_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  2.14M|    fn from((v, s): (V, S)) -> Self {
  166|  2.14M|        Self {
  167|  2.14M|            variables: v.into(),
  168|  2.14M|            values: s.into(),
  169|  2.14M|        }
  170|  2.14M|    }
_RNCNvXsc_NtCseR3GpSb7YJr_10sparesults8solutionNtNtCsbS7gf8MXAex_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|  1.47M|        solution.variables.iter().position(|v| *v == self)
_RNvMNtCseR3GpSb7YJr_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  2.05M|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  2.05M|        self.into_iter()
  114|  2.05M|    }
_RNvXs0_NtCseR3GpSb7YJr_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  2.05M|    fn into_iter(self) -> Self::IntoIter {
  179|  2.05M|        Iter {
  180|  2.05M|            inner: self.variables.iter().zip(&self.values),
  181|  2.05M|        }
  182|  2.05M|    }
_RNvXs6_NtCseR3GpSb7YJr_10sparesults8solutionNtB5_13QuerySolutionNtNtCshZc3FwCJ069_4core3cmp9PartialEq2eq:
  236|  1.02M|    fn eq(&self, other: &Self) -> bool {
  237|  1.02M|        for (k, v) in self.iter() {
  238|   733k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|   733k|            }
  241|       |        }
  242|  1.02M|        for (k, v) in other.iter() {
  243|   733k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|   733k|            }
  246|       |        }
  247|  1.02M|        true
  248|  1.02M|    }
_RNvXs9_NtCseR3GpSb7YJr_10sparesults8solutionNtB5_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  3.52M|    fn next(&mut self) -> Option<Self::Item> {
  286|  4.12M|        for (variable, value) in &mut self.inner {
  287|  2.06M|            if let Some(value) = value {
  288|  1.46M|                return Some((variable, value));
  289|   597k|            }
  290|       |        }
  291|  2.05M|        None
  292|  3.52M|    }


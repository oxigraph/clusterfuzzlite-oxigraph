_RINvXNtCshtIYxkSpLeS_6anyhow7contextINtNtCsl2lhD68vXAd_4core6result6ResultINtNtCsdBW21Yiwikk_5alloc3vec3VecNtNtCsbBgSuRnHgd0_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|  2.24k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  2.24k|    where
   60|  2.24k|        C: Display + Send + Sync + 'static,
   61|  2.24k|        F: FnOnce() -> C,
   62|  2.24k|    {
   63|  2.24k|        match self {
   64|  2.24k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  2.24k|    }
_RINvXNtCshtIYxkSpLeS_6anyhow7contextINtNtCsl2lhD68vXAd_4core6result6ResultINtNtCsbBgSuRnHgd0_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error10ParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCsdBW21Yiwikk_5alloc6string6StringNCNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB42_:
   58|  2.24k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  2.24k|    where
   60|  2.24k|        C: Display + Send + Sync + 'static,
   61|  2.24k|        F: FnOnce() -> C,
   62|  2.24k|    {
   63|  2.24k|        match self {
   64|  2.24k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  2.24k|    }

_RNvNvCs8np2ebvapET_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  3.77k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  3.77k|                $body
  243|  3.77k|            }
rust_fuzzer_test_input:
  209|  3.77k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.77k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.77k|                }
  223|  3.77k|
  224|  3.77k|                __libfuzzer_sys_run(bytes);
  225|  3.77k|                0
  226|  3.77k|            }
LLVMFuzzerTestOneInput:
   58|  3.77k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.77k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.77k|    });
   63|  3.77k|
   64|  3.77k|    match test_input {
   65|  3.77k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.77k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs5ixuek62Ty3_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.77k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.77k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.77k|        rust_fuzzer_test_input(data_slice)
   62|  3.77k|    });

_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECslu3GLw2gIGD_13oxigraph_fuzz:
 1125|   283k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   283k|    haystack: &[u8],
 1127|   283k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   283k|) -> Option<usize> {
 1129|   283k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   283k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   283k|    // a &[u8].
 1132|   283k|    let start = haystack.as_ptr();
 1133|   283k|    let end = start.add(haystack.len());
 1134|   283k|    let found = find_raw(start, end)?;
 1135|   265k|    Some(found.distance(start))
 1136|   283k|}
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE7needle1B8_:
  117|  41.1k|    pub(crate) fn needle1(&self) -> u8 {
  118|  41.1k|        self.s1
  119|  41.1k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE3newB8_:
  111|   283k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   283k|        One { s1: needle, v1: V::splat(needle) }
  113|   283k|    }
_RINvNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  9.74k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  9.74k|    start: *const u8,
 1150|  9.74k|    end: *const u8,
 1151|  9.74k|    confirm: F,
 1152|  9.74k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  9.74k|    let mut ptr = start;
 1155|  44.0k|    while ptr < end {
 1156|  41.1k|        if confirm(*ptr) {
 1157|  6.76k|            return Some(ptr);
 1158|  34.3k|        }
 1159|  34.3k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  2.98k|    None
 1162|  9.74k|}
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  10.7k|    unsafe fn search_chunk(
  417|  10.7k|        &self,
  418|  10.7k|        cur: *const u8,
  419|  10.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  10.7k|    ) -> Option<*const u8> {
  421|  10.7k|        let chunk = V::load_unaligned(cur);
  422|  10.7k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  10.7k|        if mask.has_non_zero() {
  424|  7.18k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  3.59k|            None
  427|       |        }
  428|  10.7k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  8.48k|    pub(crate) unsafe fn find_raw(
  144|  8.48k|        &self,
  145|  8.48k|        start: *const u8,
  146|  8.48k|        end: *const u8,
  147|  8.48k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  8.48k|        let topos = V::Mask::first_offset;
  155|  8.48k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  8.48k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  6.56k|            return Some(cur);
  167|  1.92k|        }
  168|  1.92k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.92k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.92k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.92k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.55k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    790|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    158|                return Some(cur);
  216|    632|            }
  217|    632|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.76k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.50k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.50k|            return self.search_chunk(cur, topos);
  228|    261|        }
  229|    261|        None
  230|  8.48k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE3newB8_:
  111|   283k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   283k|        One { s1: needle, v1: V::splat(needle) }
  113|   283k|    }
_RNvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   254k|    pub(crate) unsafe fn find_raw(
  144|   254k|        &self,
  145|   254k|        start: *const u8,
  146|   254k|        end: *const u8,
  147|   254k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   254k|        let topos = V::Mask::first_offset;
  155|   254k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   254k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   205k|            return Some(cur);
  167|  49.0k|        }
  168|  49.0k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  49.0k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  49.0k|        if len >= Self::LOOP_SIZE {
  172|   108k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   105k|                let a = V::load_aligned(cur);
  176|   105k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   105k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   105k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   105k|                let eqa = self.v1.cmpeq(a);
  180|   105k|                let eqb = self.v1.cmpeq(b);
  181|   105k|                let eqc = self.v1.cmpeq(c);
  182|   105k|                let eqd = self.v1.cmpeq(d);
  183|   105k|                let or1 = eqa.or(eqb);
  184|   105k|                let or2 = eqc.or(eqd);
  185|   105k|                let or3 = or1.or(or2);
  186|   105k|                if or3.movemask_will_have_non_zero() {
  187|  40.9k|                    let mask = eqa.movemask();
  188|  40.9k|                    if mask.has_non_zero() {
  189|  19.3k|                        return Some(cur.add(topos(mask)));
  190|  21.5k|                    }
  191|  21.5k|
  192|  21.5k|                    let mask = eqb.movemask();
  193|  21.5k|                    if mask.has_non_zero() {
  194|  20.4k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.07k|                    }
  196|  1.07k|
  197|  1.07k|                    let mask = eqc.movemask();
  198|  1.07k|                    if mask.has_non_zero() {
  199|    497|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    579|                    }
  201|    579|
  202|    579|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    579|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  65.0k|                }
  206|  65.0k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  5.97k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  14.3k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  10.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  4.12k|                return Some(cur);
  216|  6.20k|            }
  217|  6.20k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.03k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  3.89k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  3.89k|            return self.search_chunk(cur, topos);
  228|    144|        }
  229|    144|        None
  230|   254k|    }
_RINvMNtNtNtCs8oHv9mjUfNq_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   268k|    unsafe fn search_chunk(
  417|   268k|        &self,
  418|   268k|        cur: *const u8,
  419|   268k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   268k|    ) -> Option<*const u8> {
  421|   268k|        let chunk = V::load_unaligned(cur);
  422|   268k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   268k|        if mask.has_non_zero() {
  424|   210k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  57.5k|            None
  427|       |        }
  428|   268k|    }

_RNCNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  41.1k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  41.1k|                    b == self.sse2.needle1()
  194|  41.1k|                })
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   254k|    unsafe fn find_raw_avx2(
  397|   254k|        &self,
  398|   254k|        start: *const u8,
  399|   254k|        end: *const u8,
  400|   254k|    ) -> Option<*const u8> {
  401|   254k|        self.avx2.find_raw(start, end)
  402|   254k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   283k|    pub unsafe fn find_raw(
  180|   283k|        &self,
  181|   283k|        start: *const u8,
  182|   283k|        end: *const u8,
  183|   283k|    ) -> Option<*const u8> {
  184|   283k|        if start >= end {
  185|  10.6k|            return None;
  186|   272k|        }
  187|   272k|        let len = end.distance(start);
  188|   272k|        if len < __m256i::BYTES {
  189|  18.2k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  9.74k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  9.74k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  8.48k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   254k|        }
  201|   254k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   254k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   254k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   254k|        // responsibility.
  205|   254k|        //
  206|   254k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   254k|        // means we'd have to annotate this routine with `target_feature`.
  208|   254k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   254k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   254k|        // The real problem is that a routine with a `target_feature`
  211|   254k|        // annotation generally can't be inlined into caller code unless
  212|   254k|        // the caller code has the same target feature annotations. Namely,
  213|   254k|        // the common case (at time of writing) is for calling code to not
  214|   254k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   254k|        // `target_feature` on this routine, it can be inlined which will
  216|   254k|        // handle some of the short-haystack cases above without touching the
  217|   254k|        // architecture specific code.
  218|   254k|        self.find_raw_avx2(start, end)
  219|   283k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  8.48k|    unsafe fn find_raw_sse2(
  337|  8.48k|        &self,
  338|  8.48k|        start: *const u8,
  339|  8.48k|        end: *const u8,
  340|  8.48k|    ) -> Option<*const u8> {
  341|  8.48k|        self.sse2.find_raw(start, end)
  342|  8.48k|    }
_RNvMNtNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   283k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   283k|        One {
   71|   283k|            sse2: generic::One::new(needle),
   72|   283k|            avx2: generic::One::new(needle),
   73|   283k|        }
   74|   283k|    }

_RNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw:
  174|   283k|pub(crate) fn memchr_raw(
  175|   283k|    n1: u8,
  176|   283k|    start: *const u8,
  177|   283k|    end: *const u8,
  178|   283k|) -> Option<*const u8> {
  179|   283k|    // SAFETY: We provide a valid function pointer type.
  180|   283k|    unsafe_ifunc!(
  181|   283k|        One,
  182|   283k|        find_raw,
  183|   283k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   283k|        Option<*const u8>,
  185|   283k|        start,
  186|   283k|        end,
  187|   283k|        n1
  188|   283k|    )
  189|   283k|}
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   283k|        unsafe fn find_avx2(
   79|   283k|            $($needle: u8),+,
   80|   283k|            $hay_start: *const u8,
   81|   283k|            $hay_end: *const u8,
   82|   283k|        ) -> $retty {
   83|   283k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   283k|            $memchrty::new_unchecked($($needle),+)
   85|   283k|                .$memchrfind($hay_start, $hay_end)
   86|   283k|        }
_RNvNvNtNtNtCs8oHv9mjUfNq_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   806k|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   806k|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   806k|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   806k|    }
_RNvXNtCs8oHv9mjUfNq_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  50.9k|    fn as_usize(self) -> usize {
   27|  50.9k|        self as usize
   28|  50.9k|    }

_RNvNtCs8oHv9mjUfNq_6memchr6memchr6memchrCslu3GLw2gIGD_13oxigraph_fuzz:
   27|   283k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   283k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   283k|    // pointer between start and end.
   30|   283k|    unsafe {
   31|   283k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   283k|        })
   34|   283k|    }
   35|   283k|}
_RNvNtCs8oHv9mjUfNq_6memchr6memchr10memchr_rawB3_:
  504|   283k|unsafe fn memchr_raw(
  505|   283k|    needle: u8,
  506|   283k|    start: *const u8,
  507|   283k|    end: *const u8,
  508|   283k|) -> Option<*const u8> {
  509|   283k|    #[cfg(target_arch = "x86_64")]
  510|   283k|    {
  511|   283k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   283k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   283k|        // time. This function also handles using a fallback if neither AVX2
  514|   283k|        // nor SSE2 (unusual) are available.
  515|   283k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   283k|    }
  517|   283k|    #[cfg(target_arch = "wasm32")]
  518|   283k|    {
  519|   283k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   283k|    }
  521|   283k|    #[cfg(target_arch = "aarch64")]
  522|   283k|    {
  523|   283k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   283k|    }
  525|   283k|    #[cfg(not(any(
  526|   283k|        target_arch = "x86_64",
  527|   283k|        target_arch = "wasm32",
  528|   283k|        target_arch = "aarch64"
  529|   283k|    )))]
  530|   283k|    {
  531|   283k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   283k|    }
  533|   283k|}
_RNCNvNtCs8oHv9mjUfNq_6memchr6memchr6memchr0B5_:
   31|   283k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   283k|            memchr_raw(needle, start, end)
   33|   283k|        })

_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  10.7k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  10.7k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  10.7k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   448k|    fn has_non_zero(self) -> bool {
  149|   448k|        self.0 != 0
  150|   448k|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   438k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   438k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   438k|        }
_RNvXs_NtCs8oHv9mjUfNq_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   259k|    fn first_offset(self) -> usize {
  174|   259k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   259k|        // the bytes so we are in practice), where the most significant byte
  176|   259k|        // is at a higher address. That means the least significant bit that
  177|   259k|        // is set corresponds to the position of our first matching byte.
  178|   259k|        // That position corresponds to the number of zeros after the least
  179|   259k|        // significant bit.
  180|   259k|        self.get_for_offset().trailing_zeros() as usize
  181|   259k|    }
_RNvYNtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtNtCs8oHv9mjUfNq_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   105k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   105k|        self.movemask().has_non_zero()
   67|   105k|    }
_RNvMNtCs8oHv9mjUfNq_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   259k|    fn get_for_offset(self) -> u32 {
  129|   259k|        #[cfg(target_endian = "big")]
  130|   259k|        {
  131|   259k|            self.0.swap_bytes()
  132|   259k|        }
  133|   259k|        #[cfg(target_endian = "little")]
  134|   259k|        {
  135|   259k|            self.0
  136|   259k|        }
  137|   259k|    }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  10.7k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  10.7k|            _mm_cmpeq_epi8(self, vector2)
  232|  10.7k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   423k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   423k|            _mm256_load_si256(data as *const __m256i)
  267|   423k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   317k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   317k|            _mm256_or_si256(self, vector2)
  292|   317k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   692k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   692k|            _mm256_cmpeq_epi8(self, vector2)
  282|   692k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  10.7k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  10.7k|            _mm_loadu_si128(data as *const __m128i)
  222|  10.7k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86sse2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|   283k|        unsafe fn splat(byte: u8) -> __m128i {
  211|   283k|            _mm_set1_epi8(byte as i8)
  212|   283k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   268k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   268k|            _mm256_loadu_si256(data as *const __m256i)
  272|   268k|        }
_RNvXNtNtCs8oHv9mjUfNq_6memchr6vector7x86avx2NtNtNtCsl2lhD68vXAd_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|   283k|        unsafe fn splat(byte: u8) -> __m256i {
  261|   283k|            _mm256_set1_epi8(byte as i8)
  262|   283k|        }

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs5ixuek62Ty3_13libfuzzer_sys:
   49|  3.77k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.77k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.77k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.77k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.77k|        // `SeqCst` operations on the slow path.
   54|  3.77k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.77k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs5ixuek62Ty3_13libfuzzer_sys:
  963|  3.77k|        pub fn get(&self) -> Option<&T> {
  964|  3.77k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.77k|                None
  969|       |            }
  970|  3.77k|        }

_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   41|  7.02k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  7.02k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  6.95k|        Ok(Self { tag, positions })
   44|  7.02k|    }
_RINvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  621|  6.67k|fn parse_langtag(
  622|  6.67k|    input: &str,
  623|  6.67k|    output: &mut impl OutputBuffer,
  624|  6.67k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  6.67k|    #[derive(PartialEq, Eq)]
  626|  6.67k|    enum State {
  627|  6.67k|        Start,
  628|  6.67k|        AfterLanguage,
  629|  6.67k|        AfterExtLang,
  630|  6.67k|        AfterScript,
  631|  6.67k|        AfterRegion,
  632|  6.67k|        InExtension { expected: bool },
  633|  6.67k|        InPrivateUse { expected: bool },
  634|  6.67k|    }
  635|  6.67k|
  636|  6.67k|    let mut state = State::Start;
  637|  6.67k|    let mut language_end = 0;
  638|  6.67k|    let mut extlang_end = 0;
  639|  6.67k|    let mut script_end = 0;
  640|  6.67k|    let mut region_end = 0;
  641|  6.67k|    let mut variant_end = 0;
  642|  6.67k|    let mut extension_end = 0;
  643|  6.67k|    let mut extlangs_count = 0;
  644|  22.8k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  22.8k|        if subtag.is_empty() {
  646|     33|            return Err(LanguageTagParseError {
  647|     33|                kind: TagParseErrorKind::EmptySubtag,
  648|     33|            });
  649|  22.8k|        }
  650|  22.8k|        if subtag.len() > 8 {
  651|      2|            return Err(LanguageTagParseError {
  652|      2|                kind: TagParseErrorKind::SubtagTooLong,
  653|      2|            });
  654|  22.8k|        }
  655|  22.8k|        if state == State::Start {
  656|       |            // Primary language
  657|  6.65k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|      4|                return Err(LanguageTagParseError {
  659|      4|                    kind: TagParseErrorKind::InvalidLanguage,
  660|      4|                });
  661|  6.64k|            }
  662|  6.64k|            language_end = end;
  663|  6.64k|            output.extend(to_lowercase(subtag));
  664|  6.64k|            if subtag.len() < 4 {
  665|  5.05k|                // extlangs are only allowed for short language tags
  666|  5.05k|                state = State::AfterLanguage;
  667|  5.05k|            } else {
  668|  1.58k|                state = State::AfterExtLang;
  669|  1.58k|            }
  670|  16.2k|        } else if let State::InPrivateUse { .. } = state {
  671|    493|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    493|            }
  676|    493|            output.push('-');
  677|    493|            output.extend(to_lowercase(subtag));
  678|    493|            state = State::InPrivateUse { expected: false };
  679|  15.7k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    253|            if let State::InExtension { expected: true } = state {
  682|      1|                return Err(LanguageTagParseError {
  683|      1|                    kind: TagParseErrorKind::EmptyExtension,
  684|      1|                });
  685|    252|            }
  686|    252|            output.push('-');
  687|    252|            output.push('x');
  688|    252|            state = State::InPrivateUse { expected: true };
  689|  15.4k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  2.21k|            if let State::InExtension { expected: true } = state {
  692|      9|                return Err(LanguageTagParseError {
  693|      9|                    kind: TagParseErrorKind::EmptyExtension,
  694|      9|                });
  695|  2.20k|            }
  696|  2.20k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  2.20k|            output.push('-');
  698|  2.20k|            output.push(extension_tag);
  699|  2.20k|            state = State::InExtension { expected: true };
  700|  13.2k|        } else if let State::InExtension { .. } = state {
  701|  4.83k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  4.83k|            }
  706|  4.83k|            extension_end = end;
  707|  4.83k|            output.push('-');
  708|  4.83k|            output.extend(to_lowercase(subtag));
  709|  4.83k|            state = State::InExtension { expected: false };
  710|  8.41k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  3.16k|            extlangs_count += 1;
  712|  3.16k|            if extlangs_count > 3 {
  713|      1|                return Err(LanguageTagParseError {
  714|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      1|                });
  716|  3.16k|            }
  717|  3.16k|            // valid extlangs
  718|  3.16k|            extlang_end = end;
  719|  3.16k|            output.push('-');
  720|  3.16k|            output.extend(to_lowercase(subtag));
  721|  5.24k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  3.23k|            && subtag.len() == 4
  723|    762|            && is_alphabetic(subtag)
  724|    762|        {
  725|    762|            // Script
  726|    762|            script_end = end;
  727|    762|            output.push('-');
  728|    762|            output.extend(to_uppercase_first(subtag));
  729|    762|            state = State::AfterScript;
  730|  4.48k|        } else if (state == State::AfterLanguage
  731|  2.78k|            || state == State::AfterExtLang
  732|  2.01k|            || state == State::AfterScript)
  733|  3.09k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  1.48k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  1.60k|        {
  736|  1.60k|            // Region
  737|  1.60k|            region_end = end;
  738|  1.60k|            output.push('-');
  739|  1.60k|            output.extend(to_uppercase(subtag));
  740|  1.60k|            state = State::AfterRegion;
  741|  2.87k|        } else if (state == State::AfterLanguage
  742|  1.96k|            || state == State::AfterExtLang
  743|  1.52k|            || state == State::AfterScript
  744|  1.39k|            || state == State::AfterRegion)
  745|  2.87k|            && is_alphanumeric(subtag)
  746|  2.87k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|     10|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  2.86k|        {
  749|  2.86k|            // Variant
  750|  2.86k|            variant_end = end;
  751|  2.86k|            output.push('-');
  752|  2.86k|            output.extend(to_lowercase(subtag));
  753|  2.86k|            state = State::AfterRegion;
  754|  2.86k|        } else {
  755|     10|            return Err(LanguageTagParseError {
  756|     10|                kind: TagParseErrorKind::InvalidSubtag,
  757|     10|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  6.61k|    if let State::InExtension { expected: true } = state {
  763|      5|        return Err(LanguageTagParseError {
  764|      5|            kind: TagParseErrorKind::EmptyExtension,
  765|      5|        });
  766|  6.61k|    }
  767|  6.61k|    if let State::InPrivateUse { expected: true } = state {
  768|      1|        return Err(LanguageTagParseError {
  769|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|      1|        });
  771|  6.60k|    }
  772|  6.60k|
  773|  6.60k|    //We make sure we have not skipped anyone
  774|  6.60k|    if extlang_end < language_end {
  775|  4.83k|        extlang_end = language_end;
  776|  4.83k|    }
  777|  6.60k|    if script_end < extlang_end {
  778|  5.84k|        script_end = extlang_end;
  779|  5.84k|    }
  780|  6.60k|    if region_end < script_end {
  781|  5.00k|        region_end = script_end;
  782|  5.00k|    }
  783|  6.60k|    if variant_end < region_end {
  784|  5.11k|        variant_end = region_end;
  785|  5.11k|    }
  786|  6.60k|    if extension_end < variant_end {
  787|  5.48k|        extension_end = variant_end;
  788|  5.48k|    }
  789|       |
  790|  6.60k|    Ok(TagElementsPositions {
  791|  6.60k|        language_end,
  792|  6.60k|        extlang_end,
  793|  6.60k|        script_end,
  794|  6.60k|        region_end,
  795|  6.60k|        variant_end,
  796|  6.60k|        extension_end,
  797|  6.60k|    })
  798|  6.67k|}
_RNvMCsebFzSuz8Vhk_10oxilangtagINtB2_11LanguageTagNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
   54|  6.95k|    pub fn into_inner(self) -> T {
   55|  6.95k|        self.tag
   56|  6.95k|    }
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsbrE1BkJ52QU_5oxrdf:
  560|    344|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  18.0k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsbrE1BkJ52QU_5oxrdf:
  576|  7.02k|fn parse_language_tag(
  577|  7.02k|    input: &str,
  578|  7.02k|    output: &mut impl OutputBuffer,
  579|  7.02k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  7.02k|    if let Some(tag) = GRANDFATHEREDS
  582|  7.02k|        .iter()
  583|  7.02k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  7.02k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    345|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    345|        } else if input.len() == 2 {
  601|      1|            Err(LanguageTagParseError {
  602|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      1|            })
  604|       |        } else {
  605|    344|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    344|            Ok(TagElementsPositions {
  607|    344|                language_end: input.len(),
  608|    344|                extlang_end: input.len(),
  609|    344|                script_end: input.len(),
  610|    344|                region_end: input.len(),
  611|    344|                variant_end: input.len(),
  612|    344|                extension_end: input.len(),
  613|    344|            })
  614|       |        }
  615|       |    } else {
  616|  6.67k|        parse_langtag(input, output)
  617|       |    }
  618|  7.02k|}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsbrE1BkJ52QU_5oxrdf:
  560|  1.60k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsebFzSuz8Vhk_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsbrE1BkJ52QU_5oxrdf:
  560|    762|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsebFzSuz8Vhk_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsbrE1BkJ52QU_5oxrdf:
  583|   182k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dashCsbrE1BkJ52QU_5oxrdf:
  875|    345|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    345|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    345|}
_RNvXsw_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCsbrE1BkJ52QU_5oxrdf:
  851|  29.5k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  29.5k|        let tag = self.split.next()?;
  853|  22.8k|        let tag_end = self.position + tag.len();
  854|  22.8k|        self.position = tag_end + 1;
  855|  22.8k|        Some((tag, tag_end))
  856|  29.5k|    }
_RNvCsebFzSuz8Vhk_10oxilangtag12to_lowercaseCsbrE1BkJ52QU_5oxrdf:
  892|  18.0k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  18.0k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  18.0k|}
_RNvXsE_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  547|  7.02k|#[derive(Default)]
_RNvCsebFzSuz8Vhk_10oxilangtag10is_numericCsbrE1BkJ52QU_5oxrdf:
  865|      4|fn is_numeric(s: &str) -> bool {
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
  867|      4|}
_RNvCsebFzSuz8Vhk_10oxilangtag12to_uppercaseCsbrE1BkJ52QU_5oxrdf:
  880|  1.60k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  1.60k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  1.60k|}
_RNvMsv_CsebFzSuz8Vhk_10oxilangtagNtB5_14SubTagIterator3newCsbrE1BkJ52QU_5oxrdf:
  839|  6.67k|    fn new(input: &'a str) -> Self {
  840|  6.67k|        Self {
  841|  6.67k|            split: input.split('-'),
  842|  6.67k|            position: 0,
  843|  6.67k|        }
  844|  6.67k|    }
_RNvXs_NvCsebFzSuz8Vhk_10oxilangtag13parse_langtagNtB4_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbrE1BkJ52QU_5oxrdf:
  625|  56.4k|    #[derive(PartialEq, Eq)]
_RNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumericCsbrE1BkJ52QU_5oxrdf:
  870|  10.4k|fn is_alphanumeric(s: &str) -> bool {
  871|  10.4k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  10.4k|}
_RNvCsebFzSuz8Vhk_10oxilangtag18to_uppercase_firstCsbrE1BkJ52QU_5oxrdf:
  886|    762|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    762|    let mut chars = s.chars();
  888|    762|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    762|}
_RNvXsq_CsebFzSuz8Vhk_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  552|  18.6k|    fn push(&mut self, _: char) {}
_RNvCsebFzSuz8Vhk_10oxilangtag13is_alphabeticCsbrE1BkJ52QU_5oxrdf:
  860|  15.0k|fn is_alphabetic(s: &str) -> bool {
  861|  15.0k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  15.0k|}
_RNCNvCsebFzSuz8Vhk_10oxilangtag15is_alphanumeric0B3_:
  871|  36.6k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsebFzSuz8Vhk_10oxilangtag13is_alphabetic0B3_:
  861|  39.6k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsebFzSuz8Vhk_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  4.25k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCsebFzSuz8Vhk_10oxilangtag10is_numeric0B3_:
  866|      4|    s.chars().all(|x| x.is_ascii_digit())

_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCsbrE1BkJ52QU_5oxrdf:
 1152|    550|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|    550|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|    550|            self.output_positions.scheme_end = 0;
 1201|    550|            self.input_scheme_end = 0;
 1202|    550|            if self.input.starts_with('/') {
 1203|    189|                self.input.next();
 1204|    189|                self.output.push('/');
 1205|    189|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|    361|                self.output_positions.authority_end = 0;
 1208|    361|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|    550|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|  72.7k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|   836k|        loop {
 1346|   836k|            let c = self.input.next();
 1347|   836k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|   127k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|   127k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|   127k|                    } else if c == Some('/') {
 1357|  55.1k|                        self.output.push('/');
 1358|  72.7k|                    }
 1359|       |
 1360|   127k|                    if c == Some('?') {
 1361|    785|                        self.output_positions.path_end = self.output.len();
 1362|    785|                        self.output.push('?');
 1363|    785|                        return self.parse_query();
 1364|   127k|                    } else if c == Some('#') {
 1365|  50.4k|                        self.output_positions.path_end = self.output.len();
 1366|  50.4k|                        self.output_positions.query_end = self.output.len();
 1367|  50.4k|                        self.output.push('#');
 1368|  50.4k|                        return self.parse_fragment();
 1369|  76.6k|                    } else if c == None {
 1370|  21.4k|                        self.output_positions.path_end = self.output.len();
 1371|  21.4k|                        self.output_positions.query_end = self.output.len();
 1372|  21.4k|                        return Ok(());
 1373|  55.1k|                    }
 1374|       |                }
 1375|   708k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  72.7k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECsbrE1BkJ52QU_5oxrdf:
 1454|    142|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|    142|        Err(IriParseError { kind })
 1456|    142|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|  76.5k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  76.5k|        if iri.is_absolute() {
  873|  76.0k|            Ok(Self(iri))
  874|       |        } else {
  875|    428|            Err(IriParseError {
  876|    428|                kind: IriParseErrorKind::NoScheme,
  877|    428|            })
  878|       |        }
  879|  76.5k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|  76.6k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  76.6k|        match self.input.front() {
 1103|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  76.6k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|    503|            _ => self.parse_relative(),
 1106|       |        }
 1107|  76.6k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|  53.9k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  53.9k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|  2.96k|            let start_position = self.input.position;
 1259|  12.6k|            while let Some(c) = self.input.next() {
 1260|  12.6k|                self.output.push(c);
 1261|  12.6k|                if c == ']' {
 1262|  2.92k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|  2.92k|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      2|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|  2.91k|                    }
 1266|  2.91k|
 1267|  2.91k|                    let c = self.input.next();
 1268|  2.91k|                    return match c {
 1269|       |                        Some(':') => {
 1270|      9|                            self.output.push(':');
 1271|      9|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|  2.90k|                            self.output_positions.authority_end = self.output.len();
 1275|  2.90k|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      7|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  9.70k|                }
 1280|       |            }
 1281|     41|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|   530k|            loop {
 1285|   530k|                let c = self.input.next();
 1286|   530k|                match c {
 1287|       |                    Some(':') => {
 1288|  1.61k|                        self.output.push(':');
 1289|  1.61k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  49.3k|                        self.output_positions.authority_end = self.output.len();
 1293|  49.3k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|   479k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  53.9k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|  53.8k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  53.8k|        match c {
 1317|       |            None => {
 1318|  2.06k|                self.output_positions.path_end = self.output.len();
 1319|  2.06k|                self.output_positions.query_end = self.output.len();
 1320|  2.06k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    326|                self.output_positions.path_end = self.output.len();
 1324|    326|                self.output.push('?');
 1325|    326|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|  1.42k|                self.output_positions.path_end = self.output.len();
 1329|  1.42k|                self.output_positions.query_end = self.output.len();
 1330|  1.42k|                self.output.push('#');
 1331|  1.42k|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  50.0k|                self.output.push('/');
 1335|  50.0k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  53.8k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|  10.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  10.7k|        if c == '%' {
 1424|    333|            self.read_echar()
 1425|  10.4k|        } else if is_url_query_code_point(c) {
 1426|  10.4k|            self.output.push(c);
 1427|  10.4k|            Ok(())
 1428|       |        } else {
 1429|     16|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  10.7k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|  1.57k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  1.57k|        let c1 = self.input.next();
 1436|  1.57k|        let c2 = self.input.next();
 1437|  1.57k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.56k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.55k|            self.output.push('%');
 1441|  1.55k|            self.output.push(c1.unwrap());
 1442|  1.55k|            self.output.push(c2.unwrap());
 1443|  1.55k|            Ok(())
 1444|       |        } else {
 1445|     20|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|     20|                Some('%'),
 1447|     20|                c1,
 1448|     20|                c2,
 1449|     20|            ]))
 1450|       |        }
 1451|  1.57k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|  76.6k|    fn parse(
 1077|  76.6k|        iri: &'a str,
 1078|  76.6k|        base: Option<IriRef<&'a str>>,
 1079|  76.6k|        output: &'a mut O,
 1080|  76.6k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  76.6k|        let mut parser = Self {
 1082|  76.6k|            iri,
 1083|  76.6k|            base,
 1084|  76.6k|            input: ParserInput {
 1085|  76.6k|                value: iri.chars(),
 1086|  76.6k|                position: 0,
 1087|  76.6k|            },
 1088|  76.6k|            output,
 1089|  76.6k|            output_positions: IriElementsPositions {
 1090|  76.6k|                scheme_end: 0,
 1091|  76.6k|                authority_end: 0,
 1092|  76.6k|                path_end: 0,
 1093|  76.6k|                query_end: 0,
 1094|  76.6k|            },
 1095|  76.6k|            input_scheme_end: 0,
 1096|  76.6k|        };
 1097|  76.6k|        parser.parse_scheme_start()?;
 1098|  76.5k|        Ok(parser.output_positions)
 1099|  76.6k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|  52.0k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|   346k|        while let Some(c) = self.input.next() {
 1396|   294k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  52.0k|        Ok(())
 1399|  52.0k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|  76.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|   315k|        loop {
 1111|   315k|            let c = self.input.next();
 1112|   315k|            match c {
 1113|   315k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|   239k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  76.1k|                    self.output.push(':');
 1118|  76.1k|                    self.output_positions.scheme_end = self.output.len();
 1119|  76.1k|                    self.input_scheme_end = self.input.position;
 1120|  76.1k|                    return if self.input.starts_with('/') {
 1121|  54.9k|                        self.input.next();
 1122|  54.9k|                        self.output.push('/');
 1123|  54.9k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  21.1k|                        self.output_positions.authority_end = self.output.len();
 1126|  21.1k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|     47|                    self.input = ParserInput {
 1131|     47|                        value: self.iri.chars(),
 1132|     47|                        position: 0,
 1133|     47|                    }; // reset
 1134|     47|                    self.output.clear();
 1135|     47|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  76.1k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|  76.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|  76.6k|        IriRef::parse(iri)?.try_into()
  503|  76.6k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|  55.1k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  55.1k|        if self.input.starts_with('/') {
 1143|  53.9k|            self.input.next();
 1144|  53.9k|            self.output.push('/');
 1145|  53.9k|            self.parse_authority()
 1146|       |        } else {
 1147|  1.19k|            self.output_positions.authority_end = self.output.len() - 1;
 1148|  1.19k|            self.parse_path()
 1149|       |        }
 1150|  55.1k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|  76.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  76.6k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  76.5k|        Ok(Self { iri, positions })
   58|  76.6k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|  76.5k|    pub fn is_absolute(&self) -> bool {
  147|  76.5k|        self.positions.scheme_end != 0
  148|  76.5k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|  1.55k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|  1.11k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  11.8k|        while let Some(c) = self.input.next() {
 1382|  10.9k|            if c == '#' {
 1383|    146|                self.output_positions.query_end = self.output.len();
 1384|    146|                self.output.push('#');
 1385|    146|                return self.parse_fragment();
 1386|       |            } else {
 1387|  10.7k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    948|        self.output_positions.query_end = self.output.len();
 1391|    948|        Ok(())
 1392|  1.11k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|  53.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|   536k|        loop {
 1234|   536k|            let c = self.input.next();
 1235|   536k|            match c {
 1236|       |                Some('@') => {
 1237|    460|                    self.output.push('@');
 1238|    460|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  53.4k|                    self.input = ParserInput {
 1242|  53.4k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  53.4k|                        position: self.input_scheme_end + 2,
 1244|  53.4k|                    };
 1245|  53.4k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  53.4k|                    return self.parse_host();
 1247|       |                }
 1248|   482k|                Some(c) => {
 1249|   482k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  53.9k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|  76.0k|    pub fn into_inner(self) -> T {
  569|  76.0k|        self.0.into_inner()
  570|  76.0k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|  1.62k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  2.55k|        loop {
 1303|  2.55k|            let c = self.input.next();
 1304|  1.82k|            match c {
 1305|  1.82k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  1.60k|                    self.output_positions.authority_end = self.output.len();
 1308|  1.60k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     18|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  1.62k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|  76.0k|    pub fn into_inner(self) -> T {
  133|  76.0k|        self.iri
  134|  76.0k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  1.96M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  1.96M|        if c == '%' {
 1412|  1.24k|            self.read_echar()
 1413|  1.96M|        } else if is_url_code_point(c) {
 1414|  1.96M|            self.output.push(c);
 1415|  1.96M|            Ok(())
 1416|       |        } else {
 1417|     37|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  1.96M|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|  1.57k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|  76.6k|    fn front(&self) -> Option<char> {
 1054|  76.6k|        self.value.clone().next()
 1055|  76.6k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsbrE1BkJ52QU_5oxrdf:
  985|     47|    fn clear(&mut self) {
  986|     47|        self.len = 0;
  987|     47|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|   185k|    fn starts_with(&self, c: char) -> bool {
 1059|   185k|        self.value.as_str().starts_with(c)
 1060|   185k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|  76.6k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|  53.4k|    fn truncate(&mut self, new_len: usize) {
  991|  53.4k|        self.len = new_len;
  992|  53.4k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|   305k|    fn len(&self) -> usize {
  996|   305k|        self.len
  997|   305k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|   255k|    fn as_str(&self) -> &str {
 1001|   255k|        ""
 1002|   255k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  2.57M|    fn push(&mut self, c: char) {
  976|  2.57M|        self.len += c.len_utf8();
  977|  2.57M|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  2.70M|    fn next(&mut self) -> Option<char> {
 1044|  2.70M|        if let Some(head) = self.value.next() {
 1045|  2.62M|            self.position += head.len_utf8();
 1046|  2.62M|            Some(head)
 1047|       |        } else {
 1048|  78.0k|            None
 1049|       |        }
 1050|  2.70M|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  1.97M|fn is_url_code_point(c: char) -> bool {
 1460|  1.97M|    matches!(c,
 1461|  1.20M|        'a'..='z'
 1462|   242k|        | 'A'..='Z'
 1463|   344k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  5.93k|        | '\u{A0}'..='\u{D7FF}'
 1484|    981|        | '\u{F900}'..='\u{FDCF}'
 1485|    979|        | '\u{FDF0}'..='\u{FFEF}'
 1486|    979|        | '\u{10000}'..='\u{1FFFD}'
 1487|    979|        | '\u{20000}'..='\u{2FFFD}'
 1488|    979|        | '\u{30000}'..='\u{3FFFD}'
 1489|    979|        | '\u{40000}'..='\u{4FFFD}'
 1490|    977|        | '\u{50000}'..='\u{5FFFD}'
 1491|    977|        | '\u{60000}'..='\u{6FFFD}'
 1492|    977|        | '\u{70000}'..='\u{7FFFD}'
 1493|    977|        | '\u{80000}'..='\u{8FFFD}'
 1494|    976|        | '\u{90000}'..='\u{9FFFD}'
 1495|    976|        | '\u{A0000}'..='\u{AFFFD}'
 1496|    976|        | '\u{B0000}'..='\u{BFFFD}'
 1497|    976|        | '\u{C0000}'..='\u{CFFFD}'
 1498|    163|        | '\u{D0000}'..='\u{DFFFD}'
 1499|    155|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  1.97M|}
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|  10.4k|fn is_url_query_code_point(c: char) -> bool {
 1504|  10.4k|    is_url_code_point(c)
 1505|    142|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  10.4k|}

_RNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  3.77k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  3.77k|    let parser = QueryResultsParser::from_format(format);
    8|  3.77k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  3.77k|    let Ok(reader) = parser.parse_read(data) else {
   11|    161|        return;
   12|       |    };
   13|  3.60k|    match reader {
   14|  3.60k|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|  3.60k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|  1.36k|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|  2.24k|            let mut writer = serializer
   21|  2.24k|                .serialize_solutions_to_write(
   22|  2.24k|                    Vec::new(),
   23|  2.24k|                    solutions
   24|  2.24k|                        .get(0)
   25|  2.24k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|  2.24k|                )
   27|  2.24k|                .unwrap();
   28|   131k|            for solution in &solutions {
   29|   129k|                writer.write(solution).unwrap();
   30|   129k|            }
   31|  2.24k|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|  2.24k|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|  2.24k|                .parse_read(serialized.as_bytes())
   36|  2.24k|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|  2.24k|                .unwrap()
   38|       |            {
   39|  2.24k|                assert_eq!(
   40|  2.24k|                    roundtrip_solutions
   41|  2.24k|                        .collect::<Result<Vec<_>, _>>()
   42|  2.24k|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|  2.24k|                        .unwrap(),
   44|  2.24k|                    solutions
   45|  2.24k|                )
   46|      0|            }
   47|       |        }
   48|      3|        FromReadQueryResultsReader::Boolean(value) => {
   49|      3|            // We try to write again
   50|      3|            let mut serialized = Vec::new();
   51|      3|            serializer
   52|      3|                .serialize_boolean_to_write(&mut serialized, value)
   53|      3|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      3|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      3|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      3|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  3.77k|}
_RNCNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|  2.18k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
   92|  10.3k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  10.3k|        BlankNodeRef(match &self.0 {
   94|  2.60k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  7.70k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  7.70k|                id: *id,
   97|  7.70k|                str: str.as_str(),
   98|  7.70k|            },
   99|       |        })
  100|  10.3k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCslu3GLw2gIGD_13oxigraph_fuzz:
  266|  7.70k|    fn as_str(&self) -> &str {
  267|  7.70k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|  7.70k|        str::from_utf8(&self.0[..len]).unwrap()
  269|  7.70k|    }
_RNvMs1_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCslu3GLw2gIGD_13oxigraph_fuzz:
  183|  10.3k|    pub const fn as_str(self) -> &'a str {
  184|  10.3k|        match self.0 {
  185|  2.60k|            BlankNodeRefContent::Named(id) => id,
  186|  7.70k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  187|       |        }
  188|  10.3k|    }
_RNvXsF_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
  254|  15.4k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
   24|  20.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsi_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
   27|  20.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   53|  21.3k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  21.3k|        let id = id.into();
   55|  21.3k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  15.9k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  5.43k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  21.3k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   40|  21.4k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   41|  21.4k|        let id = id.into();
   42|  21.4k|        validate_blank_node_identifier(&id)?;
   43|  21.3k|        Ok(Self::new_unchecked(id))
   44|  21.4k|    }
_RNCNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  98.5k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node30validate_blank_node_identifier:
  272|  21.4k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  273|  21.4k|    let mut chars = id.chars();
  274|  21.4k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  275|  21.3k|    match front {
  276|  21.3k|        '0'..='9'
  277|       |        | '_'
  278|       |        | ':'
  279|  2.69k|        | 'A'..='Z'
  280|  2.38k|        | 'a'..='z'
  281|    816|        | '\u{00C0}'..='\u{00D6}'
  282|    816|        | '\u{00D8}'..='\u{00F6}'
  283|    814|        | '\u{00F8}'..='\u{02FF}'
  284|    745|        | '\u{0370}'..='\u{037D}'
  285|    745|        | '\u{037F}'..='\u{1FFF}'
  286|    656|        | '\u{200C}'..='\u{200D}'
  287|    656|        | '\u{2070}'..='\u{218F}'
  288|    594|        | '\u{2C00}'..='\u{2FEF}'
  289|    594|        | '\u{3001}'..='\u{D7FF}'
  290|    476|        | '\u{F900}'..='\u{FDCF}'
  291|    476|        | '\u{FDF0}'..='\u{FFFD}'
  292|  21.3k|        | '\u{10000}'..='\u{EFFFF}' => (),
  293|      3|        _ => return Err(BlankNodeIdParseError),
  294|       |    }
  295|   223k|    for c in chars {
  296|   202k|        match c {
  297|       |            '.' // validated later
  298|       |            | '-'
  299|   198k|            | '0'..='9'
  300|       |            | '\u{00B7}'
  301|  2.29k|            | '\u{0300}'..='\u{036F}'
  302|  1.05k|            | '\u{203F}'..='\u{2040}'
  303|       |            | '_'
  304|       |            | ':'
  305|  21.2k|            | 'A'..='Z'
  306|  17.2k|            | 'a'..='z'
  307|  2.31k|            | '\u{00C0}'..='\u{00D6}'
  308|  2.31k|            | '\u{00D8}'..='\u{00F6}'
  309|  2.31k|            | '\u{00F8}'..='\u{02FF}'
  310|  2.29k|            | '\u{0370}'..='\u{037D}'
  311|  2.29k|            | '\u{037F}'..='\u{1FFF}'
  312|  1.06k|            | '\u{200C}'..='\u{200D}'
  313|  1.05k|            | '\u{2070}'..='\u{218F}'
  314|    985|            | '\u{2C00}'..='\u{2FEF}'
  315|    985|            | '\u{3001}'..='\u{D7FF}'
  316|    876|            | '\u{F900}'..='\u{FDCF}'
  317|    876|            | '\u{FDF0}'..='\u{FFFD}'
  318|   202k|            | '\u{10000}'..='\u{EFFFF}' => (),
  319|      7|            _ => return Err(BlankNodeIdParseError),
  320|       |        }
  321|       |    }
  322|       |
  323|       |    // Could not end with a dot
  324|  21.3k|    if id.ends_with('.') {
  325|      5|        Err(BlankNodeIdParseError)
  326|       |    } else {
  327|  21.3k|        Ok(())
  328|       |    }
  329|  21.4k|}
_RNvMNtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  15.9k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  15.9k|        Self(BlankNodeContent::Anonymous {
   68|  15.9k|            id,
   69|  15.9k|            str: IdStr::new(id),
   70|  15.9k|        })
   71|  15.9k|    }
_RNvMs7_NtCsbrE1BkJ52QU_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  259|  15.9k|    fn new(id: u128) -> Self {
  260|  15.9k|        let mut str = [0; 32];
  261|  15.9k|        write!(&mut str[..], "{id:x}").unwrap();
  262|  15.9k|        Self(str)
  263|  15.9k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf10blank_node13to_integer_idB3_:
  332|  21.3k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  21.3k|    let digits = id.as_bytes();
  334|  21.3k|    let mut value: u128 = 0;
  335|  21.3k|    if let None | Some(b'0') = digits.first() {
  336|  1.29k|        return None; // No empty string or leading zeros
  337|  20.0k|    }
  338|   220k|    for digit in digits {
  339|   204k|        value = value.checked_mul(16)?.checked_add(
  340|   204k|            match *digit {
  341|   204k|                b'0'..=b'9' => digit - b'0',
  342|  15.0k|                b'a'..=b'f' => digit - b'a' + 10,
  343|  3.82k|                _ => return None,
  344|       |            }
  345|   200k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|  15.9k|    Some(value)
  349|  21.3k|}

_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8datatypeCslu3GLw2gIGD_13oxigraph_fuzz:
  516|  61.6k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  517|  61.6k|        match self.0 {
  518|  1.50k|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  60.1k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  61.6k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB2_7Literal6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
  132|  64.5k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  64.5k|        LiteralRef(match &self.0 {
  134|  1.50k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|  2.94k|            LiteralContent::LanguageTaggedString { value, language } => {
  136|  2.94k|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  60.1k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  60.1k|                value,
  140|  60.1k|                datatype: datatype.as_ref(),
  141|  60.1k|            },
  142|       |        })
  143|  64.5k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef5valueCslu3GLw2gIGD_13oxigraph_fuzz:
  491|  64.5k|    pub const fn value(self) -> &'a str {
  492|  64.5k|        match self.0 {
  493|  1.50k|            LiteralRefContent::String(value)
  494|  2.94k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  64.5k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  64.5k|        }
  497|  64.5k|    }
_RNvMst_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_10LiteralRef8languageCslu3GLw2gIGD_13oxigraph_fuzz:
  504|  64.5k|    pub const fn language(self) -> Option<&'a str> {
  505|  64.5k|        match self.0 {
  506|  2.94k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  61.6k|            _ => None,
  508|       |        }
  509|  64.5k|    }
_RNvXsI_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_14LiteralContentNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
   40|   129k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCsbrE1BkJ52QU_5oxrdf7literalNtB5_7LiteralNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
   37|   129k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  73.7k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  73.7k|        let value = value.into();
   58|  73.7k|        let datatype = datatype.into();
   59|  73.7k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  73.7k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  73.7k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringB1n_EB5_:
   88|  6.95k|    pub fn new_language_tagged_literal_unchecked(
   89|  6.95k|        value: impl Into<String>,
   90|  6.95k|        language: impl Into<String>,
   91|  6.95k|    ) -> Self {
   92|  6.95k|        Self(LiteralContent::LanguageTaggedString {
   93|  6.95k|            value: value.into(),
   94|  6.95k|            language: language.into(),
   95|  6.95k|        })
   96|  6.95k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsdBW21Yiwikk_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   56|  48.1k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  48.1k|        let value = value.into();
   58|  48.1k|        let datatype = datatype.into();
   59|  48.1k|        Self(if datatype == xsd::STRING {
   60|    130|            LiteralContent::String(value)
   61|       |        } else {
   62|  48.0k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  48.1k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCsdBW21Yiwikk_5alloc6string6StringReEB5_:
   68|  7.02k|    pub fn new_language_tagged_literal(
   69|  7.02k|        value: impl Into<String>,
   70|  7.02k|        language: impl Into<String>,
   71|  7.02k|    ) -> Result<Self, LanguageTagParseError> {
   72|  7.02k|        let mut language = language.into();
   73|  7.02k|        language.make_ascii_lowercase();
   74|  7.02k|        Ok(Self::new_language_tagged_literal_unchecked(
   75|  7.02k|            value,
   76|  7.02k|            LanguageTag::parse(language)?.into_inner(),
   77|       |        ))
   78|  7.02k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   50|  2.99k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  2.99k|        Self(LiteralContent::String(value.into()))
   52|  2.99k|    }

_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCslu3GLw2gIGD_13oxigraph_fuzz:
  128|  73.0k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  73.0k|        Self { iri }
  130|  73.0k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCslu3GLw2gIGD_13oxigraph_fuzz:
  133|  59.1k|    pub const fn as_str(self) -> &'a str {
  134|  59.1k|        self.iri
  135|  59.1k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
   54|  73.0k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  73.0k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  73.0k|    }
_RNvXsl_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
   17|   146k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  76.6k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  76.6k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  76.6k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  73.7k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  73.7k|        Self { iri: iri.into() }
   41|  73.7k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   39|  76.0k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  76.0k|        Self { iri: iri.into() }
   41|  76.0k|    }
_RNvXs9_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   121k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   121k|        self.as_str() == other.as_str()
  175|   121k|    }
_RNvXs6_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  73.7k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  73.7k|        node.into_owned()
  154|  73.7k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   121k|    pub const fn as_str(self) -> &'a str {
  134|   121k|        self.iri
  135|   121k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  76.0k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  76.0k|        Self::new_unchecked(iri.into_inner())
   31|  76.0k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   121k|    pub fn as_str(&self) -> &str {
   45|   121k|        self.iri.as_str()
   46|   121k|    }
_RNvMs4_NtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  73.7k|    pub fn into_owned(self) -> NamedNode {
  139|  73.7k|        NamedNode::new_unchecked(self.iri)
  140|  73.7k|    }

_RNvXs3_NtCsbrE1BkJ52QU_5oxrdf6parserNtB5_14TermParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
  414|     97|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  415|     97|        match &self.kind {
  416|      0|            TermParseErrorKind::Iri { error, value } => {
  417|      0|                write!(f, "Error while parsing the named node '{value}': {error}")
  418|       |            }
  419|      0|            TermParseErrorKind::BlankNode { error, value } => {
  420|      0|                write!(f, "Error while parsing the blank node '{value}': {error}")
  421|       |            }
  422|      0|            TermParseErrorKind::LanguageTag { error, value } => {
  423|      0|                write!(f, "Error while parsing the language tag '{value}': {error}")
  424|       |            }
  425|     10|            TermParseErrorKind::Variable { error, value } => {
  426|     10|                write!(f, "Error while parsing the variable '{value}': {error}")
  427|       |            }
  428|     87|            TermParseErrorKind::Msg { msg } => f.write_str(msg),
  429|       |        }
  430|     97|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCsl2lhD68vXAd_4core3str6traits7FromStr8from_str:
  103|   153k|    fn from_str(s: &str) -> Result<Self, TermParseError> {
  104|   153k|        let (term, left) = read_term(s, 0)?;
  105|   152k|        if !left.is_empty() {
  106|     85|            return Err(TermParseError::msg("Invalid term serialization"));
  107|   152k|        }
  108|   152k|        Ok(term)
  109|   153k|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCsl2lhD68vXAd_4core3str6traits7FromStr8from_str:
  123|  4.97k|    fn from_str(s: &str) -> Result<Self, TermParseError> {
  124|  4.97k|        if !s.starts_with('?') && !s.starts_with('$') {
  125|     87|            return Err(TermParseError::msg(
  126|     87|                "Variable serialization should start with ? or $",
  127|     87|            ));
  128|  4.88k|        }
  129|  4.88k|        Self::new(&s[1..]).map_err(|error| TermParseError {
  130|       |            kind: TermParseErrorKind::Variable {
  131|       |                value: s.to_owned(),
  132|       |                error,
  133|       |            },
  134|  4.88k|        })
  135|  4.97k|    }
_RNvMs5_NtCsbrE1BkJ52QU_5oxrdf6parserNtB5_14TermParseError3msg:
  436|    629|    pub(crate) fn msg(msg: &'static str) -> Self {
  437|    629|        Self {
  438|    629|            kind: TermParseErrorKind::Msg { msg },
  439|    629|        }
  440|    629|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf6parser15read_named_node:
  138|  76.7k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  139|  76.7k|    let s = s.trim();
  140|  76.7k|    if let Some(remain) = s.strip_prefix('<') {
  141|  76.7k|        let end = remain
  142|  76.7k|            .find('>')
  143|  76.7k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  144|  76.6k|        let (value, remain) = remain.split_at(end);
  145|  76.6k|        let remain = &remain[1..];
  146|  76.6k|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  147|       |            kind: TermParseErrorKind::Iri {
  148|       |                value: value.to_owned(),
  149|       |                error,
  150|       |            },
  151|  76.6k|        })?;
  152|  76.0k|        Ok((term, remain))
  153|       |    } else {
  154|     49|        Err(TermParseError::msg(
  155|     49|            "Named node serialization should start with a <",
  156|     49|        ))
  157|       |    }
  158|  76.7k|}
_RNvNtCsbrE1BkJ52QU_5oxrdf6parser12read_literal:
  184|   132k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  185|   132k|    let s = s.trim();
  186|   132k|    if let Some(s) = s.strip_prefix('"') {
  187|  58.2k|        let mut value = String::with_capacity(s.len());
  188|  58.2k|        let mut chars = s.chars();
  189|   931k|        while let Some(c) = chars.next() {
  190|   931k|            match c {
  191|       |                '"' => {
  192|  58.1k|                    let remain = chars.as_str();
  193|  58.1k|                    return if let Some(remain) = remain.strip_prefix('@') {
  194|  7.02k|                        let end = remain
  195|  7.02k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  196|  7.02k|                            .unwrap_or(remain.len());
  197|  7.02k|                        let (language, remain) = remain.split_at(end);
  198|  7.02k|                        Ok((
  199|  7.02k|                            Literal::new_language_tagged_literal(value, language).map_err(
  200|  7.02k|                                |error| TermParseError {
  201|       |                                    kind: TermParseErrorKind::LanguageTag {
  202|       |                                        value: language.to_owned(),
  203|       |                                        error,
  204|       |                                    },
  205|  7.02k|                                },
  206|  7.02k|                            )?,
  207|  6.95k|                            remain,
  208|       |                        ))
  209|  51.1k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  210|  48.1k|                        let (datatype, remain) = read_named_node(remain)?;
  211|  48.1k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  212|       |                    } else {
  213|  2.99k|                        Ok((Literal::new_simple_literal(value), remain))
  214|       |                    };
  215|       |                }
  216|       |                '\\' => {
  217|  15.2k|                    if let Some(c) = chars.next() {
  218|  15.2k|                        value.push(match c {
  219|  3.75k|                            't' => '\t',
  220|    364|                            'b' => '\u{8}',
  221|  2.51k|                            'n' => '\n',
  222|  3.19k|                            'r' => '\r',
  223|    326|                            'f' => '\u{C}',
  224|  1.75k|                            '"' => '"',
  225|    194|                            '\'' => '\'',
  226|  2.43k|                            '\\' => '\\',
  227|    430|                            'u' => read_hexa_char(&mut chars, 4)?,
  228|    258|                            'U' => read_hexa_char(&mut chars, 8)?,
  229|      4|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  230|       |                        })
  231|       |                    } else {
  232|      3|                        return Err(TermParseError::msg("Unexpected literal end"));
  233|       |                    }
  234|       |                }
  235|   857k|                _ => value.push(c),
  236|       |            }
  237|       |        }
  238|     67|        Err(TermParseError::msg("Unexpected literal end"))
  239|  73.9k|    } else if let Some(remain) = s.strip_prefix("true") {
  240|  1.00k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  241|  72.9k|    } else if let Some(remain) = s.strip_prefix("false") {
  242|  1.04k|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  243|       |    } else {
  244|  71.8k|        let input = s.as_bytes();
  245|  71.8k|        if input.is_empty() {
  246|     42|            return Err(TermParseError::msg("Empty term serialization"));
  247|  71.8k|        }
  248|       |
  249|  71.8k|        let mut cursor = match input.first() {
  250|  16.9k|            Some(b'+' | b'-') => 1,
  251|  54.9k|            _ => 0,
  252|       |        };
  253|  71.8k|        let mut with_dot = false;
  254|  71.8k|
  255|  71.8k|        let mut count_before: usize = 0;
  256|   154k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  257|  82.4k|            count_before += 1;
  258|  82.4k|            cursor += 1;
  259|  82.4k|        }
  260|       |
  261|  71.8k|        let mut count_after: usize = 0;
  262|  71.8k|        if cursor < input.len() && input[cursor] == b'.' {
  263|  7.64k|            with_dot = true;
  264|  7.64k|            cursor += 1;
  265|  24.5k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  266|  16.9k|                count_after += 1;
  267|  16.9k|                cursor += 1;
  268|  16.9k|            }
  269|  64.2k|        }
  270|       |
  271|  71.8k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  272|  42.8k|            cursor += 1;
  273|  42.8k|            cursor += match input.get(cursor) {
  274|    146|                Some(b'+' | b'-') => 1,
  275|  42.6k|                _ => 0,
  276|       |            };
  277|  42.8k|            let mut count_exponent = 0;
  278|   143k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  279|   100k|                count_exponent += 1;
  280|   100k|                cursor += 1;
  281|   100k|            }
  282|  42.8k|            if count_exponent > 0 {
  283|  42.8k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  284|       |            } else {
  285|      6|                Err(TermParseError::msg(
  286|      6|                    "Double serialization with an invalid exponent",
  287|      6|                ))
  288|       |            }
  289|  29.0k|        } else if with_dot {
  290|  4.89k|            if count_after > 0 {
  291|  4.88k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  292|       |            } else {
  293|      3|                Err(TermParseError::msg(
  294|      3|                    "Decimal serialization without floating part",
  295|      3|                ))
  296|       |            }
  297|  24.1k|        } else if count_before > 0 {
  298|  24.0k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  299|       |        } else {
  300|    147|            Err(TermParseError::msg("Empty integer serialization"))
  301|       |        }
  302|       |    }
  303|   132k|}
_RNvNtCsbrE1BkJ52QU_5oxrdf6parser15read_blank_node:
  160|  21.4k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  161|  21.4k|    let s = s.trim();
  162|  21.4k|    if let Some(remain) = s.strip_prefix("_:") {
  163|  21.4k|        let end = remain
  164|  21.4k|            .find(|v: char| {
  165|       |                v.is_whitespace()
  166|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  167|  21.4k|            })
  168|  21.4k|            .unwrap_or(remain.len());
  169|  21.4k|        let (value, remain) = remain.split_at(end);
  170|  21.4k|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  171|       |            kind: TermParseErrorKind::BlankNode {
  172|       |                value: value.to_owned(),
  173|       |                error,
  174|       |            },
  175|  21.4k|        })?;
  176|  21.3k|        Ok((term, remain))
  177|       |    } else {
  178|      3|        Err(TermParseError::msg(
  179|      3|            "Blank node serialization should start with '_:'",
  180|      3|        ))
  181|       |    }
  182|  21.4k|}
_RNvNtCsbrE1BkJ52QU_5oxrdf6parser9read_term:
  305|   184k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  306|   184k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  307|      1|        return Err(TermParseError::msg(
  308|      1|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  309|      1|        ));
  310|   184k|    }
  311|   184k|    let s = s.trim();
  312|       |    #[allow(unused_variables)]
  313|   184k|    if let Some(remain) = s.strip_prefix("<<") {
  314|       |        #[cfg(feature = "rdf-star")]
  315|       |        {
  316|  16.8k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  317|  14.1k|            let (predicate, remain) = read_named_node(remain)?;
  318|  14.1k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  319|  13.2k|            let remain = remain.trim_start();
  320|  13.2k|            if let Some(remain) = remain.strip_prefix(">>") {
  321|       |                Ok((
  322|       |                    Triple {
  323|  13.1k|                        subject: match subject {
  324|  5.14k|                            Term::NamedNode(s) => s.into(),
  325|  1.69k|                            Term::BlankNode(s) => s.into(),
  326|       |                            Term::Literal(_) => {
  327|      1|                                return Err(TermParseError::msg(
  328|      1|                                    "Literals are not allowed in subject position",
  329|      1|                                ))
  330|       |                            }
  331|  6.32k|                            Term::Triple(s) => Subject::Triple(s),
  332|       |                        },
  333|  13.1k|                        predicate,
  334|  13.1k|                        object,
  335|  13.1k|                    }
  336|  13.1k|                    .into(),
  337|  13.1k|                    remain,
  338|       |                ))
  339|       |            } else {
  340|     57|                Err(TermParseError::msg(
  341|     57|                    "Nested triple serialization should be enclosed between << and >>",
  342|     57|                ))
  343|       |            }
  344|       |        }
  345|       |        #[cfg(not(feature = "rdf-star"))]
  346|       |        {
  347|       |            Err(TermParseError::msg("RDF-star is not supported"))
  348|       |        }
  349|   168k|    } else if s.starts_with('<') {
  350|  14.3k|        let (term, remain) = read_named_node(s)?;
  351|  13.8k|        Ok((term.into(), remain))
  352|   153k|    } else if s.starts_with('_') {
  353|  21.4k|        let (term, remain) = read_blank_node(s)?;
  354|  21.3k|        Ok((term.into(), remain))
  355|       |    } else {
  356|   132k|        let (term, remain) = read_literal(s)?;
  357|   131k|        Ok((term.into(), remain))
  358|       |    }
  359|   184k|}
_RNvNtCsbrE1BkJ52QU_5oxrdf6parser14read_hexa_char:
  361|    688|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  362|    688|    let mut value = 0;
  363|    688|    for _ in 0..len {
  364|  3.65k|        if let Some(c) = input.next() {
  365|  3.63k|            value = value * 16
  366|  3.63k|                + match c {
  367|  3.63k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  368|    573|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  369|    529|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  370|       |                    _ => {
  371|      6|                        return Err(TermParseError::msg(
  372|      6|                            "Unexpected character in a unicode escape",
  373|      6|                        ))
  374|       |                    }
  375|       |                }
  376|       |        } else {
  377|     27|            return Err(TermParseError::msg("Unexpected literal string end"));
  378|       |        }
  379|       |    }
  380|    655|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  381|    688|}
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser15read_blank_nodes_0B5_:
  170|     56|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  171|     56|            kind: TermParseErrorKind::BlankNode {
  172|     56|                value: value.to_owned(),
  173|     56|                error,
  174|     56|            },
  175|     56|        })?;
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser12read_literals_0B5_:
  200|     67|                                |error| TermParseError {
  201|     67|                                    kind: TermParseErrorKind::LanguageTag {
  202|     67|                                        value: language.to_owned(),
  203|     67|                                        error,
  204|     67|                                    },
  205|     67|                                },
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser12read_literal0B5_:
  195|  94.6k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser15read_named_nodes_0B5_:
  146|    570|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  147|    570|            kind: TermParseErrorKind::Iri {
  148|    570|                value: value.to_owned(),
  149|    570|                error,
  150|    570|            },
  151|    570|        })?;
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser14read_hexa_char0B5_:
  380|      2|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser15read_named_node0B5_:
  143|     39|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsbrE1BkJ52QU_5oxrdf6parser15read_blank_node0B5_:
  164|   226k|            .find(|v: char| {
  165|   226k|                v.is_whitespace()
  166|   225k|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  167|   226k|            })
_RNCNvXs2_NtCsbrE1BkJ52QU_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCsl2lhD68vXAd_4core3str6traits7FromStr8from_str0B9_:
  129|     10|        Self::new(&s[1..]).map_err(|error| TermParseError {
  130|     10|            kind: TermParseErrorKind::Variable {
  131|     10|                value: s.to_owned(),
  132|     10|                error,
  133|     10|            },
  134|     10|        })

_RNvXsZ_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB5_7SubjectE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
  678|  6.34k|    fn from(node: &'a Subject) -> Self {
  679|  6.34k|        node.as_ref().into()
  680|  6.34k|    }
_RNvXsQ_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
  606|  6.34k|    fn from(node: &'a NamedNode) -> Self {
  607|  6.34k|        node.as_ref().into()
  608|  6.34k|    }
_RNvMsy_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4Term6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
  417|  81.4k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  81.4k|        match self {
  419|  4.10k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  9.50k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  64.5k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  3.24k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  81.4k|    }
_RNvXs10_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB6_4TermE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
  685|  81.4k|    fn from(node: &'a Term) -> Self {
  686|  81.4k|        node.as_ref()
  687|  81.4k|    }
_RNvMsc_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7Subject6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
  181|  6.34k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  6.34k|        match self {
  183|  2.44k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    806|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  3.10k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  6.34k|    }
_RNvXsY_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_10SubjectRefE4fromCsbBgSuRnHgd0_10sparesults:
  666|  6.34k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  6.34k|        match node {
  668|  2.44k|            SubjectRef::NamedNode(node) => node.into(),
  669|    806|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|  3.10k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  6.34k|    }
_RNvXs2k_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_6TripleNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
  713|  12.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsV_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB5_6TripleE4fromCsbBgSuRnHgd0_10sparesults:
  642|  3.10k|    fn from(node: &'a Triple) -> Self {
  643|  3.10k|        Self::Triple(node)
  644|  3.10k|    }
_RNvXs25_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_4TermNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
  385|   162k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Q_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB6_7SubjectNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
  155|  12.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsP_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsbBgSuRnHgd0_10sparesults:
  599|  55.0k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  55.0k|        Self::NamedNode(node)
  601|  55.0k|    }
_RNvXsR_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7TermRefINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCsbBgSuRnHgd0_10sparesults:
  613|    806|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|    806|        Self::BlankNode(node)
  615|    806|    }
_RNvXse_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  5.14k|    fn from(node: NamedNode) -> Self {
  201|  5.14k|        Self::NamedNode(node)
  202|  5.14k|    }
_RNvXsg_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_7SubjectINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  1.69k|    fn from(node: BlankNode) -> Self {
  215|  1.69k|        Self::BlankNode(node)
  216|  1.69k|    }
_RNvXsC_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  21.3k|    fn from(node: BlankNode) -> Self {
  452|  21.3k|        Self::BlankNode(node)
  453|  21.3k|    }
_RNvXsA_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  13.8k|    fn from(node: NamedNode) -> Self {
  438|  13.8k|        Self::NamedNode(node)
  439|  13.8k|    }
_RNvXsG_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  13.1k|    fn from(triple: Triple) -> Self {
  481|  13.1k|        Self::Triple(Box::new(triple))
  482|  13.1k|    }
_RNvXsE_NtCsbrE1BkJ52QU_5oxrdf6tripleNtB5_4TermINtNtCsl2lhD68vXAd_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   131k|    fn from(literal: Literal) -> Self {
  466|   131k|        Self::Literal(literal)
  467|   131k|    }

_RNvXs_NtCsbrE1BkJ52QU_5oxrdf8variableNtB4_8VariableNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
   61|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|      8|        self.as_ref().fmt(f)
   63|      8|    }
_RNvXs2_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_11VariableRefINtNtCsl2lhD68vXAd_4core7convert4FromRNtB5_8VariableE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
  130|  75.1k|    fn from(variable: &'a Variable) -> Self {
  131|  75.1k|        variable.as_ref()
  132|  75.1k|    }
_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCslu3GLw2gIGD_13oxigraph_fuzz:
   17|  1.34k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsm_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_11VariableRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCslu3GLw2gIGD_13oxigraph_fuzz:
   78|  75.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsh_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCslu3GLw2gIGD_13oxigraph_fuzz:
   17|  2.22k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_11VariableRefE2eqCslu3GLw2gIGD_13oxigraph_fuzz:
  151|  75.5k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  152|  75.5k|        self.as_ref() == *other
  153|  75.5k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
   54|   150k|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|   150k|        VariableRef { name: &self.name }
   56|   150k|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_11VariableRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
  123|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|      8|        write!(f, "?{}", self.name)
  125|      8|    }
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
  226|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     10|        write!(f, "The variable name is invalid")
  228|     10|    }
_RNvXs5_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableINtNtCsl2lhD68vXAd_4core3cmp9PartialEqNtB5_11VariableRefE2eqCsbBgSuRnHgd0_10sparesults:
  151|   151k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  152|   151k|        self.as_ref() == *other
  153|   151k|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_refCsbBgSuRnHgd0_10sparesults:
   54|   301k|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|   301k|        VariableRef { name: &self.name }
   56|   301k|    }
_RNvXsm_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_11VariableRefNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCsbBgSuRnHgd0_10sparesults:
   78|   151k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_strCsbBgSuRnHgd0_10sparesults:
   44|  2.22k|    pub fn as_str(&self) -> &str {
   45|  2.22k|        &self.name
   46|  2.22k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   39|  4.87k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  4.87k|        Self { name: name.into() }
   41|  4.87k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  4.88k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  4.88k|        let name = name.into();
   28|  4.88k|        validate_variable_identifier(&name)?;
   29|  4.87k|        Ok(Self::new_unchecked(name))
   30|  4.88k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf8variable28validate_variable_identifier:
  170|  4.88k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  4.88k|    let mut chars = id.chars();
  172|  4.88k|    let front = chars.next().ok_or(VariableNameParseError)?;
  173|  4.88k|    match front {
  174|  4.88k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  2.63k|        | 'A'..='Z'
  178|    606|        | 'a'..='z'
  179|    107|        | '\u{00C0}'..='\u{00D6}'
  180|    107|        | '\u{00D8}'..='\u{00F6}'
  181|    101|        | '\u{00F8}'..='\u{02FF}'
  182|    101|        | '\u{0370}'..='\u{037D}'
  183|    101|        | '\u{037F}'..='\u{1FFF}'
  184|     31|        | '\u{200C}'..='\u{200D}'
  185|     31|        | '\u{2070}'..='\u{218F}'
  186|     22|        | '\u{2C00}'..='\u{2FEF}'
  187|     22|        | '\u{3001}'..='\u{D7FF}'
  188|      6|        | '\u{F900}'..='\u{FDCF}'
  189|      6|        | '\u{FDF0}'..='\u{FFFD}'
  190|  4.88k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      1|        _ => return Err(VariableNameParseError),
  192|       |    }
  193|  11.4k|    for c in chars {
  194|  6.56k|        match c {
  195|  6.56k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|    377|            | '\u{00300}'..='\u{036F}'
  198|    178|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  4.55k|            | 'A'..='Z'
  201|  1.72k|            | 'a'..='z'
  202|    379|            | '\u{00C0}'..='\u{00D6}'
  203|    379|            | '\u{00D8}'..='\u{00F6}'
  204|    377|            | '\u{00F8}'..='\u{02FF}'
  205|    377|            | '\u{0370}'..='\u{037D}'
  206|    377|            | '\u{037F}'..='\u{1FFF}'
  207|    178|            | '\u{200C}'..='\u{200D}'
  208|    178|            | '\u{2070}'..='\u{218F}'
  209|    178|            | '\u{2C00}'..='\u{2FEF}'
  210|    177|            | '\u{3001}'..='\u{D7FF}'
  211|     80|            | '\u{F900}'..='\u{FDCF}'
  212|     80|            | '\u{FDF0}'..='\u{FFFD}'
  213|  6.55k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|      7|            _ => return Err(VariableNameParseError),
  215|       |        }
  216|       |    }
  217|  4.87k|    Ok(())
  218|  4.88k|}

_RINvMs1_NtCsbBgSuRnHgd0_10sparesults3csvNtB6_23InnerTsvSolutionsWriter5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2u_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB41_6triple4TermRNtB22_13QuerySolutionE0EECslu3GLw2gIGD_13oxigraph_fuzz:
  271|   129k|    fn write<'a>(
  272|   129k|        &self,
  273|   129k|        output: &mut String,
  274|   129k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  275|   129k|    ) {
  276|   129k|        let mut values = vec![None; self.variables.len()];
  277|   204k|        for (variable, value) in solution {
  278|  75.1k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  279|  75.1k|                values[position] = Some(value);
  280|  75.1k|            }
  281|       |        }
  282|   129k|        let mut start_binding = true;
  283|   258k|        for value in values {
  284|   129k|            if start_binding {
  285|   128k|                start_binding = false;
  286|   128k|            } else {
  287|    668|                output.push('\t');
  288|    668|            }
  289|   129k|            if let Some(value) = value {
  290|  75.1k|                write_tsv_term(output, value);
  291|  75.1k|            }
  292|       |        }
  293|   129k|        output.push('\n');
  294|   129k|    }
_RNCINvMs4_NtCsbBgSuRnHgd0_10sparesults3csvNtB8_10LineReader9next_lineRShE0Cslu3GLw2gIGD_13oxigraph_fuzz:
  611|     16|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  612|     16|            io::Error::new(
  613|     16|                io::ErrorKind::InvalidData,
  614|     16|                format!("Invalid UTF-8 in the TSV file: {e}"),
  615|     16|            )
  616|     16|        });
_RNCNvMs3_NtCsbBgSuRnHgd0_10sparesults3csvINtB7_18TsvSolutionsReaderRShE9read_next0Cslu3GLw2gIGD_13oxigraph_fuzz:
  498|   269k|            .map(|(i, v)| {
  499|   269k|                let v = v.trim();
  500|   269k|                if v.is_empty() {
  501|   115k|                    Ok(None)
  502|       |                } else {
  503|   153k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  504|       |                        let start_position_char = line
  505|       |                            .split('\t')
  506|       |                            .take(i)
  507|       |                            .map(|c| c.chars().count() + 1)
  508|       |                            .sum::<usize>();
  509|       |                        let start_position_bytes =
  510|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  511|       |                        SyntaxError {
  512|       |                            inner: SyntaxErrorKind::Term {
  513|       |                                error: e,
  514|       |                                term: v.into(),
  515|       |                                location: TextPosition {
  516|       |                                    line: self.reader.line_count - 1,
  517|       |                                    column: start_position_char.try_into().unwrap(),
  518|       |                                    offset: self.reader.last_line_start
  519|       |                                        + u64::try_from(start_position_bytes).unwrap(),
  520|       |                                }..TextPosition {
  521|       |                                    line: self.reader.line_count - 1,
  522|       |                                    column: (start_position_char + v.chars().count())
  523|       |                                        .try_into()
  524|       |                                        .unwrap(),
  525|       |                                    offset: self.reader.last_line_start
  526|       |                                        + u64::try_from(start_position_bytes + v.len()).unwrap(),
  527|       |                                },
  528|       |                            },
  529|       |                        }
  530|   153k|                    })?))
  531|       |                }
  532|   269k|            })
_RNvMs2_NtCsbBgSuRnHgd0_10sparesults3csvINtB5_21TsvQueryResultsReaderRShE4readCslu3GLw2gIGD_13oxigraph_fuzz:
  435|  6.01k|    pub fn read(mut read: R) -> Result<Self, ParseError> {
  436|  6.01k|        let mut reader = LineReader::new();
  437|  6.01k|        let mut buffer = Vec::new();
  438|       |
  439|       |        // We read the header
  440|  6.01k|        let line = reader
  441|  6.01k|            .next_line(&mut buffer, &mut read)?
  442|  6.01k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  443|  6.01k|        if line.eq_ignore_ascii_case("true") {
  444|      2|            return Ok(Self::Boolean(true));
  445|  6.01k|        }
  446|  6.01k|        if line.eq_ignore_ascii_case("false") {
  447|      4|            return Ok(Self::Boolean(false));
  448|  6.00k|        }
  449|  6.00k|        let mut variables = Vec::new();
  450|  6.00k|        if !line.is_empty() {
  451|  5.02k|            for v in line.split('\t') {
  452|  5.02k|                let v = v.trim();
  453|  5.02k|                if v.is_empty() {
  454|     54|                    return Err(SyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar").into());
  455|  4.97k|                }
  456|  4.97k|                let variable = Variable::from_str(v).map_err(|e| {
  457|       |                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  458|  4.97k|                })?;
  459|  4.87k|                if variables.contains(&variable) {
  460|      8|                    return Err(SyntaxError::msg(format!(
  461|      8|                        "The variable {variable} is declared twice"
  462|      8|                    ))
  463|      8|                    .into());
  464|  4.86k|                }
  465|  4.86k|                variables.push(variable);
  466|       |            }
  467|  1.34k|        }
  468|  5.84k|        let column_len = variables.len();
  469|  5.84k|        Ok(Self::Solutions {
  470|  5.84k|            variables,
  471|  5.84k|            solutions: TsvSolutionsReader {
  472|  5.84k|                read,
  473|  5.84k|                buffer,
  474|  5.84k|                reader,
  475|  5.84k|                column_len,
  476|  5.84k|            },
  477|  5.84k|        })
  478|  6.01k|    }
_RNCNCNvMs3_NtCsbBgSuRnHgd0_10sparesults3csvINtB9_18TsvSolutionsReaderRShE9read_next00Cslu3GLw2gIGD_13oxigraph_fuzz:
  503|  1.23k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  504|  1.23k|                        let start_position_char = line
  505|  1.23k|                            .split('\t')
  506|  1.23k|                            .take(i)
  507|  1.23k|                            .map(|c| c.chars().count() + 1)
  508|  1.23k|                            .sum::<usize>();
  509|  1.23k|                        let start_position_bytes =
  510|  1.23k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  511|  1.23k|                        SyntaxError {
  512|  1.23k|                            inner: SyntaxErrorKind::Term {
  513|  1.23k|                                error: e,
  514|  1.23k|                                term: v.into(),
  515|  1.23k|                                location: TextPosition {
  516|  1.23k|                                    line: self.reader.line_count - 1,
  517|  1.23k|                                    column: start_position_char.try_into().unwrap(),
  518|  1.23k|                                    offset: self.reader.last_line_start
  519|  1.23k|                                        + u64::try_from(start_position_bytes).unwrap(),
  520|  1.23k|                                }..TextPosition {
  521|  1.23k|                                    line: self.reader.line_count - 1,
  522|  1.23k|                                    column: (start_position_char + v.chars().count())
  523|  1.23k|                                        .try_into()
  524|  1.23k|                                        .unwrap(),
  525|  1.23k|                                    offset: self.reader.last_line_start
  526|  1.23k|                                        + u64::try_from(start_position_bytes + v.len()).unwrap(),
  527|  1.23k|                                },
  528|  1.23k|                            },
  529|  1.23k|                        }
  530|  1.23k|                    })?))
_RINvMs4_NtCsbBgSuRnHgd0_10sparesults3csvNtB6_10LineReader9next_lineRShECslu3GLw2gIGD_13oxigraph_fuzz:
  582|   273k|    fn next_line<'a>(
  583|   273k|        &mut self,
  584|   273k|        buffer: &'a mut Vec<u8>,
  585|   273k|        read: &mut impl Read,
  586|   273k|    ) -> io::Result<&'a str> {
  587|   273k|        let line_end = loop {
  588|   283k|            if let Some(eol) = memchr(b'\n', &buffer[self.buffer_start..self.buffer_end]) {
  589|   265k|                break self.buffer_start + eol + 1;
  590|  17.3k|            }
  591|  17.3k|            if self.buffer_start > 0 {
  592|  10.4k|                buffer.copy_within(self.buffer_start..self.buffer_end, 0);
  593|  10.4k|                self.buffer_end -= self.buffer_start;
  594|  10.4k|                self.buffer_start = 0;
  595|  10.4k|            }
  596|  17.3k|            if self.buffer_end + 1024 > buffer.len() {
  597|  11.0k|                if self.buffer_end + 1024 > MAX_BUFFER_SIZE {
  598|      0|                    return Err(io::Error::new(
  599|      0|                        io::ErrorKind::OutOfMemory,
  600|      0|                        format!("Reached the buffer maximal size of {MAX_BUFFER_SIZE}"),
  601|      0|                    ));
  602|  11.0k|                }
  603|  11.0k|                buffer.resize(self.buffer_end + 1024, b'\0');
  604|  6.27k|            }
  605|  17.3k|            let read = read.read(&mut buffer[self.buffer_end..])?;
  606|  17.3k|            if read == 0 {
  607|  7.93k|                break self.buffer_end;
  608|  9.43k|            }
  609|  9.43k|            self.buffer_end += read;
  610|       |        };
  611|   273k|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  612|       |            io::Error::new(
  613|       |                io::ErrorKind::InvalidData,
  614|       |                format!("Invalid UTF-8 in the TSV file: {e}"),
  615|       |            )
  616|   273k|        });
  617|   273k|        self.line_count += 1;
  618|   273k|        self.last_line_start = self.last_line_end;
  619|   273k|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  620|   273k|        self.buffer_start = line_end;
  621|   273k|        result
  622|   273k|    }
_RNCINvMs1_NtCsbBgSuRnHgd0_10sparesults3csvNtB8_23InnerTsvSolutionsWriter5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2w_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB43_6triple4TermRNtB24_13QuerySolutionE0EE0Cslu3GLw2gIGD_13oxigraph_fuzz:
  278|  75.5k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5startCslu3GLw2gIGD_13oxigraph_fuzz:
  188|  2.24k|    pub fn start(mut write: W, variables: Vec<Variable>) -> io::Result<Self> {
  189|  2.24k|        let mut buffer = String::new();
  190|  2.24k|        let inner = InnerTsvSolutionsWriter::start(&mut buffer, variables);
  191|  2.24k|        write.write_all(buffer.as_bytes())?;
  192|  2.24k|        buffer.clear();
  193|  2.24k|        Ok(Self {
  194|  2.24k|            inner,
  195|  2.24k|            write,
  196|  2.24k|            buffer,
  197|  2.24k|        })
  198|  2.24k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults3csv14write_tsv_termRNtNtCsbrE1BkJ52QU_5oxrdf6triple4TermECslu3GLw2gIGD_13oxigraph_fuzz:
  297|  6.34k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  6.34k|    match term.into() {
  299|    111|        TermRef::NamedNode(node) => {
  300|    111|            output.push('<');
  301|    111|            output.push_str(node.as_str());
  302|    111|            output.push('>');
  303|    111|        }
  304|    433|        TermRef::BlankNode(node) => {
  305|    433|            output.push_str("_:");
  306|    433|            output.push_str(node.as_str());
  307|    433|        }
  308|  5.21k|        TermRef::Literal(literal) => {
  309|  5.21k|            let value = literal.value();
  310|  5.21k|            if let Some(language) = literal.language() {
  311|    145|                write_tsv_quoted_str(output, value);
  312|    145|                output.push('@');
  313|    145|                output.push_str(language);
  314|    145|            } else {
  315|  5.06k|                match literal.datatype() {
  316|  5.06k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|  4.91k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|  4.91k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|  4.91k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|  4.91k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|  4.70k|                    datatype => {
  322|  4.70k|                        write_tsv_quoted_str(output, value);
  323|  4.70k|                        output.push_str("^^");
  324|  4.70k|                        write_tsv_term(output, datatype);
  325|  4.70k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|    594|        TermRef::Triple(triple) => {
  331|    594|            output.push_str("<< ");
  332|    594|            write_tsv_term(output, &triple.subject);
  333|    594|            output.push(' ');
  334|    594|            write_tsv_term(output, &triple.predicate);
  335|    594|            output.push(' ');
  336|    594|            write_tsv_term(output, &triple.object);
  337|    594|            output.push_str(" >>");
  338|    594|        }
  339|       |    }
  340|  6.34k|}
_RNCNvMs2_NtCsbBgSuRnHgd0_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4read0Cslu3GLw2gIGD_13oxigraph_fuzz:
  442|  16.9k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RINvNtCsbBgSuRnHgd0_10sparesults3csv14write_tsv_termRNtNtCsbrE1BkJ52QU_5oxrdf6triple7SubjectECslu3GLw2gIGD_13oxigraph_fuzz:
  297|  6.34k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  6.34k|    match term.into() {
  299|  2.44k|        TermRef::NamedNode(node) => {
  300|  2.44k|            output.push('<');
  301|  2.44k|            output.push_str(node.as_str());
  302|  2.44k|            output.push('>');
  303|  2.44k|        }
  304|    806|        TermRef::BlankNode(node) => {
  305|    806|            output.push_str("_:");
  306|    806|            output.push_str(node.as_str());
  307|    806|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  3.10k|        TermRef::Triple(triple) => {
  331|  3.10k|            output.push_str("<< ");
  332|  3.10k|            write_tsv_term(output, &triple.subject);
  333|  3.10k|            output.push(' ');
  334|  3.10k|            write_tsv_term(output, &triple.predicate);
  335|  3.10k|            output.push(' ');
  336|  3.10k|            write_tsv_term(output, &triple.object);
  337|  3.10k|            output.push_str(" >>");
  338|  3.10k|        }
  339|       |    }
  340|  6.34k|}
_RNvMs3_NtCsbBgSuRnHgd0_10sparesults3csvINtB5_18TsvSolutionsReaderRShE9read_nextCslu3GLw2gIGD_13oxigraph_fuzz:
  490|   267k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  491|   267k|        let line = self.reader.next_line(&mut self.buffer, &mut self.read)?;
  492|   267k|        if line.is_empty() {
  493|  4.48k|            return Ok(None); // EOF
  494|   263k|        }
  495|   263k|        let elements = line
  496|   263k|            .split('\t')
  497|   263k|            .enumerate()
  498|   263k|            .map(|(i, v)| {
  499|       |                let v = v.trim();
  500|       |                if v.is_empty() {
  501|       |                    Ok(None)
  502|       |                } else {
  503|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  504|       |                        let start_position_char = line
  505|       |                            .split('\t')
  506|       |                            .take(i)
  507|       |                            .map(|c| c.chars().count() + 1)
  508|       |                            .sum::<usize>();
  509|       |                        let start_position_bytes =
  510|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  511|       |                        SyntaxError {
  512|       |                            inner: SyntaxErrorKind::Term {
  513|       |                                error: e,
  514|       |                                term: v.into(),
  515|       |                                location: TextPosition {
  516|       |                                    line: self.reader.line_count - 1,
  517|       |                                    column: start_position_char.try_into().unwrap(),
  518|       |                                    offset: self.reader.last_line_start
  519|       |                                        + u64::try_from(start_position_bytes).unwrap(),
  520|       |                                }..TextPosition {
  521|       |                                    line: self.reader.line_count - 1,
  522|       |                                    column: (start_position_char + v.chars().count())
  523|       |                                        .try_into()
  524|       |                                        .unwrap(),
  525|       |                                    offset: self.reader.last_line_start
  526|       |                                        + u64::try_from(start_position_bytes + v.len()).unwrap(),
  527|       |                                },
  528|       |                            },
  529|       |                        }
  530|       |                    })?))
  531|       |                }
  532|   263k|            })
  533|   263k|            .collect::<Result<Vec<_>, ParseError>>()?;
  534|   261k|        if elements.len() == self.column_len {
  535|   260k|            Ok(Some(elements))
  536|  1.07k|        } else if self.column_len == 0 && elements == [None] {
  537|    954|            Ok(Some(Vec::new())) // Zero columns case
  538|       |        } else {
  539|    116|            Err(SyntaxError::located_message(
  540|    116|                format!(
  541|    116|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  542|    116|                    self.column_len,
  543|    116|                    self.reader.line_count - 1,
  544|    116|                    elements.len(),
  545|    116|                    line
  546|    116|                ),
  547|    116|                TextPosition {
  548|    116|                    line: self.reader.line_count - 1,
  549|    116|                    column: 0,
  550|    116|                    offset: self.reader.last_line_start,
  551|    116|                }..TextPosition {
  552|    116|                    line: self.reader.line_count - 1,
  553|    116|                    column: line.chars().count().try_into().unwrap(),
  554|    116|                    offset: self.reader.last_line_end,
  555|    116|                },
  556|    116|            )
  557|    116|            .into())
  558|       |        }
  559|   267k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults3csv14write_tsv_termRNtNtCsbrE1BkJ52QU_5oxrdf10named_node9NamedNodeECslu3GLw2gIGD_13oxigraph_fuzz:
  297|  6.34k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  6.34k|    match term.into() {
  299|  6.34k|        TermRef::NamedNode(node) => {
  300|  6.34k|            output.push('<');
  301|  6.34k|            output.push_str(node.as_str());
  302|  6.34k|            output.push('>');
  303|  6.34k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|  6.34k|}
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCslu3GLw2gIGD_13oxigraph_fuzz:
  210|  2.24k|    pub fn finish(self) -> W {
  211|  2.24k|        self.write
  212|  2.24k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults3csv14write_tsv_termNtNtCsbrE1BkJ52QU_5oxrdf10named_node12NamedNodeRefECslu3GLw2gIGD_13oxigraph_fuzz:
  297|  46.2k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  46.2k|    match term.into() {
  299|  46.2k|        TermRef::NamedNode(node) => {
  300|  46.2k|            output.push('<');
  301|  46.2k|            output.push_str(node.as_str());
  302|  46.2k|            output.push('>');
  303|  46.2k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|  46.2k|}
_RINvNtCsbBgSuRnHgd0_10sparesults3csv14write_tsv_termNtNtCsbrE1BkJ52QU_5oxrdf6triple7TermRefECslu3GLw2gIGD_13oxigraph_fuzz:
  297|  75.1k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  75.1k|    match term.into() {
  299|  3.99k|        TermRef::NamedNode(node) => {
  300|  3.99k|            output.push('<');
  301|  3.99k|            output.push_str(node.as_str());
  302|  3.99k|            output.push('>');
  303|  3.99k|        }
  304|  9.07k|        TermRef::BlankNode(node) => {
  305|  9.07k|            output.push_str("_:");
  306|  9.07k|            output.push_str(node.as_str());
  307|  9.07k|        }
  308|  59.3k|        TermRef::Literal(literal) => {
  309|  59.3k|            let value = literal.value();
  310|  59.3k|            if let Some(language) = literal.language() {
  311|  2.80k|                write_tsv_quoted_str(output, value);
  312|  2.80k|                output.push('@');
  313|  2.80k|                output.push_str(language);
  314|  2.80k|            } else {
  315|  56.5k|                match literal.datatype() {
  316|  56.5k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|  55.7k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|  46.3k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|  44.2k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|  42.8k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|  41.5k|                    datatype => {
  322|  41.5k|                        write_tsv_quoted_str(output, value);
  323|  41.5k|                        output.push_str("^^");
  324|  41.5k|                        write_tsv_term(output, datatype);
  325|  41.5k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  2.65k|        TermRef::Triple(triple) => {
  331|  2.65k|            output.push_str("<< ");
  332|  2.65k|            write_tsv_term(output, &triple.subject);
  333|  2.65k|            output.push(' ');
  334|  2.65k|            write_tsv_term(output, &triple.predicate);
  335|  2.65k|            output.push(' ');
  336|  2.65k|            write_tsv_term(output, &triple.object);
  337|  2.65k|            output.push_str(" >>");
  338|  2.65k|        }
  339|       |    }
  340|  75.1k|}
_RINvMs0_NtCsbBgSuRnHgd0_10sparesults3csvINtB6_25ToWriteTsvSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB37_22ToWriteSolutionsWriterB19_E5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB49_6triple4TermRNtB2F_13QuerySolutionE0EECslu3GLw2gIGD_13oxigraph_fuzz:
  200|   129k|    pub fn write<'a>(
  201|   129k|        &mut self,
  202|   129k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  203|   129k|    ) -> io::Result<()> {
  204|   129k|        self.inner.write(&mut self.buffer, solution);
  205|   129k|        self.write.write_all(self.buffer.as_bytes())?;
  206|   129k|        self.buffer.clear();
  207|   129k|        Ok(())
  208|   129k|    }
_RNCNCNCNvMs3_NtCsbBgSuRnHgd0_10sparesults3csvINtBb_18TsvSolutionsReaderRShE9read_next00s_0Cslu3GLw2gIGD_13oxigraph_fuzz:
  510|  4.76k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNvMs2_NtCsbBgSuRnHgd0_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4reads_0Cslu3GLw2gIGD_13oxigraph_fuzz:
  456|     97|                let variable = Variable::from_str(v).map_err(|e| {
  457|     97|                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  458|     97|                })?;
_RINvNtCsbBgSuRnHgd0_10sparesults3csv24write_boolean_csv_resultQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
   14|      3|pub fn write_boolean_csv_result<W: Write>(mut write: W, value: bool) -> io::Result<W> {
   15|      3|    write.write_all(if value { b"true" } else { b"false" })?;
   16|      3|    Ok(write)
   17|      3|}
_RNCNCNCNvMs3_NtCsbBgSuRnHgd0_10sparesults3csvINtBb_18TsvSolutionsReaderRShE9read_next000Cslu3GLw2gIGD_13oxigraph_fuzz:
  507|  4.76k|                            .map(|c| c.chars().count() + 1)
_RNvNtCsbBgSuRnHgd0_10sparesults3csv20write_tsv_quoted_str:
  342|  50.6k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  343|  50.6k|    output.push('"');
  344|   828k|    for c in string.chars() {
  345|   828k|        match c {
  346|  1.87k|            '\t' => output.push_str("\\t"),
  347|  1.25k|            '\n' => output.push_str("\\n"),
  348|  3.17k|            '\r' => output.push_str("\\r"),
  349|    873|            '"' => output.push_str("\\\""),
  350|  1.21k|            '\\' => output.push_str("\\\\"),
  351|   820k|            _ => output.push(c),
  352|       |        };
  353|       |    }
  354|  50.6k|    output.push('"');
  355|  50.6k|}
_RNvNtCsbBgSuRnHgd0_10sparesults3csv17is_turtle_boolean:
  357|  1.11k|fn is_turtle_boolean(value: &str) -> bool {
  358|  1.11k|    matches!(value, "true" | "false")
  359|  1.11k|}
_RNvMs1_NtCsbBgSuRnHgd0_10sparesults3csvNtB5_23InnerTsvSolutionsWriter5start:
  256|  2.24k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  257|  2.24k|        let mut start_vars = true;
  258|  4.47k|        for variable in &variables {
  259|  2.22k|            if start_vars {
  260|  2.15k|                start_vars = false;
  261|  2.15k|            } else {
  262|     79|                output.push('\t');
  263|     79|            }
  264|  2.22k|            output.push('?');
  265|  2.22k|            output.push_str(variable.as_str());
  266|       |        }
  267|  2.24k|        output.push('\n');
  268|  2.24k|        Self { variables }
  269|  2.24k|    }
_RNvNtCsbBgSuRnHgd0_10sparesults3csv17is_turtle_integer:
  361|  13.8k|fn is_turtle_integer(value: &str) -> bool {
  362|  13.8k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  363|  13.8k|    let mut value = value.as_bytes();
  364|  13.8k|    if let Some(v) = value.strip_prefix(b"+") {
  365|     75|        value = v;
  366|  13.7k|    } else if let Some(v) = value.strip_prefix(b"-") {
  367|    190|        value = v;
  368|  13.5k|    }
  369|  13.8k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  370|  13.8k|}
_RNvMs4_NtCsbBgSuRnHgd0_10sparesults3csvNtB5_10LineReader3new:
  571|  6.01k|    fn new() -> Self {
  572|  6.01k|        Self {
  573|  6.01k|            buffer_start: 0,
  574|  6.01k|            buffer_end: 0,
  575|  6.01k|            line_count: 0,
  576|  6.01k|            last_line_start: 0,
  577|  6.01k|            last_line_end: 0,
  578|  6.01k|        }
  579|  6.01k|    }
_RNvNtCsbBgSuRnHgd0_10sparesults3csv17is_turtle_decimal:
  372|  2.38k|fn is_turtle_decimal(value: &str) -> bool {
  373|  2.38k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  374|  2.38k|    let mut value = value.as_bytes();
  375|  2.38k|    if let Some(v) = value.strip_prefix(b"+") {
  376|    212|        value = v;
  377|  2.17k|    } else if let Some(v) = value.strip_prefix(b"-") {
  378|    463|        value = v;
  379|  1.70k|    }
  380|  5.08k|    while value.first().map_or(false, u8::is_ascii_digit) {
  381|  2.70k|        value = &value[1..];
  382|  2.70k|    }
  383|  2.38k|    let Some(value) = value.strip_prefix(b".") else {
  384|    159|        return false;
  385|       |    };
  386|  2.22k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  387|  2.38k|}
_RNvNtCsbBgSuRnHgd0_10sparesults3csv16is_turtle_double:
  389|  41.9k|fn is_turtle_double(value: &str) -> bool {
  390|  41.9k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  391|  41.9k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  392|  41.9k|    let mut value = value.as_bytes();
  393|  41.9k|    if let Some(v) = value.strip_prefix(b"+") {
  394|    135|        value = v;
  395|  41.8k|    } else if let Some(v) = value.strip_prefix(b"-") {
  396|  14.8k|        value = v;
  397|  26.9k|    }
  398|  41.9k|    let mut with_before = false;
  399|  46.9k|    while value.first().map_or(false, u8::is_ascii_digit) {
  400|  4.98k|        value = &value[1..];
  401|  4.98k|        with_before = true;
  402|  4.98k|    }
  403|  41.9k|    let mut with_after = false;
  404|  41.9k|    if let Some(v) = value.strip_prefix(b".") {
  405|  2.52k|        value = v;
  406|  6.87k|        while value.first().map_or(false, u8::is_ascii_digit) {
  407|  4.35k|            value = &value[1..];
  408|  4.35k|            with_after = true;
  409|  4.35k|        }
  410|  39.4k|    }
  411|  41.9k|    if let Some(v) = value.strip_prefix(b"e") {
  412|  38.8k|        value = v;
  413|  38.8k|    } else if let Some(v) = value.strip_prefix(b"E") {
  414|  2.49k|        value = v;
  415|  2.49k|    } else {
  416|    544|        return false;
  417|       |    }
  418|  41.3k|    if let Some(v) = value.strip_prefix(b"+") {
  419|     68|        value = v;
  420|  41.3k|    } else if let Some(v) = value.strip_prefix(b"-") {
  421|     66|        value = v;
  422|  41.2k|    }
  423|  41.3k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  424|  41.9k|}

_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError15located_messageNtNtCsdBW21Yiwikk_5alloc6string6StringECslu3GLw2gIGD_13oxigraph_fuzz:
  119|    116|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
  120|    116|        Self {
  121|    116|            inner: SyntaxErrorKind::Msg {
  122|    116|                msg: msg.into(),
  123|    116|                location: Some(location),
  124|    116|            },
  125|    116|        }
  126|    116|    }
_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsdBW21Yiwikk_5alloc6string6StringECslu3GLw2gIGD_13oxigraph_fuzz:
  108|    105|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    105|        Self {
  110|    105|            inner: SyntaxErrorKind::Msg {
  111|    105|                msg: msg.into(),
  112|    105|                location: None,
  113|    105|            },
  114|    105|        }
  115|    105|    }
_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError3msgReECslu3GLw2gIGD_13oxigraph_fuzz:
  108|     54|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|     54|        Self {
  110|     54|            inner: SyntaxErrorKind::Msg {
  111|     54|                msg: msg.into(),
  112|     54|                location: None,
  113|     54|            },
  114|     54|        }
  115|     54|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
   45|  1.33k|    fn from(error: SyntaxError) -> Self {
   46|  1.33k|        Self::Syntax(error)
   47|  1.33k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtNtCs7HEjVFsiW5Z_3std2io5error5ErrorE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
   38|     16|    fn from(error: io::Error) -> Self {
   39|     16|        Self::Io(error)
   40|     16|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|    178|    fn from(error: SyntaxError) -> Self {
   46|    178|        Self::Syntax(error)
   47|    178|    }

_RNvMNtCsbBgSuRnHgd0_10sparesults6parserNtB2_18QueryResultsParser11from_formatCslu3GLw2gIGD_13oxigraph_fuzz:
   44|  3.77k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|  3.77k|        Self { format }
   46|  3.77k|    }
_RNCNvXs1_NtCsbBgSuRnHgd0_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cslu3GLw2gIGD_13oxigraph_fuzz:
  217|   261k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RINvMNtCsbBgSuRnHgd0_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECslu3GLw2gIGD_13oxigraph_fuzz:
   73|  6.01k|    pub fn parse_read<R: Read>(
   74|  6.01k|        &self,
   75|  6.01k|        reader: R,
   76|  6.01k|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|  6.01k|        Ok(match self.format {
   78|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      0|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: SolutionsReaderKind::Json(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|  6.01k|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      6|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|  5.84k|                    solutions,
  103|  5.84k|                    variables,
  104|  5.84k|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|  5.84k|                    variables: variables.into(),
  106|  5.84k|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|  5.84k|                }),
  108|       |            },
  109|       |        })
  110|  6.01k|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCslu3GLw2gIGD_13oxigraph_fuzz:
  209|   267k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  210|   267k|        Some(
  211|   267k|            match &mut self.solutions {
  212|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  213|      0|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  214|   267k|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  215|       |            }
  216|   267k|            .transpose()?
  217|   263k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  218|       |        )
  219|   267k|    }

_RINvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
   71|      3|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      3|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      0|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      3|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      3|    }
_RINvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECslu3GLw2gIGD_13oxigraph_fuzz:
  274|   129k|    pub fn write<'a>(
  275|   129k|        &mut self,
  276|   129k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  277|   129k|    ) -> io::Result<()> {
  278|   129k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  279|   129k|        match &mut self.formatter {
  280|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  281|      0|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  282|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  283|   129k|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  284|       |        }
  285|   129k|    }
_RNCINvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB8_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB21_6triple4TermRNtNtBa_8solution13QuerySolutionE0Cslu3GLw2gIGD_13oxigraph_fuzz:
  278|  75.1k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RINvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  136|  2.24k|    pub fn serialize_solutions_to_write<W: Write>(
  137|  2.24k|        &self,
  138|  2.24k|        write: W,
  139|  2.24k|        variables: Vec<Variable>,
  140|  2.24k|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  141|  2.24k|        Ok(ToWriteSolutionsWriter {
  142|  2.24k|            formatter: match self.format {
  143|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  144|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  145|       |                ),
  146|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  147|      0|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  148|       |                ),
  149|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  150|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  151|       |                ),
  152|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  153|  2.24k|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  154|       |                ),
  155|       |            },
  156|       |        })
  157|  2.24k|    }
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCslu3GLw2gIGD_13oxigraph_fuzz:
  288|  2.24k|    pub fn finish(self) -> io::Result<W> {
  289|  2.24k|        match self.formatter {
  290|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  291|      0|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  292|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  293|  2.24k|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  294|       |        }
  295|  2.24k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCslu3GLw2gIGD_13oxigraph_fuzz:
   55|  3.77k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  3.77k|        Self { format }
   57|  3.77k|    }

_RNvXs_NtCsbBgSuRnHgd0_10sparesults8solutionNtB4_13QuerySolutionINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtCsdBW21Yiwikk_5alloc4sync3ArcSNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
  120|   261k|    fn from((v, s): (V, S)) -> Self {
  121|   261k|        Self {
  122|   261k|            variables: v.into(),
  123|   261k|            values: s.into(),
  124|   261k|        }
  125|   261k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iterCslu3GLw2gIGD_13oxigraph_fuzz:
  133|   129k|    fn into_iter(self) -> Iter<'a> {
  134|   129k|        Iter {
  135|   129k|            inner: self.variables.iter().zip(&self.values),
  136|   129k|        }
  137|   129k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB2_13QuerySolution9variablesCslu3GLw2gIGD_13oxigraph_fuzz:
  113|  2.18k|    pub fn variables(&self) -> &[Variable] {
  114|  2.18k|        &self.variables
  115|  2.18k|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCslu3GLw2gIGD_13oxigraph_fuzz:
  231|   204k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|   258k|        for (variable, value) in &mut self.inner {
  233|   129k|            if let Some(value) = value {
  234|  75.1k|                return Some((variable, value));
  235|  54.4k|            }
  236|       |        }
  237|   129k|        None
  238|   204k|    }
_RINvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableEB5_:
   38|   150k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|   150k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|   150k|    }
_RNCNvXsc_NtCsbBgSuRnHgd0_10sparesults8solutionNtNtCsbrE1BkJ52QU_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  270|   151k|        solution.variables.iter().position(|v| *v == self)
_RNvXs6_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_13QuerySolutionNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eq:
  191|   129k|    fn eq(&self, other: &Self) -> bool {
  192|   129k|        for (k, v) in self.iter() {
  193|  75.1k|            if other.get(k) != Some(v) {
  194|      0|                return false;
  195|  75.1k|            }
  196|       |        }
  197|   129k|        for (k, v) in other.iter() {
  198|  75.1k|            if self.get(k) != Some(v) {
  199|      0|                return false;
  200|  75.1k|            }
  201|       |        }
  202|   129k|        true
  203|   129k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   85|   258k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   86|   258k|        self.into_iter()
   87|   258k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  133|   258k|    fn into_iter(self) -> Iter<'a> {
  134|   258k|        Iter {
  135|   258k|            inner: self.variables.iter().zip(&self.values),
  136|   258k|        }
  137|   258k|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextB7_:
  231|   408k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|   517k|        for (variable, value) in &mut self.inner {
  233|   259k|            if let Some(value) = value {
  234|   150k|                return Some((variable, value));
  235|   108k|            }
  236|       |        }
  237|   258k|        None
  238|   408k|    }
_RNvXsc_NtCsbBgSuRnHgd0_10sparesults8solutionNtNtCsbrE1BkJ52QU_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  269|   150k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  270|   150k|        solution.variables.iter().position(|v| *v == self)
  271|   150k|    }
_RNvXsd_NtCsbBgSuRnHgd0_10sparesults8solutionRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  276|   150k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  277|   150k|        self.as_ref().index(solution)
  278|   150k|    }


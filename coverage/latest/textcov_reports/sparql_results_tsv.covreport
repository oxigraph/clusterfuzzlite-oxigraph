_RINvXNtCsjm7zqtLWH0R_6anyhow7contextINtNtCs9nhK3FOW46N_4core6result6ResultINtNtCsbQpZfyiopc4_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error22QueryResultsParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCsjOdcKtOMjJI_5alloc6string6StringNCNvNtCsdPUQuH91pCL_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4e_:
   58|  1.97k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.97k|    where
   60|  1.97k|        C: Display + Send + Sync + 'static,
   61|  1.97k|        F: FnOnce() -> C,
   62|  1.97k|    {
   63|  1.97k|        match self {
   64|  1.97k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.97k|    }
_RINvXNtCsjm7zqtLWH0R_6anyhow7contextINtNtCs9nhK3FOW46N_4core6result6ResultINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtNtCsbQpZfyiopc4_10sparesults8solution13QuerySolutionENtNtB1L_5error22QueryResultsParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCsdPUQuH91pCL_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4g_:
   58|  1.97k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.97k|    where
   60|  1.97k|        C: Display + Send + Sync + 'static,
   61|  1.97k|        F: FnOnce() -> C,
   62|  1.97k|    {
   63|  1.97k|        match self {
   64|  1.97k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.97k|    }

_RNvNvCs1sGHzonCG7Z_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  3.35k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  3.35k|                $body
  243|  3.35k|            }
rust_fuzzer_test_input:
  209|  3.35k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.35k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.35k|                }
  223|  3.35k|
  224|  3.35k|                __libfuzzer_sys_run(bytes);
  225|  3.35k|                0
  226|  3.35k|            }
LLVMFuzzerTestOneInput:
   58|  3.35k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.35k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.35k|    });
   63|  3.35k|
   64|  3.35k|    match test_input {
   65|  3.35k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.35k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs9dztVA2gjHS_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.35k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.35k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.35k|        rust_fuzzer_test_input(data_slice)
   62|  3.35k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsdPUQuH91pCL_13oxigraph_fuzz:
 1125|   178k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   178k|    haystack: &[u8],
 1127|   178k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   178k|) -> Option<usize> {
 1129|   178k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   178k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   178k|    // a &[u8].
 1132|   178k|    let start = haystack.as_ptr();
 1133|   178k|    let end = start.add(haystack.len());
 1134|   178k|    let found = find_raw(start, end)?;
 1135|   163k|    Some(found.distance(start))
 1136|   178k|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|  33.8k|    pub(crate) fn needle1(&self) -> u8 {
  118|  33.8k|        self.s1
  119|  33.8k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   163k|    unsafe fn search_chunk(
  417|   163k|        &self,
  418|   163k|        cur: *const u8,
  419|   163k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   163k|    ) -> Option<*const u8> {
  421|   163k|        let chunk = V::load_unaligned(cur);
  422|   163k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   163k|        if mask.has_non_zero() {
  424|   133k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  29.4k|            None
  427|       |        }
  428|   163k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|   178k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   178k|        One { s1: needle, v1: V::splat(needle) }
  113|   178k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  7.91k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  7.91k|    start: *const u8,
 1150|  7.91k|    end: *const u8,
 1151|  7.91k|    confirm: F,
 1152|  7.91k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  7.91k|    let mut ptr = start;
 1155|  36.2k|    while ptr < end {
 1156|  33.8k|        if confirm(*ptr) {
 1157|  5.57k|            return Some(ptr);
 1158|  28.2k|        }
 1159|  28.2k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  2.33k|    None
 1162|  7.91k|}
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  7.91k|    unsafe fn search_chunk(
  417|  7.91k|        &self,
  418|  7.91k|        cur: *const u8,
  419|  7.91k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  7.91k|    ) -> Option<*const u8> {
  421|  7.91k|        let chunk = V::load_unaligned(cur);
  422|  7.91k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  7.91k|        if mask.has_non_zero() {
  424|  5.34k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.56k|            None
  427|       |        }
  428|  7.91k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  6.24k|    pub(crate) unsafe fn find_raw(
  144|  6.24k|        &self,
  145|  6.24k|        start: *const u8,
  146|  6.24k|        end: *const u8,
  147|  6.24k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.24k|        let topos = V::Mask::first_offset;
  155|  6.24k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.24k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  4.80k|            return Some(cur);
  167|  1.44k|        }
  168|  1.44k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.44k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.44k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.44k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  1.86k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    557|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    137|                return Some(cur);
  216|    420|            }
  217|    420|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.30k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.10k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.10k|            return self.search_chunk(cur, topos);
  228|    197|        }
  229|    197|        None
  230|  6.24k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|   178k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   178k|        One { s1: needle, v1: V::splat(needle) }
  113|   178k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   154k|    pub(crate) unsafe fn find_raw(
  144|   154k|        &self,
  145|   154k|        start: *const u8,
  146|   154k|        end: *const u8,
  147|   154k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   154k|        let topos = V::Mask::first_offset;
  155|   154k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   154k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   130k|            return Some(cur);
  167|  23.8k|        }
  168|  23.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  23.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  23.8k|        if len >= Self::LOOP_SIZE {
  172|  92.8k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  91.3k|                let a = V::load_aligned(cur);
  176|  91.3k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  91.3k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  91.3k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  91.3k|                let eqa = self.v1.cmpeq(a);
  180|  91.3k|                let eqb = self.v1.cmpeq(b);
  181|  91.3k|                let eqc = self.v1.cmpeq(c);
  182|  91.3k|                let eqd = self.v1.cmpeq(d);
  183|  91.3k|                let or1 = eqa.or(eqb);
  184|  91.3k|                let or2 = eqc.or(eqd);
  185|  91.3k|                let or3 = or1.or(or2);
  186|  91.3k|                if or3.movemask_will_have_non_zero() {
  187|  18.8k|                    let mask = eqa.movemask();
  188|  18.8k|                    if mask.has_non_zero() {
  189|  9.35k|                        return Some(cur.add(topos(mask)));
  190|  9.50k|                    }
  191|  9.50k|
  192|  9.50k|                    let mask = eqb.movemask();
  193|  9.50k|                    if mask.has_non_zero() {
  194|  8.41k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.08k|                    }
  196|  1.08k|
  197|  1.08k|                    let mask = eqc.movemask();
  198|  1.08k|                    if mask.has_non_zero() {
  199|    474|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    608|                    }
  201|    608|
  202|    608|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    608|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  72.4k|                }
  206|  72.4k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.42k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  8.91k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  6.12k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  2.17k|                return Some(cur);
  216|  3.95k|            }
  217|  3.95k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.79k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.65k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.65k|            return self.search_chunk(cur, topos);
  228|    139|        }
  229|    139|        None
  230|   154k|    }

_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   154k|    unsafe fn find_raw_avx2(
  397|   154k|        &self,
  398|   154k|        start: *const u8,
  399|   154k|        end: *const u8,
  400|   154k|    ) -> Option<*const u8> {
  401|   154k|        self.avx2.find_raw(start, end)
  402|   154k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  33.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  33.8k|                    b == self.sse2.needle1()
  194|  33.8k|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   178k|    pub unsafe fn find_raw(
  180|   178k|        &self,
  181|   178k|        start: *const u8,
  182|   178k|        end: *const u8,
  183|   178k|    ) -> Option<*const u8> {
  184|   178k|        if start >= end {
  185|  9.37k|            return None;
  186|   168k|        }
  187|   168k|        let len = end.distance(start);
  188|   168k|        if len < __m256i::BYTES {
  189|  14.1k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  7.91k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  7.91k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  6.24k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   154k|        }
  201|   154k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   154k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   154k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   154k|        // responsibility.
  205|   154k|        //
  206|   154k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   154k|        // means we'd have to annotate this routine with `target_feature`.
  208|   154k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   154k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   154k|        // The real problem is that a routine with a `target_feature`
  211|   154k|        // annotation generally can't be inlined into caller code unless
  212|   154k|        // the caller code has the same target feature annotations. Namely,
  213|   154k|        // the common case (at time of writing) is for calling code to not
  214|   154k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   154k|        // `target_feature` on this routine, it can be inlined which will
  216|   154k|        // handle some of the short-haystack cases above without touching the
  217|   154k|        // architecture specific code.
  218|   154k|        self.find_raw_avx2(start, end)
  219|   178k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  6.24k|    unsafe fn find_raw_sse2(
  337|  6.24k|        &self,
  338|  6.24k|        start: *const u8,
  339|  6.24k|        end: *const u8,
  340|  6.24k|    ) -> Option<*const u8> {
  341|  6.24k|        self.sse2.find_raw(start, end)
  342|  6.24k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   178k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   178k|        One {
   71|   178k|            sse2: generic::One::new(needle),
   72|   178k|            avx2: generic::One::new(needle),
   73|   178k|        }
   74|   178k|    }

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|   178k|pub(crate) fn memchr_raw(
  175|   178k|    n1: u8,
  176|   178k|    start: *const u8,
  177|   178k|    end: *const u8,
  178|   178k|) -> Option<*const u8> {
  179|   178k|    // SAFETY: We provide a valid function pointer type.
  180|   178k|    unsafe_ifunc!(
  181|   178k|        One,
  182|   178k|        find_raw,
  183|   178k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   178k|        Option<*const u8>,
  185|   178k|        start,
  186|   178k|        end,
  187|   178k|        n1
  188|   178k|    )
  189|   178k|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   178k|        unsafe fn find_avx2(
   79|   178k|            $($needle: u8),+,
   80|   178k|            $hay_start: *const u8,
   81|   178k|            $hay_end: *const u8,
   82|   178k|        ) -> $retty {
   83|   178k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   178k|            $memchrty::new_unchecked($($needle),+)
   85|   178k|                .$memchrfind($hay_start, $hay_end)
   86|   178k|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  25.2k|    fn as_usize(self) -> usize {
   27|  25.2k|        self as usize
   28|  25.2k|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   496k|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   496k|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   496k|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   496k|    }

_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCsdPUQuH91pCL_13oxigraph_fuzz:
   27|   178k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   178k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   178k|    // pointer between start and end.
   30|   178k|    unsafe {
   31|   178k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   178k|        })
   34|   178k|    }
   35|   178k|}
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|   178k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   178k|            memchr_raw(needle, start, end)
   33|   178k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|   178k|unsafe fn memchr_raw(
  505|   178k|    needle: u8,
  506|   178k|    start: *const u8,
  507|   178k|    end: *const u8,
  508|   178k|) -> Option<*const u8> {
  509|   178k|    #[cfg(target_arch = "x86_64")]
  510|   178k|    {
  511|   178k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   178k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   178k|        // time. This function also handles using a fallback if neither AVX2
  514|   178k|        // nor SSE2 (unusual) are available.
  515|   178k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   178k|    }
  517|   178k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   178k|    {
  519|   178k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   178k|    }
  521|   178k|    #[cfg(target_arch = "aarch64")]
  522|   178k|    {
  523|   178k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   178k|    }
  525|   178k|    #[cfg(not(any(
  526|   178k|        target_arch = "x86_64",
  527|   178k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   178k|        target_arch = "aarch64"
  529|   178k|    )))]
  530|   178k|    {
  531|   178k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   178k|    }
  533|   178k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  7.91k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  7.91k|            _mm_loadu_si128(data as *const __m128i)
  222|  7.91k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   158k|    fn first_offset(self) -> usize {
  174|   158k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   158k|        // the bytes so we are in practice), where the most significant byte
  176|   158k|        // is at a higher address. That means the least significant bit that
  177|   158k|        // is set corresponds to the position of our first matching byte.
  178|   158k|        // That position corresponds to the number of zeros after the least
  179|   158k|        // significant bit.
  180|   158k|        self.get_for_offset().trailing_zeros() as usize
  181|   158k|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   158k|    fn get_for_offset(self) -> u32 {
  129|   158k|        #[cfg(target_endian = "big")]
  130|   158k|        {
  131|   158k|            self.0.swap_bytes()
  132|   158k|        }
  133|   158k|        #[cfg(target_endian = "little")]
  134|   158k|        {
  135|   158k|            self.0
  136|   158k|        }
  137|   158k|    }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   291k|    fn has_non_zero(self) -> bool {
  149|   291k|        self.0 != 0
  150|   291k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  7.91k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  7.91k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  7.91k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  7.91k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  7.91k|            _mm_cmpeq_epi8(self, vector2)
  232|  7.91k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   284k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   284k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   284k|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  91.3k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  91.3k|        self.movemask().has_non_zero()
   67|  91.3k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   163k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   163k|            _mm256_loadu_si256(data as *const __m256i)
  272|   163k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   528k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   528k|            _mm256_cmpeq_epi8(self, vector2)
  282|   528k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|   178k|        unsafe fn splat(byte: u8) -> __m128i {
  211|   178k|            _mm_set1_epi8(byte as i8)
  212|   178k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|   178k|        unsafe fn splat(byte: u8) -> __m256i {
  261|   178k|            _mm256_set1_epi8(byte as i8)
  262|   178k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   365k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   365k|            _mm256_load_si256(data as *const __m256i)
  267|   365k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   273k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   273k|            _mm256_or_si256(self, vector2)
  292|   273k|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCs9dztVA2gjHS_13libfuzzer_sys:
   49|  3.35k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.35k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.35k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.35k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.35k|        // `SeqCst` operations on the slow path.
   54|  3.35k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.35k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCs9dztVA2gjHS_13libfuzzer_sys:
  963|  3.35k|        pub fn get(&self) -> Option<&T> {
  964|  3.35k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.35k|                None
  969|       |            }
  970|  3.35k|        }

_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsfX3L9NQpT5I_5oxrdf:
  571|  17.4k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsfX3L9NQpT5I_5oxrdf:
  571|  1.87k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsfX3L9NQpT5I_5oxrdf:
  632|  7.84k|fn parse_langtag(
  633|  7.84k|    input: &str,
  634|  7.84k|    output: &mut impl OutputBuffer,
  635|  7.84k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  7.84k|    #[derive(PartialEq, Eq)]
  637|  7.84k|    enum State {
  638|  7.84k|        Start,
  639|  7.84k|        AfterLanguage,
  640|  7.84k|        AfterExtLang,
  641|  7.84k|        AfterScript,
  642|  7.84k|        AfterRegion,
  643|  7.84k|        InExtension { expected: bool },
  644|  7.84k|        InPrivateUse { expected: bool },
  645|  7.84k|    }
  646|  7.84k|
  647|  7.84k|    let mut state = State::Start;
  648|  7.84k|    let mut language_end = 0;
  649|  7.84k|    let mut extlang_end = 0;
  650|  7.84k|    let mut script_end = 0;
  651|  7.84k|    let mut region_end = 0;
  652|  7.84k|    let mut variant_end = 0;
  653|  7.84k|    let mut extension_end = 0;
  654|  7.84k|    let mut extlangs_count = 0;
  655|  22.2k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  22.2k|        if subtag.is_empty() {
  657|     23|            return Err(LanguageTagParseError {
  658|     23|                kind: TagParseErrorKind::EmptySubtag,
  659|     23|            });
  660|  22.2k|        }
  661|  22.2k|        if subtag.len() > 8 {
  662|      2|            return Err(LanguageTagParseError {
  663|      2|                kind: TagParseErrorKind::SubtagTooLong,
  664|      2|            });
  665|  22.2k|        }
  666|  22.2k|        if state == State::Start {
  667|       |            // Primary language
  668|  7.82k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|      4|                return Err(LanguageTagParseError {
  670|      4|                    kind: TagParseErrorKind::InvalidLanguage,
  671|      4|                });
  672|  7.82k|            }
  673|  7.82k|            language_end = end;
  674|  7.82k|            output.extend(to_lowercase(subtag));
  675|  7.82k|            if subtag.len() < 4 {
  676|  5.75k|                // extlangs are only allowed for short language tags
  677|  5.75k|                state = State::AfterLanguage;
  678|  5.75k|            } else {
  679|  2.07k|                state = State::AfterExtLang;
  680|  2.07k|            }
  681|  14.4k|        } else if let State::InPrivateUse { .. } = state {
  682|    669|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|    669|            }
  687|    669|            output.push('-');
  688|    669|            output.extend(to_lowercase(subtag));
  689|    669|            state = State::InPrivateUse { expected: false };
  690|  13.7k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|    409|            if let State::InExtension { expected: true } = state {
  693|      1|                return Err(LanguageTagParseError {
  694|      1|                    kind: TagParseErrorKind::EmptyExtension,
  695|      1|                });
  696|    408|            }
  697|    408|            output.push('-');
  698|    408|            output.push('x');
  699|    408|            state = State::InPrivateUse { expected: true };
  700|  13.3k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  1.43k|            if let State::InExtension { expected: true } = state {
  703|      9|                return Err(LanguageTagParseError {
  704|      9|                    kind: TagParseErrorKind::EmptyExtension,
  705|      9|                });
  706|  1.42k|            }
  707|  1.42k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  1.42k|            output.push('-');
  709|  1.42k|            output.push(extension_tag);
  710|  1.42k|            state = State::InExtension { expected: true };
  711|  11.9k|        } else if let State::InExtension { .. } = state {
  712|  3.22k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  3.22k|            }
  717|  3.22k|            extension_end = end;
  718|  3.22k|            output.push('-');
  719|  3.22k|            output.extend(to_lowercase(subtag));
  720|  3.22k|            state = State::InExtension { expected: false };
  721|  8.70k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  2.64k|            extlangs_count += 1;
  723|  2.64k|            if extlangs_count > 3 {
  724|      1|                return Err(LanguageTagParseError {
  725|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|      1|                });
  727|  2.64k|            }
  728|  2.64k|            // valid extlangs
  729|  2.64k|            extlang_end = end;
  730|  2.64k|            output.push('-');
  731|  2.64k|            output.extend(to_lowercase(subtag));
  732|  6.06k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  3.80k|            && subtag.len() == 4
  734|  1.05k|            && is_alphabetic(subtag)
  735|  1.05k|        {
  736|  1.05k|            // Script
  737|  1.05k|            script_end = end;
  738|  1.05k|            output.push('-');
  739|  1.05k|            output.extend(to_uppercase_first(subtag));
  740|  1.05k|            state = State::AfterScript;
  741|  5.00k|        } else if (state == State::AfterLanguage
  742|  3.16k|            || state == State::AfterExtLang
  743|  2.25k|            || state == State::AfterScript)
  744|  3.58k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  1.71k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  1.87k|        {
  747|  1.87k|            // Region
  748|  1.87k|            region_end = end;
  749|  1.87k|            output.push('-');
  750|  1.87k|            output.extend(to_uppercase(subtag));
  751|  1.87k|            state = State::AfterRegion;
  752|  3.13k|        } else if (state == State::AfterLanguage
  753|  2.01k|            || state == State::AfterExtLang
  754|  1.54k|            || state == State::AfterScript
  755|  1.42k|            || state == State::AfterRegion)
  756|  3.13k|            && is_alphanumeric(subtag)
  757|  3.13k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|     10|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  3.12k|        {
  760|  3.12k|            // Variant
  761|  3.12k|            variant_end = end;
  762|  3.12k|            output.push('-');
  763|  3.12k|            output.extend(to_lowercase(subtag));
  764|  3.12k|            state = State::AfterRegion;
  765|  3.12k|        } else {
  766|     10|            return Err(LanguageTagParseError {
  767|     10|                kind: TagParseErrorKind::InvalidSubtag,
  768|     10|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  7.79k|    if let State::InExtension { expected: true } = state {
  774|      4|        return Err(LanguageTagParseError {
  775|      4|            kind: TagParseErrorKind::EmptyExtension,
  776|      4|        });
  777|  7.78k|    }
  778|  7.78k|    if let State::InPrivateUse { expected: true } = state {
  779|      1|        return Err(LanguageTagParseError {
  780|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|      1|        });
  782|  7.78k|    }
  783|  7.78k|
  784|  7.78k|    //We make sure we have not skipped anyone
  785|  7.78k|    if extlang_end < language_end {
  786|  6.29k|        extlang_end = language_end;
  787|  6.29k|    }
  788|  7.78k|    if script_end < extlang_end {
  789|  6.73k|        script_end = extlang_end;
  790|  6.73k|    }
  791|  7.78k|    if region_end < script_end {
  792|  5.92k|        region_end = script_end;
  793|  5.92k|    }
  794|  7.78k|    if variant_end < region_end {
  795|  5.99k|        variant_end = region_end;
  796|  5.99k|    }
  797|  7.78k|    if extension_end < variant_end {
  798|  7.04k|        extension_end = variant_end;
  799|  7.04k|    }
  800|       |
  801|  7.78k|    Ok(TagElementsPositions {
  802|  7.78k|        language_end,
  803|  7.78k|        extlang_end,
  804|  7.78k|        script_end,
  805|  7.78k|        region_end,
  806|  7.78k|        variant_end,
  807|  7.78k|        extension_end,
  808|  7.78k|    })
  809|  7.84k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsfX3L9NQpT5I_5oxrdf:
  571|  1.05k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsfX3L9NQpT5I_5oxrdf:
   62|  8.39k|    pub fn into_inner(self) -> T {
   63|  8.39k|        self.tag
   64|  8.39k|    }
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsfX3L9NQpT5I_5oxrdf:
  587|  8.44k|fn parse_language_tag(
  588|  8.44k|    input: &str,
  589|  8.44k|    output: &mut impl OutputBuffer,
  590|  8.44k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  8.44k|    if let Some(tag) = GRANDFATHEREDS
  593|  8.44k|        .iter()
  594|  8.44k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  8.44k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|    607|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|    607|        } else if input.len() == 2 {
  612|      1|            Err(LanguageTagParseError {
  613|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      1|            })
  615|       |        } else {
  616|    606|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|    606|            Ok(TagElementsPositions {
  618|    606|                language_end: input.len(),
  619|    606|                extlang_end: input.len(),
  620|    606|                script_end: input.len(),
  621|    606|                region_end: input.len(),
  622|    606|                variant_end: input.len(),
  623|    606|                extension_end: input.len(),
  624|    606|            })
  625|       |        }
  626|       |    } else {
  627|  7.84k|        parse_langtag(input, output)
  628|       |    }
  629|  8.44k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsfX3L9NQpT5I_5oxrdf:
  571|    606|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsfX3L9NQpT5I_5oxrdf:
  594|   219k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsfX3L9NQpT5I_5oxrdf:
   49|  8.44k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  8.44k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  8.39k|        Ok(Self { tag, positions })
   52|  8.44k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsfX3L9NQpT5I_5oxrdf:
  558|  8.44k|#[derive(Default)]
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCsfX3L9NQpT5I_5oxrdf:
  891|  1.87k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  1.87k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  1.87k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsfX3L9NQpT5I_5oxrdf:
  636|  58.8k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCsfX3L9NQpT5I_5oxrdf:
  881|  8.46k|fn is_alphanumeric(s: &str) -> bool {
  882|  8.46k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  8.46k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCsfX3L9NQpT5I_5oxrdf:
  897|  1.05k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  1.05k|    let mut chars = s.chars();
  899|  1.05k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  1.05k|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsfX3L9NQpT5I_5oxrdf:
  563|  16.2k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCsfX3L9NQpT5I_5oxrdf:
  871|  16.5k|fn is_alphabetic(s: &str) -> bool {
  872|  16.5k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  16.5k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCsfX3L9NQpT5I_5oxrdf:
  886|    607|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|    607|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|    607|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCsfX3L9NQpT5I_5oxrdf:
  903|  17.4k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  17.4k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  17.4k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCsfX3L9NQpT5I_5oxrdf:
  876|      4|fn is_numeric(s: &str) -> bool {
  877|      4|    s.chars().all(|x| x.is_ascii_digit())
  878|      4|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsfX3L9NQpT5I_5oxrdf:
  862|  30.0k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  30.0k|        let tag = self.split.next()?;
  864|  22.2k|        let tag_end = self.position + tag.len();
  865|  22.2k|        self.position = tag_end + 1;
  866|  22.2k|        Some((tag, tag_end))
  867|  30.0k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCsfX3L9NQpT5I_5oxrdf:
  850|  7.84k|    fn new(input: &'a str) -> Self {
  851|  7.84k|        Self {
  852|  7.84k|            split: input.split('-'),
  853|  7.84k|            position: 0,
  854|  7.84k|        }
  855|  7.84k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|      4|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|  31.6k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  43.3k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  5.24k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsfX3L9NQpT5I_5oxrdf:
 1213|  55.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   194k|        loop {
 1215|   194k|            let c = self.input.next();
 1216|   194k|            match c {
 1217|   194k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   139k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  55.0k|                    self.output.push(':');
 1222|  55.0k|                    self.output_positions.scheme_end = self.output.len();
 1223|  55.0k|                    self.input_scheme_end = self.input.position;
 1224|  55.0k|                    return if self.input.starts_with('/') {
 1225|  30.0k|                        self.input.next();
 1226|  30.0k|                        self.output.push('/');
 1227|  30.0k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  25.0k|                        self.output_positions.authority_end = self.output.len();
 1230|  25.0k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|     53|                    self.input = ParserInput {
 1235|     53|                        value: self.iri.chars(),
 1236|     53|                        position: 0,
 1237|     53|                    }; // reset
 1238|     53|                    self.output.clear();
 1239|     53|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  55.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsfX3L9NQpT5I_5oxrdf:
 1546|  11.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  11.7k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  11.5k|            self.output.push(c);
 1549|  11.5k|            Ok(())
 1550|    206|        } else if c == '%' {
 1551|    203|            self.read_echar()
 1552|       |        } else {
 1553|      3|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  11.7k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsfX3L9NQpT5I_5oxrdf:
  185|  55.0k|    pub fn into_inner(self) -> T {
  186|  55.0k|        self.iri
  187|  55.0k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsfX3L9NQpT5I_5oxrdf:
   58|  55.4k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  55.4k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  55.3k|        Ok(Self { iri, positions })
   61|  55.4k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsfX3L9NQpT5I_5oxrdf:
 1578|    105|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|    105|        Err(IriParseError { kind })
 1580|    105|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsfX3L9NQpT5I_5oxrdf:
  556|  55.4k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  55.4k|        IriRef::parse(iri)?.try_into()
  558|  55.4k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCsfX3L9NQpT5I_5oxrdf:
  199|  55.3k|    pub fn is_absolute(&self) -> bool {
  200|  55.3k|        self.positions.scheme_end != 0
  201|  55.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsfX3L9NQpT5I_5oxrdf:
 1420|  1.87k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  3.18k|        loop {
 1422|  3.18k|            let c = self.input.next();
 1423|  3.18k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.86k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.86k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  1.32k|                Some(c) => {
 1429|  1.32k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  1.31k|                        self.output.push(c)
 1431|       |                    } else {
 1432|     10|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.87k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsfX3L9NQpT5I_5oxrdf:
 1534|   950k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   950k|        if UNCHECKED || is_url_code_point(c) {
 1536|   949k|            self.output.push(c);
 1537|   949k|            Ok(())
 1538|    944|        } else if c == '%' {
 1539|    926|            self.read_echar()
 1540|       |        } else {
 1541|     18|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   950k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsfX3L9NQpT5I_5oxrdf:
 1504|  1.72k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  13.5k|        while let Some(c) = self.input.next() {
 1506|  11.8k|            if c == '#' {
 1507|     81|                self.output_positions.query_end = self.output.len();
 1508|     81|                self.output.push('#');
 1509|     81|                return self.parse_fragment();
 1510|       |            } else {
 1511|  11.7k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  1.63k|        self.output_positions.query_end = self.output.len();
 1515|  1.63k|        Ok(())
 1516|  1.72k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsfX3L9NQpT5I_5oxrdf:
  968|  55.3k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  55.3k|        if iri.is_absolute() {
  970|  55.0k|            Ok(Self(iri))
  971|       |        } else {
  972|    308|            Err(IriParseError {
  973|    308|                kind: IriParseErrorKind::NoScheme,
  974|    308|            })
  975|       |        }
  976|  55.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsfX3L9NQpT5I_5oxrdf:
 1199|  55.4k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  55.4k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      3|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      3|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  55.4k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|    345|            _ => self.parse_relative(),
 1210|       |        }
 1211|  55.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsfX3L9NQpT5I_5oxrdf:
 1359|  27.9k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  27.9k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  2.73k|            let start_position = self.input.position;
 1363|  11.7k|            while let Some(c) = self.input.next() {
 1364|  11.7k|                self.output.push(c);
 1365|  11.7k|                if c == ']' {
 1366|  2.68k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  2.68k|                    if !UNCHECKED {
 1368|  2.68k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      2|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  2.68k|                        }
 1371|      0|                    }
 1372|       |
 1373|  2.68k|                    let c = self.input.next();
 1374|  2.68k|                    return match c {
 1375|       |                        Some(':') => {
 1376|    122|                            self.output.push(':');
 1377|    122|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  2.55k|                            self.output_positions.authority_end = self.output.len();
 1381|  2.55k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      6|                        Some(c) => {
 1384|      6|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      6|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  9.05k|                }
 1393|       |            }
 1394|     45|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|     45|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   248k|            loop {
 1404|   248k|                let c = self.input.next();
 1405|   248k|                match c {
 1406|       |                    Some(':') => {
 1407|  1.75k|                        self.output.push(':');
 1408|  1.75k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  23.4k|                        self.output_positions.authority_end = self.output.len();
 1412|  23.4k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   223k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  27.9k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsfX3L9NQpT5I_5oxrdf:
 1562|  1.11k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsfX3L9NQpT5I_5oxrdf:
 1245|  30.1k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  30.1k|        if self.input.starts_with('/') {
 1247|  27.9k|            self.input.next();
 1248|  27.9k|            self.output.push('/');
 1249|  27.9k|            self.parse_authority()
 1250|       |        } else {
 1251|  2.21k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  2.21k|            self.parse_path()
 1253|       |        }
 1254|  30.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsfX3L9NQpT5I_5oxrdf:
 1439|  27.8k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  27.8k|        match c {
 1441|       |            None => {
 1442|  2.28k|                self.output_positions.path_end = self.output.len();
 1443|  2.28k|                self.output_positions.query_end = self.output.len();
 1444|  2.28k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    564|                self.output_positions.path_end = self.output.len();
 1448|    564|                self.output.push('?');
 1449|    564|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    923|                self.output_positions.path_end = self.output.len();
 1453|    923|                self.output_positions.query_end = self.output.len();
 1454|    923|                self.output.push('#');
 1455|    923|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  24.1k|                self.output.push('/');
 1459|  24.1k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  27.8k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsfX3L9NQpT5I_5oxrdf:
  665|  55.0k|    pub fn into_inner(self) -> T {
  666|  55.0k|        self.0.into_inner()
  667|  55.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsfX3L9NQpT5I_5oxrdf:
 1256|    398|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|    398|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|    398|            self.output_positions.scheme_end = 0;
 1305|    398|            self.input_scheme_end = 0;
 1306|    398|            if self.input.starts_with('/') {
 1307|    158|                self.input.next();
 1308|    158|                self.output.push('/');
 1309|    158|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|    240|                self.output_positions.authority_end = 0;
 1312|    240|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|    398|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsfX3L9NQpT5I_5oxrdf:
 1468|  51.6k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   435k|        loop {
 1470|   435k|            let c = self.input.next();
 1471|   435k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  77.7k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  77.7k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  77.7k|                    } else if c == Some('/') {
 1481|  26.1k|                        self.output.push('/');
 1482|  51.5k|                    }
 1483|       |
 1484|  77.7k|                    if c == Some('?') {
 1485|  1.16k|                        self.output_positions.path_end = self.output.len();
 1486|  1.16k|                        self.output.push('?');
 1487|  1.16k|                        return self.parse_query();
 1488|  76.5k|                    } else if c == Some('#') {
 1489|  24.2k|                        self.output_positions.path_end = self.output.len();
 1490|  24.2k|                        self.output_positions.query_end = self.output.len();
 1491|  24.2k|                        self.output.push('#');
 1492|  24.2k|                        return self.parse_fragment();
 1493|  52.3k|                    } else if c.is_none() {
 1494|  26.2k|                        self.output_positions.path_end = self.output.len();
 1495|  26.2k|                        self.output_positions.query_end = self.output.len();
 1496|  26.2k|                        return Ok(());
 1497|  26.1k|                    }
 1498|       |                }
 1499|   357k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  51.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsfX3L9NQpT5I_5oxrdf:
 1558|  1.12k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  1.12k|        let c1 = self.input.next();
 1560|  1.12k|        let c2 = self.input.next();
 1561|  1.12k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  1.11k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  1.11k|            self.output.push('%');
 1565|  1.11k|            self.output.push(c1.unwrap());
 1566|  1.11k|            self.output.push(c2.unwrap());
 1567|  1.11k|            Ok(())
 1568|       |        } else {
 1569|     18|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|     18|                Some('%'),
 1571|     18|                c1,
 1572|     18|                c2,
 1573|     18|            ]))
 1574|       |        }
 1575|  1.12k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsfX3L9NQpT5I_5oxrdf:
 1174|  55.4k|    fn parse(
 1175|  55.4k|        iri: &'a str,
 1176|  55.4k|        base: Option<IriRef<&'a str>>,
 1177|  55.4k|        output: &'a mut O,
 1178|  55.4k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  55.4k|        let mut parser = Self {
 1180|  55.4k|            iri,
 1181|  55.4k|            base,
 1182|  55.4k|            input: ParserInput {
 1183|  55.4k|                value: iri.chars(),
 1184|  55.4k|                position: 0,
 1185|  55.4k|            },
 1186|  55.4k|            output,
 1187|  55.4k|            output_positions: IriElementsPositions {
 1188|  55.4k|                scheme_end: 0,
 1189|  55.4k|                authority_end: 0,
 1190|  55.4k|                path_end: 0,
 1191|  55.4k|                query_end: 0,
 1192|  55.4k|            },
 1193|  55.4k|            input_scheme_end: 0,
 1194|  55.4k|        };
 1195|  55.4k|        parser.parse_scheme_start()?;
 1196|  55.3k|        Ok(parser.output_positions)
 1197|  55.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsfX3L9NQpT5I_5oxrdf:
 1335|  27.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   255k|        loop {
 1338|   255k|            let c = self.input.next();
 1339|   255k|            match c {
 1340|       |                Some('@') => {
 1341|    656|                    self.output.push('@');
 1342|    656|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  27.3k|                    self.input = ParserInput {
 1346|  27.3k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  27.3k|                        position: self.input_scheme_end + 2,
 1348|  27.3k|                    };
 1349|  27.3k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  27.3k|                    return self.parse_host();
 1351|       |                }
 1352|   227k|                Some(c) => {
 1353|   227k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  27.9k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsfX3L9NQpT5I_5oxrdf:
 1518|  25.2k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   167k|        while let Some(c) = self.input.next() {
 1520|   142k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  25.2k|        Ok(())
 1523|  25.2k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsfX3L9NQpT5I_5oxrdf:
 1561|  1.12k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsfX3L9NQpT5I_5oxrdf:
 1156|   113k|    fn starts_with(&self, c: char) -> bool {
 1157|   113k|        self.value.as_str().starts_with(c)
 1158|   113k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsfX3L9NQpT5I_5oxrdf:
 1065|  55.4k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsfX3L9NQpT5I_5oxrdf:
 1092|   220k|    fn len(&self) -> usize {
 1093|   220k|        self.len
 1094|   220k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsfX3L9NQpT5I_5oxrdf:
 1072|  1.31M|    fn push(&mut self, c: char) {
 1073|  1.31M|        self.len += c.len_utf8();
 1074|  1.31M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsfX3L9NQpT5I_5oxrdf:
 1097|   155k|    fn as_str(&self) -> &str {
 1098|   155k|        ""
 1099|   155k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsfX3L9NQpT5I_5oxrdf:
 1082|     53|    fn clear(&mut self) {
 1083|     53|        self.len = 0;
 1084|     53|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsfX3L9NQpT5I_5oxrdf:
 1087|  27.3k|    fn truncate(&mut self, new_len: usize) {
 1088|  27.3k|        self.len = new_len;
 1089|  27.3k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsfX3L9NQpT5I_5oxrdf:
 1584|   962k|fn is_url_code_point(c: char) -> bool {
 1585|   962k|    matches!(c,
 1586|   566k|        'a'..='z'
 1587|   135k|        | 'A'..='Z'
 1588|   187k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  9.33k|        | '\u{A0}'..='\u{D7FF}'
 1609|  3.08k|        | '\u{F900}'..='\u{FDCF}'
 1610|  3.08k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  3.08k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  3.08k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  3.08k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  3.08k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  3.01k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  3.01k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  3.01k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  3.01k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  3.01k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  3.01k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  3.01k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  3.01k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|    117|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     96|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|   962k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsfX3L9NQpT5I_5oxrdf:
 1141|  1.39M|    fn next(&mut self) -> Option<char> {
 1142|  1.39M|        if let Some(head) = self.value.next() {
 1143|  1.33M|            self.position += head.len_utf8();
 1144|  1.33M|            Some(head)
 1145|       |        } else {
 1146|  56.8k|            None
 1147|       |        }
 1148|  1.39M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsfX3L9NQpT5I_5oxrdf:
 1629|  11.7k|fn is_url_query_code_point(c: char) -> bool {
 1630|  11.7k|    is_url_code_point(c)
 1631|    272|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|  11.7k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsfX3L9NQpT5I_5oxrdf:
 1151|  55.4k|    fn front(&self) -> Option<char> {
 1152|  55.4k|        self.value.clone().next()
 1153|  55.4k|    }

_RNvXNtCs5m80jCM2qLo_9thiserror7displayRNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB2_9AsDisplay10as_displayCsfX3L9NQpT5I_5oxrdf:
   19|     11|    fn as_display(&'a self) -> Self::Target {
   20|     11|        *self
   21|     11|    }
_RNvXNtCs5m80jCM2qLo_9thiserror7displayRNtNtCsfX3L9NQpT5I_5oxrdf8variable22VariableNameParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|     11|    fn as_display(&'a self) -> Self::Target {
   20|     11|        *self
   21|     11|    }
_RNvXNtCs5m80jCM2qLo_9thiserror7displayRReNtB2_9AsDisplay10as_displayCscCLaNB5KTNU_12oxsdatatypes:
   19|     81|    fn as_display(&'a self) -> Self::Target {
   20|     81|        *self
   21|     81|    }

_RNvNtCsdPUQuH91pCL_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  3.35k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  3.35k|    let parser = QueryResultsParser::from_format(format);
    8|  3.35k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  3.35k|    let Ok(reader) = parser.parse_read(data) else {
   11|    155|        return;
   12|       |    };
   13|  3.19k|    match reader {
   14|  3.19k|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|  3.19k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|  1.21k|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|  1.97k|            let mut writer = serializer
   21|  1.97k|                .serialize_solutions_to_write(
   22|  1.97k|                    Vec::new(),
   23|  1.97k|                    solutions
   24|  1.97k|                        .first()
   25|  1.97k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|  1.97k|                )
   27|  1.97k|                .unwrap();
   28|  79.8k|            for solution in &solutions {
   29|  77.8k|                writer.write(solution).unwrap();
   30|  77.8k|            }
   31|  1.97k|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|  1.97k|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|  1.97k|                .parse_read(serialized.as_bytes())
   36|  1.97k|                .with_context(|| format!("Parsing {serialized:?}"))
   37|  1.97k|                .unwrap()
   38|       |            {
   39|  1.97k|                assert_eq!(
   40|  1.97k|                    roundtrip_solutions
   41|  1.97k|                        .collect::<Result<Vec<_>, _>>()
   42|  1.97k|                        .with_context(|| format!("Parsing {serialized:?}"))
   43|  1.97k|                        .unwrap(),
   44|  1.97k|                    solutions
   45|  1.97k|                )
   46|      0|            }
   47|       |        }
   48|      2|        FromReadQueryResultsReader::Boolean(value) => {
   49|      2|            // We try to write again
   50|      2|            let mut serialized = Vec::new();
   51|      2|            serializer
   52|      2|                .serialize_boolean_to_write(&mut serialized, value)
   53|      2|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      2|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      2|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  3.35k|}
_RNCNvNtCsdPUQuH91pCL_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|  1.91k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMs1_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCsdPUQuH91pCL_13oxigraph_fuzz:
  175|  12.6k|    pub const fn as_str(self) -> &'a str {
  176|  12.6k|        match self.0 {
  177|  3.62k|            BlankNodeRefContent::Named(id) => id,
  178|  9.03k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|  12.6k|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCsdPUQuH91pCL_13oxigraph_fuzz:
   87|  12.6k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  12.6k|        BlankNodeRef(match &self.0 {
   89|  3.62k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  9.03k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  9.03k|                id: *id,
   92|  9.03k|                str: str.as_str(),
   93|  9.03k|            },
   94|       |        })
   95|  12.6k|    }
_RNvMs7_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsdPUQuH91pCL_13oxigraph_fuzz:
  261|  9.03k|    fn as_str(&self) -> &str {
  262|  9.03k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  9.03k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  9.03k|    }
_RNvXsD_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
  249|  18.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsb_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   19|  25.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsg_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   22|  25.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMNtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   61|  18.5k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  18.5k|        Self(BlankNodeContent::Anonymous {
   63|  18.5k|            id,
   64|  18.5k|            str: IdStr::new(id),
   65|  18.5k|        })
   66|  18.5k|    }
_RNvMs7_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  254|  18.5k|    fn new(id: u128) -> Self {
  255|  18.5k|        let mut str = [0; 32];
  256|  18.5k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  18.5k|        Self(str)
  258|  18.5k|    }
_RNvNtCsfX3L9NQpT5I_5oxrdf10blank_node30validate_blank_node_identifier:
  267|  26.1k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  268|  26.1k|    let mut chars = id.chars();
  269|  26.1k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  270|  26.0k|    match front {
  271|  26.0k|        '0'..='9'
  272|       |        | '_'
  273|       |        | ':'
  274|  4.09k|        | 'A'..='Z'
  275|  3.54k|        | 'a'..='z'
  276|    867|        | '\u{00C0}'..='\u{00D6}'
  277|    867|        | '\u{00D8}'..='\u{00F6}'
  278|    865|        | '\u{00F8}'..='\u{02FF}'
  279|    794|        | '\u{0370}'..='\u{037D}'
  280|    794|        | '\u{037F}'..='\u{1FFF}'
  281|    742|        | '\u{200C}'..='\u{200D}'
  282|    742|        | '\u{2070}'..='\u{218F}'
  283|    678|        | '\u{2C00}'..='\u{2FEF}'
  284|    678|        | '\u{3001}'..='\u{D7FF}'
  285|    560|        | '\u{F900}'..='\u{FDCF}'
  286|    560|        | '\u{FDF0}'..='\u{FFFD}'
  287|  26.0k|        | '\u{10000}'..='\u{EFFFF}' => (),
  288|      3|        _ => return Err(BlankNodeIdParseError),
  289|       |    }
  290|   273k|    for c in chars {
  291|   247k|        match c {
  292|       |            '.' // validated later
  293|       |            | '-'
  294|   243k|            | '0'..='9'
  295|       |            | '\u{00B7}'
  296|  1.89k|            | '\u{0300}'..='\u{036F}'
  297|  1.16k|            | '\u{203F}'..='\u{2040}'
  298|       |            | '_'
  299|       |            | ':'
  300|  27.9k|            | 'A'..='Z'
  301|  20.7k|            | 'a'..='z'
  302|  1.91k|            | '\u{00C0}'..='\u{00D6}'
  303|  1.91k|            | '\u{00D8}'..='\u{00F6}'
  304|  1.91k|            | '\u{00F8}'..='\u{02FF}'
  305|  1.89k|            | '\u{0370}'..='\u{037D}'
  306|  1.89k|            | '\u{037F}'..='\u{1FFF}'
  307|  1.16k|            | '\u{200C}'..='\u{200D}'
  308|  1.16k|            | '\u{2070}'..='\u{218F}'
  309|  1.10k|            | '\u{2C00}'..='\u{2FEF}'
  310|  1.10k|            | '\u{3001}'..='\u{D7FF}'
  311|  1.01k|            | '\u{F900}'..='\u{FDCF}'
  312|  1.01k|            | '\u{FDF0}'..='\u{FFFD}'
  313|   247k|            | '\u{10000}'..='\u{EFFFF}' => (),
  314|      8|            _ => return Err(BlankNodeIdParseError),
  315|       |        }
  316|       |    }
  317|       |
  318|       |    // Could not end with a dot
  319|  26.0k|    if id.ends_with('.') {
  320|      5|        Err(BlankNodeIdParseError)
  321|       |    } else {
  322|  26.0k|        Ok(())
  323|       |    }
  324|  26.1k|}
_RNvNtCsfX3L9NQpT5I_5oxrdf10blank_node13to_integer_idB3_:
  327|  26.0k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  26.0k|    let digits = id.as_bytes();
  329|  26.0k|    let mut value: u128 = 0;
  330|  26.0k|    if let None | Some(b'0') = digits.first() {
  331|  1.80k|        return None; // No empty string or leading zeros
  332|  24.2k|    }
  333|   271k|    for digit in digits {
  334|   252k|        value = value.checked_mul(16)?.checked_add(
  335|   252k|            match *digit {
  336|   252k|                b'0'..=b'9' => digit - b'0',
  337|  21.1k|                b'a'..=b'f' => digit - b'a' + 10,
  338|  5.50k|                _ => return None,
  339|       |            }
  340|   247k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  18.5k|    Some(value)
  344|  26.0k|}
_RINvMNtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   48|  26.0k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|  26.0k|        let id = id.into();
   50|  26.0k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|  18.5k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  7.53k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|  26.0k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   35|  26.1k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   36|  26.1k|        let id = id.into();
   37|  26.1k|        validate_blank_node_identifier(&id)?;
   38|  26.0k|        Ok(Self::new_unchecked(id))
   39|  26.1k|    }
_RNCNvMs7_NtCsfX3L9NQpT5I_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|   126k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMst_NtCsfX3L9NQpT5I_5oxrdf7literalNtB5_10LiteralRef8datatypeCsdPUQuH91pCL_13oxigraph_fuzz:
  513|  33.7k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  33.7k|        match self.0 {
  515|    914|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  32.7k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  33.7k|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf7literalNtB2_7Literal6as_refCsdPUQuH91pCL_13oxigraph_fuzz:
  129|  37.1k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  37.1k|        LiteralRef(match &self.0 {
  131|    914|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  3.47k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  3.47k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  32.7k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  32.7k|                value,
  137|  32.7k|                datatype: datatype.as_ref(),
  138|  32.7k|            },
  139|       |        })
  140|  37.1k|    }
_RNvMst_NtCsfX3L9NQpT5I_5oxrdf7literalNtB5_10LiteralRef5valueCsdPUQuH91pCL_13oxigraph_fuzz:
  488|  37.1k|    pub const fn value(self) -> &'a str {
  489|  37.1k|        match self.0 {
  490|    914|            LiteralRefContent::String(value)
  491|  3.47k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  37.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  37.1k|        }
  494|  37.1k|    }
_RNvMst_NtCsfX3L9NQpT5I_5oxrdf7literalNtB5_10LiteralRef8languageCsdPUQuH91pCL_13oxigraph_fuzz:
  501|  37.1k|    pub const fn language(self) -> Option<&'a str> {
  502|  37.1k|        match self.0 {
  503|  3.47k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|  33.7k|            _ => None,
  505|       |        }
  506|  37.1k|    }
_RNvXsD_NtCsfX3L9NQpT5I_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   34|  74.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsfX3L9NQpT5I_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   37|  74.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsfX3L9NQpT5I_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  22.5k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  22.5k|        let value = value.into();
   55|  22.5k|        let datatype = datatype.into();
   56|  22.5k|        Self(if datatype == xsd::STRING {
   57|     66|            LiteralContent::String(value)
   58|       |        } else {
   59|  22.5k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  22.5k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  8.39k|    pub fn new_language_tagged_literal_unchecked(
   86|  8.39k|        value: impl Into<String>,
   87|  8.39k|        language: impl Into<String>,
   88|  8.39k|    ) -> Self {
   89|  8.39k|        Self(LiteralContent::LanguageTaggedString {
   90|  8.39k|            value: value.into(),
   91|  8.39k|            language: language.into(),
   92|  8.39k|        })
   93|  8.39k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  45.9k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  45.9k|        let value = value.into();
   55|  45.9k|        let datatype = datatype.into();
   56|  45.9k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  45.9k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  45.9k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringReEB5_:
   65|  8.44k|    pub fn new_language_tagged_literal(
   66|  8.44k|        value: impl Into<String>,
   67|  8.44k|        language: impl Into<String>,
   68|  8.44k|    ) -> Result<Self, LanguageTagParseError> {
   69|  8.44k|        let mut language = language.into();
   70|  8.44k|        language.make_ascii_lowercase();
   71|  8.44k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|  8.44k|            value,
   73|  8.44k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|  8.44k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  1.91k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  1.91k|        Self(LiteralContent::String(value.into()))
   49|  1.91k|    }

_RNvMs4_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsdPUQuH91pCL_13oxigraph_fuzz:
  128|  46.5k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  46.5k|        Self { iri }
  130|  46.5k|    }
_RNvMs4_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsdPUQuH91pCL_13oxigraph_fuzz:
  133|  34.2k|    pub const fn as_str(self) -> &'a str {
  134|  34.2k|        self.iri
  135|  34.2k|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsdPUQuH91pCL_13oxigraph_fuzz:
   54|  46.5k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  46.5k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  46.5k|    }
_RNvXsl_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   17|  93.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  55.4k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  55.4k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  55.4k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  45.9k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  45.9k|        Self { iri: iri.into() }
   41|  45.9k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  55.0k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  55.0k|        Self { iri: iri.into() }
   41|  55.0k|    }
_RNvMs4_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  68.5k|    pub const fn as_str(self) -> &'a str {
  134|  68.5k|        self.iri
  135|  68.5k|    }
_RNvMs4_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  45.9k|    pub fn into_owned(self) -> NamedNode {
  139|  45.9k|        NamedNode::new_unchecked(self.iri)
  140|  45.9k|    }
_RNvXs9_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  68.5k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  68.5k|        self.as_str() == other.as_str()
  175|  68.5k|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  55.0k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  55.0k|        Self::new_unchecked(iri.into_inner())
   31|  55.0k|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  68.5k|    pub fn as_str(&self) -> &str {
   45|  68.5k|        self.iri.as_str()
   46|  68.5k|    }
_RNvXs6_NtCsfX3L9NQpT5I_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  45.9k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  45.9k|        node.into_owned()
  154|  45.9k|    }

_RNvXs2_NtCsfX3L9NQpT5I_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_str:
  153|  4.45k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  154|  4.45k|        if !s.starts_with('?') && !s.starts_with('$') {
  155|     81|            return Err(Self::Err::msg(
  156|     81|                "Variable serialization should start with ? or $",
  157|     81|            ));
  158|  4.37k|        }
  159|  4.37k|        Self::new(&s[1..]).map_err(|error| {
  160|       |            TermParseError(TermParseErrorKind::Variable {
  161|       |                value: s.to_owned(),
  162|       |                error,
  163|       |            })
  164|  4.37k|        })
  165|  4.45k|    }
_RNvNtCsfX3L9NQpT5I_5oxrdf6parser14read_hexa_char:
  391|  1.75k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  392|  1.75k|    let mut value = 0;
  393|  1.75k|    for _ in 0..len {
  394|  8.78k|        if let Some(c) = input.next() {
  395|  8.75k|            value = value * 16
  396|  8.75k|                + match c {
  397|  8.74k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  398|    875|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  399|  1.74k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  400|       |                    _ => {
  401|      8|                        return Err(TermParseError::msg(
  402|      8|                            "Unexpected character in a unicode escape",
  403|      8|                        ));
  404|       |                    }
  405|       |                }
  406|       |        } else {
  407|     34|            return Err(TermParseError::msg("Unexpected literal string end"));
  408|       |        }
  409|       |    }
  410|  1.71k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  411|  1.75k|}
_RNvNtCsfX3L9NQpT5I_5oxrdf6parser15read_named_node:
  168|  55.5k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  169|  55.5k|    let s = s.trim();
  170|  55.5k|    if let Some(remain) = s.strip_prefix('<') {
  171|  55.5k|        let end = remain
  172|  55.5k|            .find('>')
  173|  55.5k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  174|  55.4k|        let (value, remain) = remain.split_at(end);
  175|  55.4k|        let remain = &remain[1..];
  176|  55.4k|        let term = NamedNode::new(value).map_err(|error| {
  177|       |            TermParseError(TermParseErrorKind::Iri {
  178|       |                value: value.to_owned(),
  179|       |                error,
  180|       |            })
  181|  55.4k|        })?;
  182|  55.0k|        Ok((term, remain))
  183|       |    } else {
  184|     47|        Err(TermParseError::msg(
  185|     47|            "Named node serialization should start with a <",
  186|     47|        ))
  187|       |    }
  188|  55.5k|}
_RNvNtCsfX3L9NQpT5I_5oxrdf6parser12read_literal:
  214|  79.1k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  215|  79.1k|    let s = s.trim();
  216|  79.1k|    if let Some(s) = s.strip_prefix('"') {
  217|  33.0k|        let mut value = String::with_capacity(s.len());
  218|  33.0k|        let mut chars = s.chars();
  219|   650k|        while let Some(c) = chars.next() {
  220|   650k|            match c {
  221|       |                '"' => {
  222|  32.9k|                    let remain = chars.as_str();
  223|  32.9k|                    return if let Some(remain) = remain.strip_prefix('@') {
  224|  8.44k|                        let end = remain
  225|  8.44k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  226|  8.44k|                            .unwrap_or(remain.len());
  227|  8.44k|                        let (language, remain) = remain.split_at(end);
  228|  8.44k|                        Ok((
  229|  8.44k|                            Literal::new_language_tagged_literal(value, language).map_err(
  230|  8.44k|                                |error| {
  231|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  232|       |                                        value: language.to_owned(),
  233|       |                                        error,
  234|       |                                    })
  235|  8.44k|                                },
  236|  8.44k|                            )?,
  237|  8.39k|                            remain,
  238|       |                        ))
  239|  24.5k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  240|  22.5k|                        let (datatype, remain) = read_named_node(remain)?;
  241|  22.5k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  242|       |                    } else {
  243|  1.91k|                        Ok((Literal::new_simple_literal(value), remain))
  244|       |                    };
  245|       |                }
  246|       |                '\\' => {
  247|  15.8k|                    if let Some(c) = chars.next() {
  248|  15.8k|                        value.push(match c {
  249|  2.47k|                            't' => '\t',
  250|    217|                            'b' => '\u{08}',
  251|    654|                            'n' => '\n',
  252|  1.41k|                            'r' => '\r',
  253|    198|                            'f' => '\u{0C}',
  254|  2.29k|                            '"' => '"',
  255|    194|                            '\'' => '\'',
  256|  6.59k|                            '\\' => '\\',
  257|  1.28k|                            'u' => read_hexa_char(&mut chars, 4)?,
  258|    476|                            'U' => read_hexa_char(&mut chars, 8)?,
  259|      4|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  260|       |                        })
  261|       |                    } else {
  262|      2|                        return Err(TermParseError::msg("Unexpected literal end"));
  263|       |                    }
  264|       |                }
  265|   602k|                _ => value.push(c),
  266|       |            }
  267|       |        }
  268|     68|        Err(TermParseError::msg("Unexpected literal end"))
  269|  46.1k|    } else if let Some(remain) = s.strip_prefix("true") {
  270|  1.36k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  271|  44.7k|    } else if let Some(remain) = s.strip_prefix("false") {
  272|    529|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  273|       |    } else {
  274|  44.2k|        let input = s.as_bytes();
  275|  44.2k|        if input.is_empty() {
  276|     30|            return Err(TermParseError::msg("Empty term serialization"));
  277|  44.1k|        }
  278|       |
  279|  44.1k|        let mut cursor = match input.first() {
  280|  9.08k|            Some(b'+' | b'-') => 1,
  281|  35.0k|            _ => 0,
  282|       |        };
  283|  44.1k|        let mut with_dot = false;
  284|  44.1k|
  285|  44.1k|        let mut count_before: usize = 0;
  286|   110k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  287|  66.7k|            count_before += 1;
  288|  66.7k|            cursor += 1;
  289|  66.7k|        }
  290|       |
  291|  44.1k|        let mut count_after: usize = 0;
  292|  44.1k|        if cursor < input.len() && input[cursor] == b'.' {
  293|  9.11k|            with_dot = true;
  294|  9.11k|            cursor += 1;
  295|  22.8k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  296|  13.7k|                count_after += 1;
  297|  13.7k|                cursor += 1;
  298|  13.7k|            }
  299|  35.0k|        }
  300|       |
  301|  44.1k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  302|  16.9k|            cursor += 1;
  303|  16.9k|            cursor += match input.get(cursor) {
  304|    232|                Some(b'+' | b'-') => 1,
  305|  16.7k|                _ => 0,
  306|       |            };
  307|  16.9k|            let mut count_exponent = 0;
  308|  55.5k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  309|  38.5k|                count_exponent += 1;
  310|  38.5k|                cursor += 1;
  311|  38.5k|            }
  312|  16.9k|            if count_exponent > 0 {
  313|  16.9k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  314|       |            } else {
  315|      8|                Err(TermParseError::msg(
  316|      8|                    "Double serialization with an invalid exponent",
  317|      8|                ))
  318|       |            }
  319|  27.2k|        } else if with_dot {
  320|  7.14k|            if count_after > 0 {
  321|  7.14k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  322|       |            } else {
  323|      6|                Err(TermParseError::msg(
  324|      6|                    "Decimal serialization without floating part",
  325|      6|                ))
  326|       |            }
  327|  20.0k|        } else if count_before > 0 {
  328|  19.9k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  329|       |        } else {
  330|    108|            Err(TermParseError::msg("Empty integer serialization"))
  331|       |        }
  332|       |    }
  333|  79.1k|}
_RNvXs6_NtCsfX3L9NQpT5I_5oxrdf6parserNtB5_14TermParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  414|     92|#[derive(Debug, thiserror::Error)]
_RNvXsa_NtCsfX3L9NQpT5I_5oxrdf6parserNtB5_18TermParseErrorKindNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  419|     92|#[derive(Debug, thiserror::Error)]
_RNvMs3_NtCsfX3L9NQpT5I_5oxrdf6parserNtB5_14TermParseError3msg:
  443|    585|    pub(crate) fn msg(msg: &'static str) -> Self {
  444|    585|        Self(TermParseErrorKind::Msg(msg))
  445|    585|    }
_RNvNtCsfX3L9NQpT5I_5oxrdf6parser15read_blank_node:
  190|  26.1k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  191|  26.1k|    let s = s.trim();
  192|  26.1k|    if let Some(remain) = s.strip_prefix("_:") {
  193|  26.1k|        let end = remain
  194|  26.1k|            .find(|v: char| {
  195|       |                v.is_whitespace()
  196|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  197|  26.1k|            })
  198|  26.1k|            .unwrap_or(remain.len());
  199|  26.1k|        let (value, remain) = remain.split_at(end);
  200|  26.1k|        let term = BlankNode::new(value).map_err(|error| {
  201|       |            TermParseError(TermParseErrorKind::BlankNode {
  202|       |                value: value.to_owned(),
  203|       |                error,
  204|       |            })
  205|  26.1k|        })?;
  206|  26.0k|        Ok((term, remain))
  207|       |    } else {
  208|      4|        Err(TermParseError::msg(
  209|      4|            "Blank node serialization should start with '_:'",
  210|      4|        ))
  211|       |    }
  212|  26.1k|}
_RNvNtCsfX3L9NQpT5I_5oxrdf6parser9read_term:
  335|   141k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  336|   141k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  337|      1|        return Err(TermParseError::msg(
  338|      1|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  339|      1|        ));
  340|   141k|    }
  341|   141k|    let s = s.trim();
  342|       |    #[allow(unused_variables)]
  343|   141k|    if let Some(remain) = s.strip_prefix("<<") {
  344|       |        #[cfg(feature = "rdf-star")]
  345|       |        {
  346|  19.2k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  347|  16.4k|            let (predicate, remain) = read_named_node(remain)?;
  348|  16.3k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  349|  14.9k|            let remain = remain.trim_start();
  350|  14.9k|            if let Some(remain) = remain.strip_prefix(">>") {
  351|       |                Ok((
  352|       |                    Triple {
  353|  14.8k|                        subject: match subject {
  354|  5.72k|                            Term::NamedNode(s) => s.into(),
  355|  2.18k|                            Term::BlankNode(s) => s.into(),
  356|       |                            Term::Literal(_) => {
  357|      1|                                return Err(TermParseError::msg(
  358|      1|                                    "Literals are not allowed in subject position",
  359|      1|                                ));
  360|       |                            }
  361|  6.96k|                            Term::Triple(s) => Subject::Triple(s),
  362|       |                        },
  363|  14.8k|                        predicate,
  364|  14.8k|                        object,
  365|  14.8k|                    }
  366|  14.8k|                    .into(),
  367|  14.8k|                    remain,
  368|       |                ))
  369|       |            } else {
  370|     49|                Err(TermParseError::msg(
  371|     49|                    "Nested triple serialization should be enclosed between << and >>",
  372|     49|                ))
  373|       |            }
  374|       |        }
  375|       |        #[cfg(not(feature = "rdf-star"))]
  376|       |        {
  377|       |            Err(TermParseError::msg("RDF-star is not supported"))
  378|       |        }
  379|   121k|    } else if s.starts_with('<') {
  380|  16.4k|        let (term, remain) = read_named_node(s)?;
  381|  16.0k|        Ok((term.into(), remain))
  382|   105k|    } else if s.starts_with('_') {
  383|  26.1k|        let (term, remain) = read_blank_node(s)?;
  384|  26.0k|        Ok((term.into(), remain))
  385|       |    } else {
  386|  79.1k|        let (term, remain) = read_literal(s)?;
  387|  78.8k|        Ok((term.into(), remain))
  388|       |    }
  389|   141k|}
_RNvXs1_NtCsfX3L9NQpT5I_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_str:
  130|   105k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  131|   105k|        let (term, left) = read_term(s, 0)?;
  132|   104k|        if !left.is_empty() {
  133|     81|            return Err(Self::Err::msg("Invalid term serialization"));
  134|   104k|        }
  135|   104k|        Ok(term)
  136|   105k|    }
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser12read_literal0B5_:
  225|  92.9k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser14read_hexa_char0B5_:
  410|      9|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser12read_literals_0B5_:
  230|     56|                                |error| {
  231|     56|                                    TermParseError(TermParseErrorKind::LanguageTag {
  232|     56|                                        value: language.to_owned(),
  233|     56|                                        error,
  234|     56|                                    })
  235|     56|                                },
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser15read_blank_node0B5_:
  194|   278k|            .find(|v: char| {
  195|   278k|                v.is_whitespace()
  196|   276k|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  197|   278k|            })
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser15read_named_nodes_0B5_:
  176|    413|        let term = NamedNode::new(value).map_err(|error| {
  177|    413|            TermParseError(TermParseErrorKind::Iri {
  178|    413|                value: value.to_owned(),
  179|    413|                error,
  180|    413|            })
  181|    413|        })?;
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser15read_blank_nodes_0B5_:
  200|     54|        let term = BlankNode::new(value).map_err(|error| {
  201|     54|            TermParseError(TermParseErrorKind::BlankNode {
  202|     54|                value: value.to_owned(),
  203|     54|                error,
  204|     54|            })
  205|     54|        })?;
_RNCNvXs2_NtCsfX3L9NQpT5I_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_str0B9_:
  159|     11|        Self::new(&s[1..]).map_err(|error| {
  160|     11|            TermParseError(TermParseErrorKind::Variable {
  161|     11|                value: s.to_owned(),
  162|     11|                error,
  163|     11|            })
  164|     11|        })
_RNCNvNtCsfX3L9NQpT5I_5oxrdf6parser15read_named_node0B5_:
  173|     44|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;

_RNvXs14_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_4TermE4fromCsdPUQuH91pCL_13oxigraph_fuzz:
  751|  57.1k|    fn from(node: &'a Term) -> Self {
  752|  57.1k|        node.as_ref()
  753|  57.1k|    }
_RNvXs13_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_7SubjectE4fromCsdPUQuH91pCL_13oxigraph_fuzz:
  744|  6.44k|    fn from(node: &'a Subject) -> Self {
  745|  6.44k|        node.as_ref().into()
  746|  6.44k|    }
_RNvMsy_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_4Term6as_refCsdPUQuH91pCL_13oxigraph_fuzz:
  417|  57.1k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  57.1k|        match self {
  419|  4.84k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  11.6k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  37.1k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  3.48k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  57.1k|    }
_RNvXsU_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCsdPUQuH91pCL_13oxigraph_fuzz:
  672|  6.44k|    fn from(node: &'a NamedNode) -> Self {
  673|  6.44k|        node.as_ref().into()
  674|  6.44k|    }
_RNvMsc_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7Subject6as_refCsdPUQuH91pCL_13oxigraph_fuzz:
  181|  6.44k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  6.44k|        match self {
  183|  2.44k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  1.04k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  2.96k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  6.44k|    }
_RNvXs12_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_10SubjectRefE4fromCsbQpZfyiopc4_10sparesults:
  732|  6.44k|    fn from(node: SubjectRef<'a>) -> Self {
  733|  6.44k|        match node {
  734|  2.44k|            SubjectRef::NamedNode(node) => node.into(),
  735|  1.04k|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|  2.96k|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  6.44k|    }
_RNvXs2p_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB6_6TripleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
  780|  12.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsT_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsbQpZfyiopc4_10sparesults:
  665|  29.3k|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|  29.3k|        Self::NamedNode(node)
  667|  29.3k|    }
_RNvXs2a_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
  385|   114k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsV_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCsbQpZfyiopc4_10sparesults:
  679|  1.04k|    fn from(node: BlankNodeRef<'a>) -> Self {
  680|  1.04k|        Self::BlankNode(node)
  681|  1.04k|    }
_RNvXsZ_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_6TripleE4fromCsbQpZfyiopc4_10sparesults:
  708|  2.96k|    fn from(node: &'a Triple) -> Self {
  709|  2.96k|        Self::Triple(node)
  710|  2.96k|    }
_RNvXs1V_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
  155|  12.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsC_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  26.0k|    fn from(node: BlankNode) -> Self {
  452|  26.0k|        Self::BlankNode(node)
  453|  26.0k|    }
_RNvXsA_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  16.0k|    fn from(node: NamedNode) -> Self {
  438|  16.0k|        Self::NamedNode(node)
  439|  16.0k|    }
_RNvXsG_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  14.8k|    fn from(triple: Triple) -> Self {
  481|  14.8k|        Self::Triple(Box::new(triple))
  482|  14.8k|    }
_RNvXse_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  5.72k|    fn from(node: NamedNode) -> Self {
  201|  5.72k|        Self::NamedNode(node)
  202|  5.72k|    }
_RNvXsg_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  2.18k|    fn from(node: BlankNode) -> Self {
  215|  2.18k|        Self::BlankNode(node)
  216|  2.18k|    }
_RNvXsE_NtCsfX3L9NQpT5I_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  78.8k|    fn from(literal: Literal) -> Self {
  466|  78.8k|        Self::Literal(literal)
  467|  78.8k|    }

_RNvXs5_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_8VariableINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_11VariableRefE2eqCsdPUQuH91pCL_13oxigraph_fuzz:
  144|  51.1k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|  51.1k|        self.as_ref() == *other
  146|  51.1k|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf8variableNtB2_8Variable6as_refCsdPUQuH91pCL_13oxigraph_fuzz:
   50|   101k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|   101k|        VariableRef { name: &self.name }
   52|   101k|    }
_RNvXsk_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsdPUQuH91pCL_13oxigraph_fuzz:
   71|  51.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs2_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_11VariableRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_8VariableE4fromCsdPUQuH91pCL_13oxigraph_fuzz:
  123|  50.6k|    fn from(variable: &'a Variable) -> Self {
  124|  50.6k|        variable.as_ref()
  125|  50.6k|    }
_RNvXsf_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsdPUQuH91pCL_13oxigraph_fuzz:
   13|  1.97k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsk_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   71|   102k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsfX3L9NQpT5I_5oxrdf8variableNtB2_8Variable6as_refCsbQpZfyiopc4_10sparesults:
   50|   203k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|   203k|        VariableRef { name: &self.name }
   52|   203k|    }
_RNvXs5_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_8VariableINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_11VariableRefE2eqCsbQpZfyiopc4_10sparesults:
  144|   102k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   102k|        self.as_ref() == *other
  146|   102k|    }
_RNvXsb_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsbQpZfyiopc4_10sparesults:
   13|  1.37k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCsfX3L9NQpT5I_5oxrdf8variableNtB4_8VariableNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsbQpZfyiopc4_10sparesults:
   57|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|      8|        self.as_ref().fmt(f)
   59|      8|    }
_RNvMNtCsfX3L9NQpT5I_5oxrdf8variableNtB2_8Variable6as_strCsbQpZfyiopc4_10sparesults:
   40|  1.97k|    pub fn as_str(&self) -> &str {
   41|  1.97k|        &self.name
   42|  1.97k|    }
_RNvXs1_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsbQpZfyiopc4_10sparesults:
  116|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|      8|        write!(f, "?{}", self.name)
  118|      8|    }
_RNvXst_NtCsfX3L9NQpT5I_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  214|     11|#[derive(Debug, thiserror::Error)]
_RNvNtCsfX3L9NQpT5I_5oxrdf8variable28validate_variable_identifier:
  163|  4.37k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  4.37k|    let mut chars = id.chars();
  165|  4.37k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  4.37k|    match front {
  167|  4.37k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  2.41k|        | 'A'..='Z'
  171|    754|        | 'a'..='z'
  172|    105|        | '\u{00C0}'..='\u{00D6}'
  173|    105|        | '\u{00D8}'..='\u{00F6}'
  174|     99|        | '\u{00F8}'..='\u{02FF}'
  175|     99|        | '\u{0370}'..='\u{037D}'
  176|     99|        | '\u{037F}'..='\u{1FFF}'
  177|     31|        | '\u{200C}'..='\u{200D}'
  178|     31|        | '\u{2070}'..='\u{218F}'
  179|     22|        | '\u{2C00}'..='\u{2FEF}'
  180|     22|        | '\u{3001}'..='\u{D7FF}'
  181|      6|        | '\u{F900}'..='\u{FDCF}'
  182|      6|        | '\u{FDF0}'..='\u{FFFD}'
  183|  4.37k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      1|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  9.49k|    for c in chars {
  187|  5.13k|        match c {
  188|  5.12k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|    375|            | '\u{0300}'..='\u{036F}'
  191|    178|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  2.95k|            | 'A'..='Z'
  194|  1.21k|            | 'a'..='z'
  195|    377|            | '\u{00C0}'..='\u{00D6}'
  196|    377|            | '\u{00D8}'..='\u{00F6}'
  197|    375|            | '\u{00F8}'..='\u{02FF}'
  198|    375|            | '\u{0370}'..='\u{037D}'
  199|    375|            | '\u{037F}'..='\u{1FFF}'
  200|    178|            | '\u{200C}'..='\u{200D}'
  201|    178|            | '\u{2070}'..='\u{218F}'
  202|    178|            | '\u{2C00}'..='\u{2FEF}'
  203|    177|            | '\u{3001}'..='\u{D7FF}'
  204|     80|            | '\u{F900}'..='\u{FDCF}'
  205|     80|            | '\u{FDF0}'..='\u{FFFD}'
  206|  5.12k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      7|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  4.36k|    Ok(())
  211|  4.37k|}
_RINvMNtCsfX3L9NQpT5I_5oxrdf8variableNtB3_8Variable3newReEB5_:
   22|  4.37k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  4.37k|        let name = name.into();
   24|  4.37k|        validate_variable_identifier(&name)?;
   25|  4.36k|        Ok(Self::new_unchecked(name))
   26|  4.37k|    }
_RINvMNtCsfX3L9NQpT5I_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   35|  4.36k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  4.36k|        Self { name: name.into() }
   37|  4.36k|    }

_RINvNtCsbQpZfyiopc4_10sparesults3csv14write_tsv_termNtNtCsfX3L9NQpT5I_5oxrdf10named_node12NamedNodeRefECsdPUQuH91pCL_13oxigraph_fuzz:
  299|  20.4k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  20.4k|    match term.into() {
  301|  20.4k|        TermRef::NamedNode(node) => {
  302|  20.4k|            output.push('<');
  303|  20.4k|            output.push_str(node.as_str());
  304|  20.4k|            output.push('>');
  305|  20.4k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|  20.4k|}
_RINvNtCsbQpZfyiopc4_10sparesults3csv14write_tsv_termNtNtCsfX3L9NQpT5I_5oxrdf6triple7TermRefECsdPUQuH91pCL_13oxigraph_fuzz:
  299|  50.6k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  50.6k|    match term.into() {
  301|  4.66k|        TermRef::NamedNode(node) => {
  302|  4.66k|            output.push('<');
  303|  4.66k|            output.push_str(node.as_str());
  304|  4.66k|            output.push('>');
  305|  4.66k|        }
  306|  10.7k|        TermRef::BlankNode(node) => {
  307|  10.7k|            output.push_str("_:");
  308|  10.7k|            output.push_str(node.as_str());
  309|  10.7k|        }
  310|  32.2k|        TermRef::Literal(literal) => {
  311|  32.2k|            let value = literal.value();
  312|  32.2k|            if let Some(language) = literal.language() {
  313|  3.07k|                write_tsv_quoted_str(output, value);
  314|  3.07k|                output.push('@');
  315|  3.07k|                output.push_str(language);
  316|  3.07k|            } else {
  317|  29.1k|                match literal.datatype() {
  318|  29.1k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|  28.3k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|  21.4k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|  18.1k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|  16.9k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|  16.2k|                    datatype => {
  324|  16.2k|                        write_tsv_quoted_str(output, value);
  325|  16.2k|                        output.push_str("^^");
  326|  16.2k|                        write_tsv_term(output, datatype);
  327|  16.2k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  3.08k|        TermRef::Triple(triple) => {
  333|  3.08k|            output.push_str("<< ");
  334|  3.08k|            write_tsv_term(output, &triple.subject);
  335|  3.08k|            output.push(' ');
  336|  3.08k|            write_tsv_term(output, &triple.predicate);
  337|  3.08k|            output.push(' ');
  338|  3.08k|            write_tsv_term(output, &triple.object);
  339|  3.08k|            output.push_str(" >>");
  340|  3.08k|        }
  341|       |    }
  342|  50.6k|}
_RINvNtCsbQpZfyiopc4_10sparesults3csv14write_tsv_termRNtNtCsfX3L9NQpT5I_5oxrdf6triple4TermECsdPUQuH91pCL_13oxigraph_fuzz:
  299|  6.44k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  6.44k|    match term.into() {
  301|    184|        TermRef::NamedNode(node) => {
  302|    184|            output.push('<');
  303|    184|            output.push_str(node.as_str());
  304|    184|            output.push('>');
  305|    184|        }
  306|    895|        TermRef::BlankNode(node) => {
  307|    895|            output.push_str("_:");
  308|    895|            output.push_str(node.as_str());
  309|    895|        }
  310|  4.96k|        TermRef::Literal(literal) => {
  311|  4.96k|            let value = literal.value();
  312|  4.96k|            if let Some(language) = literal.language() {
  313|    396|                write_tsv_quoted_str(output, value);
  314|    396|                output.push('@');
  315|    396|                output.push_str(language);
  316|    396|            } else {
  317|  4.56k|                match literal.datatype() {
  318|  4.56k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|  4.44k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|  4.44k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|  4.44k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|  4.44k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|  4.28k|                    datatype => {
  324|  4.28k|                        write_tsv_quoted_str(output, value);
  325|  4.28k|                        output.push_str("^^");
  326|  4.28k|                        write_tsv_term(output, datatype);
  327|  4.28k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|    405|        TermRef::Triple(triple) => {
  333|    405|            output.push_str("<< ");
  334|    405|            write_tsv_term(output, &triple.subject);
  335|    405|            output.push(' ');
  336|    405|            write_tsv_term(output, &triple.predicate);
  337|    405|            output.push(' ');
  338|    405|            write_tsv_term(output, &triple.object);
  339|    405|            output.push_str(" >>");
  340|    405|        }
  341|       |    }
  342|  6.44k|}
_RINvNtCsbQpZfyiopc4_10sparesults3csv14write_tsv_termRNtNtCsfX3L9NQpT5I_5oxrdf6triple7SubjectECsdPUQuH91pCL_13oxigraph_fuzz:
  299|  6.44k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  6.44k|    match term.into() {
  301|  2.44k|        TermRef::NamedNode(node) => {
  302|  2.44k|            output.push('<');
  303|  2.44k|            output.push_str(node.as_str());
  304|  2.44k|            output.push('>');
  305|  2.44k|        }
  306|  1.04k|        TermRef::BlankNode(node) => {
  307|  1.04k|            output.push_str("_:");
  308|  1.04k|            output.push_str(node.as_str());
  309|  1.04k|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  2.96k|        TermRef::Triple(triple) => {
  333|  2.96k|            output.push_str("<< ");
  334|  2.96k|            write_tsv_term(output, &triple.subject);
  335|  2.96k|            output.push(' ');
  336|  2.96k|            write_tsv_term(output, &triple.predicate);
  337|  2.96k|            output.push(' ');
  338|  2.96k|            write_tsv_term(output, &triple.object);
  339|  2.96k|            output.push_str(" >>");
  340|  2.96k|        }
  341|       |    }
  342|  6.44k|}
_RINvMs5_NtCsbQpZfyiopc4_10sparesults3csvNtB6_10LineReader9next_lineRShECsdPUQuH91pCL_13oxigraph_fuzz:
  669|   170k|    fn next_line<'a>(
  670|   170k|        &mut self,
  671|   170k|        buffer: &'a mut Vec<u8>,
  672|   170k|        read: &mut impl Read,
  673|   170k|    ) -> io::Result<&'a str> {
  674|   170k|        let line_end = loop {
  675|   178k|            if let Some(eol) = memchr(b'\n', &buffer[self.buffer_start..self.buffer_end]) {
  676|   163k|                break self.buffer_start + eol + 1;
  677|  14.3k|            }
  678|  14.3k|            if self.buffer_start > 0 {
  679|  8.28k|                buffer.copy_within(self.buffer_start..self.buffer_end, 0);
  680|  8.28k|                self.buffer_end -= self.buffer_start;
  681|  8.28k|                self.buffer_start = 0;
  682|  8.28k|            }
  683|  14.3k|            if self.buffer_end + 1024 > buffer.len() {
  684|  9.65k|                if self.buffer_end + 1024 > MAX_BUFFER_SIZE {
  685|      0|                    return Err(io::Error::new(
  686|      0|                        io::ErrorKind::OutOfMemory,
  687|      0|                        format!("Reached the buffer maximal size of {MAX_BUFFER_SIZE}"),
  688|      0|                    ));
  689|  9.65k|                }
  690|  9.65k|                buffer.resize(self.buffer_end + 1024, b'\0');
  691|  4.72k|            }
  692|  14.3k|            let read = read.read(&mut buffer[self.buffer_end..])?;
  693|  14.3k|            if read == 0 {
  694|  7.06k|                break self.buffer_end;
  695|  7.31k|            }
  696|  7.31k|            self.buffer_end += read;
  697|       |        };
  698|   170k|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  699|       |            io::Error::new(
  700|       |                io::ErrorKind::InvalidData,
  701|       |                format!("Invalid UTF-8 in the TSV file: {e}"),
  702|       |            )
  703|   170k|        });
  704|   170k|        self.line_count += 1;
  705|   170k|        self.last_line_start = self.last_line_end;
  706|   170k|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  707|   170k|        self.buffer_start = line_end;
  708|   170k|        result
  709|   170k|    }
_RINvNtCsbQpZfyiopc4_10sparesults3csv14write_tsv_termRNtNtCsfX3L9NQpT5I_5oxrdf10named_node9NamedNodeECsdPUQuH91pCL_13oxigraph_fuzz:
  299|  6.44k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  6.44k|    match term.into() {
  301|  6.44k|        TermRef::NamedNode(node) => {
  302|  6.44k|            output.push('<');
  303|  6.44k|            output.push_str(node.as_str());
  304|  6.44k|            output.push('>');
  305|  6.44k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|  6.44k|}
_RINvMs0_NtCsbQpZfyiopc4_10sparesults3csvINtB6_25ToWriteTsvSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB37_22ToWriteSolutionsWriterB19_E5writeRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableRNtNtB49_6triple4TermRNtB2F_13QuerySolutionE0EECsdPUQuH91pCL_13oxigraph_fuzz:
  202|  77.8k|    pub fn write<'a>(
  203|  77.8k|        &mut self,
  204|  77.8k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  205|  77.8k|    ) -> io::Result<()> {
  206|  77.8k|        self.inner.write(&mut self.buffer, solution);
  207|  77.8k|        self.write.write_all(self.buffer.as_bytes())?;
  208|  77.8k|        self.buffer.clear();
  209|  77.8k|        Ok(())
  210|  77.8k|    }
_RINvNtCsbQpZfyiopc4_10sparesults3csv24write_boolean_csv_resultQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsdPUQuH91pCL_13oxigraph_fuzz:
   16|      2|pub fn write_boolean_csv_result<W: Write>(mut write: W, value: bool) -> io::Result<W> {
   17|      2|    write.write_all(if value { b"true" } else { b"false" })?;
   18|      2|    Ok(write)
   19|      2|}
_RNCINvMs1_NtCsbQpZfyiopc4_10sparesults3csvNtB8_23InnerTsvSolutionsWriter5writeINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2w_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableRNtNtB43_6triple4TermRNtB24_13QuerySolutionE0EE0CsdPUQuH91pCL_13oxigraph_fuzz:
  280|  51.1k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNCINvMs5_NtCsbQpZfyiopc4_10sparesults3csvNtB8_10LineReader9next_lineRShE0CsdPUQuH91pCL_13oxigraph_fuzz:
  698|     17|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  699|     17|            io::Error::new(
  700|     17|                io::ErrorKind::InvalidData,
  701|     17|                format!("Invalid UTF-8 in the TSV file: {e}"),
  702|     17|            )
  703|     17|        });
_RNvMs0_NtCsbQpZfyiopc4_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCsdPUQuH91pCL_13oxigraph_fuzz:
  212|  1.97k|    pub fn finish(self) -> W {
  213|  1.97k|        self.write
  214|  1.97k|    }
_RNvMs2_NtCsbQpZfyiopc4_10sparesults3csvINtB5_29FromReadTsvQueryResultsReaderRShE4readCsdPUQuH91pCL_13oxigraph_fuzz:
  437|  5.33k|    pub fn read(mut read: R) -> Result<Self, QueryResultsParseError> {
  438|  5.33k|        let mut reader = LineReader::new();
  439|  5.33k|        let mut buffer = Vec::new();
  440|  5.33k|        let line = reader.next_line(&mut buffer, &mut read)?;
  441|  5.32k|        Ok(match inner_read_first_line(reader, line)? {
  442|       |            TsvInnerQueryResults::Solutions {
  443|  5.17k|                variables,
  444|  5.17k|                solutions,
  445|  5.17k|            } => Self::Solutions {
  446|  5.17k|                variables,
  447|  5.17k|                solutions: FromReadTsvSolutionsReader {
  448|  5.17k|                    read,
  449|  5.17k|                    inner: solutions,
  450|  5.17k|                    buffer,
  451|  5.17k|                },
  452|  5.17k|            },
  453|      4|            TsvInnerQueryResults::Boolean(value) => Self::Boolean(value),
  454|       |        })
  455|  5.33k|    }
_RNvMs3_NtCsbQpZfyiopc4_10sparesults3csvINtB5_26FromReadTsvSolutionsReaderRShE9read_nextCsdPUQuH91pCL_13oxigraph_fuzz:
  465|   165k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsParseError> {
  466|   165k|        let line = self
  467|   165k|            .inner
  468|   165k|            .reader
  469|   165k|            .next_line(&mut self.buffer, &mut self.read)?;
  470|   165k|        self.inner.read_next(line)
  471|   165k|    }
_RNvMs0_NtCsbQpZfyiopc4_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5startCsdPUQuH91pCL_13oxigraph_fuzz:
  190|  1.97k|    pub fn start(mut write: W, variables: Vec<Variable>) -> io::Result<Self> {
  191|  1.97k|        let mut buffer = String::new();
  192|  1.97k|        let inner = InnerTsvSolutionsWriter::start(&mut buffer, variables);
  193|  1.97k|        write.write_all(buffer.as_bytes())?;
  194|  1.97k|        buffer.clear();
  195|  1.97k|        Ok(Self {
  196|  1.97k|            inner,
  197|  1.97k|            write,
  198|  1.97k|            buffer,
  199|  1.97k|        })
  200|  1.97k|    }
_RINvMs1_NtCsbQpZfyiopc4_10sparesults3csvNtB6_23InnerTsvSolutionsWriter5writeINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2u_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableRNtNtB41_6triple4TermRNtB22_13QuerySolutionE0EECsdPUQuH91pCL_13oxigraph_fuzz:
  273|  77.8k|    fn write<'a>(
  274|  77.8k|        &self,
  275|  77.8k|        output: &mut String,
  276|  77.8k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  277|  77.8k|    ) {
  278|  77.8k|        let mut values = vec![None; self.variables.len()];
  279|   128k|        for (variable, value) in solution {
  280|  50.6k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  281|  50.6k|                values[position] = Some(value);
  282|  50.6k|            }
  283|       |        }
  284|  77.8k|        let mut start_binding = true;
  285|   155k|        for value in values {
  286|  77.6k|            if start_binding {
  287|  76.9k|                start_binding = false;
  288|  76.9k|            } else {
  289|    739|                output.push('\t');
  290|    739|            }
  291|  77.6k|            if let Some(value) = value {
  292|  50.6k|                write_tsv_term(output, value);
  293|  50.6k|            }
  294|       |        }
  295|  77.8k|        output.push('\n');
  296|  77.8k|    }
_RNCNCNCNvMs4_NtCsbQpZfyiopc4_10sparesults3csvNtBb_23TsvInnerSolutionsReader9read_next000Bd_:
  596|    533|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs4_NtCsbQpZfyiopc4_10sparesults3csvNtBb_23TsvInnerSolutionsReader9read_next00s_0Bd_:
  599|    533|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNvNtCsbQpZfyiopc4_10sparesults3csv21inner_read_first_lines_0B5_:
  551|     92|            let variable = Variable::from_str(v).map_err(|e| {
  552|     92|                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  553|     92|            })?;
_RNCNvNtCsbQpZfyiopc4_10sparesults3csv21inner_read_first_line0B5_:
  537|  14.7k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvMs4_NtCsbQpZfyiopc4_10sparesults3csvNtB7_23TsvInnerSolutionsReader9read_next0B9_:
  587|   164k|            .map(|(i, v)| {
  588|   164k|                let v = v.trim();
  589|   164k|                if v.is_empty() {
  590|  59.1k|                    Ok(None)
  591|       |                } else {
  592|   105k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  593|       |                        let start_position_char = line
  594|       |                            .split('\t')
  595|       |                            .take(i)
  596|       |                            .map(|c| c.chars().count() + 1)
  597|       |                            .sum::<usize>();
  598|       |                        let start_position_bytes =
  599|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  600|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  601|       |                            error: e,
  602|       |                            term: v.into(),
  603|       |                            location: TextPosition {
  604|       |                                line: self.reader.line_count - 1,
  605|       |                                column: start_position_char.try_into().unwrap(),
  606|       |                                offset: self.reader.last_line_start
  607|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  608|       |                            }..TextPosition {
  609|       |                                line: self.reader.line_count - 1,
  610|       |                                column: (start_position_char + v.chars().count())
  611|       |                                    .try_into()
  612|       |                                    .unwrap(),
  613|       |                                offset: self.reader.last_line_start
  614|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  615|       |                            },
  616|       |                        })
  617|   105k|                    })?))
  618|       |                }
  619|   164k|            })
_RNCNCNvMs4_NtCsbQpZfyiopc4_10sparesults3csvNtB9_23TsvInnerSolutionsReader9read_next00Bb_:
  592|  1.02k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  593|  1.02k|                        let start_position_char = line
  594|  1.02k|                            .split('\t')
  595|  1.02k|                            .take(i)
  596|  1.02k|                            .map(|c| c.chars().count() + 1)
  597|  1.02k|                            .sum::<usize>();
  598|  1.02k|                        let start_position_bytes =
  599|  1.02k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  600|  1.02k|                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  601|  1.02k|                            error: e,
  602|  1.02k|                            term: v.into(),
  603|  1.02k|                            location: TextPosition {
  604|  1.02k|                                line: self.reader.line_count - 1,
  605|  1.02k|                                column: start_position_char.try_into().unwrap(),
  606|  1.02k|                                offset: self.reader.last_line_start
  607|  1.02k|                                    + u64::try_from(start_position_bytes).unwrap(),
  608|  1.02k|                            }..TextPosition {
  609|  1.02k|                                line: self.reader.line_count - 1,
  610|  1.02k|                                column: (start_position_char + v.chars().count())
  611|  1.02k|                                    .try_into()
  612|  1.02k|                                    .unwrap(),
  613|  1.02k|                                offset: self.reader.last_line_start
  614|  1.02k|                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  615|  1.02k|                            },
  616|  1.02k|                        })
  617|  1.02k|                    })?))
_RNvNtCsbQpZfyiopc4_10sparesults3csv17is_turtle_integer:
  363|  10.9k|fn is_turtle_integer(value: &str) -> bool {
  364|  10.9k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  365|  10.9k|    let mut value = value.as_bytes();
  366|  10.9k|    if let Some(v) = value.strip_prefix(b"+") {
  367|    222|        value = v;
  368|  10.7k|    } else if let Some(v) = value.strip_prefix(b"-") {
  369|    182|        value = v;
  370|  10.5k|    }
  371|  10.9k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  372|  10.9k|}
_RNvNtCsbQpZfyiopc4_10sparesults3csv17is_turtle_decimal:
  374|  3.77k|fn is_turtle_decimal(value: &str) -> bool {
  375|  3.77k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  376|  3.77k|    let mut value = value.as_bytes();
  377|  3.77k|    if let Some(v) = value.strip_prefix(b"+") {
  378|    724|        value = v;
  379|  3.04k|    } else if let Some(v) = value.strip_prefix(b"-") {
  380|    969|        value = v;
  381|  2.08k|    }
  382|  9.52k|    while value.first().map_or(false, u8::is_ascii_digit) {
  383|  5.75k|        value = &value[1..];
  384|  5.75k|    }
  385|  3.77k|    let Some(value) = value.strip_prefix(b".") else {
  386|    342|        return false;
  387|       |    };
  388|  3.43k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  389|  3.77k|}
_RNvNtCsbQpZfyiopc4_10sparesults3csv21inner_read_first_line:
  533|  5.32k|fn inner_read_first_line(
  534|  5.32k|    reader: LineReader,
  535|  5.32k|    line: &str,
  536|  5.32k|) -> Result<TsvInnerQueryResults, QueryResultsParseError> {
  537|  5.32k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  538|  5.32k|    if line.eq_ignore_ascii_case("true") {
  539|      2|        return Ok(TsvInnerQueryResults::Boolean(true));
  540|  5.32k|    }
  541|  5.32k|    if line.eq_ignore_ascii_case("false") {
  542|      2|        return Ok(TsvInnerQueryResults::Boolean(false));
  543|  5.32k|    }
  544|  5.32k|    let mut variables = Vec::new();
  545|  5.32k|    if !line.is_empty() {
  546|  4.51k|        for v in line.split('\t') {
  547|  4.51k|            let v = v.trim();
  548|  4.51k|            if v.is_empty() {
  549|     53|                return Err(QueryResultsSyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar").into());
  550|  4.45k|            }
  551|  4.45k|            let variable = Variable::from_str(v).map_err(|e| {
  552|       |                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  553|  4.45k|            })?;
  554|  4.36k|            if variables.contains(&variable) {
  555|      8|                return Err(QueryResultsSyntaxError::msg(format!(
  556|      8|                    "The variable {variable} is declared twice"
  557|      8|                ))
  558|      8|                .into());
  559|  4.35k|            }
  560|  4.35k|            variables.push(variable);
  561|       |        }
  562|  1.20k|    }
  563|  5.17k|    let column_len = variables.len();
  564|  5.17k|    Ok(TsvInnerQueryResults::Solutions {
  565|  5.17k|        variables,
  566|  5.17k|        solutions: TsvInnerSolutionsReader { reader, column_len },
  567|  5.17k|    })
  568|  5.32k|}
_RNvNtCsbQpZfyiopc4_10sparesults3csv16is_turtle_double:
  391|  16.2k|fn is_turtle_double(value: &str) -> bool {
  392|  16.2k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  393|  16.2k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  394|  16.2k|    let mut value = value.as_bytes();
  395|  16.2k|    if let Some(v) = value.strip_prefix(b"+") {
  396|    164|        value = v;
  397|  16.1k|    } else if let Some(v) = value.strip_prefix(b"-") {
  398|  4.68k|        value = v;
  399|  11.4k|    }
  400|  16.2k|    let mut with_before = false;
  401|  19.4k|    while value.first().map_or(false, u8::is_ascii_digit) {
  402|  3.16k|        value = &value[1..];
  403|  3.16k|        with_before = true;
  404|  3.16k|    }
  405|  16.2k|    let mut with_after = false;
  406|  16.2k|    if let Some(v) = value.strip_prefix(b".") {
  407|  1.80k|        value = v;
  408|  3.08k|        while value.first().map_or(false, u8::is_ascii_digit) {
  409|  1.27k|            value = &value[1..];
  410|  1.27k|            with_after = true;
  411|  1.27k|        }
  412|  14.4k|    }
  413|  16.2k|    if let Some(v) = value.strip_prefix(b"e") {
  414|  13.7k|        value = v;
  415|  13.7k|    } else if let Some(v) = value.strip_prefix(b"E") {
  416|  2.03k|        value = v;
  417|  2.03k|    } else {
  418|    521|        return false;
  419|       |    }
  420|  15.7k|    if let Some(v) = value.strip_prefix(b"+") {
  421|    115|        value = v;
  422|  15.6k|    } else if let Some(v) = value.strip_prefix(b"-") {
  423|    105|        value = v;
  424|  15.5k|    }
  425|  15.7k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  426|  16.2k|}
_RNvMs1_NtCsbQpZfyiopc4_10sparesults3csvNtB5_23InnerTsvSolutionsWriter5start:
  258|  1.97k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  259|  1.97k|        let mut start_vars = true;
  260|  3.95k|        for variable in &variables {
  261|  1.97k|            if start_vars {
  262|  1.88k|                start_vars = false;
  263|  1.88k|            } else {
  264|     92|                output.push('\t');
  265|     92|            }
  266|  1.97k|            output.push('?');
  267|  1.97k|            output.push_str(variable.as_str());
  268|       |        }
  269|  1.97k|        output.push('\n');
  270|  1.97k|        Self { variables }
  271|  1.97k|    }
_RNvNtCsbQpZfyiopc4_10sparesults3csv20write_tsv_quoted_str:
  344|  24.8k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  345|  24.8k|    output.push('"');
  346|   591k|    for c in string.chars() {
  347|   591k|        match c {
  348|  1.23k|            '\t' => output.push_str("\\t"),
  349|    324|            '\n' => output.push_str("\\n"),
  350|  1.35k|            '\r' => output.push_str("\\r"),
  351|  1.14k|            '"' => output.push_str("\\\""),
  352|  3.29k|            '\\' => output.push_str("\\\\"),
  353|   584k|            _ => output.push(c),
  354|       |        };
  355|       |    }
  356|  24.8k|    output.push('"');
  357|  24.8k|}
_RNvMs4_NtCsbQpZfyiopc4_10sparesults3csvNtB5_23TsvInnerSolutionsReader9read_next:
  577|   165k|    pub fn read_next(
  578|   165k|        &self,
  579|   165k|        line: &str,
  580|   165k|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsParseError> {
  581|   165k|        if line.is_empty() {
  582|  3.95k|            return Ok(None); // EOF
  583|   161k|        }
  584|   161k|        let elements = line
  585|   161k|            .split('\t')
  586|   161k|            .enumerate()
  587|   161k|            .map(|(i, v)| {
  588|       |                let v = v.trim();
  589|       |                if v.is_empty() {
  590|       |                    Ok(None)
  591|       |                } else {
  592|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  593|       |                        let start_position_char = line
  594|       |                            .split('\t')
  595|       |                            .take(i)
  596|       |                            .map(|c| c.chars().count() + 1)
  597|       |                            .sum::<usize>();
  598|       |                        let start_position_bytes =
  599|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  600|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  601|       |                            error: e,
  602|       |                            term: v.into(),
  603|       |                            location: TextPosition {
  604|       |                                line: self.reader.line_count - 1,
  605|       |                                column: start_position_char.try_into().unwrap(),
  606|       |                                offset: self.reader.last_line_start
  607|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  608|       |                            }..TextPosition {
  609|       |                                line: self.reader.line_count - 1,
  610|       |                                column: (start_position_char + v.chars().count())
  611|       |                                    .try_into()
  612|       |                                    .unwrap(),
  613|       |                                offset: self.reader.last_line_start
  614|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  615|       |                            },
  616|       |                        })
  617|       |                    })?))
  618|       |                }
  619|   161k|            })
  620|   161k|            .collect::<Result<Vec<_>, QueryResultsParseError>>()?;
  621|   160k|        if elements.len() == self.column_len {
  622|   158k|            Ok(Some(elements))
  623|  2.14k|        } else if self.column_len == 0 && elements == [None] {
  624|  1.97k|            Ok(Some(Vec::new())) // Zero columns case
  625|       |        } else {
  626|    176|            Err(QueryResultsSyntaxError::located_message(
  627|    176|                format!(
  628|    176|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  629|    176|                    self.column_len,
  630|    176|                    self.reader.line_count - 1,
  631|    176|                    elements.len(),
  632|    176|                    line
  633|    176|                ),
  634|    176|                TextPosition {
  635|    176|                    line: self.reader.line_count - 1,
  636|    176|                    column: 0,
  637|    176|                    offset: self.reader.last_line_start,
  638|    176|                }..TextPosition {
  639|    176|                    line: self.reader.line_count - 1,
  640|    176|                    column: line.chars().count().try_into().unwrap(),
  641|    176|                    offset: self.reader.last_line_end,
  642|    176|                },
  643|    176|            )
  644|    176|            .into())
  645|       |        }
  646|   165k|    }
_RNvMs5_NtCsbQpZfyiopc4_10sparesults3csvNtB5_10LineReader3new:
  658|  5.33k|    fn new() -> Self {
  659|  5.33k|        Self {
  660|  5.33k|            buffer_start: 0,
  661|  5.33k|            buffer_end: 0,
  662|  5.33k|            line_count: 0,
  663|  5.33k|            last_line_start: 0,
  664|  5.33k|            last_line_end: 0,
  665|  5.33k|        }
  666|  5.33k|    }
_RNvNtCsbQpZfyiopc4_10sparesults3csv17is_turtle_boolean:
  359|  1.08k|fn is_turtle_boolean(value: &str) -> bool {
  360|  1.08k|    matches!(value, "true" | "false")
  361|  1.08k|}

_RINvMs2_NtCsbQpZfyiopc4_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
   84|    100|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   85|    100|        Self(SyntaxErrorKind::Msg {
   86|    100|            msg: msg.into(),
   87|    100|            location: None,
   88|    100|        })
   89|    100|    }
_RINvMs2_NtCsbQpZfyiopc4_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   84|     53|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   85|     53|        Self(SyntaxErrorKind::Msg {
   86|     53|            msg: msg.into(),
   87|     53|            location: None,
   88|     53|        })
   89|     53|    }
_RINvMs2_NtCsbQpZfyiopc4_10sparesults5errorNtB6_23QueryResultsSyntaxError15located_messageNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
   93|    176|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
   94|    176|        Self(SyntaxErrorKind::Msg {
   95|    176|            msg: msg.into(),
   96|    176|            location: Some(location),
   97|    176|        })
   98|    176|    }
_RNvXs8_NtCsbQpZfyiopc4_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtNtCsc4CYCHgsNRQ_3std2io5error5ErrorE4from:
    7|     17|#[derive(Debug, thiserror::Error)]
_RNvXs9_NtCsbQpZfyiopc4_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_23QueryResultsSyntaxErrorE4from:
    7|  1.35k|#[derive(Debug, thiserror::Error)]

_RNvXs1_NtCsbQpZfyiopc4_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsdPUQuH91pCL_13oxigraph_fuzz:
  309|   165k|    fn next(&mut self) -> Option<Self::Item> {
  310|   165k|        Some(
  311|   165k|            match &mut self.solutions {
  312|      0|                FromReadSolutionsReaderKind::Xml(reader) => reader.read_next(),
  313|      0|                FromReadSolutionsReaderKind::Json(reader) => reader.read_next(),
  314|   165k|                FromReadSolutionsReaderKind::Tsv(reader) => reader.read_next(),
  315|       |            }
  316|   165k|            .transpose()?
  317|   161k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  318|       |        )
  319|   165k|    }
_RNCNvXs1_NtCsbQpZfyiopc4_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdPUQuH91pCL_13oxigraph_fuzz:
  317|   160k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RINvMNtCsbQpZfyiopc4_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECsdPUQuH91pCL_13oxigraph_fuzz:
   83|  5.33k|    pub fn parse_read<R: Read>(
   84|  5.33k|        &self,
   85|  5.33k|        reader: R,
   86|  5.33k|    ) -> Result<FromReadQueryResultsReader<R>, QueryResultsParseError> {
   87|  5.33k|        Ok(match self.format {
   88|      0|            QueryResultsFormat::Xml => match FromReadXmlQueryResultsReader::read(reader)? {
   89|      0|                FromReadXmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                FromReadXmlQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: FromReadSolutionsReaderKind::Xml(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Json => match FromReadJsonQueryResultsReader::read(reader)? {
   99|      0|                FromReadJsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  100|       |                FromReadJsonQueryResultsReader::Solutions {
  101|      0|                    solutions,
  102|      0|                    variables,
  103|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  104|      0|                    variables: variables.into(),
  105|      0|                    solutions: FromReadSolutionsReaderKind::Json(solutions),
  106|      0|                }),
  107|       |            },
  108|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  109|  5.33k|            QueryResultsFormat::Tsv => match FromReadTsvQueryResultsReader::read(reader)? {
  110|      4|                FromReadTsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  111|       |                FromReadTsvQueryResultsReader::Solutions {
  112|  5.17k|                    solutions,
  113|  5.17k|                    variables,
  114|  5.17k|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  115|  5.17k|                    variables: variables.into(),
  116|  5.17k|                    solutions: FromReadSolutionsReaderKind::Tsv(solutions),
  117|  5.17k|                }),
  118|       |            },
  119|       |        })
  120|  5.33k|    }
_RNvMNtCsbQpZfyiopc4_10sparesults6parserNtB2_18QueryResultsParser11from_formatCsdPUQuH91pCL_13oxigraph_fuzz:
   54|  3.35k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   55|  3.35k|        Self { format }
   56|  3.35k|    }

_RNvMs0_NtCsbQpZfyiopc4_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCsdPUQuH91pCL_13oxigraph_fuzz:
  311|  1.97k|    pub fn finish(self) -> io::Result<W> {
  312|  1.97k|        match self.formatter {
  313|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  314|      0|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  315|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  316|  1.97k|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  317|       |        }
  318|  1.97k|    }
_RINvMNtCsbQpZfyiopc4_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsdPUQuH91pCL_13oxigraph_fuzz:
   71|      2|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      2|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      0|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      2|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      2|    }
_RINvMs0_NtCsbQpZfyiopc4_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECsdPUQuH91pCL_13oxigraph_fuzz:
  297|  77.8k|    pub fn write<'a>(
  298|  77.8k|        &mut self,
  299|  77.8k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  300|  77.8k|    ) -> io::Result<()> {
  301|  77.8k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  302|  77.8k|        match &mut self.formatter {
  303|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  304|      0|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  305|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  306|  77.8k|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  307|       |        }
  308|  77.8k|    }
_RNCINvMs0_NtCsbQpZfyiopc4_10sparesults10serializerINtB8_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableRNtNtB21_6triple4TermRNtNtBa_8solution13QuerySolutionE0CsdPUQuH91pCL_13oxigraph_fuzz:
  301|  50.6k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RINvMNtCsbQpZfyiopc4_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECsdPUQuH91pCL_13oxigraph_fuzz:
  142|  1.97k|    pub fn serialize_solutions_to_write<W: Write>(
  143|  1.97k|        &self,
  144|  1.97k|        write: W,
  145|  1.97k|        variables: Vec<Variable>,
  146|  1.97k|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  147|  1.97k|        Ok(ToWriteSolutionsWriter {
  148|  1.97k|            formatter: match self.format {
  149|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  150|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  151|       |                ),
  152|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  153|      0|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  154|       |                ),
  155|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  156|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  157|       |                ),
  158|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  159|  1.97k|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  160|       |                ),
  161|       |            },
  162|       |        })
  163|  1.97k|    }
_RNvMNtCsbQpZfyiopc4_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCsdPUQuH91pCL_13oxigraph_fuzz:
   55|  3.35k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  3.35k|        Self { format }
   57|  3.35k|    }

_RNvXs_NtCsbQpZfyiopc4_10sparesults8solutionNtB4_13QuerySolutionINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtCsjOdcKtOMjJI_5alloc4sync3ArcSNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCsdPUQuH91pCL_13oxigraph_fuzz:
  165|   160k|    fn from((v, s): (V, S)) -> Self {
  166|   160k|        Self {
  167|   160k|            variables: v.into(),
  168|   160k|            values: s.into(),
  169|   160k|        }
  170|   160k|    }
_RNvMNtCsbQpZfyiopc4_10sparesults8solutionNtB2_13QuerySolution9variablesCsdPUQuH91pCL_13oxigraph_fuzz:
  158|  1.91k|    pub fn variables(&self) -> &[Variable] {
  159|  1.91k|        &self.variables
  160|  1.91k|    }
_RNvXs0_NtCsbQpZfyiopc4_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iterCsdPUQuH91pCL_13oxigraph_fuzz:
  178|  77.8k|    fn into_iter(self) -> Self::IntoIter {
  179|  77.8k|        Iter {
  180|  77.8k|            inner: self.variables.iter().zip(&self.values),
  181|  77.8k|        }
  182|  77.8k|    }
_RNvXs9_NtCsbQpZfyiopc4_10sparesults8solutionNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsdPUQuH91pCL_13oxigraph_fuzz:
  285|   128k|    fn next(&mut self) -> Option<Self::Item> {
  286|   155k|        for (variable, value) in &mut self.inner {
  287|  77.6k|            if let Some(value) = value {
  288|  50.6k|                return Some((variable, value));
  289|  26.9k|            }
  290|       |        }
  291|  77.8k|        None
  292|   128k|    }
_RNvXs6_NtCsbQpZfyiopc4_10sparesults8solutionNtB5_13QuerySolutionNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  236|  77.8k|    fn eq(&self, other: &Self) -> bool {
  237|  77.8k|        for (k, v) in self.iter() {
  238|  50.6k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|  50.6k|            }
  241|       |        }
  242|  77.8k|        for (k, v) in other.iter() {
  243|  50.6k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|  50.6k|            }
  246|       |        }
  247|  77.8k|        true
  248|  77.8k|    }
_RNvMNtCsbQpZfyiopc4_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|   155k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|   155k|        self.into_iter()
  114|   155k|    }
_RNvXs0_NtCsbQpZfyiopc4_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|   155k|    fn into_iter(self) -> Self::IntoIter {
  179|   155k|        Iter {
  180|   155k|            inner: self.variables.iter().zip(&self.values),
  181|   155k|        }
  182|   155k|    }
_RNvXs9_NtCsbQpZfyiopc4_10sparesults8solutionNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB7_:
  285|   257k|    fn next(&mut self) -> Option<Self::Item> {
  286|   311k|        for (variable, value) in &mut self.inner {
  287|   155k|            if let Some(value) = value {
  288|   101k|                return Some((variable, value));
  289|  53.9k|            }
  290|       |        }
  291|   155k|        None
  292|   257k|    }
_RNvXsd_NtCsbQpZfyiopc4_10sparesults8solutionRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|   101k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|   101k|        self.as_ref().index(solution)
  332|   101k|    }
_RNvXsc_NtCsbQpZfyiopc4_10sparesults8solutionNtNtCsfX3L9NQpT5I_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|   101k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|   101k|        solution.variables.iter().position(|v| *v == self)
  325|   101k|    }
_RNCNvXsc_NtCsbQpZfyiopc4_10sparesults8solutionNtNtCsfX3L9NQpT5I_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|   102k|        solution.variables.iter().position(|v| *v == self)
_RINvMNtCsbQpZfyiopc4_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCsfX3L9NQpT5I_5oxrdf8variable8VariableEB5_:
   38|   101k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|   101k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|   101k|    }


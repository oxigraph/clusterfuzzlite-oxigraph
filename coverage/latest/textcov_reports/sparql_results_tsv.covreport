_RINvXNtCsaCKCoQQNRcr_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultINtNtCs3OstG5Tqy1X_5alloc3vec3VecNtNtCs1YgEK1oQZBx_10sparesults8solution13QuerySolutionENtNtB1L_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCs3CPTo1gHdsJ_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4h_:
   58|  7.96k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  7.96k|    where
   60|  7.96k|        C: Display + Send + Sync + 'static,
   61|  7.96k|        F: FnOnce() -> C,
   62|  7.96k|    {
   63|  7.96k|        match self {
   64|  7.96k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  7.96k|    }
_RINvXNtCsaCKCoQQNRcr_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultNtNtCs1YgEK1oQZBx_10sparesults6parser27FromSliceQueryResultsReaderNtNtB1e_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2e_E12with_contextNtNtCs3OstG5Tqy1X_5alloc6string6StringNCNvNtCs3CPTo1gHdsJ_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4b_:
   58|  7.96k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  7.96k|    where
   60|  7.96k|        C: Display + Send + Sync + 'static,
   61|  7.96k|        F: FnOnce() -> C,
   62|  7.96k|    {
   63|  7.96k|        match self {
   64|  7.96k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  7.96k|    }

rust_fuzzer_test_input:
  209|  12.2k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  12.2k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  12.2k|                }
  223|  12.2k|
  224|  12.2k|                __libfuzzer_sys_run(bytes);
  225|  12.2k|                0
  226|       |            }
_RNvNvCs4S1CdvKd4Ib_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  12.2k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  12.2k|                $body
  243|  12.2k|            }
LLVMFuzzerTestOneInput:
   58|  12.2k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  12.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  12.2k|    });
   63|  12.2k|
   64|  12.2k|    match test_input {
   65|  12.2k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  12.2k|}
_RNCNvCs1X7YZOQTFWF_13libfuzzer_sys15test_input_wrap0B3_:
   59|  12.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  12.2k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  12.2k|        rust_fuzzer_test_input(data_slice)
   62|  12.2k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs1YgEK1oQZBx_10sparesults:
 1125|  1.50M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.50M|    haystack: &[u8],
 1127|  1.50M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.50M|) -> Option<usize> {
 1129|  1.50M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.50M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.50M|    // a &[u8].
 1132|  1.50M|    let start = haystack.as_ptr();
 1133|  1.50M|    let end = start.add(haystack.len());
 1134|  1.50M|    let found = find_raw(start, end)?;
 1135|  1.47M|    Some(found.distance(start))
 1136|  1.50M|}
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|   106k|    pub(crate) fn needle1(&self) -> u8 {
  118|   106k|        self.s1
  119|   106k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  1.50M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  1.50M|        One { s1: needle, v1: V::splat(needle) }
  113|  1.50M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  1.50M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  1.50M|        One { s1: needle, v1: V::splat(needle) }
  113|  1.50M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  24.9k|    pub(crate) unsafe fn find_raw(
  144|  24.9k|        &self,
  145|  24.9k|        start: *const u8,
  146|  24.9k|        end: *const u8,
  147|  24.9k|    ) -> Option<*const u8> {
  148|  24.9k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  24.9k|        // need to move up to using a u64 for the masks used below. Currently
  150|  24.9k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  24.9k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  24.9k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  24.9k|        let topos = V::Mask::first_offset;
  155|  24.9k|        let len = end.distance(start);
  156|  24.9k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  24.9k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  20.7k|            return Some(cur);
  167|  4.16k|        }
  168|  4.16k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  4.16k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  4.16k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  4.16k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  4.16k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  5.12k|        while cur <= end.sub(V::BYTES) {
  213|  1.37k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  1.37k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    412|                return Some(cur);
  216|    961|            }
  217|    961|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  3.75k|        if cur < end {
  224|  3.63k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  3.63k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  3.63k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  3.63k|            return self.search_chunk(cur, topos);
  228|    118|        }
  229|    118|        None
  230|  24.9k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  1.43M|    pub(crate) unsafe fn find_raw(
  144|  1.43M|        &self,
  145|  1.43M|        start: *const u8,
  146|  1.43M|        end: *const u8,
  147|  1.43M|    ) -> Option<*const u8> {
  148|  1.43M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  1.43M|        // need to move up to using a u64 for the masks used below. Currently
  150|  1.43M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  1.43M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  1.43M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.43M|        let topos = V::Mask::first_offset;
  155|  1.43M|        let len = end.distance(start);
  156|  1.43M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.43M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.23M|            return Some(cur);
  167|   200k|        }
  168|   200k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|   200k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|   200k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|   200k|        if len >= Self::LOOP_SIZE {
  172|   219k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|   216k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|   216k|                let a = V::load_aligned(cur);
  176|   216k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|   216k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|   216k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|   216k|                let eqa = self.v1.cmpeq(a);
  180|   216k|                let eqb = self.v1.cmpeq(b);
  181|   216k|                let eqc = self.v1.cmpeq(c);
  182|   216k|                let eqd = self.v1.cmpeq(d);
  183|   216k|                let or1 = eqa.or(eqb);
  184|   216k|                let or2 = eqc.or(eqd);
  185|   216k|                let or3 = or1.or(or2);
  186|   216k|                if or3.movemask_will_have_non_zero() {
  187|   188k|                    let mask = eqa.movemask();
  188|   188k|                    if mask.has_non_zero() {
  189|  94.9k|                        return Some(cur.add(topos(mask)));
  190|  93.4k|                    }
  191|  93.4k|
  192|  93.4k|                    let mask = eqb.movemask();
  193|  93.4k|                    if mask.has_non_zero() {
  194|  86.6k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  6.79k|                    }
  196|  6.79k|
  197|  6.79k|                    let mask = eqc.movemask();
  198|  6.79k|                    if mask.has_non_zero() {
  199|  4.18k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|  2.61k|                    }
  201|  2.61k|
  202|  2.61k|                    let mask = eqd.movemask();
  203|  2.61k|                    debug_assert!(mask.has_non_zero());
  204|  2.61k|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  27.9k|                }
  206|  27.9k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  9.09k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  20.3k|        while cur <= end.sub(V::BYTES) {
  213|  13.5k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  13.5k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  5.71k|                return Some(cur);
  216|  7.87k|            }
  217|  7.87k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  6.73k|        if cur < end {
  224|  6.59k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  6.59k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  6.59k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  6.59k|            return self.search_chunk(cur, topos);
  228|    138|        }
  229|    138|        None
  230|  1.43M|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  29.9k|    unsafe fn search_chunk(
  417|  29.9k|        &self,
  418|  29.9k|        cur: *const u8,
  419|  29.9k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  29.9k|    ) -> Option<*const u8> {
  421|  29.9k|        let chunk = V::load_unaligned(cur);
  422|  29.9k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  29.9k|        if mask.has_non_zero() {
  424|  23.0k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  6.93k|            None
  427|       |        }
  428|  29.9k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  1.45M|    unsafe fn search_chunk(
  417|  1.45M|        &self,
  418|  1.45M|        cur: *const u8,
  419|  1.45M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  1.45M|    ) -> Option<*const u8> {
  421|  1.45M|        let chunk = V::load_unaligned(cur);
  422|  1.45M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  1.45M|        if mask.has_non_zero() {
  424|  1.24M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   211k|            None
  427|       |        }
  428|  1.45M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  24.4k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  24.4k|    start: *const u8,
 1150|  24.4k|    end: *const u8,
 1151|  24.4k|    confirm: F,
 1152|  24.4k|) -> Option<*const u8> {
 1153|  24.4k|    debug_assert!(start <= end);
 1154|  24.4k|    let mut ptr = start;
 1155|   111k|    while ptr < end {
 1156|   106k|        if confirm(*ptr) {
 1157|  18.9k|            return Some(ptr);
 1158|  87.1k|        }
 1159|  87.1k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  5.48k|    None
 1162|  24.4k|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  1.50M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  1.50M|        One {
   71|  1.50M|            sse2: generic::One::new(needle),
   72|  1.50M|            avx2: generic::One::new(needle),
   73|  1.50M|        }
   74|  1.50M|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  1.50M|    pub unsafe fn find_raw(
  180|  1.50M|        &self,
  181|  1.50M|        start: *const u8,
  182|  1.50M|        end: *const u8,
  183|  1.50M|    ) -> Option<*const u8> {
  184|  1.50M|        if start >= end {
  185|  15.9k|            return None;
  186|  1.48M|        }
  187|  1.48M|        let len = end.distance(start);
  188|  1.48M|        if len < __m256i::BYTES {
  189|  49.3k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  24.4k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  24.4k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  24.9k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  1.43M|        }
  201|  1.43M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  1.43M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  1.43M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  1.43M|        // responsibility.
  205|  1.43M|        //
  206|  1.43M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  1.43M|        // means we'd have to annotate this routine with `target_feature`.
  208|  1.43M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  1.43M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  1.43M|        // The real problem is that a routine with a `target_feature`
  211|  1.43M|        // annotation generally can't be inlined into caller code unless
  212|  1.43M|        // the caller code has the same target feature annotations. Namely,
  213|  1.43M|        // the common case (at time of writing) is for calling code to not
  214|  1.43M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  1.43M|        // `target_feature` on this routine, it can be inlined which will
  216|  1.43M|        // handle some of the short-haystack cases above without touching the
  217|  1.43M|        // architecture specific code.
  218|  1.43M|        self.find_raw_avx2(start, end)
  219|  1.50M|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   106k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   106k|                    b == self.sse2.needle1()
  194|   106k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  24.9k|    unsafe fn find_raw_sse2(
  337|  24.9k|        &self,
  338|  24.9k|        start: *const u8,
  339|  24.9k|        end: *const u8,
  340|  24.9k|    ) -> Option<*const u8> {
  341|  24.9k|        self.sse2.find_raw(start, end)
  342|  24.9k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  1.43M|    unsafe fn find_raw_avx2(
  397|  1.43M|        &self,
  398|  1.43M|        start: *const u8,
  399|  1.43M|        end: *const u8,
  400|  1.43M|    ) -> Option<*const u8> {
  401|  1.43M|        self.avx2.find_raw(start, end)
  402|  1.43M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  1.50M|pub(crate) fn memchr_raw(
  175|  1.50M|    n1: u8,
  176|  1.50M|    start: *const u8,
  177|  1.50M|    end: *const u8,
  178|  1.50M|) -> Option<*const u8> {
  179|  1.50M|    // SAFETY: We provide a valid function pointer type.
  180|  1.50M|    unsafe_ifunc!(
  181|  1.50M|        One,
  182|  1.50M|        find_raw,
  183|  1.50M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  1.50M|        Option<*const u8>,
  185|  1.50M|        start,
  186|  1.50M|        end,
  187|  1.50M|        n1
  188|  1.50M|    )
  189|  1.50M|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  1.50M|        unsafe fn find_avx2(
   79|  1.50M|            $($needle: u8),+,
   80|  1.50M|            $hay_start: *const u8,
   81|  1.50M|            $hay_end: *const u8,
   82|  1.50M|        ) -> $retty {
   83|  1.50M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.50M|            $memchrty::new_unchecked($($needle),+)
   85|  1.50M|                .$memchrfind($hay_start, $hay_end)
   86|  1.50M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  4.42M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  4.42M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  4.42M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  4.42M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   205k|    fn as_usize(self) -> usize {
   27|   205k|        self as usize
   28|   205k|    }

_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs1YgEK1oQZBx_10sparesults:
   27|  1.50M|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  1.50M|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  1.50M|    // pointer between start and end.
   30|  1.50M|    unsafe {
   31|  1.50M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  1.50M|        })
   34|  1.50M|    }
   35|  1.50M|}
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  1.50M|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  1.50M|            memchr_raw(needle, start, end)
   33|  1.50M|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  1.50M|unsafe fn memchr_raw(
  505|  1.50M|    needle: u8,
  506|  1.50M|    start: *const u8,
  507|  1.50M|    end: *const u8,
  508|  1.50M|) -> Option<*const u8> {
  509|  1.50M|    #[cfg(target_arch = "x86_64")]
  510|  1.50M|    {
  511|  1.50M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  1.50M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  1.50M|        // time. This function also handles using a fallback if neither AVX2
  514|  1.50M|        // nor SSE2 (unusual) are available.
  515|  1.50M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  1.50M|    }
  517|  1.50M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  1.50M|    {
  519|  1.50M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  1.50M|    }
  521|  1.50M|    #[cfg(target_arch = "aarch64")]
  522|  1.50M|    {
  523|  1.50M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  1.50M|    }
  525|  1.50M|    #[cfg(not(any(
  526|  1.50M|        target_arch = "x86_64",
  527|  1.50M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  1.50M|        target_arch = "aarch64"
  529|  1.50M|    )))]
  530|  1.50M|    {
  531|  1.50M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  1.50M|    }
  533|  1.50M|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  1.45M|    fn get_for_offset(self) -> u32 {
  127|  1.45M|        #[cfg(target_endian = "big")]
  128|  1.45M|        {
  129|  1.45M|            self.0.swap_bytes()
  130|  1.45M|        }
  131|  1.45M|        #[cfg(target_endian = "little")]
  132|  1.45M|        {
  133|  1.45M|            self.0
  134|  1.45M|        }
  135|  1.45M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  1.45M|    fn first_offset(self) -> usize {
  172|  1.45M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  1.45M|        // the bytes so we are in practice), where the most significant byte
  174|  1.45M|        // is at a higher address. That means the least significant bit that
  175|  1.45M|        // is set corresponds to the position of our first matching byte.
  176|  1.45M|        // That position corresponds to the number of zeros after the least
  177|  1.45M|        // significant bit.
  178|  1.45M|        self.get_for_offset().trailing_zeros() as usize
  179|  1.45M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  1.98M|    fn has_non_zero(self) -> bool {
  147|  1.98M|        self.0 != 0
  148|  1.98M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  29.9k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  29.9k|            _mm_loadu_si128(data as *const __m128i)
  219|  29.9k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  29.9k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  29.9k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  29.9k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  29.9k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  29.9k|            _mm_cmpeq_epi8(self, vector2)
  229|  29.9k|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|   216k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|   216k|        self.movemask().has_non_zero()
   65|   216k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  1.45M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  1.45M|            _mm256_loadu_si256(data as *const __m256i)
  268|  1.45M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  1.96M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  1.96M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  1.96M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  2.32M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  2.32M|            _mm256_cmpeq_epi8(self, vector2)
  278|  2.32M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  1.50M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  1.50M|            _mm_set1_epi8(byte as i8)
  209|  1.50M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  1.50M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  1.50M|            _mm256_set1_epi8(byte as i8)
  258|  1.50M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|   865k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|   865k|            _mm256_load_si256(data as *const __m256i)
  263|   865k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|   649k|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|   649k|            _mm256_or_si256(self, vector2)
  288|   649k|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs1X7YZOQTFWF_13libfuzzer_sys:
   49|  12.2k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  12.2k|        // An `Acquire` load is enough because that makes all the initialization
   51|  12.2k|        // operations visible to us, and, this being a fast path, weaker
   52|  12.2k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  12.2k|        // `SeqCst` operations on the slow path.
   54|  12.2k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  12.2k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs1X7YZOQTFWF_13libfuzzer_sys:
  963|  12.2k|        pub fn get(&self) -> Option<&T> {
  964|  12.2k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  12.2k|                None
  969|       |            }
  970|  12.2k|        }

_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs3p5cISLvx8J_5oxrdf:
  632|   124k|fn parse_langtag(
  633|   124k|    input: &str,
  634|   124k|    output: &mut impl OutputBuffer,
  635|   124k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   124k|    #[derive(PartialEq, Eq)]
  637|   124k|    enum State {
  638|   124k|        Start,
  639|   124k|        AfterLanguage,
  640|   124k|        AfterExtLang,
  641|   124k|        AfterScript,
  642|   124k|        AfterRegion,
  643|   124k|        InExtension { expected: bool },
  644|   124k|        InPrivateUse { expected: bool },
  645|   124k|    }
  646|   124k|
  647|   124k|    let mut state = State::Start;
  648|   124k|    let mut language_end = 0;
  649|   124k|    let mut extlang_end = 0;
  650|   124k|    let mut script_end = 0;
  651|   124k|    let mut region_end = 0;
  652|   124k|    let mut variant_end = 0;
  653|   124k|    let mut extension_end = 0;
  654|   124k|    let mut extlangs_count = 0;
  655|   310k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   310k|        if subtag.is_empty() {
  657|    106|            return Err(LanguageTagParseError {
  658|    106|                kind: TagParseErrorKind::EmptySubtag,
  659|    106|            });
  660|   310k|        }
  661|   310k|        if subtag.len() > 8 {
  662|      2|            return Err(LanguageTagParseError {
  663|      2|                kind: TagParseErrorKind::SubtagTooLong,
  664|      2|            });
  665|   310k|        }
  666|   310k|        if state == State::Start {
  667|       |            // Primary language
  668|   124k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|     29|                return Err(LanguageTagParseError {
  670|     29|                    kind: TagParseErrorKind::InvalidLanguage,
  671|     29|                });
  672|   124k|            }
  673|   124k|            language_end = end;
  674|   124k|            output.extend(to_lowercase(subtag));
  675|   124k|            if subtag.len() < 4 {
  676|  94.3k|                // extlangs are only allowed for short language tags
  677|  94.3k|                state = State::AfterLanguage;
  678|  94.3k|            } else {
  679|  29.9k|                state = State::AfterExtLang;
  680|  29.9k|            }
  681|   185k|        } else if let State::InPrivateUse { .. } = state {
  682|  6.69k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  6.69k|            }
  687|  6.69k|            output.push('-');
  688|  6.69k|            output.extend(to_lowercase(subtag));
  689|  6.69k|            state = State::InPrivateUse { expected: false };
  690|   179k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  6.09k|            if let State::InExtension { expected: true } = state {
  693|      1|                return Err(LanguageTagParseError {
  694|      1|                    kind: TagParseErrorKind::EmptyExtension,
  695|      1|                });
  696|  6.09k|            }
  697|  6.09k|            output.push('-');
  698|  6.09k|            output.push('x');
  699|  6.09k|            state = State::InPrivateUse { expected: true };
  700|   173k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  24.7k|            if let State::InExtension { expected: true } = state {
  703|      9|                return Err(LanguageTagParseError {
  704|      9|                    kind: TagParseErrorKind::EmptyExtension,
  705|      9|                });
  706|  24.7k|            }
  707|  24.7k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  24.7k|            output.push('-');
  709|  24.7k|            output.push(extension_tag);
  710|  24.7k|            state = State::InExtension { expected: true };
  711|   148k|        } else if let State::InExtension { .. } = state {
  712|  36.9k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  36.9k|            }
  717|  36.9k|            extension_end = end;
  718|  36.9k|            output.push('-');
  719|  36.9k|            output.extend(to_lowercase(subtag));
  720|  36.9k|            state = State::InExtension { expected: false };
  721|   111k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  35.7k|            extlangs_count += 1;
  723|  35.7k|            if extlangs_count > 3 {
  724|      1|                return Err(LanguageTagParseError {
  725|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|      1|                });
  727|  35.7k|            }
  728|  35.7k|            // valid extlangs
  729|  35.7k|            extlang_end = end;
  730|  35.7k|            output.push('-');
  731|  35.7k|            output.extend(to_lowercase(subtag));
  732|  75.6k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  54.2k|            && subtag.len() == 4
  734|  12.5k|            && is_alphabetic(subtag)
  735|  12.5k|        {
  736|  12.5k|            // Script
  737|  12.5k|            script_end = end;
  738|  12.5k|            output.push('-');
  739|  12.5k|            output.extend(to_uppercase_first(subtag));
  740|  12.5k|            state = State::AfterScript;
  741|  63.1k|        } else if (state == State::AfterLanguage
  742|  32.4k|            || state == State::AfterExtLang
  743|  21.4k|            || state == State::AfterScript)
  744|  50.3k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  25.3k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  25.0k|        {
  747|  25.0k|            // Region
  748|  25.0k|            region_end = end;
  749|  25.0k|            output.push('-');
  750|  25.0k|            output.extend(to_uppercase(subtag));
  751|  25.0k|            state = State::AfterRegion;
  752|  38.1k|        } else if (state == State::AfterLanguage
  753|  20.9k|            || state == State::AfterExtLang
  754|  16.4k|            || state == State::AfterScript
  755|  12.7k|            || state == State::AfterRegion)
  756|  38.1k|            && is_alphanumeric(subtag)
  757|  38.1k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|     12|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  38.1k|        {
  760|  38.1k|            // Variant
  761|  38.1k|            variant_end = end;
  762|  38.1k|            output.push('-');
  763|  38.1k|            output.extend(to_lowercase(subtag));
  764|  38.1k|            state = State::AfterRegion;
  765|  38.1k|        } else {
  766|     12|            return Err(LanguageTagParseError {
  767|     12|                kind: TagParseErrorKind::InvalidSubtag,
  768|     12|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   124k|    if let State::InExtension { expected: true } = state {
  774|      5|        return Err(LanguageTagParseError {
  775|      5|            kind: TagParseErrorKind::EmptyExtension,
  776|      5|        });
  777|   124k|    }
  778|   124k|    if let State::InPrivateUse { expected: true } = state {
  779|      1|        return Err(LanguageTagParseError {
  780|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|      1|        });
  782|   124k|    }
  783|   124k|
  784|   124k|    //We make sure we have not skipped anyone
  785|   124k|    if extlang_end < language_end {
  786|  99.3k|        extlang_end = language_end;
  787|  99.3k|    }
  788|   124k|    if script_end < extlang_end {
  789|   111k|        script_end = extlang_end;
  790|   111k|    }
  791|   124k|    if region_end < script_end {
  792|  99.1k|        region_end = script_end;
  793|  99.1k|    }
  794|   124k|    if variant_end < region_end {
  795|  98.0k|        variant_end = region_end;
  796|  98.0k|    }
  797|   124k|    if extension_end < variant_end {
  798|   101k|        extension_end = variant_end;
  799|   101k|    }
  800|       |
  801|   124k|    Ok(TagElementsPositions {
  802|   124k|        language_end,
  803|   124k|        extlang_end,
  804|   124k|        script_end,
  805|   124k|        region_end,
  806|   124k|        variant_end,
  807|   124k|        extension_end,
  808|   124k|    })
  809|   124k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs3p5cISLvx8J_5oxrdf:
  587|   128k|fn parse_language_tag(
  588|   128k|    input: &str,
  589|   128k|    output: &mut impl OutputBuffer,
  590|   128k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   128k|    if let Some(tag) = GRANDFATHEREDS
  593|   128k|        .iter()
  594|   128k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   128k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  4.14k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  4.14k|        } else if input.len() == 2 {
  612|      1|            Err(LanguageTagParseError {
  613|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      1|            })
  615|       |        } else {
  616|  4.14k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  4.14k|            Ok(TagElementsPositions {
  618|  4.14k|                language_end: input.len(),
  619|  4.14k|                extlang_end: input.len(),
  620|  4.14k|                script_end: input.len(),
  621|  4.14k|                region_end: input.len(),
  622|  4.14k|                variant_end: input.len(),
  623|  4.14k|                extension_end: input.len(),
  624|  4.14k|            })
  625|       |        }
  626|       |    } else {
  627|   124k|        parse_langtag(input, output)
  628|       |    }
  629|   128k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs3p5cISLvx8J_5oxrdf:
  571|  4.14k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs3p5cISLvx8J_5oxrdf:
  571|   241k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs3p5cISLvx8J_5oxrdf:
  571|  25.0k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs3p5cISLvx8J_5oxrdf:
  571|  12.5k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs3p5cISLvx8J_5oxrdf:
  594|  3.34M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs3p5cISLvx8J_5oxrdf:
   62|   128k|    pub fn into_inner(self) -> T {
   63|   128k|        self.tag
   64|   128k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs3p5cISLvx8J_5oxrdf:
   49|   128k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   128k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   128k|        Ok(Self { tag, positions })
   52|   128k|    }
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCs3p5cISLvx8J_5oxrdf:
  876|      4|fn is_numeric(s: &str) -> bool {
  877|      4|    s.chars().all(|x| x.is_ascii_digit())
  878|      4|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCs3p5cISLvx8J_5oxrdf:
  903|   241k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   241k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   241k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCs3p5cISLvx8J_5oxrdf:
  891|  25.0k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  25.0k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  25.0k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCs3p5cISLvx8J_5oxrdf:
  871|   235k|fn is_alphabetic(s: &str) -> bool {
  872|   235k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   235k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCs3p5cISLvx8J_5oxrdf:
  881|   106k|fn is_alphanumeric(s: &str) -> bool {
  882|   106k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|   106k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCs3p5cISLvx8J_5oxrdf:
  897|  12.5k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  12.5k|    let mut chars = s.chars();
  899|  12.5k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  12.5k|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCs3p5cISLvx8J_5oxrdf:
  886|  4.14k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  4.14k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  4.14k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCs3p5cISLvx8J_5oxrdf:
  850|   124k|    fn new(input: &'a str) -> Self {
  851|   124k|        Self {
  852|   124k|            split: input.split('-'),
  853|   124k|            position: 0,
  854|   124k|        }
  855|   124k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs3p5cISLvx8J_5oxrdf:
  563|   216k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs3p5cISLvx8J_5oxrdf:
  862|   434k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   434k|        let tag = self.split.next()?;
  864|   310k|        let tag_end = self.position + tag.len();
  865|   310k|        self.position = tag_end + 1;
  866|   310k|        Some((tag, tag_end))
  867|   434k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|   627k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|      4|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|   362k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|  61.7k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_Csa9OvQYE6bC8_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs3p5cISLvx8J_5oxrdf:
 1578|    290|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|    290|        Err(IriParseError { kind })
 1580|    290|    }
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs3p5cISLvx8J_5oxrdf:
 1561|  11.3k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs3p5cISLvx8J_5oxrdf:
 1562|  11.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs3p5cISLvx8J_5oxrdf:
  185|   448k|    pub fn into_inner(self) -> T {
  186|   448k|        self.iri
  187|   448k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs3p5cISLvx8J_5oxrdf:
  199|   448k|    pub fn is_absolute(&self) -> bool {
  200|   448k|        self.positions.scheme_end != 0
  201|   448k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs3p5cISLvx8J_5oxrdf:
   58|   449k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   449k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   448k|        Ok(Self { iri, positions })
   61|   449k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs3p5cISLvx8J_5oxrdf:
 1359|   245k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   245k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  16.2k|            let start_position = self.input.position;
 1363|  66.6k|            while let Some(c) = self.input.next() {
 1364|  66.5k|                self.output.push(c);
 1365|  66.5k|                if c == ']' {
 1366|  16.1k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  16.1k|                    if !UNCHECKED {
 1368|  16.1k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      5|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  16.1k|                        }
 1371|      0|                    }
 1372|       |
 1373|  16.1k|                    let c = self.input.next();
 1374|  16.1k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  4.06k|                            self.output.push(':');
 1377|  4.06k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  12.0k|                            self.output_positions.authority_end = self.output.len();
 1381|  12.0k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      7|                        Some(c) => {
 1384|      7|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      7|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  50.3k|                }
 1393|       |            }
 1394|     51|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|     51|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  2.14M|            loop {
 1404|  2.14M|                let c = self.input.next();
 1405|  2.14M|                match c {
 1406|       |                    Some(':') => {
 1407|  22.7k|                        self.output.push(':');
 1408|  22.7k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   206k|                        self.output_positions.authority_end = self.output.len();
 1412|   206k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  1.91M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   245k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs3p5cISLvx8J_5oxrdf:
 1468|   405k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  3.41M|        loop {
 1470|  3.41M|            let c = self.input.next();
 1471|  3.41M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   617k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|   617k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|   617k|                    } else if c == Some('/') {
 1481|   212k|                        self.output.push('/');
 1482|   405k|                    }
 1483|       |
 1484|   617k|                    if c == Some('?') {
 1485|  17.3k|                        self.output_positions.path_end = self.output.len();
 1486|  17.3k|                        self.output.push('?');
 1487|  17.3k|                        return self.parse_query();
 1488|   600k|                    } else if c == Some('#') {
 1489|   204k|                        self.output_positions.path_end = self.output.len();
 1490|   204k|                        self.output_positions.query_end = self.output.len();
 1491|   204k|                        self.output.push('#');
 1492|   204k|                        return self.parse_fragment();
 1493|   395k|                    } else if c.is_none() {
 1494|   183k|                        self.output_positions.path_end = self.output.len();
 1495|   183k|                        self.output_positions.query_end = self.output.len();
 1496|   183k|                        return Ok(());
 1497|   212k|                    }
 1498|       |                }
 1499|  2.79M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   405k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs3p5cISLvx8J_5oxrdf:
 1420|  26.7k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  42.5k|        loop {
 1422|  42.5k|            let c = self.input.next();
 1423|  42.5k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  26.7k|                    self.output_positions.authority_end = self.output.len();
 1426|  26.7k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  15.8k|                Some(c) => {
 1429|  15.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  15.8k|                        self.output.push(c)
 1431|       |                    } else {
 1432|     42|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  26.7k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs3p5cISLvx8J_5oxrdf:
 1558|  11.3k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  11.3k|        let c1 = self.input.next();
 1560|  11.3k|        let c2 = self.input.next();
 1561|  11.3k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  11.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  11.3k|            self.output.push('%');
 1565|  11.3k|            self.output.push(c1.unwrap());
 1566|  11.3k|            self.output.push(c2.unwrap());
 1567|  11.3k|            Ok(())
 1568|       |        } else {
 1569|     38|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|     38|                Some('%'),
 1571|     38|                c1,
 1572|     38|                c2,
 1573|     38|            ]))
 1574|       |        }
 1575|  11.3k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs3p5cISLvx8J_5oxrdf:
 1504|  21.5k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   123k|        while let Some(c) = self.input.next() {
 1506|   101k|            if c == '#' {
 1507|    372|                self.output_positions.query_end = self.output.len();
 1508|    372|                self.output.push('#');
 1509|    372|                return self.parse_fragment();
 1510|       |            } else {
 1511|   101k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  21.1k|        self.output_positions.query_end = self.output.len();
 1515|  21.1k|        Ok(())
 1516|  21.5k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs3p5cISLvx8J_5oxrdf:
 1213|   448k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  1.62M|        loop {
 1215|  1.62M|            let c = self.input.next();
 1216|  1.62M|            match c {
 1217|  1.62M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  1.17M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   448k|                    self.output.push(':');
 1222|   448k|                    self.output_positions.scheme_end = self.output.len();
 1223|   448k|                    self.input_scheme_end = self.input.position;
 1224|   448k|                    return if self.input.starts_with('/') {
 1225|   268k|                        self.input.next();
 1226|   268k|                        self.output.push('/');
 1227|   268k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|   179k|                        self.output_positions.authority_end = self.output.len();
 1230|   179k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|    175|                    self.input = ParserInput {
 1235|    175|                        value: self.iri.chars(),
 1236|    175|                        position: 0,
 1237|    175|                    }; // reset
 1238|    175|                    self.output.clear();
 1239|    175|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   448k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs3p5cISLvx8J_5oxrdf:
 1518|   216k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  1.37M|        while let Some(c) = self.input.next() {
 1520|  1.15M|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|   216k|        Ok(())
 1523|   216k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs3p5cISLvx8J_5oxrdf:
 1256|    857|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|    857|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|    857|            self.output_positions.scheme_end = 0;
 1305|    857|            self.input_scheme_end = 0;
 1306|    857|            if self.input.starts_with('/') {
 1307|    305|                self.input.next();
 1308|    305|                self.output.push('/');
 1309|    305|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|    552|                self.output_positions.authority_end = 0;
 1312|    552|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|    857|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs3p5cISLvx8J_5oxrdf:
 1335|   245k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  2.21M|        loop {
 1338|  2.21M|            let c = self.input.next();
 1339|  2.21M|            match c {
 1340|       |                Some('@') => {
 1341|  7.45k|                    self.output.push('@');
 1342|  7.45k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   237k|                    self.input = ParserInput {
 1346|   237k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   237k|                        position: self.input_scheme_end + 2,
 1348|   237k|                    };
 1349|   237k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   237k|                    return self.parse_host();
 1351|       |                }
 1352|  1.96M|                Some(c) => {
 1353|  1.96M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   245k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs3p5cISLvx8J_5oxrdf:
 1439|   245k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   245k|        match c {
 1441|       |            None => {
 1442|  28.6k|                self.output_positions.path_end = self.output.len();
 1443|  28.6k|                self.output_positions.query_end = self.output.len();
 1444|  28.6k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  4.25k|                self.output_positions.path_end = self.output.len();
 1448|  4.25k|                self.output.push('?');
 1449|  4.25k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  10.9k|                self.output_positions.path_end = self.output.len();
 1453|  10.9k|                self.output_positions.query_end = self.output.len();
 1454|  10.9k|                self.output.push('#');
 1455|  10.9k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|   201k|                self.output.push('/');
 1459|   201k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   245k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs3p5cISLvx8J_5oxrdf:
 1199|   449k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   449k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      4|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      4|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   449k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|    682|            _ => self.parse_relative(),
 1210|       |        }
 1211|   449k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs3p5cISLvx8J_5oxrdf:
 1245|   268k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   268k|        if self.input.starts_with('/') {
 1247|   245k|            self.input.next();
 1248|   245k|            self.output.push('/');
 1249|   245k|            self.parse_authority()
 1250|       |        } else {
 1251|  23.6k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  23.6k|            self.parse_path()
 1253|       |        }
 1254|   268k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs3p5cISLvx8J_5oxrdf:
 1534|  7.83M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  7.83M|        if UNCHECKED || is_url_code_point(c) {
 1536|  7.82M|            self.output.push(c);
 1537|  7.82M|            Ok(())
 1538|  9.71k|        } else if c == '%' {
 1539|  9.59k|            self.read_echar()
 1540|       |        } else {
 1541|    129|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  7.83M|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs3p5cISLvx8J_5oxrdf:
 1546|   101k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   101k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  99.7k|            self.output.push(c);
 1549|  99.7k|            Ok(())
 1550|  1.76k|        } else if c == '%' {
 1551|  1.75k|            self.read_echar()
 1552|       |        } else {
 1553|     14|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   101k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs3p5cISLvx8J_5oxrdf:
 1174|   449k|    fn parse(
 1175|   449k|        iri: &'a str,
 1176|   449k|        base: Option<IriRef<&'a str>>,
 1177|   449k|        output: &'a mut O,
 1178|   449k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   449k|        let mut parser = Self {
 1180|   449k|            iri,
 1181|   449k|            base,
 1182|   449k|            input: ParserInput {
 1183|   449k|                value: iri.chars(),
 1184|   449k|                position: 0,
 1185|   449k|            },
 1186|   449k|            output,
 1187|   449k|            output_positions: IriElementsPositions {
 1188|   449k|                scheme_end: 0,
 1189|   449k|                authority_end: 0,
 1190|   449k|                path_end: 0,
 1191|   449k|                query_end: 0,
 1192|   449k|            },
 1193|   449k|            input_scheme_end: 0,
 1194|   449k|        };
 1195|   449k|        parser.parse_scheme_start()?;
 1196|   448k|        Ok(parser.output_positions)
 1197|   449k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs3p5cISLvx8J_5oxrdf:
  665|   448k|    pub fn into_inner(self) -> T {
  666|   448k|        self.0.into_inner()
  667|   448k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs3p5cISLvx8J_5oxrdf:
  556|   449k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   449k|        IriRef::parse(iri)?.try_into()
  558|   449k|    }
_RNvXsV_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs3p5cISLvx8J_5oxrdf:
  968|   448k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   448k|        if iri.is_absolute() {
  970|   448k|            Ok(Self(iri))
  971|       |        } else {
  972|    641|            Err(IriParseError {
  973|    641|                kind: IriParseErrorKind::NoScheme,
  974|    641|            })
  975|       |        }
  976|   448k|    }
_RNvCsa9OvQYE6bC8_5oxiri17is_url_code_pointCs3p5cISLvx8J_5oxrdf:
 1584|  7.93M|fn is_url_code_point(c: char) -> bool {
 1585|  7.93M|    matches!(c,
 1586|  4.82M|        'a'..='z'
 1587|  1.00M|        | 'A'..='Z'
 1588|  1.49M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  80.4k|        | '\u{A0}'..='\u{D7FF}'
 1609|  11.7k|        | '\u{F900}'..='\u{FDCF}'
 1610|  11.7k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  11.7k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  11.7k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  11.7k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  11.7k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  11.4k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  11.4k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  11.4k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  11.4k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  11.4k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  11.4k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  11.4k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  11.4k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|    295|        | '\u{D0000}'..='\u{DFFFD}'
 1624|    180|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  7.93M|}
_RNvCsa9OvQYE6bC8_5oxiri23is_url_query_code_pointCs3p5cISLvx8J_5oxrdf:
 1629|   101k|fn is_url_query_code_point(c: char) -> bool {
 1630|   101k|    is_url_code_point(c)
 1631|  1.89k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   101k|}
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput11starts_withCs3p5cISLvx8J_5oxrdf:
 1156|   963k|    fn starts_with(&self, c: char) -> bool {
 1157|   963k|        self.value.as_str().starts_with(c)
 1158|   963k|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput4nextCs3p5cISLvx8J_5oxrdf:
 1141|  11.5M|    fn next(&mut self) -> Option<char> {
 1142|  11.5M|        if let Some(head) = self.value.next() {
 1143|  11.0M|            self.position += head.len_utf8();
 1144|  11.0M|            Some(head)
 1145|       |        } else {
 1146|   469k|            None
 1147|       |        }
 1148|  11.5M|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput5frontCs3p5cISLvx8J_5oxrdf:
 1151|   449k|    fn front(&self) -> Option<char> {
 1152|   449k|        self.value.clone().next()
 1153|   449k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs3p5cISLvx8J_5oxrdf:
 1092|  1.79M|    fn len(&self) -> usize {
 1093|  1.79M|        self.len
 1094|  1.79M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs3p5cISLvx8J_5oxrdf:
 1072|  10.8M|    fn push(&mut self, c: char) {
 1073|  10.8M|        self.len += c.len_utf8();
 1074|  10.8M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs3p5cISLvx8J_5oxrdf:
 1082|    175|    fn clear(&mut self) {
 1083|    175|        self.len = 0;
 1084|    175|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs3p5cISLvx8J_5oxrdf:
 1097|  1.23M|    fn as_str(&self) -> &str {
 1098|  1.23M|        ""
 1099|  1.23M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs3p5cISLvx8J_5oxrdf:
 1087|   237k|    fn truncate(&mut self, new_len: usize) {
 1088|   237k|        self.len = new_len;
 1089|   237k|    }

_RNvXNtCsbKi22XIyKFN_9thiserror7displayRNtNtCs3p5cISLvx8J_5oxrdf8variable22VariableNameParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|     17|    fn as_display(&'a self) -> Self::Target {
   20|     17|        *self
   21|     17|    }
_RNvXNtCsbKi22XIyKFN_9thiserror7displayRNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB2_9AsDisplay10as_displayCs3p5cISLvx8J_5oxrdf:
   19|     17|    fn as_display(&'a self) -> Self::Target {
   20|     17|        *self
   21|     17|    }
_RNvXNtCsbKi22XIyKFN_9thiserror7displayRReNtB2_9AsDisplay10as_displayCsiRLuTB3MD7C_12oxsdatatypes:
   19|    110|    fn as_display(&'a self) -> Self::Target {
   20|    110|        *self
   21|    110|    }

_RNvNtCs3CPTo1gHdsJ_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  12.2k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  12.2k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|    216|        return;
    9|       |    };
   10|  12.0k|    match reader {
   11|  12.0k|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|  12.0k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|  4.10k|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|  7.96k|            let mut writer = QueryResultsSerializer::from_format(format)
   18|  7.96k|                .serialize_solutions_to_write(
   19|  7.96k|                    Vec::new(),
   20|  7.96k|                    solutions
   21|  7.96k|                        .first()
   22|  7.96k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|  7.96k|                )
   24|  7.96k|                .unwrap();
   25|   718k|            for solution in &solutions {
   26|   710k|                writer.write(solution).unwrap();
   27|   710k|            }
   28|  7.96k|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|  7.96k|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|  7.96k|                QueryResultsParser::from_format(format)
   33|  7.96k|                    .parse_slice(&serialized)
   34|  7.96k|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|  7.96k|                    .unwrap()
   36|       |            {
   37|  7.96k|                assert_eq!(
   38|  7.96k|                    roundtrip_solutions
   39|  7.96k|                        .collect::<Result<Vec<_>, _>>()
   40|  7.96k|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|  7.96k|                        .unwrap(),
   42|  7.96k|                    solutions
   43|  7.96k|                )
   44|      0|            }
   45|       |        }
   46|      7|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      7|            // We try to write again
   48|      7|            let mut serialized = Vec::new();
   49|      7|            QueryResultsSerializer::from_format(format)
   50|      7|                .serialize_boolean_to_write(&mut serialized, value)
   51|      7|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      7|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      7|                QueryResultsParser::from_format(format)
   56|      7|                    .parse_slice(&serialized)
   57|      7|                    .unwrap()
   58|       |            {
   59|      7|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  12.2k|}
_RNCNvNtCs3CPTo1gHdsJ_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|  7.89k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs3CPTo1gHdsJ_13oxigraph_fuzz:
   88|  98.6k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  98.6k|        BlankNodeRef(match &self.0 {
   90|  35.6k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  63.0k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  63.0k|                id: *id,
   93|  63.0k|                str: str.as_str(),
   94|  63.0k|            },
   95|       |        })
   96|  98.6k|    }
_RNvMs1_NtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs3CPTo1gHdsJ_13oxigraph_fuzz:
  179|  98.6k|    pub const fn as_str(self) -> &'a str {
  180|  98.6k|        match self.0 {
  181|  35.6k|            BlankNodeRefContent::Named(id) => id,
  182|  63.0k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|  98.6k|    }
_RNvMs7_NtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs3CPTo1gHdsJ_13oxigraph_fuzz:
  265|  63.0k|    fn as_str(&self) -> &str {
  266|  63.0k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  63.0k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  63.0k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|   200k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|   200k|        let id = id.into();
   38|   200k|        validate_blank_node_identifier(&id)?;
   39|   200k|        Ok(Self::new_unchecked(id))
   40|   200k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|   200k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   200k|        let id = id.into();
   51|   200k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   127k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  73.1k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   200k|    }
_RNCNvMs7_NtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   950k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   127k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   127k|        Self(BlankNodeContent::Anonymous {
   64|   127k|            id: id.to_ne_bytes(),
   65|   127k|            str: IdStr::new(id),
   66|   127k|        })
   67|   127k|    }
_RNvMs7_NtCs3p5cISLvx8J_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   127k|    fn new(id: u128) -> Self {
  259|   127k|        let mut str = [0; 32];
  260|   127k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   127k|        Self(str)
  262|   127k|    }
_RNvNtCs3p5cISLvx8J_5oxrdf10blank_node30validate_blank_node_identifier:
  271|   200k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|   200k|    let mut chars = id.chars();
  273|   200k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|   200k|    match front {
  275|   200k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  34.2k|        | 'A'..='Z'
  279|  27.8k|        | 'a'..='z'
  280|  12.2k|        | '\u{00C0}'..='\u{00D6}'
  281|  12.2k|        | '\u{00D8}'..='\u{00F6}'
  282|  12.2k|        | '\u{00F8}'..='\u{02FF}'
  283|  12.1k|        | '\u{0370}'..='\u{037D}'
  284|  12.1k|        | '\u{037F}'..='\u{1FFF}'
  285|  4.13k|        | '\u{200C}'..='\u{200D}'
  286|  4.13k|        | '\u{2070}'..='\u{218F}'
  287|  4.06k|        | '\u{2C00}'..='\u{2FEF}'
  288|  4.06k|        | '\u{3001}'..='\u{D7FF}'
  289|  3.90k|        | '\u{F900}'..='\u{FDCF}'
  290|  3.90k|        | '\u{FDF0}'..='\u{FFFD}'
  291|   200k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|      4|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|  2.17M|    for c in chars {
  295|  1.97M|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|  1.94M|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  19.9k|            | '\u{0300}'..='\u{036F}'
  301|  6.80k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|   236k|            | 'A'..='Z'
  305|   156k|            | 'a'..='z'
  306|  20.0k|            | '\u{00C0}'..='\u{00D6}'
  307|  20.0k|            | '\u{00D8}'..='\u{00F6}'
  308|  20.0k|            | '\u{00F8}'..='\u{02FF}'
  309|  19.9k|            | '\u{0370}'..='\u{037D}'
  310|  19.9k|            | '\u{037F}'..='\u{1FFF}'
  311|  6.80k|            | '\u{200C}'..='\u{200D}'
  312|  6.80k|            | '\u{2070}'..='\u{218F}'
  313|  6.71k|            | '\u{2C00}'..='\u{2FEF}'
  314|  6.71k|            | '\u{3001}'..='\u{D7FF}'
  315|  6.47k|            | '\u{F900}'..='\u{FDCF}'
  316|  6.47k|            | '\u{FDF0}'..='\u{FFFD}'
  317|  1.97M|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|      9|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|   200k|    if id.ends_with('.') {
  324|      5|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|   200k|        Ok(())
  327|       |    }
  328|   200k|}
_RNvNtCs3p5cISLvx8J_5oxrdf10blank_node13to_integer_idB3_:
  331|   200k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   200k|    let digits = id.as_bytes();
  333|   200k|    let mut value: u128 = 0;
  334|   200k|    if let None | Some(b'0') = digits.first() {
  335|  11.1k|        return None; // No empty string or leading zeros
  336|   189k|    }
  337|  2.12M|    for digit in digits {
  338|  1.99M|        value = value.checked_mul(16)?.checked_add(
  339|  1.99M|            match *digit {
  340|  1.99M|                b'0'..=b'9' => digit - b'0',
  341|   160k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  58.0k|                _ => return None,
  343|       |            }
  344|  1.93M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   127k|    Some(value)
  348|   200k|}

_RNvMNtCs3p5cISLvx8J_5oxrdf7literalNtB2_7Literal6as_refCs3CPTo1gHdsJ_13oxigraph_fuzz:
  129|   369k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   369k|        LiteralRef(match &self.0 {
  131|  8.88k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  56.2k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  56.2k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   304k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   304k|                value,
  137|   304k|                datatype: datatype.as_ref(),
  138|   304k|            },
  139|       |        })
  140|   369k|    }
_RNvMst_NtCs3p5cISLvx8J_5oxrdf7literalNtB5_10LiteralRef5valueCs3CPTo1gHdsJ_13oxigraph_fuzz:
  488|   369k|    pub const fn value(self) -> &'a str {
  489|   369k|        match self.0 {
  490|  8.88k|            LiteralRefContent::String(value)
  491|  56.2k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|   369k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|   369k|        }
  494|   369k|    }
_RNvMst_NtCs3p5cISLvx8J_5oxrdf7literalNtB5_10LiteralRef8datatypeCs3CPTo1gHdsJ_13oxigraph_fuzz:
  513|   313k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|   313k|        match self.0 {
  515|  8.88k|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|   304k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|   313k|    }
_RNvMst_NtCs3p5cISLvx8J_5oxrdf7literalNtB5_10LiteralRef8languageCs3CPTo1gHdsJ_13oxigraph_fuzz:
  501|   369k|    pub const fn language(self) -> Option<&'a str> {
  502|   369k|        match self.0 {
  503|  56.2k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|   313k|            _ => None,
  505|       |        }
  506|   369k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  17.8k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  17.8k|        Self(LiteralContent::String(value.into()))
   49|  17.8k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|   195k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   195k|        let value = value.into();
   55|   195k|        let datatype = datatype.into();
   56|   195k|        Self(if datatype == xsd::STRING {
   57|    634|            LiteralContent::String(value)
   58|       |        } else {
   59|   195k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   195k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   439k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   439k|        let value = value.into();
   55|   439k|        let datatype = datatype.into();
   56|   439k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   439k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   439k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringReEB5_:
   65|   128k|    pub fn new_language_tagged_literal(
   66|   128k|        value: impl Into<String>,
   67|   128k|        language: impl Into<String>,
   68|   128k|    ) -> Result<Self, LanguageTagParseError> {
   69|   128k|        let mut language = language.into();
   70|   128k|        language.make_ascii_lowercase();
   71|   128k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|   128k|            value,
   73|   128k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|   128k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|   128k|    pub fn new_language_tagged_literal_unchecked(
   86|   128k|        value: impl Into<String>,
   87|   128k|        language: impl Into<String>,
   88|   128k|    ) -> Self {
   89|   128k|        Self(LiteralContent::LanguageTaggedString {
   90|   128k|            value: value.into(),
   91|   128k|            language: language.into(),
   92|   128k|        })
   93|   128k|    }

_RNvMNtCs3p5cISLvx8J_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs3CPTo1gHdsJ_13oxigraph_fuzz:
   54|   404k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   404k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   404k|    }
_RNvMs4_NtCs3p5cISLvx8J_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs3CPTo1gHdsJ_13oxigraph_fuzz:
  128|   404k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   404k|        Self { iri }
  130|   404k|    }
_RNvMs4_NtCs3p5cISLvx8J_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs3CPTo1gHdsJ_13oxigraph_fuzz:
  133|   272k|    pub const fn as_str(self) -> &'a str {
  134|   272k|        self.iri
  135|   272k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|   449k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|   449k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|   449k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   448k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   448k|        Self { iri: iri.into() }
   41|   448k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   439k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   439k|        Self { iri: iri.into() }
   41|   439k|    }
_RNvMNtCs3p5cISLvx8J_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|   448k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|   448k|        Self::new_unchecked(iri.into_inner())
   31|   448k|    }
_RNvMNtCs3p5cISLvx8J_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   635k|    pub fn as_str(&self) -> &str {
   45|   635k|        self.iri.as_str()
   46|   635k|    }
_RNvMs4_NtCs3p5cISLvx8J_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   635k|    pub const fn as_str(self) -> &'a str {
  134|   635k|        self.iri
  135|   635k|    }
_RNvMs4_NtCs3p5cISLvx8J_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   439k|    pub fn into_owned(self) -> NamedNode {
  139|   439k|        NamedNode::new_unchecked(self.iri)
  140|   439k|    }
_RNvXs6_NtCs3p5cISLvx8J_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   439k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   439k|        node.into_owned()
  154|   439k|    }
_RNvXs9_NtCs3p5cISLvx8J_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   635k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   635k|        self.as_str() == other.as_str()
  175|   635k|    }

_RNCNvXs2_NtCs3p5cISLvx8J_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str0B9_:
  159|     17|        Self::new(&s[1..]).map_err(|error| {
  160|     17|            TermParseError(TermParseErrorKind::Variable {
  161|     17|                value: s.to_owned(),
  162|     17|                error,
  163|     17|            })
  164|     17|        })
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser15read_named_node0B5_:
  173|    389|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser15read_named_nodes_0B5_:
  176|    931|        let term = NamedNode::new(value).map_err(|error| {
  177|    931|            TermParseError(TermParseErrorKind::Iri {
  178|    931|                value: value.to_owned(),
  179|    931|                error,
  180|    931|            })
  181|    931|        })?;
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser15read_blank_node0B5_:
  194|  2.20M|            .find(|v: char| {
  195|  2.20M|                v.is_whitespace()
  196|  2.18M|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  197|  2.20M|            })
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser15read_blank_nodes_0B5_:
  200|     94|        let term = BlankNode::new(value).map_err(|error| {
  201|     94|            TermParseError(TermParseErrorKind::BlankNode {
  202|     94|                value: value.to_owned(),
  203|     94|                error,
  204|     94|            })
  205|     94|        })?;
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser12read_literal0B5_:
  225|  1.21M|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser12read_literals_0B5_:
  230|    167|                                |error| {
  231|    167|                                    TermParseError(TermParseErrorKind::LanguageTag {
  232|    167|                                        value: language.to_owned(),
  233|    167|                                        error,
  234|    167|                                    })
  235|    167|                                },
_RNCNvNtCs3p5cISLvx8J_5oxrdf6parser14read_hexa_char0B5_:
  410|     30|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNvNtCs3p5cISLvx8J_5oxrdf6parser15read_named_node:
  168|   449k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  169|   449k|    let s = s.trim();
  170|   449k|    if let Some(remain) = s.strip_prefix('<') {
  171|   449k|        let end = remain
  172|   449k|            .find('>')
  173|   449k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  174|   449k|        let (value, remain) = remain.split_at(end);
  175|   449k|        let remain = &remain[1..];
  176|   449k|        let term = NamedNode::new(value).map_err(|error| {
  177|       |            TermParseError(TermParseErrorKind::Iri {
  178|       |                value: value.to_owned(),
  179|       |                error,
  180|       |            })
  181|   449k|        })?;
  182|   448k|        Ok((term, remain))
  183|       |    } else {
  184|    169|        Err(TermParseError::msg(
  185|    169|            "Named node serialization should start with a <",
  186|    169|        ))
  187|       |    }
  188|   449k|}
_RNvNtCs3p5cISLvx8J_5oxrdf6parser15read_blank_node:
  190|   200k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  191|   200k|    let s = s.trim();
  192|   200k|    if let Some(remain) = s.strip_prefix("_:") {
  193|   200k|        let end = remain
  194|   200k|            .find(|v: char| {
  195|       |                v.is_whitespace()
  196|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  197|   200k|            })
  198|   200k|            .unwrap_or(remain.len());
  199|   200k|        let (value, remain) = remain.split_at(end);
  200|   200k|        let term = BlankNode::new(value).map_err(|error| {
  201|       |            TermParseError(TermParseErrorKind::BlankNode {
  202|       |                value: value.to_owned(),
  203|       |                error,
  204|       |            })
  205|   200k|        })?;
  206|   200k|        Ok((term, remain))
  207|       |    } else {
  208|     19|        Err(TermParseError::msg(
  209|     19|            "Blank node serialization should start with '_:'",
  210|     19|        ))
  211|       |    }
  212|   200k|}
_RNvNtCs3p5cISLvx8J_5oxrdf6parser12read_literal:
  214|   782k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  215|   782k|    let s = s.trim();
  216|   782k|    if let Some(s) = s.strip_prefix('"') {
  217|   342k|        let mut value = String::with_capacity(s.len());
  218|   342k|        let mut chars = s.chars();
  219|  3.46M|        while let Some(c) = chars.next() {
  220|  3.46M|            match c {
  221|       |                '"' => {
  222|   342k|                    let remain = chars.as_str();
  223|   342k|                    return if let Some(remain) = remain.strip_prefix('@') {
  224|   128k|                        let end = remain
  225|   128k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  226|   128k|                            .unwrap_or(remain.len());
  227|   128k|                        let (language, remain) = remain.split_at(end);
  228|   128k|                        Ok((
  229|   128k|                            Literal::new_language_tagged_literal(value, language).map_err(
  230|   128k|                                |error| {
  231|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  232|       |                                        value: language.to_owned(),
  233|       |                                        error,
  234|       |                                    })
  235|   128k|                                },
  236|   128k|                            )?,
  237|   128k|                            remain,
  238|       |                        ))
  239|   213k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  240|   195k|                        let (datatype, remain) = read_named_node(remain)?;
  241|   195k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  242|       |                    } else {
  243|  17.8k|                        Ok((Literal::new_simple_literal(value), remain))
  244|       |                    };
  245|       |                }
  246|       |                '\\' => {
  247|  66.3k|                    if let Some(c) = chars.next() {
  248|  66.3k|                        value.push(match c {
  249|  3.80k|                            't' => '\t',
  250|  2.47k|                            'b' => '\u{08}',
  251|  7.62k|                            'n' => '\n',
  252|  5.75k|                            'r' => '\r',
  253|  2.50k|                            'f' => '\u{0C}',
  254|  12.2k|                            '"' => '"',
  255|    706|                            '\'' => '\'',
  256|  16.7k|                            '\\' => '\\',
  257|  11.8k|                            'u' => read_hexa_char(&mut chars, 4)?,
  258|  2.65k|                            'U' => read_hexa_char(&mut chars, 8)?,
  259|     30|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  260|       |                        })
  261|       |                    } else {
  262|      6|                        return Err(TermParseError::msg("Unexpected literal end"));
  263|       |                    }
  264|       |                }
  265|  3.06M|                _ => value.push(c),
  266|       |            }
  267|       |        }
  268|    104|        Err(TermParseError::msg("Unexpected literal end"))
  269|   440k|    } else if let Some(remain) = s.strip_prefix("true") {
  270|  14.2k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  271|   426k|    } else if let Some(remain) = s.strip_prefix("false") {
  272|  14.1k|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  273|       |    } else {
  274|   411k|        let input = s.as_bytes();
  275|   411k|        if input.is_empty() {
  276|    145|            return Err(TermParseError::msg("Empty term serialization"));
  277|   411k|        }
  278|       |
  279|   411k|        let mut cursor = match input.first() {
  280|  74.1k|            Some(b'+' | b'-') => 1,
  281|   337k|            _ => 0,
  282|       |        };
  283|   411k|        let mut with_dot = false;
  284|   411k|
  285|   411k|        let mut count_before: usize = 0;
  286|  1.01M|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  287|   603k|            count_before += 1;
  288|   603k|            cursor += 1;
  289|   603k|        }
  290|       |
  291|   411k|        let mut count_after: usize = 0;
  292|   411k|        if cursor < input.len() && input[cursor] == b'.' {
  293|   122k|            with_dot = true;
  294|   122k|            cursor += 1;
  295|   321k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  296|   199k|                count_after += 1;
  297|   199k|                cursor += 1;
  298|   199k|            }
  299|   289k|        }
  300|       |
  301|   411k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  302|   164k|            cursor += 1;
  303|   164k|            cursor += match input.get(cursor) {
  304|  2.33k|                Some(b'+' | b'-') => 1,
  305|   162k|                _ => 0,
  306|       |            };
  307|   164k|            let mut count_exponent = 0;
  308|   524k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  309|   359k|                count_exponent += 1;
  310|   359k|                cursor += 1;
  311|   359k|            }
  312|   164k|            if count_exponent > 0 {
  313|   164k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  314|       |            } else {
  315|     11|                Err(TermParseError::msg(
  316|     11|                    "Double serialization with an invalid exponent",
  317|     11|                ))
  318|       |            }
  319|   247k|        } else if with_dot {
  320|  86.0k|            if count_after > 0 {
  321|  85.9k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  322|       |            } else {
  323|     47|                Err(TermParseError::msg(
  324|     47|                    "Decimal serialization without floating part",
  325|     47|                ))
  326|       |            }
  327|   161k|        } else if count_before > 0 {
  328|   161k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  329|       |        } else {
  330|    281|            Err(TermParseError::msg("Empty integer serialization"))
  331|       |        }
  332|       |    }
  333|   782k|}
_RNvNtCs3p5cISLvx8J_5oxrdf6parser9read_term:
  335|  1.26M|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  336|  1.26M|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  337|      4|        return Err(TermParseError::msg(
  338|      4|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  339|      4|        ));
  340|  1.26M|    }
  341|  1.26M|    let s = s.trim();
  342|       |    #[allow(unused_variables)]
  343|  1.26M|    if let Some(remain) = s.strip_prefix("<<") {
  344|       |        #[cfg(feature = "rdf-star")]
  345|       |        {
  346|   135k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  347|   110k|            let (predicate, remain) = read_named_node(remain)?;
  348|   109k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  349|  92.7k|            let remain = remain.trim_start();
  350|  92.7k|            if let Some(remain) = remain.strip_prefix(">>") {
  351|       |                Ok((
  352|       |                    Triple {
  353|  91.8k|                        subject: match subject {
  354|  38.0k|                            Term::NamedNode(s) => s.into(),
  355|  15.0k|                            Term::BlankNode(s) => s.into(),
  356|       |                            Term::Literal(_) => {
  357|      1|                                return Err(TermParseError::msg(
  358|      1|                                    "Literals are not allowed in subject position",
  359|      1|                                ));
  360|       |                            }
  361|  38.7k|                            Term::Triple(s) => Subject::Triple(s),
  362|       |                        },
  363|  91.8k|                        predicate,
  364|  91.8k|                        object,
  365|  91.8k|                    }
  366|  91.8k|                    .into(),
  367|  91.8k|                    remain,
  368|       |                ))
  369|       |            } else {
  370|    920|                Err(TermParseError::msg(
  371|    920|                    "Nested triple serialization should be enclosed between << and >>",
  372|    920|                ))
  373|       |            }
  374|       |        }
  375|       |        #[cfg(not(feature = "rdf-star"))]
  376|       |        {
  377|       |            Err(TermParseError::msg("RDF-star is not supported"))
  378|       |        }
  379|  1.12M|    } else if s.starts_with('<') {
  380|   143k|        let (term, remain) = read_named_node(s)?;
  381|   142k|        Ok((term.into(), remain))
  382|   983k|    } else if s.starts_with('_') {
  383|   200k|        let (term, remain) = read_blank_node(s)?;
  384|   200k|        Ok((term.into(), remain))
  385|       |    } else {
  386|   782k|        let (term, remain) = read_literal(s)?;
  387|   781k|        Ok((term.into(), remain))
  388|       |    }
  389|  1.26M|}
_RNvNtCs3p5cISLvx8J_5oxrdf6parser14read_hexa_char:
  391|  14.4k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  392|  14.4k|    let mut value = 0;
  393|  14.4k|    for _ in 0..len {
  394|  68.1k|        if let Some(c) = input.next() {
  395|  68.0k|            value = value * 16
  396|  68.0k|                + match c {
  397|  68.0k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  398|  12.4k|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  399|  10.0k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  400|       |                    _ => {
  401|     93|                        return Err(TermParseError::msg(
  402|     93|                            "Unexpected character in a unicode escape",
  403|     93|                        ));
  404|       |                    }
  405|       |                }
  406|       |        } else {
  407|     52|            return Err(TermParseError::msg("Unexpected literal string end"));
  408|       |        }
  409|       |    }
  410|  14.3k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  411|  14.4k|}
_RNvMs3_NtCs3p5cISLvx8J_5oxrdf6parserNtB5_14TermParseError3msg:
  443|  2.74k|    pub(crate) fn msg(msg: &'static str) -> Self {
  444|  2.74k|        Self(TermParseErrorKind::Msg(msg))
  445|  2.74k|    }
_RNvXs6_NtCs3p5cISLvx8J_5oxrdf6parserNtB5_14TermParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  414|    127|#[derive(Debug, thiserror::Error)]
_RNvXsa_NtCs3p5cISLvx8J_5oxrdf6parserNtB5_18TermParseErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  419|    127|#[derive(Debug, thiserror::Error)]
_RNvXs2_NtCs3p5cISLvx8J_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  153|  17.7k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  154|  17.7k|        if !s.starts_with('?') && !s.starts_with('$') {
  155|    110|            return Err(Self::Err::msg(
  156|    110|                "Variable serialization should start with ? or $",
  157|    110|            ));
  158|  17.6k|        }
  159|  17.6k|        Self::new(&s[1..]).map_err(|error| {
  160|       |            TermParseError(TermParseErrorKind::Variable {
  161|       |                value: s.to_owned(),
  162|       |                error,
  163|       |            })
  164|  17.6k|        })
  165|  17.7k|    }
_RNvXs1_NtCs3p5cISLvx8J_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  130|  1.01M|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  131|  1.01M|        let (term, left) = read_term(s, 0)?;
  132|  1.01M|        if !left.is_empty() {
  133|    334|            return Err(Self::Err::msg("Invalid term serialization"));
  134|  1.01M|        }
  135|  1.01M|        Ok(term)
  136|  1.01M|    }

_RNvMsc_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7Subject6as_refCs3CPTo1gHdsJ_13oxigraph_fuzz:
  181|  37.5k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  37.5k|        match self {
  183|  15.1k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  7.29k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  15.0k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  37.5k|    }
_RNvMsy_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_4Term6as_refCs3CPTo1gHdsJ_13oxigraph_fuzz:
  417|   530k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   530k|        match self {
  419|  47.2k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  91.4k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   369k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  22.4k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   530k|    }
_RNvXs13_NtCs3p5cISLvx8J_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_7SubjectE4fromCs3CPTo1gHdsJ_13oxigraph_fuzz:
  744|  37.5k|    fn from(node: &'a Subject) -> Self {
  745|  37.5k|        node.as_ref().into()
  746|  37.5k|    }
_RNvXs14_NtCs3p5cISLvx8J_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4TermE4fromCs3CPTo1gHdsJ_13oxigraph_fuzz:
  751|   530k|    fn from(node: &'a Term) -> Self {
  752|   530k|        node.as_ref()
  753|   530k|    }
_RNvXsU_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCs3CPTo1gHdsJ_13oxigraph_fuzz:
  672|  37.5k|    fn from(node: &'a NamedNode) -> Self {
  673|  37.5k|        node.as_ref().into()
  674|  37.5k|    }
_RNvXs12_NtCs3p5cISLvx8J_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtB6_10SubjectRefE4fromCs1YgEK1oQZBx_10sparesults:
  732|  37.5k|    fn from(node: SubjectRef<'a>) -> Self {
  733|  37.5k|        match node {
  734|  15.1k|            SubjectRef::NamedNode(node) => node.into(),
  735|  7.29k|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|  15.0k|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  37.5k|    }
_RNvXsT_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs1YgEK1oQZBx_10sparesults:
  665|   225k|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|   225k|        Self::NamedNode(node)
  667|   225k|    }
_RNvXsV_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs1YgEK1oQZBx_10sparesults:
  679|  7.29k|    fn from(node: BlankNodeRef<'a>) -> Self {
  680|  7.29k|        Self::BlankNode(node)
  681|  7.29k|    }
_RNvXsZ_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_6TripleE4fromCs1YgEK1oQZBx_10sparesults:
  708|  15.0k|    fn from(node: &'a Triple) -> Self {
  709|  15.0k|        Self::Triple(node)
  710|  15.0k|    }
_RNvXse_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  38.0k|    fn from(node: NamedNode) -> Self {
  201|  38.0k|        Self::NamedNode(node)
  202|  38.0k|    }
_RNvXsg_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  15.0k|    fn from(node: BlankNode) -> Self {
  215|  15.0k|        Self::BlankNode(node)
  216|  15.0k|    }
_RNvXsA_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   142k|    fn from(node: NamedNode) -> Self {
  438|   142k|        Self::NamedNode(node)
  439|   142k|    }
_RNvXsC_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   200k|    fn from(node: BlankNode) -> Self {
  452|   200k|        Self::BlankNode(node)
  453|   200k|    }
_RNvXsE_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   781k|    fn from(literal: Literal) -> Self {
  466|   781k|        Self::Literal(literal)
  467|   781k|    }
_RNvXsG_NtCs3p5cISLvx8J_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  91.8k|    fn from(triple: Triple) -> Self {
  481|  91.8k|        Self::Triple(Box::new(triple))
  482|  91.8k|    }

_RNvMNtCs3p5cISLvx8J_5oxrdf8variableNtB2_8Variable6as_refCs3CPTo1gHdsJ_13oxigraph_fuzz:
   50|   989k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|   989k|        VariableRef { name: &self.name }
   52|   989k|    }
_RNvXs2_NtCs3p5cISLvx8J_5oxrdf8variableNtB5_11VariableRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_8VariableE4fromCs3CPTo1gHdsJ_13oxigraph_fuzz:
  123|   493k|    fn from(variable: &'a Variable) -> Self {
  124|   493k|        variable.as_ref()
  125|   493k|    }
_RNvXs5_NtCs3p5cISLvx8J_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs3CPTo1gHdsJ_13oxigraph_fuzz:
  144|   496k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   496k|        self.as_ref() == *other
  146|   496k|    }
_RNvMNtCs3p5cISLvx8J_5oxrdf8variableNtB2_8Variable6as_refCs1YgEK1oQZBx_10sparesults:
   50|  1.97M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  1.97M|        VariableRef { name: &self.name }
   52|  1.97M|    }
_RNvMNtCs3p5cISLvx8J_5oxrdf8variableNtB2_8Variable6as_strCs1YgEK1oQZBx_10sparesults:
   40|  8.01k|    pub fn as_str(&self) -> &str {
   41|  8.01k|        &self.name
   42|  8.01k|    }
_RNvXs1_NtCs3p5cISLvx8J_5oxrdf8variableNtB5_11VariableRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs1YgEK1oQZBx_10sparesults:
  116|      9|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|      9|        write!(f, "?{}", self.name)
  118|      9|    }
_RNvXs5_NtCs3p5cISLvx8J_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs1YgEK1oQZBx_10sparesults:
  144|   992k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   992k|        self.as_ref() == *other
  146|   992k|    }
_RNvXs_NtCs3p5cISLvx8J_5oxrdf8variableNtB4_8VariableNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs1YgEK1oQZBx_10sparesults:
   57|      9|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|      9|        self.as_ref().fmt(f)
   59|      9|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf8variableNtB3_8Variable3newReEB5_:
   22|  17.6k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  17.6k|        let name = name.into();
   24|  17.6k|        validate_variable_identifier(&name)?;
   25|  17.6k|        Ok(Self::new_unchecked(name))
   26|  17.6k|    }
_RINvMNtCs3p5cISLvx8J_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   35|  17.6k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  17.6k|        Self { name: name.into() }
   37|  17.6k|    }
_RNvNtCs3p5cISLvx8J_5oxrdf8variable28validate_variable_identifier:
  163|  17.6k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  17.6k|    let mut chars = id.chars();
  165|  17.6k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  17.6k|    match front {
  167|  17.6k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  9.94k|        | 'A'..='Z'
  171|  3.16k|        | 'a'..='z'
  172|    131|        | '\u{00C0}'..='\u{00D6}'
  173|    131|        | '\u{00D8}'..='\u{00F6}'
  174|    125|        | '\u{00F8}'..='\u{02FF}'
  175|    125|        | '\u{0370}'..='\u{037D}'
  176|    125|        | '\u{037F}'..='\u{1FFF}'
  177|     33|        | '\u{200C}'..='\u{200D}'
  178|     33|        | '\u{2070}'..='\u{218F}'
  179|     24|        | '\u{2C00}'..='\u{2FEF}'
  180|     24|        | '\u{3001}'..='\u{D7FF}'
  181|      6|        | '\u{F900}'..='\u{FDCF}'
  182|      6|        | '\u{FDF0}'..='\u{FFFD}'
  183|  17.6k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      5|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  40.4k|    for c in chars {
  187|  22.7k|        match c {
  188|  22.7k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  1.04k|            | '\u{0300}'..='\u{036F}'
  191|    690|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  10.1k|            | 'A'..='Z'
  194|  3.50k|            | 'a'..='z'
  195|  1.04k|            | '\u{00C0}'..='\u{00D6}'
  196|  1.04k|            | '\u{00D8}'..='\u{00F6}'
  197|  1.04k|            | '\u{00F8}'..='\u{02FF}'
  198|  1.04k|            | '\u{0370}'..='\u{037D}'
  199|  1.04k|            | '\u{037F}'..='\u{1FFF}'
  200|    690|            | '\u{200C}'..='\u{200D}'
  201|    690|            | '\u{2070}'..='\u{218F}'
  202|    690|            | '\u{2C00}'..='\u{2FEF}'
  203|    689|            | '\u{3001}'..='\u{D7FF}'
  204|    592|            | '\u{F900}'..='\u{FDCF}'
  205|    592|            | '\u{FDF0}'..='\u{FFFD}'
  206|  22.7k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      9|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  17.6k|    Ok(())
  211|  17.6k|}
_RNvXsr_NtCs3p5cISLvx8J_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  214|     17|#[derive(Debug, thiserror::Error)]

_RINvMs0_NtCs1YgEK1oQZBx_10sparesults3csvINtB6_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB37_22ToWriteSolutionsWriterB19_E5writeRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableRNtNtB49_6triple4TermRNtB2F_13QuerySolutionE0EECs3CPTo1gHdsJ_13oxigraph_fuzz:
  202|   710k|    pub fn write<'a>(
  203|   710k|        &mut self,
  204|   710k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  205|   710k|    ) -> io::Result<()> {
  206|   710k|        self.inner.write(&mut self.buffer, solution);
  207|   710k|        self.write.write_all(self.buffer.as_bytes())?;
  208|   710k|        self.buffer.clear();
  209|   710k|        Ok(())
  210|   710k|    }
_RINvMs1_NtCs1YgEK1oQZBx_10sparesults3csvNtB6_23InnerTsvSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2u_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableRNtNtB41_6triple4TermRNtB22_13QuerySolutionE0EECs3CPTo1gHdsJ_13oxigraph_fuzz:
  273|   710k|    fn write<'a>(
  274|   710k|        &self,
  275|   710k|        output: &mut String,
  276|   710k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  277|   710k|    ) {
  278|   710k|        let mut values = vec![None; self.variables.len()];
  279|  1.20M|        for (variable, value) in solution {
  280|   493k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  281|   493k|                values[position] = Some(value);
  282|   493k|            }
  283|       |        }
  284|   710k|        let mut start_binding = true;
  285|  1.42M|        for value in values {
  286|   712k|            if start_binding {
  287|   708k|                start_binding = false;
  288|   708k|            } else {
  289|  3.47k|                output.push('\t');
  290|  3.47k|            }
  291|   712k|            if let Some(value) = value {
  292|   493k|                write_tsv_term(output, value);
  293|   493k|            }
  294|       |        }
  295|   710k|        output.push('\n');
  296|   710k|    }
_RINvNtCs1YgEK1oQZBx_10sparesults3csv14write_tsv_termNtNtCs3p5cISLvx8J_5oxrdf10named_node12NamedNodeRefECs3CPTo1gHdsJ_13oxigraph_fuzz:
  299|   172k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|   172k|    match term.into() {
  301|   172k|        TermRef::NamedNode(node) => {
  302|   172k|            output.push('<');
  303|   172k|            output.push_str(node.as_str());
  304|   172k|            output.push('>');
  305|   172k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|   172k|}
_RINvNtCs1YgEK1oQZBx_10sparesults3csv14write_tsv_termNtNtCs3p5cISLvx8J_5oxrdf6triple7TermRefECs3CPTo1gHdsJ_13oxigraph_fuzz:
  299|   493k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|   493k|    match term.into() {
  301|  46.8k|        TermRef::NamedNode(node) => {
  302|  46.8k|            output.push('<');
  303|  46.8k|            output.push_str(node.as_str());
  304|  46.8k|            output.push('>');
  305|  46.8k|        }
  306|  87.3k|        TermRef::BlankNode(node) => {
  307|  87.3k|            output.push_str("_:");
  308|  87.3k|            output.push_str(node.as_str());
  309|  87.3k|        }
  310|   337k|        TermRef::Literal(literal) => {
  311|   337k|            let value = literal.value();
  312|   337k|            if let Some(language) = literal.language() {
  313|  51.1k|                write_tsv_quoted_str(output, value);
  314|  51.1k|                output.push('@');
  315|  51.1k|                output.push_str(language);
  316|  51.1k|            } else {
  317|   286k|                match literal.datatype() {
  318|   286k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|   272k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|   212k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|   172k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|   155k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|   148k|                    datatype => {
  324|   148k|                        write_tsv_quoted_str(output, value);
  325|   148k|                        output.push_str("^^");
  326|   148k|                        write_tsv_term(output, datatype);
  327|   148k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  21.2k|        TermRef::Triple(triple) => {
  333|  21.2k|            output.push_str("<< ");
  334|  21.2k|            write_tsv_term(output, &triple.subject);
  335|  21.2k|            output.push(' ');
  336|  21.2k|            write_tsv_term(output, &triple.predicate);
  337|  21.2k|            output.push(' ');
  338|  21.2k|            write_tsv_term(output, &triple.object);
  339|  21.2k|            output.push_str(" >>");
  340|  21.2k|        }
  341|       |    }
  342|   493k|}
_RINvNtCs1YgEK1oQZBx_10sparesults3csv14write_tsv_termRNtNtCs3p5cISLvx8J_5oxrdf10named_node9NamedNodeECs3CPTo1gHdsJ_13oxigraph_fuzz:
  299|  37.5k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  37.5k|    match term.into() {
  301|  37.5k|        TermRef::NamedNode(node) => {
  302|  37.5k|            output.push('<');
  303|  37.5k|            output.push_str(node.as_str());
  304|  37.5k|            output.push('>');
  305|  37.5k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|  37.5k|}
_RINvNtCs1YgEK1oQZBx_10sparesults3csv14write_tsv_termRNtNtCs3p5cISLvx8J_5oxrdf6triple4TermECs3CPTo1gHdsJ_13oxigraph_fuzz:
  299|  37.5k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  37.5k|    match term.into() {
  301|    382|        TermRef::NamedNode(node) => {
  302|    382|            output.push('<');
  303|    382|            output.push_str(node.as_str());
  304|    382|            output.push('>');
  305|    382|        }
  306|  4.01k|        TermRef::BlankNode(node) => {
  307|  4.01k|            output.push_str("_:");
  308|  4.01k|            output.push_str(node.as_str());
  309|  4.01k|        }
  310|  31.9k|        TermRef::Literal(literal) => {
  311|  31.9k|            let value = literal.value();
  312|  31.9k|            if let Some(language) = literal.language() {
  313|  5.09k|                write_tsv_quoted_str(output, value);
  314|  5.09k|                output.push('@');
  315|  5.09k|                output.push_str(language);
  316|  5.09k|            } else {
  317|  26.8k|                match literal.datatype() {
  318|  26.8k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|  26.3k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|  26.3k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|  26.3k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|  26.3k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|  24.6k|                    datatype => {
  324|  24.6k|                        write_tsv_quoted_str(output, value);
  325|  24.6k|                        output.push_str("^^");
  326|  24.6k|                        write_tsv_term(output, datatype);
  327|  24.6k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  1.22k|        TermRef::Triple(triple) => {
  333|  1.22k|            output.push_str("<< ");
  334|  1.22k|            write_tsv_term(output, &triple.subject);
  335|  1.22k|            output.push(' ');
  336|  1.22k|            write_tsv_term(output, &triple.predicate);
  337|  1.22k|            output.push(' ');
  338|  1.22k|            write_tsv_term(output, &triple.object);
  339|  1.22k|            output.push_str(" >>");
  340|  1.22k|        }
  341|       |    }
  342|  37.5k|}
_RINvNtCs1YgEK1oQZBx_10sparesults3csv14write_tsv_termRNtNtCs3p5cISLvx8J_5oxrdf6triple7SubjectECs3CPTo1gHdsJ_13oxigraph_fuzz:
  299|  37.5k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  37.5k|    match term.into() {
  301|  15.1k|        TermRef::NamedNode(node) => {
  302|  15.1k|            output.push('<');
  303|  15.1k|            output.push_str(node.as_str());
  304|  15.1k|            output.push('>');
  305|  15.1k|        }
  306|  7.29k|        TermRef::BlankNode(node) => {
  307|  7.29k|            output.push_str("_:");
  308|  7.29k|            output.push_str(node.as_str());
  309|  7.29k|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  15.0k|        TermRef::Triple(triple) => {
  333|  15.0k|            output.push_str("<< ");
  334|  15.0k|            write_tsv_term(output, &triple.subject);
  335|  15.0k|            output.push(' ');
  336|  15.0k|            write_tsv_term(output, &triple.predicate);
  337|  15.0k|            output.push(' ');
  338|  15.0k|            write_tsv_term(output, &triple.object);
  339|  15.0k|            output.push_str(" >>");
  340|  15.0k|        }
  341|       |    }
  342|  37.5k|}
_RINvNtCs1YgEK1oQZBx_10sparesults3csv24write_boolean_csv_resultQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs3CPTo1gHdsJ_13oxigraph_fuzz:
   16|      7|pub fn write_boolean_csv_result<W: Write>(mut write: W, value: bool) -> io::Result<W> {
   17|      7|    write.write_all(if value { b"true" } else { b"false" })?;
   18|      7|    Ok(write)
   19|      7|}
_RNCINvMs1_NtCs1YgEK1oQZBx_10sparesults3csvNtB8_23InnerTsvSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2w_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableRNtNtB43_6triple4TermRNtB24_13QuerySolutionE0EE0Cs3CPTo1gHdsJ_13oxigraph_fuzz:
  280|   496k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNvMs0_NtCs1YgEK1oQZBx_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5startCs3CPTo1gHdsJ_13oxigraph_fuzz:
  190|  7.96k|    pub fn start(mut write: W, variables: Vec<Variable>) -> io::Result<Self> {
  191|  7.96k|        let mut buffer = String::new();
  192|  7.96k|        let inner = InnerTsvSolutionsWriter::start(&mut buffer, variables);
  193|  7.96k|        write.write_all(buffer.as_bytes())?;
  194|  7.96k|        buffer.clear();
  195|  7.96k|        Ok(Self {
  196|  7.96k|            inner,
  197|  7.96k|            write,
  198|  7.96k|            buffer,
  199|  7.96k|        })
  200|  7.96k|    }
_RNvMs0_NtCs1YgEK1oQZBx_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs3CPTo1gHdsJ_13oxigraph_fuzz:
  212|  7.96k|    pub fn finish(self) -> W {
  213|  7.96k|        self.write
  214|  7.96k|    }
_RNvMs1_NtCs1YgEK1oQZBx_10sparesults3csvNtB5_23InnerTsvSolutionsWriter5start:
  258|  7.96k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  259|  7.96k|        let mut start_vars = true;
  260|  15.9k|        for variable in &variables {
  261|  8.01k|            if start_vars {
  262|  7.85k|                start_vars = false;
  263|  7.85k|            } else {
  264|    154|                output.push('\t');
  265|    154|            }
  266|  8.01k|            output.push('?');
  267|  8.01k|            output.push_str(variable.as_str());
  268|       |        }
  269|  7.96k|        output.push('\n');
  270|  7.96k|        Self { variables }
  271|  7.96k|    }
_RNvNtCs1YgEK1oQZBx_10sparesults3csv20write_tsv_quoted_str:
  344|   238k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  345|   238k|    output.push('"');
  346|  2.85M|    for c in string.chars() {
  347|  2.85M|        match c {
  348|  1.90k|            '\t' => output.push_str("\\t"),
  349|  3.80k|            '\n' => output.push_str("\\n"),
  350|  5.46k|            '\r' => output.push_str("\\r"),
  351|  6.11k|            '"' => output.push_str("\\\""),
  352|  8.34k|            '\\' => output.push_str("\\\\"),
  353|  2.82M|            _ => output.push(c),
  354|       |        };
  355|       |    }
  356|   238k|    output.push('"');
  357|   238k|}
_RNvNtCs1YgEK1oQZBx_10sparesults3csv17is_turtle_boolean:
  359|  15.9k|fn is_turtle_boolean(value: &str) -> bool {
  360|  15.9k|    matches!(value, "true" | "false")
  361|  15.9k|}
_RNvNtCs1YgEK1oQZBx_10sparesults3csv17is_turtle_integer:
  363|  83.4k|fn is_turtle_integer(value: &str) -> bool {
  364|  83.4k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  365|  83.4k|    let mut value = value.as_bytes();
  366|  83.4k|    if let Some(v) = value.strip_prefix(b"+") {
  367|    840|        value = v;
  368|  82.5k|    } else if let Some(v) = value.strip_prefix(b"-") {
  369|    937|        value = v;
  370|  81.6k|    }
  371|  83.4k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  372|  83.4k|}
_RNvNtCs1YgEK1oQZBx_10sparesults3csv17is_turtle_decimal:
  374|  42.1k|fn is_turtle_decimal(value: &str) -> bool {
  375|  42.1k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  376|  42.1k|    let mut value = value.as_bytes();
  377|  42.1k|    if let Some(v) = value.strip_prefix(b"+") {
  378|  8.35k|        value = v;
  379|  33.8k|    } else if let Some(v) = value.strip_prefix(b"-") {
  380|  5.92k|        value = v;
  381|  27.9k|    }
  382|   108k|    while value.first().map_or(false, u8::is_ascii_digit) {
  383|  66.1k|        value = &value[1..];
  384|  66.1k|    }
  385|  42.1k|    let Some(value) = value.strip_prefix(b".") else {
  386|  1.36k|        return false;
  387|       |    };
  388|  40.8k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  389|  42.1k|}
_RNvNtCs1YgEK1oQZBx_10sparesults3csv16is_turtle_double:
  391|   155k|fn is_turtle_double(value: &str) -> bool {
  392|   155k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  393|   155k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  394|   155k|    let mut value = value.as_bytes();
  395|   155k|    if let Some(v) = value.strip_prefix(b"+") {
  396|    729|        value = v;
  397|   154k|    } else if let Some(v) = value.strip_prefix(b"-") {
  398|  40.8k|        value = v;
  399|   113k|    }
  400|   155k|    let mut with_before = false;
  401|   181k|    while value.first().map_or(false, u8::is_ascii_digit) {
  402|  26.7k|        value = &value[1..];
  403|  26.7k|        with_before = true;
  404|  26.7k|    }
  405|   155k|    let mut with_after = false;
  406|   155k|    if let Some(v) = value.strip_prefix(b".") {
  407|  34.6k|        value = v;
  408|  56.9k|        while value.first().map_or(false, u8::is_ascii_digit) {
  409|  22.3k|            value = &value[1..];
  410|  22.3k|            with_after = true;
  411|  22.3k|        }
  412|   120k|    }
  413|   155k|    if let Some(v) = value.strip_prefix(b"e") {
  414|   116k|        value = v;
  415|   116k|    } else if let Some(v) = value.strip_prefix(b"E") {
  416|  30.8k|        value = v;
  417|  30.8k|    } else {
  418|  7.63k|        return false;
  419|       |    }
  420|   147k|    if let Some(v) = value.strip_prefix(b"+") {
  421|    170|        value = v;
  422|   147k|    } else if let Some(v) = value.strip_prefix(b"-") {
  423|  2.14k|        value = v;
  424|   145k|    }
  425|   147k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  426|   155k|}
_RNvMs4_NtCs1YgEK1oQZBx_10sparesults3csvNtB5_30FromSliceTsvQueryResultsReader4read:
  536|  20.2k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  537|  20.2k|        let mut reader = LineReader::new();
  538|  20.2k|        let line = reader.next_line_from_slice(slice)?;
  539|  20.2k|        Ok(match inner_read_first_line(reader, line)? {
  540|       |            TsvInnerQueryResults::Solutions {
  541|  20.0k|                variables,
  542|  20.0k|                solutions,
  543|  20.0k|            } => Self::Solutions {
  544|  20.0k|                variables,
  545|  20.0k|                solutions: FromSliceTsvSolutionsReader {
  546|  20.0k|                    slice,
  547|  20.0k|                    inner: solutions,
  548|  20.0k|                },
  549|  20.0k|            },
  550|     14|            TsvInnerQueryResults::Boolean(value) => Self::Boolean(value),
  551|       |        })
  552|  20.2k|    }
_RNvMs5_NtCs1YgEK1oQZBx_10sparesults3csvNtB5_27FromSliceTsvSolutionsReader9read_next:
  561|  1.47M|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  562|  1.47M|        let line = self.inner.reader.next_line_from_slice(self.slice)?;
  563|  1.47M|        self.inner.read_next(line)
  564|  1.47M|    }
_RNvNtCs1YgEK1oQZBx_10sparesults3csv21inner_read_first_line:
  575|  20.2k|fn inner_read_first_line(
  576|  20.2k|    reader: LineReader,
  577|  20.2k|    line: &str,
  578|  20.2k|) -> Result<TsvInnerQueryResults, QueryResultsSyntaxError> {
  579|  20.2k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  580|  20.2k|    if line.eq_ignore_ascii_case("true") {
  581|      6|        return Ok(TsvInnerQueryResults::Boolean(true));
  582|  20.2k|    }
  583|  20.2k|    if line.eq_ignore_ascii_case("false") {
  584|      8|        return Ok(TsvInnerQueryResults::Boolean(false));
  585|  20.2k|    }
  586|  20.2k|    let mut variables = Vec::new();
  587|  20.2k|    if !line.is_empty() {
  588|  17.8k|        for v in line.split('\t') {
  589|  17.8k|            let v = v.trim();
  590|  17.8k|            if v.is_empty() {
  591|     78|                return Err(QueryResultsSyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar"));
  592|  17.7k|            }
  593|  17.7k|            let variable = Variable::from_str(v).map_err(|e| {
  594|       |                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|  17.7k|            })?;
  596|  17.6k|            if variables.contains(&variable) {
  597|      9|                return Err(QueryResultsSyntaxError::msg(format!(
  598|      9|                    "The variable {variable} is declared twice"
  599|      9|                )));
  600|  17.6k|            }
  601|  17.6k|            variables.push(variable);
  602|       |        }
  603|  2.97k|    }
  604|  20.0k|    let column_len = variables.len();
  605|  20.0k|    Ok(TsvInnerQueryResults::Solutions {
  606|  20.0k|        variables,
  607|  20.0k|        solutions: TsvInnerSolutionsReader { reader, column_len },
  608|  20.0k|    })
  609|  20.2k|}
_RNvMs6_NtCs1YgEK1oQZBx_10sparesults3csvNtB5_23TsvInnerSolutionsReader9read_next:
  618|  1.47M|    pub fn read_next(
  619|  1.47M|        &self,
  620|  1.47M|        line: &str,
  621|  1.47M|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  622|  1.47M|        if line.is_empty() {
  623|  15.9k|            return Ok(None); // EOF
  624|  1.46M|        }
  625|  1.46M|        let elements = line
  626|  1.46M|            .split('\t')
  627|  1.46M|            .enumerate()
  628|  1.46M|            .map(|(i, v)| {
  629|       |                let v = v.trim();
  630|       |                if v.is_empty() {
  631|       |                    Ok(None)
  632|       |                } else {
  633|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  634|       |                        let start_position_char = line
  635|       |                            .split('\t')
  636|       |                            .take(i)
  637|       |                            .map(|c| c.chars().count() + 1)
  638|       |                            .sum::<usize>();
  639|       |                        let start_position_bytes =
  640|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  641|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  642|       |                            error: e,
  643|       |                            term: v.into(),
  644|       |                            location: TextPosition {
  645|       |                                line: self.reader.line_count - 1,
  646|       |                                column: start_position_char.try_into().unwrap(),
  647|       |                                offset: self.reader.last_line_start
  648|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  649|       |                            }..TextPosition {
  650|       |                                line: self.reader.line_count - 1,
  651|       |                                column: (start_position_char + v.chars().count())
  652|       |                                    .try_into()
  653|       |                                    .unwrap(),
  654|       |                                offset: self.reader.last_line_start
  655|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  656|       |                            },
  657|       |                        })
  658|       |                    })?))
  659|       |                }
  660|  1.46M|            })
  661|  1.46M|            .collect::<Result<Vec<_>, QueryResultsSyntaxError>>()?;
  662|  1.46M|        if elements.len() == self.column_len {
  663|  1.45M|            Ok(Some(elements))
  664|  3.53k|        } else if self.column_len == 0 && elements == [None] {
  665|  3.29k|            Ok(Some(Vec::new())) // Zero columns case
  666|       |        } else {
  667|    233|            Err(QueryResultsSyntaxError::located_message(
  668|    233|                format!(
  669|    233|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  670|    233|                    self.column_len,
  671|    233|                    self.reader.line_count - 1,
  672|    233|                    elements.len(),
  673|    233|                    line
  674|    233|                ),
  675|    233|                TextPosition {
  676|    233|                    line: self.reader.line_count - 1,
  677|    233|                    column: 0,
  678|    233|                    offset: self.reader.last_line_start,
  679|    233|                }..TextPosition {
  680|    233|                    line: self.reader.line_count - 1,
  681|    233|                    column: line.chars().count().try_into().unwrap(),
  682|    233|                    offset: self.reader.last_line_end,
  683|    233|                },
  684|    233|            ))
  685|       |        }
  686|  1.47M|    }
_RNvMs7_NtCs1YgEK1oQZBx_10sparesults3csvNtB5_10LineReader3new:
  698|  20.2k|    fn new() -> Self {
  699|  20.2k|        Self {
  700|  20.2k|            buffer_start: 0,
  701|  20.2k|            buffer_end: 0,
  702|  20.2k|            line_count: 0,
  703|  20.2k|            last_line_start: 0,
  704|  20.2k|            last_line_end: 0,
  705|  20.2k|        }
  706|  20.2k|    }
_RNvMs7_NtCs1YgEK1oQZBx_10sparesults3csvNtB5_10LineReader20next_line_from_slice:
  792|  1.50M|    fn next_line_from_slice<'a>(
  793|  1.50M|        &mut self,
  794|  1.50M|        slice: &'a [u8],
  795|  1.50M|    ) -> Result<&'a str, QueryResultsSyntaxError> {
  796|  1.50M|        let line_end = memchr(b'\n', &slice[self.buffer_start..])
  797|  1.50M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
  798|  1.50M|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  799|       |            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  800|  1.50M|        });
  801|  1.50M|        self.line_count += 1;
  802|  1.50M|        self.last_line_start = self.last_line_end;
  803|  1.50M|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  804|  1.50M|        self.buffer_start = line_end;
  805|  1.50M|        result
  806|  1.50M|    }
_RNCNvNtCs1YgEK1oQZBx_10sparesults3csv21inner_read_first_line0B5_:
  579|  61.3k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvNtCs1YgEK1oQZBx_10sparesults3csv21inner_read_first_lines_0B5_:
  593|    127|            let variable = Variable::from_str(v).map_err(|e| {
  594|    127|                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|    127|            })?;
_RNCNvMs6_NtCs1YgEK1oQZBx_10sparesults3csvNtB7_23TsvInnerSolutionsReader9read_next0B9_:
  628|  1.47M|            .map(|(i, v)| {
  629|  1.47M|                let v = v.trim();
  630|  1.47M|                if v.is_empty() {
  631|   457k|                    Ok(None)
  632|       |                } else {
  633|  1.01M|                    Ok(Some(Term::from_str(v).map_err(|e| {
  634|       |                        let start_position_char = line
  635|       |                            .split('\t')
  636|       |                            .take(i)
  637|       |                            .map(|c| c.chars().count() + 1)
  638|       |                            .sum::<usize>();
  639|       |                        let start_position_bytes =
  640|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  641|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  642|       |                            error: e,
  643|       |                            term: v.into(),
  644|       |                            location: TextPosition {
  645|       |                                line: self.reader.line_count - 1,
  646|       |                                column: start_position_char.try_into().unwrap(),
  647|       |                                offset: self.reader.last_line_start
  648|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  649|       |                            }..TextPosition {
  650|       |                                line: self.reader.line_count - 1,
  651|       |                                column: (start_position_char + v.chars().count())
  652|       |                                    .try_into()
  653|       |                                    .unwrap(),
  654|       |                                offset: self.reader.last_line_start
  655|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  656|       |                            },
  657|       |                        })
  658|  1.01M|                    })?))
  659|       |                }
  660|  1.47M|            })
_RNCNCNvMs6_NtCs1YgEK1oQZBx_10sparesults3csvNtB9_23TsvInnerSolutionsReader9read_next00Bb_:
  633|  3.82k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  634|  3.82k|                        let start_position_char = line
  635|  3.82k|                            .split('\t')
  636|  3.82k|                            .take(i)
  637|  3.82k|                            .map(|c| c.chars().count() + 1)
  638|  3.82k|                            .sum::<usize>();
  639|  3.82k|                        let start_position_bytes =
  640|  3.82k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  641|  3.82k|                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  642|  3.82k|                            error: e,
  643|  3.82k|                            term: v.into(),
  644|  3.82k|                            location: TextPosition {
  645|  3.82k|                                line: self.reader.line_count - 1,
  646|  3.82k|                                column: start_position_char.try_into().unwrap(),
  647|  3.82k|                                offset: self.reader.last_line_start
  648|  3.82k|                                    + u64::try_from(start_position_bytes).unwrap(),
  649|  3.82k|                            }..TextPosition {
  650|  3.82k|                                line: self.reader.line_count - 1,
  651|  3.82k|                                column: (start_position_char + v.chars().count())
  652|  3.82k|                                    .try_into()
  653|  3.82k|                                    .unwrap(),
  654|  3.82k|                                offset: self.reader.last_line_start
  655|  3.82k|                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  656|  3.82k|                            },
  657|  3.82k|                        })
  658|  3.82k|                    })?))
_RNCNCNCNvMs6_NtCs1YgEK1oQZBx_10sparesults3csvNtBb_23TsvInnerSolutionsReader9read_next000Bd_:
  637|  1.62k|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs6_NtCs1YgEK1oQZBx_10sparesults3csvNtBb_23TsvInnerSolutionsReader9read_next00s_0Bd_:
  640|  1.62k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNvMs7_NtCs1YgEK1oQZBx_10sparesults3csvNtB7_10LineReader20next_line_from_slice0B9_:
  797|  26.5k|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCs1YgEK1oQZBx_10sparesults3csvNtB7_10LineReader20next_line_from_slices_0B9_:
  797|  1.47M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCs1YgEK1oQZBx_10sparesults3csvNtB7_10LineReader20next_line_from_slices0_0B9_:
  798|     46|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  799|     46|            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  800|     46|        });

_RINvMs2_NtCs1YgEK1oQZBx_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   87|    182|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    182|        Self(SyntaxErrorKind::Msg {
   89|    182|            msg: msg.into(),
   90|    182|            location: None,
   91|    182|        })
   92|    182|    }
_RINvMs2_NtCs1YgEK1oQZBx_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|     78|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|     78|        Self(SyntaxErrorKind::Msg {
   89|     78|            msg: msg.into(),
   90|     78|            location: None,
   91|     78|        })
   92|     78|    }
_RINvMs2_NtCs1YgEK1oQZBx_10sparesults5errorNtB6_23QueryResultsSyntaxError15located_messageNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   96|    233|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
   97|    233|        Self(SyntaxErrorKind::Msg {
   98|    233|            msg: msg.into(),
   99|    233|            location: Some(location),
  100|    233|        })
  101|    233|    }

_RNvMNtCs1YgEK1oQZBx_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs3CPTo1gHdsJ_13oxigraph_fuzz:
   65|  20.2k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  20.2k|        Self { format }
   67|  20.2k|    }
_RNvMNtCs1YgEK1oQZBx_10sparesults6parserNtB2_18QueryResultsParser11parse_slice:
  234|  20.2k|    pub fn parse_slice(
  235|  20.2k|        self,
  236|  20.2k|        slice: &[u8],
  237|  20.2k|    ) -> Result<FromSliceQueryResultsReader<'_>, QueryResultsSyntaxError> {
  238|  20.2k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match FromSliceXmlQueryResultsReader::read(slice)? {
  240|      0|                FromSliceXmlQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  241|       |                FromSliceXmlQueryResultsReader::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: FromSliceSolutionsReaderKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match FromSliceJsonQueryResultsReader::read(slice)? {
  250|      0|                FromSliceJsonQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  251|       |                FromSliceJsonQueryResultsReader::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: FromSliceSolutionsReaderKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|  20.2k|            QueryResultsFormat::Tsv => match FromSliceTsvQueryResultsReader::read(slice)? {
  261|     14|                FromSliceTsvQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  262|       |                FromSliceTsvQueryResultsReader::Solutions {
  263|  20.0k|                    solutions,
  264|  20.0k|                    variables,
  265|  20.0k|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  266|  20.0k|                    variables: variables.into(),
  267|  20.0k|                    solutions: FromSliceSolutionsReaderKind::Tsv(solutions),
  268|  20.0k|                }),
  269|       |            },
  270|       |        })
  271|  20.2k|    }
_RNvXs3_NtCs1YgEK1oQZBx_10sparesults6parserNtB5_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  642|  1.47M|    fn next(&mut self) -> Option<Self::Item> {
  643|  1.47M|        Some(
  644|  1.47M|            match &mut self.solutions {
  645|      0|                FromSliceSolutionsReaderKind::Xml(reader) => reader.read_next(),
  646|      0|                FromSliceSolutionsReaderKind::Json(reader) => reader.read_next(),
  647|  1.47M|                FromSliceSolutionsReaderKind::Tsv(reader) => reader.read_next(),
  648|       |            }
  649|  1.47M|            .transpose()?
  650|  1.46M|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|       |        )
  652|  1.47M|    }
_RNCNvXs3_NtCs1YgEK1oQZBx_10sparesults6parserNtB7_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  1.45M|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RINvMNtCs1YgEK1oQZBx_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs3CPTo1gHdsJ_13oxigraph_fuzz:
   73|      7|    pub fn serialize_boolean_to_write<W: Write>(self, write: W, value: bool) -> io::Result<W> {
   74|      7|        match self.format {
   75|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   76|      0|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   77|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   78|      7|                write_boolean_csv_result(write, value)
   79|       |            }
   80|       |        }
   81|      7|    }
_RINvMNtCs1YgEK1oQZBx_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs3CPTo1gHdsJ_13oxigraph_fuzz:
  144|  7.96k|    pub fn serialize_solutions_to_write<W: Write>(
  145|  7.96k|        self,
  146|  7.96k|        write: W,
  147|  7.96k|        variables: Vec<Variable>,
  148|  7.96k|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  149|  7.96k|        Ok(ToWriteSolutionsWriter {
  150|  7.96k|            formatter: match self.format {
  151|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  152|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  153|       |                ),
  154|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  155|      0|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  156|       |                ),
  157|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  158|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  159|       |                ),
  160|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  161|  7.96k|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  162|       |                ),
  163|       |            },
  164|       |        })
  165|  7.96k|    }
_RINvMs0_NtCs1YgEK1oQZBx_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECs3CPTo1gHdsJ_13oxigraph_fuzz:
  302|   710k|    pub fn write<'a>(
  303|   710k|        &mut self,
  304|   710k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  305|   710k|    ) -> io::Result<()> {
  306|   710k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  307|   710k|        match &mut self.formatter {
  308|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  309|      0|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  310|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  311|   710k|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  312|       |        }
  313|   710k|    }
_RNCINvMs0_NtCs1YgEK1oQZBx_10sparesults10serializerINtB8_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableRNtNtB21_6triple4TermRNtNtBa_8solution13QuerySolutionE0Cs3CPTo1gHdsJ_13oxigraph_fuzz:
  306|   493k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RNvMs0_NtCs1YgEK1oQZBx_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs3CPTo1gHdsJ_13oxigraph_fuzz:
  316|  7.96k|    pub fn finish(self) -> io::Result<W> {
  317|  7.96k|        match self.formatter {
  318|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  319|      0|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  320|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  321|  7.96k|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  322|       |        }
  323|  7.96k|    }
_RNvMNtCs1YgEK1oQZBx_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs3CPTo1gHdsJ_13oxigraph_fuzz:
   57|  7.96k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   58|  7.96k|        Self { format }
   59|  7.96k|    }

_RNvMNtCs1YgEK1oQZBx_10sparesults8solutionNtB2_13QuerySolution9variablesCs3CPTo1gHdsJ_13oxigraph_fuzz:
  158|  7.89k|    pub fn variables(&self) -> &[Variable] {
  159|  7.89k|        &self.variables
  160|  7.89k|    }
_RNvXs0_NtCs1YgEK1oQZBx_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterCs3CPTo1gHdsJ_13oxigraph_fuzz:
  178|   710k|    fn into_iter(self) -> Self::IntoIter {
  179|   710k|        Iter {
  180|   710k|            inner: self.variables.iter().zip(&self.values),
  181|   710k|        }
  182|   710k|    }
_RNvXs9_NtCs1YgEK1oQZBx_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs3CPTo1gHdsJ_13oxigraph_fuzz:
  285|  1.20M|    fn next(&mut self) -> Option<Self::Item> {
  286|  1.42M|        for (variable, value) in &mut self.inner {
  287|   712k|            if let Some(value) = value {
  288|   493k|                return Some((variable, value));
  289|   218k|            }
  290|       |        }
  291|   710k|        None
  292|  1.20M|    }
_RNvXsc_NtCs1YgEK1oQZBx_10sparesults8solutionNtNtCs3p5cISLvx8J_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|   986k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|   986k|        solution.variables.iter().position(|v| *v == self)
  325|   986k|    }
_RNvXsd_NtCs1YgEK1oQZBx_10sparesults8solutionRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|   986k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|   986k|        self.as_ref().index(solution)
  332|   986k|    }
_RNvMNtCs1YgEK1oQZBx_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  1.42M|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  1.42M|        self.into_iter()
  114|  1.42M|    }
_RNvXs0_NtCs1YgEK1oQZBx_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  1.42M|    fn into_iter(self) -> Self::IntoIter {
  179|  1.42M|        Iter {
  180|  1.42M|            inner: self.variables.iter().zip(&self.values),
  181|  1.42M|        }
  182|  1.42M|    }
_RNvXs6_NtCs1YgEK1oQZBx_10sparesults8solutionNtB5_13QuerySolutionNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  236|   710k|    fn eq(&self, other: &Self) -> bool {
  237|   710k|        for (k, v) in self.iter() {
  238|   493k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|   493k|            }
  241|       |        }
  242|   710k|        for (k, v) in other.iter() {
  243|   493k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|   493k|            }
  246|       |        }
  247|   710k|        true
  248|   710k|    }
_RNvXs9_NtCs1YgEK1oQZBx_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  2.40M|    fn next(&mut self) -> Option<Self::Item> {
  286|  2.84M|        for (variable, value) in &mut self.inner {
  287|  1.42M|            if let Some(value) = value {
  288|   986k|                return Some((variable, value));
  289|   437k|            }
  290|       |        }
  291|  1.42M|        None
  292|  2.40M|    }
_RINvMNtCs1YgEK1oQZBx_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableEB5_:
   38|   986k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|   986k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|   986k|    }
_RNvXs_NtCs1YgEK1oQZBx_10sparesults8solutionNtB4_13QuerySolutionINtNtCscdEvteftVc2_4core7convert4FromTINtNtCs3OstG5Tqy1X_5alloc4sync3ArcSNtNtCs3p5cISLvx8J_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  1.45M|    fn from((v, s): (V, S)) -> Self {
  166|  1.45M|        Self {
  167|  1.45M|            variables: v.into(),
  168|  1.45M|            values: s.into(),
  169|  1.45M|        }
  170|  1.45M|    }
_RNCNvXsc_NtCs1YgEK1oQZBx_10sparesults8solutionNtNtCs3p5cISLvx8J_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|   992k|        solution.variables.iter().position(|v| *v == self)


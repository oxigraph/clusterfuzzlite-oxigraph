_RINvXNtCs9u4jXPBK5KW_6anyhow7contextINtNtCslfKEd1eBmR_4core6result6ResultINtNtCsfpddGpQNiKJ_5alloc3vec3VecNtNtCseEzm5TWRsUV_10sparesults8solution13QuerySolutionENtNtB1K_5error10ParseErrorEINtB5_7ContextB19_B2z_E12with_contextNtNtB1e_6string6StringNCNvNtCslW5pmdEUwJH_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB43_:
   58|  1.51k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.51k|    where
   60|  1.51k|        C: Display + Send + Sync + 'static,
   61|  1.51k|        F: FnOnce() -> C,
   62|  1.51k|    {
   63|  1.51k|        match self {
   64|  1.51k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.51k|    }
_RINvXNtCs9u4jXPBK5KW_6anyhow7contextINtNtCslfKEd1eBmR_4core6result6ResultINtCseEzm5TWRsUV_10sparesults18QueryResultsReaderRShENtNtB1c_5error10ParseErrorEINtB5_7ContextB19_B20_E12with_contextNtNtCsfpddGpQNiKJ_5alloc6string6StringNCNvNtCslW5pmdEUwJH_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB3K_:
   58|  1.51k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.51k|    where
   60|  1.51k|        C: Display + Send + Sync + 'static,
   61|  1.51k|        F: FnOnce() -> C,
   62|  1.51k|    {
   63|  1.51k|        match self {
   64|  1.51k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.51k|    }

_RNvNvCsaFOJqAShOPY_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  3.00k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  3.00k|                $body
  243|  3.00k|            }
rust_fuzzer_test_input:
  209|  3.00k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.00k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.00k|                }
  223|  3.00k|
  224|  3.00k|                __libfuzzer_sys_run(bytes);
  225|  3.00k|                0
  226|  3.00k|            }
LLVMFuzzerTestOneInput:
   58|  3.00k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.00k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.00k|    });
   63|  3.00k|
   64|  3.00k|    match test_input {
   65|  3.00k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.00k|}
_RNCNvCsbcGpV2suR33_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.00k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.00k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.00k|        rust_fuzzer_test_input(data_slice)
   62|  3.00k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCsfkkZo1T22oy_9once_cell3impINtB5_8OnceCellNtNtCsfpddGpQNiKJ_5alloc6string6StringE14is_initializedCsbcGpV2suR33_13libfuzzer_sys:
   49|  3.00k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.00k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.00k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.00k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.00k|        // `SeqCst` operations on the slow path.
   54|  3.00k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.00k|    }

_RNvMs4_NtCsfkkZo1T22oy_9once_cell4syncINtB5_8OnceCellNtNtCsfpddGpQNiKJ_5alloc6string6StringE3getCsbcGpV2suR33_13libfuzzer_sys:
  963|  3.00k|        pub fn get(&self) -> Option<&T> {
  964|  3.00k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.00k|                None
  969|       |            }
  970|  3.00k|        }

_RINvXsr_CshcMSTkjQWky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslfKEd1eBmR_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsfAZ3rbceNnU_5oxrdf:
  560|    376|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CshcMSTkjQWky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslfKEd1eBmR_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsfAZ3rbceNnU_5oxrdf:
  560|  10.9k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCshcMSTkjQWky_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsfAZ3rbceNnU_5oxrdf:
  576|  5.39k|fn parse_language_tag(
  577|  5.39k|    input: &str,
  578|  5.39k|    output: &mut impl OutputBuffer,
  579|  5.39k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  5.39k|    if let Some(tag) = GRANDFATHEREDS
  582|  5.39k|        .iter()
  583|  5.39k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  5.39k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    377|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    377|        } else if input.len() == 2 {
  601|      1|            Err(LanguageTagParseError {
  602|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      1|            })
  604|       |        } else {
  605|    376|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    376|            Ok(TagElementsPositions {
  607|    376|                language_end: input.len(),
  608|    376|                extlang_end: input.len(),
  609|    376|                script_end: input.len(),
  610|    376|                region_end: input.len(),
  611|    376|                variant_end: input.len(),
  612|    376|                extension_end: input.len(),
  613|    376|            })
  614|       |        }
  615|       |    } else {
  616|  5.01k|        parse_langtag(input, output)
  617|       |    }
  618|  5.39k|}
_RINvXsr_CshcMSTkjQWky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslfKEd1eBmR_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsfAZ3rbceNnU_5oxrdf:
  560|  1.42k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CshcMSTkjQWky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslfKEd1eBmR_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB1Z_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsfAZ3rbceNnU_5oxrdf:
  560|    626|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCshcMSTkjQWky_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsfAZ3rbceNnU_5oxrdf:
  583|   140k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCshcMSTkjQWky_10oxilangtagINtB2_11LanguageTagNtNtCsfpddGpQNiKJ_5alloc6string6StringE10into_innerCsfAZ3rbceNnU_5oxrdf:
   54|  5.32k|    pub fn into_inner(self) -> T {
   55|  5.32k|        self.tag
   56|  5.32k|    }
_RNvMCshcMSTkjQWky_10oxilangtagINtB2_11LanguageTagNtNtCsfpddGpQNiKJ_5alloc6string6StringE5parseCsfAZ3rbceNnU_5oxrdf:
   41|  5.39k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  5.39k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  5.32k|        Ok(Self { tag, positions })
   44|  5.39k|    }
_RINvCshcMSTkjQWky_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsfAZ3rbceNnU_5oxrdf:
  621|  5.01k|fn parse_langtag(
  622|  5.01k|    input: &str,
  623|  5.01k|    output: &mut impl OutputBuffer,
  624|  5.01k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  5.01k|    #[derive(PartialEq, Eq)]
  626|  5.01k|    enum State {
  627|  5.01k|        Start,
  628|  5.01k|        AfterLanguage,
  629|  5.01k|        AfterExtLang,
  630|  5.01k|        AfterScript,
  631|  5.01k|        AfterRegion,
  632|  5.01k|        InExtension { expected: bool },
  633|  5.01k|        InPrivateUse { expected: bool },
  634|  5.01k|    }
  635|  5.01k|
  636|  5.01k|    let mut state = State::Start;
  637|  5.01k|    let mut language_end = 0;
  638|  5.01k|    let mut extlang_end = 0;
  639|  5.01k|    let mut script_end = 0;
  640|  5.01k|    let mut region_end = 0;
  641|  5.01k|    let mut variant_end = 0;
  642|  5.01k|    let mut extension_end = 0;
  643|  5.01k|    let mut extlangs_count = 0;
  644|  14.2k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  14.2k|        if subtag.is_empty() {
  646|     33|            return Err(LanguageTagParseError {
  647|     33|                kind: TagParseErrorKind::EmptySubtag,
  648|     33|            });
  649|  14.1k|        }
  650|  14.1k|        if subtag.len() > 8 {
  651|      2|            return Err(LanguageTagParseError {
  652|      2|                kind: TagParseErrorKind::SubtagTooLong,
  653|      2|            });
  654|  14.1k|        }
  655|  14.1k|        if state == State::Start {
  656|       |            // Primary language
  657|  4.99k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|      5|                return Err(LanguageTagParseError {
  659|      5|                    kind: TagParseErrorKind::InvalidLanguage,
  660|      5|                });
  661|  4.98k|            }
  662|  4.98k|            language_end = end;
  663|  4.98k|            output.extend(to_lowercase(subtag));
  664|  4.98k|            if subtag.len() < 4 {
  665|  3.43k|                // extlangs are only allowed for short language tags
  666|  3.43k|                state = State::AfterLanguage;
  667|  3.43k|            } else {
  668|  1.54k|                state = State::AfterExtLang;
  669|  1.54k|            }
  670|  9.18k|        } else if let State::InPrivateUse { .. } = state {
  671|    507|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    507|            }
  676|    507|            output.push('-');
  677|    507|            output.extend(to_lowercase(subtag));
  678|    507|            state = State::InPrivateUse { expected: false };
  679|  8.68k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    255|            if let State::InExtension { expected: true } = state {
  682|      1|                return Err(LanguageTagParseError {
  683|      1|                    kind: TagParseErrorKind::EmptyExtension,
  684|      1|                });
  685|    254|            }
  686|    254|            output.push('-');
  687|    254|            output.push('x');
  688|    254|            state = State::InPrivateUse { expected: true };
  689|  8.42k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|    919|            if let State::InExtension { expected: true } = state {
  692|      9|                return Err(LanguageTagParseError {
  693|      9|                    kind: TagParseErrorKind::EmptyExtension,
  694|      9|                });
  695|    910|            }
  696|    910|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|    910|            output.push('-');
  698|    910|            output.push(extension_tag);
  699|    910|            state = State::InExtension { expected: true };
  700|  7.50k|        } else if let State::InExtension { .. } = state {
  701|  1.88k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  1.88k|            }
  706|  1.88k|            extension_end = end;
  707|  1.88k|            output.push('-');
  708|  1.88k|            output.extend(to_lowercase(subtag));
  709|  1.88k|            state = State::InExtension { expected: false };
  710|  5.62k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  1.74k|            extlangs_count += 1;
  712|  1.74k|            if extlangs_count > 3 {
  713|      1|                return Err(LanguageTagParseError {
  714|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      1|                });
  716|  1.74k|            }
  717|  1.74k|            // valid extlangs
  718|  1.74k|            extlang_end = end;
  719|  1.74k|            output.push('-');
  720|  1.74k|            output.extend(to_lowercase(subtag));
  721|  3.87k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  2.33k|            && subtag.len() == 4
  723|    626|            && is_alphabetic(subtag)
  724|    626|        {
  725|    626|            // Script
  726|    626|            script_end = end;
  727|    626|            output.push('-');
  728|    626|            output.extend(to_uppercase_first(subtag));
  729|    626|            state = State::AfterScript;
  730|  3.24k|        } else if (state == State::AfterLanguage
  731|  2.31k|            || state == State::AfterExtLang
  732|  1.54k|            || state == State::AfterScript)
  733|  2.21k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    791|                || subtag.len() == 3 && is_numeric(subtag))
  735|  1.42k|        {
  736|  1.42k|            // Region
  737|  1.42k|            region_end = end;
  738|  1.42k|            output.push('-');
  739|  1.42k|            output.extend(to_uppercase(subtag));
  740|  1.42k|            state = State::AfterRegion;
  741|  1.82k|        } else if (state == State::AfterLanguage
  742|  1.42k|            || state == State::AfterExtLang
  743|  1.11k|            || state == State::AfterScript
  744|  1.03k|            || state == State::AfterRegion)
  745|  1.82k|            && is_alphanumeric(subtag)
  746|  1.82k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|     10|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.81k|        {
  749|  1.81k|            // Variant
  750|  1.81k|            variant_end = end;
  751|  1.81k|            output.push('-');
  752|  1.81k|            output.extend(to_lowercase(subtag));
  753|  1.81k|            state = State::AfterRegion;
  754|  1.81k|        } else {
  755|     10|            return Err(LanguageTagParseError {
  756|     10|                kind: TagParseErrorKind::InvalidSubtag,
  757|     10|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  4.95k|    if let State::InExtension { expected: true } = state {
  763|      5|        return Err(LanguageTagParseError {
  764|      5|            kind: TagParseErrorKind::EmptyExtension,
  765|      5|        });
  766|  4.94k|    }
  767|  4.94k|    if let State::InPrivateUse { expected: true } = state {
  768|      1|        return Err(LanguageTagParseError {
  769|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|      1|        });
  771|  4.94k|    }
  772|  4.94k|
  773|  4.94k|    //We make sure we have not skipped anyone
  774|  4.94k|    if extlang_end < language_end {
  775|  4.03k|        extlang_end = language_end;
  776|  4.03k|    }
  777|  4.94k|    if script_end < extlang_end {
  778|  4.32k|        script_end = extlang_end;
  779|  4.32k|    }
  780|  4.94k|    if region_end < script_end {
  781|  3.52k|        region_end = script_end;
  782|  3.52k|    }
  783|  4.94k|    if variant_end < region_end {
  784|  4.14k|        variant_end = region_end;
  785|  4.14k|    }
  786|  4.94k|    if extension_end < variant_end {
  787|  4.57k|        extension_end = variant_end;
  788|  4.57k|    }
  789|       |
  790|  4.94k|    Ok(TagElementsPositions {
  791|  4.94k|        language_end,
  792|  4.94k|        extlang_end,
  793|  4.94k|        script_end,
  794|  4.94k|        region_end,
  795|  4.94k|        variant_end,
  796|  4.94k|        extension_end,
  797|  4.94k|    })
  798|  5.01k|}
_RNvCshcMSTkjQWky_10oxilangtag23is_alphanumeric_or_dashCsfAZ3rbceNnU_5oxrdf:
  875|    377|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    377|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    377|}
_RNvXsw_CshcMSTkjQWky_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCslfKEd1eBmR_4core4iter6traits8iterator8Iterator4nextCsfAZ3rbceNnU_5oxrdf:
  851|  19.1k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  19.1k|        let tag = self.split.next()?;
  853|  14.2k|        let tag_end = self.position + tag.len();
  854|  14.2k|        self.position = tag_end + 1;
  855|  14.2k|        Some((tag, tag_end))
  856|  19.1k|    }
_RNvCshcMSTkjQWky_10oxilangtag12to_lowercaseCsfAZ3rbceNnU_5oxrdf:
  892|  10.9k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  10.9k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  10.9k|}
_RNvXsE_CshcMSTkjQWky_10oxilangtagNtB5_16VoidOutputBufferNtNtCslfKEd1eBmR_4core7default7Default7defaultCsfAZ3rbceNnU_5oxrdf:
  547|  5.39k|#[derive(Default)]
_RNvCshcMSTkjQWky_10oxilangtag10is_numericCsfAZ3rbceNnU_5oxrdf:
  865|      4|fn is_numeric(s: &str) -> bool {
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
  867|      4|}
_RNvCshcMSTkjQWky_10oxilangtag12to_uppercaseCsfAZ3rbceNnU_5oxrdf:
  880|  1.42k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  1.42k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  1.42k|}
_RNvMsv_CshcMSTkjQWky_10oxilangtagNtB5_14SubTagIterator3newCsfAZ3rbceNnU_5oxrdf:
  839|  5.01k|    fn new(input: &'a str) -> Self {
  840|  5.01k|        Self {
  841|  5.01k|            split: input.split('-'),
  842|  5.01k|            position: 0,
  843|  5.01k|        }
  844|  5.01k|    }
_RNvXs_NvCshcMSTkjQWky_10oxilangtag13parse_langtagNtB4_5StateNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCsfAZ3rbceNnU_5oxrdf:
  625|  38.6k|    #[derive(PartialEq, Eq)]
_RNvCshcMSTkjQWky_10oxilangtag15is_alphanumericCsfAZ3rbceNnU_5oxrdf:
  870|  5.13k|fn is_alphanumeric(s: &str) -> bool {
  871|  5.13k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  5.13k|}
_RNvCshcMSTkjQWky_10oxilangtag18to_uppercase_firstCsfAZ3rbceNnU_5oxrdf:
  886|    626|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    626|    let mut chars = s.chars();
  888|    626|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    626|}
_RNvXsq_CshcMSTkjQWky_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsfAZ3rbceNnU_5oxrdf:
  552|  10.3k|    fn push(&mut self, _: char) {}
_RNvCshcMSTkjQWky_10oxilangtag13is_alphabeticCsfAZ3rbceNnU_5oxrdf:
  860|  10.5k|fn is_alphabetic(s: &str) -> bool {
  861|  10.5k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  10.5k|}
_RNCNvCshcMSTkjQWky_10oxilangtag15is_alphanumeric0B3_:
  871|  19.4k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCshcMSTkjQWky_10oxilangtag13is_alphabetic0B3_:
  861|  28.9k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCshcMSTkjQWky_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  5.15k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
_RNCNvCshcMSTkjQWky_10oxilangtag10is_numeric0B3_:
  866|      4|    s.chars().all(|x| x.is_ascii_digit())

_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsfAZ3rbceNnU_5oxrdf:
 1301|  1.07k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  1.71k|        loop {
 1303|  1.71k|            let c = self.input.next();
 1304|  1.07k|            match c {
 1305|  1.07k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  1.06k|                    self.output_positions.authority_end = self.output.len();
 1308|  1.06k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     16|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  1.07k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsfAZ3rbceNnU_5oxrdf:
 1410|   217k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|   217k|        if c == '%' {
 1412|  1.12k|            self.read_echar()
 1413|   216k|        } else if is_url_code_point(c) {
 1414|   216k|            self.output.push(c);
 1415|   216k|            Ok(())
 1416|       |        } else {
 1417|     28|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|   217k|    }
_RNvMsp_Cs3xZUOCJOIry_5oxiriINtB5_3IriNtNtCsfpddGpQNiKJ_5alloc6string6StringE10into_innerCsfAZ3rbceNnU_5oxrdf:
  568|  19.0k|    pub fn into_inner(self) -> T {
  569|  19.0k|        self.0.into_inner()
  570|  19.0k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsfAZ3rbceNnU_5oxrdf:
 1434|  1.33k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  1.33k|        let c1 = self.input.next();
 1436|  1.33k|        let c2 = self.input.next();
 1437|  1.33k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.31k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.31k|            self.output.push('%');
 1441|  1.31k|            self.output.push(c1.unwrap());
 1442|  1.31k|            self.output.push(c2.unwrap());
 1443|  1.31k|            Ok(())
 1444|       |        } else {
 1445|     19|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|     19|                Some('%'),
 1447|     19|                c1,
 1448|     19|                c2,
 1449|     19|            ]))
 1450|       |        }
 1451|  1.33k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsfAZ3rbceNnU_5oxrdf:
 1076|  19.5k|    fn parse(
 1077|  19.5k|        iri: &'a str,
 1078|  19.5k|        base: Option<IriRef<&'a str>>,
 1079|  19.5k|        output: &'a mut O,
 1080|  19.5k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  19.5k|        let mut parser = Self {
 1082|  19.5k|            iri,
 1083|  19.5k|            base,
 1084|  19.5k|            input: ParserInput {
 1085|  19.5k|                value: iri.chars(),
 1086|  19.5k|                position: 0,
 1087|  19.5k|            },
 1088|  19.5k|            output,
 1089|  19.5k|            output_positions: IriElementsPositions {
 1090|  19.5k|                scheme_end: 0,
 1091|  19.5k|                authority_end: 0,
 1092|  19.5k|                path_end: 0,
 1093|  19.5k|                query_end: 0,
 1094|  19.5k|            },
 1095|  19.5k|            input_scheme_end: 0,
 1096|  19.5k|        };
 1097|  19.5k|        parser.parse_scheme_start()?;
 1098|  19.4k|        Ok(parser.output_positions)
 1099|  19.5k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsfAZ3rbceNnU_5oxrdf:
 1141|  7.62k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  7.62k|        if self.input.starts_with('/') {
 1143|  7.19k|            self.input.next();
 1144|  7.19k|            self.output.push('/');
 1145|  7.19k|            self.parse_authority()
 1146|       |        } else {
 1147|    425|            self.output_positions.authority_end = self.output.len() - 1;
 1148|    425|            self.parse_path()
 1149|       |        }
 1150|  7.62k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsfAZ3rbceNnU_5oxrdf:
 1231|  7.19k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  63.3k|        loop {
 1234|  63.3k|            let c = self.input.next();
 1235|  63.3k|            match c {
 1236|       |                Some('@') => {
 1237|    460|                    self.output.push('@');
 1238|    460|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  6.73k|                    self.input = ParserInput {
 1242|  6.73k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  6.73k|                        position: self.input_scheme_end + 2,
 1244|  6.73k|                    };
 1245|  6.73k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  6.73k|                    return self.parse_host();
 1247|       |                }
 1248|  56.2k|                Some(c) => {
 1249|  56.2k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  7.19k|    }
_RNvMCs3xZUOCJOIry_5oxiriINtB2_6IriRefNtNtCsfpddGpQNiKJ_5alloc6string6StringE10into_innerCsfAZ3rbceNnU_5oxrdf:
  132|  19.0k|    pub fn into_inner(self) -> T {
  133|  19.0k|        self.iri
  134|  19.0k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsfAZ3rbceNnU_5oxrdf:
 1315|  7.12k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  7.12k|        match c {
 1317|       |            None => {
 1318|  1.50k|                self.output_positions.path_end = self.output.len();
 1319|  1.50k|                self.output_positions.query_end = self.output.len();
 1320|  1.50k|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    269|                self.output_positions.path_end = self.output.len();
 1324|    269|                self.output.push('?');
 1325|    269|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    252|                self.output_positions.path_end = self.output.len();
 1329|    252|                self.output_positions.query_end = self.output.len();
 1330|    252|                self.output.push('#');
 1331|    252|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  5.10k|                self.output.push('/');
 1335|  5.10k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  7.12k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsfAZ3rbceNnU_5oxrdf:
 1422|  5.96k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  5.96k|        if c == '%' {
 1424|    206|            self.read_echar()
 1425|  5.75k|        } else if is_url_query_code_point(c) {
 1426|  5.74k|            self.output.push(c);
 1427|  5.74k|            Ok(())
 1428|       |        } else {
 1429|     12|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  5.96k|    }
_RNCNvMs11_Cs3xZUOCJOIry_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsfAZ3rbceNnU_5oxrdf:
 1438|  1.31k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsfAZ3rbceNnU_5oxrdf:
 1394|  5.31k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  39.0k|        while let Some(c) = self.input.next() {
 1396|  33.7k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  5.29k|        Ok(())
 1399|  5.31k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsfAZ3rbceNnU_5oxrdf:
 1109|  19.0k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  60.6k|        loop {
 1111|  60.6k|            let c = self.input.next();
 1112|  60.6k|            match c {
 1113|  60.6k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  41.5k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  19.0k|                    self.output.push(':');
 1118|  19.0k|                    self.output_positions.scheme_end = self.output.len();
 1119|  19.0k|                    self.input_scheme_end = self.input.position;
 1120|  19.0k|                    return if self.input.starts_with('/') {
 1121|  7.45k|                        self.input.next();
 1122|  7.45k|                        self.output.push('/');
 1123|  7.45k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  11.5k|                        self.output_positions.authority_end = self.output.len();
 1126|  11.5k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|     47|                    self.input = ParserInput {
 1131|     47|                        value: self.iri.chars(),
 1132|     47|                        position: 0,
 1133|     47|                    }; // reset
 1134|     47|                    self.output.clear();
 1135|     47|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  19.0k|    }
_RNvMsp_Cs3xZUOCJOIry_5oxiriINtB5_3IriNtNtCsfpddGpQNiKJ_5alloc6string6StringE5parseCsfAZ3rbceNnU_5oxrdf:
  501|  19.5k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|  19.5k|        IriRef::parse(iri)?.try_into()
  503|  19.5k|    }
_RNvMCs3xZUOCJOIry_5oxiriINtB2_6IriRefNtNtCsfpddGpQNiKJ_5alloc6string6StringE5parseCsfAZ3rbceNnU_5oxrdf:
   55|  19.5k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  19.5k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  19.4k|        Ok(Self { iri, positions })
   58|  19.5k|    }
_RNvMCs3xZUOCJOIry_5oxiriINtB2_6IriRefNtNtCsfpddGpQNiKJ_5alloc6string6StringE11is_absoluteCsfAZ3rbceNnU_5oxrdf:
  146|  19.4k|    pub fn is_absolute(&self) -> bool {
  147|  19.4k|        self.positions.scheme_end != 0
  148|  19.4k|    }
_RNCNvMs11_Cs3xZUOCJOIry_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsfAZ3rbceNnU_5oxrdf:
 1437|  1.32k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsfAZ3rbceNnU_5oxrdf:
 1344|  17.4k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  96.1k|        loop {
 1346|  96.1k|            let c = self.input.next();
 1347|  96.1k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  22.8k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  22.8k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  22.8k|                    } else if c == Some('/') {
 1357|  5.41k|                        self.output.push('/');
 1358|  17.4k|                    }
 1359|       |
 1360|  22.8k|                    if c == Some('?') {
 1361|    494|                        self.output_positions.path_end = self.output.len();
 1362|    494|                        self.output.push('?');
 1363|    494|                        return self.parse_query();
 1364|  22.3k|                    } else if c == Some('#') {
 1365|  4.97k|                        self.output_positions.path_end = self.output.len();
 1366|  4.97k|                        self.output_positions.query_end = self.output.len();
 1367|  4.97k|                        self.output.push('#');
 1368|  4.97k|                        return self.parse_fragment();
 1369|  17.3k|                    } else if c == None {
 1370|  11.9k|                        self.output_positions.path_end = self.output.len();
 1371|  11.9k|                        self.output_positions.query_end = self.output.len();
 1372|  11.9k|                        return Ok(());
 1373|  5.41k|                    }
 1374|       |                }
 1375|  73.2k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  17.4k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsfAZ3rbceNnU_5oxrdf:
 1380|    763|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  6.71k|        while let Some(c) = self.input.next() {
 1382|  6.05k|            if c == '#' {
 1383|     91|                self.output_positions.query_end = self.output.len();
 1384|     91|                self.output.push('#');
 1385|     91|                return self.parse_fragment();
 1386|       |            } else {
 1387|  5.96k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    659|        self.output_positions.query_end = self.output.len();
 1391|    659|        Ok(())
 1392|    763|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCsfAZ3rbceNnU_5oxrdf:
 1152|    529|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|    529|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|    529|            self.output_positions.scheme_end = 0;
 1201|    529|            self.input_scheme_end = 0;
 1202|    529|            if self.input.starts_with('/') {
 1203|    167|                self.input.next();
 1204|    167|                self.output.push('/');
 1205|    167|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|    362|                self.output_positions.authority_end = 0;
 1208|    362|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|    529|    }
_RINvMs11_Cs3xZUOCJOIry_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECsfAZ3rbceNnU_5oxrdf:
 1454|    119|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|    119|        Err(IriParseError { kind })
 1456|    119|    }
_RNvXsV_Cs3xZUOCJOIry_5oxiriINtB5_3IriNtNtCsfpddGpQNiKJ_5alloc6string6StringEINtNtCslfKEd1eBmR_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsfAZ3rbceNnU_5oxrdf:
  871|  19.4k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  19.4k|        if iri.is_absolute() {
  873|  19.0k|            Ok(Self(iri))
  874|       |        } else {
  875|    414|            Err(IriParseError {
  876|    414|                kind: IriParseErrorKind::NoScheme,
  877|    414|            })
  878|       |        }
  879|  19.4k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsfAZ3rbceNnU_5oxrdf:
 1101|  19.5k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  19.5k|        match self.input.front() {
 1103|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  19.5k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|    482|            _ => self.parse_relative(),
 1106|       |        }
 1107|  19.5k|    }
_RNvMs11_Cs3xZUOCJOIry_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsfAZ3rbceNnU_5oxrdf:
 1255|  7.19k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  7.19k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|     43|            let start_position = self.input.position;
 1259|  1.00k|            while let Some(c) = self.input.next() {
 1260|    961|                self.output.push(c);
 1261|    961|                if c == ']' {
 1262|      2|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      2|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      2|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|    959|                }
 1280|       |            }
 1281|     41|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  61.3k|            loop {
 1285|  61.3k|                let c = self.input.next();
 1286|  61.3k|                match c {
 1287|       |                    Some(':') => {
 1288|  1.07k|                        self.output.push(':');
 1289|  1.07k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  6.06k|                        self.output_positions.authority_end = self.output.len();
 1293|  6.06k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  54.2k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  7.19k|    }
_RNvMs10_Cs3xZUOCJOIry_5oxiriNtB6_11ParserInput5frontCsfAZ3rbceNnU_5oxrdf:
 1053|  19.5k|    fn front(&self) -> Option<char> {
 1054|  19.5k|        self.value.clone().next()
 1055|  19.5k|    }
_RNvXsY_Cs3xZUOCJOIry_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsfAZ3rbceNnU_5oxrdf:
  985|     47|    fn clear(&mut self) {
  986|     47|        self.len = 0;
  987|     47|    }
_RNvMs10_Cs3xZUOCJOIry_5oxiriNtB6_11ParserInput11starts_withCsfAZ3rbceNnU_5oxrdf:
 1058|  34.3k|    fn starts_with(&self, c: char) -> bool {
 1059|  34.3k|        self.value.as_str().starts_with(c)
 1060|  34.3k|    }
_RNvXs1b_Cs3xZUOCJOIry_5oxiriNtB6_16VoidOutputBufferNtNtCslfKEd1eBmR_4core7default7Default7defaultCsfAZ3rbceNnU_5oxrdf:
  968|  19.5k|#[derive(Default)]
_RNvXsY_Cs3xZUOCJOIry_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsfAZ3rbceNnU_5oxrdf:
  990|  6.73k|    fn truncate(&mut self, new_len: usize) {
  991|  6.73k|        self.len = new_len;
  992|  6.73k|    }
_RNvXsY_Cs3xZUOCJOIry_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsfAZ3rbceNnU_5oxrdf:
  995|  77.0k|    fn len(&self) -> usize {
  996|  77.0k|        self.len
  997|  77.0k|    }
_RNvXsY_Cs3xZUOCJOIry_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsfAZ3rbceNnU_5oxrdf:
 1000|  45.7k|    fn as_str(&self) -> &str {
 1001|  45.7k|        ""
 1002|  45.7k|    }
_RNvXsY_Cs3xZUOCJOIry_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsfAZ3rbceNnU_5oxrdf:
  975|   321k|    fn push(&mut self, c: char) {
  976|   321k|        self.len += c.len_utf8();
  977|   321k|    }
_RNvMs10_Cs3xZUOCJOIry_5oxiriNtB6_11ParserInput4nextCsfAZ3rbceNnU_5oxrdf:
 1043|   347k|    fn next(&mut self) -> Option<char> {
 1044|   347k|        if let Some(head) = self.value.next() {
 1045|   326k|            self.position += head.len_utf8();
 1046|   326k|            Some(head)
 1047|       |        } else {
 1048|  20.5k|            None
 1049|       |        }
 1050|   347k|    }
_RNvCs3xZUOCJOIry_5oxiri17is_url_code_point:
 1459|   222k|fn is_url_code_point(c: char) -> bool {
 1460|   222k|    matches!(c,
 1461|   133k|        'a'..='z'
 1462|  25.3k|        | 'A'..='Z'
 1463|  45.0k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  3.44k|        | '\u{A0}'..='\u{D7FF}'
 1484|    799|        | '\u{F900}'..='\u{FDCF}'
 1485|    797|        | '\u{FDF0}'..='\u{FFEF}'
 1486|    797|        | '\u{10000}'..='\u{1FFFD}'
 1487|    797|        | '\u{20000}'..='\u{2FFFD}'
 1488|    797|        | '\u{30000}'..='\u{3FFFD}'
 1489|    797|        | '\u{40000}'..='\u{4FFFD}'
 1490|    795|        | '\u{50000}'..='\u{5FFFD}'
 1491|    795|        | '\u{60000}'..='\u{6FFFD}'
 1492|    795|        | '\u{70000}'..='\u{7FFFD}'
 1493|    795|        | '\u{80000}'..='\u{8FFFD}'
 1494|    794|        | '\u{90000}'..='\u{9FFFD}'
 1495|    794|        | '\u{A0000}'..='\u{AFFFD}'
 1496|    794|        | '\u{B0000}'..='\u{BFFFD}'
 1497|    794|        | '\u{C0000}'..='\u{CFFFD}'
 1498|    161|        | '\u{D0000}'..='\u{DFFFD}'
 1499|    155|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|   222k|}
_RNvCs3xZUOCJOIry_5oxiri23is_url_query_code_point:
 1503|  5.75k|fn is_url_query_code_point(c: char) -> bool {
 1504|  5.75k|    is_url_code_point(c)
 1505|    138|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  5.75k|}

_RNvNtCslW5pmdEUwJH_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  3.00k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  3.00k|    let parser = QueryResultsParser::from_format(format);
    8|  3.00k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  3.00k|    let Ok(reader) = parser.read_results(data) else {
   11|    174|        return;
   12|       |    };
   13|  2.83k|    match reader {
   14|  2.83k|        QueryResultsReader::Solutions(solutions) => {
   15|  2.83k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|  1.31k|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|  1.51k|            let mut writer = serializer
   21|  1.51k|                .solutions_writer(
   22|  1.51k|                    Vec::new(),
   23|  1.51k|                    solutions
   24|  1.51k|                        .get(0)
   25|  1.51k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|  1.51k|                )
   27|  1.51k|                .unwrap();
   28|  34.5k|            for solution in &solutions {
   29|  33.0k|                writer.write(solution).unwrap();
   30|  33.0k|            }
   31|  1.51k|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|  1.51k|            if let QueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|  1.51k|                .read_results(serialized.as_bytes())
   36|  1.51k|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|  1.51k|                .unwrap()
   38|       |            {
   39|  1.51k|                assert_eq!(
   40|  1.51k|                    roundtrip_solutions
   41|  1.51k|                        .collect::<Result<Vec<_>, _>>()
   42|  1.51k|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|  1.51k|                        .unwrap(),
   44|  1.51k|                    solutions
   45|  1.51k|                )
   46|      0|            }
   47|       |        }
   48|      3|        QueryResultsReader::Boolean(value) => {
   49|      3|            // We try to write again
   50|      3|            let mut serialized = Vec::new();
   51|      3|            serializer
   52|      3|                .write_boolean_result(&mut serialized, value)
   53|      3|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      3|            if let QueryResultsReader::Boolean(roundtrip_value) =
   57|      3|                parser.read_results(serialized.as_slice()).unwrap()
   58|       |            {
   59|      3|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  3.00k|}
_RNCNvNtCslW5pmdEUwJH_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|  1.45k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMs1_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCslW5pmdEUwJH_13oxigraph_fuzz:
  176|  8.85k|    pub fn as_str(self) -> &'a str {
  177|  8.85k|        match self.0 {
  178|  2.92k|            BlankNodeRefContent::Named(id) => id,
  179|  5.93k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  8.85k|    }
_RNvMNtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCslW5pmdEUwJH_13oxigraph_fuzz:
   92|  8.85k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   93|  8.85k|        BlankNodeRef(match &self.0 {
   94|  2.92k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   95|  5.93k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   96|  5.93k|                id: *id,
   97|  5.93k|                str: str.as_str(),
   98|  5.93k|            },
   99|       |        })
  100|  8.85k|    }
_RNvMs7_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCslW5pmdEUwJH_13oxigraph_fuzz:
  259|  5.93k|    fn as_str(&self) -> &str {
  260|  5.93k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  261|  5.93k|        str::from_utf8(&self.0[..len]).unwrap()
  262|  5.93k|    }
_RNvXsd_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
   24|  17.7k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsF_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB5_5IdStrNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
  247|  11.8k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsi_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
   27|  17.7k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvNtCsfAZ3rbceNnU_5oxrdf10blank_node30validate_blank_node_identifier:
  265|  18.2k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  266|  18.2k|    let mut chars = id.chars();
  267|  18.2k|    let front = chars.next().ok_or(BlankNodeIdParseError {})?;
  268|  18.2k|    match front {
  269|  18.2k|        '0'..='9'
  270|       |        | '_'
  271|       |        | ':'
  272|  2.71k|        | 'A'..='Z'
  273|  2.39k|        | 'a'..='z'
  274|    670|        | '\u{00C0}'..='\u{00D6}'
  275|    670|        | '\u{00D8}'..='\u{00F6}'
  276|    668|        | '\u{00F8}'..='\u{02FF}'
  277|    599|        | '\u{0370}'..='\u{037D}'
  278|    599|        | '\u{037F}'..='\u{1FFF}'
  279|    548|        | '\u{200C}'..='\u{200D}'
  280|    548|        | '\u{2070}'..='\u{218F}'
  281|    486|        | '\u{2C00}'..='\u{2FEF}'
  282|    486|        | '\u{3001}'..='\u{D7FF}'
  283|    368|        | '\u{F900}'..='\u{FDCF}'
  284|    368|        | '\u{FDF0}'..='\u{FFFD}'
  285|  18.2k|        | '\u{10000}'..='\u{EFFFF}' => (),
  286|      4|        _ => return Err(BlankNodeIdParseError {}),
  287|       |    }
  288|   188k|    for c in chars {
  289|   169k|        match c {
  290|       |            '.' // validated later
  291|       |            | '-'
  292|   165k|            | '0'..='9'
  293|       |            | '\u{00B7}'
  294|  5.23k|            | '\u{0300}'..='\u{036F}'
  295|  1.07k|            | '\u{203F}'..='\u{2040}'
  296|       |            | '_'
  297|       |            | ':'
  298|  21.6k|            | 'A'..='Z'
  299|  16.9k|            | 'a'..='z'
  300|  5.25k|            | '\u{00C0}'..='\u{00D6}'
  301|  5.25k|            | '\u{00D8}'..='\u{00F6}'
  302|  5.25k|            | '\u{00F8}'..='\u{02FF}'
  303|  5.23k|            | '\u{0370}'..='\u{037D}'
  304|  5.23k|            | '\u{037F}'..='\u{1FFF}'
  305|  1.07k|            | '\u{200C}'..='\u{200D}'
  306|  1.07k|            | '\u{2070}'..='\u{218F}'
  307|  1.01k|            | '\u{2C00}'..='\u{2FEF}'
  308|  1.01k|            | '\u{3001}'..='\u{D7FF}'
  309|    840|            | '\u{F900}'..='\u{FDCF}'
  310|    840|            | '\u{FDF0}'..='\u{FFFD}'
  311|   169k|            | '\u{10000}'..='\u{EFFFF}' => (),
  312|      7|            _ => return Err(BlankNodeIdParseError {}),
  313|       |        }
  314|       |    }
  315|       |
  316|       |    // Could not end with a dot
  317|  18.2k|    if id.ends_with('.') {
  318|      5|        Err(BlankNodeIdParseError {})
  319|       |    } else {
  320|  18.2k|        Ok(())
  321|       |    }
  322|  18.2k|}
_RNvMNtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   66|  12.1k|    pub fn new_from_unique_id(id: u128) -> Self {
   67|  12.1k|        Self(BlankNodeContent::Anonymous {
   68|  12.1k|            id,
   69|  12.1k|            str: IdStr::new(id),
   70|  12.1k|        })
   71|  12.1k|    }
_RNvMs7_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  252|  12.1k|    fn new(id: u128) -> Self {
  253|  12.1k|        let mut str = [0; 32];
  254|  12.1k|        write!(&mut str[..], "{id:x}").unwrap();
  255|  12.1k|        Self(str)
  256|  12.1k|    }
_RNvNtCsfAZ3rbceNnU_5oxrdf10blank_node13to_integer_idB3_:
  325|  18.2k|fn to_integer_id(id: &str) -> Option<u128> {
  326|  18.2k|    let digits = id.as_bytes();
  327|  18.2k|    let mut value: u128 = 0;
  328|  18.2k|    if let None | Some(b'0') = digits.first() {
  329|  1.21k|        return None; // No empty string or leading zeros
  330|  17.0k|    }
  331|   173k|    for digit in digits {
  332|   161k|        value = value.checked_mul(16)?.checked_add(
  333|   161k|            match *digit {
  334|   161k|                b'0'..=b'9' => digit - b'0',
  335|  13.3k|                b'a'..=b'f' => digit - b'a' + 10,
  336|  4.69k|                _ => return None,
  337|       |            }
  338|   156k|            .into(),
  339|      0|        )?;
  340|       |    }
  341|  12.1k|    Some(value)
  342|  18.2k|}
_RINvMNtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCsfpddGpQNiKJ_5alloc6string6StringEB5_:
   53|  18.2k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  18.2k|        let id = id.into();
   55|  18.2k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|  12.1k|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  6.10k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  18.2k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   40|  18.2k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   41|  18.2k|        let id = id.into();
   42|  18.2k|        validate_blank_node_identifier(&id)?;
   43|  18.2k|        Ok(Self::new_unchecked(id))
   44|  18.2k|    }
_RNCNvMs7_NtCsfAZ3rbceNnU_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  260|  79.0k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMst_NtCsfAZ3rbceNnU_5oxrdf7literalNtB5_10LiteralRef5valueCslW5pmdEUwJH_13oxigraph_fuzz:
  491|  14.9k|    pub fn value(self) -> &'a str {
  492|  14.9k|        match self.0 {
  493|    832|            LiteralRefContent::String(value)
  494|  2.28k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  495|  14.9k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  496|  14.9k|        }
  497|  14.9k|    }
_RNvMst_NtCsfAZ3rbceNnU_5oxrdf7literalNtB5_10LiteralRef8languageCslW5pmdEUwJH_13oxigraph_fuzz:
  504|  14.9k|    pub fn language(self) -> Option<&'a str> {
  505|  14.9k|        match self.0 {
  506|  2.28k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  507|  12.6k|            _ => None,
  508|       |        }
  509|  14.9k|    }
_RNvMst_NtCsfAZ3rbceNnU_5oxrdf7literalNtB5_10LiteralRef8datatypeCslW5pmdEUwJH_13oxigraph_fuzz:
  516|  12.6k|    pub fn datatype(self) -> NamedNodeRef<'a> {
  517|  12.6k|        match self.0 {
  518|    832|            LiteralRefContent::String(_) => xsd::STRING,
  519|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  520|  11.8k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  521|       |        }
  522|  12.6k|    }
_RNvMNtCsfAZ3rbceNnU_5oxrdf7literalNtB2_7Literal6as_refCslW5pmdEUwJH_13oxigraph_fuzz:
  132|  14.9k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  133|  14.9k|        LiteralRef(match &self.0 {
  134|    832|            LiteralContent::String(value) => LiteralRefContent::String(value),
  135|  2.28k|            LiteralContent::LanguageTaggedString { value, language } => {
  136|  2.28k|                LiteralRefContent::LanguageTaggedString { value, language }
  137|       |            }
  138|  11.8k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  139|  11.8k|                value,
  140|  11.8k|                datatype: datatype.as_ref(),
  141|  11.8k|            },
  142|       |        })
  143|  14.9k|    }
_RNvXsD_NtCsfAZ3rbceNnU_5oxrdf7literalNtB5_7LiteralNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
   37|  29.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsfAZ3rbceNnU_5oxrdf7literalNtB5_14LiteralContentNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
   40|  29.8k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsfAZ3rbceNnU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsfpddGpQNiKJ_5alloc6string6StringEB5_:
   50|  1.74k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  1.74k|        Self(LiteralContent::String(value.into()))
   52|  1.74k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsfpddGpQNiKJ_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   56|  5.47k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  5.47k|        let value = value.into();
   58|  5.47k|        let datatype = datatype.into();
   59|  5.47k|        Self(if datatype == xsd::STRING {
   60|     66|            LiteralContent::String(value)
   61|       |        } else {
   62|  5.40k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  5.47k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsfpddGpQNiKJ_5alloc6string6StringB1n_EB5_:
   88|  5.32k|    pub fn new_language_tagged_literal_unchecked(
   89|  5.32k|        value: impl Into<String>,
   90|  5.32k|        language: impl Into<String>,
   91|  5.32k|    ) -> Self {
   92|  5.32k|        Self(LiteralContent::LanguageTaggedString {
   93|  5.32k|            value: value.into(),
   94|  5.32k|            language: language.into(),
   95|  5.32k|        })
   96|  5.32k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCsfpddGpQNiKJ_5alloc6string6StringReEB5_:
   68|  5.39k|    pub fn new_language_tagged_literal(
   69|  5.39k|        value: impl Into<String>,
   70|  5.39k|        language: impl Into<String>,
   71|  5.39k|    ) -> Result<Self, LanguageTagParseError> {
   72|  5.39k|        let mut language = language.into();
   73|  5.39k|        language.make_ascii_lowercase();
   74|  5.39k|        Ok(Self::new_language_tagged_literal_unchecked(
   75|  5.39k|            value,
   76|  5.39k|            LanguageTag::parse(language)?.into_inner(),
   77|       |        ))
   78|  5.39k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  19.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  19.3k|        let value = value.into();
   58|  19.3k|        let datatype = datatype.into();
   59|  19.3k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  19.3k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  19.3k|    }

_RNvMs4_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCslW5pmdEUwJH_13oxigraph_fuzz:
  133|  10.2k|    pub const fn as_str(self) -> &'a str {
  134|  10.2k|        self.iri
  135|  10.2k|    }
_RNvMNtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB2_9NamedNode6as_refCslW5pmdEUwJH_13oxigraph_fuzz:
   54|  17.5k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  17.5k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  17.5k|    }
_RNvMs4_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCslW5pmdEUwJH_13oxigraph_fuzz:
  128|  17.5k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  17.5k|        Self { iri }
  130|  17.5k|    }
_RNvXsj_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
   17|  35.1k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs6_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCslfKEd1eBmR_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  19.3k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  19.3k|        node.into_owned()
  154|  19.3k|    }
_RNvMNtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  24.8k|    pub fn as_str(&self) -> &str {
   45|  24.8k|        self.iri.as_str()
   46|  24.8k|    }
_RNvMs4_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  24.8k|    pub const fn as_str(self) -> &'a str {
  134|  24.8k|        self.iri
  135|  24.8k|    }
_RNvMs4_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  19.3k|    pub fn into_owned(self) -> NamedNode {
  139|  19.3k|        NamedNode::new_unchecked(self.iri)
  140|  19.3k|    }
_RNvXs9_NtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCslfKEd1eBmR_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  24.8k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  24.8k|        self.as_str() == other.as_str()
  175|  24.8k|    }
_RNvMNtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  19.0k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  19.0k|        Self::new_unchecked(iri.into_inner())
   31|  19.0k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  19.3k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  19.3k|        Self { iri: iri.into() }
   41|  19.3k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  19.5k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  19.5k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  19.5k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsfpddGpQNiKJ_5alloc6string6StringEB5_:
   39|  19.0k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  19.0k|        Self { iri: iri.into() }
   41|  19.0k|    }

_RNvXs3_NtCsfAZ3rbceNnU_5oxrdf6parserNtB5_14TermParseErrorNtNtCslfKEd1eBmR_4core3fmt7Display3fmtCslW5pmdEUwJH_13oxigraph_fuzz:
  414|    110|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  415|    110|        match &self.kind {
  416|      0|            TermParseErrorKind::Iri { error, value } => {
  417|      0|                write!(f, "Error while parsing the named node '{value}': {error}")
  418|       |            }
  419|      0|            TermParseErrorKind::BlankNode { error, value } => {
  420|      0|                write!(f, "Error while parsing the blank node '{value}': {error}")
  421|       |            }
  422|      0|            TermParseErrorKind::LanguageTag { error, value } => {
  423|      0|                write!(f, "Error while parsing the language tag '{value}': {error}")
  424|       |            }
  425|     13|            TermParseErrorKind::Variable { error, value } => {
  426|     13|                write!(f, "Error while parsing the variable '{value}': {error}")
  427|       |            }
  428|     97|            TermParseErrorKind::Msg { msg } => f.write_str(msg),
  429|       |        }
  430|    110|    }
_RNvXs1_NtCsfAZ3rbceNnU_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCslfKEd1eBmR_4core3str6traits7FromStr8from_str:
  103|  49.4k|    fn from_str(s: &str) -> Result<Self, TermParseError> {
  104|  49.4k|        let (term, left) = read_term(s, 0)?;
  105|  48.3k|        if !left.is_empty() {
  106|     73|            return Err(TermParseError::msg("Invalid term serialization"));
  107|  48.2k|        }
  108|  48.2k|        Ok(term)
  109|  49.4k|    }
_RNvXs2_NtCsfAZ3rbceNnU_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCslfKEd1eBmR_4core3str6traits7FromStr8from_str:
  123|  3.51k|    fn from_str(s: &str) -> Result<Self, TermParseError> {
  124|  3.51k|        if !s.starts_with('?') && !s.starts_with('$') {
  125|     97|            return Err(TermParseError::msg(
  126|     97|                "Variable serialization should start with ? or $",
  127|     97|            ));
  128|  3.41k|        }
  129|  3.41k|        Self::new(&s[1..]).map_err(|error| TermParseError {
  130|       |            kind: TermParseErrorKind::Variable {
  131|       |                value: s.to_owned(),
  132|       |                error,
  133|       |            },
  134|  3.41k|        })
  135|  3.51k|    }
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser12read_literals_0B5_:
  200|     68|                                |error| TermParseError {
  201|     68|                                    kind: TermParseErrorKind::LanguageTag {
  202|     68|                                        value: language.to_owned(),
  203|     68|                                        error,
  204|     68|                                    },
  205|     68|                                },
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser14read_hexa_char0B5_:
  380|      2|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser15read_blank_node0B5_:
  164|   190k|            .find(|v: char| {
  165|   190k|                v.is_whitespace()
  166|   189k|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  167|   190k|            })
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser15read_named_node0B5_:
  143|     41|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser15read_blank_nodes_0B5_:
  170|     56|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  171|     56|            kind: TermParseErrorKind::BlankNode {
  172|     56|                value: value.to_owned(),
  173|     56|                error,
  174|     56|            },
  175|     56|        })?;
_RNCNvXs2_NtCsfAZ3rbceNnU_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCslfKEd1eBmR_4core3str6traits7FromStr8from_str0B9_:
  129|     13|        Self::new(&s[1..]).map_err(|error| TermParseError {
  130|     13|            kind: TermParseErrorKind::Variable {
  131|     13|                value: s.to_owned(),
  132|     13|                error,
  133|     13|            },
  134|     13|        })
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser12read_literal0B5_:
  195|  61.7k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsfAZ3rbceNnU_5oxrdf6parser15read_named_nodes_0B5_:
  146|    533|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  147|    533|            kind: TermParseErrorKind::Iri {
  148|    533|                value: value.to_owned(),
  149|    533|                error,
  150|    533|            },
  151|    533|        })?;
_RNvNtCsfAZ3rbceNnU_5oxrdf6parser15read_blank_node:
  160|  18.2k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  161|  18.2k|    let s = s.trim();
  162|  18.2k|    if let Some(remain) = s.strip_prefix("_:") {
  163|  18.2k|        let end = remain
  164|  18.2k|            .find(|v: char| {
  165|       |                v.is_whitespace()
  166|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  167|  18.2k|            })
  168|  18.2k|            .unwrap_or(remain.len());
  169|  18.2k|        let (value, remain) = remain.split_at(end);
  170|  18.2k|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  171|       |            kind: TermParseErrorKind::BlankNode {
  172|       |                value: value.to_owned(),
  173|       |                error,
  174|       |            },
  175|  18.2k|        })?;
  176|  18.2k|        Ok((term, remain))
  177|       |    } else {
  178|      4|        Err(TermParseError::msg(
  179|      4|            "Blank node serialization should start with '_:'",
  180|      4|        ))
  181|       |    }
  182|  18.2k|}
_RNvNtCsfAZ3rbceNnU_5oxrdf6parser9read_term:
  305|  67.6k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  306|  67.6k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  307|      1|        return Err(TermParseError::msg(
  308|      1|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  309|      1|        ));
  310|  67.6k|    }
  311|  67.6k|    let s = s.trim();
  312|       |    #[allow(unused_variables)]
  313|  67.6k|    if let Some(remain) = s.strip_prefix("<<") {
  314|       |        #[cfg(feature = "rdf-star")]
  315|       |        {
  316|  10.6k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  317|  7.67k|            let (predicate, remain) = read_named_node(remain)?;
  318|  7.59k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  319|  6.83k|            let remain = remain.trim_start();
  320|  6.83k|            if let Some(remain) = remain.strip_prefix(">>") {
  321|       |                Ok((
  322|       |                    Triple {
  323|  6.77k|                        subject: match subject {
  324|  2.88k|                            Term::NamedNode(s) => s.into(),
  325|  1.16k|                            Term::BlankNode(s) => s.into(),
  326|       |                            Term::Literal(_) => {
  327|      1|                                return Err(TermParseError::msg(
  328|      1|                                    "Literals are not allowed in subject position",
  329|      1|                                ))
  330|       |                            }
  331|  2.73k|                            Term::Triple(s) => Subject::Triple(s),
  332|       |                        },
  333|  6.77k|                        predicate,
  334|  6.77k|                        object,
  335|  6.77k|                    }
  336|  6.77k|                    .into(),
  337|  6.77k|                    remain,
  338|       |                ))
  339|       |            } else {
  340|     66|                Err(TermParseError::msg(
  341|     66|                    "Nested triple serialization should be enclosed between << and >>",
  342|     66|                ))
  343|       |            }
  344|       |        }
  345|       |        #[cfg(not(feature = "rdf-star"))]
  346|       |        {
  347|       |            Err(TermParseError::msg("RDF-star is not supported"))
  348|       |        }
  349|  57.0k|    } else if s.starts_with('<') {
  350|  6.48k|        let (term, remain) = read_named_node(s)?;
  351|  5.94k|        Ok((term.into(), remain))
  352|  50.5k|    } else if s.starts_with('_') {
  353|  18.2k|        let (term, remain) = read_blank_node(s)?;
  354|  18.2k|        Ok((term.into(), remain))
  355|       |    } else {
  356|  32.2k|        let (term, remain) = read_literal(s)?;
  357|  31.9k|        Ok((term.into(), remain))
  358|       |    }
  359|  67.6k|}
_RNvNtCsfAZ3rbceNnU_5oxrdf6parser12read_literal:
  184|  32.2k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  185|  32.2k|    let s = s.trim();
  186|  32.2k|    if let Some(s) = s.strip_prefix('"') {
  187|  12.7k|        let mut value = String::with_capacity(s.len());
  188|  12.7k|        let mut chars = s.chars();
  189|  71.2k|        while let Some(c) = chars.next() {
  190|  71.2k|            match c {
  191|       |                '"' => {
  192|  12.6k|                    let remain = chars.as_str();
  193|  12.6k|                    return if let Some(remain) = remain.strip_prefix('@') {
  194|  5.39k|                        let end = remain
  195|  5.39k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  196|  5.39k|                            .unwrap_or(remain.len());
  197|  5.39k|                        let (language, remain) = remain.split_at(end);
  198|  5.39k|                        Ok((
  199|  5.39k|                            Literal::new_language_tagged_literal(value, language).map_err(
  200|  5.39k|                                |error| TermParseError {
  201|       |                                    kind: TermParseErrorKind::LanguageTag {
  202|       |                                        value: language.to_owned(),
  203|       |                                        error,
  204|       |                                    },
  205|  5.39k|                                },
  206|  5.39k|                            )?,
  207|  5.32k|                            remain,
  208|       |                        ))
  209|  7.22k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  210|  5.47k|                        let (datatype, remain) = read_named_node(remain)?;
  211|  5.47k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  212|       |                    } else {
  213|  1.74k|                        Ok((Literal::new_simple_literal(value), remain))
  214|       |                    };
  215|       |                }
  216|       |                '\\' => {
  217|  6.37k|                    if let Some(c) = chars.next() {
  218|  6.37k|                        value.push(match c {
  219|    692|                            't' => '\t',
  220|    224|                            'b' => '\u{8}',
  221|    645|                            'n' => '\n',
  222|  1.08k|                            'r' => '\r',
  223|    196|                            'f' => '\u{C}',
  224|    625|                            '"' => '"',
  225|    194|                            '\'' => '\'',
  226|  2.08k|                            '\\' => '\\',
  227|    351|                            'u' => read_hexa_char(&mut chars, 4)?,
  228|    269|                            'U' => read_hexa_char(&mut chars, 8)?,
  229|      6|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  230|       |                        })
  231|       |                    } else {
  232|      3|                        return Err(TermParseError::msg("Unexpected literal end"));
  233|       |                    }
  234|       |                }
  235|  52.2k|                c => value.push(c),
  236|       |            }
  237|       |        }
  238|     73|        Err(TermParseError::msg("Unexpected literal end"))
  239|  19.5k|    } else if let Some(remain) = s.strip_prefix("true") {
  240|  1.44k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  241|  18.0k|    } else if let Some(remain) = s.strip_prefix("false") {
  242|    555|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  243|       |    } else {
  244|  17.5k|        let input = s.as_bytes();
  245|  17.5k|        if input.is_empty() {
  246|     46|            return Err(TermParseError::msg("Empty term serialization"));
  247|  17.4k|        }
  248|       |
  249|  17.4k|        let mut cursor = match input.first() {
  250|  1.55k|            Some(b'+' | b'-') => 1,
  251|  15.9k|            _ => 0,
  252|       |        };
  253|  17.4k|        let mut with_dot = false;
  254|  17.4k|
  255|  17.4k|        let mut count_before: usize = 0;
  256|  61.6k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  257|  44.2k|            count_before += 1;
  258|  44.2k|            cursor += 1;
  259|  44.2k|        }
  260|       |
  261|  17.4k|        let mut count_after: usize = 0;
  262|  17.4k|        if cursor < input.len() && input[cursor] == b'.' {
  263|  4.55k|            with_dot = true;
  264|  4.55k|            cursor += 1;
  265|  20.1k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  266|  15.6k|                count_after += 1;
  267|  15.6k|                cursor += 1;
  268|  15.6k|            }
  269|  12.9k|        }
  270|       |
  271|  17.4k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  272|  3.59k|            cursor += 1;
  273|  3.59k|            cursor += match input.get(cursor) {
  274|    147|                Some(b'+' | b'-') => 1,
  275|  3.44k|                _ => 0,
  276|       |            };
  277|  3.59k|            let mut count_exponent = 0;
  278|  14.5k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  279|  10.9k|                count_exponent += 1;
  280|  10.9k|                cursor += 1;
  281|  10.9k|            }
  282|  3.59k|            if count_exponent > 0 {
  283|  3.58k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  284|       |            } else {
  285|     10|                Err(TermParseError::msg(
  286|     10|                    "Double serialization with an invalid exponent",
  287|     10|                ))
  288|       |            }
  289|  13.8k|        } else if with_dot {
  290|  3.44k|            if count_after > 0 {
  291|  3.44k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  292|       |            } else {
  293|      3|                Err(TermParseError::msg(
  294|      3|                    "Decimal serialization without floating part",
  295|      3|                ))
  296|       |            }
  297|  10.4k|        } else if count_before > 0 {
  298|  10.3k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  299|       |        } else {
  300|     97|            Err(TermParseError::msg("Empty integer serialization"))
  301|       |        }
  302|       |    }
  303|  32.2k|}
_RNvNtCsfAZ3rbceNnU_5oxrdf6parser14read_hexa_char:
  361|    620|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  362|    620|    let mut value = 0;
  363|    620|    for _ in 0..len {
  364|  3.39k|        if let Some(c) = input.next() {
  365|  3.37k|            value = value * 16
  366|  3.37k|                + match c {
  367|  3.37k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  368|    320|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  369|    538|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  370|       |                    _ => {
  371|     12|                        return Err(TermParseError::msg(
  372|     12|                            "Unexpected character in a unicode escape",
  373|     12|                        ))
  374|       |                    }
  375|       |                }
  376|       |        } else {
  377|     25|            return Err(TermParseError::msg("Unexpected literal string end"));
  378|       |        }
  379|       |    }
  380|    583|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  381|    620|}
_RNvNtCsfAZ3rbceNnU_5oxrdf6parser15read_named_node:
  138|  19.6k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  139|  19.6k|    let s = s.trim();
  140|  19.6k|    if let Some(remain) = s.strip_prefix('<') {
  141|  19.5k|        let end = remain
  142|  19.5k|            .find('>')
  143|  19.5k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  144|  19.5k|        let (value, remain) = remain.split_at(end);
  145|  19.5k|        let remain = &remain[1..];
  146|  19.5k|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  147|       |            kind: TermParseErrorKind::Iri {
  148|       |                value: value.to_owned(),
  149|       |                error,
  150|       |            },
  151|  19.5k|        })?;
  152|  19.0k|        Ok((term, remain))
  153|       |    } else {
  154|     53|        Err(TermParseError::msg(
  155|     53|            "Named node serialization should start with a <",
  156|     53|        ))
  157|       |    }
  158|  19.6k|}
_RNvMs5_NtCsfAZ3rbceNnU_5oxrdf6parserNtB5_14TermParseError3msg:
  436|    613|    pub(crate) fn msg(msg: &'static str) -> Self {
  437|    613|        Self {
  438|    613|            kind: TermParseErrorKind::Msg { msg },
  439|    613|        }
  440|    613|    }

_RNvXsP_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  599|  4.36k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  4.36k|        Self::NamedNode(node)
  601|  4.36k|    }
_RNvXs10_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB6_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromRNtB6_4TermE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  685|  26.4k|    fn from(node: &'a Term) -> Self {
  686|  26.4k|        node.as_ref()
  687|  26.4k|    }
_RNvXsR_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  613|    528|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|    528|        Self::BlankNode(node)
  615|    528|    }
_RNvXsQ_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  606|  3.08k|    fn from(node: &'a NamedNode) -> Self {
  607|  3.08k|        node.as_ref().into()
  608|  3.08k|    }
_RNvXsV_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromRNtB5_6TripleE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  642|  1.28k|    fn from(node: &'a Triple) -> Self {
  643|  1.28k|        Self::Triple(node)
  644|  1.28k|    }
_RNvXsY_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromNtB5_10SubjectRefE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  666|  3.08k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  3.08k|        match node {
  668|  1.27k|            SubjectRef::NamedNode(node) => node.into(),
  669|    528|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|  1.28k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  3.08k|    }
_RNvXsZ_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7TermRefINtNtCslfKEd1eBmR_4core7convert4FromRNtB5_7SubjectE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  678|  3.08k|    fn from(node: &'a Subject) -> Self {
  679|  3.08k|        node.as_ref().into()
  680|  3.08k|    }
_RNvMsc_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7Subject6as_refCslW5pmdEUwJH_13oxigraph_fuzz:
  181|  3.08k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  3.08k|        match self {
  183|  1.27k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    528|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.28k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  3.08k|    }
_RNvMsy_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_4Term6as_refCslW5pmdEUwJH_13oxigraph_fuzz:
  417|  26.4k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  26.4k|        match self {
  419|  1.40k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  8.32k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  14.9k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  1.80k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  26.4k|    }
_RNvXs2k_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB6_6TripleNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
  713|  6.17k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs25_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB6_4TermNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
  385|  52.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Q_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB6_7SubjectNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
  155|  6.17k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsg_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7SubjectINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  1.16k|    fn from(node: BlankNode) -> Self {
  215|  1.16k|        Self::BlankNode(node)
  216|  1.16k|    }
_RNvXse_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_7SubjectINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  2.88k|    fn from(node: NamedNode) -> Self {
  201|  2.88k|        Self::NamedNode(node)
  202|  2.88k|    }
_RNvXsG_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_4TermINtNtCslfKEd1eBmR_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  6.77k|    fn from(triple: Triple) -> Self {
  481|  6.77k|        Self::Triple(Box::new(triple))
  482|  6.77k|    }
_RNvXsE_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_4TermINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  31.9k|    fn from(literal: Literal) -> Self {
  466|  31.9k|        Self::Literal(literal)
  467|  31.9k|    }
_RNvXsC_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_4TermINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  18.2k|    fn from(node: BlankNode) -> Self {
  452|  18.2k|        Self::BlankNode(node)
  453|  18.2k|    }
_RNvXsA_NtCsfAZ3rbceNnU_5oxrdf6tripleNtB5_4TermINtNtCslfKEd1eBmR_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  5.94k|    fn from(node: NamedNode) -> Self {
  438|  5.94k|        Self::NamedNode(node)
  439|  5.94k|    }

_RNvXs1_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_11VariableRefNtNtCslfKEd1eBmR_4core3fmt7Display3fmtCslW5pmdEUwJH_13oxigraph_fuzz:
  123|      9|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|      9|        write!(f, "?{}", self.name)
  125|      9|    }
_RNvXs_NtCsfAZ3rbceNnU_5oxrdf8variableNtB4_8VariableNtNtCslfKEd1eBmR_4core3fmt7Display3fmtCslW5pmdEUwJH_13oxigraph_fuzz:
   61|      9|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|      9|        self.as_ref().fmt(f)
   63|      9|    }
_RNvMNtCsfAZ3rbceNnU_5oxrdf8variableNtB2_8Variable6as_strCslW5pmdEUwJH_13oxigraph_fuzz:
   44|  1.50k|    pub fn as_str(&self) -> &str {
   45|  1.50k|        &self.name
   46|  1.50k|    }
_RNvXsm_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_11VariableRefNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCslW5pmdEUwJH_13oxigraph_fuzz:
   78|  23.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsfAZ3rbceNnU_5oxrdf8variableNtB2_8Variable6as_refCslW5pmdEUwJH_13oxigraph_fuzz:
   54|  47.1k|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|  47.1k|        VariableRef { name: &self.name }
   56|  47.1k|    }
_RNvXs8_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCslfKEd1eBmR_4core3fmt7Display3fmtCslW5pmdEUwJH_13oxigraph_fuzz:
  226|     13|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     13|        write!(f, "The variable name is invalid")
  228|     13|    }
_RNvXs2_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_11VariableRefINtNtCslfKEd1eBmR_4core7convert4FromRNtB5_8VariableE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  130|  23.3k|    fn from(variable: &'a Variable) -> Self {
  131|  23.3k|        variable.as_ref()
  132|  23.3k|    }
_RNvXsd_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_8VariableNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCslW5pmdEUwJH_13oxigraph_fuzz:
   17|  1.41k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs5_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_8VariableINtNtCslfKEd1eBmR_4core3cmp9PartialEqNtB5_11VariableRefE2eqCslW5pmdEUwJH_13oxigraph_fuzz:
  151|  23.7k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  152|  23.7k|        self.as_ref() == *other
  153|  23.7k|    }
_RNvXsh_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_8VariableNtNtCslfKEd1eBmR_4core5clone5Clone5cloneCslW5pmdEUwJH_13oxigraph_fuzz:
   17|  1.50k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsm_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_11VariableRefNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eqCseEzm5TWRsUV_10sparesults:
   78|  47.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMNtCsfAZ3rbceNnU_5oxrdf8variableNtB2_8Variable6as_refCseEzm5TWRsUV_10sparesults:
   54|  94.3k|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|  94.3k|        VariableRef { name: &self.name }
   56|  94.3k|    }
_RNvXs5_NtCsfAZ3rbceNnU_5oxrdf8variableNtB5_8VariableINtNtCslfKEd1eBmR_4core3cmp9PartialEqNtB5_11VariableRefE2eqCseEzm5TWRsUV_10sparesults:
  151|  47.5k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  152|  47.5k|        self.as_ref() == *other
  153|  47.5k|    }
_RNvNtCsfAZ3rbceNnU_5oxrdf8variable28validate_variable_identifier:
  170|  3.41k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  3.41k|    let mut chars = id.chars();
  172|  3.41k|    let front = chars.next().ok_or(VariableNameParseError {})?;
  173|  3.40k|    match front {
  174|  3.40k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  1.98k|        | 'A'..='Z'
  178|    572|        | 'a'..='z'
  179|    117|        | '\u{00C0}'..='\u{00D6}'
  180|    117|        | '\u{00D8}'..='\u{00F6}'
  181|    111|        | '\u{00F8}'..='\u{02FF}'
  182|    111|        | '\u{0370}'..='\u{037D}'
  183|    111|        | '\u{037F}'..='\u{1FFF}'
  184|     36|        | '\u{200C}'..='\u{200D}'
  185|     36|        | '\u{2070}'..='\u{218F}'
  186|     27|        | '\u{2C00}'..='\u{2FEF}'
  187|     27|        | '\u{3001}'..='\u{D7FF}'
  188|     11|        | '\u{F900}'..='\u{FDCF}'
  189|     11|        | '\u{FDF0}'..='\u{FFFD}'
  190|  3.40k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      1|        _ => return Err(VariableNameParseError {}),
  192|       |    }
  193|  7.79k|    for c in chars {
  194|  4.39k|        match c {
  195|  4.39k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|    400|            | '\u{00300}'..='\u{036F}'
  198|    197|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  2.22k|            | 'A'..='Z'
  201|  1.19k|            | 'a'..='z'
  202|    402|            | '\u{00C0}'..='\u{00D6}'
  203|    402|            | '\u{00D8}'..='\u{00F6}'
  204|    400|            | '\u{00F8}'..='\u{02FF}'
  205|    400|            | '\u{0370}'..='\u{037D}'
  206|    400|            | '\u{037F}'..='\u{1FFF}'
  207|    197|            | '\u{200C}'..='\u{200D}'
  208|    197|            | '\u{2070}'..='\u{218F}'
  209|    197|            | '\u{2C00}'..='\u{2FEF}'
  210|    196|            | '\u{3001}'..='\u{D7FF}'
  211|     88|            | '\u{F900}'..='\u{FDCF}'
  212|     88|            | '\u{FDF0}'..='\u{FFFD}'
  213|  4.38k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|      7|            _ => return Err(VariableNameParseError {}),
  215|       |        }
  216|       |    }
  217|  3.40k|    Ok(())
  218|  3.41k|}
_RINvMNtCsfAZ3rbceNnU_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsfpddGpQNiKJ_5alloc6string6StringEB5_:
   39|  3.40k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  3.40k|        Self { name: name.into() }
   41|  3.40k|    }
_RINvMNtCsfAZ3rbceNnU_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  3.41k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  3.41k|        let name = name.into();
   28|  3.41k|        validate_variable_identifier(&name)?;
   29|  3.40k|        Ok(Self::new_unchecked(name))
   30|  3.41k|    }

_RINvNtCseEzm5TWRsUV_10sparesults3csv20write_tsv_quoted_strINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  192|  7.63k|fn write_tsv_quoted_str(string: &str, f: &mut impl Write) -> io::Result<()> {
  193|  7.63k|    f.write_all(b"\"")?;
  194|  43.8k|    for c in string.bytes() {
  195|  43.8k|        match c {
  196|    343|            b'\t' => f.write_all(b"\\t"),
  197|    318|            b'\n' => f.write_all(b"\\n"),
  198|  1.08k|            b'\r' => f.write_all(b"\\r"),
  199|    309|            b'"' => f.write_all(b"\\\""),
  200|  1.02k|            b'\\' => f.write_all(b"\\\\"),
  201|  40.7k|            c => f.write_all(&[c]),
  202|      0|        }?;
  203|       |    }
  204|  7.63k|    f.write_all(b"\"")
  205|  7.63k|}
_RINvNtCseEzm5TWRsUV_10sparesults3csv14write_tsv_termNtNtCsfAZ3rbceNnU_5oxrdf6triple7TermRefINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  155|  23.3k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  23.3k|    match term.into() {
  157|  1.36k|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|  7.76k|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|  12.5k|        TermRef::Literal(literal) => {
  160|  12.5k|            let value = literal.value();
  161|  12.5k|            if let Some(language) = literal.language() {
  162|  2.11k|                write_tsv_quoted_str(value, sink)?;
  163|  2.11k|                write!(sink, "@{language}")
  164|       |            } else {
  165|  10.4k|                match literal.datatype() {
  166|  10.4k|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|  9.51k|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|  5.56k|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|  4.06k|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|  3.19k|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|  2.50k|                    datatype => {
  172|  2.50k|                        write_tsv_quoted_str(value, sink)?;
  173|  2.50k|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|  1.74k|        TermRef::Triple(triple) => {
  180|  1.74k|            sink.write_all(b"<< ")?;
  181|  1.74k|            write_tsv_term(&triple.subject, sink)?;
  182|  1.74k|            sink.write_all(b" ")?;
  183|  1.74k|            write_tsv_term(&triple.predicate, sink)?;
  184|  1.74k|            sink.write_all(b" ")?;
  185|  1.74k|            write_tsv_term(&triple.object, sink)?;
  186|  1.74k|            sink.write_all(b" >>")?;
  187|  1.74k|            Ok(())
  188|       |        }
  189|       |    }
  190|  23.3k|}
_RINvNtCseEzm5TWRsUV_10sparesults3csv14write_tsv_termRNtNtCsfAZ3rbceNnU_5oxrdf6triple7SubjectINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  155|  3.08k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  3.08k|    match term.into() {
  157|  1.27k|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|    528|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|      0|        TermRef::Literal(literal) => {
  160|      0|            let value = literal.value();
  161|      0|            if let Some(language) = literal.language() {
  162|      0|                write_tsv_quoted_str(value, sink)?;
  163|      0|                write!(sink, "@{language}")
  164|       |            } else {
  165|      0|                match literal.datatype() {
  166|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|      0|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|      0|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|      0|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|      0|                    datatype => {
  172|      0|                        write_tsv_quoted_str(value, sink)?;
  173|      0|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|  1.28k|        TermRef::Triple(triple) => {
  180|  1.28k|            sink.write_all(b"<< ")?;
  181|  1.28k|            write_tsv_term(&triple.subject, sink)?;
  182|  1.28k|            sink.write_all(b" ")?;
  183|  1.28k|            write_tsv_term(&triple.predicate, sink)?;
  184|  1.28k|            sink.write_all(b" ")?;
  185|  1.28k|            write_tsv_term(&triple.object, sink)?;
  186|  1.28k|            sink.write_all(b" >>")?;
  187|  1.28k|            Ok(())
  188|       |        }
  189|       |    }
  190|  3.08k|}
_RNCNvMs1_NtCseEzm5TWRsUV_10sparesults3csvINtB7_18TsvSolutionsReaderRShE9read_next0CslW5pmdEUwJH_13oxigraph_fuzz:
  347|  71.8k|            .map(|v| {
  348|  71.8k|                let v = v.trim();
  349|  71.8k|                if v.is_empty() {
  350|  22.4k|                    Ok(None)
  351|       |                } else {
  352|  49.4k|                    Ok(Some(Term::from_str(v).map_err(|e| SyntaxError {
  353|       |                        inner: SyntaxErrorKind::Term(e),
  354|  49.4k|                    })?))
  355|       |                }
  356|  71.8k|            })
_RNCNvMs0_NtCseEzm5TWRsUV_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4read0CslW5pmdEUwJH_13oxigraph_fuzz:
  294|  11.9k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNvMs1_NtCseEzm5TWRsUV_10sparesults3csvINtB5_18TsvSolutionsReaderRShE9read_nextCslW5pmdEUwJH_13oxigraph_fuzz:
  339|  72.6k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  340|  72.6k|        self.buffer.clear();
  341|  72.6k|        if self.source.read_line(&mut self.buffer)? == 0 {
  342|  3.02k|            return Ok(None);
  343|  69.6k|        }
  344|  69.6k|        let elements = self
  345|  69.6k|            .buffer
  346|  69.6k|            .split('\t')
  347|  69.6k|            .map(|v| {
  348|       |                let v = v.trim();
  349|       |                if v.is_empty() {
  350|       |                    Ok(None)
  351|       |                } else {
  352|       |                    Ok(Some(Term::from_str(v).map_err(|e| SyntaxError {
  353|       |                        inner: SyntaxErrorKind::Term(e),
  354|       |                    })?))
  355|       |                }
  356|  69.6k|            })
  357|  69.6k|            .collect::<Result<Vec<_>, ParseError>>()?;
  358|  68.4k|        if elements.len() == self.column_len {
  359|  67.2k|            Ok(Some(elements))
  360|  1.22k|        } else if self.column_len == 0 && elements == [None] {
  361|  1.09k|            Ok(Some(Vec::new())) // Zero columns case
  362|       |        } else {
  363|    135|            Err(SyntaxError::msg(format!(
  364|    135|                "This TSV files has {} columns but we found a row with {} columns: {:?}",
  365|    135|                self.column_len,
  366|    135|                elements.len(),
  367|    135|                self.buffer
  368|    135|            ))
  369|    135|            .into())
  370|       |        }
  371|  72.6k|    }
_RNCINvMs_NtCseEzm5TWRsUV_10sparesults3csvINtB7_18TsvSolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE5writeINtNtNtNtCslfKEd1eBmR_4core4iter8adapters3map3MapNtNtB9_8solution4IterNCINvMs3_B9_INtB9_15SolutionsWriterB13_E5writeRNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableRNtNtB3G_6triple4TermRNtB2y_13QuerySolutionE0EE0CslW5pmdEUwJH_13oxigraph_fuzz:
  131|  23.7k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RINvNtCseEzm5TWRsUV_10sparesults3csv14write_tsv_termRNtNtCsfAZ3rbceNnU_5oxrdf6triple4TermINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  155|  3.08k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  3.08k|    match term.into() {
  157|     39|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|    563|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|  2.42k|        TermRef::Literal(literal) => {
  160|  2.42k|            let value = literal.value();
  161|  2.42k|            if let Some(language) = literal.language() {
  162|    173|                write_tsv_quoted_str(value, sink)?;
  163|    173|                write!(sink, "@{language}")
  164|       |            } else {
  165|  2.25k|                match literal.datatype() {
  166|  2.25k|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|  2.15k|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|  2.15k|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|  2.15k|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|  2.15k|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|  2.01k|                    datatype => {
  172|  2.01k|                        write_tsv_quoted_str(value, sink)?;
  173|  2.01k|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|     63|        TermRef::Triple(triple) => {
  180|     63|            sink.write_all(b"<< ")?;
  181|     63|            write_tsv_term(&triple.subject, sink)?;
  182|     63|            sink.write_all(b" ")?;
  183|     63|            write_tsv_term(&triple.predicate, sink)?;
  184|     63|            sink.write_all(b" ")?;
  185|     63|            write_tsv_term(&triple.object, sink)?;
  186|     63|            sink.write_all(b" >>")?;
  187|     63|            Ok(())
  188|       |        }
  189|       |    }
  190|  3.08k|}
_RNvMs_NtCseEzm5TWRsUV_10sparesults3csvINtB4_18TsvSolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE5startCslW5pmdEUwJH_13oxigraph_fuzz:
  110|  1.51k|    pub fn start(mut sink: W, variables: Vec<Variable>) -> io::Result<Self> {
  111|  1.51k|        let mut start_vars = true;
  112|  3.01k|        for variable in &variables {
  113|  1.50k|            if start_vars {
  114|  1.41k|                start_vars = false;
  115|  1.41k|            } else {
  116|     91|                sink.write_all(b"\t")?;
  117|       |            }
  118|  1.50k|            sink.write_all(b"?")?;
  119|  1.50k|            sink.write_all(variable.as_str().as_bytes())?;
  120|       |        }
  121|  1.51k|        sink.write_all(b"\n")?;
  122|  1.51k|        Ok(Self { sink, variables })
  123|  1.51k|    }
_RNvMs_NtCseEzm5TWRsUV_10sparesults3csvINtB4_18TsvSolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE6finishCslW5pmdEUwJH_13oxigraph_fuzz:
  149|  1.51k|    pub fn finish(mut self) -> io::Result<W> {
  150|  1.51k|        self.sink.flush()?;
  151|  1.51k|        Ok(self.sink)
  152|  1.51k|    }
_RINvMs_NtCseEzm5TWRsUV_10sparesults3csvINtB5_18TsvSolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE5writeINtNtNtNtCslfKEd1eBmR_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs3_B7_INtB7_15SolutionsWriterB11_E5writeRNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableRNtNtB3E_6triple4TermRNtB2w_13QuerySolutionE0EECslW5pmdEUwJH_13oxigraph_fuzz:
  125|  33.0k|    pub fn write<'a>(
  126|  33.0k|        &mut self,
  127|  33.0k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  128|  33.0k|    ) -> io::Result<()> {
  129|  33.0k|        let mut values = vec![None; self.variables.len()];
  130|  56.4k|        for (variable, value) in solution {
  131|  23.3k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  132|  23.3k|                values[position] = Some(value);
  133|  23.3k|            }
  134|       |        }
  135|  33.0k|        let mut start_binding = true;
  136|  66.4k|        for value in values {
  137|  33.3k|            if start_binding {
  138|  32.6k|                start_binding = false;
  139|  32.6k|            } else {
  140|    693|                self.sink.write_all(b"\t")?;
  141|       |            }
  142|  33.3k|            if let Some(value) = value {
  143|  23.3k|                write_tsv_term(value, &mut self.sink)?;
  144|  9.93k|            }
  145|       |        }
  146|  33.0k|        self.sink.write_all(b"\n")
  147|  33.0k|    }
_RNCNCNvMs1_NtCseEzm5TWRsUV_10sparesults3csvINtB9_18TsvSolutionsReaderRShE9read_next00CslW5pmdEUwJH_13oxigraph_fuzz:
  352|  1.17k|                    Ok(Some(Term::from_str(v).map_err(|e| SyntaxError {
  353|  1.17k|                        inner: SyntaxErrorKind::Term(e),
  354|  1.17k|                    })?))
_RINvNtCseEzm5TWRsUV_10sparesults3csv14write_tsv_termRNtNtCsfAZ3rbceNnU_5oxrdf10named_node9NamedNodeINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  155|  3.08k|fn write_tsv_term<'a>(term: impl Into<TermRef<'a>>, sink: &mut impl Write) -> io::Result<()> {
  156|  3.08k|    match term.into() {
  157|  3.08k|        TermRef::NamedNode(node) => write!(sink, "<{}>", node.as_str()),
  158|      0|        TermRef::BlankNode(node) => write!(sink, "_:{}", node.as_str()),
  159|      0|        TermRef::Literal(literal) => {
  160|      0|            let value = literal.value();
  161|      0|            if let Some(language) = literal.language() {
  162|      0|                write_tsv_quoted_str(value, sink)?;
  163|      0|                write!(sink, "@{language}")
  164|       |            } else {
  165|      0|                match literal.datatype() {
  166|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => sink.write_all(value.as_bytes()),
  167|      0|                    xsd::INTEGER if is_turtle_integer(value) => sink.write_all(value.as_bytes()),
  168|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => sink.write_all(value.as_bytes()),
  169|      0|                    xsd::DOUBLE if is_turtle_double(value) => sink.write_all(value.as_bytes()),
  170|      0|                    xsd::STRING => write_tsv_quoted_str(value, sink),
  171|      0|                    datatype => {
  172|      0|                        write_tsv_quoted_str(value, sink)?;
  173|      0|                        write!(sink, "^^<{}>", datatype.as_str())
  174|       |                    }
  175|       |                }
  176|       |            }
  177|       |        }
  178|       |        #[cfg(feature = "rdf-star")]
  179|      0|        TermRef::Triple(triple) => {
  180|      0|            sink.write_all(b"<< ")?;
  181|      0|            write_tsv_term(&triple.subject, sink)?;
  182|      0|            sink.write_all(b" ")?;
  183|      0|            write_tsv_term(&triple.predicate, sink)?;
  184|      0|            sink.write_all(b" ")?;
  185|      0|            write_tsv_term(&triple.object, sink)?;
  186|      0|            sink.write_all(b" >>")?;
  187|      0|            Ok(())
  188|       |        }
  189|       |    }
  190|  3.08k|}
_RINvNtCseEzm5TWRsUV_10sparesults3csv24write_boolean_tsv_resultQINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
   99|      3|pub fn write_boolean_tsv_result<W: Write>(mut sink: W, value: bool) -> io::Result<W> {
  100|      3|    sink.write_all(if value { b"true" } else { b"false" })?;
  101|      3|    Ok(sink)
  102|      3|}
_RNvMs0_NtCseEzm5TWRsUV_10sparesults3csvINtB5_21TsvQueryResultsReaderRShE4readCslW5pmdEUwJH_13oxigraph_fuzz:
  287|  4.52k|    pub fn read(mut source: R) -> Result<Self, ParseError> {
  288|  4.52k|        let mut buffer = String::new();
  289|  4.52k|
  290|  4.52k|        // We read the header
  291|  4.52k|        source.read_line(&mut buffer)?;
  292|  4.52k|        let line = buffer
  293|  4.52k|            .as_str()
  294|  4.52k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  295|  4.52k|        if line.eq_ignore_ascii_case("true") {
  296|      2|            return Ok(Self::Boolean(true));
  297|  4.51k|        }
  298|  4.51k|        if line.eq_ignore_ascii_case("false") {
  299|      4|            return Ok(Self::Boolean(false));
  300|  4.51k|        }
  301|  4.51k|        let mut variables = Vec::new();
  302|  4.51k|        if !line.is_empty() {
  303|  3.56k|            for v in line.split('\t') {
  304|  3.56k|                let v = v.trim();
  305|  3.56k|                if v.is_empty() {
  306|     54|                    return Err(SyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar").into());
  307|  3.51k|                }
  308|  3.51k|                let variable = Variable::from_str(v).map_err(|e| {
  309|       |                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  310|  3.51k|                })?;
  311|  3.40k|                if variables.contains(&variable) {
  312|      9|                    return Err(SyntaxError::msg(format!(
  313|      9|                        "The variable {variable} is declared twice"
  314|      9|                    ))
  315|      9|                    .into());
  316|  3.39k|                }
  317|  3.39k|                variables.push(variable);
  318|       |            }
  319|  1.34k|        }
  320|  4.34k|        let column_len = variables.len();
  321|  4.34k|        Ok(Self::Solutions {
  322|  4.34k|            variables,
  323|  4.34k|            solutions: TsvSolutionsReader {
  324|  4.34k|                source,
  325|  4.34k|                buffer,
  326|  4.34k|                column_len,
  327|  4.34k|            },
  328|  4.34k|        })
  329|  4.52k|    }
_RNCNvMs0_NtCseEzm5TWRsUV_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4reads_0CslW5pmdEUwJH_13oxigraph_fuzz:
  308|    110|                let variable = Variable::from_str(v).map_err(|e| {
  309|    110|                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  310|    110|                })?;
_RNvNtCseEzm5TWRsUV_10sparesults3csv17is_turtle_boolean:
  207|  1.05k|fn is_turtle_boolean(value: &str) -> bool {
  208|  1.05k|    matches!(value, "true" | "false")
  209|  1.05k|}
_RNvNtCseEzm5TWRsUV_10sparesults3csv17is_turtle_integer:
  211|  5.81k|fn is_turtle_integer(value: &str) -> bool {
  212|  5.81k|    // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  213|  5.81k|    let mut value = value.as_bytes();
  214|  5.81k|    if let Some(v) = value.strip_prefix(b"+") {
  215|     83|        value = v;
  216|  5.73k|    } else if let Some(v) = value.strip_prefix(b"-") {
  217|     89|        value = v;
  218|  5.64k|    }
  219|  5.81k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  220|  5.81k|}
_RNvNtCseEzm5TWRsUV_10sparesults3csv17is_turtle_decimal:
  222|  1.64k|fn is_turtle_decimal(value: &str) -> bool {
  223|  1.64k|    // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  224|  1.64k|    let mut value = value.as_bytes();
  225|  1.64k|    if let Some(v) = value.strip_prefix(b"+") {
  226|    208|        value = v;
  227|  1.43k|    } else if let Some(v) = value.strip_prefix(b"-") {
  228|    207|        value = v;
  229|  1.22k|    }
  230|  4.13k|    while value.first().map_or(false, u8::is_ascii_digit) {
  231|  2.48k|        value = &value[1..];
  232|  2.48k|    }
  233|  1.64k|    if let Some(v) = value.strip_prefix(b".") {
  234|  1.56k|        value = v;
  235|  1.56k|    } else {
  236|     79|        return false;
  237|       |    }
  238|  1.56k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  239|  1.64k|}
_RNvNtCseEzm5TWRsUV_10sparesults3csv16is_turtle_double:
  241|  2.89k|fn is_turtle_double(value: &str) -> bool {
  242|  2.89k|    // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  243|  2.89k|    // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  244|  2.89k|    let mut value = value.as_bytes();
  245|  2.89k|    if let Some(v) = value.strip_prefix(b"+") {
  246|    136|        value = v;
  247|  2.75k|    } else if let Some(v) = value.strip_prefix(b"-") {
  248|    194|        value = v;
  249|  2.56k|    }
  250|  2.89k|    let mut with_before = false;
  251|  6.55k|    while value.first().map_or(false, u8::is_ascii_digit) {
  252|  3.65k|        value = &value[1..];
  253|  3.65k|        with_before = true;
  254|  3.65k|    }
  255|  2.89k|    let mut with_after = false;
  256|  2.89k|    if let Some(v) = value.strip_prefix(b".") {
  257|    803|        value = v;
  258|  4.52k|        while value.first().map_or(false, u8::is_ascii_digit) {
  259|  3.72k|            value = &value[1..];
  260|  3.72k|            with_after = true;
  261|  3.72k|        }
  262|  2.09k|    }
  263|  2.89k|    if let Some(v) = value.strip_prefix(b"e") {
  264|  1.80k|        value = v;
  265|  1.80k|    } else if let Some(v) = value.strip_prefix(b"E") {
  266|    843|        value = v;
  267|    843|    } else {
  268|    245|        return false;
  269|       |    }
  270|  2.64k|    if let Some(v) = value.strip_prefix(b"+") {
  271|     68|        value = v;
  272|  2.58k|    } else if let Some(v) = value.strip_prefix(b"-") {
  273|     66|        value = v;
  274|  2.51k|    }
  275|  2.64k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  276|  2.89k|}

_RINvMs4_NtCseEzm5TWRsUV_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsfpddGpQNiKJ_5alloc6string6StringECslW5pmdEUwJH_13oxigraph_fuzz:
   86|    254|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    254|        Self {
   88|    254|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|    254|        }
   90|    254|    }
_RINvMs4_NtCseEzm5TWRsUV_10sparesults5errorNtB6_11SyntaxError3msgReECslW5pmdEUwJH_13oxigraph_fuzz:
   86|     54|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|     54|        Self {
   88|     54|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|     54|        }
   90|     54|    }
_RNvXs1_NtCseEzm5TWRsUV_10sparesults5errorNtB5_10ParseErrorINtNtCslfKEd1eBmR_4core7convert4FromNtB5_11SyntaxErrorE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
   43|  1.48k|    fn from(error: SyntaxError) -> Self {
   44|  1.48k|        Self::Syntax(error)
   45|  1.48k|    }
_RNvXs0_NtCseEzm5TWRsUV_10sparesults5errorNtB5_10ParseErrorINtNtCslfKEd1eBmR_4core7convert4FromNtNtNtCsbF7d7lZ4nYS_3std2io5error5ErrorE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
   36|     12|    fn from(error: io::Error) -> Self {
   37|     12|        Self::Io(error)
   38|     12|    }

_RNvMs_CseEzm5TWRsUV_10sparesultsNtB4_18QueryResultsParser11from_formatCslW5pmdEUwJH_13oxigraph_fuzz:
  166|  3.00k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  167|  3.00k|        Self { format }
  168|  3.00k|    }
_RNvMs2_CseEzm5TWRsUV_10sparesultsNtB5_22QueryResultsSerializer11from_formatCslW5pmdEUwJH_13oxigraph_fuzz:
  362|  3.00k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  363|  3.00k|        Self { format }
  364|  3.00k|    }
_RINvMs2_CseEzm5TWRsUV_10sparesultsNtB6_22QueryResultsSerializer20write_boolean_resultQINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  378|      3|    pub fn write_boolean_result<W: Write>(&self, writer: W, value: bool) -> io::Result<W> {
  379|      3|        match self.format {
  380|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(writer, value),
  381|      0|            QueryResultsFormat::Json => write_boolean_json_result(writer, value),
  382|      0|            QueryResultsFormat::Csv => write_boolean_csv_result(writer, value),
  383|      3|            QueryResultsFormat::Tsv => write_boolean_tsv_result(writer, value),
  384|       |        }
  385|      3|    }
_RNCNvXs1_CseEzm5TWRsUV_10sparesultsINtB7_15SolutionsReaderRShENtNtNtNtCslfKEd1eBmR_4core4iter6traits8iterator8Iterator4next0CslW5pmdEUwJH_13oxigraph_fuzz:
  321|  68.3k|            .map(|values| (Rc::clone(&self.variables), values).into()),
_RINvMs2_CseEzm5TWRsUV_10sparesultsNtB6_22QueryResultsSerializer16solutions_writerINtNtCsfpddGpQNiKJ_5alloc3vec3VechEECslW5pmdEUwJH_13oxigraph_fuzz:
  403|  1.51k|    pub fn solutions_writer<W: Write>(
  404|  1.51k|        &self,
  405|  1.51k|        writer: W,
  406|  1.51k|        variables: Vec<Variable>,
  407|  1.51k|    ) -> io::Result<SolutionsWriter<W>> {
  408|  1.51k|        Ok(SolutionsWriter {
  409|  1.51k|            formatter: match self.format {
  410|       |                QueryResultsFormat::Xml => {
  411|      0|                    SolutionsWriterKind::Xml(XmlSolutionsWriter::start(writer, &variables)?)
  412|       |                }
  413|       |                QueryResultsFormat::Json => {
  414|      0|                    SolutionsWriterKind::Json(JsonSolutionsWriter::start(writer, &variables)?)
  415|       |                }
  416|       |                QueryResultsFormat::Csv => {
  417|      0|                    SolutionsWriterKind::Csv(CsvSolutionsWriter::start(writer, variables)?)
  418|       |                }
  419|       |                QueryResultsFormat::Tsv => {
  420|  1.51k|                    SolutionsWriterKind::Tsv(TsvSolutionsWriter::start(writer, variables)?)
  421|       |                }
  422|       |            },
  423|       |        })
  424|  1.51k|    }
_RNvXs1_CseEzm5TWRsUV_10sparesultsINtB5_15SolutionsReaderRShENtNtNtNtCslfKEd1eBmR_4core4iter6traits8iterator8Iterator4nextCslW5pmdEUwJH_13oxigraph_fuzz:
  313|  72.6k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  314|  72.6k|        Some(
  315|  72.6k|            match &mut self.solutions {
  316|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  317|      0|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  318|  72.6k|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  319|       |            }
  320|  72.6k|            .transpose()?
  321|  69.6k|            .map(|values| (Rc::clone(&self.variables), values).into()),
  322|       |        )
  323|  72.6k|    }
_RINvMs3_CseEzm5TWRsUV_10sparesultsINtB6_15SolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE5writeRNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableRNtNtB1E_6triple4TermRNtNtB6_8solution13QuerySolutionECslW5pmdEUwJH_13oxigraph_fuzz:
  476|  33.0k|    pub fn write<'a>(
  477|  33.0k|        &mut self,
  478|  33.0k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  479|  33.0k|    ) -> io::Result<()> {
  480|  33.0k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  481|  33.0k|        match &mut self.formatter {
  482|      0|            SolutionsWriterKind::Xml(writer) => writer.write(solution),
  483|      0|            SolutionsWriterKind::Json(writer) => writer.write(solution),
  484|      0|            SolutionsWriterKind::Csv(writer) => writer.write(solution),
  485|  33.0k|            SolutionsWriterKind::Tsv(writer) => writer.write(solution),
  486|       |        }
  487|  33.0k|    }
_RINvMs_CseEzm5TWRsUV_10sparesultsNtB5_18QueryResultsParser12read_resultsRShECslW5pmdEUwJH_13oxigraph_fuzz:
  193|  4.52k|    pub fn read_results<R: BufRead>(&self, reader: R) -> Result<QueryResultsReader<R>, ParseError> {
  194|  4.52k|        Ok(match self.format {
  195|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
  196|      0|                XmlQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  197|       |                XmlQueryResultsReader::Solutions {
  198|      0|                    solutions,
  199|      0|                    variables,
  200|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  201|      0|                    variables: Rc::new(variables),
  202|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
  203|      0|                }),
  204|       |            },
  205|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
  206|      0|                JsonQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  207|       |                JsonQueryResultsReader::Solutions {
  208|      0|                    solutions,
  209|      0|                    variables,
  210|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  211|      0|                    variables: Rc::new(variables),
  212|      0|                    solutions: SolutionsReaderKind::Json(solutions),
  213|      0|                }),
  214|       |            },
  215|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  216|  4.52k|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  217|      6|                TsvQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  218|       |                TsvQueryResultsReader::Solutions {
  219|  4.34k|                    solutions,
  220|  4.34k|                    variables,
  221|  4.34k|                } => QueryResultsReader::Solutions(SolutionsReader {
  222|  4.34k|                    variables: Rc::new(variables),
  223|  4.34k|                    solutions: SolutionsReaderKind::Tsv(solutions),
  224|  4.34k|                }),
  225|       |            },
  226|       |        })
  227|  4.52k|    }
_RNvMs3_CseEzm5TWRsUV_10sparesultsINtB5_15SolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE6finishCslW5pmdEUwJH_13oxigraph_fuzz:
  490|  1.51k|    pub fn finish(self) -> io::Result<W> {
  491|  1.51k|        match self.formatter {
  492|      0|            SolutionsWriterKind::Xml(write) => write.finish(),
  493|      0|            SolutionsWriterKind::Json(write) => write.finish(),
  494|      0|            SolutionsWriterKind::Csv(write) => write.finish(),
  495|  1.51k|            SolutionsWriterKind::Tsv(write) => write.finish(),
  496|       |        }
  497|  1.51k|    }
_RNCINvMs3_CseEzm5TWRsUV_10sparesultsINtB8_15SolutionsWriterINtNtCsfpddGpQNiKJ_5alloc3vec3VechEE5writeRNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableRNtNtB1G_6triple4TermRNtNtB8_8solution13QuerySolutionE0CslW5pmdEUwJH_13oxigraph_fuzz:
  480|  23.3k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));

_RNvXs_NtCseEzm5TWRsUV_10sparesults8solutionNtB4_13QuerySolutionINtNtCslfKEd1eBmR_4core7convert4FromTINtNtCsfpddGpQNiKJ_5alloc2rc2RcINtNtB1F_3vec3VecNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableEEIB26_INtNtB14_6option6OptionNtNtB2q_6triple4TermEEEE4fromCslW5pmdEUwJH_13oxigraph_fuzz:
  121|  68.3k|    fn from((v, s): (V, S)) -> Self {
  122|  68.3k|        Self {
  123|  68.3k|            variables: v.into(),
  124|  68.3k|            values: s.into(),
  125|  68.3k|        }
  126|  68.3k|    }
_RNvMNtCseEzm5TWRsUV_10sparesults8solutionNtB2_13QuerySolution9variablesCslW5pmdEUwJH_13oxigraph_fuzz:
  114|  1.45k|    pub fn variables(&self) -> &[Variable] {
  115|  1.45k|        &self.variables
  116|  1.45k|    }
_RNvXs0_NtCseEzm5TWRsUV_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCslfKEd1eBmR_4core4iter6traits7collect12IntoIterator9into_iterCslW5pmdEUwJH_13oxigraph_fuzz:
  134|  33.0k|    fn into_iter(self) -> Iter<'a> {
  135|  33.0k|        Iter {
  136|  33.0k|            inner: self.variables.iter().zip(&self.values),
  137|  33.0k|        }
  138|  33.0k|    }
_RNvXs9_NtCseEzm5TWRsUV_10sparesults8solutionNtB5_4IterNtNtNtNtCslfKEd1eBmR_4core4iter6traits8iterator8Iterator4nextCslW5pmdEUwJH_13oxigraph_fuzz:
  229|  56.4k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|  66.4k|        for (variable, value) in &mut self.inner {
  231|  33.3k|            if let Some(value) = value {
  232|  23.3k|                return Some((variable, value));
  233|  9.93k|            }
  234|       |        }
  235|  33.0k|        None
  236|  56.4k|    }
_RNvXs9_NtCseEzm5TWRsUV_10sparesults8solutionNtB5_4IterNtNtNtNtCslfKEd1eBmR_4core4iter6traits8iterator8Iterator4nextB7_:
  229|   112k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|   132k|        for (variable, value) in &mut self.inner {
  231|  66.6k|            if let Some(value) = value {
  232|  46.7k|                return Some((variable, value));
  233|  19.8k|            }
  234|       |        }
  235|  66.1k|        None
  236|   112k|    }
_RNvXs6_NtCseEzm5TWRsUV_10sparesults8solutionNtB5_13QuerySolutionNtNtCslfKEd1eBmR_4core3cmp9PartialEq2eq:
  189|  33.0k|    fn eq(&self, other: &Self) -> bool {
  190|  33.0k|        for (k, v) in self.iter() {
  191|  23.3k|            if other.get(k) != Some(v) {
  192|      0|                return false;
  193|  23.3k|            }
  194|       |        }
  195|  33.0k|        for (k, v) in other.iter() {
  196|  23.3k|            if self.get(k) != Some(v) {
  197|      0|                return false;
  198|  23.3k|            }
  199|       |        }
  200|  33.0k|        true
  201|  33.0k|    }
_RNvMNtCseEzm5TWRsUV_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   86|  66.1k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   87|  66.1k|        self.into_iter()
   88|  66.1k|    }
_RNvXs0_NtCseEzm5TWRsUV_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCslfKEd1eBmR_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  134|  66.1k|    fn into_iter(self) -> Iter<'a> {
  135|  66.1k|        Iter {
  136|  66.1k|            inner: self.variables.iter().zip(&self.values),
  137|  66.1k|        }
  138|  66.1k|    }
_RNvXsd_NtCseEzm5TWRsUV_10sparesults8solutionRNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  274|  46.7k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  275|  46.7k|        self.as_ref().index(solution)
  276|  46.7k|    }
_RNvXsc_NtCseEzm5TWRsUV_10sparesults8solutionNtNtCsfAZ3rbceNnU_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  267|  46.7k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  268|  46.7k|        solution.variables.iter().position(|v| *v == self)
  269|  46.7k|    }
_RINvMNtCseEzm5TWRsUV_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCsfAZ3rbceNnU_5oxrdf8variable8VariableEB5_:
   39|  46.7k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   40|  46.7k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   41|  46.7k|    }
_RNCNvXsc_NtCseEzm5TWRsUV_10sparesults8solutionNtNtCsfAZ3rbceNnU_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  268|  47.5k|        solution.variables.iter().position(|v| *v == self)


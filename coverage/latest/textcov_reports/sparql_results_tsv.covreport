_RINvXNtCsdKDghagdoBH_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultINtNtCs3OstG5Tqy1X_5alloc3vec3VecNtNtCs3rDsZdjxS1r_10sparesults8solution13QuerySolutionENtNtB1L_5error22QueryResultsParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCs2m53sVVLdi5_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4g_:
   58|  2.62k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  2.62k|    where
   60|  2.62k|        C: Display + Send + Sync + 'static,
   61|  2.62k|        F: FnOnce() -> C,
   62|  2.62k|    {
   63|  2.62k|        match self {
   64|  2.62k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  2.62k|    }
_RINvXNtCsdKDghagdoBH_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultINtNtCs3rDsZdjxS1r_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error22QueryResultsParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCs3OstG5Tqy1X_5alloc6string6StringNCNvNtCs2m53sVVLdi5_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4e_:
   58|  2.62k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  2.62k|    where
   60|  2.62k|        C: Display + Send + Sync + 'static,
   61|  2.62k|        F: FnOnce() -> C,
   62|  2.62k|    {
   63|  2.62k|        match self {
   64|  2.62k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  2.62k|    }

rust_fuzzer_test_input:
  209|  4.34k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  4.34k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  4.34k|                }
  223|  4.34k|
  224|  4.34k|                __libfuzzer_sys_run(bytes);
  225|  4.34k|                0
  226|       |            }
_RNvNvCsgOOKQ7Z6Re2_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  4.34k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  4.34k|                $body
  243|  4.34k|            }
LLVMFuzzerTestOneInput:
   58|  4.34k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  4.34k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  4.34k|    });
   63|  4.34k|
   64|  4.34k|    match test_input {
   65|  4.34k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  4.34k|}
_RNCNvCs1AvTbBNjq1X_13libfuzzer_sys15test_input_wrap0B3_:
   59|  4.34k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  4.34k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  4.34k|        rust_fuzzer_test_input(data_slice)
   62|  4.34k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs2m53sVVLdi5_13oxigraph_fuzz:
 1125|   236k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   236k|    haystack: &[u8],
 1127|   236k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   236k|) -> Option<usize> {
 1129|   236k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   236k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   236k|    // a &[u8].
 1132|   236k|    let start = haystack.as_ptr();
 1133|   236k|    let end = start.add(haystack.len());
 1134|   236k|    let found = find_raw(start, end)?;
 1135|   218k|    Some(found.distance(start))
 1136|   236k|}
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  45.5k|    pub(crate) fn needle1(&self) -> u8 {
  118|  45.5k|        self.s1
  119|  45.5k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|   236k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   236k|        One { s1: needle, v1: V::splat(needle) }
  113|   236k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|   236k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   236k|        One { s1: needle, v1: V::splat(needle) }
  113|   236k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  8.75k|    pub(crate) unsafe fn find_raw(
  144|  8.75k|        &self,
  145|  8.75k|        start: *const u8,
  146|  8.75k|        end: *const u8,
  147|  8.75k|    ) -> Option<*const u8> {
  148|  8.75k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  8.75k|        // need to move up to using a u64 for the masks used below. Currently
  150|  8.75k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  8.75k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  8.75k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  8.75k|        let topos = V::Mask::first_offset;
  155|  8.75k|        let len = end.distance(start);
  156|  8.75k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  8.75k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  6.57k|            return Some(cur);
  167|  2.18k|        }
  168|  2.18k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.18k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  2.18k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.18k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.18k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.87k|        while cur <= end.sub(V::BYTES) {
  213|    874|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    874|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    176|                return Some(cur);
  216|    698|            }
  217|    698|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.00k|        if cur < end {
  224|  1.67k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.67k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.67k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.67k|            return self.search_chunk(cur, topos);
  228|    326|        }
  229|    326|        None
  230|  8.75k|    }
_RNvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   206k|    pub(crate) unsafe fn find_raw(
  144|   206k|        &self,
  145|   206k|        start: *const u8,
  146|   206k|        end: *const u8,
  147|   206k|    ) -> Option<*const u8> {
  148|   206k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   206k|        // need to move up to using a u64 for the masks used below. Currently
  150|   206k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   206k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   206k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   206k|        let topos = V::Mask::first_offset;
  155|   206k|        let len = end.distance(start);
  156|   206k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   206k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   170k|            return Some(cur);
  167|  35.5k|        }
  168|  35.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  35.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  35.5k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  35.5k|        if len >= Self::LOOP_SIZE {
  172|  77.7k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  76.0k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  76.0k|                let a = V::load_aligned(cur);
  176|  76.0k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  76.0k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  76.0k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  76.0k|                let eqa = self.v1.cmpeq(a);
  180|  76.0k|                let eqb = self.v1.cmpeq(b);
  181|  76.0k|                let eqc = self.v1.cmpeq(c);
  182|  76.0k|                let eqd = self.v1.cmpeq(d);
  183|  76.0k|                let or1 = eqa.or(eqb);
  184|  76.0k|                let or2 = eqc.or(eqd);
  185|  76.0k|                let or3 = or1.or(or2);
  186|  76.0k|                if or3.movemask_will_have_non_zero() {
  187|  28.8k|                    let mask = eqa.movemask();
  188|  28.8k|                    if mask.has_non_zero() {
  189|  14.2k|                        return Some(cur.add(topos(mask)));
  190|  14.6k|                    }
  191|  14.6k|
  192|  14.6k|                    let mask = eqb.movemask();
  193|  14.6k|                    if mask.has_non_zero() {
  194|  13.2k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.46k|                    }
  196|  1.46k|
  197|  1.46k|                    let mask = eqc.movemask();
  198|  1.46k|                    if mask.has_non_zero() {
  199|    644|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    820|                    }
  201|    820|
  202|    820|                    let mask = eqd.movemask();
  203|    820|                    debug_assert!(mask.has_non_zero());
  204|    820|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  47.1k|                }
  206|  47.1k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  4.94k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  11.3k|        while cur <= end.sub(V::BYTES) {
  213|  8.05k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  8.05k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  3.33k|                return Some(cur);
  216|  4.72k|            }
  217|  4.72k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  3.28k|        if cur < end {
  224|  3.13k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  3.13k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  3.13k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  3.13k|            return self.search_chunk(cur, topos);
  228|    149|        }
  229|    149|        None
  230|   206k|    }
_RINvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  11.3k|    unsafe fn search_chunk(
  417|  11.3k|        &self,
  418|  11.3k|        cur: *const u8,
  419|  11.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  11.3k|    ) -> Option<*const u8> {
  421|  11.3k|        let chunk = V::load_unaligned(cur);
  422|  11.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  11.3k|        if mask.has_non_zero() {
  424|  7.38k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  3.91k|            None
  427|       |        }
  428|  11.3k|    }
_RINvMNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   217k|    unsafe fn search_chunk(
  417|   217k|        &self,
  418|   217k|        cur: *const u8,
  419|   217k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   217k|    ) -> Option<*const u8> {
  421|   217k|        let chunk = V::load_unaligned(cur);
  422|   217k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   217k|        if mask.has_non_zero() {
  424|   175k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  42.0k|            None
  427|       |        }
  428|   217k|    }
_RINvNtNtNtCsceChmz4NNcl_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  9.52k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  9.52k|    start: *const u8,
 1150|  9.52k|    end: *const u8,
 1151|  9.52k|    confirm: F,
 1152|  9.52k|) -> Option<*const u8> {
 1153|  9.52k|    debug_assert!(start <= end);
 1154|  9.52k|    let mut ptr = start;
 1155|  48.5k|    while ptr < end {
 1156|  45.5k|        if confirm(*ptr) {
 1157|  6.51k|            return Some(ptr);
 1158|  39.0k|        }
 1159|  39.0k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.00k|    None
 1162|  9.52k|}

_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   236k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   236k|        One {
   71|   236k|            sse2: generic::One::new(needle),
   72|   236k|            avx2: generic::One::new(needle),
   73|   236k|        }
   74|   236k|    }
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   236k|    pub unsafe fn find_raw(
  180|   236k|        &self,
  181|   236k|        start: *const u8,
  182|   236k|        end: *const u8,
  183|   236k|    ) -> Option<*const u8> {
  184|   236k|        if start >= end {
  185|  12.3k|            return None;
  186|   224k|        }
  187|   224k|        let len = end.distance(start);
  188|   224k|        if len < __m256i::BYTES {
  189|  18.2k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  9.52k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  9.52k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  8.75k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   206k|        }
  201|   206k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   206k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   206k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   206k|        // responsibility.
  205|   206k|        //
  206|   206k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   206k|        // means we'd have to annotate this routine with `target_feature`.
  208|   206k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   206k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   206k|        // The real problem is that a routine with a `target_feature`
  211|   206k|        // annotation generally can't be inlined into caller code unless
  212|   206k|        // the caller code has the same target feature annotations. Namely,
  213|   206k|        // the common case (at time of writing) is for calling code to not
  214|   206k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   206k|        // `target_feature` on this routine, it can be inlined which will
  216|   206k|        // handle some of the short-haystack cases above without touching the
  217|   206k|        // architecture specific code.
  218|   206k|        self.find_raw_avx2(start, end)
  219|   236k|    }
_RNCNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  45.5k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  45.5k|                    b == self.sse2.needle1()
  194|  45.5k|                })
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  8.75k|    unsafe fn find_raw_sse2(
  337|  8.75k|        &self,
  338|  8.75k|        start: *const u8,
  339|  8.75k|        end: *const u8,
  340|  8.75k|    ) -> Option<*const u8> {
  341|  8.75k|        self.sse2.find_raw(start, end)
  342|  8.75k|    }
_RNvMNtNtNtNtCsceChmz4NNcl_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   206k|    unsafe fn find_raw_avx2(
  397|   206k|        &self,
  398|   206k|        start: *const u8,
  399|   206k|        end: *const u8,
  400|   206k|    ) -> Option<*const u8> {
  401|   206k|        self.avx2.find_raw(start, end)
  402|   206k|    }

_RNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr10memchr_raw:
  174|   236k|pub(crate) fn memchr_raw(
  175|   236k|    n1: u8,
  176|   236k|    start: *const u8,
  177|   236k|    end: *const u8,
  178|   236k|) -> Option<*const u8> {
  179|   236k|    // SAFETY: We provide a valid function pointer type.
  180|   236k|    unsafe_ifunc!(
  181|   236k|        One,
  182|   236k|        find_raw,
  183|   236k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   236k|        Option<*const u8>,
  185|   236k|        start,
  186|   236k|        end,
  187|   236k|        n1
  188|   236k|    )
  189|   236k|}
_RNvNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   236k|        unsafe fn find_avx2(
   79|   236k|            $($needle: u8),+,
   80|   236k|            $hay_start: *const u8,
   81|   236k|            $hay_end: *const u8,
   82|   236k|        ) -> $retty {
   83|   236k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   236k|            $memchrty::new_unchecked($($needle),+)
   85|   236k|                .$memchrfind($hay_start, $hay_end)
   86|   236k|        }
_RNvNvNtNtNtCsceChmz4NNcl_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsceChmz4NNcl_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   662k|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   662k|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   662k|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   662k|    }
_RNvXNtCsceChmz4NNcl_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  37.6k|    fn as_usize(self) -> usize {
   27|  37.6k|        self as usize
   28|  37.6k|    }

_RNvNtCsceChmz4NNcl_6memchr6memchr6memchrCs2m53sVVLdi5_13oxigraph_fuzz:
   27|   236k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   236k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   236k|    // pointer between start and end.
   30|   236k|    unsafe {
   31|   236k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   236k|        })
   34|   236k|    }
   35|   236k|}
_RNCNvNtCsceChmz4NNcl_6memchr6memchr6memchr0B5_:
   31|   236k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   236k|            memchr_raw(needle, start, end)
   33|   236k|        })
_RNvNtCsceChmz4NNcl_6memchr6memchr10memchr_rawB3_:
  504|   236k|unsafe fn memchr_raw(
  505|   236k|    needle: u8,
  506|   236k|    start: *const u8,
  507|   236k|    end: *const u8,
  508|   236k|) -> Option<*const u8> {
  509|   236k|    #[cfg(target_arch = "x86_64")]
  510|   236k|    {
  511|   236k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   236k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   236k|        // time. This function also handles using a fallback if neither AVX2
  514|   236k|        // nor SSE2 (unusual) are available.
  515|   236k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   236k|    }
  517|   236k|    #[cfg(target_arch = "wasm32")]
  518|   236k|    {
  519|   236k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   236k|    }
  521|   236k|    #[cfg(target_arch = "aarch64")]
  522|   236k|    {
  523|   236k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   236k|    }
  525|   236k|    #[cfg(not(any(
  526|   236k|        target_arch = "x86_64",
  527|   236k|        target_arch = "wasm32",
  528|   236k|        target_arch = "aarch64"
  529|   236k|    )))]
  530|   236k|    {
  531|   236k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   236k|    }
  533|   236k|}

_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCsceChmz4NNcl_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  76.0k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  76.0k|        self.movemask().has_non_zero()
   67|  76.0k|    }
_RNvMNtCsceChmz4NNcl_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   211k|    fn get_for_offset(self) -> u32 {
  129|   211k|        #[cfg(target_endian = "big")]
  130|   211k|        {
  131|   211k|            self.0.swap_bytes()
  132|   211k|        }
  133|   211k|        #[cfg(target_endian = "little")]
  134|   211k|        {
  135|   211k|            self.0
  136|   211k|        }
  137|   211k|    }
_RNvXs_NtCsceChmz4NNcl_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   349k|    fn has_non_zero(self) -> bool {
  149|   349k|        self.0 != 0
  150|   349k|    }
_RNvXs_NtCsceChmz4NNcl_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   211k|    fn first_offset(self) -> usize {
  174|   211k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   211k|        // the bytes so we are in practice), where the most significant byte
  176|   211k|        // is at a higher address. That means the least significant bit that
  177|   211k|        // is set corresponds to the position of our first matching byte.
  178|   211k|        // That position corresponds to the number of zeros after the least
  179|   211k|        // significant bit.
  180|   211k|        self.get_for_offset().trailing_zeros() as usize
  181|   211k|    }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  11.3k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  11.3k|            _mm_loadu_si128(data as *const __m128i)
  222|  11.3k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  11.3k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  11.3k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  11.3k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  11.3k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  11.3k|            _mm_cmpeq_epi8(self, vector2)
  232|  11.3k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   217k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   217k|            _mm256_loadu_si256(data as *const __m256i)
  272|   217k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   339k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   339k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   339k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   521k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   521k|            _mm256_cmpeq_epi8(self, vector2)
  282|   521k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|   236k|        unsafe fn splat(byte: u8) -> __m128i {
  211|   236k|            _mm_set1_epi8(byte as i8)
  212|   236k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|   236k|        unsafe fn splat(byte: u8) -> __m256i {
  261|   236k|            _mm256_set1_epi8(byte as i8)
  262|   236k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   304k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   304k|            _mm256_load_si256(data as *const __m256i)
  267|   304k|        }
_RNvXNtNtCsceChmz4NNcl_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   228k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   228k|            _mm256_or_si256(self, vector2)
  292|   228k|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs1AvTbBNjq1X_13libfuzzer_sys:
   49|  4.34k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  4.34k|        // An `Acquire` load is enough because that makes all the initialization
   51|  4.34k|        // operations visible to us, and, this being a fast path, weaker
   52|  4.34k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  4.34k|        // `SeqCst` operations on the slow path.
   54|  4.34k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  4.34k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs1AvTbBNjq1X_13libfuzzer_sys:
  963|  4.34k|        pub fn get(&self) -> Option<&T> {
  964|  4.34k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  4.34k|                None
  969|       |            }
  970|  4.34k|        }

_RNvCsbIcdHmDfq23_10oxilangtag10is_numericCs6sLY0PWj8mX_5oxrdf:
  865|      4|fn is_numeric(s: &str) -> bool {
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
  867|      4|}
_RNvCsbIcdHmDfq23_10oxilangtag12to_lowercaseCs6sLY0PWj8mX_5oxrdf:
  892|  23.9k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  23.9k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  23.9k|}
_RNvCsbIcdHmDfq23_10oxilangtag12to_uppercaseCs6sLY0PWj8mX_5oxrdf:
  880|  2.50k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  2.50k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  2.50k|}
_RNvCsbIcdHmDfq23_10oxilangtag13is_alphabeticCs6sLY0PWj8mX_5oxrdf:
  860|  23.1k|fn is_alphabetic(s: &str) -> bool {
  861|  23.1k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  23.1k|}
_RNvCsbIcdHmDfq23_10oxilangtag15is_alphanumericCs6sLY0PWj8mX_5oxrdf:
  870|  10.8k|fn is_alphanumeric(s: &str) -> bool {
  871|  10.8k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  10.8k|}
_RNvCsbIcdHmDfq23_10oxilangtag18to_uppercase_firstCs6sLY0PWj8mX_5oxrdf:
  886|  1.25k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  1.25k|    let mut chars = s.chars();
  888|  1.25k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  1.25k|}
_RNvCsbIcdHmDfq23_10oxilangtag23is_alphanumeric_or_dashCs6sLY0PWj8mX_5oxrdf:
  875|    345|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    345|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    345|}
_RNvMsv_CsbIcdHmDfq23_10oxilangtagNtB5_14SubTagIterator3newCs6sLY0PWj8mX_5oxrdf:
  839|  10.9k|    fn new(input: &'a str) -> Self {
  840|  10.9k|        Self {
  841|  10.9k|            split: input.split('-'),
  842|  10.9k|            position: 0,
  843|  10.9k|        }
  844|  10.9k|    }
_RNvXsq_CsbIcdHmDfq23_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs6sLY0PWj8mX_5oxrdf:
  552|  21.2k|    fn push(&mut self, _: char) {}
_RNvXsw_CsbIcdHmDfq23_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs6sLY0PWj8mX_5oxrdf:
  851|  40.9k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  40.9k|        let tag = self.split.next()?;
  853|  30.0k|        let tag_end = self.position + tag.len();
  854|  30.0k|        self.position = tag_end + 1;
  855|  30.0k|        Some((tag, tag_end))
  856|  40.9k|    }
_RINvCsbIcdHmDfq23_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs6sLY0PWj8mX_5oxrdf:
  621|  10.9k|fn parse_langtag(
  622|  10.9k|    input: &str,
  623|  10.9k|    output: &mut impl OutputBuffer,
  624|  10.9k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  10.9k|    #[derive(PartialEq, Eq)]
  626|  10.9k|    enum State {
  627|  10.9k|        Start,
  628|  10.9k|        AfterLanguage,
  629|  10.9k|        AfterExtLang,
  630|  10.9k|        AfterScript,
  631|  10.9k|        AfterRegion,
  632|  10.9k|        InExtension { expected: bool },
  633|  10.9k|        InPrivateUse { expected: bool },
  634|  10.9k|    }
  635|  10.9k|
  636|  10.9k|    let mut state = State::Start;
  637|  10.9k|    let mut language_end = 0;
  638|  10.9k|    let mut extlang_end = 0;
  639|  10.9k|    let mut script_end = 0;
  640|  10.9k|    let mut region_end = 0;
  641|  10.9k|    let mut variant_end = 0;
  642|  10.9k|    let mut extension_end = 0;
  643|  10.9k|    let mut extlangs_count = 0;
  644|  30.0k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  30.0k|        if subtag.is_empty() {
  646|     33|            return Err(LanguageTagParseError {
  647|     33|                kind: TagParseErrorKind::EmptySubtag,
  648|     33|            });
  649|  29.9k|        }
  650|  29.9k|        if subtag.len() > 8 {
  651|      2|            return Err(LanguageTagParseError {
  652|      2|                kind: TagParseErrorKind::SubtagTooLong,
  653|      2|            });
  654|  29.9k|        }
  655|  29.9k|        if state == State::Start {
  656|       |            // Primary language
  657|  10.9k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|      4|                return Err(LanguageTagParseError {
  659|      4|                    kind: TagParseErrorKind::InvalidLanguage,
  660|      4|                });
  661|  10.9k|            }
  662|  10.9k|            language_end = end;
  663|  10.9k|            output.extend(to_lowercase(subtag));
  664|  10.9k|            if subtag.len() < 4 {
  665|  7.91k|                // extlangs are only allowed for short language tags
  666|  7.91k|                state = State::AfterLanguage;
  667|  7.91k|            } else {
  668|  3.04k|                state = State::AfterExtLang;
  669|  3.04k|            }
  670|  19.0k|        } else if let State::InPrivateUse { .. } = state {
  671|    765|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    765|            }
  676|    765|            output.push('-');
  677|    765|            output.extend(to_lowercase(subtag));
  678|    765|            state = State::InPrivateUse { expected: false };
  679|  18.2k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    491|            if let State::InExtension { expected: true } = state {
  682|      1|                return Err(LanguageTagParseError {
  683|      1|                    kind: TagParseErrorKind::EmptyExtension,
  684|      1|                });
  685|    490|            }
  686|    490|            output.push('-');
  687|    490|            output.push('x');
  688|    490|            state = State::InPrivateUse { expected: true };
  689|  17.7k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  1.76k|            if let State::InExtension { expected: true } = state {
  692|      9|                return Err(LanguageTagParseError {
  693|      9|                    kind: TagParseErrorKind::EmptyExtension,
  694|      9|                });
  695|  1.76k|            }
  696|  1.76k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.76k|            output.push('-');
  698|  1.76k|            output.push(extension_tag);
  699|  1.76k|            state = State::InExtension { expected: true };
  700|  16.0k|        } else if let State::InExtension { .. } = state {
  701|  3.83k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  3.83k|            }
  706|  3.83k|            extension_end = end;
  707|  3.83k|            output.push('-');
  708|  3.83k|            output.extend(to_lowercase(subtag));
  709|  3.83k|            state = State::InExtension { expected: false };
  710|  12.1k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  3.94k|            extlangs_count += 1;
  712|  3.94k|            if extlangs_count > 3 {
  713|      1|                return Err(LanguageTagParseError {
  714|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      1|                });
  716|  3.94k|            }
  717|  3.94k|            // valid extlangs
  718|  3.94k|            extlang_end = end;
  719|  3.94k|            output.push('-');
  720|  3.94k|            output.extend(to_lowercase(subtag));
  721|  8.21k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  5.20k|            && subtag.len() == 4
  723|  1.25k|            && is_alphabetic(subtag)
  724|  1.25k|        {
  725|  1.25k|            // Script
  726|  1.25k|            script_end = end;
  727|  1.25k|            output.push('-');
  728|  1.25k|            output.extend(to_uppercase_first(subtag));
  729|  1.25k|            state = State::AfterScript;
  730|  6.96k|        } else if (state == State::AfterLanguage
  731|  4.45k|            || state == State::AfterExtLang
  732|  3.01k|            || state == State::AfterScript)
  733|  4.89k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  2.39k|                || subtag.len() == 3 && is_numeric(subtag))
  735|  2.50k|        {
  736|  2.50k|            // Region
  737|  2.50k|            region_end = end;
  738|  2.50k|            output.push('-');
  739|  2.50k|            output.extend(to_uppercase(subtag));
  740|  2.50k|            state = State::AfterRegion;
  741|  4.46k|        } else if (state == State::AfterLanguage
  742|  3.02k|            || state == State::AfterExtLang
  743|  2.30k|            || state == State::AfterScript
  744|  2.06k|            || state == State::AfterRegion)
  745|  4.46k|            && is_alphanumeric(subtag)
  746|  4.46k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|     10|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  4.45k|        {
  749|  4.45k|            // Variant
  750|  4.45k|            variant_end = end;
  751|  4.45k|            output.push('-');
  752|  4.45k|            output.extend(to_lowercase(subtag));
  753|  4.45k|            state = State::AfterRegion;
  754|  4.45k|        } else {
  755|     10|            return Err(LanguageTagParseError {
  756|     10|                kind: TagParseErrorKind::InvalidSubtag,
  757|     10|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  10.9k|    if let State::InExtension { expected: true } = state {
  763|      5|        return Err(LanguageTagParseError {
  764|      5|            kind: TagParseErrorKind::EmptyExtension,
  765|      5|        });
  766|  10.9k|    }
  767|  10.9k|    if let State::InPrivateUse { expected: true } = state {
  768|      1|        return Err(LanguageTagParseError {
  769|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|      1|        });
  771|  10.9k|    }
  772|  10.9k|
  773|  10.9k|    //We make sure we have not skipped anyone
  774|  10.9k|    if extlang_end < language_end {
  775|  8.68k|        extlang_end = language_end;
  776|  8.68k|    }
  777|  10.9k|    if script_end < extlang_end {
  778|  9.66k|        script_end = extlang_end;
  779|  9.66k|    }
  780|  10.9k|    if region_end < script_end {
  781|  8.42k|        region_end = script_end;
  782|  8.42k|    }
  783|  10.9k|    if variant_end < region_end {
  784|  8.45k|        variant_end = region_end;
  785|  8.45k|    }
  786|  10.9k|    if extension_end < variant_end {
  787|  9.86k|        extension_end = variant_end;
  788|  9.86k|    }
  789|       |
  790|  10.9k|    Ok(TagElementsPositions {
  791|  10.9k|        language_end,
  792|  10.9k|        extlang_end,
  793|  10.9k|        script_end,
  794|  10.9k|        region_end,
  795|  10.9k|        variant_end,
  796|  10.9k|        extension_end,
  797|  10.9k|    })
  798|  10.9k|}
_RINvCsbIcdHmDfq23_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs6sLY0PWj8mX_5oxrdf:
  576|  11.3k|fn parse_language_tag(
  577|  11.3k|    input: &str,
  578|  11.3k|    output: &mut impl OutputBuffer,
  579|  11.3k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  11.3k|    if let Some(tag) = GRANDFATHEREDS
  582|  11.3k|        .iter()
  583|  11.3k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  11.3k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    345|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    345|        } else if input.len() == 2 {
  601|      1|            Err(LanguageTagParseError {
  602|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      1|            })
  604|       |        } else {
  605|    344|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    344|            Ok(TagElementsPositions {
  607|    344|                language_end: input.len(),
  608|    344|                extlang_end: input.len(),
  609|    344|                script_end: input.len(),
  610|    344|                region_end: input.len(),
  611|    344|                variant_end: input.len(),
  612|    344|                extension_end: input.len(),
  613|    344|            })
  614|       |        }
  615|       |    } else {
  616|  10.9k|        parse_langtag(input, output)
  617|       |    }
  618|  11.3k|}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs6sLY0PWj8mX_5oxrdf:
  560|    344|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs6sLY0PWj8mX_5oxrdf:
  560|  23.9k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs6sLY0PWj8mX_5oxrdf:
  560|  2.50k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsbIcdHmDfq23_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs6sLY0PWj8mX_5oxrdf:
  560|  1.25k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsbIcdHmDfq23_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs6sLY0PWj8mX_5oxrdf:
  583|   294k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCsbIcdHmDfq23_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs6sLY0PWj8mX_5oxrdf:
   54|  11.2k|    pub fn into_inner(self) -> T {
   55|  11.2k|        self.tag
   56|  11.2k|    }
_RNvMCsbIcdHmDfq23_10oxilangtagINtB2_11LanguageTagNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs6sLY0PWj8mX_5oxrdf:
   41|  11.3k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  11.3k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  11.2k|        Ok(Self { tag, positions })
   44|  11.3k|    }
_RNCNvCsbIcdHmDfq23_10oxilangtag13is_alphabetic0B3_:
  861|  60.9k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsbIcdHmDfq23_10oxilangtag10is_numeric0B3_:
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsbIcdHmDfq23_10oxilangtag15is_alphanumeric0B3_:
  871|  41.6k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsbIcdHmDfq23_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  4.23k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_CskWDZ7qu577C_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs6sLY0PWj8mX_5oxrdf:
 1567|    304|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|    304|        Err(IriParseError { kind })
 1569|    304|    }
_RNCNvMs11_CskWDZ7qu577C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs6sLY0PWj8mX_5oxrdf:
 1550|  1.71k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CskWDZ7qu577C_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs6sLY0PWj8mX_5oxrdf:
 1551|  1.70k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCskWDZ7qu577C_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs6sLY0PWj8mX_5oxrdf:
  191|  80.5k|    pub fn into_inner(self) -> T {
  192|  80.5k|        self.iri
  193|  80.5k|    }
_RNvMCskWDZ7qu577C_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs6sLY0PWj8mX_5oxrdf:
  205|  80.9k|    pub fn is_absolute(&self) -> bool {
  206|  80.9k|        self.positions.scheme_end != 0
  207|  80.9k|    }
_RNvMCskWDZ7qu577C_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs6sLY0PWj8mX_5oxrdf:
   58|  81.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  81.2k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  80.9k|        Ok(Self { iri, positions })
   61|  81.2k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs6sLY0PWj8mX_5oxrdf:
 1366|  45.3k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  45.3k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  4.53k|            let start_position = self.input.position;
 1370|  20.5k|            while let Some(c) = self.input.next() {
 1371|  20.4k|                self.output.push(c);
 1372|  20.4k|                if c == ']' {
 1373|  4.46k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  4.46k|                    if !UNCHECKED {
 1375|  4.46k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      3|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|  4.45k|                        }
 1378|      0|                    }
 1379|       |
 1380|  4.45k|                    let c = self.input.next();
 1381|  4.45k|                    return match c {
 1382|       |                        Some(':') => {
 1383|  1.41k|                            self.output.push(':');
 1384|  1.41k|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|  3.03k|                            self.output_positions.authority_end = self.output.len();
 1388|  3.03k|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      6|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  16.0k|                }
 1393|       |            }
 1394|     74|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   384k|            loop {
 1398|   384k|                let c = self.input.next();
 1399|   384k|                match c {
 1400|       |                    Some(':') => {
 1401|  3.14k|                        self.output.push(':');
 1402|  3.14k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  37.6k|                        self.output_positions.authority_end = self.output.len();
 1406|  37.6k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   343k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  45.3k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs6sLY0PWj8mX_5oxrdf:
 1457|  71.8k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   616k|        loop {
 1459|   616k|            let c = self.input.next();
 1460|   616k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|   112k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|   112k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|   112k|                    } else if c == Some('/') {
 1470|  40.2k|                        self.output.push('/');
 1471|  71.8k|                    }
 1472|       |
 1473|   112k|                    if c == Some('?') {
 1474|  1.96k|                        self.output_positions.path_end = self.output.len();
 1475|  1.96k|                        self.output.push('?');
 1476|  1.96k|                        return self.parse_query();
 1477|   110k|                    } else if c == Some('#') {
 1478|  35.3k|                        self.output_positions.path_end = self.output.len();
 1479|  35.3k|                        self.output_positions.query_end = self.output.len();
 1480|  35.3k|                        self.output.push('#');
 1481|  35.3k|                        return self.parse_fragment();
 1482|  74.7k|                    } else if c.is_none() {
 1483|  34.5k|                        self.output_positions.path_end = self.output.len();
 1484|  34.5k|                        self.output_positions.query_end = self.output.len();
 1485|  34.5k|                        return Ok(());
 1486|  40.2k|                    }
 1487|       |                }
 1488|   504k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  71.8k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs6sLY0PWj8mX_5oxrdf:
 1414|  4.56k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  7.94k|        loop {
 1416|  7.94k|            let c = self.input.next();
 1417|  5.68k|            match c {
 1418|  5.68k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  4.44k|                    self.output_positions.authority_end = self.output.len();
 1421|  4.44k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    115|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  4.56k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs6sLY0PWj8mX_5oxrdf:
 1547|  1.72k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.72k|        let c1 = self.input.next();
 1549|  1.72k|        let c2 = self.input.next();
 1550|  1.72k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  1.70k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.69k|            self.output.push('%');
 1554|  1.69k|            self.output.push(c1.unwrap());
 1555|  1.69k|            self.output.push(c2.unwrap());
 1556|  1.69k|            Ok(())
 1557|       |        } else {
 1558|     29|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|     29|                Some('%'),
 1560|     29|                c1,
 1561|     29|                c2,
 1562|     29|            ]))
 1563|       |        }
 1564|  1.72k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs6sLY0PWj8mX_5oxrdf:
 1493|  2.57k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  29.4k|        while let Some(c) = self.input.next() {
 1495|  27.1k|            if c == '#' {
 1496|    185|                self.output_positions.query_end = self.output.len();
 1497|    185|                self.output.push('#');
 1498|    185|                return self.parse_fragment();
 1499|       |            } else {
 1500|  26.9k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  2.37k|        self.output_positions.query_end = self.output.len();
 1504|  2.37k|        Ok(())
 1505|  2.57k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs6sLY0PWj8mX_5oxrdf:
 1220|  80.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   293k|        loop {
 1222|   293k|            let c = self.input.next();
 1223|   293k|            match c {
 1224|   293k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   212k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  80.6k|                    self.output.push(':');
 1229|  80.6k|                    self.output_positions.scheme_end = self.output.len();
 1230|  80.6k|                    self.input_scheme_end = self.input.position;
 1231|  80.6k|                    return if self.input.starts_with('/') {
 1232|  48.0k|                        self.input.next();
 1233|  48.0k|                        self.output.push('/');
 1234|  48.0k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  32.5k|                        self.output_positions.authority_end = self.output.len();
 1237|  32.5k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|     65|                    self.input = ParserInput {
 1242|     65|                        value: self.iri.chars(),
 1243|     65|                        position: 0,
 1244|     65|                    }; // reset
 1245|     65|                    self.output.clear();
 1246|     65|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  80.7k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs6sLY0PWj8mX_5oxrdf:
 1507|  37.8k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   252k|        while let Some(c) = self.input.next() {
 1509|   215k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  37.8k|        Ok(())
 1512|  37.8k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs6sLY0PWj8mX_5oxrdf:
 1263|    656|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|    656|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|    656|            self.output_positions.scheme_end = 0;
 1312|    656|            self.input_scheme_end = 0;
 1313|    656|            if self.input.starts_with('/') {
 1314|    339|                self.input.next();
 1315|    339|                self.output.push('/');
 1316|    339|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|    317|                self.output_positions.authority_end = 0;
 1319|    317|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|    656|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs6sLY0PWj8mX_5oxrdf:
 1342|  45.3k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   394k|        loop {
 1345|   394k|            let c = self.input.next();
 1346|   394k|            match c {
 1347|       |                Some('@') => {
 1348|    945|                    self.output.push('@');
 1349|    945|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  44.3k|                    self.input = ParserInput {
 1353|  44.3k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  44.3k|                        position: self.input_scheme_end + 2,
 1355|  44.3k|                    };
 1356|  44.3k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  44.3k|                    return self.parse_host();
 1358|       |                }
 1359|   348k|                Some(c) => {
 1360|   348k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  45.3k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs6sLY0PWj8mX_5oxrdf:
 1428|  45.1k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  45.1k|        match c {
 1430|       |            None => {
 1431|  6.27k|                self.output_positions.path_end = self.output.len();
 1432|  6.27k|                self.output_positions.query_end = self.output.len();
 1433|  6.27k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    610|                self.output_positions.path_end = self.output.len();
 1437|    610|                self.output.push('?');
 1438|    610|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|  2.33k|                self.output_positions.path_end = self.output.len();
 1442|  2.33k|                self.output_positions.query_end = self.output.len();
 1443|  2.33k|                self.output.push('#');
 1444|  2.33k|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  35.9k|                self.output.push('/');
 1448|  35.9k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  45.1k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs6sLY0PWj8mX_5oxrdf:
 1212|  81.2k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  81.2k|        match self.input.front() {
 1214|      4|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  81.2k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|    591|            _ => self.parse_relative(),
 1217|       |        }
 1218|  81.2k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs6sLY0PWj8mX_5oxrdf:
 1252|  48.3k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  48.3k|        if self.input.starts_with('/') {
 1254|  45.3k|            self.input.next();
 1255|  45.3k|            self.output.push('/');
 1256|  45.3k|            self.parse_authority()
 1257|       |        } else {
 1258|  3.05k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  3.05k|            self.parse_path()
 1260|       |        }
 1261|  48.3k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs6sLY0PWj8mX_5oxrdf:
 1523|  1.41M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  1.41M|        if UNCHECKED || is_url_code_point(c) {
 1525|  1.40M|            self.output.push(c);
 1526|  1.40M|            Ok(())
 1527|  1.56k|        } else if c == '%' {
 1528|  1.49k|            self.read_echar()
 1529|       |        } else {
 1530|     68|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  1.41M|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs6sLY0PWj8mX_5oxrdf:
 1535|  26.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  26.9k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  26.7k|            self.output.push(c);
 1538|  26.7k|            Ok(())
 1539|    231|        } else if c == '%' {
 1540|    226|            self.read_echar()
 1541|       |        } else {
 1542|      5|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  26.9k|    }
_RNvMs11_CskWDZ7qu577C_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs6sLY0PWj8mX_5oxrdf:
 1187|  81.2k|    fn parse(
 1188|  81.2k|        iri: &'a str,
 1189|  81.2k|        base: Option<IriRef<&'a str>>,
 1190|  81.2k|        output: &'a mut O,
 1191|  81.2k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  81.2k|        let mut parser = Self {
 1193|  81.2k|            iri,
 1194|  81.2k|            base,
 1195|  81.2k|            input: ParserInput {
 1196|  81.2k|                value: iri.chars(),
 1197|  81.2k|                position: 0,
 1198|  81.2k|            },
 1199|  81.2k|            output,
 1200|  81.2k|            output_positions: IriElementsPositions {
 1201|  81.2k|                scheme_end: 0,
 1202|  81.2k|                authority_end: 0,
 1203|  81.2k|                path_end: 0,
 1204|  81.2k|                query_end: 0,
 1205|  81.2k|            },
 1206|  81.2k|            input_scheme_end: 0,
 1207|  81.2k|        };
 1208|  81.2k|        parser.parse_scheme_start()?;
 1209|  80.9k|        Ok(parser.output_positions)
 1210|  81.2k|    }
_RNvMsp_CskWDZ7qu577C_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs6sLY0PWj8mX_5oxrdf:
  678|  80.5k|    pub fn into_inner(self) -> T {
  679|  80.5k|        self.0.into_inner()
  680|  80.5k|    }
_RNvMsp_CskWDZ7qu577C_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs6sLY0PWj8mX_5oxrdf:
  562|  81.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  81.2k|        IriRef::parse(iri)?.try_into()
  564|  81.2k|    }
_RNvXsV_CskWDZ7qu577C_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs6sLY0PWj8mX_5oxrdf:
  981|  80.9k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  80.9k|        if iri.is_absolute() {
  983|  80.5k|            Ok(Self(iri))
  984|       |        } else {
  985|    403|            Err(IriParseError {
  986|    403|                kind: IriParseErrorKind::NoScheme,
  987|    403|            })
  988|       |        }
  989|  80.9k|    }
_RNvCskWDZ7qu577C_5oxiri17is_url_code_pointCs6sLY0PWj8mX_5oxrdf:
 1573|  1.43M|fn is_url_code_point(c: char) -> bool {
 1574|  1.43M|    matches!(c,
 1575|   861k|        'a'..='z'
 1576|   192k|        | 'A'..='Z'
 1577|   275k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  14.1k|        | '\u{A0}'..='\u{D7FF}'
 1598|  2.50k|        | '\u{F900}'..='\u{FDCF}'
 1599|  2.50k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  2.50k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  2.50k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  2.50k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  2.50k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  2.49k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  2.49k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  2.49k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  2.49k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  2.49k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  2.49k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  2.49k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  2.49k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|    165|        | '\u{D0000}'..='\u{DFFFD}'
 1613|    156|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  1.43M|}
_RNvCskWDZ7qu577C_5oxiri23is_url_query_code_pointCs6sLY0PWj8mX_5oxrdf:
 1618|  26.9k|fn is_url_query_code_point(c: char) -> bool {
 1619|  26.9k|    is_url_code_point(c)
 1620|    525|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  26.9k|}
_RNvMs10_CskWDZ7qu577C_5oxiriNtB6_11ParserInput11starts_withCs6sLY0PWj8mX_5oxrdf:
 1169|   175k|    fn starts_with(&self, c: char) -> bool {
 1170|   175k|        self.value.as_str().starts_with(c)
 1171|   175k|    }
_RNvMs10_CskWDZ7qu577C_5oxiriNtB6_11ParserInput4nextCs6sLY0PWj8mX_5oxrdf:
 1154|  2.10M|    fn next(&mut self) -> Option<char> {
 1155|  2.10M|        if let Some(head) = self.value.next() {
 1156|  2.01M|            self.position += head.len_utf8();
 1157|  2.01M|            Some(head)
 1158|       |        } else {
 1159|  85.6k|            None
 1160|       |        }
 1161|  2.10M|    }
_RNvMs10_CskWDZ7qu577C_5oxiriNtB6_11ParserInput5frontCs6sLY0PWj8mX_5oxrdf:
 1164|  81.2k|    fn front(&self) -> Option<char> {
 1165|  81.2k|        self.value.clone().next()
 1166|  81.2k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs6sLY0PWj8mX_5oxrdf:
 1105|   323k|    fn len(&self) -> usize {
 1106|   323k|        self.len
 1107|   323k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs6sLY0PWj8mX_5oxrdf:
 1085|  1.97M|    fn push(&mut self, c: char) {
 1086|  1.97M|        self.len += c.len_utf8();
 1087|  1.97M|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs6sLY0PWj8mX_5oxrdf:
 1095|     65|    fn clear(&mut self) {
 1096|     65|        self.len = 0;
 1097|     65|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs6sLY0PWj8mX_5oxrdf:
 1110|   224k|    fn as_str(&self) -> &str {
 1111|   224k|        ""
 1112|   224k|    }
_RNvXsY_CskWDZ7qu577C_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs6sLY0PWj8mX_5oxrdf:
 1100|  44.3k|    fn truncate(&mut self, new_len: usize) {
 1101|  44.3k|        self.len = new_len;
 1102|  44.3k|    }

_RNvXNtCscrhqaIcCVjG_9thiserror7displayRNtNtCs6sLY0PWj8mX_5oxrdf8variable22VariableNameParseErrorNtB2_9AsDisplay10as_displayBF_:
   19|     10|    fn as_display(&'a self) -> Self::Target {
   20|     10|        *self
   21|     10|    }
_RNvXNtCscrhqaIcCVjG_9thiserror7displayRNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB2_9AsDisplay10as_displayCs6sLY0PWj8mX_5oxrdf:
   19|     10|    fn as_display(&'a self) -> Self::Target {
   20|     10|        *self
   21|     10|    }
_RNvXNtCscrhqaIcCVjG_9thiserror7displayRReNtB2_9AsDisplay10as_displayCslSWgdpqZ9ka_12oxsdatatypes:
   19|     86|    fn as_display(&'a self) -> Self::Target {
   20|     86|        *self
   21|     86|    }

_RNvNtCs2m53sVVLdi5_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  4.34k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  4.34k|    let parser = QueryResultsParser::from_format(format);
    8|  4.34k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  4.34k|    let Ok(reader) = parser.parse_read(data) else {
   11|    159|        return;
   12|       |    };
   13|  4.18k|    match reader {
   14|  4.18k|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|  4.18k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|  1.55k|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|  2.62k|            let mut writer = serializer
   21|  2.62k|                .serialize_solutions_to_write(
   22|  2.62k|                    Vec::new(),
   23|  2.62k|                    solutions
   24|  2.62k|                        .get(0)
   25|  2.62k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|  2.62k|                )
   27|  2.62k|                .unwrap();
   28|   106k|            for solution in &solutions {
   29|   104k|                writer.write(solution).unwrap();
   30|   104k|            }
   31|  2.62k|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|  2.62k|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|  2.62k|                .parse_read(serialized.as_bytes())
   36|  2.62k|                .with_context(|| format!("Parsing {serialized:?}"))
   37|  2.62k|                .unwrap()
   38|       |            {
   39|  2.62k|                assert_eq!(
   40|  2.62k|                    roundtrip_solutions
   41|  2.62k|                        .collect::<Result<Vec<_>, _>>()
   42|  2.62k|                        .with_context(|| format!("Parsing {serialized:?}"))
   43|  2.62k|                        .unwrap(),
   44|  2.62k|                    solutions
   45|  2.62k|                )
   46|      0|            }
   47|       |        }
   48|      2|        FromReadQueryResultsReader::Boolean(value) => {
   49|      2|            // We try to write again
   50|      2|            let mut serialized = Vec::new();
   51|      2|            serializer
   52|      2|                .serialize_boolean_to_write(&mut serialized, value)
   53|      2|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      2|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      2|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  4.34k|}
_RNCNvNtCs2m53sVVLdi5_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|  2.56k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs2m53sVVLdi5_13oxigraph_fuzz:
   87|  15.1k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   88|  15.1k|        BlankNodeRef(match &self.0 {
   89|  4.47k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   90|  10.6k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   91|  10.6k|                id: *id,
   92|  10.6k|                str: str.as_str(),
   93|  10.6k|            },
   94|       |        })
   95|  15.1k|    }
_RNvMs1_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs2m53sVVLdi5_13oxigraph_fuzz:
  175|  15.1k|    pub const fn as_str(self) -> &'a str {
  176|  15.1k|        match self.0 {
  177|  4.47k|            BlankNodeRefContent::Named(id) => id,
  178|  10.6k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  179|       |        }
  180|  15.1k|    }
_RNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs2m53sVVLdi5_13oxigraph_fuzz:
  261|  10.6k|    fn as_str(&self) -> &str {
  262|  10.6k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  10.6k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  10.6k|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   61|  21.6k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  21.6k|        Self(BlankNodeContent::Anonymous {
   63|  21.6k|            id,
   64|  21.6k|            str: IdStr::new(id),
   65|  21.6k|        })
   66|  21.6k|    }
_RNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  254|  21.6k|    fn new(id: u128) -> Self {
  255|  21.6k|        let mut str = [0; 32];
  256|  21.6k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  21.6k|        Self(str)
  258|  21.6k|    }
_RNvNtCs6sLY0PWj8mX_5oxrdf10blank_node30validate_blank_node_identifier:
  267|  30.8k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  268|  30.8k|    let mut chars = id.chars();
  269|  30.8k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  270|  30.8k|    match front {
  271|  30.8k|        '0'..='9'
  272|       |        | '_'
  273|       |        | ':'
  274|  4.34k|        | 'A'..='Z'
  275|  3.71k|        | 'a'..='z'
  276|    776|        | '\u{00C0}'..='\u{00D6}'
  277|    776|        | '\u{00D8}'..='\u{00F6}'
  278|    774|        | '\u{00F8}'..='\u{02FF}'
  279|    703|        | '\u{0370}'..='\u{037D}'
  280|    703|        | '\u{037F}'..='\u{1FFF}'
  281|    568|        | '\u{200C}'..='\u{200D}'
  282|    568|        | '\u{2070}'..='\u{218F}'
  283|    504|        | '\u{2C00}'..='\u{2FEF}'
  284|    504|        | '\u{3001}'..='\u{D7FF}'
  285|    386|        | '\u{F900}'..='\u{FDCF}'
  286|    386|        | '\u{FDF0}'..='\u{FFFD}'
  287|  30.8k|        | '\u{10000}'..='\u{EFFFF}' => (),
  288|      3|        _ => return Err(BlankNodeIdParseError),
  289|       |    }
  290|   307k|    for c in chars {
  291|   276k|        match c {
  292|       |            '.' // validated later
  293|       |            | '-'
  294|   270k|            | '0'..='9'
  295|       |            | '\u{00B7}'
  296|  2.10k|            | '\u{0300}'..='\u{036F}'
  297|    969|            | '\u{203F}'..='\u{2040}'
  298|       |            | '_'
  299|       |            | ':'
  300|  29.2k|            | 'A'..='Z'
  301|  20.9k|            | 'a'..='z'
  302|  2.11k|            | '\u{00C0}'..='\u{00D6}'
  303|  2.11k|            | '\u{00D8}'..='\u{00F6}'
  304|  2.11k|            | '\u{00F8}'..='\u{02FF}'
  305|  2.10k|            | '\u{0370}'..='\u{037D}'
  306|  2.10k|            | '\u{037F}'..='\u{1FFF}'
  307|    970|            | '\u{200C}'..='\u{200D}'
  308|    969|            | '\u{2070}'..='\u{218F}'
  309|    913|            | '\u{2C00}'..='\u{2FEF}'
  310|    913|            | '\u{3001}'..='\u{D7FF}'
  311|    818|            | '\u{F900}'..='\u{FDCF}'
  312|    818|            | '\u{FDF0}'..='\u{FFFD}'
  313|   276k|            | '\u{10000}'..='\u{EFFFF}' => (),
  314|      8|            _ => return Err(BlankNodeIdParseError),
  315|       |        }
  316|       |    }
  317|       |
  318|       |    // Could not end with a dot
  319|  30.8k|    if id.ends_with('.') {
  320|      5|        Err(BlankNodeIdParseError)
  321|       |    } else {
  322|  30.8k|        Ok(())
  323|       |    }
  324|  30.8k|}
_RNvNtCs6sLY0PWj8mX_5oxrdf10blank_node13to_integer_idB3_:
  327|  30.8k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  30.8k|    let digits = id.as_bytes();
  329|  30.8k|    let mut value: u128 = 0;
  330|  30.8k|    if let None | Some(b'0') = digits.first() {
  331|  1.89k|        return None; // No empty string or leading zeros
  332|  28.9k|    }
  333|   303k|    for digit in digits {
  334|   281k|        value = value.checked_mul(16)?.checked_add(
  335|   281k|            match *digit {
  336|   281k|                b'0'..=b'9' => digit - b'0',
  337|  21.3k|                b'a'..=b'f' => digit - b'a' + 10,
  338|  6.85k|                _ => return None,
  339|       |            }
  340|   274k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  21.6k|    Some(value)
  344|  30.8k|}
_RINvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   35|  30.8k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   36|  30.8k|        let id = id.into();
   37|  30.8k|        validate_blank_node_identifier(&id)?;
   38|  30.8k|        Ok(Self::new_unchecked(id))
   39|  30.8k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   48|  30.8k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|  30.8k|        let id = id.into();
   50|  30.8k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|  21.6k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  9.19k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|  30.8k|    }
_RNCNvMs7_NtCs6sLY0PWj8mX_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|   138k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB2_7Literal6as_refCs2m53sVVLdi5_13oxigraph_fuzz:
  131|  55.1k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  55.1k|        LiteralRef(match &self.0 {
  133|  1.93k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|  4.84k|            LiteralContent::LanguageTaggedString { value, language } => {
  135|  4.84k|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  48.3k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  48.3k|                value,
  139|  48.3k|                datatype: datatype.as_ref(),
  140|  48.3k|            },
  141|       |        })
  142|  55.1k|    }
_RNvMst_NtCs6sLY0PWj8mX_5oxrdf7literalNtB5_10LiteralRef5valueCs2m53sVVLdi5_13oxigraph_fuzz:
  490|  55.1k|    pub const fn value(self) -> &'a str {
  491|  55.1k|        match self.0 {
  492|  1.93k|            LiteralRefContent::String(value)
  493|  4.84k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|  55.1k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|  55.1k|        }
  496|  55.1k|    }
_RNvMst_NtCs6sLY0PWj8mX_5oxrdf7literalNtB5_10LiteralRef8datatypeCs2m53sVVLdi5_13oxigraph_fuzz:
  515|  50.3k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|  50.3k|        match self.0 {
  517|  1.93k|            LiteralRefContent::String(_) => xsd::STRING,
  518|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|  48.3k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|  50.3k|    }
_RNvMst_NtCs6sLY0PWj8mX_5oxrdf7literalNtB5_10LiteralRef8languageCs2m53sVVLdi5_13oxigraph_fuzz:
  503|  55.1k|    pub const fn language(self) -> Option<&'a str> {
  504|  55.1k|        match self.0 {
  505|  4.84k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  506|  50.3k|            _ => None,
  507|       |        }
  508|  55.1k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|  3.71k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  3.71k|        Self(LiteralContent::String(value.into()))
   51|  3.71k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|  35.9k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  35.9k|        let value = value.into();
   57|  35.9k|        let datatype = datatype.into();
   58|  35.9k|        Self(if datatype == xsd::STRING {
   59|    274|            LiteralContent::String(value)
   60|       |        } else {
   61|  35.7k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  35.9k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   55|  64.7k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  64.7k|        let value = value.into();
   57|  64.7k|        let datatype = datatype.into();
   58|  64.7k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  64.7k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  64.7k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringReEB5_:
   67|  11.3k|    pub fn new_language_tagged_literal(
   68|  11.3k|        value: impl Into<String>,
   69|  11.3k|        language: impl Into<String>,
   70|  11.3k|    ) -> Result<Self, LanguageTagParseError> {
   71|  11.3k|        let mut language = language.into();
   72|  11.3k|        language.make_ascii_lowercase();
   73|  11.3k|        Ok(Self::new_language_tagged_literal_unchecked(
   74|  11.3k|            value,
   75|  11.3k|            LanguageTag::parse(language)?.into_inner(),
   76|       |        ))
   77|  11.3k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   87|  11.2k|    pub fn new_language_tagged_literal_unchecked(
   88|  11.2k|        value: impl Into<String>,
   89|  11.2k|        language: impl Into<String>,
   90|  11.2k|    ) -> Self {
   91|  11.2k|        Self(LiteralContent::LanguageTaggedString {
   92|  11.2k|            value: value.into(),
   93|  11.2k|            language: language.into(),
   94|  11.2k|        })
   95|  11.2k|    }

_RNvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs2m53sVVLdi5_13oxigraph_fuzz:
   54|  67.6k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  67.6k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  67.6k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs2m53sVVLdi5_13oxigraph_fuzz:
  128|  67.6k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  67.6k|        Self { iri }
  130|  67.6k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs2m53sVVLdi5_13oxigraph_fuzz:
  133|  48.7k|    pub const fn as_str(self) -> &'a str {
  134|  48.7k|        self.iri
  135|  48.7k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  81.2k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  81.2k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  81.2k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  80.5k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  80.5k|        Self { iri: iri.into() }
   41|  80.5k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  64.7k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  64.7k|        Self { iri: iri.into() }
   41|  64.7k|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  80.5k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  80.5k|        Self::new_unchecked(iri.into_inner())
   31|  80.5k|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   100k|    pub fn as_str(&self) -> &str {
   45|   100k|        self.iri.as_str()
   46|   100k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   100k|    pub const fn as_str(self) -> &'a str {
  134|   100k|        self.iri
  135|   100k|    }
_RNvMs4_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  64.7k|    pub fn into_owned(self) -> NamedNode {
  139|  64.7k|        NamedNode::new_unchecked(self.iri)
  140|  64.7k|    }
_RNvXs6_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  64.7k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  64.7k|        node.into_owned()
  154|  64.7k|    }
_RNvXs9_NtCs6sLY0PWj8mX_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   100k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   100k|        self.as_str() == other.as_str()
  175|   100k|    }

_RNvXs1_NtCs6sLY0PWj8mX_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  139|   152k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  140|   152k|        let (term, left) = read_term(s, 0)?;
  141|   150k|        if !left.is_empty() {
  142|    106|            return Err(Self::Err::msg("Invalid term serialization"));
  143|   150k|        }
  144|   150k|        Ok(term)
  145|   152k|    }
_RNvNtCs6sLY0PWj8mX_5oxrdf6parser15read_named_node:
  177|  81.4k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  178|  81.4k|    let s = s.trim();
  179|  81.4k|    if let Some(remain) = s.strip_prefix('<') {
  180|  81.3k|        let end = remain
  181|  81.3k|            .find('>')
  182|  81.3k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  183|  81.2k|        let (value, remain) = remain.split_at(end);
  184|  81.2k|        let remain = &remain[1..];
  185|  81.2k|        let term = NamedNode::new(value).map_err(|error| {
  186|       |            TermParseError(TermParseErrorKind::Iri {
  187|       |                value: value.to_owned(),
  188|       |                error,
  189|       |            })
  190|  81.2k|        })?;
  191|  80.5k|        Ok((term, remain))
  192|       |    } else {
  193|     54|        Err(TermParseError::msg(
  194|     54|            "Named node serialization should start with a <",
  195|     54|        ))
  196|       |    }
  197|  81.4k|}
_RNvNtCs6sLY0PWj8mX_5oxrdf6parser15read_blank_node:
  199|  30.8k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  200|  30.8k|    let s = s.trim();
  201|  30.8k|    if let Some(remain) = s.strip_prefix("_:") {
  202|  30.8k|        let end = remain
  203|  30.8k|            .find(|v: char| {
  204|       |                v.is_whitespace()
  205|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  206|  30.8k|            })
  207|  30.8k|            .unwrap_or(remain.len());
  208|  30.8k|        let (value, remain) = remain.split_at(end);
  209|  30.8k|        let term = BlankNode::new(value).map_err(|error| {
  210|       |            TermParseError(TermParseErrorKind::BlankNode {
  211|       |                value: value.to_owned(),
  212|       |                error,
  213|       |            })
  214|  30.8k|        })?;
  215|  30.8k|        Ok((term, remain))
  216|       |    } else {
  217|      3|        Err(TermParseError::msg(
  218|      3|            "Blank node serialization should start with '_:'",
  219|      3|        ))
  220|       |    }
  221|  30.8k|}
_RNvNtCs6sLY0PWj8mX_5oxrdf6parser12read_literal:
  223|   116k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  224|   116k|    let s = s.trim();
  225|   116k|    if let Some(s) = s.strip_prefix('"') {
  226|  51.1k|        let mut value = String::with_capacity(s.len());
  227|  51.1k|        let mut chars = s.chars();
  228|   613k|        while let Some(c) = chars.next() {
  229|   613k|            match c {
  230|       |                '"' => {
  231|  51.0k|                    let remain = chars.as_str();
  232|  51.0k|                    return if let Some(remain) = remain.strip_prefix('@') {
  233|  11.3k|                        let end = remain
  234|  11.3k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  235|  11.3k|                            .unwrap_or(remain.len());
  236|  11.3k|                        let (language, remain) = remain.split_at(end);
  237|  11.3k|                        Ok((
  238|  11.3k|                            Literal::new_language_tagged_literal(value, language).map_err(
  239|  11.3k|                                |error| {
  240|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  241|       |                                        value: language.to_owned(),
  242|       |                                        error,
  243|       |                                    })
  244|  11.3k|                                },
  245|  11.3k|                            )?,
  246|  11.2k|                            remain,
  247|       |                        ))
  248|  39.7k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  249|  35.9k|                        let (datatype, remain) = read_named_node(remain)?;
  250|  35.9k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  251|       |                    } else {
  252|  3.71k|                        Ok((Literal::new_simple_literal(value), remain))
  253|       |                    };
  254|       |                }
  255|       |                '\\' => {
  256|  16.2k|                    if let Some(c) = chars.next() {
  257|  16.2k|                        value.push(match c {
  258|  2.78k|                            't' => '\t',
  259|    242|                            'b' => '\u{08}',
  260|  1.24k|                            'n' => '\n',
  261|  1.69k|                            'r' => '\r',
  262|    202|                            'f' => '\u{0C}',
  263|  1.26k|                            '"' => '"',
  264|    450|                            '\'' => '\'',
  265|  7.58k|                            '\\' => '\\',
  266|    471|                            'u' => read_hexa_char(&mut chars, 4)?,
  267|    327|                            'U' => read_hexa_char(&mut chars, 8)?,
  268|      4|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  269|       |                        })
  270|       |                    } else {
  271|      4|                        return Err(TermParseError::msg("Unexpected literal end"));
  272|       |                    }
  273|       |                }
  274|   546k|                _ => value.push(c),
  275|       |            }
  276|       |        }
  277|     63|        Err(TermParseError::msg("Unexpected literal end"))
  278|  64.9k|    } else if let Some(remain) = s.strip_prefix("true") {
  279|  1.40k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  280|  63.5k|    } else if let Some(remain) = s.strip_prefix("false") {
  281|  1.42k|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  282|       |    } else {
  283|  62.0k|        let input = s.as_bytes();
  284|  62.0k|        if input.is_empty() {
  285|     67|            return Err(TermParseError::msg("Empty term serialization"));
  286|  62.0k|        }
  287|       |
  288|  62.0k|        let mut cursor = match input.first() {
  289|  8.99k|            Some(b'+' | b'-') => 1,
  290|  53.0k|            _ => 0,
  291|       |        };
  292|  62.0k|        let mut with_dot = false;
  293|  62.0k|
  294|  62.0k|        let mut count_before: usize = 0;
  295|   170k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  296|   108k|            count_before += 1;
  297|   108k|            cursor += 1;
  298|   108k|        }
  299|       |
  300|  62.0k|        let mut count_after: usize = 0;
  301|  62.0k|        if cursor < input.len() && input[cursor] == b'.' {
  302|  14.9k|            with_dot = true;
  303|  14.9k|            cursor += 1;
  304|  57.5k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  305|  42.6k|                count_after += 1;
  306|  42.6k|                cursor += 1;
  307|  42.6k|            }
  308|  47.0k|        }
  309|       |
  310|  62.0k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  311|  23.7k|            cursor += 1;
  312|  23.7k|            cursor += match input.get(cursor) {
  313|    171|                Some(b'+' | b'-') => 1,
  314|  23.5k|                _ => 0,
  315|       |            };
  316|  23.7k|            let mut count_exponent = 0;
  317|  82.0k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  318|  58.3k|                count_exponent += 1;
  319|  58.3k|                cursor += 1;
  320|  58.3k|            }
  321|  23.7k|            if count_exponent > 0 {
  322|  23.7k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  323|       |            } else {
  324|      7|                Err(TermParseError::msg(
  325|      7|                    "Double serialization with an invalid exponent",
  326|      7|                ))
  327|       |            }
  328|  38.2k|        } else if with_dot {
  329|  11.7k|            if count_after > 0 {
  330|  11.7k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  331|       |            } else {
  332|     10|                Err(TermParseError::msg(
  333|     10|                    "Decimal serialization without floating part",
  334|     10|                ))
  335|       |            }
  336|  26.5k|        } else if count_before > 0 {
  337|  26.4k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  338|       |        } else {
  339|    121|            Err(TermParseError::msg("Empty integer serialization"))
  340|       |        }
  341|       |    }
  342|   116k|}
_RNvNtCs6sLY0PWj8mX_5oxrdf6parser9read_term:
  344|   197k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  345|   197k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  346|      1|        return Err(TermParseError::msg(
  347|      1|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  348|      1|        ));
  349|   197k|    }
  350|   197k|    let s = s.trim();
  351|       |    #[allow(unused_variables)]
  352|   197k|    if let Some(remain) = s.strip_prefix("<<") {
  353|       |        #[cfg(feature = "rdf-star")]
  354|       |        {
  355|  25.8k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  356|  20.1k|            let (predicate, remain) = read_named_node(remain)?;
  357|  20.0k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  358|  18.6k|            let remain = remain.trim_start();
  359|  18.6k|            if let Some(remain) = remain.strip_prefix(">>") {
  360|       |                Ok((
  361|       |                    Triple {
  362|  18.5k|                        subject: match subject {
  363|  7.40k|                            Term::NamedNode(s) => s.into(),
  364|  2.97k|                            Term::BlankNode(s) => s.into(),
  365|       |                            Term::Literal(_) => {
  366|      1|                                return Err(TermParseError::msg(
  367|      1|                                    "Literals are not allowed in subject position",
  368|      1|                                ))
  369|       |                            }
  370|  8.18k|                            Term::Triple(s) => Subject::Triple(s),
  371|       |                        },
  372|  18.5k|                        predicate,
  373|  18.5k|                        object,
  374|  18.5k|                    }
  375|  18.5k|                    .into(),
  376|  18.5k|                    remain,
  377|       |                ))
  378|       |            } else {
  379|     58|                Err(TermParseError::msg(
  380|     58|                    "Nested triple serialization should be enclosed between << and >>",
  381|     58|                ))
  382|       |            }
  383|       |        }
  384|       |        #[cfg(not(feature = "rdf-star"))]
  385|       |        {
  386|       |            Err(TermParseError::msg("RDF-star is not supported"))
  387|       |        }
  388|   172k|    } else if s.starts_with('<') {
  389|  25.2k|        let (term, remain) = read_named_node(s)?;
  390|  24.5k|        Ok((term.into(), remain))
  391|   146k|    } else if s.starts_with('_') {
  392|  30.8k|        let (term, remain) = read_blank_node(s)?;
  393|  30.8k|        Ok((term.into(), remain))
  394|       |    } else {
  395|   116k|        let (term, remain) = read_literal(s)?;
  396|   115k|        Ok((term.into(), remain))
  397|       |    }
  398|   197k|}
_RNvNtCs6sLY0PWj8mX_5oxrdf6parser14read_hexa_char:
  400|    798|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  401|    798|    let mut value = 0;
  402|    798|    for _ in 0..len {
  403|  4.35k|        if let Some(c) = input.next() {
  404|  4.32k|            value = value * 16
  405|  4.32k|                + match c {
  406|  4.32k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  407|    742|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  408|    700|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  409|       |                    _ => {
  410|      5|                        return Err(TermParseError::msg(
  411|      5|                            "Unexpected character in a unicode escape",
  412|      5|                        ))
  413|       |                    }
  414|       |                }
  415|       |        } else {
  416|     31|            return Err(TermParseError::msg("Unexpected literal string end"));
  417|       |        }
  418|       |    }
  419|    762|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  420|    798|}
_RNvMs3_NtCs6sLY0PWj8mX_5oxrdf6parserNtB5_14TermParseError3msg:
  452|    678|    pub(crate) fn msg(msg: &'static str) -> Self {
  453|    678|        Self(TermParseErrorKind::Msg(msg))
  454|    678|    }
_RNvXs6_NtCs6sLY0PWj8mX_5oxrdf6parserNtB5_14TermParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  423|     96|#[derive(Debug, thiserror::Error)]
_RNvXsa_NtCs6sLY0PWj8mX_5oxrdf6parserNtB5_18TermParseErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  428|     96|#[derive(Debug, thiserror::Error)]
_RNvXs2_NtCs6sLY0PWj8mX_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  162|  5.91k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  163|  5.91k|        if !s.starts_with('?') && !s.starts_with('$') {
  164|     86|            return Err(Self::Err::msg(
  165|     86|                "Variable serialization should start with ? or $",
  166|     86|            ));
  167|  5.82k|        }
  168|  5.82k|        Self::new(&s[1..]).map_err(|error| {
  169|       |            TermParseError(TermParseErrorKind::Variable {
  170|       |                value: s.to_owned(),
  171|       |                error,
  172|       |            })
  173|  5.82k|        })
  174|  5.91k|    }
_RNCNvXs2_NtCs6sLY0PWj8mX_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str0B9_:
  168|     10|        Self::new(&s[1..]).map_err(|error| {
  169|     10|            TermParseError(TermParseErrorKind::Variable {
  170|     10|                value: s.to_owned(),
  171|     10|                error,
  172|     10|            })
  173|     10|        })
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser15read_named_node0B5_:
  182|     55|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser15read_named_nodes_0B5_:
  185|    707|        let term = NamedNode::new(value).map_err(|error| {
  186|    707|            TermParseError(TermParseErrorKind::Iri {
  187|    707|                value: value.to_owned(),
  188|    707|                error,
  189|    707|            })
  190|    707|        })?;
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser15read_blank_node0B5_:
  203|   312k|            .find(|v: char| {
  204|   312k|                v.is_whitespace()
  205|   310k|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  206|   312k|            })
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser15read_blank_nodes_0B5_:
  209|     57|        let term = BlankNode::new(value).map_err(|error| {
  210|     57|            TermParseError(TermParseErrorKind::BlankNode {
  211|     57|                value: value.to_owned(),
  212|     57|                error,
  213|     57|            })
  214|     57|        })?;
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser12read_literal0B5_:
  234|   122k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser12read_literals_0B5_:
  239|     67|                                |error| {
  240|     67|                                    TermParseError(TermParseErrorKind::LanguageTag {
  241|     67|                                        value: language.to_owned(),
  242|     67|                                        error,
  243|     67|                                    })
  244|     67|                                },
_RNCNvNtCs6sLY0PWj8mX_5oxrdf6parser14read_hexa_char0B5_:
  419|      2|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))

_RNvMsc_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7Subject6as_refCs2m53sVVLdi5_13oxigraph_fuzz:
  181|  7.91k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  7.91k|        match self {
  183|  3.13k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  1.44k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  3.34k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  7.91k|    }
_RNvMsy_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4Term6as_refCs2m53sVVLdi5_13oxigraph_fuzz:
  417|  81.6k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  81.6k|        match self {
  419|  8.24k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  13.7k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  55.1k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  4.57k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  81.6k|    }
_RNvXs10_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4TermE4fromCs2m53sVVLdi5_13oxigraph_fuzz:
  685|  81.6k|    fn from(node: &'a Term) -> Self {
  686|  81.6k|        node.as_ref()
  687|  81.6k|    }
_RNvXsQ_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCs2m53sVVLdi5_13oxigraph_fuzz:
  606|  7.91k|    fn from(node: &'a NamedNode) -> Self {
  607|  7.91k|        node.as_ref().into()
  608|  7.91k|    }
_RNvXsZ_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_7SubjectE4fromCs2m53sVVLdi5_13oxigraph_fuzz:
  678|  7.91k|    fn from(node: &'a Subject) -> Self {
  679|  7.91k|        node.as_ref().into()
  680|  7.91k|    }
_RNvXsP_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs3rDsZdjxS1r_10sparesults:
  599|  40.5k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  40.5k|        Self::NamedNode(node)
  601|  40.5k|    }
_RNvXsR_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs3rDsZdjxS1r_10sparesults:
  613|  1.44k|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|  1.44k|        Self::BlankNode(node)
  615|  1.44k|    }
_RNvXsV_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_6TripleE4fromCs3rDsZdjxS1r_10sparesults:
  642|  3.34k|    fn from(node: &'a Triple) -> Self {
  643|  3.34k|        Self::Triple(node)
  644|  3.34k|    }
_RNvXsY_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtB5_10SubjectRefE4fromCs3rDsZdjxS1r_10sparesults:
  666|  7.91k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  7.91k|        match node {
  668|  3.13k|            SubjectRef::NamedNode(node) => node.into(),
  669|  1.44k|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|  3.34k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  7.91k|    }
_RNvXse_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  7.40k|    fn from(node: NamedNode) -> Self {
  201|  7.40k|        Self::NamedNode(node)
  202|  7.40k|    }
_RNvXsg_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  2.97k|    fn from(node: BlankNode) -> Self {
  215|  2.97k|        Self::BlankNode(node)
  216|  2.97k|    }
_RNvXsA_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  24.5k|    fn from(node: NamedNode) -> Self {
  438|  24.5k|        Self::NamedNode(node)
  439|  24.5k|    }
_RNvXsC_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  30.8k|    fn from(node: BlankNode) -> Self {
  452|  30.8k|        Self::BlankNode(node)
  453|  30.8k|    }
_RNvXsE_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   115k|    fn from(literal: Literal) -> Self {
  466|   115k|        Self::Literal(literal)
  467|   115k|    }
_RNvXsG_NtCs6sLY0PWj8mX_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  18.5k|    fn from(triple: Triple) -> Self {
  481|  18.5k|        Self::Triple(Box::new(triple))
  482|  18.5k|    }

_RNvMNtCs6sLY0PWj8mX_5oxrdf8variableNtB2_8Variable6as_refCs2m53sVVLdi5_13oxigraph_fuzz:
   50|   148k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|   148k|        VariableRef { name: &self.name }
   52|   148k|    }
_RNvXs1_NtCs6sLY0PWj8mX_5oxrdf8variableNtB5_11VariableRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs2m53sVVLdi5_13oxigraph_fuzz:
  116|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|      8|        write!(f, "?{}", self.name)
  118|      8|    }
_RNvXs2_NtCs6sLY0PWj8mX_5oxrdf8variableNtB5_11VariableRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_8VariableE4fromCs2m53sVVLdi5_13oxigraph_fuzz:
  123|  73.7k|    fn from(variable: &'a Variable) -> Self {
  124|  73.7k|        variable.as_ref()
  125|  73.7k|    }
_RNvXs5_NtCs6sLY0PWj8mX_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs2m53sVVLdi5_13oxigraph_fuzz:
  144|  74.9k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|  74.9k|        self.as_ref() == *other
  146|  74.9k|    }
_RNvXs_NtCs6sLY0PWj8mX_5oxrdf8variableNtB4_8VariableNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs2m53sVVLdi5_13oxigraph_fuzz:
   57|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|      8|        self.as_ref().fmt(f)
   59|      8|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf8variableNtB2_8Variable6as_refCs3rDsZdjxS1r_10sparesults:
   50|   297k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|   297k|        VariableRef { name: &self.name }
   52|   297k|    }
_RNvMNtCs6sLY0PWj8mX_5oxrdf8variableNtB2_8Variable6as_strCs3rDsZdjxS1r_10sparesults:
   40|  2.62k|    pub fn as_str(&self) -> &str {
   41|  2.62k|        &self.name
   42|  2.62k|    }
_RNvXs5_NtCs6sLY0PWj8mX_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs3rDsZdjxS1r_10sparesults:
  144|   149k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   149k|        self.as_ref() == *other
  146|   149k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf8variableNtB3_8Variable3newReEB5_:
   22|  5.82k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  5.82k|        let name = name.into();
   24|  5.82k|        validate_variable_identifier(&name)?;
   25|  5.81k|        Ok(Self::new_unchecked(name))
   26|  5.82k|    }
_RINvMNtCs6sLY0PWj8mX_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   35|  5.81k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  5.81k|        Self { name: name.into() }
   37|  5.81k|    }
_RNvNtCs6sLY0PWj8mX_5oxrdf8variable28validate_variable_identifier:
  163|  5.82k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  5.82k|    let mut chars = id.chars();
  165|  5.82k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  5.82k|    match front {
  167|  5.82k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  3.20k|        | 'A'..='Z'
  171|  1.08k|        | 'a'..='z'
  172|    106|        | '\u{00C0}'..='\u{00D6}'
  173|    106|        | '\u{00D8}'..='\u{00F6}'
  174|    100|        | '\u{00F8}'..='\u{02FF}'
  175|    100|        | '\u{0370}'..='\u{037D}'
  176|    100|        | '\u{037F}'..='\u{1FFF}'
  177|     31|        | '\u{200C}'..='\u{200D}'
  178|     31|        | '\u{2070}'..='\u{218F}'
  179|     22|        | '\u{2C00}'..='\u{2FEF}'
  180|     22|        | '\u{3001}'..='\u{D7FF}'
  181|      6|        | '\u{F900}'..='\u{FDCF}'
  182|      6|        | '\u{FDF0}'..='\u{FFFD}'
  183|  5.82k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      1|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  11.3k|    for c in chars {
  187|  5.57k|        match c {
  188|  5.57k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|    379|            | '\u{0300}'..='\u{036F}'
  191|    178|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  2.87k|            | 'A'..='Z'
  194|  1.26k|            | 'a'..='z'
  195|    381|            | '\u{00C0}'..='\u{00D6}'
  196|    381|            | '\u{00D8}'..='\u{00F6}'
  197|    379|            | '\u{00F8}'..='\u{02FF}'
  198|    379|            | '\u{0370}'..='\u{037D}'
  199|    379|            | '\u{037F}'..='\u{1FFF}'
  200|    178|            | '\u{200C}'..='\u{200D}'
  201|    178|            | '\u{2070}'..='\u{218F}'
  202|    178|            | '\u{2C00}'..='\u{2FEF}'
  203|    177|            | '\u{3001}'..='\u{D7FF}'
  204|     80|            | '\u{F900}'..='\u{FDCF}'
  205|     80|            | '\u{FDF0}'..='\u{FFFD}'
  206|  5.56k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      7|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  5.81k|    Ok(())
  211|  5.82k|}
_RNvXsr_NtCs6sLY0PWj8mX_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  214|     10|#[derive(Debug, thiserror::Error)]

_RINvMs0_NtCs3rDsZdjxS1r_10sparesults3csvINtB6_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB37_22ToWriteSolutionsWriterB19_E5writeRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableRNtNtB49_6triple4TermRNtB2F_13QuerySolutionE0EECs2m53sVVLdi5_13oxigraph_fuzz:
  202|   104k|    pub fn write<'a>(
  203|   104k|        &mut self,
  204|   104k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  205|   104k|    ) -> io::Result<()> {
  206|   104k|        self.inner.write(&mut self.buffer, solution);
  207|   104k|        self.write.write_all(self.buffer.as_bytes())?;
  208|   104k|        self.buffer.clear();
  209|   104k|        Ok(())
  210|   104k|    }
_RINvMs1_NtCs3rDsZdjxS1r_10sparesults3csvNtB6_23InnerTsvSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2u_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableRNtNtB41_6triple4TermRNtB22_13QuerySolutionE0EECs2m53sVVLdi5_13oxigraph_fuzz:
  273|   104k|    fn write<'a>(
  274|   104k|        &self,
  275|   104k|        output: &mut String,
  276|   104k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  277|   104k|    ) {
  278|   104k|        let mut values = vec![None; self.variables.len()];
  279|   177k|        for (variable, value) in solution {
  280|  73.7k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  281|  73.7k|                values[position] = Some(value);
  282|  73.7k|            }
  283|       |        }
  284|   104k|        let mut start_binding = true;
  285|   209k|        for value in values {
  286|   105k|            if start_binding {
  287|   103k|                start_binding = false;
  288|   103k|            } else {
  289|  1.48k|                output.push('\t');
  290|  1.48k|            }
  291|   105k|            if let Some(value) = value {
  292|  73.7k|                write_tsv_term(output, value);
  293|  73.7k|            }
  294|       |        }
  295|   104k|        output.push('\n');
  296|   104k|    }
_RINvMs4_NtCs3rDsZdjxS1r_10sparesults3csvNtB6_10LineReader9next_lineRShECs2m53sVVLdi5_13oxigraph_fuzz:
  582|   227k|    fn next_line<'a>(
  583|   227k|        &mut self,
  584|   227k|        buffer: &'a mut Vec<u8>,
  585|   227k|        read: &mut impl Read,
  586|   227k|    ) -> io::Result<&'a str> {
  587|   227k|        let line_end = loop {
  588|   236k|            if let Some(eol) = memchr(b'\n', &buffer[self.buffer_start..self.buffer_end]) {
  589|   218k|                break self.buffer_start + eol + 1;
  590|  18.6k|            }
  591|  18.6k|            if self.buffer_start > 0 {
  592|  11.0k|                buffer.copy_within(self.buffer_start..self.buffer_end, 0);
  593|  11.0k|                self.buffer_end -= self.buffer_start;
  594|  11.0k|                self.buffer_start = 0;
  595|  11.0k|            }
  596|  18.6k|            if self.buffer_end + 1024 > buffer.len() {
  597|  12.3k|                if self.buffer_end + 1024 > MAX_BUFFER_SIZE {
  598|      0|                    return Err(io::Error::new(
  599|      0|                        io::ErrorKind::OutOfMemory,
  600|      0|                        format!("Reached the buffer maximal size of {MAX_BUFFER_SIZE}"),
  601|      0|                    ));
  602|  12.3k|                }
  603|  12.3k|                buffer.resize(self.buffer_end + 1024, b'\0');
  604|  6.33k|            }
  605|  18.6k|            let read = read.read(&mut buffer[self.buffer_end..])?;
  606|  18.6k|            if read == 0 {
  607|  9.22k|                break self.buffer_end;
  608|  9.43k|            }
  609|  9.43k|            self.buffer_end += read;
  610|       |        };
  611|   227k|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  612|       |            io::Error::new(
  613|       |                io::ErrorKind::InvalidData,
  614|       |                format!("Invalid UTF-8 in the TSV file: {e}"),
  615|       |            )
  616|   227k|        });
  617|   227k|        self.line_count += 1;
  618|   227k|        self.last_line_start = self.last_line_end;
  619|   227k|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  620|   227k|        self.buffer_start = line_end;
  621|   227k|        result
  622|   227k|    }
_RINvNtCs3rDsZdjxS1r_10sparesults3csv14write_tsv_termNtNtCs6sLY0PWj8mX_5oxrdf10named_node12NamedNodeRefECs2m53sVVLdi5_13oxigraph_fuzz:
  299|  29.4k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  29.4k|    match term.into() {
  301|  29.4k|        TermRef::NamedNode(node) => {
  302|  29.4k|            output.push('<');
  303|  29.4k|            output.push_str(node.as_str());
  304|  29.4k|            output.push('>');
  305|  29.4k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|  29.4k|}
_RINvNtCs3rDsZdjxS1r_10sparesults3csv14write_tsv_termNtNtCs6sLY0PWj8mX_5oxrdf6triple7TermRefECs2m53sVVLdi5_13oxigraph_fuzz:
  299|  73.7k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  73.7k|    match term.into() {
  301|  7.93k|        TermRef::NamedNode(node) => {
  302|  7.93k|            output.push('<');
  303|  7.93k|            output.push_str(node.as_str());
  304|  7.93k|            output.push('>');
  305|  7.93k|        }
  306|  12.7k|        TermRef::BlankNode(node) => {
  307|  12.7k|            output.push_str("_:");
  308|  12.7k|            output.push_str(node.as_str());
  309|  12.7k|        }
  310|  49.0k|        TermRef::Literal(literal) => {
  311|  49.0k|            let value = literal.value();
  312|  49.0k|            if let Some(language) = literal.language() {
  313|  4.38k|                write_tsv_quoted_str(output, value);
  314|  4.38k|                output.push('@');
  315|  4.38k|                output.push_str(language);
  316|  4.38k|            } else {
  317|  44.6k|                match literal.datatype() {
  318|  44.6k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|  43.3k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|  33.9k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|  28.6k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|  25.8k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|  24.1k|                    datatype => {
  324|  24.1k|                        write_tsv_quoted_str(output, value);
  325|  24.1k|                        output.push_str("^^");
  326|  24.1k|                        write_tsv_term(output, datatype);
  327|  24.1k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  4.10k|        TermRef::Triple(triple) => {
  333|  4.10k|            output.push_str("<< ");
  334|  4.10k|            write_tsv_term(output, &triple.subject);
  335|  4.10k|            output.push(' ');
  336|  4.10k|            write_tsv_term(output, &triple.predicate);
  337|  4.10k|            output.push(' ');
  338|  4.10k|            write_tsv_term(output, &triple.object);
  339|  4.10k|            output.push_str(" >>");
  340|  4.10k|        }
  341|       |    }
  342|  73.7k|}
_RINvNtCs3rDsZdjxS1r_10sparesults3csv14write_tsv_termRNtNtCs6sLY0PWj8mX_5oxrdf10named_node9NamedNodeECs2m53sVVLdi5_13oxigraph_fuzz:
  299|  7.91k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  7.91k|    match term.into() {
  301|  7.91k|        TermRef::NamedNode(node) => {
  302|  7.91k|            output.push('<');
  303|  7.91k|            output.push_str(node.as_str());
  304|  7.91k|            output.push('>');
  305|  7.91k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|  7.91k|}
_RINvNtCs3rDsZdjxS1r_10sparesults3csv14write_tsv_termRNtNtCs6sLY0PWj8mX_5oxrdf6triple4TermECs2m53sVVLdi5_13oxigraph_fuzz:
  299|  7.91k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  7.91k|    match term.into() {
  301|    306|        TermRef::NamedNode(node) => {
  302|    306|            output.push('<');
  303|    306|            output.push_str(node.as_str());
  304|    306|            output.push('>');
  305|    306|        }
  306|    987|        TermRef::BlankNode(node) => {
  307|    987|            output.push_str("_:");
  308|    987|            output.push_str(node.as_str());
  309|    987|        }
  310|  6.16k|        TermRef::Literal(literal) => {
  311|  6.16k|            let value = literal.value();
  312|  6.16k|            if let Some(language) = literal.language() {
  313|    460|                write_tsv_quoted_str(output, value);
  314|    460|                output.push('@');
  315|    460|                output.push_str(language);
  316|    460|            } else {
  317|  5.70k|                match literal.datatype() {
  318|  5.70k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|  5.55k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|  5.55k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|  5.55k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|  5.55k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|  5.31k|                    datatype => {
  324|  5.31k|                        write_tsv_quoted_str(output, value);
  325|  5.31k|                        output.push_str("^^");
  326|  5.31k|                        write_tsv_term(output, datatype);
  327|  5.31k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|    463|        TermRef::Triple(triple) => {
  333|    463|            output.push_str("<< ");
  334|    463|            write_tsv_term(output, &triple.subject);
  335|    463|            output.push(' ');
  336|    463|            write_tsv_term(output, &triple.predicate);
  337|    463|            output.push(' ');
  338|    463|            write_tsv_term(output, &triple.object);
  339|    463|            output.push_str(" >>");
  340|    463|        }
  341|       |    }
  342|  7.91k|}
_RINvNtCs3rDsZdjxS1r_10sparesults3csv14write_tsv_termRNtNtCs6sLY0PWj8mX_5oxrdf6triple7SubjectECs2m53sVVLdi5_13oxigraph_fuzz:
  299|  7.91k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  7.91k|    match term.into() {
  301|  3.13k|        TermRef::NamedNode(node) => {
  302|  3.13k|            output.push('<');
  303|  3.13k|            output.push_str(node.as_str());
  304|  3.13k|            output.push('>');
  305|  3.13k|        }
  306|  1.44k|        TermRef::BlankNode(node) => {
  307|  1.44k|            output.push_str("_:");
  308|  1.44k|            output.push_str(node.as_str());
  309|  1.44k|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  3.34k|        TermRef::Triple(triple) => {
  333|  3.34k|            output.push_str("<< ");
  334|  3.34k|            write_tsv_term(output, &triple.subject);
  335|  3.34k|            output.push(' ');
  336|  3.34k|            write_tsv_term(output, &triple.predicate);
  337|  3.34k|            output.push(' ');
  338|  3.34k|            write_tsv_term(output, &triple.object);
  339|  3.34k|            output.push_str(" >>");
  340|  3.34k|        }
  341|       |    }
  342|  7.91k|}
_RINvNtCs3rDsZdjxS1r_10sparesults3csv24write_boolean_csv_resultQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs2m53sVVLdi5_13oxigraph_fuzz:
   16|      2|pub fn write_boolean_csv_result<W: Write>(mut write: W, value: bool) -> io::Result<W> {
   17|      2|    write.write_all(if value { b"true" } else { b"false" })?;
   18|      2|    Ok(write)
   19|      2|}
_RNCINvMs1_NtCs3rDsZdjxS1r_10sparesults3csvNtB8_23InnerTsvSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2w_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableRNtNtB43_6triple4TermRNtB24_13QuerySolutionE0EE0Cs2m53sVVLdi5_13oxigraph_fuzz:
  280|  74.9k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNCINvMs4_NtCs3rDsZdjxS1r_10sparesults3csvNtB8_10LineReader9next_lineRShE0Cs2m53sVVLdi5_13oxigraph_fuzz:
  611|     17|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  612|     17|            io::Error::new(
  613|     17|                io::ErrorKind::InvalidData,
  614|     17|                format!("Invalid UTF-8 in the TSV file: {e}"),
  615|     17|            )
  616|     17|        });
_RNCNCNCNvMs3_NtCs3rDsZdjxS1r_10sparesults3csvINtBb_18TsvSolutionsReaderRShE9read_next000Cs2m53sVVLdi5_13oxigraph_fuzz:
  509|  1.31k|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs3_NtCs3rDsZdjxS1r_10sparesults3csvINtBb_18TsvSolutionsReaderRShE9read_next00s_0Cs2m53sVVLdi5_13oxigraph_fuzz:
  512|  1.31k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNCNvMs3_NtCs3rDsZdjxS1r_10sparesults3csvINtB9_18TsvSolutionsReaderRShE9read_next00Cs2m53sVVLdi5_13oxigraph_fuzz:
  505|  1.42k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  506|  1.42k|                        let start_position_char = line
  507|  1.42k|                            .split('\t')
  508|  1.42k|                            .take(i)
  509|  1.42k|                            .map(|c| c.chars().count() + 1)
  510|  1.42k|                            .sum::<usize>();
  511|  1.42k|                        let start_position_bytes =
  512|  1.42k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  513|  1.42k|                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  514|  1.42k|                            error: e,
  515|  1.42k|                            term: v.into(),
  516|  1.42k|                            location: TextPosition {
  517|  1.42k|                                line: self.reader.line_count - 1,
  518|  1.42k|                                column: start_position_char.try_into().unwrap(),
  519|  1.42k|                                offset: self.reader.last_line_start
  520|  1.42k|                                    + u64::try_from(start_position_bytes).unwrap(),
  521|  1.42k|                            }..TextPosition {
  522|  1.42k|                                line: self.reader.line_count - 1,
  523|  1.42k|                                column: (start_position_char + v.chars().count())
  524|  1.42k|                                    .try_into()
  525|  1.42k|                                    .unwrap(),
  526|  1.42k|                                offset: self.reader.last_line_start
  527|  1.42k|                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  528|  1.42k|                            },
  529|  1.42k|                        })
  530|  1.42k|                    })?))
_RNCNvMs2_NtCs3rDsZdjxS1r_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4read0Cs2m53sVVLdi5_13oxigraph_fuzz:
  444|  19.5k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvMs2_NtCs3rDsZdjxS1r_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4reads_0Cs2m53sVVLdi5_13oxigraph_fuzz:
  458|     96|                let variable = Variable::from_str(v).map_err(|e| {
  459|     96|                    QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  460|     96|                })?;
_RNCNvMs3_NtCs3rDsZdjxS1r_10sparesults3csvINtB7_18TsvSolutionsReaderRShE9read_next0Cs2m53sVVLdi5_13oxigraph_fuzz:
  500|   220k|            .map(|(i, v)| {
  501|   220k|                let v = v.trim();
  502|   220k|                if v.is_empty() {
  503|  68.0k|                    Ok(None)
  504|       |                } else {
  505|   152k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  506|       |                        let start_position_char = line
  507|       |                            .split('\t')
  508|       |                            .take(i)
  509|       |                            .map(|c| c.chars().count() + 1)
  510|       |                            .sum::<usize>();
  511|       |                        let start_position_bytes =
  512|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  513|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  514|       |                            error: e,
  515|       |                            term: v.into(),
  516|       |                            location: TextPosition {
  517|       |                                line: self.reader.line_count - 1,
  518|       |                                column: start_position_char.try_into().unwrap(),
  519|       |                                offset: self.reader.last_line_start
  520|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  521|       |                            }..TextPosition {
  522|       |                                line: self.reader.line_count - 1,
  523|       |                                column: (start_position_char + v.chars().count())
  524|       |                                    .try_into()
  525|       |                                    .unwrap(),
  526|       |                                offset: self.reader.last_line_start
  527|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  528|       |                            },
  529|       |                        })
  530|   152k|                    })?))
  531|       |                }
  532|   220k|            })
_RNvMs0_NtCs3rDsZdjxS1r_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5startCs2m53sVVLdi5_13oxigraph_fuzz:
  190|  2.62k|    pub fn start(mut write: W, variables: Vec<Variable>) -> io::Result<Self> {
  191|  2.62k|        let mut buffer = String::new();
  192|  2.62k|        let inner = InnerTsvSolutionsWriter::start(&mut buffer, variables);
  193|  2.62k|        write.write_all(buffer.as_bytes())?;
  194|  2.62k|        buffer.clear();
  195|  2.62k|        Ok(Self {
  196|  2.62k|            inner,
  197|  2.62k|            write,
  198|  2.62k|            buffer,
  199|  2.62k|        })
  200|  2.62k|    }
_RNvMs0_NtCs3rDsZdjxS1r_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs2m53sVVLdi5_13oxigraph_fuzz:
  212|  2.62k|    pub fn finish(self) -> W {
  213|  2.62k|        self.write
  214|  2.62k|    }
_RNvMs2_NtCs3rDsZdjxS1r_10sparesults3csvINtB5_21TsvQueryResultsReaderRShE4readCs2m53sVVLdi5_13oxigraph_fuzz:
  437|  6.97k|    pub fn read(mut read: R) -> Result<Self, QueryResultsParseError> {
  438|  6.97k|        let mut reader = LineReader::new();
  439|  6.97k|        let mut buffer = Vec::new();
  440|       |
  441|       |        // We read the header
  442|  6.97k|        let line = reader
  443|  6.97k|            .next_line(&mut buffer, &mut read)?
  444|  6.96k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  445|  6.96k|        if line.eq_ignore_ascii_case("true") {
  446|      2|            return Ok(Self::Boolean(true));
  447|  6.96k|        }
  448|  6.96k|        if line.eq_ignore_ascii_case("false") {
  449|      2|            return Ok(Self::Boolean(false));
  450|  6.96k|        }
  451|  6.96k|        let mut variables = Vec::new();
  452|  6.96k|        if !line.is_empty() {
  453|  5.96k|            for v in line.split('\t') {
  454|  5.96k|                let v = v.trim();
  455|  5.96k|                if v.is_empty() {
  456|     53|                    return Err(QueryResultsSyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar").into());
  457|  5.91k|                }
  458|  5.91k|                let variable = Variable::from_str(v).map_err(|e| {
  459|       |                    QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  460|  5.91k|                })?;
  461|  5.81k|                if variables.contains(&variable) {
  462|      8|                    return Err(QueryResultsSyntaxError::msg(format!(
  463|      8|                        "The variable {variable} is declared twice"
  464|      8|                    ))
  465|      8|                    .into());
  466|  5.80k|                }
  467|  5.80k|                variables.push(variable);
  468|       |            }
  469|  1.39k|        }
  470|  6.80k|        let column_len = variables.len();
  471|  6.80k|        Ok(Self::Solutions {
  472|  6.80k|            variables,
  473|  6.80k|            solutions: TsvSolutionsReader {
  474|  6.80k|                read,
  475|  6.80k|                buffer,
  476|  6.80k|                reader,
  477|  6.80k|                column_len,
  478|  6.80k|            },
  479|  6.80k|        })
  480|  6.97k|    }
_RNvMs3_NtCs3rDsZdjxS1r_10sparesults3csvINtB5_18TsvSolutionsReaderRShE9read_nextCs2m53sVVLdi5_13oxigraph_fuzz:
  492|   220k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsParseError> {
  493|   220k|        let line = self.reader.next_line(&mut self.buffer, &mut self.read)?;
  494|   220k|        if line.is_empty() {
  495|  5.24k|            return Ok(None); // EOF
  496|   215k|        }
  497|   215k|        let elements = line
  498|   215k|            .split('\t')
  499|   215k|            .enumerate()
  500|   215k|            .map(|(i, v)| {
  501|       |                let v = v.trim();
  502|       |                if v.is_empty() {
  503|       |                    Ok(None)
  504|       |                } else {
  505|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  506|       |                        let start_position_char = line
  507|       |                            .split('\t')
  508|       |                            .take(i)
  509|       |                            .map(|c| c.chars().count() + 1)
  510|       |                            .sum::<usize>();
  511|       |                        let start_position_bytes =
  512|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  513|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  514|       |                            error: e,
  515|       |                            term: v.into(),
  516|       |                            location: TextPosition {
  517|       |                                line: self.reader.line_count - 1,
  518|       |                                column: start_position_char.try_into().unwrap(),
  519|       |                                offset: self.reader.last_line_start
  520|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  521|       |                            }..TextPosition {
  522|       |                                line: self.reader.line_count - 1,
  523|       |                                column: (start_position_char + v.chars().count())
  524|       |                                    .try_into()
  525|       |                                    .unwrap(),
  526|       |                                offset: self.reader.last_line_start
  527|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  528|       |                            },
  529|       |                        })
  530|       |                    })?))
  531|       |                }
  532|   215k|            })
  533|   215k|            .collect::<Result<Vec<_>, QueryResultsParseError>>()?;
  534|   213k|        if elements.len() == self.column_len {
  535|   212k|            Ok(Some(elements))
  536|  1.07k|        } else if self.column_len == 0 && elements == [None] {
  537|    953|            Ok(Some(Vec::new())) // Zero columns case
  538|       |        } else {
  539|    121|            Err(QueryResultsSyntaxError::located_message(
  540|    121|                format!(
  541|    121|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  542|    121|                    self.column_len,
  543|    121|                    self.reader.line_count - 1,
  544|    121|                    elements.len(),
  545|    121|                    line
  546|    121|                ),
  547|    121|                TextPosition {
  548|    121|                    line: self.reader.line_count - 1,
  549|    121|                    column: 0,
  550|    121|                    offset: self.reader.last_line_start,
  551|    121|                }..TextPosition {
  552|    121|                    line: self.reader.line_count - 1,
  553|    121|                    column: line.chars().count().try_into().unwrap(),
  554|    121|                    offset: self.reader.last_line_end,
  555|    121|                },
  556|    121|            )
  557|    121|            .into())
  558|       |        }
  559|   220k|    }
_RNvMs1_NtCs3rDsZdjxS1r_10sparesults3csvNtB5_23InnerTsvSolutionsWriter5start:
  258|  2.62k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  259|  2.62k|        let mut start_vars = true;
  260|  5.25k|        for variable in &variables {
  261|  2.62k|            if start_vars {
  262|  2.53k|                start_vars = false;
  263|  2.53k|            } else {
  264|     96|                output.push('\t');
  265|     96|            }
  266|  2.62k|            output.push('?');
  267|  2.62k|            output.push_str(variable.as_str());
  268|       |        }
  269|  2.62k|        output.push('\n');
  270|  2.62k|        Self { variables }
  271|  2.62k|    }
_RNvNtCs3rDsZdjxS1r_10sparesults3csv20write_tsv_quoted_str:
  344|  36.2k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  345|  36.2k|    output.push('"');
  346|   518k|    for c in string.chars() {
  347|   518k|        match c {
  348|  1.38k|            '\t' => output.push_str("\\t"),
  349|    617|            '\n' => output.push_str("\\n"),
  350|  1.67k|            '\r' => output.push_str("\\r"),
  351|    630|            '"' => output.push_str("\\\""),
  352|  3.79k|            '\\' => output.push_str("\\\\"),
  353|   510k|            _ => output.push(c),
  354|       |        };
  355|       |    }
  356|  36.2k|    output.push('"');
  357|  36.2k|}
_RNvNtCs3rDsZdjxS1r_10sparesults3csv17is_turtle_boolean:
  359|  1.57k|fn is_turtle_boolean(value: &str) -> bool {
  360|  1.57k|    matches!(value, "true" | "false")
  361|  1.57k|}
_RNvNtCs3rDsZdjxS1r_10sparesults3csv17is_turtle_integer:
  363|  14.5k|fn is_turtle_integer(value: &str) -> bool {
  364|  14.5k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  365|  14.5k|    let mut value = value.as_bytes();
  366|  14.5k|    if let Some(v) = value.strip_prefix(b"+") {
  367|     78|        value = v;
  368|  14.5k|    } else if let Some(v) = value.strip_prefix(b"-") {
  369|    216|        value = v;
  370|  14.2k|    }
  371|  14.5k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  372|  14.5k|}
_RNvNtCs3rDsZdjxS1r_10sparesults3csv17is_turtle_decimal:
  374|  5.63k|fn is_turtle_decimal(value: &str) -> bool {
  375|  5.63k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  376|  5.63k|    let mut value = value.as_bytes();
  377|  5.63k|    if let Some(v) = value.strip_prefix(b"+") {
  378|    576|        value = v;
  379|  5.05k|    } else if let Some(v) = value.strip_prefix(b"-") {
  380|    506|        value = v;
  381|  4.55k|    }
  382|  17.8k|    while value.first().map_or(false, u8::is_ascii_digit) {
  383|  12.2k|        value = &value[1..];
  384|  12.2k|    }
  385|  5.63k|    let Some(value) = value.strip_prefix(b".") else {
  386|    134|        return false;
  387|       |    };
  388|  5.50k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  389|  5.63k|}
_RNvNtCs3rDsZdjxS1r_10sparesults3csv16is_turtle_double:
  391|  23.7k|fn is_turtle_double(value: &str) -> bool {
  392|  23.7k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  393|  23.7k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  394|  23.7k|    let mut value = value.as_bytes();
  395|  23.7k|    if let Some(v) = value.strip_prefix(b"+") {
  396|    144|        value = v;
  397|  23.5k|    } else if let Some(v) = value.strip_prefix(b"-") {
  398|  6.06k|        value = v;
  399|  17.5k|    }
  400|  23.7k|    let mut with_before = false;
  401|  31.3k|    while value.first().map_or(false, u8::is_ascii_digit) {
  402|  7.65k|        value = &value[1..];
  403|  7.65k|        with_before = true;
  404|  7.65k|    }
  405|  23.7k|    let mut with_after = false;
  406|  23.7k|    if let Some(v) = value.strip_prefix(b".") {
  407|  4.55k|        value = v;
  408|  10.3k|        while value.first().map_or(false, u8::is_ascii_digit) {
  409|  5.80k|            value = &value[1..];
  410|  5.80k|            with_after = true;
  411|  5.80k|        }
  412|  19.1k|    }
  413|  23.7k|    if let Some(v) = value.strip_prefix(b"e") {
  414|  18.2k|        value = v;
  415|  18.2k|    } else if let Some(v) = value.strip_prefix(b"E") {
  416|  2.74k|        value = v;
  417|  2.74k|    } else {
  418|  2.79k|        return false;
  419|       |    }
  420|  20.9k|    if let Some(v) = value.strip_prefix(b"+") {
  421|    130|        value = v;
  422|  20.8k|    } else if let Some(v) = value.strip_prefix(b"-") {
  423|     16|        value = v;
  424|  20.8k|    }
  425|  20.9k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  426|  23.7k|}
_RNvMs4_NtCs3rDsZdjxS1r_10sparesults3csvNtB5_10LineReader3new:
  571|  6.97k|    fn new() -> Self {
  572|  6.97k|        Self {
  573|  6.97k|            buffer_start: 0,
  574|  6.97k|            buffer_end: 0,
  575|  6.97k|            line_count: 0,
  576|  6.97k|            last_line_start: 0,
  577|  6.97k|            last_line_end: 0,
  578|  6.97k|        }
  579|  6.97k|    }

_RINvMs1_NtCs3rDsZdjxS1r_10sparesults5errorNtB6_23QueryResultsSyntaxError15located_messageNtNtCs3OstG5Tqy1X_5alloc6string6StringECs2m53sVVLdi5_13oxigraph_fuzz:
   87|    121|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
   88|    121|        Self(SyntaxErrorKind::Msg {
   89|    121|            msg: msg.into(),
   90|    121|            location: Some(location),
   91|    121|        })
   92|    121|    }
_RINvMs1_NtCs3rDsZdjxS1r_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringECs2m53sVVLdi5_13oxigraph_fuzz:
   78|    104|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   79|    104|        Self(SyntaxErrorKind::Msg {
   80|    104|            msg: msg.into(),
   81|    104|            location: None,
   82|    104|        })
   83|    104|    }
_RINvMs1_NtCs3rDsZdjxS1r_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReECs2m53sVVLdi5_13oxigraph_fuzz:
   78|     53|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   79|     53|        Self(SyntaxErrorKind::Msg {
   80|     53|            msg: msg.into(),
   81|     53|            location: None,
   82|     53|        })
   83|     53|    }
_RNvXs7_NtCs3rDsZdjxS1r_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtCsylmVpu5aQu_3std2io5error5ErrorE4from:
    7|     17|#[derive(Debug, thiserror::Error)]
_RNvXs8_NtCs3rDsZdjxS1r_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtB5_23QueryResultsSyntaxErrorE4from:
    7|  1.70k|#[derive(Debug, thiserror::Error)]

_RNvMNtCs3rDsZdjxS1r_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs2m53sVVLdi5_13oxigraph_fuzz:
   44|  4.34k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|  4.34k|        Self { format }
   46|  4.34k|    }
_RINvMNtCs3rDsZdjxS1r_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECs2m53sVVLdi5_13oxigraph_fuzz:
   73|  6.97k|    pub fn parse_read<R: Read>(
   74|  6.97k|        &self,
   75|  6.97k|        reader: R,
   76|  6.97k|    ) -> Result<FromReadQueryResultsReader<R>, QueryResultsParseError> {
   77|  6.97k|        Ok(match self.format {
   78|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      0|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: SolutionsReaderKind::Json(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|  6.97k|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      4|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|  6.80k|                    solutions,
  103|  6.80k|                    variables,
  104|  6.80k|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|  6.80k|                    variables: variables.into(),
  106|  6.80k|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|  6.80k|                }),
  108|       |            },
  109|       |        })
  110|  6.97k|    }
_RNCNvXs1_NtCs3rDsZdjxS1r_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs2m53sVVLdi5_13oxigraph_fuzz:
  239|   213k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RNvXs1_NtCs3rDsZdjxS1r_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs2m53sVVLdi5_13oxigraph_fuzz:
  231|   220k|    fn next(&mut self) -> Option<Self::Item> {
  232|   220k|        Some(
  233|   220k|            match &mut self.solutions {
  234|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  235|      0|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  236|   220k|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  237|       |            }
  238|   220k|            .transpose()?
  239|   215k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  240|       |        )
  241|   220k|    }

_RINvMNtCs3rDsZdjxS1r_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs2m53sVVLdi5_13oxigraph_fuzz:
   71|      2|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      2|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      0|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      2|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      2|    }
_RINvMNtCs3rDsZdjxS1r_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs2m53sVVLdi5_13oxigraph_fuzz:
  142|  2.62k|    pub fn serialize_solutions_to_write<W: Write>(
  143|  2.62k|        &self,
  144|  2.62k|        write: W,
  145|  2.62k|        variables: Vec<Variable>,
  146|  2.62k|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  147|  2.62k|        Ok(ToWriteSolutionsWriter {
  148|  2.62k|            formatter: match self.format {
  149|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  150|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  151|       |                ),
  152|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  153|      0|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  154|       |                ),
  155|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  156|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  157|       |                ),
  158|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  159|  2.62k|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  160|       |                ),
  161|       |            },
  162|       |        })
  163|  2.62k|    }
_RINvMs0_NtCs3rDsZdjxS1r_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECs2m53sVVLdi5_13oxigraph_fuzz:
  297|   104k|    pub fn write<'a>(
  298|   104k|        &mut self,
  299|   104k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  300|   104k|    ) -> io::Result<()> {
  301|   104k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  302|   104k|        match &mut self.formatter {
  303|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  304|      0|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  305|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  306|   104k|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  307|       |        }
  308|   104k|    }
_RNCINvMs0_NtCs3rDsZdjxS1r_10sparesults10serializerINtB8_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableRNtNtB21_6triple4TermRNtNtBa_8solution13QuerySolutionE0Cs2m53sVVLdi5_13oxigraph_fuzz:
  301|  73.7k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RNvMs0_NtCs3rDsZdjxS1r_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs2m53sVVLdi5_13oxigraph_fuzz:
  311|  2.62k|    pub fn finish(self) -> io::Result<W> {
  312|  2.62k|        match self.formatter {
  313|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  314|      0|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  315|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  316|  2.62k|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  317|       |        }
  318|  2.62k|    }
_RNvMNtCs3rDsZdjxS1r_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs2m53sVVLdi5_13oxigraph_fuzz:
   55|  4.34k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  4.34k|        Self { format }
   57|  4.34k|    }

_RNvXs_NtCs3rDsZdjxS1r_10sparesults8solutionNtB4_13QuerySolutionINtNtCscdEvteftVc2_4core7convert4FromTINtNtCs3OstG5Tqy1X_5alloc4sync3ArcSNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCs2m53sVVLdi5_13oxigraph_fuzz:
  165|   213k|    fn from((v, s): (V, S)) -> Self {
  166|   213k|        Self {
  167|   213k|            variables: v.into(),
  168|   213k|            values: s.into(),
  169|   213k|        }
  170|   213k|    }
_RNvMNtCs3rDsZdjxS1r_10sparesults8solutionNtB2_13QuerySolution9variablesCs2m53sVVLdi5_13oxigraph_fuzz:
  158|  2.56k|    pub fn variables(&self) -> &[Variable] {
  159|  2.56k|        &self.variables
  160|  2.56k|    }
_RNvXs0_NtCs3rDsZdjxS1r_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterCs2m53sVVLdi5_13oxigraph_fuzz:
  178|   104k|    fn into_iter(self) -> Self::IntoIter {
  179|   104k|        Iter {
  180|   104k|            inner: self.variables.iter().zip(&self.values),
  181|   104k|        }
  182|   104k|    }
_RNvXs9_NtCs3rDsZdjxS1r_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs2m53sVVLdi5_13oxigraph_fuzz:
  285|   177k|    fn next(&mut self) -> Option<Self::Item> {
  286|   209k|        for (variable, value) in &mut self.inner {
  287|   105k|            if let Some(value) = value {
  288|  73.7k|                return Some((variable, value));
  289|  31.5k|            }
  290|       |        }
  291|   104k|        None
  292|   177k|    }
_RNvMNtCs3rDsZdjxS1r_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|   208k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|   208k|        self.into_iter()
  114|   208k|    }
_RNvXs0_NtCs3rDsZdjxS1r_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|   208k|    fn into_iter(self) -> Self::IntoIter {
  179|   208k|        Iter {
  180|   208k|            inner: self.variables.iter().zip(&self.values),
  181|   208k|        }
  182|   208k|    }
_RNvXs6_NtCs3rDsZdjxS1r_10sparesults8solutionNtB5_13QuerySolutionNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  236|   104k|    fn eq(&self, other: &Self) -> bool {
  237|   104k|        for (k, v) in self.iter() {
  238|  73.7k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|  73.7k|            }
  241|       |        }
  242|   104k|        for (k, v) in other.iter() {
  243|  73.7k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|  73.7k|            }
  246|       |        }
  247|   104k|        true
  248|   104k|    }
_RNvXs9_NtCs3rDsZdjxS1r_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB7_:
  285|   355k|    fn next(&mut self) -> Option<Self::Item> {
  286|   419k|        for (variable, value) in &mut self.inner {
  287|   210k|            if let Some(value) = value {
  288|   147k|                return Some((variable, value));
  289|  63.0k|            }
  290|       |        }
  291|   208k|        None
  292|   355k|    }
_RINvMNtCs3rDsZdjxS1r_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableEB5_:
   38|   147k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|   147k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|   147k|    }
_RNCNvXsc_NtCs3rDsZdjxS1r_10sparesults8solutionNtNtCs6sLY0PWj8mX_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|   149k|        solution.variables.iter().position(|v| *v == self)
_RNvXsc_NtCs3rDsZdjxS1r_10sparesults8solutionNtNtCs6sLY0PWj8mX_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|   147k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|   147k|        solution.variables.iter().position(|v| *v == self)
  325|   147k|    }
_RNvXsd_NtCs3rDsZdjxS1r_10sparesults8solutionRNtNtCs6sLY0PWj8mX_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|   147k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|   147k|        self.as_ref().index(solution)
  332|   147k|    }


_RINvXNtCs8X7BpugoVAi_6anyhow7contextINtNtCslpNE8qEaggm_4core6result6ResultINtNtCs3T8ZGKOaOq8_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error10ParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCscRF9HjKHVNj_5alloc6string6StringNCNvNtCseiOrYpwGuRQ_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB42_:
   58|  1.66k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.66k|    where
   60|  1.66k|        C: Display + Send + Sync + 'static,
   61|  1.66k|        F: FnOnce() -> C,
   62|  1.66k|    {
   63|  1.66k|        match self {
   64|  1.66k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.66k|    }
_RINvXNtCs8X7BpugoVAi_6anyhow7contextINtNtCslpNE8qEaggm_4core6result6ResultINtNtCscRF9HjKHVNj_5alloc3vec3VecNtNtCs3T8ZGKOaOq8_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCseiOrYpwGuRQ_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|  1.66k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.66k|    where
   60|  1.66k|        C: Display + Send + Sync + 'static,
   61|  1.66k|        F: FnOnce() -> C,
   62|  1.66k|    {
   63|  1.66k|        match self {
   64|  1.66k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.66k|    }

rust_fuzzer_test_input:
  209|  2.98k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  2.98k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  2.98k|                }
  223|  2.98k|
  224|  2.98k|                __libfuzzer_sys_run(bytes);
  225|  2.98k|                0
  226|       |            }
_RNvNvCsdT5TAxxrqAB_18sparql_results_tsv1__19___libfuzzer_sys_run:
  241|  2.98k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  2.98k|                $body
  243|  2.98k|            }
LLVMFuzzerTestOneInput:
   58|  2.98k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.98k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.98k|    });
   63|  2.98k|
   64|  2.98k|    match test_input {
   65|  2.98k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.98k|}
_RNCNvCs2RPZPoZck0h_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.98k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.98k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.98k|        rust_fuzzer_test_input(data_slice)
   62|  2.98k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECseiOrYpwGuRQ_13oxigraph_fuzz:
 1125|   113k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   113k|    haystack: &[u8],
 1127|   113k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   113k|) -> Option<usize> {
 1129|   113k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   113k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   113k|    // a &[u8].
 1132|   113k|    let start = haystack.as_ptr();
 1133|   113k|    let end = start.add(haystack.len());
 1134|   113k|    let found = find_raw(start, end)?;
 1135|   101k|    Some(found.distance(start))
 1136|   113k|}
_RNvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iE7needle1B8_:
  117|  28.8k|    pub(crate) fn needle1(&self) -> u8 {
  118|  28.8k|        self.s1
  119|  28.8k|    }
_RNvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iE3newB8_:
  111|   113k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   113k|        One { s1: needle, v1: V::splat(needle) }
  113|   113k|    }
_RNvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iE3newB8_:
  111|   113k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   113k|        One { s1: needle, v1: V::splat(needle) }
  113|   113k|    }
_RNvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  4.89k|    pub(crate) unsafe fn find_raw(
  144|  4.89k|        &self,
  145|  4.89k|        start: *const u8,
  146|  4.89k|        end: *const u8,
  147|  4.89k|    ) -> Option<*const u8> {
  148|  4.89k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  4.89k|        // need to move up to using a u64 for the masks used below. Currently
  150|  4.89k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  4.89k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  4.89k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  4.89k|        let topos = V::Mask::first_offset;
  155|  4.89k|        let len = end.distance(start);
  156|  4.89k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  4.89k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  3.76k|            return Some(cur);
  167|  1.12k|        }
  168|  1.12k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.12k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  1.12k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.12k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.12k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  1.40k|        while cur <= end.sub(V::BYTES) {
  213|    366|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    366|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     85|                return Some(cur);
  216|    281|            }
  217|    281|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.04k|        if cur < end {
  224|    933|            debug_assert!(end.distance(cur) < V::BYTES);
  225|    933|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|    933|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|    933|            return self.search_chunk(cur, topos);
  228|    110|        }
  229|    110|        None
  230|  4.89k|    }
_RNvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  93.7k|    pub(crate) unsafe fn find_raw(
  144|  93.7k|        &self,
  145|  93.7k|        start: *const u8,
  146|  93.7k|        end: *const u8,
  147|  93.7k|    ) -> Option<*const u8> {
  148|  93.7k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  93.7k|        // need to move up to using a u64 for the masks used below. Currently
  150|  93.7k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  93.7k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  93.7k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  93.7k|        let topos = V::Mask::first_offset;
  155|  93.7k|        let len = end.distance(start);
  156|  93.7k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  93.7k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  77.5k|            return Some(cur);
  167|  16.1k|        }
  168|  16.1k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  16.1k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  16.1k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  16.1k|        if len >= Self::LOOP_SIZE {
  172|  51.4k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  50.4k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  50.4k|                let a = V::load_aligned(cur);
  176|  50.4k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  50.4k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  50.4k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  50.4k|                let eqa = self.v1.cmpeq(a);
  180|  50.4k|                let eqb = self.v1.cmpeq(b);
  181|  50.4k|                let eqc = self.v1.cmpeq(c);
  182|  50.4k|                let eqd = self.v1.cmpeq(d);
  183|  50.4k|                let or1 = eqa.or(eqb);
  184|  50.4k|                let or2 = eqc.or(eqd);
  185|  50.4k|                let or3 = or1.or(or2);
  186|  50.4k|                if or3.movemask_will_have_non_zero() {
  187|  12.5k|                    let mask = eqa.movemask();
  188|  12.5k|                    if mask.has_non_zero() {
  189|  5.98k|                        return Some(cur.add(topos(mask)));
  190|  6.53k|                    }
  191|  6.53k|
  192|  6.53k|                    let mask = eqb.movemask();
  193|  6.53k|                    if mask.has_non_zero() {
  194|  5.74k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    785|                    }
  196|    785|
  197|    785|                    let mask = eqc.movemask();
  198|    785|                    if mask.has_non_zero() {
  199|    316|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    469|                    }
  201|    469|
  202|    469|                    let mask = eqd.movemask();
  203|    469|                    debug_assert!(mask.has_non_zero());
  204|    469|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  37.9k|                }
  206|  37.9k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.58k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  6.41k|        while cur <= end.sub(V::BYTES) {
  213|  4.37k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.37k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.56k|                return Some(cur);
  216|  2.80k|            }
  217|  2.80k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.03k|        if cur < end {
  224|  1.96k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.96k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.96k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.96k|            return self.search_chunk(cur, topos);
  228|     69|        }
  229|     69|        None
  230|  93.7k|    }
_RINvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  6.19k|    unsafe fn search_chunk(
  417|  6.19k|        &self,
  418|  6.19k|        cur: *const u8,
  419|  6.19k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.19k|    ) -> Option<*const u8> {
  421|  6.19k|        let chunk = V::load_unaligned(cur);
  422|  6.19k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.19k|        if mask.has_non_zero() {
  424|  4.19k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.00k|            None
  427|       |        }
  428|  6.19k|    }
_RINvMNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   100k|    unsafe fn search_chunk(
  417|   100k|        &self,
  418|   100k|        cur: *const u8,
  419|   100k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   100k|    ) -> Option<*const u8> {
  421|   100k|        let chunk = V::load_unaligned(cur);
  422|   100k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   100k|        if mask.has_non_zero() {
  424|  79.9k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  20.1k|            None
  427|       |        }
  428|   100k|    }
_RINvNtNtNtCs3Tw8Aub2YYn_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  6.53k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  6.53k|    start: *const u8,
 1150|  6.53k|    end: *const u8,
 1151|  6.53k|    confirm: F,
 1152|  6.53k|) -> Option<*const u8> {
 1153|  6.53k|    debug_assert!(start <= end);
 1154|  6.53k|    let mut ptr = start;
 1155|  30.8k|    while ptr < end {
 1156|  28.8k|        if confirm(*ptr) {
 1157|  4.50k|            return Some(ptr);
 1158|  24.3k|        }
 1159|  24.3k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  2.03k|    None
 1162|  6.53k|}

_RNvMNtNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   113k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   113k|        One {
   71|   113k|            sse2: generic::One::new(needle),
   72|   113k|            avx2: generic::One::new(needle),
   73|   113k|        }
   74|   113k|    }
_RNvMNtNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   113k|    pub unsafe fn find_raw(
  180|   113k|        &self,
  181|   113k|        start: *const u8,
  182|   113k|        end: *const u8,
  183|   113k|    ) -> Option<*const u8> {
  184|   113k|        if start >= end {
  185|  8.01k|            return None;
  186|   105k|        }
  187|   105k|        let len = end.distance(start);
  188|   105k|        if len < __m256i::BYTES {
  189|  11.4k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  6.53k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  6.53k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  4.89k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  93.7k|        }
  201|  93.7k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  93.7k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  93.7k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  93.7k|        // responsibility.
  205|  93.7k|        //
  206|  93.7k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  93.7k|        // means we'd have to annotate this routine with `target_feature`.
  208|  93.7k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  93.7k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  93.7k|        // The real problem is that a routine with a `target_feature`
  211|  93.7k|        // annotation generally can't be inlined into caller code unless
  212|  93.7k|        // the caller code has the same target feature annotations. Namely,
  213|  93.7k|        // the common case (at time of writing) is for calling code to not
  214|  93.7k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  93.7k|        // `target_feature` on this routine, it can be inlined which will
  216|  93.7k|        // handle some of the short-haystack cases above without touching the
  217|  93.7k|        // architecture specific code.
  218|  93.7k|        self.find_raw_avx2(start, end)
  219|   113k|    }
_RNCNvMNtNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  28.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  28.8k|                    b == self.sse2.needle1()
  194|  28.8k|                })
_RNvMNtNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  4.89k|    unsafe fn find_raw_sse2(
  337|  4.89k|        &self,
  338|  4.89k|        start: *const u8,
  339|  4.89k|        end: *const u8,
  340|  4.89k|    ) -> Option<*const u8> {
  341|  4.89k|        self.sse2.find_raw(start, end)
  342|  4.89k|    }
_RNvMNtNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  93.7k|    unsafe fn find_raw_avx2(
  397|  93.7k|        &self,
  398|  93.7k|        start: *const u8,
  399|  93.7k|        end: *const u8,
  400|  93.7k|    ) -> Option<*const u8> {
  401|  93.7k|        self.avx2.find_raw(start, end)
  402|  93.7k|    }

_RNvNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_646memchr10memchr_raw:
  174|   113k|pub(crate) fn memchr_raw(
  175|   113k|    n1: u8,
  176|   113k|    start: *const u8,
  177|   113k|    end: *const u8,
  178|   113k|) -> Option<*const u8> {
  179|   113k|    // SAFETY: We provide a valid function pointer type.
  180|   113k|    unsafe_ifunc!(
  181|   113k|        One,
  182|   113k|        find_raw,
  183|   113k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   113k|        Option<*const u8>,
  185|   113k|        start,
  186|   113k|        end,
  187|   113k|        n1
  188|   113k|    )
  189|   113k|}
_RNvNvNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   113k|        unsafe fn find_avx2(
   79|   113k|            $($needle: u8),+,
   80|   113k|            $hay_start: *const u8,
   81|   113k|            $hay_end: *const u8,
   82|   113k|        ) -> $retty {
   83|   113k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   113k|            $memchrty::new_unchecked($($needle),+)
   85|   113k|                .$memchrfind($hay_start, $hay_end)
   86|   113k|        }
_RNvNvNtNtNtCs3Tw8Aub2YYn_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCs3Tw8Aub2YYn_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|   307k|    unsafe fn distance(self, origin: *const T) -> usize {
   22|   307k|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|   307k|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|   307k|    }
_RNvXNtCs3Tw8Aub2YYn_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  17.2k|    fn as_usize(self) -> usize {
   27|  17.2k|        self as usize
   28|  17.2k|    }

_RNvNtCs3Tw8Aub2YYn_6memchr6memchr6memchrCseiOrYpwGuRQ_13oxigraph_fuzz:
   27|   113k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   113k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   113k|    // pointer between start and end.
   30|   113k|    unsafe {
   31|   113k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   113k|        })
   34|   113k|    }
   35|   113k|}
_RNCNvNtCs3Tw8Aub2YYn_6memchr6memchr6memchr0B5_:
   31|   113k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   113k|            memchr_raw(needle, start, end)
   33|   113k|        })
_RNvNtCs3Tw8Aub2YYn_6memchr6memchr10memchr_rawB3_:
  504|   113k|unsafe fn memchr_raw(
  505|   113k|    needle: u8,
  506|   113k|    start: *const u8,
  507|   113k|    end: *const u8,
  508|   113k|) -> Option<*const u8> {
  509|   113k|    #[cfg(target_arch = "x86_64")]
  510|   113k|    {
  511|   113k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   113k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   113k|        // time. This function also handles using a fallback if neither AVX2
  514|   113k|        // nor SSE2 (unusual) are available.
  515|   113k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   113k|    }
  517|   113k|    #[cfg(target_arch = "wasm32")]
  518|   113k|    {
  519|   113k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   113k|    }
  521|   113k|    #[cfg(target_arch = "aarch64")]
  522|   113k|    {
  523|   113k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   113k|    }
  525|   113k|    #[cfg(not(any(
  526|   113k|        target_arch = "x86_64",
  527|   113k|        target_arch = "wasm32",
  528|   113k|        target_arch = "aarch64"
  529|   113k|    )))]
  530|   113k|    {
  531|   113k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   113k|    }
  533|   113k|}

_RNvYNtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtNtCs3Tw8Aub2YYn_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  50.4k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  50.4k|        self.movemask().has_non_zero()
   67|  50.4k|    }
_RNvMNtCs3Tw8Aub2YYn_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  96.6k|    fn get_for_offset(self) -> u32 {
  129|  96.6k|        #[cfg(target_endian = "big")]
  130|  96.6k|        {
  131|  96.6k|            self.0.swap_bytes()
  132|  96.6k|        }
  133|  96.6k|        #[cfg(target_endian = "little")]
  134|  96.6k|        {
  135|  96.6k|            self.0
  136|  96.6k|        }
  137|  96.6k|    }
_RNvXs_NtCs3Tw8Aub2YYn_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   176k|    fn has_non_zero(self) -> bool {
  149|   176k|        self.0 != 0
  150|   176k|    }
_RNvXs_NtCs3Tw8Aub2YYn_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  96.6k|    fn first_offset(self) -> usize {
  174|  96.6k|        // We are dealing with little endian here (and if we aren't, we swap
  175|  96.6k|        // the bytes so we are in practice), where the most significant byte
  176|  96.6k|        // is at a higher address. That means the least significant bit that
  177|  96.6k|        // is set corresponds to the position of our first matching byte.
  178|  96.6k|        // That position corresponds to the number of zeros after the least
  179|  96.6k|        // significant bit.
  180|  96.6k|        self.get_for_offset().trailing_zeros() as usize
  181|  96.6k|    }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86sse2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  6.19k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  6.19k|            _mm_loadu_si128(data as *const __m128i)
  222|  6.19k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86sse2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  6.19k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  6.19k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  6.19k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86sse2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  6.19k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  6.19k|            _mm_cmpeq_epi8(self, vector2)
  232|  6.19k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86avx2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   170k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   170k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   170k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86avx2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   100k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   100k|            _mm256_loadu_si256(data as *const __m256i)
  272|   100k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86avx2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   301k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   301k|            _mm256_cmpeq_epi8(self, vector2)
  282|   301k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86sse2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|   113k|        unsafe fn splat(byte: u8) -> __m128i {
  211|   113k|            _mm_set1_epi8(byte as i8)
  212|   113k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86avx2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|   113k|        unsafe fn splat(byte: u8) -> __m256i {
  261|   113k|            _mm256_set1_epi8(byte as i8)
  262|   113k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86avx2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   201k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   201k|            _mm256_load_si256(data as *const __m256i)
  267|   201k|        }
_RNvXNtNtCs3Tw8Aub2YYn_6memchr6vector7x86avx2NtNtNtCslpNE8qEaggm_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   151k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   151k|            _mm256_or_si256(self, vector2)
  292|   151k|        }

_RNvMs2_NtCsllaDfN1XZEc_9once_cell3impINtB5_8OnceCellNtNtCscRF9HjKHVNj_5alloc6string6StringE14is_initializedCs2RPZPoZck0h_13libfuzzer_sys:
   49|  2.98k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.98k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.98k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.98k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.98k|        // `SeqCst` operations on the slow path.
   54|  2.98k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.98k|    }

_RNvMs4_NtCsllaDfN1XZEc_9once_cell4syncINtB5_8OnceCellNtNtCscRF9HjKHVNj_5alloc6string6StringE3getCs2RPZPoZck0h_13libfuzzer_sys:
  963|  2.98k|        pub fn get(&self) -> Option<&T> {
  964|  2.98k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.98k|                None
  969|       |            }
  970|  2.98k|        }

_RINvCswMWxb664Ie_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsf6Xgyyebb1E_5oxrdf:
  621|  4.44k|fn parse_langtag(
  622|  4.44k|    input: &str,
  623|  4.44k|    output: &mut impl OutputBuffer,
  624|  4.44k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  4.44k|    #[derive(PartialEq, Eq)]
  626|  4.44k|    enum State {
  627|  4.44k|        Start,
  628|  4.44k|        AfterLanguage,
  629|  4.44k|        AfterExtLang,
  630|  4.44k|        AfterScript,
  631|  4.44k|        AfterRegion,
  632|  4.44k|        InExtension { expected: bool },
  633|  4.44k|        InPrivateUse { expected: bool },
  634|  4.44k|    }
  635|  4.44k|
  636|  4.44k|    let mut state = State::Start;
  637|  4.44k|    let mut language_end = 0;
  638|  4.44k|    let mut extlang_end = 0;
  639|  4.44k|    let mut script_end = 0;
  640|  4.44k|    let mut region_end = 0;
  641|  4.44k|    let mut variant_end = 0;
  642|  4.44k|    let mut extension_end = 0;
  643|  4.44k|    let mut extlangs_count = 0;
  644|  13.7k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  13.7k|        if subtag.is_empty() {
  646|     29|            return Err(LanguageTagParseError {
  647|     29|                kind: TagParseErrorKind::EmptySubtag,
  648|     29|            });
  649|  13.6k|        }
  650|  13.6k|        if subtag.len() > 8 {
  651|      2|            return Err(LanguageTagParseError {
  652|      2|                kind: TagParseErrorKind::SubtagTooLong,
  653|      2|            });
  654|  13.6k|        }
  655|  13.6k|        if state == State::Start {
  656|       |            // Primary language
  657|  4.42k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|      4|                return Err(LanguageTagParseError {
  659|      4|                    kind: TagParseErrorKind::InvalidLanguage,
  660|      4|                });
  661|  4.42k|            }
  662|  4.42k|            language_end = end;
  663|  4.42k|            output.extend(to_lowercase(subtag));
  664|  4.42k|            if subtag.len() < 4 {
  665|  3.20k|                // extlangs are only allowed for short language tags
  666|  3.20k|                state = State::AfterLanguage;
  667|  3.20k|            } else {
  668|  1.22k|                state = State::AfterExtLang;
  669|  1.22k|            }
  670|  9.26k|        } else if let State::InPrivateUse { .. } = state {
  671|    491|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    491|            }
  676|    491|            output.push('-');
  677|    491|            output.extend(to_lowercase(subtag));
  678|    491|            state = State::InPrivateUse { expected: false };
  679|  8.77k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    251|            if let State::InExtension { expected: true } = state {
  682|      1|                return Err(LanguageTagParseError {
  683|      1|                    kind: TagParseErrorKind::EmptyExtension,
  684|      1|                });
  685|    250|            }
  686|    250|            output.push('-');
  687|    250|            output.push('x');
  688|    250|            state = State::InPrivateUse { expected: true };
  689|  8.52k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  1.06k|            if let State::InExtension { expected: true } = state {
  692|      9|                return Err(LanguageTagParseError {
  693|      9|                    kind: TagParseErrorKind::EmptyExtension,
  694|      9|                });
  695|  1.05k|            }
  696|  1.05k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  1.05k|            output.push('-');
  698|  1.05k|            output.push(extension_tag);
  699|  1.05k|            state = State::InExtension { expected: true };
  700|  7.46k|        } else if let State::InExtension { .. } = state {
  701|  2.19k|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|  2.19k|            }
  706|  2.19k|            extension_end = end;
  707|  2.19k|            output.push('-');
  708|  2.19k|            output.extend(to_lowercase(subtag));
  709|  2.19k|            state = State::InExtension { expected: false };
  710|  5.26k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  1.63k|            extlangs_count += 1;
  712|  1.63k|            if extlangs_count > 3 {
  713|      1|                return Err(LanguageTagParseError {
  714|      1|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      1|                });
  716|  1.63k|            }
  717|  1.63k|            // valid extlangs
  718|  1.63k|            extlang_end = end;
  719|  1.63k|            output.push('-');
  720|  1.63k|            output.extend(to_lowercase(subtag));
  721|  3.62k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  2.19k|            && subtag.len() == 4
  723|    501|            && is_alphabetic(subtag)
  724|    501|        {
  725|    501|            // Script
  726|    501|            script_end = end;
  727|    501|            output.push('-');
  728|    501|            output.extend(to_uppercase_first(subtag));
  729|    501|            state = State::AfterScript;
  730|  3.12k|        } else if (state == State::AfterLanguage
  731|  2.02k|            || state == State::AfterExtLang
  732|  1.43k|            || state == State::AfterScript)
  733|  2.06k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    989|                || subtag.len() == 3 && is_numeric(subtag))
  735|  1.07k|        {
  736|  1.07k|            // Region
  737|  1.07k|            region_end = end;
  738|  1.07k|            output.push('-');
  739|  1.07k|            output.extend(to_uppercase(subtag));
  740|  1.07k|            state = State::AfterRegion;
  741|  2.04k|        } else if (state == State::AfterLanguage
  742|  1.44k|            || state == State::AfterExtLang
  743|  1.14k|            || state == State::AfterScript
  744|  1.05k|            || state == State::AfterRegion)
  745|  2.04k|            && is_alphanumeric(subtag)
  746|  2.04k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|     10|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  2.03k|        {
  749|  2.03k|            // Variant
  750|  2.03k|            variant_end = end;
  751|  2.03k|            output.push('-');
  752|  2.03k|            output.extend(to_lowercase(subtag));
  753|  2.03k|            state = State::AfterRegion;
  754|  2.03k|        } else {
  755|     10|            return Err(LanguageTagParseError {
  756|     10|                kind: TagParseErrorKind::InvalidSubtag,
  757|     10|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  4.39k|    if let State::InExtension { expected: true } = state {
  763|      5|        return Err(LanguageTagParseError {
  764|      5|            kind: TagParseErrorKind::EmptyExtension,
  765|      5|        });
  766|  4.38k|    }
  767|  4.38k|    if let State::InPrivateUse { expected: true } = state {
  768|      1|        return Err(LanguageTagParseError {
  769|      1|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|      1|        });
  771|  4.38k|    }
  772|  4.38k|
  773|  4.38k|    //We make sure we have not skipped anyone
  774|  4.38k|    if extlang_end < language_end {
  775|  3.50k|        extlang_end = language_end;
  776|  3.50k|    }
  777|  4.38k|    if script_end < extlang_end {
  778|  3.88k|        script_end = extlang_end;
  779|  3.88k|    }
  780|  4.38k|    if region_end < script_end {
  781|  3.31k|        region_end = script_end;
  782|  3.31k|    }
  783|  4.38k|    if variant_end < region_end {
  784|  3.38k|        variant_end = region_end;
  785|  3.38k|    }
  786|  4.38k|    if extension_end < variant_end {
  787|  3.99k|        extension_end = variant_end;
  788|  3.99k|    }
  789|       |
  790|  4.38k|    Ok(TagElementsPositions {
  791|  4.38k|        language_end,
  792|  4.38k|        extlang_end,
  793|  4.38k|        script_end,
  794|  4.38k|        region_end,
  795|  4.38k|        variant_end,
  796|  4.38k|        extension_end,
  797|  4.38k|    })
  798|  4.44k|}
_RINvCswMWxb664Ie_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsf6Xgyyebb1E_5oxrdf:
  576|  4.78k|fn parse_language_tag(
  577|  4.78k|    input: &str,
  578|  4.78k|    output: &mut impl OutputBuffer,
  579|  4.78k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  4.78k|    if let Some(tag) = GRANDFATHEREDS
  582|  4.78k|        .iter()
  583|  4.78k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  4.78k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    341|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    341|        } else if input.len() == 2 {
  601|      1|            Err(LanguageTagParseError {
  602|      1|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      1|            })
  604|       |        } else {
  605|    340|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    340|            Ok(TagElementsPositions {
  607|    340|                language_end: input.len(),
  608|    340|                extlang_end: input.len(),
  609|    340|                script_end: input.len(),
  610|    340|                region_end: input.len(),
  611|    340|                variant_end: input.len(),
  612|    340|                extension_end: input.len(),
  613|    340|            })
  614|       |        }
  615|       |    } else {
  616|  4.44k|        parse_langtag(input, output)
  617|       |    }
  618|  4.78k|}
_RINvXsr_CswMWxb664Ie_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslpNE8qEaggm_4core4iter6traits7collect6ExtendcE6extendINtNtNtBZ_8adapters3map3MapNtNtNtB11_3str4iter5CharsNCINvB6_18parse_language_tagBv_Es_0EECsf6Xgyyebb1E_5oxrdf:
  560|    340|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CswMWxb664Ie_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslpNE8qEaggm_4core4iter6traits7collect6ExtendcE6extendINtNtNtBZ_8adapters3map3MapNtNtNtB11_3str4iter5CharsNCNvB6_12to_lowercase0EECsf6Xgyyebb1E_5oxrdf:
  560|  10.7k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CswMWxb664Ie_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslpNE8qEaggm_4core4iter6traits7collect6ExtendcE6extendINtNtNtBZ_8adapters3map3MapNtNtNtB11_3str4iter5CharsNCNvB6_12to_uppercase0EECsf6Xgyyebb1E_5oxrdf:
  560|  1.07k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CswMWxb664Ie_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCslpNE8qEaggm_4core4iter6traits7collect6ExtendcE6extendINtNtNtBZ_8adapters5chain5ChainINtNtNtBZ_7sources4once4OncecEINtNtB1Z_3map3MapNtNtNtB11_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsf6Xgyyebb1E_5oxrdf:
  560|    501|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCswMWxb664Ie_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Csf6Xgyyebb1E_5oxrdf:
  583|   124k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCswMWxb664Ie_10oxilangtagINtB2_11LanguageTagNtNtCscRF9HjKHVNj_5alloc6string6StringE10into_innerCsf6Xgyyebb1E_5oxrdf:
   54|  4.72k|    pub fn into_inner(self) -> T {
   55|  4.72k|        self.tag
   56|  4.72k|    }
_RNvMCswMWxb664Ie_10oxilangtagINtB2_11LanguageTagNtNtCscRF9HjKHVNj_5alloc6string6StringE5parseCsf6Xgyyebb1E_5oxrdf:
   41|  4.78k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  4.78k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  4.72k|        Ok(Self { tag, positions })
   44|  4.78k|    }
_RNvCswMWxb664Ie_10oxilangtag10is_numericCsf6Xgyyebb1E_5oxrdf:
  865|      4|fn is_numeric(s: &str) -> bool {
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
  867|      4|}
_RNvCswMWxb664Ie_10oxilangtag12to_lowercaseCsf6Xgyyebb1E_5oxrdf:
  892|  10.7k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  10.7k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  10.7k|}
_RNvCswMWxb664Ie_10oxilangtag12to_uppercaseCsf6Xgyyebb1E_5oxrdf:
  880|  1.07k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|  1.07k|    s.chars().map(|c| c.to_ascii_uppercase())
  882|  1.07k|}
_RNvCswMWxb664Ie_10oxilangtag13is_alphabeticCsf6Xgyyebb1E_5oxrdf:
  860|  9.67k|fn is_alphabetic(s: &str) -> bool {
  861|  9.67k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  9.67k|}
_RNvCswMWxb664Ie_10oxilangtag15is_alphanumericCsf6Xgyyebb1E_5oxrdf:
  870|  5.79k|fn is_alphanumeric(s: &str) -> bool {
  871|  5.79k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  5.79k|}
_RNvCswMWxb664Ie_10oxilangtag18to_uppercase_firstCsf6Xgyyebb1E_5oxrdf:
  886|    501|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    501|    let mut chars = s.chars();
  888|    501|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    501|}
_RNvCswMWxb664Ie_10oxilangtag23is_alphanumeric_or_dashCsf6Xgyyebb1E_5oxrdf:
  875|    341|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    341|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    341|}
_RNvMsv_CswMWxb664Ie_10oxilangtagNtB5_14SubTagIterator3newCsf6Xgyyebb1E_5oxrdf:
  839|  4.44k|    fn new(input: &'a str) -> Self {
  840|  4.44k|        Self {
  841|  4.44k|            split: input.split('-'),
  842|  4.44k|            position: 0,
  843|  4.44k|        }
  844|  4.44k|    }
_RNvXsq_CswMWxb664Ie_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsf6Xgyyebb1E_5oxrdf:
  552|  10.5k|    fn push(&mut self, _: char) {}
_RNvXsw_CswMWxb664Ie_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCslpNE8qEaggm_4core4iter6traits8iterator8Iterator4nextCsf6Xgyyebb1E_5oxrdf:
  851|  18.1k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  18.1k|        let tag = self.split.next()?;
  853|  13.7k|        let tag_end = self.position + tag.len();
  854|  13.7k|        self.position = tag_end + 1;
  855|  13.7k|        Some((tag, tag_end))
  856|  18.1k|    }
_RNCNvCswMWxb664Ie_10oxilangtag13is_alphabetic0B3_:
  861|  25.3k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCswMWxb664Ie_10oxilangtag10is_numeric0B3_:
  866|      4|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCswMWxb664Ie_10oxilangtag15is_alphanumeric0B3_:
  871|  21.8k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCswMWxb664Ie_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  4.22k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_Cs2oFf7tH0Ogl_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsf6Xgyyebb1E_5oxrdf:
 1567|    114|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|    114|        Err(IriParseError { kind })
 1569|    114|    }
_RNCNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Csf6Xgyyebb1E_5oxrdf:
 1550|  1.29k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Csf6Xgyyebb1E_5oxrdf:
 1551|  1.28k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCs2oFf7tH0Ogl_5oxiriINtB2_6IriRefNtNtCscRF9HjKHVNj_5alloc6string6StringE10into_innerCsf6Xgyyebb1E_5oxrdf:
  191|  34.7k|    pub fn into_inner(self) -> T {
  192|  34.7k|        self.iri
  193|  34.7k|    }
_RNvMCs2oFf7tH0Ogl_5oxiriINtB2_6IriRefNtNtCscRF9HjKHVNj_5alloc6string6StringE11is_absoluteCsf6Xgyyebb1E_5oxrdf:
  205|  35.0k|    pub fn is_absolute(&self) -> bool {
  206|  35.0k|        self.positions.scheme_end != 0
  207|  35.0k|    }
_RNvMCs2oFf7tH0Ogl_5oxiriINtB2_6IriRefNtNtCscRF9HjKHVNj_5alloc6string6StringE5parseCsf6Xgyyebb1E_5oxrdf:
   58|  35.1k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  35.1k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  35.0k|        Ok(Self { iri, positions })
   61|  35.1k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsf6Xgyyebb1E_5oxrdf:
 1366|  18.1k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  18.1k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    813|            let start_position = self.input.position;
 1370|  4.06k|            while let Some(c) = self.input.next() {
 1371|  4.02k|                self.output.push(c);
 1372|  4.02k|                if c == ']' {
 1373|    773|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    773|                    if !UNCHECKED {
 1375|    773|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      3|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|    770|                        }
 1378|      0|                    }
 1379|       |
 1380|    770|                    let c = self.input.next();
 1381|    770|                    return match c {
 1382|       |                        Some(':') => {
 1383|     68|                            self.output.push(':');
 1384|     68|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|    696|                            self.output_positions.authority_end = self.output.len();
 1388|    696|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      6|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  3.24k|                }
 1393|       |            }
 1394|     40|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   170k|            loop {
 1398|   170k|                let c = self.input.next();
 1399|   170k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.15k|                        self.output.push(':');
 1402|  1.15k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  16.1k|                        self.output_positions.authority_end = self.output.len();
 1406|  16.1k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   152k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  18.1k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsf6Xgyyebb1E_5oxrdf:
 1457|  32.4k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   282k|        loop {
 1459|   282k|            let c = self.input.next();
 1460|   282k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  48.8k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  48.8k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  48.8k|                    } else if c == Some('/') {
 1470|  16.4k|                        self.output.push('/');
 1471|  32.4k|                    }
 1472|       |
 1473|  48.8k|                    if c == Some('?') {
 1474|    731|                        self.output_positions.path_end = self.output.len();
 1475|    731|                        self.output.push('?');
 1476|    731|                        return self.parse_query();
 1477|  48.0k|                    } else if c == Some('#') {
 1478|  15.3k|                        self.output_positions.path_end = self.output.len();
 1479|  15.3k|                        self.output_positions.query_end = self.output.len();
 1480|  15.3k|                        self.output.push('#');
 1481|  15.3k|                        return self.parse_fragment();
 1482|  32.7k|                    } else if c.is_none() {
 1483|  16.3k|                        self.output_positions.path_end = self.output.len();
 1484|  16.3k|                        self.output_positions.query_end = self.output.len();
 1485|  16.3k|                        return Ok(());
 1486|  16.4k|                    }
 1487|       |                }
 1488|   234k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  32.4k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsf6Xgyyebb1E_5oxrdf:
 1414|  1.22k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  1.87k|        loop {
 1416|  1.87k|            let c = self.input.next();
 1417|  1.12k|            match c {
 1418|  1.12k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.20k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.20k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|     16|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.22k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsf6Xgyyebb1E_5oxrdf:
 1547|  1.30k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.30k|        let c1 = self.input.next();
 1549|  1.30k|        let c2 = self.input.next();
 1550|  1.30k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  1.28k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.28k|            self.output.push('%');
 1554|  1.28k|            self.output.push(c1.unwrap());
 1555|  1.28k|            self.output.push(c2.unwrap());
 1556|  1.28k|            Ok(())
 1557|       |        } else {
 1558|     19|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|     19|                Some('%'),
 1560|     19|                c1,
 1561|     19|                c2,
 1562|     19|            ]))
 1563|       |        }
 1564|  1.30k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsf6Xgyyebb1E_5oxrdf:
 1493|  1.03k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  10.4k|        while let Some(c) = self.input.next() {
 1495|  9.49k|            if c == '#' {
 1496|    103|                self.output_positions.query_end = self.output.len();
 1497|    103|                self.output.push('#');
 1498|    103|                return self.parse_fragment();
 1499|       |            } else {
 1500|  9.38k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    925|        self.output_positions.query_end = self.output.len();
 1504|    925|        Ok(())
 1505|  1.03k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsf6Xgyyebb1E_5oxrdf:
 1220|  34.8k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   126k|        loop {
 1222|   126k|            let c = self.input.next();
 1223|   126k|            match c {
 1224|   126k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  92.0k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  34.7k|                    self.output.push(':');
 1229|  34.7k|                    self.output_positions.scheme_end = self.output.len();
 1230|  34.7k|                    self.input_scheme_end = self.input.position;
 1231|  34.7k|                    return if self.input.starts_with('/') {
 1232|  18.6k|                        self.input.next();
 1233|  18.6k|                        self.output.push('/');
 1234|  18.6k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  16.0k|                        self.output_positions.authority_end = self.output.len();
 1237|  16.0k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|     46|                    self.input = ParserInput {
 1242|     46|                        value: self.iri.chars(),
 1243|     46|                        position: 0,
 1244|     46|                    }; // reset
 1245|     46|                    self.output.clear();
 1246|     46|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  34.8k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsf6Xgyyebb1E_5oxrdf:
 1507|  15.8k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|   112k|        while let Some(c) = self.input.next() {
 1509|  96.7k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  15.8k|        Ok(())
 1512|  15.8k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsf6Xgyyebb1E_5oxrdf:
 1263|    441|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|    441|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|    441|            self.output_positions.scheme_end = 0;
 1312|    441|            self.input_scheme_end = 0;
 1313|    441|            if self.input.starts_with('/') {
 1314|    187|                self.input.next();
 1315|    187|                self.output.push('/');
 1316|    187|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|    254|                self.output_positions.authority_end = 0;
 1319|    254|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|    441|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsf6Xgyyebb1E_5oxrdf:
 1342|  18.1k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   173k|        loop {
 1345|   173k|            let c = self.input.next();
 1346|   173k|            match c {
 1347|       |                Some('@') => {
 1348|    432|                    self.output.push('@');
 1349|    432|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  17.7k|                    self.input = ParserInput {
 1353|  17.7k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  17.7k|                        position: self.input_scheme_end + 2,
 1355|  17.7k|                    };
 1356|  17.7k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  17.7k|                    return self.parse_host();
 1358|       |                }
 1359|   154k|                Some(c) => {
 1360|   154k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  18.1k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsf6Xgyyebb1E_5oxrdf:
 1428|  18.0k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  18.0k|        match c {
 1430|       |            None => {
 1431|  1.89k|                self.output_positions.path_end = self.output.len();
 1432|  1.89k|                self.output_positions.query_end = self.output.len();
 1433|  1.89k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    302|                self.output_positions.path_end = self.output.len();
 1437|    302|                self.output.push('?');
 1438|    302|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    480|                self.output_positions.path_end = self.output.len();
 1442|    480|                self.output_positions.query_end = self.output.len();
 1443|    480|                self.output.push('#');
 1444|    480|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  15.3k|                self.output.push('/');
 1448|  15.3k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  18.0k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsf6Xgyyebb1E_5oxrdf:
 1212|  35.1k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  35.1k|        match self.input.front() {
 1214|      2|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  35.1k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|    395|            _ => self.parse_relative(),
 1217|       |        }
 1218|  35.1k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsf6Xgyyebb1E_5oxrdf:
 1252|  18.8k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  18.8k|        if self.input.starts_with('/') {
 1254|  18.1k|            self.input.next();
 1255|  18.1k|            self.output.push('/');
 1256|  18.1k|            self.parse_authority()
 1257|       |        } else {
 1258|    714|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    714|            self.parse_path()
 1260|       |        }
 1261|  18.8k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsf6Xgyyebb1E_5oxrdf:
 1523|   638k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   638k|        if UNCHECKED || is_url_code_point(c) {
 1525|   637k|            self.output.push(c);
 1526|   637k|            Ok(())
 1527|  1.12k|        } else if c == '%' {
 1528|  1.09k|            self.read_echar()
 1529|       |        } else {
 1530|     24|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   638k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsf6Xgyyebb1E_5oxrdf:
 1535|  9.38k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  9.38k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  9.17k|            self.output.push(c);
 1538|  9.17k|            Ok(())
 1539|    209|        } else if c == '%' {
 1540|    205|            self.read_echar()
 1541|       |        } else {
 1542|      4|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  9.38k|    }
_RNvMs11_Cs2oFf7tH0Ogl_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsf6Xgyyebb1E_5oxrdf:
 1187|  35.1k|    fn parse(
 1188|  35.1k|        iri: &'a str,
 1189|  35.1k|        base: Option<IriRef<&'a str>>,
 1190|  35.1k|        output: &'a mut O,
 1191|  35.1k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  35.1k|        let mut parser = Self {
 1193|  35.1k|            iri,
 1194|  35.1k|            base,
 1195|  35.1k|            input: ParserInput {
 1196|  35.1k|                value: iri.chars(),
 1197|  35.1k|                position: 0,
 1198|  35.1k|            },
 1199|  35.1k|            output,
 1200|  35.1k|            output_positions: IriElementsPositions {
 1201|  35.1k|                scheme_end: 0,
 1202|  35.1k|                authority_end: 0,
 1203|  35.1k|                path_end: 0,
 1204|  35.1k|                query_end: 0,
 1205|  35.1k|            },
 1206|  35.1k|            input_scheme_end: 0,
 1207|  35.1k|        };
 1208|  35.1k|        parser.parse_scheme_start()?;
 1209|  35.0k|        Ok(parser.output_positions)
 1210|  35.1k|    }
_RNvMsp_Cs2oFf7tH0Ogl_5oxiriINtB5_3IriNtNtCscRF9HjKHVNj_5alloc6string6StringE10into_innerCsf6Xgyyebb1E_5oxrdf:
  678|  34.7k|    pub fn into_inner(self) -> T {
  679|  34.7k|        self.0.into_inner()
  680|  34.7k|    }
_RNvMsp_Cs2oFf7tH0Ogl_5oxiriINtB5_3IriNtNtCscRF9HjKHVNj_5alloc6string6StringE5parseCsf6Xgyyebb1E_5oxrdf:
  562|  35.1k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  35.1k|        IriRef::parse(iri)?.try_into()
  564|  35.1k|    }
_RNvXsV_Cs2oFf7tH0Ogl_5oxiriINtB5_3IriNtNtCscRF9HjKHVNj_5alloc6string6StringEINtNtCslpNE8qEaggm_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsf6Xgyyebb1E_5oxrdf:
  981|  35.0k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  35.0k|        if iri.is_absolute() {
  983|  34.7k|            Ok(Self(iri))
  984|       |        } else {
  985|    332|            Err(IriParseError {
  986|    332|                kind: IriParseErrorKind::NoScheme,
  987|    332|            })
  988|       |        }
  989|  35.0k|    }
_RNvCs2oFf7tH0Ogl_5oxiri17is_url_code_pointCsf6Xgyyebb1E_5oxrdf:
 1573|   648k|fn is_url_code_point(c: char) -> bool {
 1574|   648k|    matches!(c,
 1575|   383k|        'a'..='z'
 1576|  87.4k|        | 'A'..='Z'
 1577|   123k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  5.21k|        | '\u{A0}'..='\u{D7FF}'
 1598|  1.01k|        | '\u{F900}'..='\u{FDCF}'
 1599|  1.01k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  1.01k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  1.01k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  1.01k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  1.01k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  1.01k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  1.01k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  1.01k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  1.01k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  1.01k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  1.01k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  1.01k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  1.01k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|    106|        | '\u{D0000}'..='\u{DFFFD}'
 1613|     98|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   648k|}
_RNvCs2oFf7tH0Ogl_5oxiri23is_url_query_code_pointCsf6Xgyyebb1E_5oxrdf:
 1618|  9.38k|fn is_url_query_code_point(c: char) -> bool {
 1619|  9.38k|    is_url_code_point(c)
 1620|    279|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  9.38k|}
_RNvMs10_Cs2oFf7tH0Ogl_5oxiriNtB6_11ParserInput11starts_withCsf6Xgyyebb1E_5oxrdf:
 1169|  72.2k|    fn starts_with(&self, c: char) -> bool {
 1170|  72.2k|        self.value.as_str().starts_with(c)
 1171|  72.2k|    }
_RNvMs10_Cs2oFf7tH0Ogl_5oxiriNtB6_11ParserInput4nextCsf6Xgyyebb1E_5oxrdf:
 1154|   922k|    fn next(&mut self) -> Option<char> {
 1155|   922k|        if let Some(head) = self.value.next() {
 1156|   885k|            self.position += head.len_utf8();
 1157|   885k|            Some(head)
 1158|       |        } else {
 1159|  36.4k|            None
 1160|       |        }
 1161|   922k|    }
_RNvMs10_Cs2oFf7tH0Ogl_5oxiriNtB6_11ParserInput5frontCsf6Xgyyebb1E_5oxrdf:
 1164|  35.1k|    fn front(&self) -> Option<char> {
 1165|  35.1k|        self.value.clone().next()
 1166|  35.1k|    }
_RNvXsY_Cs2oFf7tH0Ogl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsf6Xgyyebb1E_5oxrdf:
 1105|   139k|    fn len(&self) -> usize {
 1106|   139k|        self.len
 1107|   139k|    }
_RNvXsY_Cs2oFf7tH0Ogl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsf6Xgyyebb1E_5oxrdf:
 1085|   869k|    fn push(&mut self, c: char) {
 1086|   869k|        self.len += c.len_utf8();
 1087|   869k|    }
_RNvXsY_Cs2oFf7tH0Ogl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsf6Xgyyebb1E_5oxrdf:
 1095|     46|    fn clear(&mut self) {
 1096|     46|        self.len = 0;
 1097|     46|    }
_RNvXsY_Cs2oFf7tH0Ogl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsf6Xgyyebb1E_5oxrdf:
 1110|  97.6k|    fn as_str(&self) -> &str {
 1111|  97.6k|        ""
 1112|  97.6k|    }
_RNvXsY_Cs2oFf7tH0Ogl_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsf6Xgyyebb1E_5oxrdf:
 1100|  17.7k|    fn truncate(&mut self, new_len: usize) {
 1101|  17.7k|        self.len = new_len;
 1102|  17.7k|    }

_RNvNtCseiOrYpwGuRQ_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  2.98k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  2.98k|    let parser = QueryResultsParser::from_format(format);
    8|  2.98k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  2.98k|    let Ok(reader) = parser.parse_read(data) else {
   11|    159|        return;
   12|       |    };
   13|  2.82k|    match reader {
   14|  2.82k|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|  2.82k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|  1.16k|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|  1.66k|            let mut writer = serializer
   21|  1.66k|                .serialize_solutions_to_write(
   22|  1.66k|                    Vec::new(),
   23|  1.66k|                    solutions
   24|  1.66k|                        .get(0)
   25|  1.66k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|  1.66k|                )
   27|  1.66k|                .unwrap();
   28|  49.4k|            for solution in &solutions {
   29|  47.7k|                writer.write(solution).unwrap();
   30|  47.7k|            }
   31|  1.66k|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|  1.66k|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|  1.66k|                .parse_read(serialized.as_bytes())
   36|  1.66k|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|  1.66k|                .unwrap()
   38|       |            {
   39|  1.66k|                assert_eq!(
   40|  1.66k|                    roundtrip_solutions
   41|  1.66k|                        .collect::<Result<Vec<_>, _>>()
   42|  1.66k|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|  1.66k|                        .unwrap(),
   44|  1.66k|                    solutions
   45|  1.66k|                )
   46|      0|            }
   47|       |        }
   48|      2|        FromReadQueryResultsReader::Boolean(value) => {
   49|      2|            // We try to write again
   50|      2|            let mut serialized = Vec::new();
   51|      2|            serializer
   52|      2|                .serialize_boolean_to_write(&mut serialized, value)
   53|      2|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      2|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      2|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  2.98k|}
_RNCNvNtCseiOrYpwGuRQ_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|  1.60k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCseiOrYpwGuRQ_13oxigraph_fuzz:
   88|  8.22k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|  8.22k|        BlankNodeRef(match &self.0 {
   90|  2.07k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  6.15k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  6.15k|                id: *id,
   93|  6.15k|                str: str.as_str(),
   94|  6.15k|            },
   95|       |        })
   96|  8.22k|    }
_RNvMs1_NtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCseiOrYpwGuRQ_13oxigraph_fuzz:
  176|  8.22k|    pub const fn as_str(self) -> &'a str {
  177|  8.22k|        match self.0 {
  178|  2.07k|            BlankNodeRefContent::Named(id) => id,
  179|  6.15k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  180|       |        }
  181|  8.22k|    }
_RNvMs7_NtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB5_5IdStr6as_strCseiOrYpwGuRQ_13oxigraph_fuzz:
  262|  6.15k|    fn as_str(&self) -> &str {
  263|  6.15k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|  6.15k|        str::from_utf8(&self.0[..len]).unwrap()
  265|  6.15k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|  17.0k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|  17.0k|        let id = id.into();
   38|  17.0k|        validate_blank_node_identifier(&id)?;
   39|  17.0k|        Ok(Self::new_unchecked(id))
   40|  17.0k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCscRF9HjKHVNj_5alloc6string6StringEB5_:
   49|  17.0k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  17.0k|        let id = id.into();
   51|  17.0k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  12.6k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  4.38k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  17.0k|    }
_RNCNvMs7_NtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|  80.4k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
_RNvMNtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|  12.6k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  12.6k|        Self(BlankNodeContent::Anonymous {
   64|  12.6k|            id,
   65|  12.6k|            str: IdStr::new(id),
   66|  12.6k|        })
   67|  12.6k|    }
_RNvMs7_NtCsf6Xgyyebb1E_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  255|  12.6k|    fn new(id: u128) -> Self {
  256|  12.6k|        let mut str = [0; 32];
  257|  12.6k|        write!(&mut str[..], "{id:x}").unwrap();
  258|  12.6k|        Self(str)
  259|  12.6k|    }
_RNvNtCsf6Xgyyebb1E_5oxrdf10blank_node30validate_blank_node_identifier:
  268|  17.0k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  269|  17.0k|    let mut chars = id.chars();
  270|  17.0k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  271|  17.0k|    match front {
  272|  17.0k|        '0'..='9'
  273|       |        | '_'
  274|       |        | ':'
  275|  2.36k|        | 'A'..='Z'
  276|  2.06k|        | 'a'..='z'
  277|    640|        | '\u{00C0}'..='\u{00D6}'
  278|    640|        | '\u{00D8}'..='\u{00F6}'
  279|    638|        | '\u{00F8}'..='\u{02FF}'
  280|    567|        | '\u{0370}'..='\u{037D}'
  281|    567|        | '\u{037F}'..='\u{1FFF}'
  282|    514|        | '\u{200C}'..='\u{200D}'
  283|    514|        | '\u{2070}'..='\u{218F}'
  284|    450|        | '\u{2C00}'..='\u{2FEF}'
  285|    450|        | '\u{3001}'..='\u{D7FF}'
  286|    332|        | '\u{F900}'..='\u{FDCF}'
  287|    332|        | '\u{FDF0}'..='\u{FFFD}'
  288|  17.0k|        | '\u{10000}'..='\u{EFFFF}' => (),
  289|      3|        _ => return Err(BlankNodeIdParseError),
  290|       |    }
  291|   174k|    for c in chars {
  292|   157k|        match c {
  293|       |            '.' // validated later
  294|       |            | '-'
  295|   154k|            | '0'..='9'
  296|       |            | '\u{00B7}'
  297|  1.24k|            | '\u{0300}'..='\u{036F}'
  298|    747|            | '\u{203F}'..='\u{2040}'
  299|       |            | '_'
  300|       |            | ':'
  301|  14.9k|            | 'A'..='Z'
  302|  12.3k|            | 'a'..='z'
  303|  1.25k|            | '\u{00C0}'..='\u{00D6}'
  304|  1.25k|            | '\u{00D8}'..='\u{00F6}'
  305|  1.25k|            | '\u{00F8}'..='\u{02FF}'
  306|  1.24k|            | '\u{0370}'..='\u{037D}'
  307|  1.24k|            | '\u{037F}'..='\u{1FFF}'
  308|    748|            | '\u{200C}'..='\u{200D}'
  309|    747|            | '\u{2070}'..='\u{218F}'
  310|    691|            | '\u{2C00}'..='\u{2FEF}'
  311|    691|            | '\u{3001}'..='\u{D7FF}'
  312|    596|            | '\u{F900}'..='\u{FDCF}'
  313|    596|            | '\u{FDF0}'..='\u{FFFD}'
  314|   157k|            | '\u{10000}'..='\u{EFFFF}' => (),
  315|      8|            _ => return Err(BlankNodeIdParseError),
  316|       |        }
  317|       |    }
  318|       |
  319|       |    // Could not end with a dot
  320|  17.0k|    if id.ends_with('.') {
  321|      5|        Err(BlankNodeIdParseError)
  322|       |    } else {
  323|  17.0k|        Ok(())
  324|       |    }
  325|  17.0k|}
_RNvNtCsf6Xgyyebb1E_5oxrdf10blank_node13to_integer_idB3_:
  328|  17.0k|fn to_integer_id(id: &str) -> Option<u128> {
  329|  17.0k|    let digits = id.as_bytes();
  330|  17.0k|    let mut value: u128 = 0;
  331|  17.0k|    if let None | Some(b'0') = digits.first() {
  332|  1.08k|        return None; // No empty string or leading zeros
  333|  15.9k|    }
  334|   175k|    for digit in digits {
  335|   162k|        value = value.checked_mul(16)?.checked_add(
  336|   162k|            match *digit {
  337|   162k|                b'0'..=b'9' => digit - b'0',
  338|  12.2k|                b'a'..=b'f' => digit - b'a' + 10,
  339|  3.10k|                _ => return None,
  340|       |            }
  341|   159k|            .into(),
  342|      0|        )?;
  343|       |    }
  344|  12.6k|    Some(value)
  345|  17.0k|}

_RNvMNtCsf6Xgyyebb1E_5oxrdf7literalNtB2_7Literal6as_refCseiOrYpwGuRQ_13oxigraph_fuzz:
  131|  23.9k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  132|  23.9k|        LiteralRef(match &self.0 {
  133|    835|            LiteralContent::String(value) => LiteralRefContent::String(value),
  134|  2.01k|            LiteralContent::LanguageTaggedString { value, language } => {
  135|  2.01k|                LiteralRefContent::LanguageTaggedString { value, language }
  136|       |            }
  137|  21.1k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  138|  21.1k|                value,
  139|  21.1k|                datatype: datatype.as_ref(),
  140|  21.1k|            },
  141|       |        })
  142|  23.9k|    }
_RNvMst_NtCsf6Xgyyebb1E_5oxrdf7literalNtB5_10LiteralRef5valueCseiOrYpwGuRQ_13oxigraph_fuzz:
  490|  23.9k|    pub const fn value(self) -> &'a str {
  491|  23.9k|        match self.0 {
  492|    835|            LiteralRefContent::String(value)
  493|  2.01k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  494|  23.9k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  495|  23.9k|        }
  496|  23.9k|    }
_RNvMst_NtCsf6Xgyyebb1E_5oxrdf7literalNtB5_10LiteralRef8datatypeCseiOrYpwGuRQ_13oxigraph_fuzz:
  515|  21.9k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  516|  21.9k|        match self.0 {
  517|    835|            LiteralRefContent::String(_) => xsd::STRING,
  518|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  519|  21.1k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  520|       |        }
  521|  21.9k|    }
_RNvMst_NtCsf6Xgyyebb1E_5oxrdf7literalNtB5_10LiteralRef8languageCseiOrYpwGuRQ_13oxigraph_fuzz:
  503|  23.9k|    pub const fn language(self) -> Option<&'a str> {
  504|  23.9k|        match self.0 {
  505|  2.01k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  506|  21.9k|            _ => None,
  507|       |        }
  508|  23.9k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCscRF9HjKHVNj_5alloc6string6StringEB5_:
   49|  1.71k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  1.71k|        Self(LiteralContent::String(value.into()))
   51|  1.71k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCscRF9HjKHVNj_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|  15.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  15.3k|        let value = value.into();
   57|  15.3k|        let datatype = datatype.into();
   58|  15.3k|        Self(if datatype == xsd::STRING {
   59|     66|            LiteralContent::String(value)
   60|       |        } else {
   61|  15.2k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  15.3k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   55|  28.7k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  28.7k|        let value = value.into();
   57|  28.7k|        let datatype = datatype.into();
   58|  28.7k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  28.7k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  28.7k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCscRF9HjKHVNj_5alloc6string6StringReEB5_:
   67|  4.78k|    pub fn new_language_tagged_literal(
   68|  4.78k|        value: impl Into<String>,
   69|  4.78k|        language: impl Into<String>,
   70|  4.78k|    ) -> Result<Self, LanguageTagParseError> {
   71|  4.78k|        let mut language = language.into();
   72|  4.78k|        language.make_ascii_lowercase();
   73|  4.78k|        Ok(Self::new_language_tagged_literal_unchecked(
   74|  4.78k|            value,
   75|  4.78k|            LanguageTag::parse(language)?.into_inner(),
   76|       |        ))
   77|  4.78k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCscRF9HjKHVNj_5alloc6string6StringB1n_EB5_:
   87|  4.72k|    pub fn new_language_tagged_literal_unchecked(
   88|  4.72k|        value: impl Into<String>,
   89|  4.72k|        language: impl Into<String>,
   90|  4.72k|    ) -> Self {
   91|  4.72k|        Self(LiteralContent::LanguageTaggedString {
   92|  4.72k|            value: value.into(),
   93|  4.72k|            language: language.into(),
   94|  4.72k|        })
   95|  4.72k|    }

_RNvMNtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB2_9NamedNode6as_refCseiOrYpwGuRQ_13oxigraph_fuzz:
   54|  29.3k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  29.3k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  29.3k|    }
_RNvMs4_NtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCseiOrYpwGuRQ_13oxigraph_fuzz:
  128|  29.3k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  29.3k|        Self { iri }
  130|  29.3k|    }
_RNvMs4_NtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCseiOrYpwGuRQ_13oxigraph_fuzz:
  133|  22.2k|    pub const fn as_str(self) -> &'a str {
  134|  22.2k|        self.iri
  135|  22.2k|    }
_RNvMNtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|  34.7k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  34.7k|        Self::new_unchecked(iri.into_inner())
   31|  34.7k|    }
_RNvMNtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  44.0k|    pub fn as_str(&self) -> &str {
   45|  44.0k|        self.iri.as_str()
   46|  44.0k|    }
_RNvMs4_NtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  44.0k|    pub const fn as_str(self) -> &'a str {
  134|  44.0k|        self.iri
  135|  44.0k|    }
_RNvMs4_NtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  28.7k|    pub fn into_owned(self) -> NamedNode {
  139|  28.7k|        NamedNode::new_unchecked(self.iri)
  140|  28.7k|    }
_RNvXs6_NtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCslpNE8qEaggm_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  28.7k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  28.7k|        node.into_owned()
  154|  28.7k|    }
_RNvXs9_NtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCslpNE8qEaggm_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  44.0k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  44.0k|        self.as_str() == other.as_str()
  175|  44.0k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  35.1k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  35.1k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  35.1k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCscRF9HjKHVNj_5alloc6string6StringEB5_:
   39|  34.7k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  34.7k|        Self { iri: iri.into() }
   41|  34.7k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  28.7k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  28.7k|        Self { iri: iri.into() }
   41|  28.7k|    }

_RNvXs3_NtCsf6Xgyyebb1E_5oxrdf6parserNtB5_14TermParseErrorNtNtCslpNE8qEaggm_4core3fmt7Display3fmtCseiOrYpwGuRQ_13oxigraph_fuzz:
  454|     96|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  455|     96|        match &self.kind {
  456|      0|            TermParseErrorKind::Iri { error, value } => {
  457|      0|                write!(f, "Error while parsing the named node '{value}': {error}")
  458|       |            }
  459|      0|            TermParseErrorKind::BlankNode { error, value } => {
  460|      0|                write!(f, "Error while parsing the blank node '{value}': {error}")
  461|       |            }
  462|      0|            TermParseErrorKind::LanguageTag { error, value } => {
  463|      0|                write!(f, "Error while parsing the language tag '{value}': {error}")
  464|       |            }
  465|     10|            TermParseErrorKind::Variable { error, value } => {
  466|     10|                write!(f, "Error while parsing the variable '{value}': {error}")
  467|       |            }
  468|     86|            TermParseErrorKind::Msg { msg } => f.write_str(msg),
  469|       |        }
  470|     96|    }
_RNvXs1_NtCsf6Xgyyebb1E_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCslpNE8qEaggm_4core3str6traits7FromStr8from_str:
  140|  66.4k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  141|  66.4k|        let (term, left) = read_term(s, 0)?;
  142|  65.5k|        if !left.is_empty() {
  143|     71|            return Err(Self::Err::msg("Invalid term serialization"));
  144|  65.4k|        }
  145|  65.4k|        Ok(term)
  146|  66.4k|    }
_RNvXs2_NtCsf6Xgyyebb1E_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCslpNE8qEaggm_4core3str6traits7FromStr8from_str:
  163|  3.76k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  164|  3.76k|        if !s.starts_with('?') && !s.starts_with('$') {
  165|     86|            return Err(Self::Err::msg(
  166|     86|                "Variable serialization should start with ? or $",
  167|     86|            ));
  168|  3.67k|        }
  169|  3.67k|        Self::new(&s[1..]).map_err(|error| Self::Err {
  170|       |            kind: TermParseErrorKind::Variable {
  171|       |                value: s.to_owned(),
  172|       |                error,
  173|       |            },
  174|  3.67k|        })
  175|  3.76k|    }
_RNvNtCsf6Xgyyebb1E_5oxrdf6parser15read_named_node:
  178|  35.2k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  179|  35.2k|    let s = s.trim();
  180|  35.2k|    if let Some(remain) = s.strip_prefix('<') {
  181|  35.2k|        let end = remain
  182|  35.2k|            .find('>')
  183|  35.2k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  184|  35.1k|        let (value, remain) = remain.split_at(end);
  185|  35.1k|        let remain = &remain[1..];
  186|  35.1k|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  187|       |            kind: TermParseErrorKind::Iri {
  188|       |                value: value.to_owned(),
  189|       |                error,
  190|       |            },
  191|  35.1k|        })?;
  192|  34.7k|        Ok((term, remain))
  193|       |    } else {
  194|     47|        Err(TermParseError::msg(
  195|     47|            "Named node serialization should start with a <",
  196|     47|        ))
  197|       |    }
  198|  35.2k|}
_RNvNtCsf6Xgyyebb1E_5oxrdf6parser15read_blank_node:
  200|  17.0k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  201|  17.0k|    let s = s.trim();
  202|  17.0k|    if let Some(remain) = s.strip_prefix("_:") {
  203|  17.0k|        let end = remain
  204|  17.0k|            .find(|v: char| {
  205|       |                v.is_whitespace()
  206|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  207|  17.0k|            })
  208|  17.0k|            .unwrap_or(remain.len());
  209|  17.0k|        let (value, remain) = remain.split_at(end);
  210|  17.0k|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  211|       |            kind: TermParseErrorKind::BlankNode {
  212|       |                value: value.to_owned(),
  213|       |                error,
  214|       |            },
  215|  17.0k|        })?;
  216|  17.0k|        Ok((term, remain))
  217|       |    } else {
  218|      3|        Err(TermParseError::msg(
  219|      3|            "Blank node serialization should start with '_:'",
  220|      3|        ))
  221|       |    }
  222|  17.0k|}
_RNvNtCsf6Xgyyebb1E_5oxrdf6parser12read_literal:
  224|  50.7k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  225|  50.7k|    let s = s.trim();
  226|  50.7k|    if let Some(s) = s.strip_prefix('"') {
  227|  21.9k|        let mut value = String::with_capacity(s.len());
  228|  21.9k|        let mut chars = s.chars();
  229|   392k|        while let Some(c) = chars.next() {
  230|   391k|            match c {
  231|       |                '"' => {
  232|  21.8k|                    let remain = chars.as_str();
  233|  21.8k|                    return if let Some(remain) = remain.strip_prefix('@') {
  234|  4.78k|                        let end = remain
  235|  4.78k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  236|  4.78k|                            .unwrap_or(remain.len());
  237|  4.78k|                        let (language, remain) = remain.split_at(end);
  238|  4.78k|                        Ok((
  239|  4.78k|                            Literal::new_language_tagged_literal(value, language).map_err(
  240|  4.78k|                                |error| TermParseError {
  241|       |                                    kind: TermParseErrorKind::LanguageTag {
  242|       |                                        value: language.to_owned(),
  243|       |                                        error,
  244|       |                                    },
  245|  4.78k|                                },
  246|  4.78k|                            )?,
  247|  4.72k|                            remain,
  248|       |                        ))
  249|  17.0k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  250|  15.3k|                        let (datatype, remain) = read_named_node(remain)?;
  251|  15.3k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  252|       |                    } else {
  253|  1.71k|                        Ok((Literal::new_simple_literal(value), remain))
  254|       |                    };
  255|       |                }
  256|       |                '\\' => {
  257|  12.0k|                    if let Some(c) = chars.next() {
  258|  12.0k|                        value.push(match c {
  259|  2.40k|                            't' => '\t',
  260|    206|                            'b' => '\u{8}',
  261|    656|                            'n' => '\n',
  262|  1.50k|                            'r' => '\r',
  263|    198|                            'f' => '\u{C}',
  264|    750|                            '"' => '"',
  265|    194|                            '\'' => '\'',
  266|  5.49k|                            '\\' => '\\',
  267|    335|                            'u' => read_hexa_char(&mut chars, 4)?,
  268|    256|                            'U' => read_hexa_char(&mut chars, 8)?,
  269|      4|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  270|       |                        })
  271|       |                    } else {
  272|      3|                        return Err(TermParseError::msg("Unexpected literal end"));
  273|       |                    }
  274|       |                }
  275|   358k|                _ => value.push(c),
  276|       |            }
  277|       |        }
  278|     63|        Err(TermParseError::msg("Unexpected literal end"))
  279|  28.8k|    } else if let Some(remain) = s.strip_prefix("true") {
  280|    868|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  281|  28.0k|    } else if let Some(remain) = s.strip_prefix("false") {
  282|    526|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  283|       |    } else {
  284|  27.4k|        let input = s.as_bytes();
  285|  27.4k|        if input.is_empty() {
  286|     41|            return Err(TermParseError::msg("Empty term serialization"));
  287|  27.4k|        }
  288|       |
  289|  27.4k|        let mut cursor = match input.first() {
  290|  4.58k|            Some(b'+' | b'-') => 1,
  291|  22.8k|            _ => 0,
  292|       |        };
  293|  27.4k|        let mut with_dot = false;
  294|  27.4k|
  295|  27.4k|        let mut count_before: usize = 0;
  296|  70.0k|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  297|  42.5k|            count_before += 1;
  298|  42.5k|            cursor += 1;
  299|  42.5k|        }
  300|       |
  301|  27.4k|        let mut count_after: usize = 0;
  302|  27.4k|        if cursor < input.len() && input[cursor] == b'.' {
  303|  4.11k|            with_dot = true;
  304|  4.11k|            cursor += 1;
  305|  11.9k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  306|  7.84k|                count_after += 1;
  307|  7.84k|                cursor += 1;
  308|  7.84k|            }
  309|  23.3k|        }
  310|       |
  311|  27.4k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  312|  11.8k|            cursor += 1;
  313|  11.8k|            cursor += match input.get(cursor) {
  314|    109|                Some(b'+' | b'-') => 1,
  315|  11.6k|                _ => 0,
  316|       |            };
  317|  11.8k|            let mut count_exponent = 0;
  318|  40.7k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  319|  28.9k|                count_exponent += 1;
  320|  28.9k|                cursor += 1;
  321|  28.9k|            }
  322|  11.8k|            if count_exponent > 0 {
  323|  11.7k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  324|       |            } else {
  325|      7|                Err(TermParseError::msg(
  326|      7|                    "Double serialization with an invalid exponent",
  327|      7|                ))
  328|       |            }
  329|  15.6k|        } else if with_dot {
  330|  2.70k|            if count_after > 0 {
  331|  2.69k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  332|       |            } else {
  333|      3|                Err(TermParseError::msg(
  334|      3|                    "Decimal serialization without floating part",
  335|      3|                ))
  336|       |            }
  337|  12.9k|        } else if count_before > 0 {
  338|  12.8k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  339|       |        } else {
  340|     99|            Err(TermParseError::msg("Empty integer serialization"))
  341|       |        }
  342|       |    }
  343|  50.7k|}
_RNvNtCsf6Xgyyebb1E_5oxrdf6parser9read_term:
  345|  90.5k|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  346|  90.5k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  347|      1|        return Err(TermParseError::msg(
  348|      1|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  349|      1|        ));
  350|  90.5k|    }
  351|  90.5k|    let s = s.trim();
  352|       |    #[allow(unused_variables)]
  353|  90.5k|    if let Some(remain) = s.strip_prefix("<<") {
  354|       |        #[cfg(feature = "rdf-star")]
  355|       |        {
  356|  13.4k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  357|  10.7k|            let (predicate, remain) = read_named_node(remain)?;
  358|  10.6k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  359|  9.77k|            let remain = remain.trim_start();
  360|  9.77k|            if let Some(remain) = remain.strip_prefix(">>") {
  361|       |                Ok((
  362|       |                    Triple {
  363|  9.72k|                        subject: match subject {
  364|  3.78k|                            Term::NamedNode(s) => s.into(),
  365|  1.54k|                            Term::BlankNode(s) => s.into(),
  366|       |                            Term::Literal(_) => {
  367|      1|                                return Err(TermParseError::msg(
  368|      1|                                    "Literals are not allowed in subject position",
  369|      1|                                ))
  370|       |                            }
  371|  4.39k|                            Term::Triple(s) => Subject::Triple(s),
  372|       |                        },
  373|  9.72k|                        predicate,
  374|  9.72k|                        object,
  375|  9.72k|                    }
  376|  9.72k|                    .into(),
  377|  9.72k|                    remain,
  378|       |                ))
  379|       |            } else {
  380|     54|                Err(TermParseError::msg(
  381|     54|                    "Nested triple serialization should be enclosed between << and >>",
  382|     54|                ))
  383|       |            }
  384|       |        }
  385|       |        #[cfg(not(feature = "rdf-star"))]
  386|       |        {
  387|       |            Err(TermParseError::msg("RDF-star is not supported"))
  388|       |        }
  389|  77.1k|    } else if s.starts_with('<') {
  390|  9.25k|        let (term, remain) = read_named_node(s)?;
  391|  8.79k|        Ok((term.into(), remain))
  392|  67.8k|    } else if s.starts_with('_') {
  393|  17.0k|        let (term, remain) = read_blank_node(s)?;
  394|  17.0k|        Ok((term.into(), remain))
  395|       |    } else {
  396|  50.7k|        let (term, remain) = read_literal(s)?;
  397|  50.4k|        Ok((term.into(), remain))
  398|       |    }
  399|  90.5k|}
_RNvNtCsf6Xgyyebb1E_5oxrdf6parser14read_hexa_char:
  401|    591|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  402|    591|    let mut value = 0;
  403|    591|    for _ in 0..len {
  404|  3.26k|        if let Some(c) = input.next() {
  405|  3.23k|            value = value * 16
  406|  3.23k|                + match c {
  407|  3.23k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  408|    321|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  409|    520|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  410|       |                    _ => {
  411|      5|                        return Err(TermParseError::msg(
  412|      5|                            "Unexpected character in a unicode escape",
  413|      5|                        ))
  414|       |                    }
  415|       |                }
  416|       |        } else {
  417|     26|            return Err(TermParseError::msg("Unexpected literal string end"));
  418|       |        }
  419|       |    }
  420|    560|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  421|    591|}
_RNvMs5_NtCsf6Xgyyebb1E_5oxrdf6parserNtB5_14TermParseError3msg:
  476|    554|    pub(crate) fn msg(msg: &'static str) -> Self {
  477|    554|        Self {
  478|    554|            kind: TermParseErrorKind::Msg { msg },
  479|    554|        }
  480|    554|    }
_RNCNvXs2_NtCsf6Xgyyebb1E_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCslpNE8qEaggm_4core3str6traits7FromStr8from_str0B9_:
  169|     10|        Self::new(&s[1..]).map_err(|error| Self::Err {
  170|     10|            kind: TermParseErrorKind::Variable {
  171|     10|                value: s.to_owned(),
  172|     10|                error,
  173|     10|            },
  174|     10|        })
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser15read_named_node0B5_:
  183|     38|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser15read_named_nodes_0B5_:
  186|    446|        let term = NamedNode::new(value).map_err(|error| TermParseError {
  187|    446|            kind: TermParseErrorKind::Iri {
  188|    446|                value: value.to_owned(),
  189|    446|                error,
  190|    446|            },
  191|    446|        })?;
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser15read_blank_node0B5_:
  204|   177k|            .find(|v: char| {
  205|   177k|                v.is_whitespace()
  206|   175k|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  207|   177k|            })
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser15read_blank_nodes_0B5_:
  210|     57|        let term = BlankNode::new(value).map_err(|error| TermParseError {
  211|     57|            kind: TermParseErrorKind::BlankNode {
  212|     57|                value: value.to_owned(),
  213|     57|                error,
  214|     57|            },
  215|     57|        })?;
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser12read_literal0B5_:
  235|  59.3k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser12read_literals_0B5_:
  240|     63|                                |error| TermParseError {
  241|     63|                                    kind: TermParseErrorKind::LanguageTag {
  242|     63|                                        value: language.to_owned(),
  243|     63|                                        error,
  244|     63|                                    },
  245|     63|                                },
_RNCNvNtCsf6Xgyyebb1E_5oxrdf6parser14read_hexa_char0B5_:
  420|      2|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))

_RNvMsc_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7Subject6as_refCseiOrYpwGuRQ_13oxigraph_fuzz:
  181|  4.21k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  4.21k|        match self {
  183|  1.60k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|    735|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  1.87k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  4.21k|    }
_RNvMsy_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_4Term6as_refCseiOrYpwGuRQ_13oxigraph_fuzz:
  417|  36.2k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  36.2k|        match self {
  419|  2.38k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|  7.49k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  23.9k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  2.33k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  36.2k|    }
_RNvXs10_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB6_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromRNtB6_4TermE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
  685|  36.2k|    fn from(node: &'a Term) -> Self {
  686|  36.2k|        node.as_ref()
  687|  36.2k|    }
_RNvXsQ_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
  606|  4.21k|    fn from(node: &'a NamedNode) -> Self {
  607|  4.21k|        node.as_ref().into()
  608|  4.21k|    }
_RNvXsZ_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromRNtB5_7SubjectE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
  678|  4.21k|    fn from(node: &'a Subject) -> Self {
  679|  4.21k|        node.as_ref().into()
  680|  4.21k|    }
_RNvXsP_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs3T8ZGKOaOq8_10sparesults:
  599|  19.8k|    fn from(node: NamedNodeRef<'a>) -> Self {
  600|  19.8k|        Self::NamedNode(node)
  601|  19.8k|    }
_RNvXsR_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs3T8ZGKOaOq8_10sparesults:
  613|    735|    fn from(node: BlankNodeRef<'a>) -> Self {
  614|    735|        Self::BlankNode(node)
  615|    735|    }
_RNvXsV_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromRNtB5_6TripleE4fromCs3T8ZGKOaOq8_10sparesults:
  642|  1.87k|    fn from(node: &'a Triple) -> Self {
  643|  1.87k|        Self::Triple(node)
  644|  1.87k|    }
_RNvXsY_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7TermRefINtNtCslpNE8qEaggm_4core7convert4FromNtB5_10SubjectRefE4fromCs3T8ZGKOaOq8_10sparesults:
  666|  4.21k|    fn from(node: SubjectRef<'a>) -> Self {
  667|  4.21k|        match node {
  668|  1.60k|            SubjectRef::NamedNode(node) => node.into(),
  669|    735|            SubjectRef::BlankNode(node) => node.into(),
  670|       |            #[cfg(feature = "rdf-star")]
  671|  1.87k|            SubjectRef::Triple(triple) => triple.into(),
  672|       |        }
  673|  4.21k|    }
_RNvXse_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7SubjectINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  3.78k|    fn from(node: NamedNode) -> Self {
  201|  3.78k|        Self::NamedNode(node)
  202|  3.78k|    }
_RNvXsg_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_7SubjectINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  1.54k|    fn from(node: BlankNode) -> Self {
  215|  1.54k|        Self::BlankNode(node)
  216|  1.54k|    }
_RNvXsA_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_4TermINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  8.79k|    fn from(node: NamedNode) -> Self {
  438|  8.79k|        Self::NamedNode(node)
  439|  8.79k|    }
_RNvXsC_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_4TermINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|  17.0k|    fn from(node: BlankNode) -> Self {
  452|  17.0k|        Self::BlankNode(node)
  453|  17.0k|    }
_RNvXsE_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_4TermINtNtCslpNE8qEaggm_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  50.4k|    fn from(literal: Literal) -> Self {
  466|  50.4k|        Self::Literal(literal)
  467|  50.4k|    }
_RNvXsG_NtCsf6Xgyyebb1E_5oxrdf6tripleNtB5_4TermINtNtCslpNE8qEaggm_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|  9.72k|    fn from(triple: Triple) -> Self {
  481|  9.72k|        Self::Triple(Box::new(triple))
  482|  9.72k|    }

_RNvMNtCsf6Xgyyebb1E_5oxrdf8variableNtB2_8Variable6as_refCseiOrYpwGuRQ_13oxigraph_fuzz:
   51|  64.3k|    pub fn as_ref(&self) -> VariableRef<'_> {
   52|  64.3k|        VariableRef { name: &self.name }
   53|  64.3k|    }
_RNvXs1_NtCsf6Xgyyebb1E_5oxrdf8variableNtB5_11VariableRefNtNtCslpNE8qEaggm_4core3fmt7Display3fmtCseiOrYpwGuRQ_13oxigraph_fuzz:
  117|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  118|      8|        write!(f, "?{}", self.name)
  119|      8|    }
_RNvXs2_NtCsf6Xgyyebb1E_5oxrdf8variableNtB5_11VariableRefINtNtCslpNE8qEaggm_4core7convert4FromRNtB5_8VariableE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
  124|  31.9k|    fn from(variable: &'a Variable) -> Self {
  125|  31.9k|        variable.as_ref()
  126|  31.9k|    }
_RNvXs5_NtCsf6Xgyyebb1E_5oxrdf8variableNtB5_8VariableINtNtCslpNE8qEaggm_4core3cmp9PartialEqNtB5_11VariableRefE2eqCseiOrYpwGuRQ_13oxigraph_fuzz:
  145|  32.3k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  146|  32.3k|        self.as_ref() == *other
  147|  32.3k|    }
_RNvXs8_NtCsf6Xgyyebb1E_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCslpNE8qEaggm_4core3fmt7Display3fmtCseiOrYpwGuRQ_13oxigraph_fuzz:
  220|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  221|     10|        write!(f, "The variable name is invalid")
  222|     10|    }
_RNvXs_NtCsf6Xgyyebb1E_5oxrdf8variableNtB4_8VariableNtNtCslpNE8qEaggm_4core3fmt7Display3fmtCseiOrYpwGuRQ_13oxigraph_fuzz:
   58|      8|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   59|      8|        self.as_ref().fmt(f)
   60|      8|    }
_RNvMNtCsf6Xgyyebb1E_5oxrdf8variableNtB2_8Variable6as_refCs3T8ZGKOaOq8_10sparesults:
   51|   128k|    pub fn as_ref(&self) -> VariableRef<'_> {
   52|   128k|        VariableRef { name: &self.name }
   53|   128k|    }
_RNvMNtCsf6Xgyyebb1E_5oxrdf8variableNtB2_8Variable6as_strCs3T8ZGKOaOq8_10sparesults:
   41|  1.65k|    pub fn as_str(&self) -> &str {
   42|  1.65k|        &self.name
   43|  1.65k|    }
_RNvXs5_NtCsf6Xgyyebb1E_5oxrdf8variableNtB5_8VariableINtNtCslpNE8qEaggm_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs3T8ZGKOaOq8_10sparesults:
  145|  64.7k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  146|  64.7k|        self.as_ref() == *other
  147|  64.7k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf8variableNtB3_8Variable3newReEB5_:
   23|  3.67k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   24|  3.67k|        let name = name.into();
   25|  3.67k|        validate_variable_identifier(&name)?;
   26|  3.66k|        Ok(Self::new_unchecked(name))
   27|  3.67k|    }
_RINvMNtCsf6Xgyyebb1E_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCscRF9HjKHVNj_5alloc6string6StringEB5_:
   36|  3.66k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   37|  3.66k|        Self { name: name.into() }
   38|  3.66k|    }
_RNvNtCsf6Xgyyebb1E_5oxrdf8variable28validate_variable_identifier:
  164|  3.67k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  165|  3.67k|    let mut chars = id.chars();
  166|  3.67k|    let front = chars.next().ok_or(VariableNameParseError)?;
  167|  3.67k|    match front {
  168|  3.67k|        '0'..='9'
  169|       |        | '_'
  170|       |        | ':'
  171|  2.03k|        | 'A'..='Z'
  172|    592|        | 'a'..='z'
  173|    106|        | '\u{00C0}'..='\u{00D6}'
  174|    106|        | '\u{00D8}'..='\u{00F6}'
  175|    100|        | '\u{00F8}'..='\u{02FF}'
  176|    100|        | '\u{0370}'..='\u{037D}'
  177|    100|        | '\u{037F}'..='\u{1FFF}'
  178|     31|        | '\u{200C}'..='\u{200D}'
  179|     31|        | '\u{2070}'..='\u{218F}'
  180|     22|        | '\u{2C00}'..='\u{2FEF}'
  181|     22|        | '\u{3001}'..='\u{D7FF}'
  182|      6|        | '\u{F900}'..='\u{FDCF}'
  183|      6|        | '\u{FDF0}'..='\u{FFFD}'
  184|  3.67k|        | '\u{10000}'..='\u{EFFFF}' => (),
  185|      1|        _ => return Err(VariableNameParseError),
  186|       |    }
  187|  7.86k|    for c in chars {
  188|  4.20k|        match c {
  189|  4.19k|            '0'..='9'
  190|       |            | '\u{00B7}'
  191|    379|            | '\u{00300}'..='\u{036F}'
  192|    178|            | '\u{203F}'..='\u{2040}'
  193|       |            | '_'
  194|  2.42k|            | 'A'..='Z'
  195|  1.15k|            | 'a'..='z'
  196|    381|            | '\u{00C0}'..='\u{00D6}'
  197|    381|            | '\u{00D8}'..='\u{00F6}'
  198|    379|            | '\u{00F8}'..='\u{02FF}'
  199|    379|            | '\u{0370}'..='\u{037D}'
  200|    379|            | '\u{037F}'..='\u{1FFF}'
  201|    178|            | '\u{200C}'..='\u{200D}'
  202|    178|            | '\u{2070}'..='\u{218F}'
  203|    178|            | '\u{2C00}'..='\u{2FEF}'
  204|    177|            | '\u{3001}'..='\u{D7FF}'
  205|     80|            | '\u{F900}'..='\u{FDCF}'
  206|     80|            | '\u{FDF0}'..='\u{FFFD}'
  207|  4.19k|            | '\u{10000}'..='\u{EFFFF}' => (),
  208|      7|            _ => return Err(VariableNameParseError),
  209|       |        }
  210|       |    }
  211|  3.66k|    Ok(())
  212|  3.67k|}

_RINvMs0_NtCs3T8ZGKOaOq8_10sparesults3csvINtB6_25ToWriteTsvSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE5writeINtNtNtNtCslpNE8qEaggm_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB37_22ToWriteSolutionsWriterB19_E5writeRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableRNtNtB49_6triple4TermRNtB2F_13QuerySolutionE0EECseiOrYpwGuRQ_13oxigraph_fuzz:
  200|  47.7k|    pub fn write<'a>(
  201|  47.7k|        &mut self,
  202|  47.7k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  203|  47.7k|    ) -> io::Result<()> {
  204|  47.7k|        self.inner.write(&mut self.buffer, solution);
  205|  47.7k|        self.write.write_all(self.buffer.as_bytes())?;
  206|  47.7k|        self.buffer.clear();
  207|  47.7k|        Ok(())
  208|  47.7k|    }
_RINvMs1_NtCs3T8ZGKOaOq8_10sparesults3csvNtB6_23InnerTsvSolutionsWriter5writeINtNtNtNtCslpNE8qEaggm_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2u_22ToWriteSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE5writeRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableRNtNtB41_6triple4TermRNtB22_13QuerySolutionE0EECseiOrYpwGuRQ_13oxigraph_fuzz:
  271|  47.7k|    fn write<'a>(
  272|  47.7k|        &self,
  273|  47.7k|        output: &mut String,
  274|  47.7k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  275|  47.7k|    ) {
  276|  47.7k|        let mut values = vec![None; self.variables.len()];
  277|  79.7k|        for (variable, value) in solution {
  278|  31.9k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  279|  31.9k|                values[position] = Some(value);
  280|  31.9k|            }
  281|       |        }
  282|  47.7k|        let mut start_binding = true;
  283|  95.7k|        for value in values {
  284|  48.0k|            if start_binding {
  285|  47.3k|                start_binding = false;
  286|  47.3k|            } else {
  287|    660|                output.push('\t');
  288|    660|            }
  289|  48.0k|            if let Some(value) = value {
  290|  31.9k|                write_tsv_term(output, value);
  291|  31.9k|            }
  292|       |        }
  293|  47.7k|        output.push('\n');
  294|  47.7k|    }
_RINvMs4_NtCs3T8ZGKOaOq8_10sparesults3csvNtB6_10LineReader9next_lineRShECseiOrYpwGuRQ_13oxigraph_fuzz:
  582|   107k|    fn next_line<'a>(
  583|   107k|        &mut self,
  584|   107k|        buffer: &'a mut Vec<u8>,
  585|   107k|        read: &mut impl Read,
  586|   107k|    ) -> io::Result<&'a str> {
  587|   107k|        let line_end = loop {
  588|   113k|            if let Some(eol) = memchr(b'\n', &buffer[self.buffer_start..self.buffer_end]) {
  589|   101k|                break self.buffer_start + eol + 1;
  590|  12.0k|            }
  591|  12.0k|            if self.buffer_start > 0 {
  592|  6.82k|                buffer.copy_within(self.buffer_start..self.buffer_end, 0);
  593|  6.82k|                self.buffer_end -= self.buffer_start;
  594|  6.82k|                self.buffer_start = 0;
  595|  6.82k|            }
  596|  12.0k|            if self.buffer_end + 1024 > buffer.len() {
  597|  8.17k|                if self.buffer_end + 1024 > MAX_BUFFER_SIZE {
  598|      0|                    return Err(io::Error::new(
  599|      0|                        io::ErrorKind::OutOfMemory,
  600|      0|                        format!("Reached the buffer maximal size of {MAX_BUFFER_SIZE}"),
  601|      0|                    ));
  602|  8.17k|                }
  603|  8.17k|                buffer.resize(self.buffer_end + 1024, b'\0');
  604|  3.83k|            }
  605|  12.0k|            let read = read.read(&mut buffer[self.buffer_end..])?;
  606|  12.0k|            if read == 0 {
  607|  6.11k|                break self.buffer_end;
  608|  5.88k|            }
  609|  5.88k|            self.buffer_end += read;
  610|       |        };
  611|   107k|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  612|       |            io::Error::new(
  613|       |                io::ErrorKind::InvalidData,
  614|       |                format!("Invalid UTF-8 in the TSV file: {e}"),
  615|       |            )
  616|   107k|        });
  617|   107k|        self.line_count += 1;
  618|   107k|        self.last_line_start = self.last_line_end;
  619|   107k|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  620|   107k|        self.buffer_start = line_end;
  621|   107k|        result
  622|   107k|    }
_RINvNtCs3T8ZGKOaOq8_10sparesults3csv14write_tsv_termNtNtCsf6Xgyyebb1E_5oxrdf10named_node12NamedNodeRefECseiOrYpwGuRQ_13oxigraph_fuzz:
  297|  14.0k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  14.0k|    match term.into() {
  299|  14.0k|        TermRef::NamedNode(node) => {
  300|  14.0k|            output.push('<');
  301|  14.0k|            output.push_str(node.as_str());
  302|  14.0k|            output.push('>');
  303|  14.0k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|  14.0k|}
_RINvNtCs3T8ZGKOaOq8_10sparesults3csv14write_tsv_termNtNtCsf6Xgyyebb1E_5oxrdf6triple7TermRefECseiOrYpwGuRQ_13oxigraph_fuzz:
  297|  31.9k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  31.9k|    match term.into() {
  299|  2.25k|        TermRef::NamedNode(node) => {
  300|  2.25k|            output.push('<');
  301|  2.25k|            output.push_str(node.as_str());
  302|  2.25k|            output.push('>');
  303|  2.25k|        }
  304|  7.11k|        TermRef::BlankNode(node) => {
  305|  7.11k|            output.push_str("_:");
  306|  7.11k|            output.push_str(node.as_str());
  307|  7.11k|        }
  308|  20.5k|        TermRef::Literal(literal) => {
  309|  20.5k|            let value = literal.value();
  310|  20.5k|            if let Some(language) = literal.language() {
  311|  1.87k|                write_tsv_quoted_str(output, value);
  312|  1.87k|                output.push('@');
  313|  1.87k|                output.push_str(language);
  314|  1.87k|            } else {
  315|  18.7k|                match literal.datatype() {
  316|  18.7k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|  18.1k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|  13.7k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|  12.6k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|  11.7k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|  11.0k|                    datatype => {
  322|  11.0k|                        write_tsv_quoted_str(output, value);
  323|  11.0k|                        output.push_str("^^");
  324|  11.0k|                        write_tsv_term(output, datatype);
  325|  11.0k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  2.03k|        TermRef::Triple(triple) => {
  331|  2.03k|            output.push_str("<< ");
  332|  2.03k|            write_tsv_term(output, &triple.subject);
  333|  2.03k|            output.push(' ');
  334|  2.03k|            write_tsv_term(output, &triple.predicate);
  335|  2.03k|            output.push(' ');
  336|  2.03k|            write_tsv_term(output, &triple.object);
  337|  2.03k|            output.push_str(" >>");
  338|  2.03k|        }
  339|       |    }
  340|  31.9k|}
_RINvNtCs3T8ZGKOaOq8_10sparesults3csv14write_tsv_termRNtNtCsf6Xgyyebb1E_5oxrdf10named_node9NamedNodeECseiOrYpwGuRQ_13oxigraph_fuzz:
  297|  4.21k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  4.21k|    match term.into() {
  299|  4.21k|        TermRef::NamedNode(node) => {
  300|  4.21k|            output.push('<');
  301|  4.21k|            output.push_str(node.as_str());
  302|  4.21k|            output.push('>');
  303|  4.21k|        }
  304|      0|        TermRef::BlankNode(node) => {
  305|      0|            output.push_str("_:");
  306|      0|            output.push_str(node.as_str());
  307|      0|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|      0|        TermRef::Triple(triple) => {
  331|      0|            output.push_str("<< ");
  332|      0|            write_tsv_term(output, &triple.subject);
  333|      0|            output.push(' ');
  334|      0|            write_tsv_term(output, &triple.predicate);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.object);
  337|      0|            output.push_str(" >>");
  338|      0|        }
  339|       |    }
  340|  4.21k|}
_RINvNtCs3T8ZGKOaOq8_10sparesults3csv14write_tsv_termRNtNtCsf6Xgyyebb1E_5oxrdf6triple4TermECseiOrYpwGuRQ_13oxigraph_fuzz:
  297|  4.21k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  4.21k|    match term.into() {
  299|    138|        TermRef::NamedNode(node) => {
  300|    138|            output.push('<');
  301|    138|            output.push_str(node.as_str());
  302|    138|            output.push('>');
  303|    138|        }
  304|    377|        TermRef::BlankNode(node) => {
  305|    377|            output.push_str("_:");
  306|    377|            output.push_str(node.as_str());
  307|    377|        }
  308|  3.39k|        TermRef::Literal(literal) => {
  309|  3.39k|            let value = literal.value();
  310|  3.39k|            if let Some(language) = literal.language() {
  311|    140|                write_tsv_quoted_str(output, value);
  312|    140|                output.push('@');
  313|    140|                output.push_str(language);
  314|    140|            } else {
  315|  3.25k|                match literal.datatype() {
  316|  3.25k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|  3.13k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|  3.13k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|  3.13k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|  3.13k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|  2.97k|                    datatype => {
  322|  2.97k|                        write_tsv_quoted_str(output, value);
  323|  2.97k|                        output.push_str("^^");
  324|  2.97k|                        write_tsv_term(output, datatype);
  325|  2.97k|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|    306|        TermRef::Triple(triple) => {
  331|    306|            output.push_str("<< ");
  332|    306|            write_tsv_term(output, &triple.subject);
  333|    306|            output.push(' ');
  334|    306|            write_tsv_term(output, &triple.predicate);
  335|    306|            output.push(' ');
  336|    306|            write_tsv_term(output, &triple.object);
  337|    306|            output.push_str(" >>");
  338|    306|        }
  339|       |    }
  340|  4.21k|}
_RINvNtCs3T8ZGKOaOq8_10sparesults3csv14write_tsv_termRNtNtCsf6Xgyyebb1E_5oxrdf6triple7SubjectECseiOrYpwGuRQ_13oxigraph_fuzz:
  297|  4.21k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  298|  4.21k|    match term.into() {
  299|  1.60k|        TermRef::NamedNode(node) => {
  300|  1.60k|            output.push('<');
  301|  1.60k|            output.push_str(node.as_str());
  302|  1.60k|            output.push('>');
  303|  1.60k|        }
  304|    735|        TermRef::BlankNode(node) => {
  305|    735|            output.push_str("_:");
  306|    735|            output.push_str(node.as_str());
  307|    735|        }
  308|      0|        TermRef::Literal(literal) => {
  309|      0|            let value = literal.value();
  310|      0|            if let Some(language) = literal.language() {
  311|      0|                write_tsv_quoted_str(output, value);
  312|      0|                output.push('@');
  313|      0|                output.push_str(language);
  314|      0|            } else {
  315|      0|                match literal.datatype() {
  316|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  317|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  318|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  319|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  320|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  321|      0|                    datatype => {
  322|      0|                        write_tsv_quoted_str(output, value);
  323|      0|                        output.push_str("^^");
  324|      0|                        write_tsv_term(output, datatype);
  325|      0|                    }
  326|       |                }
  327|       |            }
  328|       |        }
  329|       |        #[cfg(feature = "rdf-star")]
  330|  1.87k|        TermRef::Triple(triple) => {
  331|  1.87k|            output.push_str("<< ");
  332|  1.87k|            write_tsv_term(output, &triple.subject);
  333|  1.87k|            output.push(' ');
  334|  1.87k|            write_tsv_term(output, &triple.predicate);
  335|  1.87k|            output.push(' ');
  336|  1.87k|            write_tsv_term(output, &triple.object);
  337|  1.87k|            output.push_str(" >>");
  338|  1.87k|        }
  339|       |    }
  340|  4.21k|}
_RINvNtCs3T8ZGKOaOq8_10sparesults3csv24write_boolean_csv_resultQINtNtCscRF9HjKHVNj_5alloc3vec3VechEECseiOrYpwGuRQ_13oxigraph_fuzz:
   14|      2|pub fn write_boolean_csv_result<W: Write>(mut write: W, value: bool) -> io::Result<W> {
   15|      2|    write.write_all(if value { b"true" } else { b"false" })?;
   16|      2|    Ok(write)
   17|      2|}
_RNCINvMs1_NtCs3T8ZGKOaOq8_10sparesults3csvNtB8_23InnerTsvSolutionsWriter5writeINtNtNtNtCslpNE8qEaggm_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2w_22ToWriteSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE5writeRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableRNtNtB43_6triple4TermRNtB24_13QuerySolutionE0EE0CseiOrYpwGuRQ_13oxigraph_fuzz:
  278|  32.3k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNCINvMs4_NtCs3T8ZGKOaOq8_10sparesults3csvNtB8_10LineReader9next_lineRShE0CseiOrYpwGuRQ_13oxigraph_fuzz:
  611|     14|        let result = str::from_utf8(&buffer[self.buffer_start..line_end]).map_err(|e| {
  612|     14|            io::Error::new(
  613|     14|                io::ErrorKind::InvalidData,
  614|     14|                format!("Invalid UTF-8 in the TSV file: {e}"),
  615|     14|            )
  616|     14|        });
_RNCNCNCNvMs3_NtCs3T8ZGKOaOq8_10sparesults3csvINtBb_18TsvSolutionsReaderRShE9read_next000CseiOrYpwGuRQ_13oxigraph_fuzz:
  507|    507|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs3_NtCs3T8ZGKOaOq8_10sparesults3csvINtBb_18TsvSolutionsReaderRShE9read_next00s_0CseiOrYpwGuRQ_13oxigraph_fuzz:
  510|    507|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNCNvMs3_NtCs3T8ZGKOaOq8_10sparesults3csvINtB9_18TsvSolutionsReaderRShE9read_next00CseiOrYpwGuRQ_13oxigraph_fuzz:
  503|  1.03k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  504|  1.03k|                        let start_position_char = line
  505|  1.03k|                            .split('\t')
  506|  1.03k|                            .take(i)
  507|  1.03k|                            .map(|c| c.chars().count() + 1)
  508|  1.03k|                            .sum::<usize>();
  509|  1.03k|                        let start_position_bytes =
  510|  1.03k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  511|  1.03k|                        SyntaxError {
  512|  1.03k|                            inner: SyntaxErrorKind::Term {
  513|  1.03k|                                error: e,
  514|  1.03k|                                term: v.into(),
  515|  1.03k|                                location: TextPosition {
  516|  1.03k|                                    line: self.reader.line_count - 1,
  517|  1.03k|                                    column: start_position_char.try_into().unwrap(),
  518|  1.03k|                                    offset: self.reader.last_line_start
  519|  1.03k|                                        + u64::try_from(start_position_bytes).unwrap(),
  520|  1.03k|                                }..TextPosition {
  521|  1.03k|                                    line: self.reader.line_count - 1,
  522|  1.03k|                                    column: (start_position_char + v.chars().count())
  523|  1.03k|                                        .try_into()
  524|  1.03k|                                        .unwrap(),
  525|  1.03k|                                    offset: self.reader.last_line_start
  526|  1.03k|                                        + u64::try_from(start_position_bytes + v.len()).unwrap(),
  527|  1.03k|                                },
  528|  1.03k|                            },
  529|  1.03k|                        }
  530|  1.03k|                    })?))
_RNCNvMs2_NtCs3T8ZGKOaOq8_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4read0CseiOrYpwGuRQ_13oxigraph_fuzz:
  442|  12.4k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvMs2_NtCs3T8ZGKOaOq8_10sparesults3csvINtB7_21TsvQueryResultsReaderRShE4reads_0CseiOrYpwGuRQ_13oxigraph_fuzz:
  456|     96|                let variable = Variable::from_str(v).map_err(|e| {
  457|     96|                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  458|     96|                })?;
_RNCNvMs3_NtCs3T8ZGKOaOq8_10sparesults3csvINtB7_18TsvSolutionsReaderRShE9read_next0CseiOrYpwGuRQ_13oxigraph_fuzz:
  498|   101k|            .map(|(i, v)| {
  499|   101k|                let v = v.trim();
  500|   101k|                if v.is_empty() {
  501|  35.2k|                    Ok(None)
  502|       |                } else {
  503|  66.4k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  504|       |                        let start_position_char = line
  505|       |                            .split('\t')
  506|       |                            .take(i)
  507|       |                            .map(|c| c.chars().count() + 1)
  508|       |                            .sum::<usize>();
  509|       |                        let start_position_bytes =
  510|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  511|       |                        SyntaxError {
  512|       |                            inner: SyntaxErrorKind::Term {
  513|       |                                error: e,
  514|       |                                term: v.into(),
  515|       |                                location: TextPosition {
  516|       |                                    line: self.reader.line_count - 1,
  517|       |                                    column: start_position_char.try_into().unwrap(),
  518|       |                                    offset: self.reader.last_line_start
  519|       |                                        + u64::try_from(start_position_bytes).unwrap(),
  520|       |                                }..TextPosition {
  521|       |                                    line: self.reader.line_count - 1,
  522|       |                                    column: (start_position_char + v.chars().count())
  523|       |                                        .try_into()
  524|       |                                        .unwrap(),
  525|       |                                    offset: self.reader.last_line_start
  526|       |                                        + u64::try_from(start_position_bytes + v.len()).unwrap(),
  527|       |                                },
  528|       |                            },
  529|       |                        }
  530|  66.4k|                    })?))
  531|       |                }
  532|   101k|            })
_RNvMs0_NtCs3T8ZGKOaOq8_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE5startCseiOrYpwGuRQ_13oxigraph_fuzz:
  188|  1.66k|    pub fn start(mut write: W, variables: Vec<Variable>) -> io::Result<Self> {
  189|  1.66k|        let mut buffer = String::new();
  190|  1.66k|        let inner = InnerTsvSolutionsWriter::start(&mut buffer, variables);
  191|  1.66k|        write.write_all(buffer.as_bytes())?;
  192|  1.66k|        buffer.clear();
  193|  1.66k|        Ok(Self {
  194|  1.66k|            inner,
  195|  1.66k|            write,
  196|  1.66k|            buffer,
  197|  1.66k|        })
  198|  1.66k|    }
_RNvMs0_NtCs3T8ZGKOaOq8_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE6finishCseiOrYpwGuRQ_13oxigraph_fuzz:
  210|  1.66k|    pub fn finish(self) -> W {
  211|  1.66k|        self.write
  212|  1.66k|    }
_RNvMs2_NtCs3T8ZGKOaOq8_10sparesults3csvINtB5_21TsvQueryResultsReaderRShE4readCseiOrYpwGuRQ_13oxigraph_fuzz:
  435|  4.64k|    pub fn read(mut read: R) -> Result<Self, ParseError> {
  436|  4.64k|        let mut reader = LineReader::new();
  437|  4.64k|        let mut buffer = Vec::new();
  438|       |
  439|       |        // We read the header
  440|  4.64k|        let line = reader
  441|  4.64k|            .next_line(&mut buffer, &mut read)?
  442|  4.64k|            .trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  443|  4.64k|        if line.eq_ignore_ascii_case("true") {
  444|      2|            return Ok(Self::Boolean(true));
  445|  4.64k|        }
  446|  4.64k|        if line.eq_ignore_ascii_case("false") {
  447|      2|            return Ok(Self::Boolean(false));
  448|  4.63k|        }
  449|  4.63k|        let mut variables = Vec::new();
  450|  4.63k|        if !line.is_empty() {
  451|  3.81k|            for v in line.split('\t') {
  452|  3.81k|                let v = v.trim();
  453|  3.81k|                if v.is_empty() {
  454|     53|                    return Err(SyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar").into());
  455|  3.76k|                }
  456|  3.76k|                let variable = Variable::from_str(v).map_err(|e| {
  457|       |                    SyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  458|  3.76k|                })?;
  459|  3.66k|                if variables.contains(&variable) {
  460|      8|                    return Err(SyntaxError::msg(format!(
  461|      8|                        "The variable {variable} is declared twice"
  462|      8|                    ))
  463|      8|                    .into());
  464|  3.65k|                }
  465|  3.65k|                variables.push(variable);
  466|       |            }
  467|  1.18k|        }
  468|  4.48k|        let column_len = variables.len();
  469|  4.48k|        Ok(Self::Solutions {
  470|  4.48k|            variables,
  471|  4.48k|            solutions: TsvSolutionsReader {
  472|  4.48k|                read,
  473|  4.48k|                buffer,
  474|  4.48k|                reader,
  475|  4.48k|                column_len,
  476|  4.48k|            },
  477|  4.48k|        })
  478|  4.64k|    }
_RNvMs3_NtCs3T8ZGKOaOq8_10sparesults3csvINtB5_18TsvSolutionsReaderRShE9read_nextCseiOrYpwGuRQ_13oxigraph_fuzz:
  490|   102k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  491|   102k|        let line = self.reader.next_line(&mut self.buffer, &mut self.read)?;
  492|   102k|        if line.is_empty() {
  493|  3.32k|            return Ok(None); // EOF
  494|  99.2k|        }
  495|  99.2k|        let elements = line
  496|  99.2k|            .split('\t')
  497|  99.2k|            .enumerate()
  498|  99.2k|            .map(|(i, v)| {
  499|       |                let v = v.trim();
  500|       |                if v.is_empty() {
  501|       |                    Ok(None)
  502|       |                } else {
  503|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  504|       |                        let start_position_char = line
  505|       |                            .split('\t')
  506|       |                            .take(i)
  507|       |                            .map(|c| c.chars().count() + 1)
  508|       |                            .sum::<usize>();
  509|       |                        let start_position_bytes =
  510|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  511|       |                        SyntaxError {
  512|       |                            inner: SyntaxErrorKind::Term {
  513|       |                                error: e,
  514|       |                                term: v.into(),
  515|       |                                location: TextPosition {
  516|       |                                    line: self.reader.line_count - 1,
  517|       |                                    column: start_position_char.try_into().unwrap(),
  518|       |                                    offset: self.reader.last_line_start
  519|       |                                        + u64::try_from(start_position_bytes).unwrap(),
  520|       |                                }..TextPosition {
  521|       |                                    line: self.reader.line_count - 1,
  522|       |                                    column: (start_position_char + v.chars().count())
  523|       |                                        .try_into()
  524|       |                                        .unwrap(),
  525|       |                                    offset: self.reader.last_line_start
  526|       |                                        + u64::try_from(start_position_bytes + v.len()).unwrap(),
  527|       |                                },
  528|       |                            },
  529|       |                        }
  530|       |                    })?))
  531|       |                }
  532|  99.2k|            })
  533|  99.2k|            .collect::<Result<Vec<_>, ParseError>>()?;
  534|  98.2k|        if elements.len() == self.column_len {
  535|  97.1k|            Ok(Some(elements))
  536|  1.06k|        } else if self.column_len == 0 && elements == [None] {
  537|    946|            Ok(Some(Vec::new())) // Zero columns case
  538|       |        } else {
  539|    115|            Err(SyntaxError::located_message(
  540|    115|                format!(
  541|    115|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  542|    115|                    self.column_len,
  543|    115|                    self.reader.line_count - 1,
  544|    115|                    elements.len(),
  545|    115|                    line
  546|    115|                ),
  547|    115|                TextPosition {
  548|    115|                    line: self.reader.line_count - 1,
  549|    115|                    column: 0,
  550|    115|                    offset: self.reader.last_line_start,
  551|    115|                }..TextPosition {
  552|    115|                    line: self.reader.line_count - 1,
  553|    115|                    column: line.chars().count().try_into().unwrap(),
  554|    115|                    offset: self.reader.last_line_end,
  555|    115|                },
  556|    115|            )
  557|    115|            .into())
  558|       |        }
  559|   102k|    }
_RNvMs1_NtCs3T8ZGKOaOq8_10sparesults3csvNtB5_23InnerTsvSolutionsWriter5start:
  256|  1.66k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  257|  1.66k|        let mut start_vars = true;
  258|  3.31k|        for variable in &variables {
  259|  1.65k|            if start_vars {
  260|  1.56k|                start_vars = false;
  261|  1.56k|            } else {
  262|     81|                output.push('\t');
  263|     81|            }
  264|  1.65k|            output.push('?');
  265|  1.65k|            output.push_str(variable.as_str());
  266|       |        }
  267|  1.66k|        output.push('\n');
  268|  1.66k|        Self { variables }
  269|  1.66k|    }
_RNvNtCs3T8ZGKOaOq8_10sparesults3csv20write_tsv_quoted_str:
  342|  16.8k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  343|  16.8k|    output.push('"');
  344|   353k|    for c in string.chars() {
  345|   353k|        match c {
  346|  1.20k|            '\t' => output.push_str("\\t"),
  347|    325|            '\n' => output.push_str("\\n"),
  348|  1.49k|            '\r' => output.push_str("\\r"),
  349|    372|            '"' => output.push_str("\\\""),
  350|  2.74k|            '\\' => output.push_str("\\\\"),
  351|   347k|            _ => output.push(c),
  352|       |        };
  353|       |    }
  354|  16.8k|    output.push('"');
  355|  16.8k|}
_RNvNtCs3T8ZGKOaOq8_10sparesults3csv17is_turtle_boolean:
  357|    759|fn is_turtle_boolean(value: &str) -> bool {
  358|    759|    matches!(value, "true" | "false")
  359|    759|}
_RNvNtCs3T8ZGKOaOq8_10sparesults3csv17is_turtle_integer:
  361|  7.25k|fn is_turtle_integer(value: &str) -> bool {
  362|  7.25k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  363|  7.25k|    let mut value = value.as_bytes();
  364|  7.25k|    if let Some(v) = value.strip_prefix(b"+") {
  365|     72|        value = v;
  366|  7.18k|    } else if let Some(v) = value.strip_prefix(b"-") {
  367|     77|        value = v;
  368|  7.10k|    }
  369|  7.25k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  370|  7.25k|}
_RNvNtCs3T8ZGKOaOq8_10sparesults3csv17is_turtle_decimal:
  372|  1.32k|fn is_turtle_decimal(value: &str) -> bool {
  373|  1.32k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  374|  1.32k|    let mut value = value.as_bytes();
  375|  1.32k|    if let Some(v) = value.strip_prefix(b"+") {
  376|    204|        value = v;
  377|  1.12k|    } else if let Some(v) = value.strip_prefix(b"-") {
  378|    174|        value = v;
  379|    947|    }
  380|  3.53k|    while value.first().map_or(false, u8::is_ascii_digit) {
  381|  2.20k|        value = &value[1..];
  382|  2.20k|    }
  383|  1.32k|    let Some(value) = value.strip_prefix(b".") else {
  384|     96|        return false;
  385|       |    };
  386|  1.22k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  387|  1.32k|}
_RNvNtCs3T8ZGKOaOq8_10sparesults3csv16is_turtle_double:
  389|  11.3k|fn is_turtle_double(value: &str) -> bool {
  390|  11.3k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  391|  11.3k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  392|  11.3k|    let mut value = value.as_bytes();
  393|  11.3k|    if let Some(v) = value.strip_prefix(b"+") {
  394|    115|        value = v;
  395|  11.2k|    } else if let Some(v) = value.strip_prefix(b"-") {
  396|  3.37k|        value = v;
  397|  7.84k|    }
  398|  11.3k|    let mut with_before = false;
  399|  13.8k|    while value.first().map_or(false, u8::is_ascii_digit) {
  400|  2.49k|        value = &value[1..];
  401|  2.49k|        with_before = true;
  402|  2.49k|    }
  403|  11.3k|    let mut with_after = false;
  404|  11.3k|    if let Some(v) = value.strip_prefix(b".") {
  405|  1.29k|        value = v;
  406|  2.50k|        while value.first().map_or(false, u8::is_ascii_digit) {
  407|  1.21k|            value = &value[1..];
  408|  1.21k|            with_after = true;
  409|  1.21k|        }
  410|  10.0k|    }
  411|  11.3k|    if let Some(v) = value.strip_prefix(b"e") {
  412|  9.68k|        value = v;
  413|  9.68k|    } else if let Some(v) = value.strip_prefix(b"E") {
  414|  1.22k|        value = v;
  415|  1.22k|    } else {
  416|    433|        return false;
  417|       |    }
  418|  10.9k|    if let Some(v) = value.strip_prefix(b"+") {
  419|     94|        value = v;
  420|  10.8k|    } else if let Some(v) = value.strip_prefix(b"-") {
  421|      2|        value = v;
  422|  10.8k|    }
  423|  10.9k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  424|  11.3k|}
_RNvMs4_NtCs3T8ZGKOaOq8_10sparesults3csvNtB5_10LineReader3new:
  571|  4.64k|    fn new() -> Self {
  572|  4.64k|        Self {
  573|  4.64k|            buffer_start: 0,
  574|  4.64k|            buffer_end: 0,
  575|  4.64k|            line_count: 0,
  576|  4.64k|            last_line_start: 0,
  577|  4.64k|            last_line_end: 0,
  578|  4.64k|        }
  579|  4.64k|    }

_RINvMs5_NtCs3T8ZGKOaOq8_10sparesults5errorNtB6_11SyntaxError15located_messageNtNtCscRF9HjKHVNj_5alloc6string6StringECseiOrYpwGuRQ_13oxigraph_fuzz:
  119|    115|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
  120|    115|        Self {
  121|    115|            inner: SyntaxErrorKind::Msg {
  122|    115|                msg: msg.into(),
  123|    115|                location: Some(location),
  124|    115|            },
  125|    115|        }
  126|    115|    }
_RINvMs5_NtCs3T8ZGKOaOq8_10sparesults5errorNtB6_11SyntaxError3msgNtNtCscRF9HjKHVNj_5alloc6string6StringECseiOrYpwGuRQ_13oxigraph_fuzz:
  108|    104|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    104|        Self {
  110|    104|            inner: SyntaxErrorKind::Msg {
  111|    104|                msg: msg.into(),
  112|    104|                location: None,
  113|    104|            },
  114|    104|        }
  115|    104|    }
_RINvMs5_NtCs3T8ZGKOaOq8_10sparesults5errorNtB6_11SyntaxError3msgReECseiOrYpwGuRQ_13oxigraph_fuzz:
  108|     53|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|     53|        Self {
  110|     53|            inner: SyntaxErrorKind::Msg {
  111|     53|                msg: msg.into(),
  112|     53|                location: None,
  113|     53|            },
  114|     53|        }
  115|     53|    }
_RNvXs0_NtCs3T8ZGKOaOq8_10sparesults5errorNtB5_10ParseErrorINtNtCslpNE8qEaggm_4core7convert4FromNtNtNtCsfxToMQ2wmye_3std2io5error5ErrorE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
   38|     14|    fn from(error: io::Error) -> Self {
   39|     14|        Self::Io(error)
   40|     14|    }
_RNvXs1_NtCs3T8ZGKOaOq8_10sparesults5errorNtB5_10ParseErrorINtNtCslpNE8qEaggm_4core7convert4FromNtB5_11SyntaxErrorE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
   45|  1.13k|    fn from(error: SyntaxError) -> Self {
   46|  1.13k|        Self::Syntax(error)
   47|  1.13k|    }
_RNvXs1_NtCs3T8ZGKOaOq8_10sparesults5errorNtB5_10ParseErrorINtNtCslpNE8qEaggm_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|    176|    fn from(error: SyntaxError) -> Self {
   46|    176|        Self::Syntax(error)
   47|    176|    }

_RNvMNtCs3T8ZGKOaOq8_10sparesults6parserNtB2_18QueryResultsParser11from_formatCseiOrYpwGuRQ_13oxigraph_fuzz:
   44|  2.98k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|  2.98k|        Self { format }
   46|  2.98k|    }
_RINvMNtCs3T8ZGKOaOq8_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECseiOrYpwGuRQ_13oxigraph_fuzz:
   73|  4.64k|    pub fn parse_read<R: Read>(
   74|  4.64k|        &self,
   75|  4.64k|        reader: R,
   76|  4.64k|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|  4.64k|        Ok(match self.format {
   78|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      0|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: SolutionsReaderKind::Json(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|  4.64k|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      4|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|  4.48k|                    solutions,
  103|  4.48k|                    variables,
  104|  4.48k|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|  4.48k|                    variables: variables.into(),
  106|  4.48k|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|  4.48k|                }),
  108|       |            },
  109|       |        })
  110|  4.64k|    }
_RNCNvXs1_NtCs3T8ZGKOaOq8_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCslpNE8qEaggm_4core4iter6traits8iterator8Iterator4next0CseiOrYpwGuRQ_13oxigraph_fuzz:
  239|  98.1k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RNvXs1_NtCs3T8ZGKOaOq8_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCslpNE8qEaggm_4core4iter6traits8iterator8Iterator4nextCseiOrYpwGuRQ_13oxigraph_fuzz:
  231|   102k|    fn next(&mut self) -> Option<Self::Item> {
  232|   102k|        Some(
  233|   102k|            match &mut self.solutions {
  234|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  235|      0|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  236|   102k|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  237|       |            }
  238|   102k|            .transpose()?
  239|  99.2k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  240|       |        )
  241|   102k|    }

_RINvMNtCs3T8ZGKOaOq8_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCscRF9HjKHVNj_5alloc3vec3VechEECseiOrYpwGuRQ_13oxigraph_fuzz:
   71|      2|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      2|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      0|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      2|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      2|    }
_RINvMNtCs3T8ZGKOaOq8_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCscRF9HjKHVNj_5alloc3vec3VechEECseiOrYpwGuRQ_13oxigraph_fuzz:
  140|  1.66k|    pub fn serialize_solutions_to_write<W: Write>(
  141|  1.66k|        &self,
  142|  1.66k|        write: W,
  143|  1.66k|        variables: Vec<Variable>,
  144|  1.66k|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  145|  1.66k|        Ok(ToWriteSolutionsWriter {
  146|  1.66k|            formatter: match self.format {
  147|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  148|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  149|       |                ),
  150|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  151|      0|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  152|       |                ),
  153|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  154|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  155|       |                ),
  156|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  157|  1.66k|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  158|       |                ),
  159|       |            },
  160|       |        })
  161|  1.66k|    }
_RINvMs0_NtCs3T8ZGKOaOq8_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE5writeRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECseiOrYpwGuRQ_13oxigraph_fuzz:
  295|  47.7k|    pub fn write<'a>(
  296|  47.7k|        &mut self,
  297|  47.7k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  298|  47.7k|    ) -> io::Result<()> {
  299|  47.7k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  300|  47.7k|        match &mut self.formatter {
  301|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  302|      0|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  303|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  304|  47.7k|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  305|       |        }
  306|  47.7k|    }
_RNCINvMs0_NtCs3T8ZGKOaOq8_10sparesults10serializerINtB8_22ToWriteSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE5writeRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableRNtNtB21_6triple4TermRNtNtBa_8solution13QuerySolutionE0CseiOrYpwGuRQ_13oxigraph_fuzz:
  299|  31.9k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RNvMs0_NtCs3T8ZGKOaOq8_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCscRF9HjKHVNj_5alloc3vec3VechEE6finishCseiOrYpwGuRQ_13oxigraph_fuzz:
  309|  1.66k|    pub fn finish(self) -> io::Result<W> {
  310|  1.66k|        match self.formatter {
  311|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  312|      0|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  313|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  314|  1.66k|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  315|       |        }
  316|  1.66k|    }
_RNvMNtCs3T8ZGKOaOq8_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCseiOrYpwGuRQ_13oxigraph_fuzz:
   55|  2.98k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  2.98k|        Self { format }
   57|  2.98k|    }

_RNvMNtCs3T8ZGKOaOq8_10sparesults8solutionNtB2_13QuerySolution9variablesCseiOrYpwGuRQ_13oxigraph_fuzz:
  158|  1.60k|    pub fn variables(&self) -> &[Variable] {
  159|  1.60k|        &self.variables
  160|  1.60k|    }
_RNvXs0_NtCs3T8ZGKOaOq8_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCslpNE8qEaggm_4core4iter6traits7collect12IntoIterator9into_iterCseiOrYpwGuRQ_13oxigraph_fuzz:
  178|  47.7k|    fn into_iter(self) -> Self::IntoIter {
  179|  47.7k|        Iter {
  180|  47.7k|            inner: self.variables.iter().zip(&self.values),
  181|  47.7k|        }
  182|  47.7k|    }
_RNvXs9_NtCs3T8ZGKOaOq8_10sparesults8solutionNtB5_4IterNtNtNtNtCslpNE8qEaggm_4core4iter6traits8iterator8Iterator4nextCseiOrYpwGuRQ_13oxigraph_fuzz:
  285|  79.7k|    fn next(&mut self) -> Option<Self::Item> {
  286|  95.7k|        for (variable, value) in &mut self.inner {
  287|  48.0k|            if let Some(value) = value {
  288|  31.9k|                return Some((variable, value));
  289|  16.0k|            }
  290|       |        }
  291|  47.7k|        None
  292|  79.7k|    }
_RNvXs_NtCs3T8ZGKOaOq8_10sparesults8solutionNtB4_13QuerySolutionINtNtCslpNE8qEaggm_4core7convert4FromTINtNtCscRF9HjKHVNj_5alloc4sync3ArcSNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCseiOrYpwGuRQ_13oxigraph_fuzz:
  165|  98.1k|    fn from((v, s): (V, S)) -> Self {
  166|  98.1k|        Self {
  167|  98.1k|            variables: v.into(),
  168|  98.1k|            values: s.into(),
  169|  98.1k|        }
  170|  98.1k|    }
_RNvMNtCs3T8ZGKOaOq8_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  95.5k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  95.5k|        self.into_iter()
  114|  95.5k|    }
_RNvXs0_NtCs3T8ZGKOaOq8_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCslpNE8qEaggm_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  95.5k|    fn into_iter(self) -> Self::IntoIter {
  179|  95.5k|        Iter {
  180|  95.5k|            inner: self.variables.iter().zip(&self.values),
  181|  95.5k|        }
  182|  95.5k|    }
_RNvXs6_NtCs3T8ZGKOaOq8_10sparesults8solutionNtB5_13QuerySolutionNtNtCslpNE8qEaggm_4core3cmp9PartialEq2eq:
  236|  47.7k|    fn eq(&self, other: &Self) -> bool {
  237|  47.7k|        for (k, v) in self.iter() {
  238|  31.9k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|  31.9k|            }
  241|       |        }
  242|  47.7k|        for (k, v) in other.iter() {
  243|  31.9k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|  31.9k|            }
  246|       |        }
  247|  47.7k|        true
  248|  47.7k|    }
_RNvXs9_NtCs3T8ZGKOaOq8_10sparesults8solutionNtB5_4IterNtNtNtNtCslpNE8qEaggm_4core4iter6traits8iterator8Iterator4nextB7_:
  285|   159k|    fn next(&mut self) -> Option<Self::Item> {
  286|   191k|        for (variable, value) in &mut self.inner {
  287|  96.0k|            if let Some(value) = value {
  288|  63.9k|                return Some((variable, value));
  289|  32.0k|            }
  290|       |        }
  291|  95.5k|        None
  292|   159k|    }
_RINvMNtCs3T8ZGKOaOq8_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableEB5_:
   38|  63.9k|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|  63.9k|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|  63.9k|    }
_RNCNvXsc_NtCs3T8ZGKOaOq8_10sparesults8solutionNtNtCsf6Xgyyebb1E_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|  64.7k|        solution.variables.iter().position(|v| *v == self)
_RNvXsc_NtCs3T8ZGKOaOq8_10sparesults8solutionNtNtCsf6Xgyyebb1E_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|  63.9k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|  63.9k|        solution.variables.iter().position(|v| *v == self)
  325|  63.9k|    }
_RNvXsd_NtCs3T8ZGKOaOq8_10sparesults8solutionRNtNtCsf6Xgyyebb1E_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|  63.9k|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|  63.9k|        self.as_ref().index(solution)
  332|  63.9k|    }


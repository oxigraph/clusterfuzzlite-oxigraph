












_RNvNtCs1oqlX1d5HEl_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  13.5k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  13.5k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|    217|        return;
    9|       |    };
   10|  13.3k|    match reader {
   11|  13.3k|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|  13.3k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|  4.35k|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|  9.01k|            let mut writer = QueryResultsSerializer::from_format(format)
   18|  9.01k|                .serialize_solutions_to_write(
   19|  9.01k|                    Vec::new(),
   20|  9.01k|                    solutions
   21|  9.01k|                        .first()
   22|  9.01k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|  9.01k|                )
   24|  9.01k|                .unwrap();
   25|   842k|            for solution in &solutions {
   26|   833k|                writer.write(solution).unwrap();
   27|   833k|            }
   28|  9.01k|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|  9.01k|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|  9.01k|                QueryResultsParser::from_format(format)
   33|  9.01k|                    .parse_slice(&serialized)
   34|  9.01k|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|  9.01k|                    .unwrap()
   36|       |            {
   37|  9.01k|                assert_eq!(
   38|  9.01k|                    roundtrip_solutions
   39|  9.01k|                        .collect::<Result<Vec<_>, _>>()
   40|  9.01k|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|  9.01k|                        .unwrap(),
   42|  9.01k|                    solutions
   43|  9.01k|                )
   44|      0|            }
   45|       |        }
   46|      7|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      7|            // We try to write again
   48|      7|            let mut serialized = Vec::new();
   49|      7|            QueryResultsSerializer::from_format(format)
   50|      7|                .serialize_boolean_to_write(&mut serialized, value)
   51|      7|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      7|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      7|                QueryResultsParser::from_format(format)
   56|      7|                    .parse_slice(&serialized)
   57|      7|                    .unwrap()
   58|       |            {
   59|      7|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  13.5k|}
_RNCNvNtCs1oqlX1d5HEl_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|  8.95k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB2_9BlankNode6as_refCs1oqlX1d5HEl_13oxigraph_fuzz:
   88|   117k|    pub fn as_ref(&self) -> BlankNodeRef<'_> {
   89|   117k|        BlankNodeRef(match &self.0 {
   90|  41.8k|            BlankNodeContent::Named(id) => BlankNodeRefContent::Named(id.as_str()),
   91|  75.3k|            BlankNodeContent::Anonymous { id, str } => BlankNodeRefContent::Anonymous {
   92|  75.3k|                id: *id,
   93|  75.3k|                str: str.as_str(),
   94|  75.3k|            },
   95|       |        })
   96|   117k|    }
_RNvMs1_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_12BlankNodeRef6as_strCs1oqlX1d5HEl_13oxigraph_fuzz:
  179|   117k|    pub const fn as_str(self) -> &'a str {
  180|   117k|        match self.0 {
  181|  41.8k|            BlankNodeRefContent::Named(id) => id,
  182|  75.3k|            BlankNodeRefContent::Anonymous { str, .. } => str,
  183|       |        }
  184|   117k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs1oqlX1d5HEl_13oxigraph_fuzz:
  265|  75.3k|    fn as_str(&self) -> &str {
  266|  75.3k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  75.3k|        str::from_utf8(&self.0[..len]).unwrap()
  268|  75.3k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idB4_:
   62|   152k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|   152k|        Self(BlankNodeContent::Anonymous {
   64|   152k|            id: id.to_ne_bytes(),
   65|   152k|            str: IdStr::new(id),
   66|   152k|        })
   67|   152k|    }
_RNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB5_5IdStr3newB7_:
  258|   152k|    fn new(id: u128) -> Self {
  259|   152k|        let mut str = [0; 32];
  260|   152k|        write!(&mut str[..], "{id:x}").unwrap();
  261|   152k|        Self(str)
  262|   152k|    }
_RNvNtCskZUKzdIRemu_5oxrdf10blank_node30validate_blank_node_identifier:
  271|   237k|fn validate_blank_node_identifier(id: &str) -> Result<(), BlankNodeIdParseError> {
  272|   237k|    let mut chars = id.chars();
  273|   237k|    let front = chars.next().ok_or(BlankNodeIdParseError)?;
  274|   237k|    match front {
  275|   237k|        '0'..='9'
  276|       |        | '_'
  277|       |        | ':'
  278|  40.4k|        | 'A'..='Z'
  279|  32.8k|        | 'a'..='z'
  280|  14.8k|        | '\u{00C0}'..='\u{00D6}'
  281|  14.8k|        | '\u{00D8}'..='\u{00F6}'
  282|  14.8k|        | '\u{00F8}'..='\u{02FF}'
  283|  14.7k|        | '\u{0370}'..='\u{037D}'
  284|  14.7k|        | '\u{037F}'..='\u{1FFF}'
  285|  5.37k|        | '\u{200C}'..='\u{200D}'
  286|  5.37k|        | '\u{2070}'..='\u{218F}'
  287|  5.29k|        | '\u{2C00}'..='\u{2FEF}'
  288|  5.29k|        | '\u{3001}'..='\u{D7FF}'
  289|  5.11k|        | '\u{F900}'..='\u{FDCF}'
  290|  5.11k|        | '\u{FDF0}'..='\u{FFFD}'
  291|   237k|        | '\u{10000}'..='\u{EFFFF}' => (),
  292|      4|        _ => return Err(BlankNodeIdParseError),
  293|       |    }
  294|  2.52M|    for c in chars {
  295|  2.28M|        match c {
  296|       |            '.' // validated later
  297|       |            | '-'
  298|  2.24M|            | '0'..='9'
  299|       |            | '\u{00B7}'
  300|  21.9k|            | '\u{0300}'..='\u{036F}'
  301|  8.29k|            | '\u{203F}'..='\u{2040}'
  302|       |            | '_'
  303|       |            | ':'
  304|   276k|            | 'A'..='Z'
  305|   182k|            | 'a'..='z'
  306|  22.0k|            | '\u{00C0}'..='\u{00D6}'
  307|  22.0k|            | '\u{00D8}'..='\u{00F6}'
  308|  22.0k|            | '\u{00F8}'..='\u{02FF}'
  309|  21.9k|            | '\u{0370}'..='\u{037D}'
  310|  21.9k|            | '\u{037F}'..='\u{1FFF}'
  311|  8.29k|            | '\u{200C}'..='\u{200D}'
  312|  8.29k|            | '\u{2070}'..='\u{218F}'
  313|  8.20k|            | '\u{2C00}'..='\u{2FEF}'
  314|  8.20k|            | '\u{3001}'..='\u{D7FF}'
  315|  7.96k|            | '\u{F900}'..='\u{FDCF}'
  316|  7.96k|            | '\u{FDF0}'..='\u{FFFD}'
  317|  2.28M|            | '\u{10000}'..='\u{EFFFF}' => (),
  318|      9|            _ => return Err(BlankNodeIdParseError),
  319|       |        }
  320|       |    }
  321|       |
  322|       |    // Could not end with a dot
  323|   237k|    if id.ends_with('.') {
  324|      5|        Err(BlankNodeIdParseError)
  325|       |    } else {
  326|   237k|        Ok(())
  327|       |    }
  328|   237k|}
_RNvNtCskZUKzdIRemu_5oxrdf10blank_node13to_integer_idB3_:
  331|   237k|fn to_integer_id(id: &str) -> Option<u128> {
  332|   237k|    let digits = id.as_bytes();
  333|   237k|    let mut value: u128 = 0;
  334|   237k|    if let None | Some(b'0') = digits.first() {
  335|  12.7k|        return None; // No empty string or leading zeros
  336|   225k|    }
  337|  2.46M|    for digit in digits {
  338|  2.31M|        value = value.checked_mul(16)?.checked_add(
  339|  2.31M|            match *digit {
  340|  2.31M|                b'0'..=b'9' => digit - b'0',
  341|   187k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  68.5k|                _ => return None,
  343|       |            }
  344|  2.24M|            .into(),
  345|      0|        )?;
  346|       |    }
  347|   152k|    Some(value)
  348|   237k|}
_RINvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB3_9BlankNode3newReEB5_:
   36|   237k|    pub fn new(id: impl Into<String>) -> Result<Self, BlankNodeIdParseError> {
   37|   237k|        let id = id.into();
   38|   237k|        validate_blank_node_identifier(&id)?;
   39|   237k|        Ok(Self::new_unchecked(id))
   40|   237k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   49|   237k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|   237k|        let id = id.into();
   51|   237k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|   152k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  85.5k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|   237k|    }
_RNCNvMs7_NtCskZUKzdIRemu_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|  1.11M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvMNtCskZUKzdIRemu_5oxrdf7literalNtB2_7Literal6as_refCs1oqlX1d5HEl_13oxigraph_fuzz:
  129|   435k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|   435k|        LiteralRef(match &self.0 {
  131|  10.9k|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  65.6k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  65.6k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|   358k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|   358k|                value,
  137|   358k|                datatype: datatype.as_ref(),
  138|   358k|            },
  139|       |        })
  140|   435k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef5valueCs1oqlX1d5HEl_13oxigraph_fuzz:
  488|   435k|    pub const fn value(self) -> &'a str {
  489|   435k|        match self.0 {
  490|  10.9k|            LiteralRefContent::String(value)
  491|  65.6k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|   435k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|   435k|        }
  494|   435k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8datatypeCs1oqlX1d5HEl_13oxigraph_fuzz:
  513|   369k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|   369k|        match self.0 {
  515|  10.9k|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|   358k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|   369k|    }
_RNvMst_NtCskZUKzdIRemu_5oxrdf7literalNtB5_10LiteralRef8languageCs1oqlX1d5HEl_13oxigraph_fuzz:
  501|   435k|    pub const fn language(self) -> Option<&'a str> {
  502|   435k|        match self.0 {
  503|  65.6k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|   369k|            _ => None,
  505|       |        }
  506|   435k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  21.8k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  21.8k|        Self(LiteralContent::String(value.into()))
   49|  21.8k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|   224k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   224k|        let value = value.into();
   55|   224k|        let datatype = datatype.into();
   56|   224k|        Self(if datatype == xsd::STRING {
   57|    730|            LiteralContent::String(value)
   58|       |        } else {
   59|   223k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   224k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   523k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   523k|        let value = value.into();
   55|   523k|        let datatype = datatype.into();
   56|   523k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   523k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   523k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal27new_language_tagged_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringReEB5_:
   65|   150k|    pub fn new_language_tagged_literal(
   66|   150k|        value: impl Into<String>,
   67|   150k|        language: impl Into<String>,
   68|   150k|    ) -> Result<Self, LanguageTagParseError> {
   69|   150k|        let mut language = language.into();
   70|   150k|        language.make_ascii_lowercase();
   71|   150k|        Ok(Self::new_language_tagged_literal_unchecked(
   72|   150k|            value,
   73|   150k|            LanguageTag::parse(language)?.into_inner(),
   74|       |        ))
   75|   150k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|   150k|    pub fn new_language_tagged_literal_unchecked(
   86|   150k|        value: impl Into<String>,
   87|   150k|        language: impl Into<String>,
   88|   150k|    ) -> Self {
   89|   150k|        Self(LiteralContent::LanguageTaggedString {
   90|   150k|            value: value.into(),
   91|   150k|            language: language.into(),
   92|   150k|        })
   93|   150k|    }

_RNvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs1oqlX1d5HEl_13oxigraph_fuzz:
   54|   477k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   477k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   477k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs1oqlX1d5HEl_13oxigraph_fuzz:
  128|   477k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   477k|        Self { iri }
  130|   477k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCs1oqlX1d5HEl_13oxigraph_fuzz:
  133|   318k|    pub const fn as_str(self) -> &'a str {
  134|   318k|        self.iri
  135|   318k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|   523k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|   523k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|   523k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   522k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   522k|        Self { iri: iri.into() }
   41|   522k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   523k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   523k|        Self { iri: iri.into() }
   41|   523k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|   522k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|   522k|        Self::new_unchecked(iri.into_inner())
   31|   522k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   748k|    pub fn as_str(&self) -> &str {
   45|   748k|        self.iri.as_str()
   46|   748k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   748k|    pub const fn as_str(self) -> &'a str {
  134|   748k|        self.iri
  135|   748k|    }
_RNvMs4_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   523k|    pub fn into_owned(self) -> NamedNode {
  139|   523k|        NamedNode::new_unchecked(self.iri)
  140|   523k|    }
_RNvXs6_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   523k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   523k|        node.into_owned()
  154|   523k|    }
_RNvXs9_NtCskZUKzdIRemu_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   748k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   748k|        self.as_str() == other.as_str()
  175|   748k|    }

_RNvXs2_NtCskZUKzdIRemu_5oxrdf6parserNtNtB7_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  153|  19.9k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  154|  19.9k|        if !s.starts_with('?') && !s.starts_with('$') {
  155|    111|            return Err(Self::Err::msg(
  156|    111|                "Variable serialization should start with ? or $",
  157|    111|            ));
  158|  19.8k|        }
  159|  19.8k|        Self::new(&s[1..]).map_err(|error| {
  160|       |            TermParseError(TermParseErrorKind::Variable {
  161|       |                value: s.to_owned(),
  162|       |                error,
  163|       |            })
  164|  19.8k|        })
  165|  19.9k|    }
_RNvNtCskZUKzdIRemu_5oxrdf6parser15read_named_node:
  168|   523k|fn read_named_node(s: &str) -> Result<(NamedNode, &str), TermParseError> {
  169|   523k|    let s = s.trim();
  170|   523k|    if let Some(remain) = s.strip_prefix('<') {
  171|   523k|        let end = remain
  172|   523k|            .find('>')
  173|   523k|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
  174|   523k|        let (value, remain) = remain.split_at(end);
  175|   523k|        let remain = &remain[1..];
  176|   523k|        let term = NamedNode::new(value).map_err(|error| {
  177|       |            TermParseError(TermParseErrorKind::Iri {
  178|       |                value: value.to_owned(),
  179|       |                error,
  180|       |            })
  181|   523k|        })?;
  182|   522k|        Ok((term, remain))
  183|       |    } else {
  184|    176|        Err(TermParseError::msg(
  185|    176|            "Named node serialization should start with a <",
  186|    176|        ))
  187|       |    }
  188|   523k|}
_RNvNtCskZUKzdIRemu_5oxrdf6parser15read_blank_node:
  190|   237k|fn read_blank_node(s: &str) -> Result<(BlankNode, &str), TermParseError> {
  191|   237k|    let s = s.trim();
  192|   237k|    if let Some(remain) = s.strip_prefix("_:") {
  193|   237k|        let end = remain
  194|   237k|            .find(|v: char| {
  195|       |                v.is_whitespace()
  196|       |                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  197|   237k|            })
  198|   237k|            .unwrap_or(remain.len());
  199|   237k|        let (value, remain) = remain.split_at(end);
  200|   237k|        let term = BlankNode::new(value).map_err(|error| {
  201|       |            TermParseError(TermParseErrorKind::BlankNode {
  202|       |                value: value.to_owned(),
  203|       |                error,
  204|       |            })
  205|   237k|        })?;
  206|   237k|        Ok((term, remain))
  207|       |    } else {
  208|     19|        Err(TermParseError::msg(
  209|     19|            "Blank node serialization should start with '_:'",
  210|     19|        ))
  211|       |    }
  212|   237k|}
_RNvNtCskZUKzdIRemu_5oxrdf6parser12read_literal:
  214|   921k|fn read_literal(s: &str) -> Result<(Literal, &str), TermParseError> {
  215|   921k|    let s = s.trim();
  216|   921k|    if let Some(s) = s.strip_prefix('"') {
  217|   397k|        let mut value = String::with_capacity(s.len());
  218|   397k|        let mut chars = s.chars();
  219|  3.73M|        while let Some(c) = chars.next() {
  220|  3.73M|            match c {
  221|       |                '"' => {
  222|   397k|                    let remain = chars.as_str();
  223|   397k|                    return if let Some(remain) = remain.strip_prefix('@') {
  224|   150k|                        let end = remain
  225|   150k|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
  226|   150k|                            .unwrap_or(remain.len());
  227|   150k|                        let (language, remain) = remain.split_at(end);
  228|   150k|                        Ok((
  229|   150k|                            Literal::new_language_tagged_literal(value, language).map_err(
  230|   150k|                                |error| {
  231|       |                                    TermParseError(TermParseErrorKind::LanguageTag {
  232|       |                                        value: language.to_owned(),
  233|       |                                        error,
  234|       |                                    })
  235|   150k|                                },
  236|   150k|                            )?,
  237|   150k|                            remain,
  238|       |                        ))
  239|   246k|                    } else if let Some(remain) = remain.strip_prefix("^^") {
  240|   224k|                        let (datatype, remain) = read_named_node(remain)?;
  241|   224k|                        Ok((Literal::new_typed_literal(value, datatype), remain))
  242|       |                    } else {
  243|  21.8k|                        Ok((Literal::new_simple_literal(value), remain))
  244|       |                    };
  245|       |                }
  246|       |                '\\' => {
  247|  78.3k|                    if let Some(c) = chars.next() {
  248|  78.3k|                        value.push(match c {
  249|  3.84k|                            't' => '\t',
  250|  3.26k|                            'b' => '\u{08}',
  251|  8.42k|                            'n' => '\n',
  252|  6.45k|                            'r' => '\r',
  253|  3.29k|                            'f' => '\u{0C}',
  254|  13.8k|                            '"' => '"',
  255|    706|                            '\'' => '\'',
  256|  22.0k|                            '\\' => '\\',
  257|  13.4k|                            'u' => read_hexa_char(&mut chars, 4)?,
  258|  3.04k|                            'U' => read_hexa_char(&mut chars, 8)?,
  259|     30|                            _ => return Err(TermParseError::msg("Unexpected escaped char")),
  260|       |                        })
  261|       |                    } else {
  262|      6|                        return Err(TermParseError::msg("Unexpected literal end"));
  263|       |                    }
  264|       |                }
  265|  3.25M|                _ => value.push(c),
  266|       |            }
  267|       |        }
  268|    115|        Err(TermParseError::msg("Unexpected literal end"))
  269|   524k|    } else if let Some(remain) = s.strip_prefix("true") {
  270|  17.5k|        Ok((Literal::new_typed_literal("true", xsd::BOOLEAN), remain))
  271|   506k|    } else if let Some(remain) = s.strip_prefix("false") {
  272|  17.1k|        Ok((Literal::new_typed_literal("false", xsd::BOOLEAN), remain))
  273|       |    } else {
  274|   489k|        let input = s.as_bytes();
  275|   489k|        if input.is_empty() {
  276|    151|            return Err(TermParseError::msg("Empty term serialization"));
  277|   489k|        }
  278|       |
  279|   489k|        let mut cursor = match input.first() {
  280|  85.7k|            Some(b'+' | b'-') => 1,
  281|   403k|            _ => 0,
  282|       |        };
  283|   489k|        let mut with_dot = false;
  284|   489k|
  285|   489k|        let mut count_before: usize = 0;
  286|  1.21M|        while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  287|   728k|            count_before += 1;
  288|   728k|            cursor += 1;
  289|   728k|        }
  290|       |
  291|   489k|        let mut count_after: usize = 0;
  292|   489k|        if cursor < input.len() && input[cursor] == b'.' {
  293|   148k|            with_dot = true;
  294|   148k|            cursor += 1;
  295|   391k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  296|   243k|                count_after += 1;
  297|   243k|                cursor += 1;
  298|   243k|            }
  299|   341k|        }
  300|       |
  301|   489k|        if cursor < input.len() && (input[cursor] == b'e' || input[cursor] == b'E') {
  302|   190k|            cursor += 1;
  303|   190k|            cursor += match input.get(cursor) {
  304|  2.62k|                Some(b'+' | b'-') => 1,
  305|   187k|                _ => 0,
  306|       |            };
  307|   190k|            let mut count_exponent = 0;
  308|   605k|            while cursor < input.len() && b'0' <= input[cursor] && input[cursor] <= b'9' {
  309|   415k|                count_exponent += 1;
  310|   415k|                cursor += 1;
  311|   415k|            }
  312|   190k|            if count_exponent > 0 {
  313|   190k|                Ok((Literal::new_typed_literal(s, xsd::DOUBLE), &s[cursor..]))
  314|       |            } else {
  315|     11|                Err(TermParseError::msg(
  316|     11|                    "Double serialization with an invalid exponent",
  317|     11|                ))
  318|       |            }
  319|   299k|        } else if with_dot {
  320|   105k|            if count_after > 0 {
  321|   105k|                Ok((Literal::new_typed_literal(s, xsd::DECIMAL), &s[cursor..]))
  322|       |            } else {
  323|     62|                Err(TermParseError::msg(
  324|     62|                    "Decimal serialization without floating part",
  325|     62|                ))
  326|       |            }
  327|   194k|        } else if count_before > 0 {
  328|   193k|            Ok((Literal::new_typed_literal(s, xsd::INTEGER), &s[cursor..]))
  329|       |        } else {
  330|    301|            Err(TermParseError::msg("Empty integer serialization"))
  331|       |        }
  332|       |    }
  333|   921k|}
_RNvNtCskZUKzdIRemu_5oxrdf6parser9read_term:
  335|  1.48M|fn read_term(s: &str, number_of_recursive_calls: usize) -> Result<(Term, &str), TermParseError> {
  336|  1.48M|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  337|      4|        return Err(TermParseError::msg(
  338|      4|            "Too many nested triples. The parser fails here to avoid a stack overflow.",
  339|      4|        ));
  340|  1.48M|    }
  341|  1.48M|    let s = s.trim();
  342|       |    #[allow(unused_variables)]
  343|  1.48M|    if let Some(remain) = s.strip_prefix("<<") {
  344|       |        #[cfg(feature = "rdf-star")]
  345|       |        {
  346|   156k|            let (subject, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  347|   128k|            let (predicate, remain) = read_named_node(remain)?;
  348|   128k|            let (object, remain) = read_term(remain, number_of_recursive_calls + 1)?;
  349|   108k|            let remain = remain.trim_start();
  350|   108k|            if let Some(remain) = remain.strip_prefix(">>") {
  351|       |                Ok((
  352|       |                    Triple {
  353|   108k|                        subject: match subject {
  354|  45.4k|                            Term::NamedNode(s) => s.into(),
  355|  17.9k|                            Term::BlankNode(s) => s.into(),
  356|       |                            Term::Literal(_) => {
  357|      1|                                return Err(TermParseError::msg(
  358|      1|                                    "Literals are not allowed in subject position",
  359|      1|                                ));
  360|       |                            }
  361|  44.6k|                            Term::Triple(s) => Subject::Triple(s),
  362|       |                        },
  363|   108k|                        predicate,
  364|   108k|                        object,
  365|   108k|                    }
  366|   108k|                    .into(),
  367|   108k|                    remain,
  368|       |                ))
  369|       |            } else {
  370|    947|                Err(TermParseError::msg(
  371|    947|                    "Nested triple serialization should be enclosed between << and >>",
  372|    947|                ))
  373|       |            }
  374|       |        }
  375|       |        #[cfg(not(feature = "rdf-star"))]
  376|       |        {
  377|       |            Err(TermParseError::msg("RDF-star is not supported"))
  378|       |        }
  379|  1.33M|    } else if s.starts_with('<') {
  380|   170k|        let (term, remain) = read_named_node(s)?;
  381|   169k|        Ok((term.into(), remain))
  382|  1.15M|    } else if s.starts_with('_') {
  383|   237k|        let (term, remain) = read_blank_node(s)?;
  384|   237k|        Ok((term.into(), remain))
  385|       |    } else {
  386|   921k|        let (term, remain) = read_literal(s)?;
  387|   920k|        Ok((term.into(), remain))
  388|       |    }
  389|  1.48M|}
_RNvNtCskZUKzdIRemu_5oxrdf6parser14read_hexa_char:
  391|  16.4k|fn read_hexa_char(input: &mut Chars<'_>, len: usize) -> Result<char, TermParseError> {
  392|  16.4k|    let mut value = 0;
  393|  16.4k|    for _ in 0..len {
  394|  77.8k|        if let Some(c) = input.next() {
  395|  77.7k|            value = value * 16
  396|  77.7k|                + match c {
  397|  77.6k|                    '0'..='9' => u32::from(c) - u32::from('0'),
  398|  14.5k|                    'a'..='f' => u32::from(c) - u32::from('a') + 10,
  399|  11.4k|                    'A'..='F' => u32::from(c) - u32::from('A') + 10,
  400|       |                    _ => {
  401|    108|                        return Err(TermParseError::msg(
  402|    108|                            "Unexpected character in a unicode escape",
  403|    108|                        ));
  404|       |                    }
  405|       |                }
  406|       |        } else {
  407|     58|            return Err(TermParseError::msg("Unexpected literal string end"));
  408|       |        }
  409|       |    }
  410|  16.3k|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))
  411|  16.4k|}
_RNvMs3_NtCskZUKzdIRemu_5oxrdf6parserNtB5_14TermParseError3msg:
  443|  2.91k|    pub(crate) fn msg(msg: &'static str) -> Self {
  444|  2.91k|        Self(TermParseErrorKind::Msg(msg))
  445|  2.91k|    }
_RNvXs6_NtCskZUKzdIRemu_5oxrdf6parserNtB5_14TermParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  414|    128|#[derive(Debug, thiserror::Error)]
_RNvXsa_NtCskZUKzdIRemu_5oxrdf6parserNtB5_18TermParseErrorKindNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  419|    128|#[derive(Debug, thiserror::Error)]
_RNvXs1_NtCskZUKzdIRemu_5oxrdf6parserNtNtB7_6triple4TermNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str:
  130|  1.20M|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  131|  1.20M|        let (term, left) = read_term(s, 0)?;
  132|  1.19M|        if !left.is_empty() {
  133|    357|            return Err(Self::Err::msg("Invalid term serialization"));
  134|  1.19M|        }
  135|  1.19M|        Ok(term)
  136|  1.20M|    }
_RNCNvXs2_NtCskZUKzdIRemu_5oxrdf6parserNtNtB9_8variable8VariableNtNtNtCscdEvteftVc2_4core3str6traits7FromStr8from_str0B9_:
  159|     17|        Self::new(&s[1..]).map_err(|error| {
  160|     17|            TermParseError(TermParseErrorKind::Variable {
  161|     17|                value: s.to_owned(),
  162|     17|                error,
  163|     17|            })
  164|     17|        })
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser15read_named_node0B5_:
  173|    430|            .ok_or_else(|| TermParseError::msg("Named node serialization should end with a >"))?;
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser15read_named_nodes_0B5_:
  176|    962|        let term = NamedNode::new(value).map_err(|error| {
  177|    962|            TermParseError(TermParseErrorKind::Iri {
  178|    962|                value: value.to_owned(),
  179|    962|                error,
  180|    962|            })
  181|    962|        })?;
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser15read_blank_node0B5_:
  194|  2.55M|            .find(|v: char| {
  195|  2.55M|                v.is_whitespace()
  196|  2.54M|                    || matches!(v, '<' | '_' | '?' | '$' | '"' | '\'' | '>' | '@' | '^')
  197|  2.55M|            })
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser15read_blank_nodes_0B5_:
  200|    100|        let term = BlankNode::new(value).map_err(|error| {
  201|    100|            TermParseError(TermParseErrorKind::BlankNode {
  202|    100|                value: value.to_owned(),
  203|    100|                error,
  204|    100|            })
  205|    100|        })?;
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser12read_literal0B5_:
  225|  1.41M|                            .find(|v| !matches!(v, 'a'..='z' | 'A'..='Z' | '-'))
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser12read_literals_0B5_:
  230|    193|                                |error| {
  231|    193|                                    TermParseError(TermParseErrorKind::LanguageTag {
  232|    193|                                        value: language.to_owned(),
  233|    193|                                        error,
  234|    193|                                    })
  235|    193|                                },
_RNCNvNtCskZUKzdIRemu_5oxrdf6parser14read_hexa_char0B5_:
  410|     30|    char::from_u32(value).ok_or_else(|| TermParseError::msg("Invalid encoded unicode code point"))

_RNvMsc_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7Subject6as_refCs1oqlX1d5HEl_13oxigraph_fuzz:
  181|  44.6k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  44.6k|        match self {
  183|  18.4k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|  8.63k|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|  17.5k|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  44.6k|    }
_RNvMsy_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4Term6as_refCs1oqlX1d5HEl_13oxigraph_fuzz:
  417|   626k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|   626k|        match self {
  419|  56.0k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|   108k|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|   435k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|  27.0k|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|   626k|    }
_RNvXs13_NtCskZUKzdIRemu_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_7SubjectE4fromCs1oqlX1d5HEl_13oxigraph_fuzz:
  744|  44.6k|    fn from(node: &'a Subject) -> Self {
  745|  44.6k|        node.as_ref().into()
  746|  44.6k|    }
_RNvXs14_NtCskZUKzdIRemu_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB6_4TermE4fromCs1oqlX1d5HEl_13oxigraph_fuzz:
  751|   626k|    fn from(node: &'a Term) -> Self {
  752|   626k|        node.as_ref()
  753|   626k|    }
_RNvXsU_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCs1oqlX1d5HEl_13oxigraph_fuzz:
  672|  44.6k|    fn from(node: &'a NamedNode) -> Self {
  673|  44.6k|        node.as_ref().into()
  674|  44.6k|    }
_RNvXs12_NtCskZUKzdIRemu_5oxrdf6tripleNtB6_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtB6_10SubjectRefE4fromCs1Aij2IKAmMy_10sparesults:
  732|  44.6k|    fn from(node: SubjectRef<'a>) -> Self {
  733|  44.6k|        match node {
  734|  18.4k|            SubjectRef::NamedNode(node) => node.into(),
  735|  8.63k|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|  17.5k|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  44.6k|    }
_RNvXsT_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs1Aij2IKAmMy_10sparesults:
  665|   262k|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|   262k|        Self::NamedNode(node)
  667|   262k|    }
_RNvXsV_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node12BlankNodeRefE4fromCs1Aij2IKAmMy_10sparesults:
  679|  8.63k|    fn from(node: BlankNodeRef<'a>) -> Self {
  680|  8.63k|        Self::BlankNode(node)
  681|  8.63k|    }
_RNvXsZ_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7TermRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_6TripleE4fromCs1Aij2IKAmMy_10sparesults:
  708|  17.5k|    fn from(node: &'a Triple) -> Self {
  709|  17.5k|        Self::Triple(node)
  710|  17.5k|    }
_RNvXse_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  45.4k|    fn from(node: NamedNode) -> Self {
  201|  45.4k|        Self::NamedNode(node)
  202|  45.4k|    }
_RNvXsg_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_7SubjectINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  214|  17.9k|    fn from(node: BlankNode) -> Self {
  215|  17.9k|        Self::BlankNode(node)
  216|  17.9k|    }
_RNvXsA_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|   169k|    fn from(node: NamedNode) -> Self {
  438|   169k|        Self::NamedNode(node)
  439|   169k|    }
_RNvXsC_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_10blank_node9BlankNodeE4fromB7_:
  451|   237k|    fn from(node: BlankNode) -> Self {
  452|   237k|        Self::BlankNode(node)
  453|   237k|    }
_RNvXsE_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|   920k|    fn from(literal: Literal) -> Self {
  466|   920k|        Self::Literal(literal)
  467|   920k|    }
_RNvXsG_NtCskZUKzdIRemu_5oxrdf6tripleNtB5_4TermINtNtCscdEvteftVc2_4core7convert4FromNtB5_6TripleE4fromB7_:
  480|   108k|    fn from(triple: Triple) -> Self {
  481|   108k|        Self::Triple(Box::new(triple))
  482|   108k|    }

_RNvMNtCskZUKzdIRemu_5oxrdf8variableNtB2_8Variable6as_refCs1oqlX1d5HEl_13oxigraph_fuzz:
   50|  1.16M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  1.16M|        VariableRef { name: &self.name }
   52|  1.16M|    }
_RNvXs2_NtCskZUKzdIRemu_5oxrdf8variableNtB5_11VariableRefINtNtCscdEvteftVc2_4core7convert4FromRNtB5_8VariableE4fromCs1oqlX1d5HEl_13oxigraph_fuzz:
  123|   582k|    fn from(variable: &'a Variable) -> Self {
  124|   582k|        variable.as_ref()
  125|   582k|    }
_RNvXs5_NtCskZUKzdIRemu_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs1oqlX1d5HEl_13oxigraph_fuzz:
  144|   585k|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|   585k|        self.as_ref() == *other
  146|   585k|    }
_RNvMNtCskZUKzdIRemu_5oxrdf8variableNtB2_8Variable6as_refCs1Aij2IKAmMy_10sparesults:
   50|  2.33M|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  2.33M|        VariableRef { name: &self.name }
   52|  2.33M|    }
_RNvMNtCskZUKzdIRemu_5oxrdf8variableNtB2_8Variable6as_strCs1Aij2IKAmMy_10sparesults:
   40|  9.07k|    pub fn as_str(&self) -> &str {
   41|  9.07k|        &self.name
   42|  9.07k|    }
_RNvXs1_NtCskZUKzdIRemu_5oxrdf8variableNtB5_11VariableRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs1Aij2IKAmMy_10sparesults:
  116|      9|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|      9|        write!(f, "?{}", self.name)
  118|      9|    }
_RNvXs5_NtCskZUKzdIRemu_5oxrdf8variableNtB5_8VariableINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_11VariableRefE2eqCs1Aij2IKAmMy_10sparesults:
  144|  1.17M|    fn eq(&self, other: &VariableRef<'_>) -> bool {
  145|  1.17M|        self.as_ref() == *other
  146|  1.17M|    }
_RNvXs_NtCskZUKzdIRemu_5oxrdf8variableNtB4_8VariableNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs1Aij2IKAmMy_10sparesults:
   57|      9|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|      9|        self.as_ref().fmt(f)
   59|      9|    }
_RINvMNtCskZUKzdIRemu_5oxrdf8variableNtB3_8Variable3newReEB5_:
   22|  19.8k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  19.8k|        let name = name.into();
   24|  19.8k|        validate_variable_identifier(&name)?;
   25|  19.8k|        Ok(Self::new_unchecked(name))
   26|  19.8k|    }
_RINvMNtCskZUKzdIRemu_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   35|  19.8k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  19.8k|        Self { name: name.into() }
   37|  19.8k|    }
_RNvNtCskZUKzdIRemu_5oxrdf8variable28validate_variable_identifier:
  163|  19.8k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  19.8k|    let mut chars = id.chars();
  165|  19.8k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  19.8k|    match front {
  167|  19.8k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  11.2k|        | 'A'..='Z'
  171|  3.48k|        | 'a'..='z'
  172|    131|        | '\u{00C0}'..='\u{00D6}'
  173|    131|        | '\u{00D8}'..='\u{00F6}'
  174|    125|        | '\u{00F8}'..='\u{02FF}'
  175|    125|        | '\u{0370}'..='\u{037D}'
  176|    125|        | '\u{037F}'..='\u{1FFF}'
  177|     33|        | '\u{200C}'..='\u{200D}'
  178|     33|        | '\u{2070}'..='\u{218F}'
  179|     24|        | '\u{2C00}'..='\u{2FEF}'
  180|     24|        | '\u{3001}'..='\u{D7FF}'
  181|      6|        | '\u{F900}'..='\u{FDCF}'
  182|      6|        | '\u{FDF0}'..='\u{FFFD}'
  183|  19.8k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      5|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  44.9k|    for c in chars {
  187|  25.0k|        match c {
  188|  25.0k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  1.06k|            | '\u{0300}'..='\u{036F}'
  191|    690|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  10.8k|            | 'A'..='Z'
  194|  3.81k|            | 'a'..='z'
  195|  1.06k|            | '\u{00C0}'..='\u{00D6}'
  196|  1.06k|            | '\u{00D8}'..='\u{00F6}'
  197|  1.06k|            | '\u{00F8}'..='\u{02FF}'
  198|  1.06k|            | '\u{0370}'..='\u{037D}'
  199|  1.06k|            | '\u{037F}'..='\u{1FFF}'
  200|    690|            | '\u{200C}'..='\u{200D}'
  201|    690|            | '\u{2070}'..='\u{218F}'
  202|    690|            | '\u{2C00}'..='\u{2FEF}'
  203|    689|            | '\u{3001}'..='\u{D7FF}'
  204|    592|            | '\u{F900}'..='\u{FDCF}'
  205|    592|            | '\u{FDF0}'..='\u{FFFD}'
  206|  25.0k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      9|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  19.8k|    Ok(())
  211|  19.8k|}
_RNvXsr_NtCskZUKzdIRemu_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  214|     17|#[derive(Debug, thiserror::Error)]

_RINvMs0_NtCs1Aij2IKAmMy_10sparesults3csvINtB6_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB37_22ToWriteSolutionsWriterB19_E5writeRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableRNtNtB49_6triple4TermRNtB2F_13QuerySolutionE0EECs1oqlX1d5HEl_13oxigraph_fuzz:
  202|   833k|    pub fn write<'a>(
  203|   833k|        &mut self,
  204|   833k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  205|   833k|    ) -> io::Result<()> {
  206|   833k|        self.inner.write(&mut self.buffer, solution);
  207|   833k|        self.write.write_all(self.buffer.as_bytes())?;
  208|   833k|        self.buffer.clear();
  209|   833k|        Ok(())
  210|   833k|    }
_RINvMs1_NtCs1Aij2IKAmMy_10sparesults3csvNtB6_23InnerTsvSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB8_8solution4IterNCINvMs0_NtB8_10serializerINtB2u_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableRNtNtB41_6triple4TermRNtB22_13QuerySolutionE0EECs1oqlX1d5HEl_13oxigraph_fuzz:
  273|   833k|    fn write<'a>(
  274|   833k|        &self,
  275|   833k|        output: &mut String,
  276|   833k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  277|   833k|    ) {
  278|   833k|        let mut values = vec![None; self.variables.len()];
  279|  1.41M|        for (variable, value) in solution {
  280|   582k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
  281|   582k|                values[position] = Some(value);
  282|   582k|            }
  283|       |        }
  284|   833k|        let mut start_binding = true;
  285|  1.66M|        for value in values {
  286|   835k|            if start_binding {
  287|   831k|                start_binding = false;
  288|   831k|            } else {
  289|  3.95k|                output.push('\t');
  290|  3.95k|            }
  291|   835k|            if let Some(value) = value {
  292|   582k|                write_tsv_term(output, value);
  293|   582k|            }
  294|       |        }
  295|   833k|        output.push('\n');
  296|   833k|    }
_RINvNtCs1Aij2IKAmMy_10sparesults3csv14write_tsv_termNtNtCskZUKzdIRemu_5oxrdf10named_node12NamedNodeRefECs1oqlX1d5HEl_13oxigraph_fuzz:
  299|   199k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|   199k|    match term.into() {
  301|   199k|        TermRef::NamedNode(node) => {
  302|   199k|            output.push('<');
  303|   199k|            output.push_str(node.as_str());
  304|   199k|            output.push('>');
  305|   199k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|   199k|}
_RINvNtCs1Aij2IKAmMy_10sparesults3csv14write_tsv_termNtNtCskZUKzdIRemu_5oxrdf6triple7TermRefECs1oqlX1d5HEl_13oxigraph_fuzz:
  299|   582k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|   582k|    match term.into() {
  301|  55.6k|        TermRef::NamedNode(node) => {
  302|  55.6k|            output.push('<');
  303|  55.6k|            output.push_str(node.as_str());
  304|  55.6k|            output.push('>');
  305|  55.6k|        }
  306|   103k|        TermRef::BlankNode(node) => {
  307|   103k|            output.push_str("_:");
  308|   103k|            output.push_str(node.as_str());
  309|   103k|        }
  310|   397k|        TermRef::Literal(literal) => {
  311|   397k|            let value = literal.value();
  312|   397k|            if let Some(language) = literal.language() {
  313|  59.6k|                write_tsv_quoted_str(output, value);
  314|  59.6k|                output.push('@');
  315|  59.6k|                output.push_str(language);
  316|  59.6k|            } else {
  317|   337k|                match literal.datatype() {
  318|   337k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|   320k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|   248k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|   198k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|   178k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|   169k|                    datatype => {
  324|   169k|                        write_tsv_quoted_str(output, value);
  325|   169k|                        output.push_str("^^");
  326|   169k|                        write_tsv_term(output, datatype);
  327|   169k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  25.7k|        TermRef::Triple(triple) => {
  333|  25.7k|            output.push_str("<< ");
  334|  25.7k|            write_tsv_term(output, &triple.subject);
  335|  25.7k|            output.push(' ');
  336|  25.7k|            write_tsv_term(output, &triple.predicate);
  337|  25.7k|            output.push(' ');
  338|  25.7k|            write_tsv_term(output, &triple.object);
  339|  25.7k|            output.push_str(" >>");
  340|  25.7k|        }
  341|       |    }
  342|   582k|}
_RINvNtCs1Aij2IKAmMy_10sparesults3csv14write_tsv_termRNtNtCskZUKzdIRemu_5oxrdf10named_node9NamedNodeECs1oqlX1d5HEl_13oxigraph_fuzz:
  299|  44.6k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  44.6k|    match term.into() {
  301|  44.6k|        TermRef::NamedNode(node) => {
  302|  44.6k|            output.push('<');
  303|  44.6k|            output.push_str(node.as_str());
  304|  44.6k|            output.push('>');
  305|  44.6k|        }
  306|      0|        TermRef::BlankNode(node) => {
  307|      0|            output.push_str("_:");
  308|      0|            output.push_str(node.as_str());
  309|      0|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|      0|        TermRef::Triple(triple) => {
  333|      0|            output.push_str("<< ");
  334|      0|            write_tsv_term(output, &triple.subject);
  335|      0|            output.push(' ');
  336|      0|            write_tsv_term(output, &triple.predicate);
  337|      0|            output.push(' ');
  338|      0|            write_tsv_term(output, &triple.object);
  339|      0|            output.push_str(" >>");
  340|      0|        }
  341|       |    }
  342|  44.6k|}
_RINvNtCs1Aij2IKAmMy_10sparesults3csv14write_tsv_termRNtNtCskZUKzdIRemu_5oxrdf6triple4TermECs1oqlX1d5HEl_13oxigraph_fuzz:
  299|  44.6k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  44.6k|    match term.into() {
  301|    414|        TermRef::NamedNode(node) => {
  302|    414|            output.push('<');
  303|    414|            output.push_str(node.as_str());
  304|    414|            output.push('>');
  305|    414|        }
  306|  4.74k|        TermRef::BlankNode(node) => {
  307|  4.74k|            output.push_str("_:");
  308|  4.74k|            output.push_str(node.as_str());
  309|  4.74k|        }
  310|  38.1k|        TermRef::Literal(literal) => {
  311|  38.1k|            let value = literal.value();
  312|  38.1k|            if let Some(language) = literal.language() {
  313|  5.96k|                write_tsv_quoted_str(output, value);
  314|  5.96k|                output.push('@');
  315|  5.96k|                output.push_str(language);
  316|  5.96k|            } else {
  317|  32.2k|                match literal.datatype() {
  318|  32.2k|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|  31.6k|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|  31.6k|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|  31.6k|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|  31.6k|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|  29.5k|                    datatype => {
  324|  29.5k|                        write_tsv_quoted_str(output, value);
  325|  29.5k|                        output.push_str("^^");
  326|  29.5k|                        write_tsv_term(output, datatype);
  327|  29.5k|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  1.30k|        TermRef::Triple(triple) => {
  333|  1.30k|            output.push_str("<< ");
  334|  1.30k|            write_tsv_term(output, &triple.subject);
  335|  1.30k|            output.push(' ');
  336|  1.30k|            write_tsv_term(output, &triple.predicate);
  337|  1.30k|            output.push(' ');
  338|  1.30k|            write_tsv_term(output, &triple.object);
  339|  1.30k|            output.push_str(" >>");
  340|  1.30k|        }
  341|       |    }
  342|  44.6k|}
_RINvNtCs1Aij2IKAmMy_10sparesults3csv14write_tsv_termRNtNtCskZUKzdIRemu_5oxrdf6triple7SubjectECs1oqlX1d5HEl_13oxigraph_fuzz:
  299|  44.6k|fn write_tsv_term<'a>(output: &mut String, term: impl Into<TermRef<'a>>) {
  300|  44.6k|    match term.into() {
  301|  18.4k|        TermRef::NamedNode(node) => {
  302|  18.4k|            output.push('<');
  303|  18.4k|            output.push_str(node.as_str());
  304|  18.4k|            output.push('>');
  305|  18.4k|        }
  306|  8.63k|        TermRef::BlankNode(node) => {
  307|  8.63k|            output.push_str("_:");
  308|  8.63k|            output.push_str(node.as_str());
  309|  8.63k|        }
  310|      0|        TermRef::Literal(literal) => {
  311|      0|            let value = literal.value();
  312|      0|            if let Some(language) = literal.language() {
  313|      0|                write_tsv_quoted_str(output, value);
  314|      0|                output.push('@');
  315|      0|                output.push_str(language);
  316|      0|            } else {
  317|      0|                match literal.datatype() {
  318|      0|                    xsd::BOOLEAN if is_turtle_boolean(value) => output.push_str(value),
  319|      0|                    xsd::INTEGER if is_turtle_integer(value) => output.push_str(value),
  320|      0|                    xsd::DECIMAL if is_turtle_decimal(value) => output.push_str(value),
  321|      0|                    xsd::DOUBLE if is_turtle_double(value) => output.push_str(value),
  322|      0|                    xsd::STRING => write_tsv_quoted_str(output, value),
  323|      0|                    datatype => {
  324|      0|                        write_tsv_quoted_str(output, value);
  325|      0|                        output.push_str("^^");
  326|      0|                        write_tsv_term(output, datatype);
  327|      0|                    }
  328|       |                }
  329|       |            }
  330|       |        }
  331|       |        #[cfg(feature = "rdf-star")]
  332|  17.5k|        TermRef::Triple(triple) => {
  333|  17.5k|            output.push_str("<< ");
  334|  17.5k|            write_tsv_term(output, &triple.subject);
  335|  17.5k|            output.push(' ');
  336|  17.5k|            write_tsv_term(output, &triple.predicate);
  337|  17.5k|            output.push(' ');
  338|  17.5k|            write_tsv_term(output, &triple.object);
  339|  17.5k|            output.push_str(" >>");
  340|  17.5k|        }
  341|       |    }
  342|  44.6k|}
_RINvNtCs1Aij2IKAmMy_10sparesults3csv24write_boolean_csv_resultQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs1oqlX1d5HEl_13oxigraph_fuzz:
   16|      7|pub fn write_boolean_csv_result<W: Write>(mut write: W, value: bool) -> io::Result<W> {
   17|      7|    write.write_all(if value { b"true" } else { b"false" })?;
   18|      7|    Ok(write)
   19|      7|}
_RNCINvMs1_NtCs1Aij2IKAmMy_10sparesults3csvNtB8_23InnerTsvSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtBa_8solution4IterNCINvMs0_NtBa_10serializerINtB2w_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableRNtNtB43_6triple4TermRNtB24_13QuerySolutionE0EE0Cs1oqlX1d5HEl_13oxigraph_fuzz:
  280|   585k|            if let Some(position) = self.variables.iter().position(|v| *v == variable) {
_RNvMs0_NtCs1Aij2IKAmMy_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5startCs1oqlX1d5HEl_13oxigraph_fuzz:
  190|  9.01k|    pub fn start(mut write: W, variables: Vec<Variable>) -> io::Result<Self> {
  191|  9.01k|        let mut buffer = String::new();
  192|  9.01k|        let inner = InnerTsvSolutionsWriter::start(&mut buffer, variables);
  193|  9.01k|        write.write_all(buffer.as_bytes())?;
  194|  9.01k|        buffer.clear();
  195|  9.01k|        Ok(Self {
  196|  9.01k|            inner,
  197|  9.01k|            write,
  198|  9.01k|            buffer,
  199|  9.01k|        })
  200|  9.01k|    }
_RNvMs0_NtCs1Aij2IKAmMy_10sparesults3csvINtB5_25ToWriteTsvSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs1oqlX1d5HEl_13oxigraph_fuzz:
  212|  9.01k|    pub fn finish(self) -> W {
  213|  9.01k|        self.write
  214|  9.01k|    }
_RNvMs1_NtCs1Aij2IKAmMy_10sparesults3csvNtB5_23InnerTsvSolutionsWriter5start:
  258|  9.01k|    fn start(output: &mut String, variables: Vec<Variable>) -> Self {
  259|  9.01k|        let mut start_vars = true;
  260|  18.0k|        for variable in &variables {
  261|  9.07k|            if start_vars {
  262|  8.91k|                start_vars = false;
  263|  8.91k|            } else {
  264|    162|                output.push('\t');
  265|    162|            }
  266|  9.07k|            output.push('?');
  267|  9.07k|            output.push_str(variable.as_str());
  268|       |        }
  269|  9.01k|        output.push('\n');
  270|  9.01k|        Self { variables }
  271|  9.01k|    }
_RNvNtCs1Aij2IKAmMy_10sparesults3csv20write_tsv_quoted_str:
  344|   275k|fn write_tsv_quoted_str(output: &mut String, string: &str) {
  345|   275k|    output.push('"');
  346|  3.01M|    for c in string.chars() {
  347|  3.01M|        match c {
  348|  1.91k|            '\t' => output.push_str("\\t"),
  349|  4.20k|            '\n' => output.push_str("\\n"),
  350|  6.14k|            '\r' => output.push_str("\\r"),
  351|  6.90k|            '"' => output.push_str("\\\""),
  352|  10.9k|            '\\' => output.push_str("\\\\"),
  353|  2.98M|            _ => output.push(c),
  354|       |        };
  355|       |    }
  356|   275k|    output.push('"');
  357|   275k|}
_RNvNtCs1Aij2IKAmMy_10sparesults3csv17is_turtle_boolean:
  359|  19.2k|fn is_turtle_boolean(value: &str) -> bool {
  360|  19.2k|    matches!(value, "true" | "false")
  361|  19.2k|}
_RNvNtCs1Aij2IKAmMy_10sparesults3csv17is_turtle_integer:
  363|   100k|fn is_turtle_integer(value: &str) -> bool {
  364|   100k|    // [19]  INTEGER  ::=  [+-]? [0-9]+
  365|   100k|    let mut value = value.as_bytes();
  366|   100k|    if let Some(v) = value.strip_prefix(b"+") {
  367|    901|        value = v;
  368|  99.9k|    } else if let Some(v) = value.strip_prefix(b"-") {
  369|  1.07k|        value = v;
  370|  98.9k|    }
  371|   100k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  372|   100k|}
_RNvNtCs1Aij2IKAmMy_10sparesults3csv17is_turtle_decimal:
  374|  51.5k|fn is_turtle_decimal(value: &str) -> bool {
  375|  51.5k|    // [20]  DECIMAL  ::=  [+-]? [0-9]* '.' [0-9]+
  376|  51.5k|    let mut value = value.as_bytes();
  377|  51.5k|    if let Some(v) = value.strip_prefix(b"+") {
  378|  10.7k|        value = v;
  379|  40.8k|    } else if let Some(v) = value.strip_prefix(b"-") {
  380|  6.66k|        value = v;
  381|  34.1k|    }
  382|   132k|    while value.first().map_or(false, u8::is_ascii_digit) {
  383|  80.5k|        value = &value[1..];
  384|  80.5k|    }
  385|  51.5k|    let Some(value) = value.strip_prefix(b".") else {
  386|  1.55k|        return false;
  387|       |    };
  388|  49.9k|    !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  389|  51.5k|}
_RNvNtCs1Aij2IKAmMy_10sparesults3csv16is_turtle_double:
  391|   178k|fn is_turtle_double(value: &str) -> bool {
  392|   178k|    // [21]    DOUBLE    ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  393|   178k|    // [154s]  EXPONENT  ::=  [eE] [+-]? [0-9]+
  394|   178k|    let mut value = value.as_bytes();
  395|   178k|    if let Some(v) = value.strip_prefix(b"+") {
  396|    837|        value = v;
  397|   177k|    } else if let Some(v) = value.strip_prefix(b"-") {
  398|  45.7k|        value = v;
  399|   132k|    }
  400|   178k|    let mut with_before = false;
  401|   211k|    while value.first().map_or(false, u8::is_ascii_digit) {
  402|  32.7k|        value = &value[1..];
  403|  32.7k|        with_before = true;
  404|  32.7k|    }
  405|   178k|    let mut with_after = false;
  406|   178k|    if let Some(v) = value.strip_prefix(b".") {
  407|  41.1k|        value = v;
  408|  68.4k|        while value.first().map_or(false, u8::is_ascii_digit) {
  409|  27.2k|            value = &value[1..];
  410|  27.2k|            with_after = true;
  411|  27.2k|        }
  412|   137k|    }
  413|   178k|    if let Some(v) = value.strip_prefix(b"e") {
  414|   133k|        value = v;
  415|   133k|    } else if let Some(v) = value.strip_prefix(b"E") {
  416|  36.5k|        value = v;
  417|  36.5k|    } else {
  418|  8.79k|        return false;
  419|       |    }
  420|   169k|    if let Some(v) = value.strip_prefix(b"+") {
  421|    170|        value = v;
  422|   169k|    } else if let Some(v) = value.strip_prefix(b"-") {
  423|  2.43k|        value = v;
  424|   167k|    }
  425|   169k|    (with_before || with_after) && !value.is_empty() && value.iter().all(u8::is_ascii_digit)
  426|   178k|}
_RNvMs4_NtCs1Aij2IKAmMy_10sparesults3csvNtB5_30FromSliceTsvQueryResultsReader4read:
  536|  22.6k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  537|  22.6k|        let mut reader = LineReader::new();
  538|  22.6k|        let line = reader.next_line_from_slice(slice)?;
  539|  22.6k|        Ok(match inner_read_first_line(reader, line)? {
  540|       |            TsvInnerQueryResults::Solutions {
  541|  22.3k|                variables,
  542|  22.3k|                solutions,
  543|  22.3k|            } => Self::Solutions {
  544|  22.3k|                variables,
  545|  22.3k|                solutions: FromSliceTsvSolutionsReader {
  546|  22.3k|                    slice,
  547|  22.3k|                    inner: solutions,
  548|  22.3k|                },
  549|  22.3k|            },
  550|     14|            TsvInnerQueryResults::Boolean(value) => Self::Boolean(value),
  551|       |        })
  552|  22.6k|    }
_RNvMs5_NtCs1Aij2IKAmMy_10sparesults3csvNtB5_27FromSliceTsvSolutionsReader9read_next:
  561|  1.73M|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  562|  1.73M|        let line = self.inner.reader.next_line_from_slice(self.slice)?;
  563|  1.73M|        self.inner.read_next(line)
  564|  1.73M|    }
_RNvNtCs1Aij2IKAmMy_10sparesults3csv21inner_read_first_line:
  575|  22.6k|fn inner_read_first_line(
  576|  22.6k|    reader: LineReader,
  577|  22.6k|    line: &str,
  578|  22.6k|) -> Result<TsvInnerQueryResults, QueryResultsSyntaxError> {
  579|  22.6k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
  580|  22.6k|    if line.eq_ignore_ascii_case("true") {
  581|      6|        return Ok(TsvInnerQueryResults::Boolean(true));
  582|  22.6k|    }
  583|  22.6k|    if line.eq_ignore_ascii_case("false") {
  584|      8|        return Ok(TsvInnerQueryResults::Boolean(false));
  585|  22.5k|    }
  586|  22.5k|    let mut variables = Vec::new();
  587|  22.5k|    if !line.is_empty() {
  588|  20.0k|        for v in line.split('\t') {
  589|  20.0k|            let v = v.trim();
  590|  20.0k|            if v.is_empty() {
  591|     78|                return Err(QueryResultsSyntaxError::msg("Empty column on the first row. The first row should be a list of variables like ?foo or $bar"));
  592|  19.9k|            }
  593|  19.9k|            let variable = Variable::from_str(v).map_err(|e| {
  594|       |                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|  19.9k|            })?;
  596|  19.8k|            if variables.contains(&variable) {
  597|      9|                return Err(QueryResultsSyntaxError::msg(format!(
  598|      9|                    "The variable {variable} is declared twice"
  599|      9|                )));
  600|  19.8k|            }
  601|  19.8k|            variables.push(variable);
  602|       |        }
  603|  3.15k|    }
  604|  22.3k|    let column_len = variables.len();
  605|  22.3k|    Ok(TsvInnerQueryResults::Solutions {
  606|  22.3k|        variables,
  607|  22.3k|        solutions: TsvInnerSolutionsReader { reader, column_len },
  608|  22.3k|    })
  609|  22.6k|}
_RNvMs6_NtCs1Aij2IKAmMy_10sparesults3csvNtB5_23TsvInnerSolutionsReader9read_next:
  618|  1.73M|    pub fn read_next(
  619|  1.73M|        &self,
  620|  1.73M|        line: &str,
  621|  1.73M|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  622|  1.73M|        if line.is_empty() {
  623|  18.0k|            return Ok(None); // EOF
  624|  1.71M|        }
  625|  1.71M|        let elements = line
  626|  1.71M|            .split('\t')
  627|  1.71M|            .enumerate()
  628|  1.71M|            .map(|(i, v)| {
  629|       |                let v = v.trim();
  630|       |                if v.is_empty() {
  631|       |                    Ok(None)
  632|       |                } else {
  633|       |                    Ok(Some(Term::from_str(v).map_err(|e| {
  634|       |                        let start_position_char = line
  635|       |                            .split('\t')
  636|       |                            .take(i)
  637|       |                            .map(|c| c.chars().count() + 1)
  638|       |                            .sum::<usize>();
  639|       |                        let start_position_bytes =
  640|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  641|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  642|       |                            error: e,
  643|       |                            term: v.into(),
  644|       |                            location: TextPosition {
  645|       |                                line: self.reader.line_count - 1,
  646|       |                                column: start_position_char.try_into().unwrap(),
  647|       |                                offset: self.reader.last_line_start
  648|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  649|       |                            }..TextPosition {
  650|       |                                line: self.reader.line_count - 1,
  651|       |                                column: (start_position_char + v.chars().count())
  652|       |                                    .try_into()
  653|       |                                    .unwrap(),
  654|       |                                offset: self.reader.last_line_start
  655|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  656|       |                            },
  657|       |                        })
  658|       |                    })?))
  659|       |                }
  660|  1.71M|            })
  661|  1.71M|            .collect::<Result<Vec<_>, QueryResultsSyntaxError>>()?;
  662|  1.71M|        if elements.len() == self.column_len {
  663|  1.70M|            Ok(Some(elements))
  664|  3.54k|        } else if self.column_len == 0 && elements == [None] {
  665|  3.30k|            Ok(Some(Vec::new())) // Zero columns case
  666|       |        } else {
  667|    245|            Err(QueryResultsSyntaxError::located_message(
  668|    245|                format!(
  669|    245|                    "This TSV files has {} columns but we found a row on line {} with {} columns: {}",
  670|    245|                    self.column_len,
  671|    245|                    self.reader.line_count - 1,
  672|    245|                    elements.len(),
  673|    245|                    line
  674|    245|                ),
  675|    245|                TextPosition {
  676|    245|                    line: self.reader.line_count - 1,
  677|    245|                    column: 0,
  678|    245|                    offset: self.reader.last_line_start,
  679|    245|                }..TextPosition {
  680|    245|                    line: self.reader.line_count - 1,
  681|    245|                    column: line.chars().count().try_into().unwrap(),
  682|    245|                    offset: self.reader.last_line_end,
  683|    245|                },
  684|    245|            ))
  685|       |        }
  686|  1.73M|    }
_RNvMs7_NtCs1Aij2IKAmMy_10sparesults3csvNtB5_10LineReader3new:
  698|  22.6k|    fn new() -> Self {
  699|  22.6k|        Self {
  700|  22.6k|            buffer_start: 0,
  701|  22.6k|            buffer_end: 0,
  702|  22.6k|            line_count: 0,
  703|  22.6k|            last_line_start: 0,
  704|  22.6k|            last_line_end: 0,
  705|  22.6k|        }
  706|  22.6k|    }
_RNvMs7_NtCs1Aij2IKAmMy_10sparesults3csvNtB5_10LineReader20next_line_from_slice:
  792|  1.75M|    fn next_line_from_slice<'a>(
  793|  1.75M|        &mut self,
  794|  1.75M|        slice: &'a [u8],
  795|  1.75M|    ) -> Result<&'a str, QueryResultsSyntaxError> {
  796|  1.75M|        let line_end = memchr(b'\n', &slice[self.buffer_start..])
  797|  1.75M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
  798|  1.75M|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  799|       |            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  800|  1.75M|        });
  801|  1.75M|        self.line_count += 1;
  802|  1.75M|        self.last_line_start = self.last_line_end;
  803|  1.75M|        self.last_line_end += u64::try_from(line_end - self.buffer_start).unwrap();
  804|  1.75M|        self.buffer_start = line_end;
  805|  1.75M|        result
  806|  1.75M|    }
_RNCNvNtCs1Aij2IKAmMy_10sparesults3csv21inner_read_first_line0B5_:
  579|  69.0k|    let line = line.trim_matches(|c| matches!(c, ' ' | '\r' | '\n'));
_RNCNvNtCs1Aij2IKAmMy_10sparesults3csv21inner_read_first_lines_0B5_:
  593|    128|            let variable = Variable::from_str(v).map_err(|e| {
  594|    128|                QueryResultsSyntaxError::msg(format!("Invalid variable declaration '{v}': {e}"))
  595|    128|            })?;
_RNCNvMs6_NtCs1Aij2IKAmMy_10sparesults3csvNtB7_23TsvInnerSolutionsReader9read_next0B9_:
  628|  1.73M|            .map(|(i, v)| {
  629|  1.73M|                let v = v.trim();
  630|  1.73M|                if v.is_empty() {
  631|   529k|                    Ok(None)
  632|       |                } else {
  633|  1.20M|                    Ok(Some(Term::from_str(v).map_err(|e| {
  634|       |                        let start_position_char = line
  635|       |                            .split('\t')
  636|       |                            .take(i)
  637|       |                            .map(|c| c.chars().count() + 1)
  638|       |                            .sum::<usize>();
  639|       |                        let start_position_bytes =
  640|       |                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  641|       |                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  642|       |                            error: e,
  643|       |                            term: v.into(),
  644|       |                            location: TextPosition {
  645|       |                                line: self.reader.line_count - 1,
  646|       |                                column: start_position_char.try_into().unwrap(),
  647|       |                                offset: self.reader.last_line_start
  648|       |                                    + u64::try_from(start_position_bytes).unwrap(),
  649|       |                            }..TextPosition {
  650|       |                                line: self.reader.line_count - 1,
  651|       |                                column: (start_position_char + v.chars().count())
  652|       |                                    .try_into()
  653|       |                                    .unwrap(),
  654|       |                                offset: self.reader.last_line_start
  655|       |                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  656|       |                            },
  657|       |                        })
  658|  1.20M|                    })?))
  659|       |                }
  660|  1.73M|            })
_RNCNCNvMs6_NtCs1Aij2IKAmMy_10sparesults3csvNtB9_23TsvInnerSolutionsReader9read_next00Bb_:
  633|  4.06k|                    Ok(Some(Term::from_str(v).map_err(|e| {
  634|  4.06k|                        let start_position_char = line
  635|  4.06k|                            .split('\t')
  636|  4.06k|                            .take(i)
  637|  4.06k|                            .map(|c| c.chars().count() + 1)
  638|  4.06k|                            .sum::<usize>();
  639|  4.06k|                        let start_position_bytes =
  640|  4.06k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
  641|  4.06k|                        QueryResultsSyntaxError(SyntaxErrorKind::Term {
  642|  4.06k|                            error: e,
  643|  4.06k|                            term: v.into(),
  644|  4.06k|                            location: TextPosition {
  645|  4.06k|                                line: self.reader.line_count - 1,
  646|  4.06k|                                column: start_position_char.try_into().unwrap(),
  647|  4.06k|                                offset: self.reader.last_line_start
  648|  4.06k|                                    + u64::try_from(start_position_bytes).unwrap(),
  649|  4.06k|                            }..TextPosition {
  650|  4.06k|                                line: self.reader.line_count - 1,
  651|  4.06k|                                column: (start_position_char + v.chars().count())
  652|  4.06k|                                    .try_into()
  653|  4.06k|                                    .unwrap(),
  654|  4.06k|                                offset: self.reader.last_line_start
  655|  4.06k|                                    + u64::try_from(start_position_bytes + v.len()).unwrap(),
  656|  4.06k|                            },
  657|  4.06k|                        })
  658|  4.06k|                    })?))
_RNCNCNCNvMs6_NtCs1Aij2IKAmMy_10sparesults3csvNtBb_23TsvInnerSolutionsReader9read_next000Bd_:
  637|  2.01k|                            .map(|c| c.chars().count() + 1)
_RNCNCNCNvMs6_NtCs1Aij2IKAmMy_10sparesults3csvNtBb_23TsvInnerSolutionsReader9read_next00s_0Bd_:
  640|  2.01k|                            line.split('\t').take(i).map(|c| c.len() + 1).sum::<usize>();
_RNCNvMs7_NtCs1Aij2IKAmMy_10sparesults3csvNtB7_10LineReader20next_line_from_slice0B9_:
  797|  29.7k|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCs1Aij2IKAmMy_10sparesults3csvNtB7_10LineReader20next_line_from_slices_0B9_:
  797|  1.72M|            .map_or_else(|| slice.len(), |eol| self.buffer_start + eol + 1);
_RNCNvMs7_NtCs1Aij2IKAmMy_10sparesults3csvNtB7_10LineReader20next_line_from_slices0_0B9_:
  798|     46|        let result = str::from_utf8(&slice[self.buffer_start..line_end]).map_err(|e| {
  799|     46|            QueryResultsSyntaxError::msg(format!("Invalid UTF-8 in the TSV file: {e}"))
  800|     46|        });

_RINvMs2_NtCs1Aij2IKAmMy_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   87|    183|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    183|        Self(SyntaxErrorKind::Msg {
   89|    183|            msg: msg.into(),
   90|    183|            location: None,
   91|    183|        })
   92|    183|    }
_RINvMs2_NtCs1Aij2IKAmMy_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|     78|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|     78|        Self(SyntaxErrorKind::Msg {
   89|     78|            msg: msg.into(),
   90|     78|            location: None,
   91|     78|        })
   92|     78|    }
_RINvMs2_NtCs1Aij2IKAmMy_10sparesults5errorNtB6_23QueryResultsSyntaxError15located_messageNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   96|    245|    pub(crate) fn located_message(msg: impl Into<String>, location: Range<TextPosition>) -> Self {
   97|    245|        Self(SyntaxErrorKind::Msg {
   98|    245|            msg: msg.into(),
   99|    245|            location: Some(location),
  100|    245|        })
  101|    245|    }

_RNvMNtCs1Aij2IKAmMy_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs1oqlX1d5HEl_13oxigraph_fuzz:
   65|  22.6k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  22.6k|        Self { format }
   67|  22.6k|    }
_RNvMNtCs1Aij2IKAmMy_10sparesults6parserNtB2_18QueryResultsParser11parse_slice:
  234|  22.6k|    pub fn parse_slice(
  235|  22.6k|        self,
  236|  22.6k|        slice: &[u8],
  237|  22.6k|    ) -> Result<FromSliceQueryResultsReader<'_>, QueryResultsSyntaxError> {
  238|  22.6k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match FromSliceXmlQueryResultsReader::read(slice)? {
  240|      0|                FromSliceXmlQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  241|       |                FromSliceXmlQueryResultsReader::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: FromSliceSolutionsReaderKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match FromSliceJsonQueryResultsReader::read(slice)? {
  250|      0|                FromSliceJsonQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  251|       |                FromSliceJsonQueryResultsReader::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: FromSliceSolutionsReaderKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|  22.6k|            QueryResultsFormat::Tsv => match FromSliceTsvQueryResultsReader::read(slice)? {
  261|     14|                FromSliceTsvQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  262|       |                FromSliceTsvQueryResultsReader::Solutions {
  263|  22.3k|                    solutions,
  264|  22.3k|                    variables,
  265|  22.3k|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  266|  22.3k|                    variables: variables.into(),
  267|  22.3k|                    solutions: FromSliceSolutionsReaderKind::Tsv(solutions),
  268|  22.3k|                }),
  269|       |            },
  270|       |        })
  271|  22.6k|    }
_RNvXs3_NtCs1Aij2IKAmMy_10sparesults6parserNtB5_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  642|  1.73M|    fn next(&mut self) -> Option<Self::Item> {
  643|  1.73M|        Some(
  644|  1.73M|            match &mut self.solutions {
  645|      0|                FromSliceSolutionsReaderKind::Xml(reader) => reader.read_next(),
  646|      0|                FromSliceSolutionsReaderKind::Json(reader) => reader.read_next(),
  647|  1.73M|                FromSliceSolutionsReaderKind::Tsv(reader) => reader.read_next(),
  648|       |            }
  649|  1.73M|            .transpose()?
  650|  1.71M|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|       |        )
  652|  1.73M|    }
_RNCNvXs3_NtCs1Aij2IKAmMy_10sparesults6parserNtB7_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  1.71M|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RNvMNtCs1Aij2IKAmMy_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs1oqlX1d5HEl_13oxigraph_fuzz:
   57|  9.02k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   58|  9.02k|        Self { format }
   59|  9.02k|    }
_RINvMNtCs1Aij2IKAmMy_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs1oqlX1d5HEl_13oxigraph_fuzz:
   73|      7|    pub fn serialize_boolean_to_write<W: Write>(self, write: W, value: bool) -> io::Result<W> {
   74|      7|        match self.format {
   75|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   76|      0|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   77|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   78|      7|                write_boolean_csv_result(write, value)
   79|       |            }
   80|       |        }
   81|      7|    }
_RINvMNtCs1Aij2IKAmMy_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs1oqlX1d5HEl_13oxigraph_fuzz:
  144|  9.01k|    pub fn serialize_solutions_to_write<W: Write>(
  145|  9.01k|        self,
  146|  9.01k|        write: W,
  147|  9.01k|        variables: Vec<Variable>,
  148|  9.01k|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  149|  9.01k|        Ok(ToWriteSolutionsWriter {
  150|  9.01k|            formatter: match self.format {
  151|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  152|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  153|       |                ),
  154|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  155|      0|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  156|       |                ),
  157|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  158|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  159|       |                ),
  160|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  161|  9.01k|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  162|       |                ),
  163|       |            },
  164|       |        })
  165|  9.01k|    }
_RINvMs0_NtCs1Aij2IKAmMy_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECs1oqlX1d5HEl_13oxigraph_fuzz:
  302|   833k|    pub fn write<'a>(
  303|   833k|        &mut self,
  304|   833k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  305|   833k|    ) -> io::Result<()> {
  306|   833k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  307|   833k|        match &mut self.formatter {
  308|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  309|      0|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  310|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  311|   833k|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  312|       |        }
  313|   833k|    }
_RNCINvMs0_NtCs1Aij2IKAmMy_10sparesults10serializerINtB8_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableRNtNtB21_6triple4TermRNtNtBa_8solution13QuerySolutionE0Cs1oqlX1d5HEl_13oxigraph_fuzz:
  306|   582k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
_RNvMs0_NtCs1Aij2IKAmMy_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs1oqlX1d5HEl_13oxigraph_fuzz:
  316|  9.01k|    pub fn finish(self) -> io::Result<W> {
  317|  9.01k|        match self.formatter {
  318|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  319|      0|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  320|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  321|  9.01k|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  322|       |        }
  323|  9.01k|    }

_RNvMNtCs1Aij2IKAmMy_10sparesults8solutionNtB2_13QuerySolution9variablesCs1oqlX1d5HEl_13oxigraph_fuzz:
  158|  8.95k|    pub fn variables(&self) -> &[Variable] {
  159|  8.95k|        &self.variables
  160|  8.95k|    }
_RNvXs0_NtCs1Aij2IKAmMy_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterCs1oqlX1d5HEl_13oxigraph_fuzz:
  178|   833k|    fn into_iter(self) -> Self::IntoIter {
  179|   833k|        Iter {
  180|   833k|            inner: self.variables.iter().zip(&self.values),
  181|   833k|        }
  182|   833k|    }
_RNvXs9_NtCs1Aij2IKAmMy_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs1oqlX1d5HEl_13oxigraph_fuzz:
  285|  1.41M|    fn next(&mut self) -> Option<Self::Item> {
  286|  1.66M|        for (variable, value) in &mut self.inner {
  287|   835k|            if let Some(value) = value {
  288|   582k|                return Some((variable, value));
  289|   253k|            }
  290|       |        }
  291|   833k|        None
  292|  1.41M|    }
_RNvMNtCs1Aij2IKAmMy_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  1.66M|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  1.66M|        self.into_iter()
  114|  1.66M|    }
_RNvXs0_NtCs1Aij2IKAmMy_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  1.66M|    fn into_iter(self) -> Self::IntoIter {
  179|  1.66M|        Iter {
  180|  1.66M|            inner: self.variables.iter().zip(&self.values),
  181|  1.66M|        }
  182|  1.66M|    }
_RNvXs6_NtCs1Aij2IKAmMy_10sparesults8solutionNtB5_13QuerySolutionNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  236|   833k|    fn eq(&self, other: &Self) -> bool {
  237|   833k|        for (k, v) in self.iter() {
  238|   582k|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|   582k|            }
  241|       |        }
  242|   833k|        for (k, v) in other.iter() {
  243|   582k|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|   582k|            }
  246|       |        }
  247|   833k|        true
  248|   833k|    }
_RNvXs9_NtCs1Aij2IKAmMy_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  2.83M|    fn next(&mut self) -> Option<Self::Item> {
  286|  3.33M|        for (variable, value) in &mut self.inner {
  287|  1.67M|            if let Some(value) = value {
  288|  1.16M|                return Some((variable, value));
  289|   506k|            }
  290|       |        }
  291|  1.66M|        None
  292|  2.83M|    }
_RNvXsc_NtCs1Aij2IKAmMy_10sparesults8solutionNtNtCskZUKzdIRemu_5oxrdf8variable11VariableRefNtB5_21VariableSolutionIndex5indexB7_:
  323|  1.16M|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  324|  1.16M|        solution.variables.iter().position(|v| *v == self)
  325|  1.16M|    }
_RNvXsd_NtCs1Aij2IKAmMy_10sparesults8solutionRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableNtB5_21VariableSolutionIndex5indexB7_:
  330|  1.16M|    fn index(self, solution: &QuerySolution) -> Option<usize> {
  331|  1.16M|        self.as_ref().index(solution)
  332|  1.16M|    }
_RINvMNtCs1Aij2IKAmMy_10sparesults8solutionNtB3_13QuerySolution3getRNtNtCskZUKzdIRemu_5oxrdf8variable8VariableEB5_:
   38|  1.16M|    pub fn get(&self, index: impl VariableSolutionIndex) -> Option<&Term> {
   39|  1.16M|        self.values.get(index.index(self)?).and_then(Option::as_ref)
   40|  1.16M|    }
_RNvXs_NtCs1Aij2IKAmMy_10sparesults8solutionNtB4_13QuerySolutionINtNtCscdEvteftVc2_4core7convert4FromTINtNtCs3OstG5Tqy1X_5alloc4sync3ArcSNtNtCskZUKzdIRemu_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  1.71M|    fn from((v, s): (V, S)) -> Self {
  166|  1.71M|        Self {
  167|  1.71M|            variables: v.into(),
  168|  1.71M|            values: s.into(),
  169|  1.71M|        }
  170|  1.71M|    }
_RNCNvXsc_NtCs1Aij2IKAmMy_10sparesults8solutionNtNtCskZUKzdIRemu_5oxrdf8variable11VariableRefNtB7_21VariableSolutionIndex5index0B9_:
  324|  1.17M|        solution.variables.iter().position(|v| *v == self)


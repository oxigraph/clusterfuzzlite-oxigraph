






























_RNCNvNvCskGjlBdqDDaP_2n31__19___libfuzzer_sys_run0B5_:
   12|  26.2M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs3Okv3MbnXN6_5oxttl:
   62|  4.52k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  4.52k|        Self(BlankNodeContent::Anonymous {
   64|  4.52k|            id: id.to_ne_bytes(),
   65|  4.52k|            str: IdStr::new(id),
   66|  4.52k|        })
   67|  4.52k|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr3newCs3Okv3MbnXN6_5oxttl:
  258|  4.34M|    fn new(id: u128) -> Self {
  259|  4.34M|        let mut str = [0; 32];
  260|  4.34M|        write!(&mut str[..], "{id:x}").unwrap();
  261|  4.34M|        Self(str)
  262|  4.34M|    }
_RNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs3Okv3MbnXN6_5oxttl:
  265|  4.33M|    fn as_str(&self) -> &str {
  266|  4.33M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  4.33M|        str::from_utf8(&self.0[..len]).unwrap()
  268|  4.33M|    }
_RNvNtCsg6vp76A8CLh_5oxrdf10blank_node13to_integer_idCs3Okv3MbnXN6_5oxttl:
  331|  36.7k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  36.7k|    let digits = id.as_bytes();
  333|  36.7k|    let mut value: u128 = 0;
  334|  36.7k|    if let None | Some(b'0') = digits.first() {
  335|  18.9k|        return None; // No empty string or leading zeros
  336|  17.8k|    }
  337|  49.4k|    for digit in digits {
  338|  44.9k|        value = value.checked_mul(16)?.checked_add(
  339|  44.3k|            match *digit {
  340|  43.5k|                b'0'..=b'9' => digit - b'0',
  341|  33.9k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  12.7k|                _ => return None,
  343|       |            }
  344|  31.6k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  4.52k|    Some(value)
  348|  36.7k|}
_RNvXs0_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCs3Okv3MbnXN6_5oxttl:
  109|  1.73M|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  4.33M|        loop {
  112|  4.33M|            let id = random();
  113|  4.33M|            let str = IdStr::new(id);
  114|  4.33M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|  1.73M|                return Self(BlankNodeContent::Anonymous {
  116|  1.73M|                    id: id.to_ne_bytes(),
  117|  1.73M|                    str,
  118|  1.73M|                });
  119|  2.60M|            }
  120|       |        }
  121|  1.73M|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs3Okv3MbnXN6_5oxttl:
   49|  36.7k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  36.7k|        let id = id.into();
   51|  36.7k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  4.52k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  32.2k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  36.7k|    }
_RNCNvMs7_NtCsg6vp76A8CLh_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   138M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  60.6k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  60.6k|        Self(LiteralContent::String(value.into()))
   49|  60.6k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  17.1k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  17.1k|        let value = value.into();
   55|  17.1k|        let datatype = datatype.into();
   56|  17.1k|        Self(if datatype == xsd::STRING {
   57|  4.44k|            LiteralContent::String(value)
   58|       |        } else {
   59|  12.6k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  17.1k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   205k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   205k|        let value = value.into();
   55|   205k|        let datatype = datatype.into();
   56|   205k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   205k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   205k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  7.53k|    pub fn new_language_tagged_literal_unchecked(
   86|  7.53k|        value: impl Into<String>,
   87|  7.53k|        language: impl Into<String>,
   88|  7.53k|    ) -> Self {
   89|  7.53k|        Self(LiteralContent::LanguageTaggedString {
   90|  7.53k|            value: value.into(),
   91|  7.53k|            language: language.into(),
   92|  7.53k|        })
   93|  7.53k|    }

_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs3Okv3MbnXN6_5oxttl:
  138|   141k|    pub fn into_owned(self) -> NamedNode {
  139|   141k|        NamedNode::new_unchecked(self.iri)
  140|   141k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   222k|    pub fn as_str(&self) -> &str {
   45|   222k|        self.iri.as_str()
   46|   222k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   222k|    pub const fn as_str(self) -> &'a str {
  134|   222k|        self.iri
  135|   222k|    }
_RNvMs4_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   205k|    pub fn into_owned(self) -> NamedNode {
  139|   205k|        NamedNode::new_unchecked(self.iri)
  140|   205k|    }
_RNvXs6_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   205k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   205k|        node.into_owned()
  154|   205k|    }
_RNvXs9_NtCsg6vp76A8CLh_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   222k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   222k|        self.as_str() == other.as_str()
  175|   222k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   273k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   273k|        Self { iri: iri.into() }
   41|   273k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   368k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   368k|        Self { iri: iri.into() }
   41|   368k|    }

_RNvXs1g_NtCsg6vp76A8CLh_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs3Okv3MbnXN6_5oxttl:
  997|  56.5k|    fn from(node: BlankNode) -> Self {
  998|  56.5k|        Self::BlankNode(node)
  999|  56.5k|    }

_RINvMNtCsg6vp76A8CLh_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs3Okv3MbnXN6_5oxttl:
   35|  25.8k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  25.8k|        Self { name: name.into() }
   37|  25.8k|    }

_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|   144k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   671k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   671k|                prefix: pn_prefix,
  322|   671k|                local,
  323|   671k|                might_be_invalid_iri,
  324|   671k|            }),
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  73.2k|            result.and_then(|(name, _)| {
  338|  73.2k|                if name.is_empty() {
  339|  30.5k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  42.7k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  73.2k|            }),
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  49.9k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|  2.43k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|  2.43k|            (
  821|  2.43k|                position..position + len + 2,
  822|  2.43k|                format!(
  823|  2.43k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|  2.43k|                ),
  825|  2.43k|            )
  826|  2.43k|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|    322|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|    322|            (
  829|    322|                position..position + len +2,
  830|    322|                format!(
  831|    322|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|    322|                ),
  833|    322|            )
  834|    322|        })?;
_RNCNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  1.42M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs3Okv3MbnXN6_5oxttl5lexer13str_from_utf80B5_:
 1046|  20.4k|    str::from_utf8(data).map_err(|e| {
 1047|  20.4k|        (
 1048|  20.4k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  20.4k|            format!("Invalid UTF-8: {e}"),
 1050|  20.4k|        )
 1051|  20.4k|            .into()
 1052|  20.4k|    })
_RNCNvNtCs3Okv3MbnXN6_5oxttl5lexer16string_from_utf80B5_:
 1056|  28.5k|    String::from_utf8(data).map_err(|e| {
 1057|  28.5k|        (
 1058|  28.5k|            range.start + e.utf8_error().valid_up_to()
 1059|  28.5k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  28.5k|            format!("Invalid UTF-8: {e}"),
 1061|  28.5k|        )
 1062|  28.5k|            .into()
 1063|  28.5k|    })
_RNvXNtCs3Okv3MbnXN6_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  16.0M|    fn recognize_next_token<'a>(
   56|  16.0M|        &mut self,
   57|  16.0M|        data: &'a [u8],
   58|  16.0M|        is_ending: bool,
   59|  16.0M|        options: &N3LexerOptions,
   60|  16.0M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  16.0M|        match *data.first()? {
   62|  2.10M|            b'<' => match *data.get(1)? {
   63|  11.4k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  66.4k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  66.4k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  19.7k|                        Some(if let Ok(result) = result {
   67|  8.94k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  10.7k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  46.7k|                    } else if is_ending {
   72|  2.50k|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  44.2k|                        None
   75|       |                    }
   76|       |                }
   77|   241k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|   241k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  40.5k|                        Some(if let Ok(result) = result {
   80|  3.54k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  37.0k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|   200k|                    } else if is_ending {
   85|  54.7k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|   146k|                        None
   88|       |                    }
   89|       |                }
   90|  1.40M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   251k|                if *data.get(1)? == b'>' {
   94|  27.1k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   166k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   143k|            b'_' => match data.get(1)? {
  100|   100k|                b':' => Self::recognize_blank_node_label(data),
  101|  31.7k|                c => Some((
  102|  31.7k|                    1,
  103|  31.7k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  31.7k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  51.3k|                if self.mode != N3LexerMode::NTriples
  108|  51.3k|                    && *data.get(1)? == b'"'
  109|  35.9k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  24.9k|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|  23.0k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   261k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   261k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  53.2k|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   143k|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  1.05M|            b'@' => self.recognize_lang_tag(data),
  124|  1.34M|            b'.' => match data.get(1) {
  125|   897k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.11M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   149k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  61.4k|                if *data.get(1)? == b'^' {
  131|  41.6k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  15.7k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   126k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  44.9k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  1.51M|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  85.3k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   632k|                if *data.get(1)? == b'|' {
  142|  7.01k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   551k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   122k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  65.2k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  81.9k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  29.1k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  24.8k|                if *data.get(1)? == b'}' {
  153|  3.33k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  14.3k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   220k|                if *data.get(1)? == b'>' {
  160|  15.4k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  96.8k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  4.43M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   173k|            b'?' => self.recognize_variable(data, is_ending),
  167|  5.86M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  16.0M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  35.4k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  35.4k|        Self { mode, unchecked }
  175|  35.4k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  1.71M|    fn recognize_iri(
  178|  1.71M|        &self,
  179|  1.71M|        data: &[u8],
  180|  1.71M|        options: &N3LexerOptions,
  181|  1.71M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  1.71M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  1.71M|        let mut string = Vec::new();
  184|  1.71M|        let mut i = 1;
  185|       |        loop {
  186|  1.74M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   683k|            string.extend_from_slice(&data[i..i + end]);
  188|   683k|            i += end;
  189|   683k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   607k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  75.9k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  58.8k|                    i += additional + 1;
  197|  58.8k|                    match c {
  198|  38.0k|                        Ok(c) => {
  199|  38.0k|                            let mut buf = [0; 4];
  200|  38.0k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  38.0k|                        }
  202|  20.7k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  1.71M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   607k|    fn parse_iri(
  211|   607k|        &self,
  212|   607k|        iri: Vec<u8>,
  213|   607k|        position: Range<usize>,
  214|   607k|        options: &N3LexerOptions,
  215|   607k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   607k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   578k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   578k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   578k|                    base_iri
  223|   578k|                        .resolve(&iri)
  224|   578k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   434k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|   607k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  5.86M|    fn recognize_pname_or_keyword<'a>(
  238|  5.86M|        &self,
  239|  5.86M|        data: &'a [u8],
  240|  5.86M|        is_ending: bool,
  241|  5.86M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  5.86M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  5.86M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  5.86M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  5.86M|        let mut i = 0;
  246|       |        loop {
  247|  12.5M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  11.7M|                match r {
  249|  11.1M|                    Ok((c, consumed)) => {
  250|  11.1M|                        if c == ':' {
  251|  2.00M|                            i += consumed;
  252|  2.00M|                            break;
  253|  9.18M|                        } else if i == 0 {
  254|  3.88M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.91M|                                return Some((
  256|  1.91M|                                    consumed,
  257|  1.91M|                                    Err((
  258|  1.91M|                                        0..consumed,
  259|  1.91M|                                        format!(
  260|  1.91M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.91M|                                        ),
  262|  1.91M|                                    )
  263|  1.91M|                                        .into()),
  264|  1.91M|                                ));
  265|  1.97M|                            }
  266|  1.97M|                            i += consumed;
  267|  5.29M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  4.68M|                            i += consumed;
  269|  4.68M|                        } else {
  270|   727k|                            while data[..i].ends_with(b".") {
  271|   112k|                                i -= 1;
  272|   112k|                            }
  273|   614k|                            return Some((
  274|   614k|                                i,
  275|   614k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   614k|                            ));
  277|       |                        }
  278|       |                    }
  279|   587k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   742k|            } else if is_ending {
  282|  5.75k|                while data[..i].ends_with(b".") {
  283|    579|                    i -= 1;
  284|    579|                }
  285|  5.17k|                return Some(if i == 0 {
  286|  1.18k|                    (
  287|  1.18k|                        1,
  288|  1.18k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.18k|                    )
  290|       |                } else {
  291|  3.99k|                    (
  292|  3.99k|                        i,
  293|  3.99k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  3.99k|                    )
  295|       |                });
  296|       |            } else {
  297|   737k|                return None;
  298|       |            }
  299|       |        }
  300|  2.00M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  2.00M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  2.00M|        if pn_prefix.ends_with('.') {
  305|  1.53k|            return Some((
  306|  1.53k|                i,
  307|  1.53k|                Err((
  308|  1.53k|                    0..i,
  309|  1.53k|                    format!(
  310|  1.53k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  1.53k|                )
  312|  1.53k|                    .into()),
  313|  1.53k|            ));
  314|  2.00M|        }
  315|       |
  316|   718k|        let (consumed, pn_local_result) =
  317|  2.00M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   718k|        Some((
  319|   718k|            consumed + i,
  320|   718k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   718k|            }),
  325|   718k|        ))
  326|  5.86M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   173k|    fn recognize_variable<'a>(
  329|   173k|        &self,
  330|   173k|        data: &'a [u8],
  331|   173k|        is_ending: bool,
  332|   173k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   173k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  84.1k|        Some((
  336|  84.1k|            consumed + 1,
  337|  84.1k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  84.1k|            }),
  344|  84.1k|        ))
  345|   173k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  2.18M|    fn recognize_optional_pn_local<'a>(
  348|  2.18M|        &self,
  349|  2.18M|        data: &'a [u8],
  350|  2.18M|        is_ending: bool,
  351|  2.18M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  2.18M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  2.18M|        let mut i = 0;
  354|  2.18M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  2.18M|        let mut position_that_is_already_in_buffer = 0;
  356|  2.18M|        let mut might_be_invalid_iri = false;
  357|  2.18M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  4.95M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  3.62M|                match r {
  361|  3.58M|                    Ok((c, consumed)) => {
  362|  3.58M|                        if c == '%' {
  363|  72.2k|                            i += 1;
  364|  72.2k|                            let a = char::from(*data.get(i)?);
  365|  54.3k|                            i += 1;
  366|  54.3k|                            let b = char::from(*data.get(i)?);
  367|  46.8k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  11.0k|                                return Some((i + 1, Err((
  369|  11.0k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  11.0k|                                ).into())));
  371|  35.7k|                            }
  372|  35.7k|                            i += 1;
  373|  35.7k|                            ends_with_unescaped_dot = 0;
  374|  3.51M|                        } else if c == '\\' {
  375|   356k|                            i += 1;
  376|   356k|                            let a = char::from(*data.get(i)?);
  377|   321k|                            if self.unchecked
  378|   264k|                                || matches!(
  379|   321k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  56.2k|                            {
  396|  56.2k|                                // ok to escape
  397|   264k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   257k|                                // ok to escape but requires IRI validation
  399|   257k|                                might_be_invalid_iri = true;
  400|   257k|                            } else {
  401|  6.92k|                                return Some((i + 1, Err((
  402|  6.92k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  6.92k|                                ).into())));
  404|       |                            }
  405|   314k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   314k|                            // We add the missing bytes
  407|   314k|                            if i - position_that_is_already_in_buffer > 1 {
  408|   154k|                                buffer.push_str(
  409|   154k|                                    match str_from_utf8(
  410|   154k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   154k|                                        position_that_is_already_in_buffer..i - 1,
  412|   154k|                                    ) {
  413|   154k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   159k|                            }
  418|   314k|                            buffer.push(a);
  419|   314k|                            i += 1;
  420|   314k|                            position_that_is_already_in_buffer = i;
  421|   314k|                            ends_with_unescaped_dot = 0;
  422|  3.15M|                        } else if i == 0 {
  423|  1.17M|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   434k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   744k|                            }
  427|   744k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|   744k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|   744k|                                        || c == ':';
  431|      0|                            }
  432|   744k|                            i += consumed;
  433|  1.97M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  1.50M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  1.50M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  1.50M|                                        || c == ':';
  438|      0|                            }
  439|  1.50M|                            i += consumed;
  440|  1.50M|                            ends_with_unescaped_dot = 0;
  441|   473k|                        } else if c == '.' {
  442|   169k|                            i += consumed;
  443|   169k|                            ends_with_unescaped_dot += 1;
  444|   169k|                        } else {
  445|   304k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  65.8k|                                buffer.push_str(
  447|  65.8k|                                    match str_from_utf8(
  448|  65.8k|                                        &data[position_that_is_already_in_buffer..i],
  449|  65.8k|                                        position_that_is_already_in_buffer..i,
  450|  65.8k|                                    ) {
  451|  65.8k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  65.8k|                                for _ in 0..ends_with_unescaped_dot {
  457|  25.2k|                                    buffer.pop();
  458|  25.2k|                                }
  459|  65.8k|                                i -= ends_with_unescaped_dot;
  460|  65.8k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   238k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   238k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   238k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   238k|                                i -= ends_with_unescaped_dot;
  469|   238k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   304k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  40.3k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  1.32M|            } else if is_ending {
  477|  5.97k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  1.25k|                    while buffer.ends_with('.') {
  480|    457|                        buffer.pop();
  481|    457|                        i -= 1;
  482|    457|                    }
  483|    795|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  5.17k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  5.17k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  5.65k|                    while let Some(d) = data.strip_suffix('.') {
  491|    479|                        data = d;
  492|    479|                        i -= 1;
  493|    479|                    }
  494|  5.17k|                    Cow::Borrowed(data)
  495|       |                };
  496|  5.97k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  1.31M|                return None;
  499|       |            }
  500|       |        }
  501|  2.18M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   100k|    fn recognize_blank_node_label(
  504|   100k|        data: &[u8],
  505|   100k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   100k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   100k|        let mut i = 2;
  508|       |        loop {
  509|   303k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   244k|                Ok((c, consumed)) => {
  511|   244k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   206k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|   184k|                    {
  514|   184k|                        // Ok
  515|   184k|                    } else if i > 2 && c == '.' {
  516|  22.4k|                        if data[i - 1] == b'.' {
  517|  4.22k|                            i -= 1;
  518|  4.22k|                            return Some((
  519|  4.22k|                                i,
  520|  4.22k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  4.22k|                            ));
  522|  18.2k|                        }
  523|  38.1k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|  38.1k|                    } else if data[i - 1] == b'.' {
  529|  2.90k|                        i -= 1;
  530|  2.90k|                        return Some((
  531|  2.90k|                            i,
  532|  2.90k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  2.90k|                        ));
  534|       |                    } else {
  535|  35.2k|                        return Some((
  536|  35.2k|                            i,
  537|  35.2k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  35.2k|                        ));
  539|       |                    }
  540|   202k|                    i += consumed;
  541|       |                }
  542|  4.65k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   100k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  1.05M|    fn recognize_lang_tag<'a>(
  548|  1.05M|        &self,
  549|  1.05M|        data: &'a [u8],
  550|  1.05M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  1.05M|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  1.05M|        let mut is_last_block_empty = true;
  553|  5.53M|        for (i, c) in data[1..].iter().enumerate() {
  554|  5.53M|            if c.is_ascii_alphabetic() {
  555|  4.94M|                is_last_block_empty = false;
  556|  4.94M|            } else if i == 0 {
  557|   122k|                return Some((
  558|   122k|                    1,
  559|   122k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|   122k|                ));
  561|   469k|            } else if is_last_block_empty {
  562|  8.95k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   460k|            } else if *c == b'-' {
  564|   191k|                is_last_block_empty = true;
  565|   191k|            } else {
  566|   269k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|   657k|        None
  570|  1.05M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   278k|    fn parse_lang_tag<'a>(
  573|   278k|        &self,
  574|   278k|        lang_tag: &'a [u8],
  575|   278k|        position: Range<usize>,
  576|   278k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   278k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   278k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   278k|            LanguageTag::parse(lang_tag)
  582|   278k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   228k|                .into_inner()
  584|       |        }))
  585|   278k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   166k|    fn recognize_string(
  588|   166k|        &self,
  589|   166k|        data: &[u8],
  590|   166k|        delimiter: u8,
  591|   166k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|   166k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|   166k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|   166k|        let mut string = String::new();
  595|   166k|        let mut i = 1;
  596|       |        loop {
  597|   173k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|   155k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|   146k|                Ok(s) => string.push_str(s),
  600|  8.63k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|   146k|            i += end;
  603|   146k|            match data[i] {
  604|   146k|                c if c == delimiter => {
  605|  92.7k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|  53.9k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|  52.5k|                    i += additional + 1;
  610|  52.5k|                    match c {
  611|  6.30k|                        Ok(c) => {
  612|  6.30k|                            string.push(c);
  613|  6.30k|                        }
  614|  46.2k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  46.2k|                            let end = memchr(delimiter, &data[i..])?;
  617|  13.7k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|   166k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  626|  78.1k|    fn recognize_long_string(
  627|  78.1k|        &self,
  628|  78.1k|        data: &[u8],
  629|  78.1k|        delimiter: u8,
  630|  78.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  631|  78.1k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  632|  78.1k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  633|  78.1k|        let mut string = String::new();
  634|  78.1k|        let mut i = 3;
  635|       |        loop {
  636|   155k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  637|   139k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  638|   133k|                Ok(s) => string.push_str(s),
  639|  6.32k|                Err(e) => return Some((end, Err(e))),
  640|       |            };
  641|   133k|            i += end;
  642|   133k|            match data[i] {
  643|   133k|                c if c == delimiter => {
  644|   122k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  645|  45.0k|                        return Some((i + 3, Ok(N3Token::String(string))));
  646|  72.1k|                    }
  647|  72.1k|                    i += 1;
  648|  72.1k|                    string.push(char::from(delimiter));
  649|       |                }
  650|       |                b'\\' => {
  651|  10.3k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  652|  9.90k|                    i += additional + 1;
  653|  9.90k|                    match c {
  654|  5.19k|                        Ok(c) => {
  655|  5.19k|                            string.push(c);
  656|  5.19k|                        }
  657|  4.71k|                        Err(e) => return Some((i, Err(e))),
  658|       |                    }
  659|       |                }
  660|      0|                _ => unreachable!(),
  661|       |            }
  662|       |        }
  663|  78.1k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|   677k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|   677k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|   677k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|   677k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|   677k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|   677k|        let mut i = 0;
  671|   677k|        let c = *data.first()?;
  672|   677k|        if matches!(c, b'+' | b'-') {
  673|   190k|            i += 1;
  674|   487k|        }
  675|       |        // We read the digits before .
  676|   677k|        let mut count_before: usize = 0;
  677|       |        loop {
  678|  1.19M|            let c = *data.get(i)?;
  679|  1.10M|            if c.is_ascii_digit() {
  680|   518k|                i += 1;
  681|   518k|                count_before += 1;
  682|   518k|            } else {
  683|   591k|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|   591k|        let count_after = if *data.get(i)? == b'.' {
  690|   196k|            i += 1;
  691|   196k|
  692|   196k|            let mut count_after = 0;
  693|       |            loop {
  694|   294k|                let c = *data.get(i)?;
  695|   231k|                if c.is_ascii_digit() {
  696|  98.1k|                    i += 1;
  697|  98.1k|                    count_after += 1;
  698|  98.1k|                } else {
  699|   132k|                    break;
  700|   132k|                }
  701|   132k|            }
  702|   132k|            Some(count_after)
  703|       |        } else {
  704|   395k|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|   528k|        let c = *data.get(i)?;
  709|   528k|        if matches!(c, b'e' | b'E') {
  710|  78.8k|            i += 1;
  711|       |
  712|  78.8k|            let c = *data.get(i)?;
  713|  60.9k|            if matches!(c, b'+' | b'-') {
  714|  3.94k|                i += 1;
  715|  56.9k|            }
  716|       |
  717|  60.9k|            let mut found = false;
  718|       |            loop {
  719|   127k|                let c = *data.get(i)?;
  720|  87.0k|                if c.is_ascii_digit() {
  721|  66.1k|                    i += 1;
  722|  66.1k|                    found = true;
  723|  66.1k|                } else {
  724|  20.8k|                    break;
  725|  20.8k|                }
  726|  20.8k|            }
  727|  20.8k|            Some((
  728|  20.8k|                i,
  729|  20.8k|                if !found {
  730|  9.15k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  11.6k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|  2.65k|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  9.03k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   449k|        } else if let Some(count_after) = count_after {
  738|  90.7k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  61.7k|                i -= 1;
  741|  61.7k|                Some((
  742|  61.7k|                    i,
  743|  61.7k|                    if count_before == 0 {
  744|  19.8k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  41.8k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  29.0k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   358k|                i,
  755|   358k|                if count_before == 0 {
  756|  67.0k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|   291k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|   677k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|   140k|    fn recognize_escape(
  765|   140k|        &self,
  766|   140k|        data: &[u8],
  767|   140k|        position: usize,
  768|   140k|        with_echar: bool,
  769|   140k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|   140k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|   140k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|   140k|        match *data.get(1)? {
  773|  58.6k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  52.2k|                Ok(c) => Some((5, Ok(c?))),
  775|  6.38k|                Err(e) => {
  776|  6.38k|                    if self.unchecked {
  777|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|      0|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|  6.38k|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  2.47k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|    603|                Ok(c) => Some((9, Ok(c?))),
  788|  1.86k|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|    601|            b't' if with_echar => Some((1, Ok('\t'))),
  791|    461|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|    876|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|    421|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|    515|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|    211|            b'"' if with_echar => Some((1, Ok('"'))),
  796|    714|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  7.35k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|  63.4k|            c => Some((
  799|  63.4k|                1,
  800|  63.4k|                Err((
  801|  63.4k|                    position..position + 2,
  802|  63.4k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|  63.4k|                )
  804|  63.4k|                    .into()),
  805|  63.4k|            )), // TODO: read until end of string
  806|       |        }
  807|   140k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|  61.0k|    fn recognize_hex_char(
  810|  61.0k|        data: &[u8],
  811|  61.0k|        len: usize,
  812|  61.0k|        escape_char: char,
  813|  61.0k|        position: usize,
  814|  61.0k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|  61.0k|        if data.len() < len {
  816|  14.4k|            return Ok(None);
  817|  46.6k|        }
  818|  46.6k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|  41.1k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|  41.1k|        })?;
  827|  38.7k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  38.7k|        })?;
  835|  38.3k|        Ok(Some(c))
  836|  61.0k|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  17.7M|    fn recognize_unicode_char(
  914|  17.7M|        data: &[u8],
  915|  17.7M|        position: usize,
  916|  17.7M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  17.7M|        let mut code_point: u32;
  918|  17.7M|        let bytes_needed: usize;
  919|  17.7M|        let mut lower_boundary = 0x80;
  920|  17.7M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  17.7M|        let byte = *data.first()?;
  923|  15.7M|        match byte {
  924|  15.7M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|  1.76M|            0xC2..=0xDF => {
  926|  1.47M|                bytes_needed = 1;
  927|  1.47M|                code_point = u32::from(byte) & 0x1F;
  928|  1.47M|            }
  929|   286k|            0xE0..=0xEF => {
  930|   116k|                if byte == 0xE0 {
  931|  13.4k|                    lower_boundary = 0xA0;
  932|   103k|                }
  933|   116k|                if byte == 0xED {
  934|  4.37k|                    upper_boundary = 0x9F;
  935|   112k|                }
  936|   116k|                bytes_needed = 2;
  937|   116k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|   169k|            0xF0..=0xF4 => {
  940|  80.0k|                if byte == 0xF0 {
  941|  2.17k|                    lower_boundary = 0x90;
  942|  77.8k|                }
  943|  80.0k|                if byte == 0xF4 {
  944|  2.40k|                    upper_boundary = 0x8F;
  945|  77.6k|                }
  946|  80.0k|                bytes_needed = 3;
  947|  80.0k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   432k|                return Some(Err((
  951|   432k|                    position..=position,
  952|   432k|                    "Invalid UTF-8 character encoding",
  953|   432k|                )
  954|   432k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|  1.85M|        for i in 1..=bytes_needed {
  959|  1.85M|            let byte = *data.get(i)?;
  960|  1.80M|            if byte < lower_boundary || upper_boundary < byte {
  961|   199k|                return Some(Err((
  962|   199k|                    position..=position + i,
  963|   199k|                    "Invalid UTF-8 character encoding",
  964|   199k|                )
  965|   199k|                    .into()));
  966|  1.60M|            }
  967|  1.60M|            lower_boundary = 0x80;
  968|  1.60M|            upper_boundary = 0xBF;
  969|  1.60M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  1.42M|        Some(
  973|  1.42M|            char::from_u32(code_point)
  974|  1.42M|                .map(|c| (c, bytes_needed + 1))
  975|  1.42M|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  1.42M|                }),
  982|  1.42M|        )
  983|  17.7M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  12.5M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  12.5M|        matches!(c,
  988|  7.59M|        'A'..='Z'
  989|  4.89M|        | 'a'..='z'
  990|  1.41M|        | '\u{00C0}'..='\u{00D6}'
  991|  1.41M|        | '\u{00D8}'..='\u{00F6}'
  992|  1.41M|        | '\u{00F8}'..='\u{02FF}'
  993|  1.08M|        | '\u{0370}'..='\u{037D}'
  994|  1.08M|        | '\u{037F}'..='\u{1FFF}'
  995|   107k|        | '\u{200C}'..='\u{200D}'
  996|   107k|        | '\u{2070}'..='\u{218F}'
  997|   107k|        | '\u{2C00}'..='\u{2FEF}'
  998|   107k|        | '\u{3001}'..='\u{D7FF}'
  999|  58.6k|        | '\u{F900}'..='\u{FDCF}'
 1000|  58.6k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  58.6k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  12.5M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  8.70M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  8.70M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  8.70M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  7.46M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  7.46M|        Self::is_possible_pn_chars_u(c)
 1012|  2.45M|            || matches!(c,
 1013|  1.58M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  7.46M|    }
_RNvMs_NtCs3Okv3MbnXN6_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|  2.24M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|  2.24M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|  2.24M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|  2.24M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|  2.24M|    }
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer18resolve_local_name:
 1023|   373k|pub fn resolve_local_name(
 1024|   373k|    prefix: &str,
 1025|   373k|    local: &str,
 1026|   373k|    might_be_invalid_iri: bool,
 1027|   373k|    prefixes: &HashMap<String, Iri<String>>,
 1028|   373k|) -> Result<NamedNode, String> {
 1029|   373k|    if let Some(start) = prefixes.get(prefix) {
 1030|   278k|        let iri = format!("{start}{local}");
 1031|   278k|        if might_be_invalid_iri || start.path().is_empty() {
 1032|       |            // We validate again. We always validate if the local part might be the IRI authority.
 1033|   237k|            if let Err(e) = Iri::parse(iri.as_str()) {
 1034|  60.6k|                return Err(format!(
 1035|  60.6k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
 1036|  60.6k|                ));
 1037|   176k|            }
 1038|  40.9k|        }
 1039|   217k|        Ok(NamedNode::new_unchecked(iri))
 1040|       |    } else {
 1041|  95.8k|        Err(format!("The prefix {prefix}: has not been declared"))
 1042|       |    }
 1043|   373k|}
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer13str_from_utf8:
 1045|  4.12M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  4.12M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  4.12M|    })
 1053|  4.12M|}
_RNvNtCs3Okv3MbnXN6_5oxttl5lexer16string_from_utf8:
 1055|   607k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|   607k|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|   607k|    })
 1064|   607k|}

_RNvMsb_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_8N3Parser3newCskGjlBdqDDaP_2n3:
  220|  35.4k|    pub fn new() -> Self {
  221|  35.4k|        Self::default()
  222|  35.4k|    }
_RINvMsb_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_8N3Parser13with_base_iriReECskGjlBdqDDaP_2n3:
  236|  35.4k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  237|  35.4k|        self.base = Some(Iri::parse(base_iri.into())?);
  238|  35.4k|        Ok(self)
  239|  35.4k|    }
_RNvXs_NtCs3Okv3MbnXN6_5oxttl2n3NtB4_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCsg6vp76A8CLh_5oxrdf10named_node9NamedNodeE4fromB6_:
   53|   277k|    fn from(node: NamedNode) -> Self {
   54|   277k|        Self::NamedNode(node)
   55|   277k|    }
_RNvXs0_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   60|   141k|    fn from(node: NamedNodeRef<'_>) -> Self {
   61|   141k|        Self::NamedNode(node.into_owned())
   62|   141k|    }
_RNvXs1_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCsg6vp76A8CLh_5oxrdf10blank_node9BlankNodeE4fromB7_:
   67|  1.51M|    fn from(node: BlankNode) -> Self {
   68|  1.51M|        Self::BlankNode(node)
   69|  1.51M|    }
_RNvXs2_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCsg6vp76A8CLh_5oxrdf7literal7LiteralE4fromB7_:
   74|   290k|    fn from(literal: Literal) -> Self {
   75|   290k|        Self::Literal(literal)
   76|   290k|    }
_RNvXs8_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCsg6vp76A8CLh_5oxrdf8variable8VariableE4fromB7_:
  132|  25.8k|    fn from(variable: Variable) -> Self {
  133|  25.8k|        Self::Variable(variable)
  134|  25.8k|    }
_RNvMsb_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_8N3Parser5parse:
  401|  35.4k|    pub fn parse(self) -> LowLevelN3Reader {
  402|  35.4k|        LowLevelN3Reader {
  403|  35.4k|            parser: N3Recognizer::new_parser(
  404|  35.4k|                Vec::new(),
  405|  35.4k|                false,
  406|  35.4k|                self.unchecked,
  407|  35.4k|                self.base,
  408|  35.4k|                self.prefixes,
  409|  35.4k|            ),
  410|  35.4k|        }
  411|  35.4k|    }
_RNvMsg_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  765|  6.17M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  766|  6.17M|        self.parser.extend_from_slice(other)
  767|  6.17M|    }
_RNvMsg_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  772|  35.4k|    pub fn end(&mut self) {
  773|  35.4k|        self.parser.end()
  774|  35.4k|    }
_RNvMsg_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  777|  35.4k|    pub fn is_end(&self) -> bool {
  778|  35.4k|        self.parser.is_end()
  779|  35.4k|    }
_RNvMsg_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  785|  10.3M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  786|  10.3M|        self.parser.read_next()
  787|  10.3M|    }
_RNvXsh_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  871|  3.08M|    fn error_recovery_state(mut self) -> Self {
  872|  3.08M|        self.stack.clear();
  873|  3.08M|        self.terms.clear();
  874|  3.08M|        self.predicates.clear();
  875|  3.08M|        self.contexts.clear();
  876|  3.08M|        self
  877|  3.08M|    }
_RNvXsh_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  879|  6.78M|    fn recognize_next(
  880|  6.78M|        mut self,
  881|  6.78M|        token: N3Token<'_>,
  882|  6.78M|        context: &mut N3RecognizerContext,
  883|  6.78M|        results: &mut Vec<N3Quad>,
  884|  6.78M|        errors: &mut Vec<RuleRecognizerError>,
  885|  6.78M|    ) -> Self {
  886|  18.1M|        while let Some(rule) = self.stack.pop() {
  887|  15.2M|            match rule {
  888|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  889|       |                // [2]  n3Statement      ::=  n3Directive | triples
  890|       |                // [3]  n3Directive      ::=  prefixID | base
  891|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  892|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  893|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  894|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  895|       |                // [8]  base             ::=  "@base" IRIREF
  896|       |                N3State::N3Doc => {
  897|  1.02M|                    self.stack.push(N3State::N3Doc);
  898|  90.9k|                    match token {
  899|   140k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  900|  49.5k|                            self.stack.push(N3State::BaseExpectIri);
  901|  49.5k|                            return self;
  902|       |                        }
  903|  90.9k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  904|  2.38k|                            self.stack.push(N3State::PrefixExpectPrefix);
  905|  2.38k|                            return self;
  906|       |                        }
  907|   166k|                        N3Token::LangTag("prefix") => {
  908|   132k|                            self.stack.push(N3State::N3DocExpectDot);
  909|   132k|                            self.stack.push(N3State::PrefixExpectPrefix);
  910|   132k|                            return self;
  911|       |                        }
  912|  34.1k|                        N3Token::LangTag("base") => {
  913|  1.96k|                            self.stack.push(N3State::N3DocExpectDot);
  914|  1.96k|                            self.stack.push(N3State::BaseExpectIri);
  915|  1.96k|                            return self;
  916|       |                        }
  917|   835k|                        _ => {
  918|   835k|                            self.stack.push(N3State::N3DocExpectDot);
  919|   835k|                            self.stack.push(N3State::Triples);
  920|   835k|                        }
  921|       |                    }
  922|       |                }
  923|       |                N3State::N3DocExpectDot => {
  924|   147k|                    if token == N3Token::Punctuation(".") {
  925|  60.7k|                        return self;
  926|  86.8k|                    }
  927|  86.8k|                    errors.push("A dot is expected at the end of N3 statements".into());
  928|       |                }
  929|  55.4k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  930|  47.4k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  931|  47.4k|                                self
  932|       |                    } else {
  933|  8.02k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  934|       |                },
  935|   118k|                N3State::PrefixExpectPrefix => return match token {
  936|   118k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  937|   113k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  938|   113k|                        self
  939|       |                    }
  940|       |                    _ => {
  941|  18.3k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  942|       |                    }
  943|       |                },
  944|   106k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  945|   100k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  946|   100k|                    self
  947|  5.17k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  948|       |                },
  949|       |                // [9]  triples  ::=  subject predicateObjectList?
  950|  1.24M|                N3State::Triples => {
  951|  1.24M|                    self.stack.push(N3State::TriplesMiddle);
  952|  1.24M|                    self.stack.push(N3State::Path);
  953|  1.24M|                }
  954|   240k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  955|   163k|                    self.stack.push(N3State::TriplesEnd);
  956|   163k|                    self.stack.push(N3State::PredicateObjectList);
  957|   163k|                },
  958|  45.5k|                N3State::TriplesEnd => {
  959|  45.5k|                    self.terms.pop();
  960|  45.5k|                }
  961|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  962|  1.33M|                N3State::PredicateObjectList => {
  963|  1.33M|                    self.stack.push(N3State::PredicateObjectListEnd);
  964|  1.33M|                    self.stack.push(N3State::ObjectsList);
  965|  1.33M|                    self.stack.push(N3State::Verb);
  966|  1.33M|                }
  967|       |                N3State::PredicateObjectListEnd => {
  968|   146k|                    self.predicates.pop();
  969|   146k|                    if token == N3Token::Punctuation(";") {
  970|  18.2k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  971|  18.2k|                        return self;
  972|   127k|                    }
  973|       |                }
  974|  40.7k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  975|  22.7k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  976|  22.7k|                    return self;
  977|  17.9k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  978|  7.12k|                    self.stack.push(N3State::PredicateObjectListEnd);
  979|  7.12k|                    self.stack.push(N3State::ObjectsList);
  980|  7.12k|                    self.stack.push(N3State::Verb);
  981|  7.12k|                },
  982|       |                // [11]  objectList  ::=  object ( "," object) *
  983|   288k|                N3State::ObjectsList => {
  984|   288k|                    self.stack.push(N3State::ObjectsListEnd);
  985|   288k|                    self.stack.push(N3State::Path);
  986|   288k|                }
  987|       |                N3State::ObjectsListEnd => {
  988|   152k|                    let object = self.terms.pop().unwrap();
  989|   152k|                    let subject = self.terms.last().unwrap().clone();
  990|   152k|                    results.push(match self.predicates.last().unwrap().clone() {
  991|  95.8k|                        Predicate::Regular(predicate) => self.quad(
  992|  95.8k|                            subject,
  993|  95.8k|                            predicate,
  994|  95.8k|                            object,
  995|  95.8k|                        ),
  996|  56.6k|                        Predicate::Inverted(predicate) => self.quad(
  997|  56.6k|                            object,
  998|  56.6k|                            predicate,
  999|  56.6k|                            subject,
 1000|  56.6k|                        )
 1001|       |                    });
 1002|   152k|                    if token == N3Token::Punctuation(",") {
 1003|  6.27k|                        self.stack.push(N3State::ObjectsListEnd);
 1004|  6.27k|                        self.stack.push(N3State::Path);
 1005|  6.27k|                        return self;
 1006|   146k|                    }
 1007|       |                }
 1008|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
 1009|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
 1010|  1.34M|                N3State::Verb => match token {
 1011|  45.7k|                    N3Token::PlainKeyword("a") => {
 1012|  21.8k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
 1013|  21.8k|                        return self;
 1014|       |                    }
 1015|  23.8k|                    N3Token::PlainKeyword("has") => {
 1016|  1.38k|                        self.stack.push(N3State::AfterRegularVerb);
 1017|  1.38k|                        self.stack.push(N3State::Path);
 1018|  1.38k|                        return self;
 1019|       |                    }
 1020|  22.4k|                    N3Token::PlainKeyword("is") => {
 1021|  6.13k|                        self.stack.push(N3State::AfterVerbIs);
 1022|  6.13k|                        self.stack.push(N3State::Path);
 1023|  6.13k|                        return self;
 1024|       |                    }
 1025|  1.03M|                    N3Token::Punctuation("=") => {
 1026|  11.3k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
 1027|  11.3k|                        return self;
 1028|       |                    }
 1029|  1.01M|                    N3Token::Punctuation("=>") => {
 1030|  9.10k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1031|  9.10k|                        return self;
 1032|       |                    }
 1033|  1.01M|                    N3Token::Punctuation("<=") => {
 1034|    861|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1035|    861|                        return self;
 1036|       |                    }
 1037|  1.00M|                    N3Token::Punctuation("<-") => {
 1038|  57.3k|                        self.stack.push(N3State::AfterInvertedVerb);
 1039|  57.3k|                        self.stack.push(N3State::Path);
 1040|  57.3k|                        return self;
 1041|       |                    }
 1042|  1.23M|                    _ => {
 1043|  1.23M|                        self.stack.push(N3State::AfterRegularVerb);
 1044|  1.23M|                        self.stack.push(N3State::Path);
 1045|  1.23M|                    }
 1046|       |                }
 1047|   190k|                N3State::AfterRegularVerb => {
 1048|   190k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
 1049|   190k|                }
 1050|  57.0k|                N3State::AfterInvertedVerb => {
 1051|  57.0k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1052|  57.0k|                }
 1053|  6.10k|                N3State::AfterVerbIs => return match token {
 1054|  5.04k|                    N3Token::PlainKeyword("of") => {
 1055|  2.81k|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1056|  2.81k|                        self
 1057|       |                    }
 1058|       |                    _ => {
 1059|  3.28k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
 1060|       |                    }
 1061|       |                },
 1062|       |                // [13]  subject     ::=  expression
 1063|       |                // [15]  object      ::=  expression
 1064|       |                // [16]  expression  ::=  path
 1065|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
 1066|  2.94M|                N3State::Path => {
 1067|  2.94M|                    self.stack.push(N3State::PathFollowUp);
 1068|  2.94M|                    self.stack.push(N3State::PathItem);
 1069|  2.94M|                }
 1070|   705k|                N3State::PathFollowUp => match token {
 1071|   520k|                    N3Token::Punctuation("!") => {
 1072|  4.50k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
 1073|  4.50k|                        self.stack.push(N3State::PathItem);
 1074|  4.50k|                        return self;
 1075|       |                    }
 1076|   516k|                    N3Token::Punctuation("^") => {
 1077|  5.14k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
 1078|  5.14k|                        self.stack.push(N3State::PathItem);
 1079|  5.14k|                        return self;
 1080|       |                    }
 1081|   695k|                    _ => ()
 1082|       |                },
 1083|  7.36k|                N3State::PathAfterIndicator { is_inverse } => {
 1084|  7.36k|                    let predicate = self.terms.pop().unwrap();
 1085|  7.36k|                    let previous = self.terms.pop().unwrap();
 1086|  7.36k|                    let current = BlankNode::default();
 1087|  7.36k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
 1088|  7.36k|                    self.terms.push(current.into());
 1089|  7.36k|                    self.stack.push(N3State::PathFollowUp);
 1090|       |                }
 1091|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
 1092|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
 1093|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
 1094|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
 1095|       |                // [22]  collection             ::=  "(" object* ")"
 1096|       |                // [23]  formula                ::=  "{" formulaContent? "}"
 1097|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
 1098|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
 1099|       |                // [27]  iri                    ::=  IRIREF | prefixedName
 1100|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
 1101|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
 1102|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
 1103|       |                N3State::PathItem => {
 1104|  2.94M|                    return match token {
 1105|  51.4k|                        N3Token::IriRef(iri) => {
 1106|  51.4k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
 1107|  51.4k|                            self
 1108|       |                        }
 1109|   346k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1110|   202k|                            Ok(t) => {
 1111|   202k|                                self.terms.push(t.into());
 1112|   202k|                                self
 1113|       |                            }
 1114|   143k|                            Err(e) =>  self.error(errors, e)
 1115|       |                        }
 1116|  36.7k|                        N3Token::BlankNodeLabel(bnode) => {
 1117|  36.7k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
 1118|  36.7k|                            self
 1119|       |                        }
 1120|  25.8k|                        N3Token::Variable(name) => {
 1121|  25.8k|                            self.terms.push(Variable::new_unchecked(name).into());
 1122|  25.8k|                            self
 1123|       |                        }
 1124|  2.00M|                        N3Token::Punctuation("[") => {
 1125|  1.21M|                            self.stack.push(N3State::PropertyListMiddle);
 1126|  1.21M|                            self
 1127|       |                        }
 1128|   791k|                        N3Token::Punctuation("(") => {
 1129|  84.6k|                            self.stack.push(N3State::CollectionBeginning);
 1130|  84.6k|                            self
 1131|       |                        }
 1132|   106k|                        N3Token::String(value) => {
 1133|   106k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
 1134|   106k|                            self
 1135|       |                        }
 1136|   170k|                        N3Token::Integer(v) => {
 1137|   170k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
 1138|   170k|                            self
 1139|       |                        }
 1140|  21.8k|                        N3Token::Decimal(v) => {
 1141|  21.8k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1142|  21.8k|                            self
 1143|       |                        }
 1144|  8.66k|                        N3Token::Double(v) => {
 1145|  8.66k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1146|  8.66k|                            self
 1147|       |                        }
 1148|   133k|                        N3Token::PlainKeyword("true") => {
 1149|  1.98k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1150|  1.98k|                            self
 1151|       |                        }
 1152|   131k|                        N3Token::PlainKeyword("false") => {
 1153|  2.65k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1154|  2.65k|                            self
 1155|       |                        }
 1156|   706k|                        N3Token::Punctuation("{") => {
 1157|   441k|                            self.contexts.push(BlankNode::default());
 1158|   441k|                            self.stack.push(N3State::FormulaContent);
 1159|   441k|                            self
 1160|       |                        }
 1161|       |                        _ =>
 1162|   440k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1163|       |
 1164|       |                    }
 1165|       |                }
 1166|  1.19M|                N3State::PropertyListMiddle => match token {
 1167|   932k|                    N3Token::Punctuation("]") => {
 1168|  3.60k|                        self.terms.push(BlankNode::default().into());
 1169|  3.60k|                        return self;
 1170|       |                    }
 1171|  51.8k|                    N3Token::PlainKeyword("id") => {
 1172|  14.8k|                        self.stack.push(N3State::IriPropertyList);
 1173|  14.8k|                        return self;
 1174|       |                    }
 1175|  1.17M|                    _ => {
 1176|  1.17M|                        self.terms.push(BlankNode::default().into());
 1177|  1.17M|                        self.stack.push(N3State::PropertyListEnd);
 1178|  1.17M|                        self.stack.push(N3State::PredicateObjectList);
 1179|  1.17M|                    }
 1180|       |                }
 1181|  93.1k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1182|  3.70k|                    return self;
 1183|  89.4k|                } else {
 1184|  89.4k|                    errors.push("blank node property lists should end with a ']'".into());
 1185|  89.4k|                }
 1186|  13.3k|                N3State::IriPropertyList => return match token {
 1187|  1.09k|                    N3Token::IriRef(id) => {
 1188|  1.09k|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1189|  1.09k|                        self.stack.push(N3State::PropertyListEnd);
 1190|  1.09k|                        self.stack.push(N3State::PredicateObjectList);
 1191|  1.09k|                        self
 1192|       |                    }
 1193|  9.78k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1194|  1.35k|                        Ok(t) => {
 1195|  1.35k|                            self.terms.push(t.into());
 1196|  1.35k|                            self.stack.push(N3State::PropertyListEnd);
 1197|  1.35k|                            self.stack.push(N3State::PredicateObjectList);
 1198|  1.35k|                            self
 1199|       |                        }
 1200|  8.42k|                        Err(e) => {
 1201|  8.42k|                            self.error(errors, e)
 1202|       |                        }
 1203|       |                    }
 1204|       |                    _ => {
 1205|  2.49k|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1206|       |                    }
 1207|       |                },
 1208|  82.6k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1209|  8.39k|                    self.terms.push(rdf::NIL.into());
 1210|  8.39k|                    return self;
 1211|  74.2k|                } else {
 1212|  74.2k|                    let root = BlankNode::default();
 1213|  74.2k|                    self.terms.push(root.clone().into());
 1214|  74.2k|                    self.terms.push(root.into());
 1215|  74.2k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1216|  74.2k|                    self.stack.push(N3State::Path);
 1217|  74.2k|                },
 1218|       |                N3State::CollectionPossibleEnd => {
 1219|  48.5k|                    let value = self.terms.pop().unwrap();
 1220|  48.5k|                    let old = self.terms.pop().unwrap();
 1221|  48.5k|                    results.push(self.quad(
 1222|  48.5k|                        old.clone(),
 1223|  48.5k|                        rdf::FIRST,
 1224|  48.5k|                        value,
 1225|  48.5k|                    ));
 1226|  48.5k|                    if let N3Token::Punctuation(")") = token {
 1227|  13.8k|                        results.push(self.quad(
 1228|  13.8k|                            old,
 1229|  13.8k|                            rdf::REST,
 1230|  13.8k|                            rdf::NIL,
 1231|  13.8k|                        ));
 1232|  13.8k|                        return self;
 1233|  34.6k|                    }
 1234|  34.6k|                    let new = BlankNode::default();
 1235|  34.6k|                    results.push(self.quad(
 1236|  34.6k|                        old,
 1237|  34.6k|                        rdf::REST,
 1238|  34.6k|                        new.clone(),
 1239|  34.6k|                    ));
 1240|  34.6k|                    self.terms.push(new.into());
 1241|  34.6k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1242|  34.6k|                    self.stack.push(N3State::Path);
 1243|       |                }
 1244|   101k|                N3State::LiteralPossibleSuffix { value } => {
 1245|   101k|                    match token {
 1246|  7.53k|                        N3Token::LangTag(lang) => {
 1247|  7.53k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1248|  7.53k|                            return self;
 1249|       |                        }
 1250|  45.7k|                        N3Token::Punctuation("^^") => {
 1251|  33.2k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1252|  33.2k|                            return self;
 1253|       |                        }
 1254|  60.6k|                        _ => {
 1255|  60.6k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1256|  60.6k|                        }
 1257|       |                    }
 1258|       |                }
 1259|  30.6k|                N3State::LiteralExpectDatatype { value } => {
 1260|  30.6k|                    match token {
 1261|  3.80k|                        N3Token::IriRef(datatype) => {
 1262|  3.80k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1263|  3.80k|                            return self;
 1264|       |                        }
 1265|  18.0k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1266|  13.2k|                            Ok(datatype) => {
 1267|  13.2k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1268|  13.2k|                                return self;
 1269|       |                            }
 1270|  4.75k|                            Err(e) => {
 1271|  4.75k|                                return self.error(errors, e);
 1272|       |                            }
 1273|       |                        }
 1274|  8.75k|                        _ => {
 1275|  8.75k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1276|  8.75k|                            self.stack.clear();
 1277|  8.75k|                        }
 1278|       |                    }
 1279|       |                }
 1280|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1281|       |                N3State::FormulaContent => {
 1282|  25.6k|                    match token {
 1283|   372k|                        N3Token::Punctuation("}") => {
 1284|  45.8k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1285|  45.8k|                            return self;
 1286|       |                        }
 1287|  28.5k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1288|  2.93k|                            self.stack.push(N3State::FormulaContent);
 1289|  2.93k|                            self.stack.push(N3State::BaseExpectIri);
 1290|  2.93k|                            return self;
 1291|       |                        }
 1292|  25.6k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1293|  1.22k|                            self.stack.push(N3State::FormulaContent);
 1294|  1.22k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1295|  1.22k|                            return self;
 1296|       |                        }
 1297|  18.9k|                        N3Token::LangTag("prefix") => {
 1298|  2.51k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1299|  2.51k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1300|  2.51k|                            return self;
 1301|       |                        }
 1302|  16.4k|                        N3Token::LangTag("base") => {
 1303|  3.02k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1304|  3.02k|                            self.stack.push(N3State::BaseExpectIri);
 1305|  3.02k|                            return self;
 1306|       |                        }
 1307|   404k|                        _ => {
 1308|   404k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1309|   404k|                            self.stack.push(N3State::Triples);
 1310|   404k|                        }
 1311|       |                    }
 1312|       |                }
 1313|       |                N3State::FormulaContentExpectDot => {
 1314|  44.1k|                    match token {
 1315|  40.7k|                        N3Token::Punctuation("}") => {
 1316|  20.7k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1317|  20.7k|                            return self;
 1318|       |                        }
 1319|  20.0k|                        N3Token::Punctuation(".") => {
 1320|  6.32k|                            self.stack.push(N3State::FormulaContent);
 1321|  6.32k|                            return self;
 1322|       |                        }
 1323|  17.1k|                        _ => {
 1324|  17.1k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1325|  17.1k|                            self.stack.push(N3State::FormulaContent);
 1326|  17.1k|                        }
 1327|       |                    }
 1328|       |                }
 1329|       |            }
 1330|       |        }
 1331|       |        // Empty stack
 1332|  2.92M|        if token == N3Token::Punctuation(".") {
 1333|   918k|            self.stack.push(N3State::N3Doc);
 1334|   918k|            self
 1335|       |        } else {
 1336|  2.00M|            self
 1337|       |        }
 1338|  6.78M|    }
_RNvXsh_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1340|  35.4k|    fn recognize_end(
 1341|  35.4k|        self,
 1342|  35.4k|        _state: &mut N3RecognizerContext,
 1343|  35.4k|        _results: &mut Vec<Self::Output>,
 1344|  35.4k|        errors: &mut Vec<RuleRecognizerError>,
 1345|  35.4k|    ) {
 1346|  35.4k|        match &*self.stack {
 1347|  35.4k|            [] | [N3State::N3Doc] => (),
 1348|  5.40k|            _ => errors.push("Unexpected end".into()), // TODO
 1349|       |        }
 1350|  35.4k|    }
_RNvXsh_NtCs3Okv3MbnXN6_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1352|  16.1M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1353|  16.1M|        &context.lexer_options
 1354|  16.1M|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB8_:
 1358|  35.4k|    pub fn new_parser<B>(
 1359|  35.4k|        data: B,
 1360|  35.4k|        is_ending: bool,
 1361|  35.4k|        unchecked: bool,
 1362|  35.4k|        base_iri: Option<Iri<String>>,
 1363|  35.4k|        prefixes: HashMap<String, Iri<String>>,
 1364|  35.4k|    ) -> Parser<B, Self> {
 1365|  35.4k|        Parser::new(
 1366|  35.4k|            Lexer::new(
 1367|  35.4k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1368|  35.4k|                data,
 1369|  35.4k|                is_ending,
 1370|  35.4k|                MIN_BUFFER_SIZE,
 1371|  35.4k|                MAX_BUFFER_SIZE,
 1372|  35.4k|                true,
 1373|  35.4k|                Some(b"#"),
 1374|  35.4k|            ),
 1375|  35.4k|            Self {
 1376|  35.4k|                stack: vec![N3State::N3Doc],
 1377|  35.4k|                terms: Vec::new(),
 1378|  35.4k|                predicates: Vec::new(),
 1379|  35.4k|                contexts: Vec::new(),
 1380|  35.4k|            },
 1381|  35.4k|            N3RecognizerContext {
 1382|  35.4k|                lexer_options: N3LexerOptions { base_iri },
 1383|  35.4k|                prefixes,
 1384|  35.4k|            },
 1385|  35.4k|        )
 1386|  35.4k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
 1389|   156k|    fn error(
 1390|   156k|        mut self,
 1391|   156k|        errors: &mut Vec<RuleRecognizerError>,
 1392|   156k|        msg: impl Into<RuleRecognizerError>,
 1393|   156k|    ) -> Self {
 1394|   156k|        errors.push(msg.into());
 1395|   156k|        self.stack.clear();
 1396|   156k|        self
 1397|   156k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1389|   477k|    fn error(
 1390|   477k|        mut self,
 1391|   477k|        errors: &mut Vec<RuleRecognizerError>,
 1392|   477k|        msg: impl Into<RuleRecognizerError>,
 1393|   477k|    ) -> Self {
 1394|   477k|        errors.push(msg.into());
 1395|   477k|        self.stack.clear();
 1396|   477k|        self
 1397|   477k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1399|   152k|    fn quad(
 1400|   152k|        &self,
 1401|   152k|        subject: impl Into<N3Term>,
 1402|   152k|        predicate: impl Into<N3Term>,
 1403|   152k|        object: impl Into<N3Term>,
 1404|   152k|    ) -> N3Quad {
 1405|   152k|        N3Quad {
 1406|   152k|            subject: subject.into(),
 1407|   152k|            predicate: predicate.into(),
 1408|   152k|            object: object.into(),
 1409|   152k|            graph_name: self
 1410|   152k|                .contexts
 1411|   152k|                .last()
 1412|   152k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|   152k|        }
 1414|   152k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCsg6vp76A8CLh_5oxrdf10blank_node9BlankNodeEB8_:
 1399|  4.11k|    fn quad(
 1400|  4.11k|        &self,
 1401|  4.11k|        subject: impl Into<N3Term>,
 1402|  4.11k|        predicate: impl Into<N3Term>,
 1403|  4.11k|        object: impl Into<N3Term>,
 1404|  4.11k|    ) -> N3Quad {
 1405|  4.11k|        N3Quad {
 1406|  4.11k|            subject: subject.into(),
 1407|  4.11k|            predicate: predicate.into(),
 1408|  4.11k|            object: object.into(),
 1409|  4.11k|            graph_name: self
 1410|  4.11k|                .contexts
 1411|  4.11k|                .last()
 1412|  4.11k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  4.11k|        }
 1414|  4.11k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1399|  13.8k|    fn quad(
 1400|  13.8k|        &self,
 1401|  13.8k|        subject: impl Into<N3Term>,
 1402|  13.8k|        predicate: impl Into<N3Term>,
 1403|  13.8k|        object: impl Into<N3Term>,
 1404|  13.8k|    ) -> N3Quad {
 1405|  13.8k|        N3Quad {
 1406|  13.8k|            subject: subject.into(),
 1407|  13.8k|            predicate: predicate.into(),
 1408|  13.8k|            object: object.into(),
 1409|  13.8k|            graph_name: self
 1410|  13.8k|                .contexts
 1411|  13.8k|                .last()
 1412|  13.8k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  13.8k|        }
 1414|  13.8k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1399|  48.5k|    fn quad(
 1400|  48.5k|        &self,
 1401|  48.5k|        subject: impl Into<N3Term>,
 1402|  48.5k|        predicate: impl Into<N3Term>,
 1403|  48.5k|        object: impl Into<N3Term>,
 1404|  48.5k|    ) -> N3Quad {
 1405|  48.5k|        N3Quad {
 1406|  48.5k|            subject: subject.into(),
 1407|  48.5k|            predicate: predicate.into(),
 1408|  48.5k|            object: object.into(),
 1409|  48.5k|            graph_name: self
 1410|  48.5k|                .contexts
 1411|  48.5k|                .last()
 1412|  48.5k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  48.5k|        }
 1414|  48.5k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1399|  34.6k|    fn quad(
 1400|  34.6k|        &self,
 1401|  34.6k|        subject: impl Into<N3Term>,
 1402|  34.6k|        predicate: impl Into<N3Term>,
 1403|  34.6k|        object: impl Into<N3Term>,
 1404|  34.6k|    ) -> N3Quad {
 1405|  34.6k|        N3Quad {
 1406|  34.6k|            subject: subject.into(),
 1407|  34.6k|            predicate: predicate.into(),
 1408|  34.6k|            object: object.into(),
 1409|  34.6k|            graph_name: self
 1410|  34.6k|                .contexts
 1411|  34.6k|                .last()
 1412|  34.6k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  34.6k|        }
 1414|  34.6k|    }
_RINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCsg6vp76A8CLh_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1399|  3.24k|    fn quad(
 1400|  3.24k|        &self,
 1401|  3.24k|        subject: impl Into<N3Term>,
 1402|  3.24k|        predicate: impl Into<N3Term>,
 1403|  3.24k|        object: impl Into<N3Term>,
 1404|  3.24k|    ) -> N3Quad {
 1405|  3.24k|        N3Quad {
 1406|  3.24k|            subject: subject.into(),
 1407|  3.24k|            predicate: predicate.into(),
 1408|  3.24k|            object: object.into(),
 1409|  3.24k|            graph_name: self
 1410|  3.24k|                .contexts
 1411|  3.24k|                .last()
 1412|  3.24k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  3.24k|        }
 1414|  3.24k|    }
_RNCINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1412|  18.9k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCsg6vp76A8CLh_5oxrdf10blank_node9BlankNodeE0Ba_:
 1412|    942|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1412|  1.97k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1412|  17.9k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsg6vp76A8CLh_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1412|  15.9k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs3Okv3MbnXN6_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCsg6vp76A8CLh_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1412|    841|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   31|  2.27M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.27M|        Self {
   33|  2.27M|            location,
   34|  2.27M|            message: message.into(),
   35|  2.27M|        }
   36|  2.27M|    }
_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   884k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   884k|        Self {
   33|   884k|            location,
   34|   884k|            message: message.into(),
   35|   884k|        }
   36|   884k|    }
_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   41|  49.6k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  49.6k|        (*location.start()..*location.end() + 1, message).into()
   43|  49.6k|    }
_RNvXs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   632k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   632k|        (*location.start()..*location.end() + 1, message).into()
   43|   632k|    }
_RNvXs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   47|  31.7k|    fn from((location, message): (usize, S)) -> Self {
   48|  31.7k|        (location..=location, message).into()
   49|  31.7k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   73|  35.4k|    pub fn new(
   74|  35.4k|        parser: R,
   75|  35.4k|        data: B,
   76|  35.4k|        is_ending: bool,
   77|  35.4k|        min_buffer_size: usize,
   78|  35.4k|        max_buffer_size: usize,
   79|  35.4k|        is_line_jump_whitespace: bool,
   80|  35.4k|        line_comment_start: Option<&'static [u8]>,
   81|  35.4k|    ) -> Self {
   82|  35.4k|        Self {
   83|  35.4k|            parser,
   84|  35.4k|            data,
   85|  35.4k|            position: Position {
   86|  35.4k|                line_start_buffer_offset: 0,
   87|  35.4k|                buffer_offset: 0,
   88|  35.4k|                global_offset: 0,
   89|  35.4k|                global_line: 0,
   90|  35.4k|            },
   91|  35.4k|            previous_position: Position {
   92|  35.4k|                line_start_buffer_offset: 0,
   93|  35.4k|                buffer_offset: 0,
   94|  35.4k|                global_offset: 0,
   95|  35.4k|                global_line: 0,
   96|  35.4k|            },
   97|  35.4k|            is_ending,
   98|  35.4k|            min_buffer_size,
   99|  35.4k|            max_buffer_size,
  100|  35.4k|            is_line_jump_whitespace,
  101|  35.4k|            line_comment_start,
  102|  35.4k|        }
  103|  35.4k|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  107|  6.17M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  108|  6.17M|        self.shrink_data();
  109|  6.17M|        self.data.extend_from_slice(other);
  110|  6.17M|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  113|  35.4k|    pub fn end(&mut self) {
  114|  35.4k|        self.is_ending = true;
  115|  35.4k|    }
_RNvMs2_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  169|  6.17M|    fn shrink_data(&mut self) {
  170|  6.17M|        if self.position.line_start_buffer_offset > 0 {
  171|   122k|            self.data
  172|   122k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  173|   122k|            self.data
  174|   122k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  175|   122k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  176|   122k|            self.position.line_start_buffer_offset = 0;
  177|   122k|            self.previous_position = self.position;
  178|  6.04M|        }
  179|  6.17M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|  16.1M|    pub fn read_next(
  185|  16.1M|        &mut self,
  186|  16.1M|        options: &R::Options,
  187|  16.1M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|  16.1M|        self.skip_whitespaces_and_comments()?;
  189|  16.0M|        self.previous_position = self.position;
  190|  16.0M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|  16.0M|            &self.data[self.position.buffer_offset..],
  192|  16.0M|            self.is_ending,
  193|  16.0M|            options,
  194|  16.0M|        ) else {
  195|  6.20M|            return if self.is_ending {
  196|  79.9k|                if self.position.buffer_offset == self.data.len() {
  197|  70.8k|                    None // We have finished
  198|       |                } else {
  199|  9.03k|                    let (new_line_jumps, new_line_start) =
  200|  9.03k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|  9.03k|                            &self.data[self.position.buffer_offset..],
  202|  9.03k|                        );
  203|  9.03k|                    if new_line_jumps > 0 {
  204|    289|                        self.position.line_start_buffer_offset =
  205|    289|                            self.position.buffer_offset + new_line_start;
  206|  8.74k|                    }
  207|  9.03k|                    self.position.global_offset +=
  208|  9.03k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|  9.03k|                    self.position.buffer_offset = self.data.len();
  210|  9.03k|                    self.position.global_line += new_line_jumps;
  211|  9.03k|                    let new_position = TextPosition {
  212|  9.03k|                        line: self.position.global_line,
  213|  9.03k|                        column: Self::column_from_bytes(
  214|  9.03k|                            &self.data[self.position.line_start_buffer_offset..],
  215|  9.03k|                        ),
  216|  9.03k|                        offset: self.position.global_offset,
  217|  9.03k|                    };
  218|  9.03k|                    let error = TurtleSyntaxError {
  219|  9.03k|                        location: new_position..new_position,
  220|  9.03k|                        message: "Unexpected end of file".into(),
  221|  9.03k|                    };
  222|  9.03k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|  9.03k|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|  6.12M|                None
  227|       |            };
  228|       |        };
  229|  9.86M|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|  9.86M|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|  9.86M|        let (new_line_jumps, new_line_start) =
  239|  9.86M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  9.86M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|  9.86M|            );
  242|  9.86M|        if new_line_jumps > 0 {
  243|  11.8k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|  9.85M|        }
  245|  9.86M|        self.position.buffer_offset += consumed;
  246|  9.86M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|  9.86M|        self.position.global_line += new_line_jumps;
  248|  9.86M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|  9.86M|        }))
  252|  16.1M|    }
_RNCNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE9read_next0Bb_:
  248|  3.07M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|  3.07M|            location: self.location_from_buffer_offset_range(e.location),
  250|  3.07M|            message: e.message,
  251|  3.07M|        }))
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  3.07M|    pub fn location_from_buffer_offset_range(
  255|  3.07M|        &self,
  256|  3.07M|        offset_range: Range<usize>,
  257|  3.07M|    ) -> Range<TextPosition> {
  258|  3.07M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  3.07M|        let (start_extra_line_jumps, start_line_start) =
  260|  3.07M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  3.07M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  3.07M|            );
  263|  3.07M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  4.42k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  3.07M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  3.07M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  3.07M|        let (end_extra_line_jumps, end_line_start) =
  270|  3.07M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  3.07M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  3.07M|            );
  273|  3.07M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  12.7k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  3.06M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  3.07M|        TextPosition {
  279|  3.07M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  3.07M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  3.07M|            offset: self.previous_position.global_offset
  282|  3.07M|                + u64::try_from(offset_range.start).unwrap(),
  283|  3.07M|        }..TextPosition {
  284|  3.07M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  3.07M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  3.07M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  3.07M|        }
  288|  3.07M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|   841k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|   841k|        TextPosition {
  292|   841k|            line: self.previous_position.global_line,
  293|   841k|            column: Self::column_from_bytes(
  294|   841k|                &self.data[self.previous_position.line_start_buffer_offset
  295|   841k|                    ..self.previous_position.buffer_offset],
  296|   841k|            ),
  297|   841k|            offset: self.previous_position.global_offset,
  298|   841k|        }..TextPosition {
  299|   841k|            line: self.position.global_line,
  300|   841k|            column: Self::column_from_bytes(
  301|   841k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  302|   841k|            ),
  303|   841k|            offset: self.position.global_offset,
  304|   841k|        }
  305|   841k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  307|   841k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  308|   841k|        String::from_utf8_lossy(
  309|   841k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  310|   841k|        )
  311|   841k|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  6.24M|    pub fn is_end(&self) -> bool {
  314|  6.24M|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  6.24M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|  16.1M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|  16.1M|            self.skip_whitespaces()?;
  321|       |
  322|  16.1M|            let buf = &self.data[self.position.buffer_offset..];
  323|  16.1M|            if let Some(line_comment_start) = self.line_comment_start {
  324|  16.1M|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|  50.0k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|  24.1k|                        let mut end_position = line_comment_start.len() + end;
  328|  24.1k|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|  18.7k|                            if let Some(c) = buf.get(end_position + 1) {
  331|  3.93k|                                if *c == b'\n' {
  332|      0|                                    end_position += 1;
  333|  3.93k|                                }
  334|  14.8k|                            } else if !self.is_ending {
  335|  14.8k|                                return None; // We need to read more
  336|     14|                            }
  337|  5.37k|                        }
  338|  9.33k|                        let comment_size = end_position + 1;
  339|  9.33k|                        self.position.buffer_offset += comment_size;
  340|  9.33k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|  9.33k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|  9.33k|                        self.position.global_line += 1;
  343|  9.33k|                        continue;
  344|  25.8k|                    }
  345|  25.8k|                    if self.is_ending {
  346|    527|                        self.position.buffer_offset = self.data.len(); // EOF
  347|    527|                        return Some(());
  348|  25.3k|                    }
  349|  25.3k|                    return None; // We need more data
  350|  16.0M|                }
  351|      0|            }
  352|  16.0M|            return Some(());
  353|       |        }
  354|  16.1M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  16.1M|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|  16.1M|        if self.is_line_jump_whitespace {
  358|  16.1M|            let mut i = self.position.buffer_offset;
  359|  16.3M|            while let Some(c) = self.data.get(i) {
  360|  15.1M|                match c {
  361|  65.2k|                    b' ' | b'\t' => {
  362|  65.2k|                        self.position.buffer_offset += 1;
  363|  65.2k|                        self.position.global_offset += 1;
  364|  65.2k|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|  26.9k|                        let mut increment: u8 = 1;
  368|  26.9k|                        if let Some(c) = self.data.get(i + 1) {
  369|  22.5k|                            if *c == b'\n' {
  370|     49|                                increment += 1;
  371|     49|                                i += 1;
  372|  22.5k|                            }
  373|  4.38k|                        } else if !self.is_ending {
  374|  4.27k|                            return None; // We need to read more
  375|    109|                        }
  376|  22.6k|                        self.position.buffer_offset += usize::from(increment);
  377|  22.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|  22.6k|                        self.position.global_offset += u64::from(increment);
  379|  22.6k|                        self.position.global_line += 1;
  380|       |                    }
  381|   123k|                    b'\n' => {
  382|   123k|                        self.position.buffer_offset += 1;
  383|   123k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|   123k|                        self.position.global_offset += 1;
  385|   123k|                        self.position.global_line += 1;
  386|   123k|                    }
  387|  14.9M|                    _ => return Some(()),
  388|       |                }
  389|   211k|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|  1.20M|        Some(())
  404|  16.1M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|  16.0M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|  16.0M|        let mut num_of_jumps = 0;
  408|  16.0M|        let mut last_jump_pos = 0;
  409|  16.0M|        let mut previous_cr = 0;
  410|  16.0M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|  63.4k|            if bytes[pos] == b'\r' {
  412|  7.67k|                previous_cr = pos;
  413|  7.67k|                num_of_jumps += 1;
  414|  7.67k|                last_jump_pos = pos + 1;
  415|  7.67k|            } else {
  416|  55.7k|                if previous_cr < pos - 1 {
  417|  32.4k|                    // We count \r\n as a single line jump
  418|  32.4k|                    num_of_jumps += 1;
  419|  32.4k|                }
  420|  55.7k|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|  16.0M|        (num_of_jumps, last_jump_pos)
  424|  16.0M|    }
_RNvMs3_NtNtCs3Okv3MbnXN6_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  426|  13.3M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  427|  13.3M|        match str::from_utf8(bytes) {
  428|  7.03M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  429|  6.36M|            Err(e) => {
  430|  6.36M|                if e.valid_up_to() == 0 {
  431|   819k|                    0
  432|       |                } else {
  433|  5.54M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  434|       |                }
  435|       |            }
  436|       |        }
  437|  13.3M|    }

_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|   156k|    fn from(message: S) -> Self {
   41|   156k|        Self {
   42|   156k|            message: message.into(),
   43|   156k|        }
   44|   156k|    }
_RNvXNtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|   685k|    fn from(message: S) -> Self {
   41|   685k|        Self {
   42|   685k|            message: message.into(),
   43|   685k|        }
   44|   685k|    }
_RNvMs_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_2n312N3RecognizerE3newB8_:
   57|  35.4k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  35.4k|        Self {
   59|  35.4k|            lexer,
   60|  35.4k|            state: Some(recognizer),
   61|  35.4k|            context,
   62|  35.4k|            results: vec![],
   63|  35.4k|            errors: vec![],
   64|  35.4k|        }
   65|  35.4k|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE6is_endB9_:
   70|  35.4k|    pub fn is_end(&self) -> bool {
   71|  35.4k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  35.4k|    }
_RNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE9read_nextB9_:
   74|  10.3M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  17.2M|            if let Some(error) = self.errors.pop() {
   77|   841k|                return Some(Err(TurtleSyntaxError {
   78|   841k|                    location: self.lexer.last_token_location(),
   79|   841k|                    message: error
   80|   841k|                        .message
   81|   841k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|   841k|                }));
   83|  16.3M|            }
   84|  16.3M|            if let Some(result) = self.results.pop() {
   85|   256k|                return Some(Ok(result));
   86|  16.1M|            }
   87|  16.1M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|  9.87M|                match result {
   89|  6.78M|                    Ok(token) => {
   90|  6.78M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  6.78M|                        });
   98|  6.78M|                        continue;
   99|       |                    }
  100|  3.08M|                    Err(e) => {
  101|  3.08M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  3.08M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  6.24M|            }
  106|  6.24M|            if self.lexer.is_end() {
  107|  70.8k|                self.state.take()?.recognize_end(
  108|  35.4k|                    &mut self.context,
  109|  35.4k|                    &mut self.results,
  110|  35.4k|                    &mut self.errors,
  111|  35.4k|                )
  112|       |            } else {
  113|  6.17M|                return None;
  114|       |            }
  115|       |        }
  116|  10.3M|    }
_RNCNvMs0_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_2n312N3RecognizerE9read_next0Bb_:
   90|  6.78M|                        self.state = self.state.take().map(|state| {
   91|  6.78M|                            state.recognize_next(
   92|  6.78M|                                token,
   93|  6.78M|                                &mut self.context,
   94|  6.78M|                                &mut self.results,
   95|  6.78M|                                &mut self.errors,
   96|  6.78M|                            )
   97|  6.78M|                        });
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE3endB9_:
  121|  35.4k|    pub fn end(&mut self) {
  122|  35.4k|        self.lexer.end()
  123|  35.4k|    }
_RNvMs1_NtNtCs3Okv3MbnXN6_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE17extend_from_sliceB9_:
  125|  6.17M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  6.17M|        self.lexer.extend_from_slice(other)
  127|  6.17M|    }


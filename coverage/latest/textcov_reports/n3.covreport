_RNCINvMs_NtCsbLbhiJQWKQj_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCsbLbhiJQWKQj_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|  1.51k|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|  1.51k|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|  1.51k|        let mut val = self.0.load(Relaxed);
   37|  1.51k|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|  1.51k|        }
   41|  1.51k|        val
   42|  1.51k|    }
_RINvMs_NtCsbLbhiJQWKQj_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|  1.51k|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|  1.51k|        self.0.unsync_init(|| init() as usize) != 0
   55|  1.51k|    }

_RNvCsbLbhiJQWKQj_9getrandom9getrandomCsdaO7UuI6Wbo_9rand_core:
  366|  1.51k|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|  1.51k|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|  1.51k|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|  1.51k|    // `dest`.
  370|  1.51k|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|  1.51k|    Ok(())
  372|  1.51k|}
_RNvCsbLbhiJQWKQj_9getrandom16getrandom_uninitCsdaO7UuI6Wbo_9rand_core:
  396|  1.51k|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|  1.51k|    if !dest.is_empty() {
  398|  1.51k|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|  1.51k|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|  1.51k|}

_RNvNtCsbLbhiJQWKQj_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}
_RNvNtCsbLbhiJQWKQj_9getrandom3imp15getrandom_inner:
    9|  1.51k|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|  1.51k|    // getrandom(2) was introduced in Linux 3.17
   11|  1.51k|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|  1.51k|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|  1.51k|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|  1.51k|}

_RINvNtCsbLbhiJQWKQj_9getrandom4util19slice_as_uninit_muthECsdaO7UuI6Wbo_9rand_core:
   32|  1.51k|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|  1.51k|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|  1.51k|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|  1.51k|}
_RINvNtCsbLbhiJQWKQj_9getrandom4util21slice_assume_init_muthECsdaO7UuI6Wbo_9rand_core:
    8|  1.51k|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|  1.51k|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|  1.51k|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|  1.51k|}

_RNvNtCsbLbhiJQWKQj_9getrandom9util_libc17getrandom_syscall:
  153|  1.51k|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|  1.51k|    unsafe {
  155|  1.51k|        libc::syscall(
  156|  1.51k|            libc::SYS_getrandom,
  157|  1.51k|            buf.as_mut_ptr() as *mut libc::c_void,
  158|  1.51k|            buf.len(),
  159|  1.51k|            0,
  160|  1.51k|        ) as libc::ssize_t
  161|  1.51k|    }
  162|  1.51k|}
_RINvNtCsbLbhiJQWKQj_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|  1.51k|pub fn sys_fill_exact(
   56|  1.51k|    mut buf: &mut [MaybeUninit<u8>],
   57|  1.51k|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|  1.51k|) -> Result<(), Error> {
   59|  3.03k|    while !buf.is_empty() {
   60|  1.51k|        let res = sys_fill(buf);
   61|  1.51k|        match res {
   62|  1.51k|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|  1.51k|    Ok(())
   77|  1.51k|}

rust_fuzzer_test_input:
  209|  63.8k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  63.8k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  63.8k|                }
  223|  63.8k|
  224|  63.8k|                __libfuzzer_sys_run(bytes);
  225|  63.8k|                0
  226|  63.8k|            }
_RNvNvCs5pbGoGf5ED1_2n31__19___libfuzzer_sys_run:
  241|  63.8k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  63.8k|            }
LLVMFuzzerTestOneInput:
   58|  63.8k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  63.8k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  63.8k|    });
   63|  63.8k|
   64|  63.8k|    match test_input {
   65|  63.8k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  63.8k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsd5ojBIEOiOc_13libfuzzer_sys15test_input_wrap0B3_:
   59|  63.8k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  63.8k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  63.8k|        rust_fuzzer_test_input(data_slice)
   62|  63.8k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECslUwV8J7e77q_5oxttl:
 1125|  4.13M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  4.13M|    haystack: &[u8],
 1127|  4.13M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  4.13M|) -> Option<usize> {
 1129|  4.13M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  4.13M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  4.13M|    // a &[u8].
 1132|  4.13M|    let start = haystack.as_ptr();
 1133|  4.13M|    let end = start.add(haystack.len());
 1134|  4.13M|    let found = find_raw(start, end)?;
 1135|  1.71M|    Some(found.distance(start))
 1136|  4.13M|}
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECslUwV8J7e77q_5oxttl:
 1125|   105k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   105k|    haystack: &[u8],
 1127|   105k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   105k|) -> Option<usize> {
 1129|   105k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   105k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   105k|    // a &[u8].
 1132|   105k|    let start = haystack.as_ptr();
 1133|   105k|    let end = start.add(haystack.len());
 1134|   105k|    let found = find_raw(start, end)?;
 1135|  15.0k|    Some(found.distance(start))
 1136|   105k|}
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  30.6M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  30.6M|        Iter {
 1029|  30.6M|            original_start: haystack.as_ptr(),
 1030|  30.6M|            start: haystack.as_ptr(),
 1031|  30.6M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  30.6M|            haystack: core::marker::PhantomData,
 1033|  30.6M|        }
 1034|  30.6M|    }
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECslUwV8J7e77q_5oxttl:
 1044|  30.7M|    pub(crate) unsafe fn next(
 1045|  30.7M|        &mut self,
 1046|  30.7M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  30.7M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  30.7M|        let found = find_raw(self.start, self.end)?;
 1057|   127k|        let result = found.distance(self.original_start);
 1058|   127k|        self.start = found.add(1);
 1059|   127k|        Some(result)
 1060|  30.7M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|   241k|    pub(crate) fn needle1(&self) -> u8 {
  118|   241k|        self.s1
  119|   241k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.29M|    unsafe fn search_chunk(
  671|  1.29M|        &self,
  672|  1.29M|        cur: *const u8,
  673|  1.29M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.29M|    ) -> Option<*const u8> {
  675|  1.29M|        let chunk = V::load_unaligned(cur);
  676|  1.29M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.29M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.29M|        let mask = eq1.or(eq2).movemask();
  679|  1.29M|        if mask.has_non_zero() {
  680|   357k|            let mask1 = eq1.movemask();
  681|   357k|            let mask2 = eq2.movemask();
  682|   357k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   936k|            None
  685|       |        }
  686|  1.29M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  18.4k|    pub(crate) unsafe fn find_raw(
  144|  18.4k|        &self,
  145|  18.4k|        start: *const u8,
  146|  18.4k|        end: *const u8,
  147|  18.4k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  18.4k|        let topos = V::Mask::first_offset;
  155|  18.4k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  18.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.67k|            return Some(cur);
  167|  15.8k|        }
  168|  15.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  15.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  15.8k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  15.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  21.5k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  6.56k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    812|                return Some(cur);
  216|  5.75k|            }
  217|  5.75k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  14.9k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  13.2k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  13.2k|            return self.search_chunk(cur, topos);
  228|  1.71k|        }
  229|  1.71k|        None
  230|  18.4k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.33M|    unsafe fn search_chunk(
  671|  1.33M|        &self,
  672|  1.33M|        cur: *const u8,
  673|  1.33M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.33M|    ) -> Option<*const u8> {
  675|  1.33M|        let chunk = V::load_unaligned(cur);
  676|  1.33M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.33M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.33M|        let mask = eq1.or(eq2).movemask();
  679|  1.33M|        if mask.has_non_zero() {
  680|   429k|            let mask1 = eq1.movemask();
  681|   429k|            let mask2 = eq2.movemask();
  682|   429k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   903k|            None
  685|       |        }
  686|  1.33M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  56.3M|    pub(crate) fn needle1(&self) -> u8 {
  462|  56.3M|        self.s1
  463|  56.3M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  39.9k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  39.9k|    start: *const u8,
 1150|  39.9k|    end: *const u8,
 1151|  39.9k|    confirm: F,
 1152|  39.9k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  39.9k|    let mut ptr = start;
 1155|   276k|    while ptr < end {
 1156|   241k|        if confirm(*ptr) {
 1157|  4.77k|            return Some(ptr);
 1158|   236k|        }
 1159|   236k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  35.1k|    None
 1162|  39.9k|}
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  27.3M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  27.3M|    start: *const u8,
 1150|  27.3M|    end: *const u8,
 1151|  27.3M|    confirm: F,
 1152|  27.3M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  27.3M|    let mut ptr = start;
 1155|  82.7M|    while ptr < end {
 1156|  56.3M|        if confirm(*ptr) {
 1157|  1.04M|            return Some(ptr);
 1158|  55.3M|        }
 1159|  55.3M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  26.3M|    None
 1162|  27.3M|}
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   113k|    unsafe fn search_chunk(
  417|   113k|        &self,
  418|   113k|        cur: *const u8,
  419|   113k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   113k|    ) -> Option<*const u8> {
  421|   113k|        let chunk = V::load_unaligned(cur);
  422|   113k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   113k|        if mask.has_non_zero() {
  424|  5.78k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|   107k|            None
  427|       |        }
  428|   113k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|   105k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   105k|        One { s1: needle, v1: V::splat(needle) }
  113|   105k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  55.5M|    pub(crate) fn needle2(&self) -> u8 {
  468|  55.5M|        self.s2
  469|  55.5M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|   105k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   105k|        One { s1: needle, v1: V::splat(needle) }
  113|   105k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   772k|    pub(crate) unsafe fn find_raw(
  494|   772k|        &self,
  495|   772k|        start: *const u8,
  496|   772k|        end: *const u8,
  497|   772k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   772k|        let topos = V::Mask::first_offset;
  505|   772k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   772k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   364k|            return Some(cur);
  517|   408k|        }
  518|   408k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   408k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   408k|        if len >= Self::LOOP_SIZE {
  522|  1.98M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  1.73M|                let a = V::load_aligned(cur);
  526|  1.73M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  1.73M|                let eqa1 = self.v1.cmpeq(a);
  528|  1.73M|                let eqb1 = self.v1.cmpeq(b);
  529|  1.73M|                let eqa2 = self.v2.cmpeq(a);
  530|  1.73M|                let eqb2 = self.v2.cmpeq(b);
  531|  1.73M|                let or1 = eqa1.or(eqb1);
  532|  1.73M|                let or2 = eqa2.or(eqb2);
  533|  1.73M|                let or3 = or1.or(or2);
  534|  1.73M|                if or3.movemask_will_have_non_zero() {
  535|  8.87k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  8.87k|                    if mask.has_non_zero() {
  537|  4.16k|                        return Some(cur.add(topos(mask)));
  538|  4.71k|                    }
  539|  4.71k|
  540|  4.71k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  4.71k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.72M|                }
  544|  1.72M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   150k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   571k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   180k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  7.43k|                return Some(cur);
  554|   172k|            }
  555|   172k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   391k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   380k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   380k|            return self.search_chunk(cur, topos);
  566|  11.5k|        }
  567|  11.5k|        None
  568|   772k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   739k|    pub(crate) unsafe fn find_raw(
  494|   739k|        &self,
  495|   739k|        start: *const u8,
  496|   739k|        end: *const u8,
  497|   739k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   739k|        let topos = V::Mask::first_offset;
  505|   739k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   739k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   294k|            return Some(cur);
  517|   445k|        }
  518|   445k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   445k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   445k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   445k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   577k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   147k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  15.2k|                return Some(cur);
  554|   131k|            }
  555|   131k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   430k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   406k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   406k|            return self.search_chunk(cur, topos);
  566|  23.6k|        }
  567|  23.6k|        None
  568|   739k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  34.9M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  34.9M|        Two {
  452|  34.9M|            s1: needle1,
  453|  34.9M|            s2: needle2,
  454|  34.9M|            v1: V::splat(needle1),
  455|  34.9M|            v2: V::splat(needle2),
  456|  34.9M|        }
  457|  34.9M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  44.9k|    pub(crate) unsafe fn find_raw(
  144|  44.9k|        &self,
  145|  44.9k|        start: *const u8,
  146|  44.9k|        end: *const u8,
  147|  44.9k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  44.9k|        let topos = V::Mask::first_offset;
  155|  44.9k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  44.9k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  3.46k|            return Some(cur);
  167|  41.4k|        }
  168|  41.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  41.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  41.4k|        if len >= Self::LOOP_SIZE {
  172|  15.8k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  9.90k|                let a = V::load_aligned(cur);
  176|  9.90k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  9.90k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  9.90k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  9.90k|                let eqa = self.v1.cmpeq(a);
  180|  9.90k|                let eqb = self.v1.cmpeq(b);
  181|  9.90k|                let eqc = self.v1.cmpeq(c);
  182|  9.90k|                let eqd = self.v1.cmpeq(d);
  183|  9.90k|                let or1 = eqa.or(eqb);
  184|  9.90k|                let or2 = eqc.or(eqd);
  185|  9.90k|                let or3 = or1.or(or2);
  186|  9.90k|                if or3.movemask_will_have_non_zero() {
  187|    951|                    let mask = eqa.movemask();
  188|    951|                    if mask.has_non_zero() {
  189|    223|                        return Some(cur.add(topos(mask)));
  190|    728|                    }
  191|    728|
  192|    728|                    let mask = eqb.movemask();
  193|    728|                    if mask.has_non_zero() {
  194|    246|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    482|                    }
  196|    482|
  197|    482|                    let mask = eqc.movemask();
  198|    482|                    if mask.has_non_zero() {
  199|    300|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    182|                    }
  201|    182|
  202|    182|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    182|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  8.95k|                }
  206|  8.95k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  34.6k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  69.6k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  30.7k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.65k|                return Some(cur);
  216|  29.1k|            }
  217|  29.1k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  38.8k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  37.8k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  37.8k|            return self.search_chunk(cur, topos);
  228|    996|        }
  229|    996|        None
  230|  44.9k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  34.9M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  34.9M|        Two {
  452|  34.9M|            s1: needle1,
  453|  34.9M|            s2: needle2,
  454|  34.9M|            v1: V::splat(needle1),
  455|  34.9M|            v2: V::splat(needle2),
  456|  34.9M|        }
  457|  34.9M|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  38.3k|    unsafe fn search_chunk(
  417|  38.3k|        &self,
  418|  38.3k|        cur: *const u8,
  419|  38.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  38.3k|    ) -> Option<*const u8> {
  421|  38.3k|        let chunk = V::load_unaligned(cur);
  422|  38.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  38.3k|        if mask.has_non_zero() {
  424|  3.59k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  34.7k|            None
  427|       |        }
  428|  38.3k|    }

_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  56.3M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  56.3M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  56.3M|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  44.9k|    unsafe fn find_raw_avx2(
  397|  44.9k|        &self,
  398|  44.9k|        start: *const u8,
  399|  44.9k|        end: *const u8,
  400|  44.9k|    ) -> Option<*const u8> {
  401|  44.9k|        self.avx2.find_raw(start, end)
  402|  44.9k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   241k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   241k|                    b == self.sse2.needle1()
  194|   241k|                })
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  34.9M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  34.9M|        Two {
  558|  34.9M|            sse2: generic::Two::new(needle1, needle2),
  559|  34.9M|            avx2: generic::Two::new(needle1, needle2),
  560|  34.9M|        }
  561|  34.9M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  34.9M|    pub unsafe fn find_raw(
  655|  34.9M|        &self,
  656|  34.9M|        start: *const u8,
  657|  34.9M|        end: *const u8,
  658|  34.9M|    ) -> Option<*const u8> {
  659|  34.9M|        if start >= end {
  660|  6.02M|            return None;
  661|  28.9M|        }
  662|  28.9M|        let len = end.distance(start);
  663|  28.9M|        if len < __m256i::BYTES {
  664|  28.1M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  27.3M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  27.3M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   739k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   772k|        }
  676|   772k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   772k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   772k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   772k|        // responsibility.
  680|   772k|        //
  681|   772k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   772k|        // means we'd have to annotate this routine with `target_feature`.
  683|   772k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   772k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   772k|        // The real problem is that a routine with a `target_feature`
  686|   772k|        // annotation generally can't be inlined into caller code unless
  687|   772k|        // the caller code has the same target feature annotations. Namely,
  688|   772k|        // the common case (at time of writing) is for calling code to not
  689|   772k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   772k|        // `target_feature` on this routine, it can be inlined which will
  691|   772k|        // handle some of the short-haystack cases above without touching the
  692|   772k|        // architecture specific code.
  693|   772k|        self.find_raw_avx2(start, end)
  694|  34.9M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   105k|    pub unsafe fn find_raw(
  180|   105k|        &self,
  181|   105k|        start: *const u8,
  182|   105k|        end: *const u8,
  183|   105k|    ) -> Option<*const u8> {
  184|   105k|        if start >= end {
  185|  1.82k|            return None;
  186|   103k|        }
  187|   103k|        let len = end.distance(start);
  188|   103k|        if len < __m256i::BYTES {
  189|  58.4k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  39.9k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  39.9k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  18.4k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  44.9k|        }
  201|  44.9k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  44.9k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  44.9k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  44.9k|        // responsibility.
  205|  44.9k|        //
  206|  44.9k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  44.9k|        // means we'd have to annotate this routine with `target_feature`.
  208|  44.9k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  44.9k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  44.9k|        // The real problem is that a routine with a `target_feature`
  211|  44.9k|        // annotation generally can't be inlined into caller code unless
  212|  44.9k|        // the caller code has the same target feature annotations. Namely,
  213|  44.9k|        // the common case (at time of writing) is for calling code to not
  214|  44.9k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  44.9k|        // `target_feature` on this routine, it can be inlined which will
  216|  44.9k|        // handle some of the short-haystack cases above without touching the
  217|  44.9k|        // architecture specific code.
  218|  44.9k|        self.find_raw_avx2(start, end)
  219|   105k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   739k|    unsafe fn find_raw_sse2(
  765|   739k|        &self,
  766|   739k|        start: *const u8,
  767|   739k|        end: *const u8,
  768|   739k|    ) -> Option<*const u8> {
  769|   739k|        self.sse2.find_raw(start, end)
  770|   739k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   772k|    unsafe fn find_raw_avx2(
  805|   772k|        &self,
  806|   772k|        start: *const u8,
  807|   772k|        end: *const u8,
  808|   772k|    ) -> Option<*const u8> {
  809|   772k|        self.avx2.find_raw(start, end)
  810|   772k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  18.4k|    unsafe fn find_raw_sse2(
  337|  18.4k|        &self,
  338|  18.4k|        start: *const u8,
  339|  18.4k|        end: *const u8,
  340|  18.4k|    ) -> Option<*const u8> {
  341|  18.4k|        self.sse2.find_raw(start, end)
  342|  18.4k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   105k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   105k|        One {
   71|   105k|            sse2: generic::One::new(needle),
   72|   105k|            avx2: generic::One::new(needle),
   73|   105k|        }
   74|   105k|    }

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  34.9M|pub(crate) fn memchr2_raw(
  221|  34.9M|    n1: u8,
  222|  34.9M|    n2: u8,
  223|  34.9M|    start: *const u8,
  224|  34.9M|    end: *const u8,
  225|  34.9M|) -> Option<*const u8> {
  226|  34.9M|    // SAFETY: We provide a valid function pointer type.
  227|  34.9M|    unsafe_ifunc!(
  228|  34.9M|        Two,
  229|  34.9M|        find_raw,
  230|  34.9M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  34.9M|        Option<*const u8>,
  232|  34.9M|        start,
  233|  34.9M|        end,
  234|  34.9M|        n1,
  235|  34.9M|        n2
  236|  34.9M|    )
  237|  34.9M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|   105k|pub(crate) fn memchr_raw(
  175|   105k|    n1: u8,
  176|   105k|    start: *const u8,
  177|   105k|    end: *const u8,
  178|   105k|) -> Option<*const u8> {
  179|   105k|    // SAFETY: We provide a valid function pointer type.
  180|   105k|    unsafe_ifunc!(
  181|   105k|        One,
  182|   105k|        find_raw,
  183|   105k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   105k|        Option<*const u8>,
  185|   105k|        start,
  186|   105k|        end,
  187|   105k|        n1
  188|   105k|    )
  189|   105k|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  34.9M|        unsafe fn find_avx2(
   79|  34.9M|            $($needle: u8),+,
   80|  34.9M|            $hay_start: *const u8,
   81|  34.9M|            $hay_end: *const u8,
   82|  34.9M|        ) -> $retty {
   83|  34.9M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  34.9M|            $memchrty::new_unchecked($($needle),+)
   85|  34.9M|                .$memchrfind($hay_start, $hay_end)
   86|  34.9M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   105k|        unsafe fn find_avx2(
   79|   105k|            $($needle: u8),+,
   80|   105k|            $hay_start: *const u8,
   81|   105k|            $hay_end: *const u8,
   82|   105k|        ) -> $retty {
   83|   105k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   105k|            $memchrty::new_unchecked($($needle),+)
   85|   105k|                .$memchrfind($hay_start, $hay_end)
   86|   105k|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  33.2M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  33.2M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  33.2M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  33.2M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   910k|    fn as_usize(self) -> usize {
   27|   910k|        self as usize
   28|   910k|    }

_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCslUwV8J7e77q_5oxttl:
  377|  30.6M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  30.6M|        Memchr2 {
  379|  30.6M|            needle1,
  380|  30.6M|            needle2,
  381|  30.6M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  30.6M|        }
  383|  30.6M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCslUwV8J7e77q_5oxttl:
  574|  34.9M|unsafe fn memchr2_raw(
  575|  34.9M|    needle1: u8,
  576|  34.9M|    needle2: u8,
  577|  34.9M|    start: *const u8,
  578|  34.9M|    end: *const u8,
  579|  34.9M|) -> Option<*const u8> {
  580|  34.9M|    #[cfg(target_arch = "x86_64")]
  581|  34.9M|    {
  582|  34.9M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  34.9M|    }
  584|  34.9M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  34.9M|    {
  586|  34.9M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  34.9M|    }
  588|  34.9M|    #[cfg(target_arch = "aarch64")]
  589|  34.9M|    {
  590|  34.9M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  34.9M|    }
  592|  34.9M|    #[cfg(not(any(
  593|  34.9M|        target_arch = "x86_64",
  594|  34.9M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  34.9M|        target_arch = "aarch64"
  596|  34.9M|    )))]
  597|  34.9M|    {
  598|  34.9M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  34.9M|            .find_raw(start, end)
  600|  34.9M|    }
  601|  34.9M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCslUwV8J7e77q_5oxttl:
  232|  30.6M|pub fn memchr2_iter<'h>(
  233|  30.6M|    needle1: u8,
  234|  30.6M|    needle2: u8,
  235|  30.6M|    haystack: &'h [u8],
  236|  30.6M|) -> Memchr2<'h> {
  237|  30.6M|    Memchr2::new(needle1, needle2, haystack)
  238|  30.6M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCslUwV8J7e77q_5oxttl:
   27|   105k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   105k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   105k|    // pointer between start and end.
   30|   105k|    unsafe {
   31|   105k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   105k|        })
   34|   105k|    }
   35|   105k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr7memchr2CslUwV8J7e77q_5oxttl:
   92|  4.13M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  4.13M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  4.13M|    // pointer between start and end.
   95|  4.13M|    unsafe {
   96|  4.13M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  4.13M|        })
   99|  4.13M|    }
  100|  4.13M|}
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCslUwV8J7e77q_5oxttl:
  390|  30.7M|    fn next(&mut self) -> Option<usize> {
  391|  30.7M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  30.7M|        // pointers returns will fall within the start and end bounds, and this
  393|  30.7M|        // upholds the safety contract of `self.it.next`.
  394|  30.7M|        unsafe {
  395|  30.7M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  30.7M|        }
  397|  30.7M|    }
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr7memchr20CslUwV8J7e77q_5oxttl:
   96|  4.13M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  4.13M|            memchr2_raw(needle1, needle2, start, end)
   98|  4.13M|        })
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CslUwV8J7e77q_5oxttl:
  395|  30.7M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|   105k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   105k|            memchr_raw(needle, start, end)
   33|   105k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|   105k|unsafe fn memchr_raw(
  505|   105k|    needle: u8,
  506|   105k|    start: *const u8,
  507|   105k|    end: *const u8,
  508|   105k|) -> Option<*const u8> {
  509|   105k|    #[cfg(target_arch = "x86_64")]
  510|   105k|    {
  511|   105k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   105k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   105k|        // time. This function also handles using a fallback if neither AVX2
  514|   105k|        // nor SSE2 (unusual) are available.
  515|   105k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   105k|    }
  517|   105k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   105k|    {
  519|   105k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   105k|    }
  521|   105k|    #[cfg(target_arch = "aarch64")]
  522|   105k|    {
  523|   105k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   105k|    }
  525|   105k|    #[cfg(not(any(
  526|   105k|        target_arch = "x86_64",
  527|   105k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   105k|        target_arch = "aarch64"
  529|   105k|    )))]
  530|   105k|    {
  531|   105k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   105k|    }
  533|   105k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  1.33M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  1.33M|            _mm_loadu_si128(data as *const __m128i)
  222|  1.33M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  2.62M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  2.62M|            _mm_cmpeq_epi8(self, vector2)
  232|  2.62M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   805k|    fn first_offset(self) -> usize {
  174|   805k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   805k|        // the bytes so we are in practice), where the most significant byte
  176|   805k|        // is at a higher address. That means the least significant bit that
  177|   805k|        // is set corresponds to the position of our first matching byte.
  178|   805k|        // That position corresponds to the number of zeros after the least
  179|   805k|        // significant bit.
  180|   805k|        self.get_for_offset().trailing_zeros() as usize
  181|   805k|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   805k|    fn get_for_offset(self) -> u32 {
  129|   805k|        #[cfg(target_endian = "big")]
  130|   805k|        {
  131|   805k|            self.0.swap_bytes()
  132|   805k|        }
  133|   805k|        #[cfg(target_endian = "little")]
  134|   805k|        {
  135|   805k|            self.0
  136|   805k|        }
  137|   805k|    }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  4.53M|    fn has_non_zero(self) -> bool {
  149|  4.53M|        self.0 != 0
  150|  4.53M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  2.04M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  2.04M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  2.04M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  4.08M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  4.08M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  4.08M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  1.74M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  1.74M|        self.movemask().has_non_zero()
   67|  1.74M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.44M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.44M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.44M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  9.76M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  9.76M|            _mm256_cmpeq_epi8(self, vector2)
  282|  9.76M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  69.9M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  69.9M|            _mm_set1_epi8(byte as i8)
  212|  69.9M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  1.29M|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  1.29M|            _mm_or_si128(self, vector2)
  242|  1.29M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  3.51M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  3.51M|            _mm256_load_si256(data as *const __m256i)
  267|  3.51M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   799k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   799k|        SensibleMoveMask(self.0 | other.0)
  165|   799k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  69.9M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  69.9M|            _mm256_set1_epi8(byte as i8)
  262|  69.9M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  6.57M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  6.57M|            _mm256_or_si256(self, vector2)
  292|  6.57M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCsd5ojBIEOiOc_13libfuzzer_sys:
   49|  63.8k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  63.8k|        // An `Acquire` load is enough because that makes all the initialization
   51|  63.8k|        // operations visible to us, and, this being a fast path, weaker
   52|  63.8k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  63.8k|        // `SeqCst` operations on the slow path.
   54|  63.8k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  63.8k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCsd5ojBIEOiOc_13libfuzzer_sys:
  963|  63.8k|        pub fn get(&self) -> Option<&T> {
  964|  63.8k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  63.8k|                None
  969|       |            }
  970|  63.8k|        }

_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE5parseCslUwV8J7e77q_5oxttl:
   49|   443k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   443k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   372k|        Ok(Self { tag, positions })
   52|   443k|    }
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE10into_innerCslUwV8J7e77q_5oxttl:
   62|   372k|    pub fn into_inner(self) -> T {
   63|   372k|        self.tag
   64|   372k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCslUwV8J7e77q_5oxttl:
  558|   443k|#[derive(Default)]
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECslM7Y37AdxjQ_5oxrdf:
  571|  16.4k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECslM7Y37AdxjQ_5oxrdf:
  571|   440k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECslM7Y37AdxjQ_5oxrdf:
  632|   426k|fn parse_langtag(
  633|   426k|    input: &str,
  634|   426k|    output: &mut impl OutputBuffer,
  635|   426k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   426k|    #[derive(PartialEq, Eq)]
  637|   426k|    enum State {
  638|   426k|        Start,
  639|   426k|        AfterLanguage,
  640|   426k|        AfterExtLang,
  641|   426k|        AfterScript,
  642|   426k|        AfterRegion,
  643|   426k|        InExtension { expected: bool },
  644|   426k|        InPrivateUse { expected: bool },
  645|   426k|    }
  646|   426k|
  647|   426k|    let mut state = State::Start;
  648|   426k|    let mut language_end = 0;
  649|   426k|    let mut extlang_end = 0;
  650|   426k|    let mut script_end = 0;
  651|   426k|    let mut region_end = 0;
  652|   426k|    let mut variant_end = 0;
  653|   426k|    let mut extension_end = 0;
  654|   426k|    let mut extlangs_count = 0;
  655|   567k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   567k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|   567k|        }
  661|   567k|        if subtag.len() > 8 {
  662|  6.75k|            return Err(LanguageTagParseError {
  663|  6.75k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  6.75k|            });
  665|   560k|        }
  666|   560k|        if state == State::Start {
  667|       |            // Primary language
  668|   420k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  32.6k|                return Err(LanguageTagParseError {
  670|  32.6k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  32.6k|                });
  672|   387k|            }
  673|   387k|            language_end = end;
  674|   387k|            output.extend(to_lowercase(subtag));
  675|   387k|            if subtag.len() < 4 {
  676|  99.6k|                // extlangs are only allowed for short language tags
  677|  99.6k|                state = State::AfterLanguage;
  678|   288k|            } else {
  679|   288k|                state = State::AfterExtLang;
  680|   288k|            }
  681|   140k|        } else if let State::InPrivateUse { .. } = state {
  682|  8.22k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  8.22k|            }
  687|  8.22k|            output.push('-');
  688|  8.22k|            output.extend(to_lowercase(subtag));
  689|  8.22k|            state = State::InPrivateUse { expected: false };
  690|   131k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  13.3k|            if let State::InExtension { expected: true } = state {
  693|  5.05k|                return Err(LanguageTagParseError {
  694|  5.05k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  5.05k|                });
  696|  8.30k|            }
  697|  8.30k|            output.push('-');
  698|  8.30k|            output.push('x');
  699|  8.30k|            state = State::InPrivateUse { expected: true };
  700|   118k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  29.2k|            if let State::InExtension { expected: true } = state {
  703|  5.86k|                return Err(LanguageTagParseError {
  704|  5.86k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  5.86k|                });
  706|  23.3k|            }
  707|  23.3k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  23.3k|            output.push('-');
  709|  23.3k|            output.push(extension_tag);
  710|  23.3k|            state = State::InExtension { expected: true };
  711|  89.3k|        } else if let State::InExtension { .. } = state {
  712|  14.2k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  14.2k|            }
  717|  14.2k|            extension_end = end;
  718|  14.2k|            output.push('-');
  719|  14.2k|            output.extend(to_lowercase(subtag));
  720|  14.2k|            state = State::InExtension { expected: false };
  721|  75.0k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  15.4k|            extlangs_count += 1;
  723|  15.4k|            if extlangs_count > 3 {
  724|  1.73k|                return Err(LanguageTagParseError {
  725|  1.73k|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|  1.73k|                });
  727|  13.6k|            }
  728|  13.6k|            // valid extlangs
  729|  13.6k|            extlang_end = end;
  730|  13.6k|            output.push('-');
  731|  13.6k|            output.extend(to_lowercase(subtag));
  732|  59.6k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  36.7k|            && subtag.len() == 4
  734|  12.9k|            && is_alphabetic(subtag)
  735|  12.9k|        {
  736|  12.9k|            // Script
  737|  12.9k|            script_end = end;
  738|  12.9k|            output.push('-');
  739|  12.9k|            output.extend(to_uppercase_first(subtag));
  740|  12.9k|            state = State::AfterScript;
  741|  46.6k|        } else if (state == State::AfterLanguage
  742|  28.2k|            || state == State::AfterExtLang
  743|  22.9k|            || state == State::AfterScript)
  744|  33.4k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  14.5k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  18.8k|        {
  747|  18.8k|            // Region
  748|  18.8k|            region_end = end;
  749|  18.8k|            output.push('-');
  750|  18.8k|            output.extend(to_uppercase(subtag));
  751|  18.8k|            state = State::AfterRegion;
  752|  27.7k|        } else if (state == State::AfterLanguage
  753|  24.1k|            || state == State::AfterExtLang
  754|  22.6k|            || state == State::AfterScript
  755|  13.2k|            || state == State::AfterRegion)
  756|  27.7k|            && is_alphanumeric(subtag)
  757|  27.7k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  11.5k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  16.2k|        {
  760|  16.2k|            // Variant
  761|  16.2k|            variant_end = end;
  762|  16.2k|            output.push('-');
  763|  16.2k|            output.extend(to_lowercase(subtag));
  764|  16.2k|            state = State::AfterRegion;
  765|  16.2k|        } else {
  766|  11.5k|            return Err(LanguageTagParseError {
  767|  11.5k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  11.5k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   363k|    if let State::InExtension { expected: true } = state {
  774|  5.12k|        return Err(LanguageTagParseError {
  775|  5.12k|            kind: TagParseErrorKind::EmptyExtension,
  776|  5.12k|        });
  777|   358k|    }
  778|   358k|    if let State::InPrivateUse { expected: true } = state {
  779|  2.22k|        return Err(LanguageTagParseError {
  780|  2.22k|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|  2.22k|        });
  782|   355k|    }
  783|   355k|
  784|   355k|    //We make sure we have not skipped anyone
  785|   355k|    if extlang_end < language_end {
  786|   348k|        extlang_end = language_end;
  787|   348k|    }
  788|   355k|    if script_end < extlang_end {
  789|   347k|        script_end = extlang_end;
  790|   347k|    }
  791|   355k|    if region_end < script_end {
  792|   343k|        region_end = script_end;
  793|   343k|    }
  794|   355k|    if variant_end < region_end {
  795|   342k|        variant_end = region_end;
  796|   342k|    }
  797|   355k|    if extension_end < variant_end {
  798|   348k|        extension_end = variant_end;
  799|   348k|    }
  800|       |
  801|   355k|    Ok(TagElementsPositions {
  802|   355k|        language_end,
  803|   355k|        extlang_end,
  804|   355k|        script_end,
  805|   355k|        region_end,
  806|   355k|        variant_end,
  807|   355k|        extension_end,
  808|   355k|    })
  809|   426k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECslM7Y37AdxjQ_5oxrdf:
  571|  18.8k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECslM7Y37AdxjQ_5oxrdf:
  571|  12.9k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CslM7Y37AdxjQ_5oxrdf:
  594|  11.5M|        .find(|record| record.eq_ignore_ascii_case(input))
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECslM7Y37AdxjQ_5oxrdf:
  587|   443k|fn parse_language_tag(
  588|   443k|    input: &str,
  589|   443k|    output: &mut impl OutputBuffer,
  590|   443k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   443k|    if let Some(tag) = GRANDFATHEREDS
  593|   443k|        .iter()
  594|   443k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   443k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  16.4k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  16.4k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  16.4k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  16.4k|            Ok(TagElementsPositions {
  618|  16.4k|                language_end: input.len(),
  619|  16.4k|                extlang_end: input.len(),
  620|  16.4k|                script_end: input.len(),
  621|  16.4k|                region_end: input.len(),
  622|  16.4k|                variant_end: input.len(),
  623|  16.4k|                extension_end: input.len(),
  624|  16.4k|            })
  625|       |        }
  626|       |    } else {
  627|   426k|        parse_langtag(input, output)
  628|       |    }
  629|   443k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCslM7Y37AdxjQ_5oxrdf:
  891|  18.8k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  18.8k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  18.8k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCslM7Y37AdxjQ_5oxrdf:
  636|   910k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCslM7Y37AdxjQ_5oxrdf:
  881|  79.5k|fn is_alphanumeric(s: &str) -> bool {
  882|  79.5k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  79.5k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCslM7Y37AdxjQ_5oxrdf:
  897|  12.9k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  12.9k|    let mut chars = s.chars();
  899|  12.9k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  12.9k|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCslM7Y37AdxjQ_5oxrdf:
  563|   147k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCslM7Y37AdxjQ_5oxrdf:
  871|   451k|fn is_alphabetic(s: &str) -> bool {
  872|   451k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   451k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCslM7Y37AdxjQ_5oxrdf:
  886|  16.4k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  16.4k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  16.4k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCslM7Y37AdxjQ_5oxrdf:
  903|   440k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   440k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   440k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCslM7Y37AdxjQ_5oxrdf:
  876|  9.15k|fn is_numeric(s: &str) -> bool {
  877|  9.15k|    s.chars().all(|x| x.is_ascii_digit())
  878|  9.15k|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCslM7Y37AdxjQ_5oxrdf:
  862|   930k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   930k|        let tag = self.split.next()?;
  864|   567k|        let tag_end = self.position + tag.len();
  865|   567k|        self.position = tag_end + 1;
  866|   567k|        Some((tag, tag_end))
  867|   930k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCslM7Y37AdxjQ_5oxrdf:
  850|   426k|    fn new(input: &'a str) -> Self {
  851|   426k|        Self {
  852|   426k|            split: input.split('-'),
  853|   426k|            position: 0,
  854|   426k|        }
  855|   426k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|  9.15k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|   228k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_Cs87w0kKV82sz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  490|  70.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  70.8k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  16.0k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|  2.22k|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  11.5k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  11.5k|                f,
  503|  11.5k|                "A subtag fails to parse, it does not match any other subtags"
  504|  11.5k|            ),
  505|  32.6k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  6.75k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|  1.73k|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  70.8k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  2.04M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   272k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E15parse_authorityCslUwV8J7e77q_5oxttl:
 1335|   247k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   592k|        loop {
 1338|   592k|            let c = self.input.next();
 1339|   592k|            match c {
 1340|       |                Some('@') => {
 1341|  11.0k|                    self.output.push('@');
 1342|  11.0k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   225k|                    self.input = ParserInput {
 1346|   225k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   225k|                        position: self.input_scheme_end + 2,
 1348|   225k|                    };
 1349|   225k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   225k|                    return self.parse_host();
 1351|       |                }
 1352|   356k|                Some(c) => {
 1353|   356k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   247k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_fragmentCslUwV8J7e77q_5oxttl:
 1518|   161k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   460k|        while let Some(c) = self.input.next() {
 1520|   334k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|   125k|        Ok(())
 1523|   161k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCslUwV8J7e77q_5oxttl:
   70|   228k|    pub fn parse_unchecked(iri: T) -> Self {
   71|   228k|        let positions =
   72|   228k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|   228k|        Self { iri, positions }
   74|   228k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCslUwV8J7e77q_5oxttl:
 1245|   198k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   198k|        if self.input.starts_with('/') {
 1247|   185k|            self.input.next();
 1248|   185k|            self.output.push('/');
 1249|   185k|            self.parse_authority()
 1250|       |        } else {
 1251|  12.4k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  12.4k|            self.parse_path()
 1253|       |        }
 1254|   198k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCslUwV8J7e77q_5oxttl:
 1439|   185k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   185k|        match c {
 1441|       |            None => {
 1442|  44.5k|                self.output_positions.path_end = self.output.len();
 1443|  44.5k|                self.output_positions.query_end = self.output.len();
 1444|  44.5k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  19.8k|                self.output_positions.path_end = self.output.len();
 1448|  19.8k|                self.output.push('?');
 1449|  19.8k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  19.9k|                self.output_positions.path_end = self.output.len();
 1453|  19.9k|                self.output_positions.query_end = self.output.len();
 1454|  19.9k|                self.output.push('#');
 1455|  19.9k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|   101k|                self.output.push('/');
 1459|   101k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   185k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCslUwV8J7e77q_5oxttl:
 1468|   144k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   534k|        loop {
 1470|   534k|            let c = self.input.next();
 1471|   534k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   159k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|   159k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|   159k|                    } else if c == Some('/') {
 1481|  14.9k|                        self.output.push('/');
 1482|   144k|                    }
 1483|       |
 1484|   159k|                    if c == Some('?') {
 1485|  27.2k|                        self.output_positions.path_end = self.output.len();
 1486|  27.2k|                        self.output.push('?');
 1487|  27.2k|                        return self.parse_query();
 1488|   132k|                    } else if c == Some('#') {
 1489|  11.6k|                        self.output_positions.path_end = self.output.len();
 1490|  11.6k|                        self.output_positions.query_end = self.output.len();
 1491|  11.6k|                        self.output.push('#');
 1492|  11.6k|                        return self.parse_fragment();
 1493|   120k|                    } else if c.is_none() {
 1494|   105k|                        self.output_positions.path_end = self.output.len();
 1495|   105k|                        self.output_positions.query_end = self.output.len();
 1496|   105k|                        return Ok(());
 1497|  14.9k|                    }
 1498|       |                }
 1499|   375k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   144k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCslUwV8J7e77q_5oxttl:
 1546|   373k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   373k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   330k|            self.output.push(c);
 1549|   330k|            Ok(())
 1550|  43.2k|        } else if c == '%' {
 1551|  29.8k|            self.read_echar()
 1552|       |        } else {
 1553|  13.3k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   373k|    }
_RNvXsg_CsbOXESBDtkxG_5oxiriINtB5_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCslUwV8J7e77q_5oxttl:
  417|   559k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|   559k|        self.iri.fmt(f)
  419|   559k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E18parse_scheme_startCslUwV8J7e77q_5oxttl:
 1199|   904k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   904k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  6.14k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  6.14k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   716k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   724k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   904k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_hostCslUwV8J7e77q_5oxttl:
 1359|   236k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   236k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|   102k|            let start_position = self.input.position;
 1363|   513k|            while let Some(c) = self.input.next() {
 1364|   485k|                self.output.push(c);
 1365|   485k|                if c == ']' {
 1366|  75.7k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  75.7k|                    if !UNCHECKED {
 1368|  75.7k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  10.1k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  65.6k|                        }
 1371|      0|                    }
 1372|       |
 1373|  65.6k|                    let c = self.input.next();
 1374|  65.6k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  23.9k|                            self.output.push(':');
 1377|  23.9k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  24.2k|                            self.output_positions.authority_end = self.output.len();
 1381|  24.2k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  17.3k|                        Some(c) => {
 1384|  17.3k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  17.3k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   410k|                }
 1393|       |            }
 1394|  27.1k|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|  27.1k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   359k|            loop {
 1404|   359k|                let c = self.input.next();
 1405|   359k|                match c {
 1406|       |                    Some(':') => {
 1407|  43.7k|                        self.output.push(':');
 1408|  43.7k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  84.3k|                        self.output_positions.authority_end = self.output.len();
 1412|  84.3k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   231k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   236k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCslUwV8J7e77q_5oxttl:
 1213|   228k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   986k|        loop {
 1215|   986k|            let c = self.input.next();
 1216|   986k|            match c {
 1217|   986k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   757k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   228k|                    self.output.push(':');
 1222|   228k|                    self.output_positions.scheme_end = self.output.len();
 1223|   228k|                    self.input_scheme_end = self.input.position;
 1224|   228k|                    return if self.input.starts_with('/') {
 1225|   198k|                        self.input.next();
 1226|   198k|                        self.output.push('/');
 1227|   198k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  30.2k|                        self.output_positions.authority_end = self.output.len();
 1230|  30.2k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   228k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCslUwV8J7e77q_5oxttl:
 1420|  52.9k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|   135k|        loop {
 1422|   135k|            let c = self.input.next();
 1423|   135k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  52.9k|                    self.output_positions.authority_end = self.output.len();
 1426|  52.9k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  82.2k|                Some(c) => {
 1429|  82.2k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  82.2k|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  52.9k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E19remove_last_segmentCslUwV8J7e77q_5oxttl:
 1525|   276k|    fn remove_last_segment(&mut self) {
 1526|   276k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   276k|            .rfind('/')
 1528|   276k|            .unwrap_or(0);
 1529|   276k|        self.output
 1530|   276k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   276k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCslUwV8J7e77q_5oxttl:
  717|   363k|    pub fn path(&self) -> &str {
  718|   363k|        self.0.path()
  719|   363k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCslUwV8J7e77q_5oxttl:
 1546|   165k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   165k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   165k|            self.output.push(c);
 1549|   165k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   165k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_pathCslUwV8J7e77q_5oxttl:
 1468|   371k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  1.49M|        loop {
 1470|  1.49M|            let c = self.input.next();
 1471|  1.49M|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   383k|                    if self.output.as_str().ends_with("/..") {
 1474|  9.98k|                        self.remove_last_segment();
 1475|  9.98k|                        self.remove_last_segment();
 1476|  9.98k|                        self.output.push('/');
 1477|   373k|                    } else if self.output.as_str().ends_with("/.") {
 1478|  32.6k|                        self.remove_last_segment();
 1479|  32.6k|                        self.output.push('/');
 1480|   341k|                    } else if c == Some('/') {
 1481|  61.6k|                        self.output.push('/');
 1482|   279k|                    }
 1483|       |
 1484|   383k|                    if c == Some('?') {
 1485|  39.8k|                        self.output_positions.path_end = self.output.len();
 1486|  39.8k|                        self.output.push('?');
 1487|  39.8k|                        return self.parse_query();
 1488|   343k|                    } else if c == Some('#') {
 1489|  31.1k|                        self.output_positions.path_end = self.output.len();
 1490|  31.1k|                        self.output_positions.query_end = self.output.len();
 1491|  31.1k|                        self.output.push('#');
 1492|  31.1k|                        return self.parse_fragment();
 1493|   312k|                    } else if c.is_none() {
 1494|   235k|                        self.output_positions.path_end = self.output.len();
 1495|   235k|                        self.output_positions.query_end = self.output.len();
 1496|   235k|                        return Ok(());
 1497|  76.9k|                    }
 1498|       |                }
 1499|  1.11M|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   371k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echarCslUwV8J7e77q_5oxttl:
 1558|  79.1k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  79.1k|        let c1 = self.input.next();
 1560|  79.1k|        let c2 = self.input.next();
 1561|  79.1k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  42.0k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  35.5k|            self.output.push('%');
 1565|  35.5k|            self.output.push(c1.unwrap());
 1566|  35.5k|            self.output.push(c2.unwrap());
 1567|  35.5k|            Ok(())
 1568|       |        } else {
 1569|  43.5k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  43.5k|                Some('%'),
 1571|  43.5k|                c1,
 1572|  43.5k|                c2,
 1573|  43.5k|            ]))
 1574|       |        }
 1575|  79.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_relativeCslUwV8J7e77q_5oxttl:
 1256|   800k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   800k|        if let Some(base) = self.base {
 1258|   800k|            match self.input.front() {
 1259|       |                None => {
 1260|   181k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|   181k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|   181k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|   181k|                    self.output_positions.path_end = base.positions.path_end;
 1264|   181k|                    self.output_positions.query_end = base.positions.query_end;
 1265|   181k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   271k|                    self.input.next();
 1269|   271k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  60.3k|                    self.input.next();
 1273|  60.3k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  60.3k|                    self.output.push('?');
 1275|  60.3k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  60.3k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  60.3k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  60.3k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  63.4k|                    self.input.next();
 1282|  63.4k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  63.4k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  63.4k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  63.4k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  63.4k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  63.4k|                    self.output.push('#');
 1288|  63.4k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|   223k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|   223k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|   223k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|   223k|                    self.output_positions.path_end = base.positions.path_end;
 1295|   223k|                    self.remove_last_segment();
 1296|   223k|                    if self.output.len() > base.positions.scheme_end {
 1297|   211k|                        // We have some path or authority, we keep a base '/'
 1298|   211k|                        self.output.push('/');
 1299|   211k|                    }
 1300|   223k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   800k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCslUwV8J7e77q_5oxttl:
 1534|  2.78M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  2.78M|        if UNCHECKED || is_url_code_point(c) {
 1536|  2.78M|            self.output.push(c);
 1537|  2.78M|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  2.78M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCslUwV8J7e77q_5oxttl:
 1199|   228k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   228k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   228k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   228k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_refCslUwV8J7e77q_5oxttl:
  154|   904k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   904k|        IriRef {
  156|   904k|            iri: &self.iri,
  157|   904k|            positions: self.positions,
  158|   904k|        }
  159|   904k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCslUwV8J7e77q_5oxttl:
  258|   363k|    pub fn path(&self) -> &str {
  259|   363k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|   363k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCslUwV8J7e77q_5oxttl:
 1359|   185k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   185k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  22.8k|            let start_position = self.input.position;
 1363|  91.5k|            while let Some(c) = self.input.next() {
 1364|  91.5k|                self.output.push(c);
 1365|  91.5k|                if c == ']' {
 1366|  22.8k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  22.8k|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|  22.8k|                    }
 1372|       |
 1373|  22.8k|                    let c = self.input.next();
 1374|  22.8k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  7.59k|                            self.output.push(':');
 1377|  7.59k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  15.2k|                            self.output_positions.authority_end = self.output.len();
 1381|  15.2k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  68.7k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  1.22M|            loop {
 1404|  1.22M|                let c = self.input.next();
 1405|  1.22M|                match c {
 1406|       |                    Some(':') => {
 1407|  45.3k|                        self.output.push(':');
 1408|  45.3k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   117k|                        self.output_positions.authority_end = self.output.len();
 1412|   117k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  1.06M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   185k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_portCslUwV8J7e77q_5oxttl:
 1420|  67.7k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  81.2k|        loop {
 1422|  81.2k|            let c = self.input.next();
 1423|  81.2k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  55.4k|                    self.output_positions.authority_end = self.output.len();
 1426|  55.4k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  25.7k|                Some(c) => {
 1429|  25.7k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  13.4k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  12.2k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  67.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E12parse_schemeCslUwV8J7e77q_5oxttl:
 1213|   174k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   613k|        loop {
 1215|   613k|            let c = self.input.next();
 1216|   593k|            match c {
 1217|   593k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   439k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  97.9k|                    self.output.push(':');
 1222|  97.9k|                    self.output_positions.scheme_end = self.output.len();
 1223|  97.9k|                    self.input_scheme_end = self.input.position;
 1224|  97.9k|                    return if self.input.starts_with('/') {
 1225|  52.5k|                        self.input.next();
 1226|  52.5k|                        self.output.push('/');
 1227|  52.5k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  45.4k|                        self.output_positions.authority_end = self.output.len();
 1230|  45.4k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  76.2k|                    self.input = ParserInput {
 1235|  76.2k|                        value: self.iri.chars(),
 1236|  76.2k|                        position: 0,
 1237|  76.2k|                    }; // reset
 1238|  76.2k|                    self.output.clear();
 1239|  76.2k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   174k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCslUwV8J7e77q_5oxttl:
   89|   904k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   904k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   904k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   690k|        Ok(IriRef {
   93|   690k|            iri: target_buffer,
   94|   690k|            positions,
   95|   690k|        })
   96|   904k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCslUwV8J7e77q_5oxttl:
 1534|  2.03M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  2.03M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.90M|            self.output.push(c);
 1537|  1.90M|            Ok(())
 1538|   133k|        } else if c == '%' {
 1539|  49.2k|            self.read_echar()
 1540|       |        } else {
 1541|  84.3k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  2.03M|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_erroruECslUwV8J7e77q_5oxttl:
 1578|   214k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|   214k|        Err(IriParseError { kind })
 1580|   214k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E20parse_relative_slashCslUwV8J7e77q_5oxttl:
 1317|   271k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|   271k|        if self.input.starts_with('/') {
 1319|   223k|            self.input.next();
 1320|   223k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|   223k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|   223k|            self.output.push('/');
 1323|   223k|            self.output.push('/');
 1324|   223k|            self.parse_authority()
 1325|       |        } else {
 1326|  48.2k|            self.output
 1327|  48.2k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|  48.2k|            self.output.push('/');
 1329|  48.2k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|  48.2k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|  48.2k|            self.parse_path()
 1332|       |        }
 1333|   271k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCslUwV8J7e77q_5oxttl:
 1174|   228k|    fn parse(
 1175|   228k|        iri: &'a str,
 1176|   228k|        base: Option<IriRef<&'a str>>,
 1177|   228k|        output: &'a mut O,
 1178|   228k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   228k|        let mut parser = Self {
 1180|   228k|            iri,
 1181|   228k|            base,
 1182|   228k|            input: ParserInput {
 1183|   228k|                value: iri.chars(),
 1184|   228k|                position: 0,
 1185|   228k|            },
 1186|   228k|            output,
 1187|   228k|            output_positions: IriElementsPositions {
 1188|   228k|                scheme_end: 0,
 1189|   228k|                authority_end: 0,
 1190|   228k|                path_end: 0,
 1191|   228k|                query_end: 0,
 1192|   228k|            },
 1193|   228k|            input_scheme_end: 0,
 1194|   228k|        };
 1195|   228k|        parser.parse_scheme_start()?;
 1196|   228k|        Ok(parser.output_positions)
 1197|   228k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCslUwV8J7e77q_5oxttl:
 1335|   185k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  1.37M|        loop {
 1338|  1.37M|            let c = self.input.next();
 1339|  1.37M|            match c {
 1340|       |                Some('@') => {
 1341|  2.03k|                    self.output.push('@');
 1342|  2.03k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   183k|                    self.input = ParserInput {
 1346|   183k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   183k|                        position: self.input_scheme_end + 2,
 1348|   183k|                    };
 1349|   183k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   183k|                    return self.parse_host();
 1351|       |                }
 1352|  1.18M|                Some(c) => {
 1353|  1.18M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   185k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCslUwV8J7e77q_5oxttl:
 1518|  54.4k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   211k|        while let Some(c) = self.input.next() {
 1520|   157k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  54.4k|        Ok(())
 1523|  54.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_queryCslUwV8J7e77q_5oxttl:
 1504|   135k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   484k|        while let Some(c) = self.input.next() {
 1506|   415k|            if c == '#' {
 1507|  41.9k|                self.output_positions.query_end = self.output.len();
 1508|  41.9k|                self.output.push('#');
 1509|  41.9k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   373k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  69.1k|        self.output_positions.query_end = self.output.len();
 1515|  69.1k|        Ok(())
 1516|   135k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCslUwV8J7e77q_5oxttl:
  584|   904k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   904k|        Ok(Iri(self.0.resolve(iri)?))
  586|   904k|    }
_RNvXsL_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCslUwV8J7e77q_5oxttl:
  896|   559k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|   559k|        self.0.fmt(f)
  898|   559k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echar0CslUwV8J7e77q_5oxttl:
 1561|  69.1k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCslUwV8J7e77q_5oxttl:
 1504|  47.1k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   212k|        while let Some(c) = self.input.next() {
 1506|   188k|            if c == '#' {
 1507|  22.8k|                self.output_positions.query_end = self.output.len();
 1508|  22.8k|                self.output.push('#');
 1509|  22.8k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   165k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  24.2k|        self.output_positions.query_end = self.output.len();
 1515|  24.2k|        Ok(())
 1516|  47.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E5parseCslUwV8J7e77q_5oxttl:
 1174|   904k|    fn parse(
 1175|   904k|        iri: &'a str,
 1176|   904k|        base: Option<IriRef<&'a str>>,
 1177|   904k|        output: &'a mut O,
 1178|   904k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   904k|        let mut parser = Self {
 1180|   904k|            iri,
 1181|   904k|            base,
 1182|   904k|            input: ParserInput {
 1183|   904k|                value: iri.chars(),
 1184|   904k|                position: 0,
 1185|   904k|            },
 1186|   904k|            output,
 1187|   904k|            output_positions: IriElementsPositions {
 1188|   904k|                scheme_end: 0,
 1189|   904k|                authority_end: 0,
 1190|   904k|                path_end: 0,
 1191|   904k|                query_end: 0,
 1192|   904k|            },
 1193|   904k|            input_scheme_end: 0,
 1194|   904k|        };
 1195|   904k|        parser.parse_scheme_start()?;
 1196|   690k|        Ok(parser.output_positions)
 1197|   904k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCslUwV8J7e77q_5oxttl:
  567|   228k|    pub fn parse_unchecked(iri: T) -> Self {
  568|   228k|        Iri(IriRef::parse_unchecked(iri))
  569|   228k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E23parse_path_or_authorityCslUwV8J7e77q_5oxttl:
 1245|  52.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  52.5k|        if self.input.starts_with('/') {
 1247|  24.5k|            self.input.next();
 1248|  24.5k|            self.output.push('/');
 1249|  24.5k|            self.parse_authority()
 1250|       |        } else {
 1251|  27.9k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  27.9k|            self.parse_path()
 1253|       |        }
 1254|  52.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E16parse_path_startCslUwV8J7e77q_5oxttl:
 1439|   164k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   164k|        match c {
 1441|       |            None => {
 1442|  77.6k|                self.output_positions.path_end = self.output.len();
 1443|  77.6k|                self.output_positions.query_end = self.output.len();
 1444|  77.6k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  35.2k|                self.output_positions.path_end = self.output.len();
 1448|  35.2k|                self.output.push('?');
 1449|  35.2k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  25.0k|                self.output_positions.path_end = self.output.len();
 1453|  25.0k|                self.output_positions.query_end = self.output.len();
 1454|  25.0k|                self.output.push('#');
 1455|  25.0k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  26.1k|                self.output.push('/');
 1459|  26.1k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   164k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echars_0CslUwV8J7e77q_5oxttl:
 1562|  41.9k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCslUwV8J7e77q_5oxttl:
 1629|   373k|fn is_url_query_code_point(c: char) -> bool {
 1630|   373k|    is_url_code_point(c)
 1631|  46.2k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   373k|}
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCslUwV8J7e77q_5oxttl:
 1092|   914k|    fn len(&self) -> usize {
 1093|   914k|        self.len
 1094|   914k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCslUwV8J7e77q_5oxttl:
 1087|   183k|    fn truncate(&mut self, new_len: usize) {
 1088|   183k|        self.len = new_len;
 1089|   183k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCslUwV8J7e77q_5oxttl:
 1065|   228k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCslUwV8J7e77q_5oxttl:
 1072|  4.76M|    fn push(&mut self, c: char) {
 1073|  4.76M|        self.len += c.len_utf8();
 1074|  4.76M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCslUwV8J7e77q_5oxttl:
 1097|   318k|    fn as_str(&self) -> &str {
 1098|   318k|        ""
 1099|   318k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCslUwV8J7e77q_5oxttl:
 1141|  10.7M|    fn next(&mut self) -> Option<char> {
 1142|  10.7M|        if let Some(head) = self.value.next() {
 1143|  9.80M|            self.position += head.len_utf8();
 1144|  9.80M|            Some(head)
 1145|       |        } else {
 1146|   898k|            None
 1147|       |        }
 1148|  10.7M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCslUwV8J7e77q_5oxttl:
 1151|  1.93M|    fn front(&self) -> Option<char> {
 1152|  1.93M|        self.value.clone().next()
 1153|  1.93M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCslUwV8J7e77q_5oxttl:
 1156|  1.27M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.27M|        self.value.as_str().starts_with(c)
 1158|  1.27M|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCslUwV8J7e77q_5oxttl:
 1584|  2.40M|fn is_url_code_point(c: char) -> bool {
 1585|  2.40M|    matches!(c,
 1586|   762k|        'a'..='z'
 1587|   441k|        | 'A'..='Z'
 1588|  1.11M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   271k|        | '\u{A0}'..='\u{D7FF}'
 1609|  86.7k|        | '\u{F900}'..='\u{FDCF}'
 1610|  86.7k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  86.7k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  86.7k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  86.7k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  86.7k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  86.7k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  86.7k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  86.7k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  86.7k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  86.7k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  86.6k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  86.6k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  86.6k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  86.6k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     70|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  2.40M|}
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer4pushCslUwV8J7e77q_5oxttl:
 1104|  4.66M|    fn push(&mut self, c: char) {
 1105|  4.66M|        self.push(c);
 1106|  4.66M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer5clearCslUwV8J7e77q_5oxttl:
 1114|  76.2k|    fn clear(&mut self) {
 1115|  76.2k|        self.clear();
 1116|  76.2k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8push_strCslUwV8J7e77q_5oxttl:
 1109|   800k|    fn push_str(&mut self, s: &str) {
 1110|   800k|        self.push_str(s);
 1111|   800k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8truncateCslUwV8J7e77q_5oxttl:
 1119|   501k|    fn truncate(&mut self, new_len: usize) {
 1120|   501k|        self.truncate(new_len);
 1121|   501k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer3lenCslUwV8J7e77q_5oxttl:
 1124|  1.48M|    fn len(&self) -> usize {
 1125|  1.48M|        self.len()
 1126|  1.48M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer6as_strCslUwV8J7e77q_5oxttl:
 1129|  1.03M|    fn as_str(&self) -> &str {
 1130|  1.03M|        self.as_str()
 1131|  1.03M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCslM7Y37AdxjQ_5oxrdf:
 1546|   769k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   769k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   727k|            self.output.push(c);
 1549|   727k|            Ok(())
 1550|  42.0k|        } else if c == '%' {
 1551|  34.3k|            self.read_echar()
 1552|       |        } else {
 1553|  7.68k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   769k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CslM7Y37AdxjQ_5oxrdf:
 1561|   100k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCslM7Y37AdxjQ_5oxrdf:
 1199|   582k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   582k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   582k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   582k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCslM7Y37AdxjQ_5oxrdf:
 1359|   487k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   487k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  81.8k|            let start_position = self.input.position;
 1363|   335k|            while let Some(c) = self.input.next() {
 1364|   335k|                self.output.push(c);
 1365|   335k|                if c == ']' {
 1366|  81.8k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  81.8k|                    if !UNCHECKED {
 1368|  81.8k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  81.8k|                        }
 1371|      0|                    }
 1372|       |
 1373|  81.8k|                    let c = self.input.next();
 1374|  81.8k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  30.4k|                            self.output.push(':');
 1377|  30.4k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  39.1k|                            self.output_positions.authority_end = self.output.len();
 1381|  39.1k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  12.2k|                        Some(c) => {
 1384|  12.2k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  12.2k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   253k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  2.40M|            loop {
 1404|  2.40M|                let c = self.input.next();
 1405|  2.40M|                match c {
 1406|       |                    Some(':') => {
 1407|   118k|                        self.output.push(':');
 1408|   118k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   278k|                        self.output_positions.authority_end = self.output.len();
 1412|   278k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  2.01M|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   487k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCslM7Y37AdxjQ_5oxrdf:
  199|  63.8k|    pub fn is_absolute(&self) -> bool {
  200|  63.8k|        self.positions.scheme_end != 0
  201|  63.8k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE5parseCslM7Y37AdxjQ_5oxrdf:
   58|   519k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   519k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   348k|        Ok(Self { iri, positions })
   61|   519k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCslM7Y37AdxjQ_5oxrdf:
 1468|   198k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   766k|        loop {
 1470|   766k|            let c = self.input.next();
 1471|   766k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   214k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|   214k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|   214k|                    } else if c == Some('/') {
 1481|  32.4k|                        self.output.push('/');
 1482|   182k|                    }
 1483|       |
 1484|   214k|                    if c == Some('?') {
 1485|  49.3k|                        self.output_positions.path_end = self.output.len();
 1486|  49.3k|                        self.output.push('?');
 1487|  49.3k|                        return self.parse_query();
 1488|   165k|                    } else if c == Some('#') {
 1489|  18.4k|                        self.output_positions.path_end = self.output.len();
 1490|  18.4k|                        self.output_positions.query_end = self.output.len();
 1491|  18.4k|                        self.output.push('#');
 1492|  18.4k|                        return self.parse_fragment();
 1493|   146k|                    } else if c.is_none() {
 1494|   114k|                        self.output_positions.path_end = self.output.len();
 1495|   114k|                        self.output_positions.query_end = self.output.len();
 1496|   114k|                        return Ok(());
 1497|  32.4k|                    }
 1498|       |                }
 1499|   551k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   198k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCslM7Y37AdxjQ_5oxrdf:
 1245|   531k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   531k|        if self.input.starts_with('/') {
 1247|   524k|            self.input.next();
 1248|   524k|            self.output.push('/');
 1249|   524k|            self.parse_authority()
 1250|       |        } else {
 1251|  7.53k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  7.53k|            self.parse_path()
 1253|       |        }
 1254|   531k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCslM7Y37AdxjQ_5oxrdf:
  185|   690k|    pub fn into_inner(self) -> T {
  186|   690k|        self.iri
  187|   690k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriReE5parseCslM7Y37AdxjQ_5oxrdf:
  556|   519k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   519k|        IriRef::parse(iri)?.try_into()
  558|   519k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE11is_absoluteCslM7Y37AdxjQ_5oxrdf:
  199|   348k|    pub fn is_absolute(&self) -> bool {
  200|   348k|        self.positions.scheme_end != 0
  201|   348k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCslM7Y37AdxjQ_5oxrdf:
   58|  63.8k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  63.8k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  63.8k|        Ok(Self { iri, positions })
   61|  63.8k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECslM7Y37AdxjQ_5oxrdf:
 1578|   170k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|   170k|        Err(IriParseError { kind })
 1580|   170k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCslM7Y37AdxjQ_5oxrdf:
 1558|   123k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|   123k|        let c1 = self.input.next();
 1560|   123k|        let c2 = self.input.next();
 1561|   123k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  53.6k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  41.3k|            self.output.push('%');
 1565|  41.3k|            self.output.push(c1.unwrap());
 1566|  41.3k|            self.output.push(c2.unwrap());
 1567|  41.3k|            Ok(())
 1568|       |        } else {
 1569|  82.4k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  82.4k|                Some('%'),
 1571|  82.4k|                c1,
 1572|  82.4k|                c2,
 1573|  82.4k|            ]))
 1574|       |        }
 1575|   123k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCslM7Y37AdxjQ_5oxrdf:
 1174|   582k|    fn parse(
 1175|   582k|        iri: &'a str,
 1176|   582k|        base: Option<IriRef<&'a str>>,
 1177|   582k|        output: &'a mut O,
 1178|   582k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   582k|        let mut parser = Self {
 1180|   582k|            iri,
 1181|   582k|            base,
 1182|   582k|            input: ParserInput {
 1183|   582k|                value: iri.chars(),
 1184|   582k|                position: 0,
 1185|   582k|            },
 1186|   582k|            output,
 1187|   582k|            output_positions: IriElementsPositions {
 1188|   582k|                scheme_end: 0,
 1189|   582k|                authority_end: 0,
 1190|   582k|                path_end: 0,
 1191|   582k|                query_end: 0,
 1192|   582k|            },
 1193|   582k|            input_scheme_end: 0,
 1194|   582k|        };
 1195|   582k|        parser.parse_scheme_start()?;
 1196|   412k|        Ok(parser.output_positions)
 1197|   582k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCslM7Y37AdxjQ_5oxrdf:
 1335|   524k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  2.92M|        loop {
 1338|  2.92M|            let c = self.input.next();
 1339|  2.92M|            match c {
 1340|       |                Some('@') => {
 1341|  29.2k|                    self.output.push('@');
 1342|  29.2k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   457k|                    self.input = ParserInput {
 1346|   457k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   457k|                        position: self.input_scheme_end + 2,
 1348|   457k|                    };
 1349|   457k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   457k|                    return self.parse_host();
 1351|       |                }
 1352|  2.43M|                Some(c) => {
 1353|  2.43M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   524k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCslM7Y37AdxjQ_5oxrdf:
  665|   690k|    pub fn into_inner(self) -> T {
  666|   690k|        self.0.into_inner()
  667|   690k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CslM7Y37AdxjQ_5oxrdf:
 1562|  49.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCslM7Y37AdxjQ_5oxrdf:
 1420|   148k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|   176k|        loop {
 1422|   176k|            let c = self.input.next();
 1423|   176k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  96.3k|                    self.output_positions.authority_end = self.output.len();
 1426|  96.3k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  79.8k|                Some(c) => {
 1429|  79.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  27.2k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  52.5k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|   148k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCslM7Y37AdxjQ_5oxrdf:
 1534|  5.65M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  5.65M|        if UNCHECKED || is_url_code_point(c) {
 1536|  5.54M|            self.output.push(c);
 1537|  5.54M|            Ok(())
 1538|   105k|        } else if c == '%' {
 1539|  89.5k|            self.read_echar()
 1540|       |        } else {
 1541|  15.6k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  5.65M|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCslM7Y37AdxjQ_5oxrdf:
 1439|   414k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   414k|        match c {
 1441|       |            None => {
 1442|   109k|                self.output_positions.path_end = self.output.len();
 1443|   109k|                self.output_positions.query_end = self.output.len();
 1444|   109k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|   104k|                self.output_positions.path_end = self.output.len();
 1448|   104k|                self.output.push('?');
 1449|   104k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  60.6k|                self.output_positions.path_end = self.output.len();
 1453|  60.6k|                self.output_positions.query_end = self.output.len();
 1454|  60.6k|                self.output.push('#');
 1455|  60.6k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|   139k|                self.output.push('/');
 1459|   139k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   414k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCslM7Y37AdxjQ_5oxrdf:
  556|  63.8k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  63.8k|        IriRef::parse(iri)?.try_into()
  558|  63.8k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriReEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCslM7Y37AdxjQ_5oxrdf:
  968|   348k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   348k|        if iri.is_absolute() {
  970|   348k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   348k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCslM7Y37AdxjQ_5oxrdf:
 1504|   153k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   889k|        while let Some(c) = self.input.next() {
 1506|   806k|            if c == '#' {
 1507|  37.0k|                self.output_positions.query_end = self.output.len();
 1508|  37.0k|                self.output.push('#');
 1509|  37.0k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   769k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  82.8k|        self.output_positions.query_end = self.output.len();
 1515|  82.8k|        Ok(())
 1516|   153k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCslM7Y37AdxjQ_5oxrdf:
 1518|   116k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   760k|        while let Some(c) = self.input.next() {
 1520|   655k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|   105k|        Ok(())
 1523|   116k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCslM7Y37AdxjQ_5oxrdf:
 1213|   582k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  3.39M|        loop {
 1215|  3.39M|            let c = self.input.next();
 1216|  3.39M|            match c {
 1217|  3.39M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  2.81M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   582k|                    self.output.push(':');
 1222|   582k|                    self.output_positions.scheme_end = self.output.len();
 1223|   582k|                    self.input_scheme_end = self.input.position;
 1224|   582k|                    return if self.input.starts_with('/') {
 1225|   531k|                        self.input.next();
 1226|   531k|                        self.output.push('/');
 1227|   531k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  51.4k|                        self.output_positions.authority_end = self.output.len();
 1230|  51.4k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   582k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCslM7Y37AdxjQ_5oxrdf:
  968|  63.8k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  63.8k|        if iri.is_absolute() {
  970|  63.8k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  63.8k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCslM7Y37AdxjQ_5oxrdf:
 1156|  1.60M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.60M|        self.value.as_str().starts_with(c)
 1158|  1.60M|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCslM7Y37AdxjQ_5oxrdf:
 1065|   582k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCslM7Y37AdxjQ_5oxrdf:
 1092|  1.93M|    fn len(&self) -> usize {
 1093|  1.93M|        self.len
 1094|  1.93M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCslM7Y37AdxjQ_5oxrdf:
 1072|  11.8M|    fn push(&mut self, c: char) {
 1073|  11.8M|        self.len += c.len_utf8();
 1074|  11.8M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCslM7Y37AdxjQ_5oxrdf:
 1097|   429k|    fn as_str(&self) -> &str {
 1098|   429k|        ""
 1099|   429k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCslM7Y37AdxjQ_5oxrdf:
 1087|   457k|    fn truncate(&mut self, new_len: usize) {
 1088|   457k|        self.len = new_len;
 1089|   457k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCslM7Y37AdxjQ_5oxrdf:
 1584|  6.42M|fn is_url_code_point(c: char) -> bool {
 1585|  6.42M|    matches!(c,
 1586|  3.56M|        'a'..='z'
 1587|   686k|        | 'A'..='Z'
 1588|  1.92M|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   528k|        | '\u{A0}'..='\u{D7FF}'
 1609|   187k|        | '\u{F900}'..='\u{FDCF}'
 1610|   187k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|   187k|        | '\u{10000}'..='\u{1FFFD}'
 1612|   187k|        | '\u{20000}'..='\u{2FFFD}'
 1613|   187k|        | '\u{30000}'..='\u{3FFFD}'
 1614|   187k|        | '\u{40000}'..='\u{4FFFD}'
 1615|   187k|        | '\u{50000}'..='\u{5FFFD}'
 1616|   187k|        | '\u{60000}'..='\u{6FFFD}'
 1617|   187k|        | '\u{70000}'..='\u{7FFFD}'
 1618|   187k|        | '\u{80000}'..='\u{8FFFD}'
 1619|   187k|        | '\u{90000}'..='\u{9FFFD}'
 1620|   187k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|   187k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|   187k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|   187k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     36|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  6.42M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCslM7Y37AdxjQ_5oxrdf:
 1141|  13.0M|    fn next(&mut self) -> Option<char> {
 1142|  13.0M|        if let Some(head) = self.value.next() {
 1143|  12.4M|            self.position += head.len_utf8();
 1144|  12.4M|            Some(head)
 1145|       |        } else {
 1146|   602k|            None
 1147|       |        }
 1148|  13.0M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCslM7Y37AdxjQ_5oxrdf:
 1629|   769k|fn is_url_query_code_point(c: char) -> bool {
 1630|   769k|    is_url_code_point(c)
 1631|  49.4k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   769k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCslM7Y37AdxjQ_5oxrdf:
 1151|   582k|    fn front(&self) -> Option<char> {
 1152|   582k|        self.value.clone().next()
 1153|   582k|    }
_RNvXsW_CsbOXESBDtkxG_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1003|   385k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   385k|        match &self.kind {
 1005|  6.14k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  56.8k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  56.8k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  10.1k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  64.8k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|   121k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|   121k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|   126k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|   126k|                f,
 1016|   126k|                "Invalid IRI percent encoding '{}'",
 1017|   126k|                cs.iter().flatten().cloned().collect::<String>()
 1018|   126k|            ),
 1019|       |        }
 1020|   385k|    }

_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CslWipVVScnoQ_11rand_chacha:
  208|  4.66M|    fn shuffle_lane_words1230(self) -> Self {
  209|  4.66M|        Self::new([
  210|  4.66M|            self.0[0].shuffle_lane_words1230(),
  211|  4.66M|            self.0[1].shuffle_lane_words1230(),
  212|  4.66M|        ])
  213|  4.66M|    }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCslWipVVScnoQ_11rand_chacha:
   22|  18.6M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  18.6M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  18.6M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CslWipVVScnoQ_11rand_chacha:
  201|  4.66M|    fn shuffle_lane_words2301(self) -> Self {
  202|  4.66M|        Self::new([
  203|  4.66M|            self.0[0].shuffle_lane_words2301(),
  204|  4.66M|            self.0[1].shuffle_lane_words2301(),
  205|  4.66M|        ])
  206|  4.66M|    }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CslWipVVScnoQ_11rand_chacha:
  215|  4.66M|    fn shuffle_lane_words3012(self) -> Self {
  216|  4.66M|        Self::new([
  217|  4.66M|            self.0[0].shuffle_lane_words3012(),
  218|  4.66M|            self.0[1].shuffle_lane_words3012(),
  219|  4.66M|        ])
  220|  4.66M|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CslWipVVScnoQ_11rand_chacha:
   42|  4.66M|        fn $fn(self) -> Self {
   43|  4.66M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  4.66M|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CslWipVVScnoQ_11rand_chacha:
   42|  4.66M|        fn $fn(self) -> Self {
   43|  4.66M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  4.66M|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CslWipVVScnoQ_11rand_chacha:
   42|  4.66M|        fn $fn(self) -> Self {
   43|  4.66M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  4.66M|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CslWipVVScnoQ_11rand_chacha:
   42|  4.66M|        fn $fn(self) -> Self {
   43|  4.66M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  4.66M|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCslWipVVScnoQ_11rand_chacha:
   13|  53.2M|    pub fn new(xs: [W; 2]) -> Self {
   14|  53.2M|        x2(xs, PhantomData)
   15|  53.2M|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCslWipVVScnoQ_11rand_chacha:
   32|  18.6M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  18.6M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  18.6M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  18.6M|            }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECslWipVVScnoQ_11rand_chacha:
  246|  3.49M|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  3.49M|        unsafe { V::unpack(s) }
  248|  3.49M|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECslWipVVScnoQ_11rand_chacha:
  246|   388k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   388k|        unsafe { V::unpack(s) }
  248|   388k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECslWipVVScnoQ_11rand_chacha:
  251|   388k|    fn vec<V, A>(self, a: A) -> V
  252|   388k|    where
  253|   388k|        V: MultiLane<A>,
  254|   388k|    {
  255|   388k|        V::from_lanes(a)
  256|   388k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECslWipVVScnoQ_11rand_chacha:
  259|  3.03k|    fn read_le<V>(self, input: &[u8]) -> V
  260|  3.03k|    where
  261|  3.03k|        V: StoreBytes,
  262|  3.03k|    {
  263|  3.03k|        unsafe { V::unsafe_read_le(input) }
  264|  3.03k|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCslWipVVScnoQ_11rand_chacha:
   92|   388k|    unsafe fn instance() -> Self {
   93|   388k|        Avx2Machine(PhantomData)
   94|   388k|    }
_RNvNtCslWipVVScnoQ_11rand_chacha4guts11init_chacha:
  333|  1.51k|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|  1.51k|            #[inline(always)]
  335|  1.51k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|  1.51k|            use std::arch::x86_64::*;
  337|  1.51k|            #[target_feature(enable = "avx")]
  338|  1.51k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|  1.51k|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|  1.51k|            }
  341|  1.51k|            #[target_feature(enable = "sse2")]
  342|  1.51k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|  1.51k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|  1.51k|            }
  345|  1.51k|            unsafe {
  346|  1.51k|                if is_x86_feature_detected!("avx") {
  347|  1.51k|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|  1.51k|        }
_RNvNtCslWipVVScnoQ_11rand_chacha4guts11refill_wide:
  250|   388k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|   388k|            #[inline(always)]
  252|   388k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|   388k|            use std::arch::x86_64::*;
  254|   388k|            #[target_feature(enable = "avx2")]
  255|   388k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   388k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   388k|                _mm256_zeroupper();
  258|   388k|                ret
  259|   388k|            }
  260|   388k|            #[target_feature(enable = "avx")]
  261|   388k|            #[target_feature(enable = "sse4.1")]
  262|   388k|            #[target_feature(enable = "ssse3")]
  263|   388k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|   388k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|   388k|                _mm256_zeroupper();
  266|   388k|                ret
  267|   388k|            }
  268|   388k|            #[target_feature(enable = "sse4.1")]
  269|   388k|            #[target_feature(enable = "ssse3")]
  270|   388k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|   388k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|   388k|            }
  273|   388k|            #[target_feature(enable = "ssse3")]
  274|   388k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|   388k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|   388k|            }
  277|   388k|            #[target_feature(enable = "sse2")]
  278|   388k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|   388k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|   388k|            }
  281|   388k|            unsafe {
  282|   388k|                if is_x86_feature_detected!("avx2") {
  283|   388k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|   388k|        }
_RNvNvNtCslWipVVScnoQ_11rand_chacha4guts11refill_wide9impl_avx2:
  255|   388k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   388k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   388k|                _mm256_zeroupper();
  258|   388k|                ret
  259|   388k|            }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCslWipVVScnoQ_11rand_chacha:
   64|  1.51k|    unsafe fn instance() -> Self {
   65|  1.51k|        SseMachine(PhantomData)
   66|  1.51k|    }
_RNvNvNtCslWipVVScnoQ_11rand_chacha4guts11init_chacha8impl_avx:
  338|  1.51k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|  1.51k|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|  1.51k|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|  1.51k|    fn from(u32x4: [u32; 4]) -> Self {
  131|  1.51k|        vec128_storage { u32x4 }
  132|  1.51k|    }

_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCslWipVVScnoQ_11rand_chacha:
  519|  1.55M|    fn extract(self, i: u32) -> u32 {
  520|  1.55M|        self.to_lanes()[i as usize]
  521|  1.55M|    }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCslWipVVScnoQ_11rand_chacha:
   52|  3.49M|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  3.49M|                Self::new(x.sse2)
   54|  3.49M|            }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCslWipVVScnoQ_11rand_chacha:
  323|  1.55M|    fn to_lanes(self) -> [u32; 4] {
  324|  1.55M|        unsafe {
  325|  1.55M|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  1.55M|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  1.55M|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  1.55M|        }
  329|  1.55M|    }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCslWipVVScnoQ_11rand_chacha:
 1611|  1.55M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  1.55M|            let [a, b] = self.0[0].to_lanes();
 1613|  1.55M|            let [c, d] = self.0[1].to_lanes();
 1614|  1.55M|            [a, b, c, d]
 1615|  1.55M|        }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCslWipVVScnoQ_11rand_chacha:
 1402|   776k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   776k|            Self::new(p.avx)
 1404|   776k|        }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCslWipVVScnoQ_11rand_chacha:
 1439|  3.10M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  3.10M|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  3.10M|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CslWipVVScnoQ_11rand_chacha:
 1590|  9.32M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  9.32M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  9.32M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CslWipVVScnoQ_11rand_chacha:
 1470|  9.32M|            fn $name(self) -> Self {
 1471|  9.32M|                Self::new(unsafe {
 1472|  9.32M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  9.32M|                })
 1474|  9.32M|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CslWipVVScnoQ_11rand_chacha:
 1586|  9.32M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  9.32M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  9.32M|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCslWipVVScnoQ_11rand_chacha:
  523|  5.43M|    fn insert(self, v: u32, i: u32) -> Self {
  524|  5.43M|        Self::new(unsafe {
  525|  5.43M|            match i {
  526|  2.71M|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  2.71M|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  5.43M|    }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCslWipVVScnoQ_11rand_chacha:
  331|   388k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|   388k|        unsafe {
  333|   388k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|   388k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|   388k|            Self::new(x)
  336|   388k|        }
  337|   388k|    }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCslWipVVScnoQ_11rand_chacha:
 1543|  37.2M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  37.2M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  37.2M|                }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCslWipVVScnoQ_11rand_chacha:
   64|  21.7M|            fn new(x: __m128i) -> Self {
   65|  21.7M|                $vec {
   66|  21.7M|                    x,
   67|  21.7M|                    s3: PhantomData,
   68|  21.7M|                    s4: PhantomData,
   69|  21.7M|                    ni: PhantomData,
   70|  21.7M|                }
   71|  21.7M|            }
_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCslWipVVScnoQ_11rand_chacha:
 1543|  37.2M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  37.2M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  37.2M|                }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCslWipVVScnoQ_11rand_chacha:
 1527|  37.2M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  37.2M|                    *self = self.$bin_fn(rhs);
 1529|  37.2M|                }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCslWipVVScnoQ_11rand_chacha:
 1430|  3.10M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  3.10M|            unsafe {
 1432|  3.10M|                [
 1433|  3.10M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  3.10M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  3.10M|                ]
 1436|  3.10M|            }
 1437|  3.10M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CslWipVVScnoQ_11rand_chacha:
 1480|  9.32M|            fn $name(self) -> Self {
 1481|  9.32M|                Self::new(unsafe {
 1482|  9.32M|                    _mm256_or_si256(
 1483|  9.32M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  9.32M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  9.32M|                    )
 1486|  9.32M|                })
 1487|  9.32M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CslWipVVScnoQ_11rand_chacha:
 1470|  9.32M|            fn $name(self) -> Self {
 1471|  9.32M|                Self::new(unsafe {
 1472|  9.32M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  9.32M|                })
 1474|  9.32M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CslWipVVScnoQ_11rand_chacha:
 1480|  9.32M|            fn $name(self) -> Self {
 1481|  9.32M|                Self::new(unsafe {
 1482|  9.32M|                    _mm256_or_si256(
 1483|  9.32M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  9.32M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  9.32M|                    )
 1486|  9.32M|                })
 1487|  9.32M|            }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCslWipVVScnoQ_11rand_chacha:
   89|  6.21M|            fn write_le(self, out: &mut [u8]) {
   90|  6.21M|                assert_eq!(out.len(), 16);
   91|  6.21M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  6.21M|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CslWipVVScnoQ_11rand_chacha:
 1582|  9.32M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  9.32M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  9.32M|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCslWipVVScnoQ_11rand_chacha:
 1602|   388k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|   388k|            Self::new([
 1604|   388k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|   388k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|   388k|            ])
 1607|   388k|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCslWipVVScnoQ_11rand_chacha:
 1617|  1.55M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  1.55M|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  1.55M|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  1.55M|            Self::new([ab, cd])
 1621|  1.55M|        }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCslWipVVScnoQ_11rand_chacha:
 1394|   143M|        fn new(x: __m256i) -> Self {
 1395|   143M|            Self { x, ni: PhantomData }
 1396|   143M|        }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCslWipVVScnoQ_11rand_chacha:
   79|  3.03k|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|  3.03k|                assert_eq!(input.len(), 16);
   81|  3.03k|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|  3.03k|            }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCslWipVVScnoQ_11rand_chacha:
   18|  6.21M|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  6.21M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  6.21M|            }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCslWipVVScnoQ_11rand_chacha:
   58|   391k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|   391k|                vec128_storage { sse2: x.x }
   60|   391k|            }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCslWipVVScnoQ_11rand_chacha:
 1683|   388k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|   388k|            Self {
 1685|   388k|                avx: [
 1686|   388k|                    vec256_storage { avx: x.0[0].x },
 1687|   388k|                    vec256_storage { avx: x.0[1].x },
 1688|   388k|                ],
 1689|   388k|            }
 1690|   388k|        }

_RINvXs2_NtNtCs4mFqzrpYUXA_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECslUwV8J7e77q_5oxttl:
   51|  6.21M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  6.21M|        // Use LE; we explicitly generate one value before the next.
   53|  6.21M|        let x = u128::from(rng.next_u64());
   54|  6.21M|        let y = u128::from(rng.next_u64());
   55|  6.21M|        (y << 64) | x
   56|  6.21M|    }

_RINvCs4mFqzrpYUXA_4rand6randomoECslUwV8J7e77q_5oxttl:
  183|  6.21M|pub fn random<T>() -> T
  184|  6.21M|where Standard: Distribution<T> {
  185|  6.21M|    thread_rng().gen()
  186|  6.21M|}

_RINvYNtNtNtCs4mFqzrpYUXA_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECslUwV8J7e77q_5oxttl:
   93|  6.21M|    fn gen<T>(&mut self) -> T
   94|  6.21M|    where Standard: Distribution<T> {
   95|  6.21M|        Standard.sample(self)
   96|  6.21M|    }

_RNvXs_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngENtB24_7RngCore8next_u64CslUwV8J7e77q_5oxttl:
  124|  12.4M|    fn next_u64(&mut self) -> u64 {
  125|  12.4M|        self.0.next_u64()
  126|  12.4M|    }
_RNvNtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|   388k|    pub fn get_fork_counter() -> usize {
  308|   388k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|   388k|    }
_RNCNvNtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvXs2_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|   388k|    fn generate(&mut self, results: &mut Self::Results) {
  174|   388k|        let global_fork_counter = fork::get_fork_counter();
  175|   388k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|  1.51k|            return self.reseed_and_generate(results, global_fork_counter);
  180|   386k|        }
  181|   386k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|   386k|        self.bytes_until_reseed -= num_bytes as i64;
  183|   386k|        self.inner.generate(results);
  184|   388k|    }
_RNCNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE6reseed0Bd_:
  220|  1.51k|        R::from_rng(&mut self.reseeder).map(|result| {
  221|  1.51k|            self.bytes_until_reseed = self.threshold;
  222|  1.51k|            self.inner = result
  223|  1.51k|        })
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE9is_forkedBb_:
  226|   388k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|   388k|        // In theory, on 32-bit platforms, it is possible for
  228|   388k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|   388k|        //
  230|   388k|        // This check will detect a fork in the normal case where
  231|   388k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|   388k|        // between both is greater than `isize::MAX` (wrapped around).
  233|   388k|        //
  234|   388k|        // It will still fail to detect a fork if there have been more than
  235|   388k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|   388k|        // enough.
  237|   388k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|   388k|    }
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|  1.51k|    fn reseed_and_generate(
  242|  1.51k|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|  1.51k|    ) {
  244|  1.51k|        #![allow(clippy::if_same_then_else)] // false positive
  245|  1.51k|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|  1.51k|        } else {
  248|  1.51k|            trace!("Reseeding RNG (periodic reseed)");
  249|  1.51k|        }
  250|       |
  251|  1.51k|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|  1.51k|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|  1.51k|        }
  257|  1.51k|        self.fork_counter = global_fork_counter;
  258|  1.51k|
  259|  1.51k|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|  1.51k|        self.inner.generate(results);
  261|  1.51k|    }
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE6reseedBb_:
  219|  1.51k|    fn reseed(&mut self) -> Result<(), Error> {
  220|  1.51k|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|  1.51k|        })
  224|  1.51k|    }
_RNvMNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvMs3_NtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }

_RNvXs_NtNtCs4mFqzrpYUXA_4rand4rngs6threadNtB4_9ThreadRngNtCsdaO7UuI6Wbo_9rand_core7RngCore8next_u64:
  109|  12.4M|    fn next_u64(&mut self) -> u64 {
  110|  12.4M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  12.4M|        // creates another mutable reference
  112|  12.4M|        let rng = unsafe { &mut *self.rng.get() };
  113|  12.4M|        rng.next_u64()
  114|  12.4M|    }
_RNCNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread10thread_rng0B7_:
   89|  6.21M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread10thread_rng:
   88|  6.21M|pub fn thread_rng() -> ThreadRng {
   89|  6.21M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  6.21M|    ThreadRng { rng }
   91|  6.21M|}

_RNvXsm_NtCslWipVVScnoQ_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsdaO7UuI6Wbo_9rand_core5block12BlockRngCore8generateCs4mFqzrpYUXA_4rand:
   89|   388k|            fn generate(&mut self, r: &mut Self::Results) {
   90|   388k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|   388k|                self.state.refill4($rounds, unsafe {
   92|   388k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|   388k|                });
   94|  24.8M|                for x in r.as_mut() {
   95|  24.8M|                    *x = x.to_le();
   96|  24.8M|                }
   97|   388k|            }
_RNvXsn_NtCslWipVVScnoQ_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsdaO7UuI6Wbo_9rand_core11SeedableRng9from_seedCs4mFqzrpYUXA_4rand:
  103|  1.51k|            fn from_seed(seed: Self::Seed) -> Self {
  104|  1.51k|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|  1.51k|            }
_RNvXs_NtCslWipVVScnoQ_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|  25.6M|    fn as_ref(&self) -> &[T] {
   47|  25.6M|        &self.0
   48|  25.6M|    }
_RNvXs0_NtCslWipVVScnoQ_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|   388k|    fn as_mut(&mut self) -> &mut [T] {
   52|   388k|        &mut self.0
   53|   388k|    }
_RNvXNtCslWipVVScnoQ_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCslWipVVScnoQ_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|   388k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|   388k|        refill_wide(self, drounds, out)
   86|   388k|    }
_RNvMNtCslWipVVScnoQ_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|  1.51k|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|  1.51k|        init_chacha(key, nonce)
   74|  1.51k|    }
_RINvNtCslWipVVScnoQ_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  2.33M|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  2.33M|    x.b = x.b.shuffle_lane_words3012();
   58|  2.33M|    x.c = x.c.shuffle_lane_words2301();
   59|  2.33M|    x.d = x.d.shuffle_lane_words1230();
   60|  2.33M|    x
   61|  2.33M|}
_RINvNvNtCslWipVVScnoQ_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|  1.51k|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|  1.51k|        let ctr_nonce = [
  237|       |            0,
  238|  1.51k|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|  1.51k|                0
  242|       |            },
  243|  1.51k|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|  1.51k|            read_u32le(&nonce[nonce.len() - 4..]),
  245|  1.51k|        ];
  246|  1.51k|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|  1.51k|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|  1.51k|        ChaCha {
  249|  1.51k|            b: key0.into(),
  250|  1.51k|            c: key1.into(),
  251|  1.51k|            d: ctr_nonce.into(),
  252|  1.51k|        }
_RINvNtCslWipVVScnoQ_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  4.66M|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  4.66M|    x.a += x.b;
   45|  4.66M|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  4.66M|    x.c += x.d;
   47|  4.66M|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  4.66M|    x.a += x.b;
   49|  4.66M|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  4.66M|    x.c += x.d;
   51|  4.66M|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  4.66M|    x
   53|  4.66M|}
_RINvNtCslWipVVScnoQ_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  2.33M|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  2.33M|    x.b = x.b.shuffle_lane_words1230();
   65|  2.33M|    x.c = x.c.shuffle_lane_words2301();
   66|  2.33M|    x.d = x.d.shuffle_lane_words3012();
   67|  2.33M|    x
   68|  2.33M|}
_RINvMNtCslWipVVScnoQ_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   776k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   776k|        let d: M::u32x4 = m.unpack(self.d);
   79|   776k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   776k|    }
_RINvNvNtCslWipVVScnoQ_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|   388k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|   388k|        refill_wide_impl(m, state, drounds, out);
  174|   388k|    }
_RNvNtCslWipVVScnoQ_11rand_chacha4guts10read_u32le:
  229|  3.03k|fn read_u32le(xs: &[u8]) -> u32 {
  230|  3.03k|    assert_eq!(xs.len(), 4);
  231|  3.03k|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|  3.03k|}
_RINvNtCslWipVVScnoQ_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|   388k|fn refill_wide_impl<Mach: Machine>(
  117|   388k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|   388k|) {
  119|   388k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|   388k|    let mut pos = state.pos64(m);
  121|   388k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|   388k|    pos = pos.wrapping_add(1);
  123|   388k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|   388k|    pos = pos.wrapping_add(1);
  125|   388k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|   388k|    pos = pos.wrapping_add(1);
  127|   388k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|   388k|
  129|   388k|    let b = m.unpack(state.b);
  130|   388k|    let c = m.unpack(state.c);
  131|   388k|    let mut x = State {
  132|   388k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|   388k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|   388k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|   388k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|   388k|    };
  137|  2.33M|    for _ in 0..drounds {
  138|  2.33M|        x = round(x);
  139|  2.33M|        x = undiagonalize(round(diagonalize(x)));
  140|  2.33M|    }
  141|   388k|    let mut pos = state.pos64(m);
  142|   388k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|   388k|    pos = pos.wrapping_add(1);
  144|   388k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|   388k|    pos = pos.wrapping_add(1);
  146|   388k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|   388k|    pos = pos.wrapping_add(1);
  148|   388k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|   388k|    pos = pos.wrapping_add(1);
  150|   388k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|   388k|
  152|   388k|    let (a, b, c, d) = (
  153|   388k|        x.a.to_lanes(),
  154|   388k|        x.b.to_lanes(),
  155|   388k|        x.c.to_lanes(),
  156|   388k|        x.d.to_lanes(),
  157|   388k|    );
  158|   388k|    let sb = m.unpack(state.b);
  159|   388k|    let sc = m.unpack(state.c);
  160|   388k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|   388k|    state.d = d4.into();
  162|   388k|    let mut words = out.chunks_exact_mut(16);
  163|  1.55M|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  1.55M|        (a + k).write_le(words.next().unwrap());
  165|  1.55M|        (b + sb).write_le(words.next().unwrap());
  166|  1.55M|        (c + sc).write_le(words.next().unwrap());
  167|  1.55M|        (d + sd).write_le(words.next().unwrap());
  168|  1.55M|    }
  169|   388k|}

_RNCNvXs0_NtCsdaO7UuI6Wbo_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CslUwV8J7e77q_5oxttl:
  198|  12.4M|        let read_u64 = |results: &[u32], index| {
  199|  12.4M|            let data = &results[index..=index + 1];
  200|  12.4M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  12.4M|        };
_RNvXs0_NtCsdaO7UuI6Wbo_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CslUwV8J7e77q_5oxttl:
  197|  12.4M|    fn next_u64(&mut self) -> u64 {
  198|  12.4M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  12.4M|        let len = self.results.as_ref().len();
  204|  12.4M|
  205|  12.4M|        let index = self.index;
  206|  12.4M|        if index < len - 1 {
  207|  12.0M|            self.index += 2;
  208|  12.0M|            // Read an u64 from the current index
  209|  12.0M|            read_u64(self.results.as_ref(), index)
  210|   388k|        } else if index >= len {
  211|   388k|            self.generate_and_set(2);
  212|   388k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  12.4M|    }
_RNvMs_NtCsdaO7UuI6Wbo_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|   388k|    pub fn generate_and_set(&mut self, index: usize) {
  175|   388k|        assert!(index < self.results.as_ref().len());
  176|   388k|        self.core.generate(&mut self.results);
  177|   388k|        self.index = index;
  178|   388k|    }
_RNvMs_NtCsdaO7UuI6Wbo_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs4mFqzrpYUXA_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtCsdaO7UuI6Wbo_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs4mFqzrpYUXA_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RNvXs_CsdaO7UuI6Wbo_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs4mFqzrpYUXA_4rand:
  441|  1.51k|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|  1.51k|        (**self).try_fill_bytes(dest)
  443|  1.51k|    }
_RINvYNtNtCslWipVVScnoQ_11rand_chacha6chacha12ChaCha12CoreNtCsdaO7UuI6Wbo_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs4mFqzrpYUXA_4rand:
  390|  1.51k|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|  1.51k|        let mut seed = Self::Seed::default();
  392|  1.51k|        rng.try_fill_bytes(seed.as_mut())?;
  393|  1.51k|        Ok(Self::from_seed(seed))
  394|  1.51k|    }

_RNvXs_NtCsdaO7UuI6Wbo_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|  1.51k|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|  1.51k|        getrandom(dest)?;
   69|  1.51k|        Ok(())
   70|  1.51k|    }

_RNvNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  6.21M|            unsafe fn __getit(
   84|  6.21M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  6.21M|            ) -> $crate::option::Option<&'static $t> {
   86|  6.21M|                #[thread_local]
   87|  6.21M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  6.21M|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  6.21M|
   90|  6.21M|                unsafe {
   91|  6.21M|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  6.21M|                    })
  101|  6.21M|                }
  102|  6.21M|            }
_RNvNvNtNtCs4mFqzrpYUXA_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCs5pbGoGf5ED1_2n31__19___libfuzzer_sys_run0B5_:
   12|  49.4M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvMs7_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB5_5IdStr6as_strCslUwV8J7e77q_5oxttl:
  265|  6.21M|    fn as_str(&self) -> &str {
  266|  6.21M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  6.21M|        str::from_utf8(&self.0[..len]).unwrap()
  268|  6.21M|    }
_RNvXsH_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
  253|   493k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
   20|   508k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsk_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
   23|   508k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvNtCslM7Y37AdxjQ_5oxrdf10blank_node13to_integer_idCslUwV8J7e77q_5oxttl:
  331|  53.4k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  53.4k|    let digits = id.as_bytes();
  333|  53.4k|    let mut value: u128 = 0;
  334|  53.4k|    if let None | Some(b'0') = digits.first() {
  335|  37.0k|        return None; // No empty string or leading zeros
  336|  16.4k|    }
  337|  74.8k|    for digit in digits {
  338|  67.5k|        value = value.checked_mul(16)?.checked_add(
  339|  66.4k|            match *digit {
  340|  65.5k|                b'0'..=b'9' => digit - b'0',
  341|  56.7k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  7.99k|                _ => return None,
  343|       |            }
  344|  58.4k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  7.26k|    Some(value)
  348|  53.4k|}
_RNvMNtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCslUwV8J7e77q_5oxttl:
   62|  7.26k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  7.26k|        Self(BlankNodeContent::Anonymous {
   64|  7.26k|            id: id.to_ne_bytes(),
   65|  7.26k|            str: IdStr::new(id),
   66|  7.26k|        })
   67|  7.26k|    }
_RNvMs7_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB5_5IdStr3newCslUwV8J7e77q_5oxttl:
  258|  6.22M|    fn new(id: u128) -> Self {
  259|  6.22M|        let mut str = [0; 32];
  260|  6.22M|        write!(&mut str[..], "{id:x}").unwrap();
  261|  6.22M|        Self(str)
  262|  6.22M|    }
_RNvXs0_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCslUwV8J7e77q_5oxttl:
  109|  2.48M|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  6.21M|        loop {
  112|  6.21M|            let id = random();
  113|  6.21M|            let str = IdStr::new(id);
  114|  6.21M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|  2.48M|                return Self(BlankNodeContent::Anonymous {
  116|  2.48M|                    id: id.to_ne_bytes(),
  117|  2.48M|                    str,
  118|  2.48M|                });
  119|  3.73M|            }
  120|       |        }
  121|  2.48M|    }
_RINvMNtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECslUwV8J7e77q_5oxttl:
   49|  53.4k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  53.4k|        let id = id.into();
   51|  53.4k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  7.26k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  46.2k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  53.4k|    }
_RNCNvMs7_NtCslM7Y37AdxjQ_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   198M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvXsM_NtCslM7Y37AdxjQ_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
   37|  99.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsF_NtCslM7Y37AdxjQ_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
   34|  99.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCslM7Y37AdxjQ_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  15.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  15.3k|        let value = value.into();
   55|  15.3k|        let datatype = datatype.into();
   56|  15.3k|        Self(if datatype == xsd::STRING {
   57|  1.59k|            LiteralContent::String(value)
   58|       |        } else {
   59|  13.7k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  15.3k|    }
_RINvMNtCslM7Y37AdxjQ_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  10.2k|    pub fn new_language_tagged_literal_unchecked(
   86|  10.2k|        value: impl Into<String>,
   87|  10.2k|        language: impl Into<String>,
   88|  10.2k|    ) -> Self {
   89|  10.2k|        Self(LiteralContent::LanguageTaggedString {
   90|  10.2k|            value: value.into(),
   91|  10.2k|            language: language.into(),
   92|  10.2k|        })
   93|  10.2k|    }
_RINvMNtCslM7Y37AdxjQ_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   201k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   201k|        let value = value.into();
   55|   201k|        let datatype = datatype.into();
   56|   201k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   201k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   201k|    }
_RINvMNtCslM7Y37AdxjQ_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  98.3k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  98.3k|        Self(LiteralContent::String(value.into()))
   49|  98.3k|    }

_RNvMs4_NtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCslUwV8J7e77q_5oxttl:
  138|   218k|    pub fn into_owned(self) -> NamedNode {
  139|   218k|        NamedNode::new_unchecked(self.iri)
  140|   218k|    }
_RNvXsp_NtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
   17|  82.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   441k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   441k|        Self { iri: iri.into() }
   41|   441k|    }
_RINvMNtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|   501k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   501k|        Self { iri: iri.into() }
   41|   501k|    }
_RNvMs4_NtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   216k|    pub const fn as_str(self) -> &'a str {
  134|   216k|        self.iri
  135|   216k|    }
_RNvMs4_NtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   201k|    pub fn into_owned(self) -> NamedNode {
  139|   201k|        NamedNode::new_unchecked(self.iri)
  140|   201k|    }
_RNvXs9_NtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   216k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   216k|        self.as_str() == other.as_str()
  175|   216k|    }
_RNvMNtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   216k|    pub fn as_str(&self) -> &str {
   45|   216k|        self.iri.as_str()
   46|   216k|    }
_RNvXs6_NtCslM7Y37AdxjQ_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   201k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   201k|        node.into_owned()
  154|   201k|    }

_RNvXs1g_NtCslM7Y37AdxjQ_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCslUwV8J7e77q_5oxttl:
  997|  81.5k|    fn from(node: BlankNode) -> Self {
  998|  81.5k|        Self::BlankNode(node)
  999|  81.5k|    }

_RINvMNtCslM7Y37AdxjQ_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECslUwV8J7e77q_5oxttl:
   35|  32.2k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  32.2k|        Self { name: name.into() }
   37|  32.2k|    }
_RNvXsf_NtCslM7Y37AdxjQ_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCslUwV8J7e77q_5oxttl:
   13|  20.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]

_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  63.8k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  63.8k|        Self { mode, unchecked }
  175|  63.8k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  12.4M|    fn recognize_pname_or_keyword<'a>(
  238|  12.4M|        &self,
  239|  12.4M|        data: &'a [u8],
  240|  12.4M|        is_ending: bool,
  241|  12.4M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  12.4M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  12.4M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  12.4M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  12.4M|        let mut i = 0;
  246|       |        loop {
  247|  24.6M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  23.3M|                match r {
  249|  22.0M|                    Ok((c, consumed)) => {
  250|  22.0M|                        if c == ':' {
  251|  4.69M|                            i += consumed;
  252|  4.69M|                            break;
  253|  17.3M|                        } else if i == 0 {
  254|  7.55M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  4.10M|                                return Some((
  256|  4.10M|                                    consumed,
  257|  4.10M|                                    Err((
  258|  4.10M|                                        0..consumed,
  259|  4.10M|                                        format!(
  260|  4.10M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  4.10M|                                        ),
  262|  4.10M|                                    )
  263|  4.10M|                                        .into()),
  264|  4.10M|                                ));
  265|  3.44M|                            }
  266|  3.44M|                            i += consumed;
  267|  9.84M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  8.70M|                            i += consumed;
  269|  8.70M|                        } else {
  270|  1.36M|                            while data[..i].ends_with(b".") {
  271|   233k|                                i -= 1;
  272|   233k|                            }
  273|  1.13M|                            return Some((
  274|  1.13M|                                i,
  275|  1.13M|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|  1.13M|                            ));
  277|       |                        }
  278|       |                    }
  279|  1.22M|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|  1.31M|            } else if is_ending {
  282|  11.9k|                while data[..i].ends_with(b".") {
  283|    951|                    i -= 1;
  284|    951|                }
  285|  10.9k|                return Some(if i == 0 {
  286|  2.55k|                    (
  287|  2.55k|                        1,
  288|  2.55k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  2.55k|                    )
  290|       |                } else {
  291|  8.43k|                    (
  292|  8.43k|                        i,
  293|  8.43k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  8.43k|                    )
  295|       |                });
  296|       |            } else {
  297|  1.30M|                return None;
  298|       |            }
  299|       |        }
  300|  4.69M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  4.69M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  4.69M|        if pn_prefix.ends_with('.') {
  305|  5.35k|            return Some((
  306|  5.35k|                i,
  307|  5.35k|                Err((
  308|  5.35k|                    0..i,
  309|  5.35k|                    format!(
  310|  5.35k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  5.35k|                )
  312|  5.35k|                    .into()),
  313|  5.35k|            ));
  314|  4.68M|        }
  315|       |
  316|  1.34M|        let (consumed, pn_local_result) =
  317|  4.68M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  1.34M|        Some((
  319|  1.34M|            consumed + i,
  320|  1.34M|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  1.34M|            }),
  325|  1.34M|        ))
  326|  12.4M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  5.01M|    fn recognize_optional_pn_local<'a>(
  348|  5.01M|        &self,
  349|  5.01M|        data: &'a [u8],
  350|  5.01M|        is_ending: bool,
  351|  5.01M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  5.01M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  5.01M|        let mut i = 0;
  354|  5.01M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  5.01M|        let mut position_that_is_already_in_buffer = 0;
  356|  5.01M|        let mut might_be_invalid_iri = false;
  357|  5.01M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  12.4M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  9.08M|                match r {
  361|  8.99M|                    Ok((c, consumed)) => {
  362|  8.99M|                        if c == '%' {
  363|  89.3k|                            i += 1;
  364|  89.3k|                            let a = char::from(*data.get(i)?);
  365|  48.0k|                            i += 1;
  366|  48.0k|                            let b = char::from(*data.get(i)?);
  367|  36.3k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  12.3k|                                return Some((i + 1, Err((
  369|  12.3k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  12.3k|                                ).into())));
  371|  23.9k|                            }
  372|  23.9k|                            i += 1;
  373|  23.9k|                            ends_with_unescaped_dot = 0;
  374|  8.90M|                        } else if c == '\\' {
  375|  1.12M|                            i += 1;
  376|  1.12M|                            let a = char::from(*data.get(i)?);
  377|  1.05M|                            if self.unchecked
  378|   907k|                                || matches!(
  379|  1.05M|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|   145k|                            {
  396|   145k|                                // ok to escape
  397|   907k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   893k|                                // ok to escape but requires IRI validation
  399|   893k|                                might_be_invalid_iri = true;
  400|   893k|                            } else {
  401|  14.0k|                                return Some((i + 1, Err((
  402|  14.0k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  14.0k|                                ).into())));
  404|       |                            }
  405|  1.03M|                            let buffer = buffer.get_or_insert_with(String::new);
  406|  1.03M|                            // We add the missing bytes
  407|  1.03M|                            if i - position_that_is_already_in_buffer > 1 {
  408|   521k|                                buffer.push_str(
  409|   521k|                                    match str_from_utf8(
  410|   521k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   521k|                                        position_that_is_already_in_buffer..i - 1,
  412|   521k|                                    ) {
  413|   521k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   517k|                            }
  418|  1.03M|                            buffer.push(a);
  419|  1.03M|                            i += 1;
  420|  1.03M|                            position_that_is_already_in_buffer = i;
  421|  1.03M|                            ends_with_unescaped_dot = 0;
  422|  7.78M|                        } else if i == 0 {
  423|  2.69M|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   751k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|  1.93M|                            }
  427|  1.93M|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  1.93M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  1.93M|                                        || c == ':';
  431|      0|                            }
  432|  1.93M|                            i += consumed;
  433|  5.09M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  4.05M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  4.05M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  4.05M|                                        || c == ':';
  438|      0|                            }
  439|  4.05M|                            i += consumed;
  440|  4.05M|                            ends_with_unescaped_dot = 0;
  441|  1.03M|                        } else if c == '.' {
  442|   405k|                            i += consumed;
  443|   405k|                            ends_with_unescaped_dot += 1;
  444|   405k|                        } else {
  445|   634k|                            let buffer = if let Some(mut buffer) = buffer {
  446|   139k|                                buffer.push_str(
  447|   139k|                                    match str_from_utf8(
  448|   139k|                                        &data[position_that_is_already_in_buffer..i],
  449|   139k|                                        position_that_is_already_in_buffer..i,
  450|   139k|                                    ) {
  451|   139k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|   139k|                                for _ in 0..ends_with_unescaped_dot {
  457|  50.4k|                                    buffer.pop();
  458|  50.4k|                                }
  459|   139k|                                i -= ends_with_unescaped_dot;
  460|   139k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   494k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   494k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   494k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   494k|                                i -= ends_with_unescaped_dot;
  469|   494k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   634k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  89.9k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  3.38M|            } else if is_ending {
  477|  9.71k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  2.07k|                    while buffer.ends_with('.') {
  480|    762|                        buffer.pop();
  481|    762|                        i -= 1;
  482|    762|                    }
  483|  1.30k|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  8.41k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  8.41k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  9.83k|                    while let Some(d) = data.strip_suffix('.') {
  491|  1.42k|                        data = d;
  492|  1.42k|                        i -= 1;
  493|  1.42k|                    }
  494|  8.41k|                    Cow::Borrowed(data)
  495|       |                };
  496|  9.71k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  3.37M|                return None;
  499|       |            }
  500|       |        }
  501|  5.01M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|  1.23M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|  1.23M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  665|  1.23M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  666|  1.23M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|  1.23M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  668|  1.23M|        let mut i = 0;
  669|  1.23M|        let c = *data.first()?;
  670|  1.23M|        if matches!(c, b'+' | b'-') {
  671|   261k|            i += 1;
  672|   971k|        }
  673|       |        // We read the digits before .
  674|  1.23M|        let mut count_before: usize = 0;
  675|       |        loop {
  676|  2.24M|            let c = *data.get(i)?;
  677|  2.06M|            if c.is_ascii_digit() {
  678|  1.01M|                i += 1;
  679|  1.01M|                count_before += 1;
  680|  1.01M|            } else {
  681|  1.04M|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|  1.04M|        let count_after = if *data.get(i)? == b'.' {
  688|   417k|            i += 1;
  689|   417k|
  690|   417k|            let mut count_after = 0;
  691|       |            loop {
  692|   585k|                let c = *data.get(i)?;
  693|   413k|                if c.is_ascii_digit() {
  694|   167k|                    i += 1;
  695|   167k|                    count_after += 1;
  696|   167k|                } else {
  697|   246k|                    break;
  698|   246k|                }
  699|   246k|            }
  700|   246k|            Some(count_after)
  701|       |        } else {
  702|   630k|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|   877k|        let c = *data.get(i)?;
  707|   877k|        if matches!(c, b'e' | b'E') {
  708|   141k|            i += 1;
  709|       |
  710|   141k|            let c = *data.get(i)?;
  711|   113k|            if matches!(c, b'+' | b'-') {
  712|  5.09k|                i += 1;
  713|   108k|            }
  714|       |
  715|   113k|            let mut found = false;
  716|       |            loop {
  717|   204k|                let c = *data.get(i)?;
  718|   135k|                if c.is_ascii_digit() {
  719|  90.3k|                    i += 1;
  720|  90.3k|                    found = true;
  721|  90.3k|                } else {
  722|  44.7k|                    break;
  723|  44.7k|                }
  724|  44.7k|            }
  725|  44.7k|            Some((
  726|  44.7k|                i,
  727|  44.7k|                if !found {
  728|  28.0k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|  16.7k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|  1.99k|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|  14.7k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   735k|        } else if let Some(count_after) = count_after {
  736|   171k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|   125k|                i -= 1;
  739|   125k|                Some((
  740|   125k|                    i,
  741|   125k|                    if count_before == 0 {
  742|  19.7k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|   105k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  45.8k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   563k|                i,
  753|   563k|                if count_before == 0 {
  754|   143k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   420k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|  1.23M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|   104k|    fn recognize_hex_char(
  798|   104k|        data: &[u8],
  799|   104k|        len: usize,
  800|   104k|        escape_char: char,
  801|   104k|        position: usize,
  802|   104k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|   104k|        if data.len() < len {
  804|  35.9k|            return Ok(None);
  805|  68.6k|        }
  806|  68.6k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  60.9k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  60.9k|        })?;
  815|  58.8k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  58.8k|        })?;
  823|  58.0k|        Ok(Some(c))
  824|   104k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  25.5M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  25.5M|        matches!(c,
  901|  14.8M|        'A'..='Z'
  902|  9.05M|        | 'a'..='z'
  903|  2.71M|        | '\u{00C0}'..='\u{00D6}'
  904|  2.71M|        | '\u{00D8}'..='\u{00F6}'
  905|  2.71M|        | '\u{00F8}'..='\u{02FF}'
  906|  2.22M|        | '\u{0370}'..='\u{037D}'
  907|  2.22M|        | '\u{037F}'..='\u{1FFF}'
  908|   505k|        | '\u{200C}'..='\u{200D}'
  909|   505k|        | '\u{2070}'..='\u{218F}'
  910|   505k|        | '\u{2C00}'..='\u{2FEF}'
  911|   505k|        | '\u{3001}'..='\u{D7FF}'
  912|   189k|        | '\u{F900}'..='\u{FDCF}'
  913|   189k|        | '\u{FDF0}'..='\u{FFFD}'
  914|   189k|        | '\u{10000}'..='\u{EFFFF}')
  915|  25.5M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   187k|    fn recognize_blank_node_label(
  504|   187k|        data: &[u8],
  505|   187k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   187k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   187k|        let mut i = 2;
  508|       |        loop {
  509|   449k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   327k|                Ok((c, consumed)) => {
  511|   327k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   278k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|   239k|                    {
  514|   239k|                        // Ok
  515|   239k|                    } else if i > 2 && c == '.' {
  516|  31.0k|                        if data[i - 1] == b'.' {
  517|  7.81k|                            i -= 1;
  518|  7.81k|                            return Some((
  519|  7.81k|                                i,
  520|  7.81k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  7.81k|                            ));
  522|  23.2k|                        }
  523|  56.6k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|  56.6k|                    } else if data[i - 1] == b'.' {
  529|  3.95k|                        i -= 1;
  530|  3.95k|                        return Some((
  531|  3.95k|                            i,
  532|  3.95k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  3.95k|                        ));
  534|       |                    } else {
  535|  52.6k|                        return Some((
  536|  52.6k|                            i,
  537|  52.6k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  52.6k|                        ));
  539|       |                    }
  540|   262k|                    i += consumed;
  541|       |                }
  542|  13.4k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   187k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   301k|    fn recognize_string(
  588|   301k|        data: &[u8],
  589|   301k|        delimiter: u8,
  590|   301k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|   301k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|   301k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|   301k|        let mut string = String::new();
  594|   301k|        let mut i = 1;
  595|       |        loop {
  596|   317k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|   281k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|   267k|                Ok(s) => string.push_str(s),
  599|  14.0k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|   267k|            i += end;
  602|   267k|            match data[i] {
  603|   267k|                c if c == delimiter => {
  604|   144k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|   122k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|   120k|                    i += additional + 1;
  609|   120k|                    match c {
  610|  15.5k|                        Ok(c) => {
  611|  15.5k|                            string.push(c);
  612|  15.5k|                        }
  613|   105k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|   105k|                            let end = memchr(delimiter, &data[i..])?;
  616|  15.0k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|   301k|    }
_RNvNtCslUwV8J7e77q_5oxttl5lexer18resolve_local_name:
  936|   679k|pub fn resolve_local_name(
  937|   679k|    prefix: &str,
  938|   679k|    local: &str,
  939|   679k|    might_be_invalid_iri: bool,
  940|   679k|    prefixes: &HashMap<String, Iri<String>>,
  941|   679k|) -> Result<NamedNode, String> {
  942|   679k|    if let Some(start) = prefixes.get(prefix) {
  943|   559k|        let iri = format!("{start}{local}");
  944|   559k|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|   519k|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|   170k|                return Err(format!(
  948|   170k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|   170k|                ));
  950|   348k|            }
  951|  40.8k|        }
  952|   389k|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|   120k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|   679k|}
_RNvXs2_NtCslUwV8J7e77q_5oxttl5lexerNtB5_7N3TokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   12|  6.24M|#[derive(Debug, PartialEq, Eq)]
_RNvNtCslUwV8J7e77q_5oxttl5lexer16string_from_utf8:
  968|   940k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|   940k|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|   940k|    })
  977|   940k|}
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|   158k|    fn recognize_long_string(
  626|   158k|        data: &[u8],
  627|   158k|        delimiter: u8,
  628|   158k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|   158k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|   158k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|   158k|        let mut string = String::new();
  632|   158k|        let mut i = 3;
  633|       |        loop {
  634|   291k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|   254k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|   240k|                Ok(s) => string.push_str(s),
  637|  13.2k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|   240k|            i += end;
  640|   240k|            match data[i] {
  641|   240k|                c if c == delimiter => {
  642|   209k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  83.5k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|   113k|                    }
  645|   113k|                    i += 1;
  646|   113k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  31.0k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  27.7k|                    i += additional + 1;
  651|  27.7k|                    match c {
  652|  19.8k|                        Ok(c) => {
  653|  19.8k|                            string.push(c);
  654|  19.8k|                        }
  655|  7.87k|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|   158k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  37.5M|    fn recognize_unicode_char(
  827|  37.5M|        data: &[u8],
  828|  37.5M|        position: usize,
  829|  37.5M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  37.5M|        let mut code_point: u32;
  831|  37.5M|        let bytes_needed: usize;
  832|  37.5M|        let mut lower_boundary = 0x80;
  833|  37.5M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  37.5M|        let byte = *data.first()?;
  836|  32.8M|        match byte {
  837|  32.8M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|  3.57M|            0xC2..=0xDF => {
  839|  2.69M|                bytes_needed = 1;
  840|  2.69M|                code_point = u32::from(byte) & 0x1F;
  841|  2.69M|            }
  842|   880k|            0xE0..=0xEF => {
  843|   488k|                if byte == 0xE0 {
  844|  35.7k|                    lower_boundary = 0xA0;
  845|   453k|                }
  846|   488k|                if byte == 0xED {
  847|  12.2k|                    upper_boundary = 0x9F;
  848|   476k|                }
  849|   488k|                bytes_needed = 2;
  850|   488k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|   391k|            0xF0..=0xF4 => {
  853|   256k|                if byte == 0xF0 {
  854|  2.65k|                    lower_boundary = 0x90;
  855|   253k|                }
  856|   256k|                if byte == 0xF4 {
  857|  4.86k|                    upper_boundary = 0x8F;
  858|   251k|                }
  859|   256k|                bytes_needed = 3;
  860|   256k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   857k|                return Some(Err((
  864|   857k|                    position..=position,
  865|   857k|                    "Invalid UTF-8 character encoding",
  866|   857k|                )
  867|   857k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|  4.19M|        for i in 1..=bytes_needed {
  872|  4.19M|            let byte = *data.get(i)?;
  873|  4.04M|            if byte < lower_boundary || upper_boundary < byte {
  874|   473k|                return Some(Err((
  875|   473k|                    position..=position + i,
  876|   473k|                    "Invalid UTF-8 character encoding",
  877|   473k|                )
  878|   473k|                    .into()));
  879|  3.57M|            }
  880|  3.57M|            lower_boundary = 0x80;
  881|  3.57M|            upper_boundary = 0xBF;
  882|  3.57M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  2.82M|        Some(
  886|  2.82M|            char::from_u32(code_point)
  887|  2.82M|                .map(|c| (c, bytes_needed + 1))
  888|  2.82M|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  2.82M|                }),
  895|  2.82M|        )
  896|  37.5M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|  5.99M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|  5.99M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|  5.99M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|  5.99M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|  5.99M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   443k|    fn parse_lang_tag<'a>(
  573|   443k|        &self,
  574|   443k|        lang_tag: &'a [u8],
  575|   443k|        position: Range<usize>,
  576|   443k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   443k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   443k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   443k|            LanguageTag::parse(lang_tag)
  582|   443k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   372k|                .into_inner()
  584|       |        }))
  585|   443k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  3.30M|    fn recognize_iri(
  178|  3.30M|        &self,
  179|  3.30M|        data: &[u8],
  180|  3.30M|        options: &N3LexerOptions,
  181|  3.30M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  3.30M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  3.30M|        let mut string = Vec::new();
  184|  3.30M|        let mut i = 1;
  185|       |        loop {
  186|  3.36M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.08M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.08M|            i += end;
  189|  1.08M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   940k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|   142k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  96.7k|                    i += additional + 1;
  197|  96.7k|                    match c {
  198|  56.6k|                        Ok(c) => {
  199|  56.6k|                            let mut buf = [0; 4];
  200|  56.6k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  56.6k|                        }
  202|  40.1k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  3.30M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|   296k|    fn recognize_escape(
  763|   296k|        data: &[u8],
  764|   296k|        position: usize,
  765|   296k|        with_echar: bool,
  766|   296k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|   296k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|   296k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  769|   296k|        match *data.get(1)? {
  770|   101k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  92.8k|                Ok(c) => Some((5, Ok(c?))),
  772|  8.49k|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  3.25k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|  1.08k|                Ok(c) => Some((9, Ok(c?))),
  776|  2.17k|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    238|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    517|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|  3.33k|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|  4.03k|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|  3.94k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|    451|            b'"' if with_echar => Some((1, Ok('"'))),
  784|  2.16k|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  19.3k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|   142k|            c => Some((
  787|   142k|                1,
  788|   142k|                Err((
  789|   142k|                    position..position + 2,
  790|   142k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|   142k|                )
  792|   142k|                    .into()),
  793|   142k|            )), // TODO: read until end of string
  794|       |        }
  795|   296k|    }
_RNvNtCslUwV8J7e77q_5oxttl5lexer13str_from_utf8:
  958|  8.69M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|  8.69M|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|  8.69M|    })
  966|  8.69M|}
_RNvXNtCslUwV8J7e77q_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  31.2M|    fn recognize_next_token<'a>(
   56|  31.2M|        &mut self,
   57|  31.2M|        data: &'a [u8],
   58|  31.2M|        is_ending: bool,
   59|  31.2M|        options: &N3LexerOptions,
   60|  31.2M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  31.2M|        match *data.first()? {
   62|  4.23M|            b'<' => match *data.get(1)? {
   63|  19.4k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  93.6k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  93.6k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  20.8k|                        Some(if let Ok(result) = result {
   67|  6.63k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  14.2k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  72.7k|                    } else if is_ending {
   72|  1.77k|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  70.9k|                        None
   75|       |                    }
   76|       |                }
   77|   248k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|   248k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  54.4k|                        Some(if let Ok(result) = result {
   80|  11.3k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  43.0k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|   193k|                    } else if is_ending {
   85|  23.3k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|   170k|                        None
   88|       |                    }
   89|       |                }
   90|  2.96M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   498k|                if *data.get(1)? == b'>' {
   94|  60.1k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   286k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   323k|            b'_' => match data.get(1)? {
  100|   187k|                b':' => Self::recognize_blank_node_label(data),
  101|  96.5k|                c => Some((
  102|  96.5k|                    1,
  103|  96.5k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  96.5k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|   113k|                if self.mode != N3LexerMode::NTriples
  108|   113k|                    && *data.get(1)? == b'"'
  109|  75.8k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  53.6k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  51.0k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   446k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   446k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|   104k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   250k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  1.67M|            b'@' => self.recognize_lang_tag(data),
  124|  2.48M|            b'.' => match data.get(1) {
  125|  1.58M|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.97M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   370k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  99.4k|                if *data.get(1)? == b'^' {
  131|  67.2k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  27.2k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   266k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  80.9k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  1.76M|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|   156k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  1.58M|                if *data.get(1)? == b'|' {
  142|  10.4k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  1.43M|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   320k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   131k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|   127k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  86.5k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  30.4k|                if *data.get(1)? == b'}' {
  153|  4.00k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  17.4k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   223k|                if *data.get(1)? == b'>' {
  160|  17.0k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|   107k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  9.37M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   327k|            b'?' => self.recognize_variable(data, is_ending),
  167|  12.4M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  31.2M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   940k|    fn parse_iri(
  211|   940k|        &self,
  212|   940k|        iri: Vec<u8>,
  213|   940k|        position: Range<usize>,
  214|   940k|        options: &N3LexerOptions,
  215|   940k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   940k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   904k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   904k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   904k|                    base_iri
  223|   904k|                        .resolve(&iri)
  224|   904k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   690k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|   940k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   327k|    fn recognize_variable<'a>(
  329|   327k|        &self,
  330|   327k|        data: &'a [u8],
  331|   327k|        is_ending: bool,
  332|   327k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   327k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|   170k|        Some((
  336|   170k|            consumed + 1,
  337|   170k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   170k|            }),
  344|   170k|        ))
  345|   327k|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  1.67M|    fn recognize_lang_tag<'a>(
  548|  1.67M|        &self,
  549|  1.67M|        data: &'a [u8],
  550|  1.67M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  1.67M|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  1.67M|        let mut is_last_block_empty = true;
  553|  8.94M|        for (i, c) in data[1..].iter().enumerate() {
  554|  8.94M|            if c.is_ascii_alphabetic() {
  555|  7.99M|                is_last_block_empty = false;
  556|  7.99M|            } else if i == 0 {
  557|   202k|                return Some((
  558|   202k|                    1,
  559|   202k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|   202k|                ));
  561|   742k|            } else if is_last_block_empty {
  562|  11.5k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   730k|            } else if *c == b'-' {
  564|   299k|                is_last_block_empty = true;
  565|   299k|            } else {
  566|   431k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  1.02M|        None
  570|  1.67M|    }
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  17.9M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  919|  17.9M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  17.9M|    }
_RNvXs8_NtCslUwV8J7e77q_5oxttl5lexerNtB5_11N3LexerModeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   31|   901k|#[derive(Eq, PartialEq)]
_RNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  15.1M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  924|  15.1M|        Self::is_possible_pn_chars_u(c)
  925|  5.25M|            || matches!(c,
  926|  3.39M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  15.1M|    }
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|   152k|            result.and_then(|(name, _)| {
  338|   152k|                if name.is_empty() {
  339|  88.3k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  64.1k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   152k|            }),
_RNCNvNtCslUwV8J7e77q_5oxttl5lexer16string_from_utf80B5_:
  969|  36.1k|    String::from_utf8(data).map_err(|e| {
  970|  36.1k|        (
  971|  36.1k|            range.start + e.utf8_error().valid_up_to()
  972|  36.1k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  36.1k|            format!("Invalid UTF-8: {e}"),
  974|  36.1k|        )
  975|  36.1k|            .into()
  976|  36.1k|    })
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  70.8k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|  2.09k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|  2.09k|            (
  809|  2.09k|                position..position + len + 2,
  810|  2.09k|                format!(
  811|  2.09k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|  2.09k|                ),
  813|  2.09k|            )
  814|  2.09k|        })?;
_RNCNvNtCslUwV8J7e77q_5oxttl5lexer13str_from_utf80B5_:
  959|  35.0k|    str::from_utf8(data).map_err(|e| {
  960|  35.0k|        (
  961|  35.0k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  35.0k|            format!("Invalid UTF-8: {e}"),
  963|  35.0k|        )
  964|  35.0k|            .into()
  965|  35.0k|    })
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|   214k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  2.82M|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    867|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    867|            (
  817|    867|                position..position + len +2,
  818|    867|                format!(
  819|    867|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    867|                ),
  821|    867|            )
  822|    867|        })?;
_RNCNvMs_NtCslUwV8J7e77q_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  1.24M|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  1.24M|                prefix: pn_prefix,
  322|  1.24M|                local,
  323|  1.24M|                might_be_invalid_iri,
  324|  1.24M|            }),

_RINvMsb_NtCslUwV8J7e77q_5oxttl2n3NtB6_8N3Parser13with_base_iriReECs5pbGoGf5ED1_2n3:
  235|  63.8k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  236|  63.8k|        self.base = Some(Iri::parse(base_iri.into())?);
  237|  63.8k|        Ok(self)
  238|  63.8k|    }
_RNvMsb_NtCslUwV8J7e77q_5oxttl2n3NtB5_8N3Parser3newCs5pbGoGf5ED1_2n3:
  219|  63.8k|    pub fn new() -> Self {
  220|  63.8k|        Self::default()
  221|  63.8k|    }
_RNvXsw_NtCslUwV8J7e77q_5oxttl2n3NtB5_8N3ParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs5pbGoGf5ED1_2n3:
  208|  63.8k|#[derive(Default)]
_RNvMse_NtCslUwV8J7e77q_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  636|  63.8k|    pub fn is_end(&self) -> bool {
  637|  63.8k|        self.parser.is_end()
  638|  63.8k|    }
_RNvXsn_NtCslUwV8J7e77q_5oxttl2n3NtB5_6N3TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   26|   374k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsf_NtCslUwV8J7e77q_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  738|  11.4M|    fn recognize_next(
  739|  11.4M|        mut self,
  740|  11.4M|        token: N3Token<'_>,
  741|  11.4M|        context: &mut N3RecognizerContext,
  742|  11.4M|        results: &mut Vec<N3Quad>,
  743|  11.4M|        errors: &mut Vec<RuleRecognizerError>,
  744|  11.4M|    ) -> Self {
  745|  27.6M|        while let Some(rule) = self.stack.pop() {
  746|  22.0M|            match rule {
  747|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  748|       |                // [2]  n3Statement      ::=  n3Directive | triples
  749|       |                // [3]  n3Directive      ::=  prefixID | base
  750|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  751|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  752|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  753|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  754|       |                // [8]  base             ::=  "@base" IRIREF
  755|       |                N3State::N3Doc => {
  756|  1.73M|                    self.stack.push(N3State::N3Doc);
  757|   157k|                    match token {
  758|   214k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  759|  57.3k|                            self.stack.push(N3State::BaseExpectIri);
  760|  57.3k|                            return self;
  761|       |                        }
  762|   157k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  763|  4.88k|                            self.stack.push(N3State::PrefixExpectPrefix);
  764|  4.88k|                            return self;
  765|       |                        }
  766|   285k|                        N3Token::LangTag("prefix") => {
  767|   227k|                            self.stack.push(N3State::N3DocExpectDot);
  768|   227k|                            self.stack.push(N3State::PrefixExpectPrefix);
  769|   227k|                            return self;
  770|       |                        }
  771|  57.8k|                        N3Token::LangTag("base") => {
  772|  1.91k|                            self.stack.push(N3State::N3DocExpectDot);
  773|  1.91k|                            self.stack.push(N3State::BaseExpectIri);
  774|  1.91k|                            return self;
  775|       |                        }
  776|  1.44M|                        _ => {
  777|  1.44M|                            self.stack.push(N3State::N3DocExpectDot);
  778|  1.44M|                            self.stack.push(N3State::Triples);
  779|  1.44M|                        }
  780|       |                    }
  781|       |                }
  782|       |                N3State::N3DocExpectDot => {
  783|   218k|                    if token == N3Token::Punctuation(".") {
  784|  64.4k|                        return self;
  785|   153k|                    }
  786|   153k|                    errors.push("A dot is expected at the end of N3 statements".into());
  787|       |                }
  788|  62.2k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  789|  52.5k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  790|  52.5k|                                self
  791|       |                    } else {
  792|  9.75k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  793|       |                },
  794|   207k|                N3State::PrefixExpectPrefix => return match token {
  795|   207k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  796|   198k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  797|   198k|                        self
  798|       |                    }
  799|       |                    _ => {
  800|  27.4k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  801|       |                    }
  802|       |                },
  803|   182k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  804|   176k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  805|   176k|                    self
  806|  6.30k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  807|       |                },
  808|       |                // [9]  triples  ::=  subject predicateObjectList?
  809|  2.49M|                N3State::Triples => {
  810|  2.49M|                    self.stack.push(N3State::TriplesMiddle);
  811|  2.49M|                    self.stack.push(N3State::Path);
  812|  2.49M|                }
  813|   389k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  814|   296k|                    self.stack.push(N3State::TriplesEnd);
  815|   296k|                    self.stack.push(N3State::PredicateObjectList);
  816|   296k|                },
  817|  82.9k|                N3State::TriplesEnd => {
  818|  82.9k|                    self.terms.pop();
  819|  82.9k|                }
  820|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  821|  1.38M|                N3State::PredicateObjectList => {
  822|  1.38M|                    self.stack.push(N3State::PredicateObjectListEnd);
  823|  1.38M|                    self.stack.push(N3State::ObjectsList);
  824|  1.38M|                    self.stack.push(N3State::Verb);
  825|  1.38M|                }
  826|       |                N3State::PredicateObjectListEnd => {
  827|   147k|                    self.predicates.pop();
  828|   147k|                    if token == N3Token::Punctuation(";") {
  829|  25.6k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  830|  25.6k|                        return self;
  831|   121k|                    }
  832|       |                }
  833|  53.5k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  834|  28.2k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  835|  28.2k|                    return self;
  836|  25.2k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  837|  9.13k|                    self.stack.push(N3State::PredicateObjectListEnd);
  838|  9.13k|                    self.stack.push(N3State::ObjectsList);
  839|  9.13k|                    self.stack.push(N3State::Verb);
  840|  9.13k|                },
  841|       |                // [11]  objectList  ::=  object ( "," object) *
  842|   412k|                N3State::ObjectsList => {
  843|   412k|                    self.stack.push(N3State::ObjectsListEnd);
  844|   412k|                    self.stack.push(N3State::Path);
  845|   412k|                }
  846|       |                N3State::ObjectsListEnd => {
  847|   155k|                    let object = self.terms.pop().unwrap();
  848|   155k|                    let subject = self.terms.last().unwrap().clone();
  849|   155k|                    results.push(match self.predicates.last().unwrap().clone() {
  850|   136k|                        Predicate::Regular(predicate) => self.quad(
  851|   136k|                            subject,
  852|   136k|                            predicate,
  853|   136k|                            object,
  854|   136k|                        ),
  855|  19.1k|                        Predicate::Inverted(predicate) => self.quad(
  856|  19.1k|                            object,
  857|  19.1k|                            predicate,
  858|  19.1k|                            subject,
  859|  19.1k|                        )
  860|       |                    });
  861|   155k|                    if token == N3Token::Punctuation(",") {
  862|  8.05k|                        self.stack.push(N3State::ObjectsListEnd);
  863|  8.05k|                        self.stack.push(N3State::Path);
  864|  8.05k|                        return self;
  865|   147k|                    }
  866|       |                }
  867|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
  868|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
  869|  1.39M|                N3State::Verb => match token {
  870|  91.0k|                    N3Token::PlainKeyword("a") => {
  871|  56.4k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
  872|  56.4k|                        return self;
  873|       |                    }
  874|  34.5k|                    N3Token::PlainKeyword("has") => {
  875|  2.79k|                        self.stack.push(N3State::AfterRegularVerb);
  876|  2.79k|                        self.stack.push(N3State::Path);
  877|  2.79k|                        return self;
  878|       |                    }
  879|  31.7k|                    N3Token::PlainKeyword("is") => {
  880|  7.69k|                        self.stack.push(N3State::AfterVerbIs);
  881|  7.69k|                        self.stack.push(N3State::Path);
  882|  7.69k|                        return self;
  883|       |                    }
  884|   771k|                    N3Token::Punctuation("=") => {
  885|  12.4k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
  886|  12.4k|                        return self;
  887|       |                    }
  888|   759k|                    N3Token::Punctuation("=>") => {
  889|  8.13k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  890|  8.13k|                        return self;
  891|       |                    }
  892|   751k|                    N3Token::Punctuation("<=") => {
  893|  1.02k|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  894|  1.02k|                        return self;
  895|       |                    }
  896|   750k|                    N3Token::Punctuation("<-") => {
  897|  18.9k|                        self.stack.push(N3State::AfterInvertedVerb);
  898|  18.9k|                        self.stack.push(N3State::Path);
  899|  18.9k|                        return self;
  900|       |                    }
  901|  1.28M|                    _ => {
  902|  1.28M|                        self.stack.push(N3State::AfterRegularVerb);
  903|  1.28M|                        self.stack.push(N3State::Path);
  904|  1.28M|                    }
  905|       |                }
  906|   320k|                N3State::AfterRegularVerb => {
  907|   320k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
  908|   320k|                }
  909|  18.7k|                N3State::AfterInvertedVerb => {
  910|  18.7k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  911|  18.7k|                }
  912|  7.66k|                N3State::AfterVerbIs => return match token {
  913|  5.61k|                    N3Token::PlainKeyword("of") => {
  914|  1.86k|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  915|  1.86k|                        self
  916|       |                    }
  917|       |                    _ => {
  918|  5.79k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
  919|       |                    }
  920|       |                },
  921|       |                // [13]  subject     ::=  expression
  922|       |                // [15]  object      ::=  expression
  923|       |                // [16]  expression  ::=  path
  924|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
  925|  4.41M|                N3State::Path => {
  926|  4.41M|                    self.stack.push(N3State::PathFollowUp);
  927|  4.41M|                    self.stack.push(N3State::PathItem);
  928|  4.41M|                }
  929|   972k|                N3State::PathFollowUp => match token {
  930|   700k|                    N3Token::Punctuation("!") => {
  931|  9.03k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
  932|  9.03k|                        self.stack.push(N3State::PathItem);
  933|  9.03k|                        return self;
  934|       |                    }
  935|   691k|                    N3Token::Punctuation("^") => {
  936|  8.11k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
  937|  8.11k|                        self.stack.push(N3State::PathItem);
  938|  8.11k|                        return self;
  939|       |                    }
  940|   955k|                    _ => ()
  941|       |                },
  942|  13.8k|                N3State::PathAfterIndicator { is_inverse } => {
  943|  13.8k|                    let predicate = self.terms.pop().unwrap();
  944|  13.8k|                    let previous = self.terms.pop().unwrap();
  945|  13.8k|                    let current = BlankNode::default();
  946|  13.8k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
  947|  13.8k|                    self.terms.push(current.into());
  948|  13.8k|                    self.stack.push(N3State::PathFollowUp);
  949|       |                }
  950|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
  951|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
  952|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
  953|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
  954|       |                // [22]  collection             ::=  "(" object* ")"
  955|       |                // [23]  formula                ::=  "{" formulaContent? "}"
  956|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
  957|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
  958|       |                // [27]  iri                    ::=  IRIREF | prefixedName
  959|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
  960|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
  961|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
  962|       |                N3State::PathItem => {
  963|  4.43M|                    return match token {
  964|   104k|                        N3Token::IriRef(iri) => {
  965|   104k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
  966|   104k|                            self
  967|       |                        }
  968|   654k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  969|   378k|                            Ok(t) => {
  970|   378k|                                self.terms.push(t.into());
  971|   378k|                                self
  972|       |                            }
  973|   276k|                            Err(e) =>  self.error(errors, e)
  974|       |                        }
  975|  53.4k|                        N3Token::BlankNodeLabel(bnode) => {
  976|  53.4k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
  977|  53.4k|                            self
  978|       |                        }
  979|  32.2k|                        N3Token::Variable(name) => {
  980|  32.2k|                            self.terms.push(Variable::new_unchecked(name).into());
  981|  32.2k|                            self
  982|       |                        }
  983|  2.93M|                        N3Token::Punctuation("[") => {
  984|  1.14M|                            self.stack.push(N3State::PropertyListMiddle);
  985|  1.14M|                            self
  986|       |                        }
  987|  1.79M|                        N3Token::Punctuation("(") => {
  988|   173k|                            self.stack.push(N3State::CollectionBeginning);
  989|   173k|                            self
  990|       |                        }
  991|   164k|                        N3Token::String(value) => {
  992|   164k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
  993|   164k|                            self
  994|       |                        }
  995|   151k|                        N3Token::Integer(v) => {
  996|   151k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  997|   151k|                            self
  998|       |                        }
  999|  28.5k|                        N3Token::Decimal(v) => {
 1000|  28.5k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1001|  28.5k|                            self
 1002|       |                        }
 1003|  13.7k|                        N3Token::Double(v) => {
 1004|  13.7k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1005|  13.7k|                            self
 1006|       |                        }
 1007|   225k|                        N3Token::PlainKeyword("true") => {
 1008|  3.33k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1009|  3.33k|                            self
 1010|       |                        }
 1011|   221k|                        N3Token::PlainKeyword("false") => {
 1012|  4.63k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1013|  4.63k|                            self
 1014|       |                        }
 1015|  1.61M|                        N3Token::Punctuation("{") => {
 1016|  1.17M|                            self.contexts.push(BlankNode::default());
 1017|  1.17M|                            self.stack.push(N3State::FormulaContent);
 1018|  1.17M|                            self
 1019|       |                        }
 1020|       |                        _ =>
 1021|   725k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1022|       |
 1023|       |                    }
 1024|       |                }
 1025|  1.10M|                N3State::PropertyListMiddle => match token {
 1026|   588k|                    N3Token::Punctuation("]") => {
 1027|  8.17k|                        self.terms.push(BlankNode::default().into());
 1028|  8.17k|                        return self;
 1029|       |                    }
 1030|  89.6k|                    N3Token::PlainKeyword("id") => {
 1031|  11.1k|                        self.stack.push(N3State::IriPropertyList);
 1032|  11.1k|                        return self;
 1033|       |                    }
 1034|  1.08M|                    _ => {
 1035|  1.08M|                        self.terms.push(BlankNode::default().into());
 1036|  1.08M|                        self.stack.push(N3State::PropertyListEnd);
 1037|  1.08M|                        self.stack.push(N3State::PredicateObjectList);
 1038|  1.08M|                    }
 1039|       |                }
 1040|  55.1k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1041|  4.40k|                    return self;
 1042|  50.7k|                } else {
 1043|  50.7k|                    errors.push("blank node property lists should end with a ']'".into());
 1044|  50.7k|                }
 1045|  10.0k|                N3State::IriPropertyList => return match token {
 1046|  2.14k|                    N3Token::IriRef(id) => {
 1047|  2.14k|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1048|  2.14k|                        self.stack.push(N3State::PropertyListEnd);
 1049|  2.14k|                        self.stack.push(N3State::PredicateObjectList);
 1050|  2.14k|                        self
 1051|       |                    }
 1052|  5.83k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1053|  1.52k|                        Ok(t) => {
 1054|  1.52k|                            self.terms.push(t.into());
 1055|  1.52k|                            self.stack.push(N3State::PropertyListEnd);
 1056|  1.52k|                            self.stack.push(N3State::PredicateObjectList);
 1057|  1.52k|                            self
 1058|       |                        }
 1059|  4.31k|                        Err(e) => {
 1060|  4.31k|                            self.error(errors, e)
 1061|       |                        }
 1062|       |                    }
 1063|       |                    _ => {
 1064|  2.10k|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1065|       |                    }
 1066|       |                },
 1067|   169k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1068|  12.4k|                    self.terms.push(rdf::NIL.into());
 1069|  12.4k|                    return self;
 1070|   157k|                } else {
 1071|   157k|                    let root = BlankNode::default();
 1072|   157k|                    self.terms.push(root.clone().into());
 1073|   157k|                    self.terms.push(root.into());
 1074|   157k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1075|   157k|                    self.stack.push(N3State::Path);
 1076|   157k|                },
 1077|       |                N3State::CollectionPossibleEnd => {
 1078|  62.8k|                    let value = self.terms.pop().unwrap();
 1079|  62.8k|                    let old = self.terms.pop().unwrap();
 1080|  62.8k|                    results.push(self.quad(
 1081|  62.8k|                        old.clone(),
 1082|  62.8k|                        rdf::FIRST,
 1083|  62.8k|                        value,
 1084|  62.8k|                    ));
 1085|  62.8k|                    if let N3Token::Punctuation(")") = token {
 1086|  23.7k|                        results.push(self.quad(
 1087|  23.7k|                            old,
 1088|  23.7k|                            rdf::REST,
 1089|  23.7k|                            rdf::NIL,
 1090|  23.7k|                        ));
 1091|  23.7k|                        return self;
 1092|  39.0k|                    }
 1093|  39.0k|                    let new = BlankNode::default();
 1094|  39.0k|                    results.push(self.quad(
 1095|  39.0k|                        old,
 1096|  39.0k|                        rdf::REST,
 1097|  39.0k|                        new.clone(),
 1098|  39.0k|                    ));
 1099|  39.0k|                    self.terms.push(new.into());
 1100|  39.0k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1101|  39.0k|                    self.stack.push(N3State::Path);
 1102|       |                }
 1103|   155k|                N3State::LiteralPossibleSuffix { value } => {
 1104|   155k|                    match token {
 1105|  10.2k|                        N3Token::LangTag(lang) => {
 1106|  10.2k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1107|  10.2k|                            return self;
 1108|       |                        }
 1109|  65.0k|                        N3Token::Punctuation("^^") => {
 1110|  46.4k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1111|  46.4k|                            return self;
 1112|       |                        }
 1113|  98.3k|                        _ => {
 1114|  98.3k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1115|  98.3k|                        }
 1116|       |                    }
 1117|       |                }
 1118|  42.3k|                N3State::LiteralExpectDatatype { value } => {
 1119|  42.3k|                    match token {
 1120|  5.76k|                        N3Token::IriRef(datatype) => {
 1121|  5.76k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1122|  5.76k|                            return self;
 1123|       |                        }
 1124|  19.5k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1125|  9.58k|                            Ok(datatype) => {
 1126|  9.58k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1127|  9.58k|                                return self;
 1128|       |                            }
 1129|  9.96k|                            Err(e) => {
 1130|  9.96k|                                return self.error(errors, e);
 1131|       |                            }
 1132|       |                        }
 1133|  17.0k|                        _ => {
 1134|  17.0k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1135|  17.0k|                            self.stack.clear();
 1136|  17.0k|                        }
 1137|       |                    }
 1138|       |                }
 1139|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1140|       |                N3State::FormulaContent => {
 1141|  41.5k|                    match token {
 1142|  1.10M|                        N3Token::Punctuation("}") => {
 1143|   164k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1144|   164k|                            return self;
 1145|       |                        }
 1146|  46.0k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1147|  4.50k|                            self.stack.push(N3State::FormulaContent);
 1148|  4.50k|                            self.stack.push(N3State::BaseExpectIri);
 1149|  4.50k|                            return self;
 1150|       |                        }
 1151|  41.5k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1152|  2.51k|                            self.stack.push(N3State::FormulaContent);
 1153|  2.51k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1154|  2.51k|                            return self;
 1155|       |                        }
 1156|  15.9k|                        N3Token::LangTag("prefix") => {
 1157|  2.26k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1158|  2.26k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1159|  2.26k|                            return self;
 1160|       |                        }
 1161|  13.7k|                        N3Token::LangTag("base") => {
 1162|  1.72k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1163|  1.72k|                            self.stack.push(N3State::BaseExpectIri);
 1164|  1.72k|                            return self;
 1165|       |                        }
 1166|  1.04M|                        _ => {
 1167|  1.04M|                            self.stack.push(N3State::FormulaContentExpectDot);
 1168|  1.04M|                            self.stack.push(N3State::Triples);
 1169|  1.04M|                        }
 1170|       |                    }
 1171|       |                }
 1172|       |                N3State::FormulaContentExpectDot => {
 1173|  86.9k|                    match token {
 1174|  82.4k|                        N3Token::Punctuation("}") => {
 1175|  34.0k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1176|  34.0k|                            return self;
 1177|       |                        }
 1178|  48.3k|                        N3Token::Punctuation(".") => {
 1179|  11.9k|                            self.stack.push(N3State::FormulaContent);
 1180|  11.9k|                            return self;
 1181|       |                        }
 1182|  40.9k|                        _ => {
 1183|  40.9k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1184|  40.9k|                            self.stack.push(N3State::FormulaContent);
 1185|  40.9k|                        }
 1186|       |                    }
 1187|       |                }
 1188|       |            }
 1189|       |        }
 1190|       |        // Empty stack
 1191|  5.61M|        if token == N3Token::Punctuation(".") {
 1192|  1.64M|            self.stack.push(N3State::N3Doc);
 1193|  1.64M|            self
 1194|       |        } else {
 1195|  3.96M|            self
 1196|       |        }
 1197|  11.4M|    }
_RNvMse_NtCslUwV8J7e77q_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  644|  21.5M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  645|  21.5M|        self.parser.read_next()
  646|  21.5M|    }
_RNvXs_NtCslUwV8J7e77q_5oxttl2n3NtB4_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCslM7Y37AdxjQ_5oxrdf10named_node9NamedNodeE4fromB6_:
   52|   507k|    fn from(node: NamedNode) -> Self {
   53|   507k|        Self::NamedNode(node)
   54|   507k|    }
_RNvXs2_NtCslUwV8J7e77q_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCslM7Y37AdxjQ_5oxrdf7literal7LiteralE4fromB7_:
   73|   325k|    fn from(literal: Literal) -> Self {
   74|   325k|        Self::Literal(literal)
   75|   325k|    }
_RNvXs8_NtCslUwV8J7e77q_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCslM7Y37AdxjQ_5oxrdf8variable8VariableE4fromB7_:
  131|  32.2k|    fn from(variable: Variable) -> Self {
  132|  32.2k|        Self::Variable(variable)
  133|  32.2k|    }
_RNvMse_NtCslUwV8J7e77q_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  631|  63.8k|    pub fn end(&mut self) {
  632|  63.8k|        self.parser.end()
  633|  63.8k|    }
_RNvMsb_NtCslUwV8J7e77q_5oxttl2n3NtB5_8N3Parser5parse:
  365|  63.8k|    pub fn parse(self) -> LowLevelN3Reader {
  366|  63.8k|        LowLevelN3Reader {
  367|  63.8k|            parser: N3Recognizer::new_parser(self.unchecked, self.base, self.prefixes),
  368|  63.8k|        }
  369|  63.8k|    }
_RNvXs1_NtCslUwV8J7e77q_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCslM7Y37AdxjQ_5oxrdf10blank_node9BlankNodeE4fromB7_:
   66|  1.76M|    fn from(node: BlankNode) -> Self {
   67|  1.76M|        Self::BlankNode(node)
   68|  1.76M|    }
_RNvXsf_NtCslUwV8J7e77q_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1211|  31.4M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1212|  31.4M|        &context.lexer_options
 1213|  31.4M|    }
_RNvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB5_12N3Recognizer10new_parser:
 1217|  63.8k|    pub fn new_parser(
 1218|  63.8k|        unchecked: bool,
 1219|  63.8k|        base_iri: Option<Iri<String>>,
 1220|  63.8k|        prefixes: HashMap<String, Iri<String>>,
 1221|  63.8k|    ) -> Parser<Self> {
 1222|  63.8k|        Parser::new(
 1223|  63.8k|            Lexer::new(
 1224|  63.8k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1225|  63.8k|                MIN_BUFFER_SIZE,
 1226|  63.8k|                MAX_BUFFER_SIZE,
 1227|  63.8k|                true,
 1228|  63.8k|                Some(b"#"),
 1229|  63.8k|            ),
 1230|  63.8k|            Self {
 1231|  63.8k|                stack: vec![N3State::N3Doc],
 1232|  63.8k|                terms: Vec::new(),
 1233|  63.8k|                predicates: Vec::new(),
 1234|  63.8k|                contexts: Vec::new(),
 1235|  63.8k|            },
 1236|  63.8k|            N3RecognizerContext {
 1237|  63.8k|                lexer_options: N3LexerOptions { base_iri },
 1238|  63.8k|                prefixes,
 1239|  63.8k|            },
 1240|  63.8k|        )
 1241|  63.8k|    }
_RNvXs0_NtCslUwV8J7e77q_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   59|   218k|    fn from(node: NamedNodeRef<'_>) -> Self {
   60|   218k|        Self::NamedNode(node.into_owned())
   61|   218k|    }
_RNvXsf_NtCslUwV8J7e77q_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1199|  63.8k|    fn recognize_end(
 1200|  63.8k|        self,
 1201|  63.8k|        _state: &mut N3RecognizerContext,
 1202|  63.8k|        _results: &mut Vec<Self::Output>,
 1203|  63.8k|        errors: &mut Vec<RuleRecognizerError>,
 1204|  63.8k|    ) {
 1205|  63.8k|        match &*self.stack {
 1206|  63.8k|            [] | [N3State::N3Doc] => (),
 1207|  7.05k|            _ => errors.push("Unexpected end".into()), // TODO
 1208|       |        }
 1209|  63.8k|    }
_RNvXsx_NtCslUwV8J7e77q_5oxttl2n3NtB5_9PredicateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  707|   155k|#[derive(Clone)]
_RNvMse_NtCslUwV8J7e77q_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  624|  13.4M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  625|  13.4M|        self.parser.extend_from_slice(other)
  626|  13.4M|    }
_RNvXsf_NtCslUwV8J7e77q_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  730|  6.42M|    fn error_recovery_state(mut self) -> Self {
  731|  6.42M|        self.stack.clear();
  732|  6.42M|        self.terms.clear();
  733|  6.42M|        self.predicates.clear();
  734|  6.42M|        self.contexts.clear();
  735|  6.42M|        self
  736|  6.42M|    }
_RNCINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1267|    978|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1267|  47.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1267|  15.9k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1267|  15.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCslM7Y37AdxjQ_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1267|  1.28k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCslM7Y37AdxjQ_5oxrdf10blank_node9BlankNodeEB8_:
 1254|  8.06k|    fn quad(
 1255|  8.06k|        &self,
 1256|  8.06k|        subject: impl Into<N3Term>,
 1257|  8.06k|        predicate: impl Into<N3Term>,
 1258|  8.06k|        object: impl Into<N3Term>,
 1259|  8.06k|    ) -> N3Quad {
 1260|  8.06k|        N3Quad {
 1261|  8.06k|            subject: subject.into(),
 1262|  8.06k|            predicate: predicate.into(),
 1263|  8.06k|            object: object.into(),
 1264|  8.06k|            graph_name: self
 1265|  8.06k|                .contexts
 1266|  8.06k|                .last()
 1267|  8.06k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  8.06k|        }
 1269|  8.06k|    }
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
 1244|   290k|    fn error(
 1245|   290k|        mut self,
 1246|   290k|        errors: &mut Vec<RuleRecognizerError>,
 1247|   290k|        msg: impl Into<RuleRecognizerError>,
 1248|   290k|    ) -> Self {
 1249|   290k|        errors.push(msg.into());
 1250|   290k|        self.stack.clear();
 1251|   290k|        self
 1252|   290k|    }
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1244|   776k|    fn error(
 1245|   776k|        mut self,
 1246|   776k|        errors: &mut Vec<RuleRecognizerError>,
 1247|   776k|        msg: impl Into<RuleRecognizerError>,
 1248|   776k|    ) -> Self {
 1249|   776k|        errors.push(msg.into());
 1250|   776k|        self.stack.clear();
 1251|   776k|        self
 1252|   776k|    }
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1254|  23.7k|    fn quad(
 1255|  23.7k|        &self,
 1256|  23.7k|        subject: impl Into<N3Term>,
 1257|  23.7k|        predicate: impl Into<N3Term>,
 1258|  23.7k|        object: impl Into<N3Term>,
 1259|  23.7k|    ) -> N3Quad {
 1260|  23.7k|        N3Quad {
 1261|  23.7k|            subject: subject.into(),
 1262|  23.7k|            predicate: predicate.into(),
 1263|  23.7k|            object: object.into(),
 1264|  23.7k|            graph_name: self
 1265|  23.7k|                .contexts
 1266|  23.7k|                .last()
 1267|  23.7k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  23.7k|        }
 1269|  23.7k|    }
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1254|  62.8k|    fn quad(
 1255|  62.8k|        &self,
 1256|  62.8k|        subject: impl Into<N3Term>,
 1257|  62.8k|        predicate: impl Into<N3Term>,
 1258|  62.8k|        object: impl Into<N3Term>,
 1259|  62.8k|    ) -> N3Quad {
 1260|  62.8k|        N3Quad {
 1261|  62.8k|            subject: subject.into(),
 1262|  62.8k|            predicate: predicate.into(),
 1263|  62.8k|            object: object.into(),
 1264|  62.8k|            graph_name: self
 1265|  62.8k|                .contexts
 1266|  62.8k|                .last()
 1267|  62.8k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  62.8k|        }
 1269|  62.8k|    }
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCslM7Y37AdxjQ_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1254|  39.0k|    fn quad(
 1255|  39.0k|        &self,
 1256|  39.0k|        subject: impl Into<N3Term>,
 1257|  39.0k|        predicate: impl Into<N3Term>,
 1258|  39.0k|        object: impl Into<N3Term>,
 1259|  39.0k|    ) -> N3Quad {
 1260|  39.0k|        N3Quad {
 1261|  39.0k|            subject: subject.into(),
 1262|  39.0k|            predicate: predicate.into(),
 1263|  39.0k|            object: object.into(),
 1264|  39.0k|            graph_name: self
 1265|  39.0k|                .contexts
 1266|  39.0k|                .last()
 1267|  39.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  39.0k|        }
 1269|  39.0k|    }
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCslM7Y37AdxjQ_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1254|  5.78k|    fn quad(
 1255|  5.78k|        &self,
 1256|  5.78k|        subject: impl Into<N3Term>,
 1257|  5.78k|        predicate: impl Into<N3Term>,
 1258|  5.78k|        object: impl Into<N3Term>,
 1259|  5.78k|    ) -> N3Quad {
 1260|  5.78k|        N3Quad {
 1261|  5.78k|            subject: subject.into(),
 1262|  5.78k|            predicate: predicate.into(),
 1263|  5.78k|            object: object.into(),
 1264|  5.78k|            graph_name: self
 1265|  5.78k|                .contexts
 1266|  5.78k|                .last()
 1267|  5.78k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  5.78k|        }
 1269|  5.78k|    }
_RNCINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCslM7Y37AdxjQ_5oxrdf10blank_node9BlankNodeE0Ba_:
 1267|  1.17k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCslUwV8J7e77q_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1254|   155k|    fn quad(
 1255|   155k|        &self,
 1256|   155k|        subject: impl Into<N3Term>,
 1257|   155k|        predicate: impl Into<N3Term>,
 1258|   155k|        object: impl Into<N3Term>,
 1259|   155k|    ) -> N3Quad {
 1260|   155k|        N3Quad {
 1261|   155k|            subject: subject.into(),
 1262|   155k|            predicate: predicate.into(),
 1263|   155k|            object: object.into(),
 1264|   155k|            graph_name: self
 1265|   155k|                .contexts
 1266|   155k|                .last()
 1267|   155k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|   155k|        }
 1269|   155k|    }

_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  63.8k|    pub fn new(
   74|  63.8k|        parser: R,
   75|  63.8k|        min_buffer_size: usize,
   76|  63.8k|        max_buffer_size: usize,
   77|  63.8k|        is_line_jump_whitespace: bool,
   78|  63.8k|        line_comment_start: Option<&'static [u8]>,
   79|  63.8k|    ) -> Self {
   80|  63.8k|        Self {
   81|  63.8k|            parser,
   82|  63.8k|            data: Vec::new(),
   83|  63.8k|            position: Position {
   84|  63.8k|                line_start_buffer_offset: 0,
   85|  63.8k|                buffer_offset: 0,
   86|  63.8k|                global_offset: 0,
   87|  63.8k|                global_line: 0,
   88|  63.8k|            },
   89|  63.8k|            previous_position: Position {
   90|  63.8k|                line_start_buffer_offset: 0,
   91|  63.8k|                buffer_offset: 0,
   92|  63.8k|                global_offset: 0,
   93|  63.8k|                global_line: 0,
   94|  63.8k|            },
   95|  63.8k|            is_ending: false,
   96|  63.8k|            min_buffer_size,
   97|  63.8k|            max_buffer_size,
   98|  63.8k|            is_line_jump_whitespace,
   99|  63.8k|            line_comment_start,
  100|  63.8k|        }
  101|  63.8k|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|  6.40M|    pub fn location_from_buffer_offset_range(
  237|  6.40M|        &self,
  238|  6.40M|        offset_range: Range<usize>,
  239|  6.40M|    ) -> Range<TextPosition> {
  240|  6.40M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|  6.40M|        let (start_extra_line_jumps, start_line_start) =
  242|  6.40M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|  6.40M|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|  6.40M|            );
  245|  6.40M|        let start_line_start = if start_extra_line_jumps > 0 {
  246|  6.98k|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|  6.39M|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|  6.40M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|  6.40M|        let (end_extra_line_jumps, end_line_start) =
  252|  6.40M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|  6.40M|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|  6.40M|            );
  255|  6.40M|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  21.9k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|  6.38M|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|  6.40M|        TextPosition {
  261|  6.40M|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|  6.40M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|  6.40M|            offset: self.previous_position.global_offset
  264|  6.40M|                + u64::try_from(offset_range.start).unwrap(),
  265|  6.40M|        }..TextPosition {
  266|  6.40M|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|  6.40M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|  6.40M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|  6.40M|        }
  270|  6.40M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|  13.4M|    fn shrink_data(&mut self) {
  389|  13.4M|        if self.position.line_start_buffer_offset > 0 {
  390|   216k|            self.data
  391|   216k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|   216k|            self.data
  393|   216k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|   216k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|   216k|            self.position.line_start_buffer_offset = 0;
  396|   216k|            self.previous_position = self.position;
  397|  13.2M|        }
  398|  13.4M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|  1.33M|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|  1.33M|        TextPosition {
  274|  1.33M|            line: self.previous_position.global_line,
  275|  1.33M|            column: Self::column_from_bytes(
  276|  1.33M|                &self.data[self.previous_position.line_start_buffer_offset
  277|  1.33M|                    ..self.previous_position.buffer_offset],
  278|  1.33M|            ),
  279|  1.33M|            offset: self.previous_position.global_offset,
  280|  1.33M|        }..TextPosition {
  281|  1.33M|            line: self.position.global_line,
  282|  1.33M|            column: Self::column_from_bytes(
  283|  1.33M|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|  1.33M|            ),
  285|  1.33M|            offset: self.position.global_offset,
  286|  1.33M|        }
  287|  1.33M|    }
_RNvXNtNtCslUwV8J7e77q_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB6_:
   31|  4.73M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  4.73M|        Self {
   33|  4.73M|            location,
   34|  4.73M|            message: message.into(),
   35|  4.73M|        }
   36|  4.73M|    }
_RNvXs0_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTjNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB9_:
   47|  96.5k|    fn from((location, message): (usize, S)) -> Self {
   48|  96.5k|        (location..=location, message).into()
   49|  96.5k|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|  30.6M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|  30.6M|        let mut num_of_jumps = 0;
  402|  30.6M|        let mut last_jump_pos = 0;
  403|  30.6M|        let mut previous_cr = 0;
  404|  30.6M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|   127k|            if bytes[pos] == b'\r' {
  406|  16.1k|                previous_cr = pos;
  407|  16.1k|                num_of_jumps += 1;
  408|  16.1k|                last_jump_pos = pos + 1;
  409|  16.1k|            } else {
  410|   111k|                if previous_cr < pos - 1 {
  411|  52.9k|                    // We count \r\n as a single line jump
  412|  52.9k|                    num_of_jumps += 1;
  413|  58.8k|                }
  414|   111k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|  30.6M|        (num_of_jumps, last_jump_pos)
  418|  30.6M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|  26.9M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|  26.9M|        match str::from_utf8(bytes) {
  422|  13.7M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|  13.2M|            Err(e) => {
  424|  13.2M|                if e.valid_up_to() == 0 {
  425|  1.73M|                    0
  426|       |                } else {
  427|  11.4M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|  26.9M|    }
_RNvXs_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  1.33M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  1.33M|        (*location.start()..*location.end() + 1, message).into()
   43|  1.33M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|  31.4M|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|  31.4M|        if self.is_line_jump_whitespace {
  340|  31.4M|            let mut i = self.position.buffer_offset;
  341|  31.8M|            while let Some(c) = self.data.get(i) {
  342|  29.1M|                match c {
  343|   145k|                    b' ' | b'\t' => {
  344|   145k|                        self.position.buffer_offset += 1;
  345|   145k|                        self.position.global_offset += 1;
  346|   145k|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  72.7k|                        let mut increment: u8 = 1;
  350|  72.7k|                        if let Some(c) = self.data.get(i + 1) {
  351|  49.8k|                            if *c == b'\n' {
  352|    433|                                increment += 1;
  353|    433|                                i += 1;
  354|  49.4k|                            }
  355|  22.8k|                        } else if !self.is_ending {
  356|  22.5k|                            return None; // We need to read more
  357|    252|                        }
  358|  50.1k|                        self.position.buffer_offset += usize::from(increment);
  359|  50.1k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  50.1k|                        self.position.global_offset += u64::from(increment);
  361|  50.1k|                        self.position.global_line += 1;
  362|       |                    }
  363|   183k|                    b'\n' => {
  364|   183k|                        self.position.buffer_offset += 1;
  365|   183k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|   183k|                        self.position.global_offset += 1;
  367|   183k|                        self.position.global_line += 1;
  368|   183k|                    }
  369|  28.7M|                    _ => return Some(()),
  370|       |                }
  371|   379k|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|  2.75M|        Some(())
  386|  31.4M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  13.4M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  13.4M|        self.shrink_data();
  105|  13.4M|        self.data.extend_from_slice(other);
  106|  13.4M|    }
_RNvXNtNtCslUwV8J7e77q_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.81M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.81M|        Self {
   33|  1.81M|            location,
   34|  1.81M|            message: message.into(),
   35|  1.81M|        }
   36|  1.81M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  63.8k|    pub fn end(&mut self) {
  110|  63.8k|        self.is_ending = true;
  111|  63.8k|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|  1.33M|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|  1.33M|        String::from_utf8_lossy(
  291|  1.33M|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|  1.33M|        )
  293|  1.33M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|  13.5M|    pub fn is_end(&self) -> bool {
  296|  13.5M|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|  13.5M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  31.4M|    pub fn read_next(
  167|  31.4M|        &mut self,
  168|  31.4M|        options: &R::Options,
  169|  31.4M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|  31.4M|        self.skip_whitespaces_and_comments()?;
  171|  31.2M|        self.previous_position = self.position;
  172|  31.2M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|  31.2M|            &self.data[self.position.buffer_offset..],
  174|  31.2M|            self.is_ending,
  175|  31.2M|            options,
  176|  31.2M|        ) else {
  177|  13.4M|            return if self.is_ending {
  178|   145k|                if self.position.buffer_offset == self.data.len() {
  179|   127k|                    None // We have finished
  180|       |                } else {
  181|  17.2k|                    let (new_line_jumps, new_line_start) =
  182|  17.2k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  17.2k|                            &self.data[self.position.buffer_offset..],
  184|  17.2k|                        );
  185|  17.2k|                    if new_line_jumps > 0 {
  186|    368|                        self.position.line_start_buffer_offset =
  187|    368|                            self.position.buffer_offset + new_line_start;
  188|  16.9k|                    }
  189|  17.2k|                    self.position.global_offset +=
  190|  17.2k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  17.2k|                    self.position.buffer_offset = self.data.len();
  192|  17.2k|                    self.position.global_line += new_line_jumps;
  193|  17.2k|                    let new_position = TextPosition {
  194|  17.2k|                        line: self.position.global_line,
  195|  17.2k|                        column: Self::column_from_bytes(
  196|  17.2k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  17.2k|                        ),
  198|  17.2k|                        offset: self.position.global_offset,
  199|  17.2k|                    };
  200|  17.2k|                    let error = TurtleSyntaxError {
  201|  17.2k|                        location: new_position..new_position,
  202|  17.2k|                        message: "Unexpected end of file".into(),
  203|  17.2k|                    };
  204|  17.2k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  17.2k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|  13.3M|                None
  209|       |            };
  210|       |        };
  211|       |        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|       |        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|  17.8M|        let (new_line_jumps, new_line_start) =
  221|  17.8M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|  17.8M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|  17.8M|            );
  224|  17.8M|        if new_line_jumps > 0 {
  225|  21.2k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|  17.8M|        }
  227|  17.8M|        self.position.buffer_offset += consumed;
  228|  17.8M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|  17.8M|        self.position.global_line += new_line_jumps;
  230|  17.8M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|  17.8M|        }))
  234|  31.4M|    }
_RNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|  31.4M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|  31.4M|            self.skip_whitespaces()?;
  303|       |
  304|  31.4M|            let buf = &self.data[self.position.buffer_offset..];
  305|  31.4M|            if let Some(line_comment_start) = self.line_comment_start {
  306|  31.4M|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|   164k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  96.7k|                        let mut end_position = line_comment_start.len() + end;
  310|  96.7k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  89.1k|                            if let Some(c) = buf.get(end_position + 1) {
  313|  31.5k|                                if *c == b'\n' {
  314|      0|                                    end_position += 1;
  315|  31.5k|                                }
  316|  57.5k|                            } else if !self.is_ending {
  317|  57.5k|                                return None; // We need to read more
  318|     19|                            }
  319|  7.60k|                        }
  320|  39.1k|                        let comment_size = end_position + 1;
  321|  39.1k|                        self.position.buffer_offset += comment_size;
  322|  39.1k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  39.1k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  39.1k|                        self.position.global_line += 1;
  325|  39.1k|                        continue;
  326|  67.9k|                    }
  327|  67.9k|                    if self.is_ending {
  328|  1.07k|                        self.position.buffer_offset = self.data.len(); // EOF
  329|  1.07k|                        return Some(());
  330|  66.8k|                    }
  331|  66.8k|                    return None; // We need more data
  332|  31.2M|                }
  333|      0|            }
  334|  31.2M|            return Some(());
  335|       |        }
  336|  31.4M|    }
_RNvXs_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB8_:
   41|   122k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   122k|        (*location.start()..*location.end() + 1, message).into()
   43|   122k|    }
_RNCNvMs1_NtNtCslUwV8J7e77q_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|  6.40M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|  6.40M|            location: self.location_from_buffer_offset_range(e.location),
  232|  6.40M|            message: e.message,
  233|  6.40M|        }))

_RNCNvMs_NtNtCslUwV8J7e77q_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_2n312N3RecognizerE9read_next0Ba_:
   96|  11.4M|                        self.state = self.state.take().map(|state| {
   97|  11.4M|                            state.recognize_next(
   98|  11.4M|                                token,
   99|  11.4M|                                &mut self.context,
  100|  11.4M|                                &mut self.results,
  101|  11.4M|                                &mut self.errors,
  102|  11.4M|                            )
  103|  11.4M|                        });
_RNvMs_NtNtCslUwV8J7e77q_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3newB8_:
   56|  63.8k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  63.8k|        Self {
   58|  63.8k|            lexer,
   59|  63.8k|            state: Some(recognizer),
   60|  63.8k|            context,
   61|  63.8k|            results: vec![],
   62|  63.8k|            errors: vec![],
   63|  63.8k|        }
   64|  63.8k|    }
_RNvMs_NtNtCslUwV8J7e77q_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE17extend_from_sliceB8_:
   66|  13.4M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  13.4M|        self.lexer.extend_from_slice(other)
   68|  13.4M|    }
_RNvXNtNtCslUwV8J7e77q_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromReE4fromB6_:
   39|  1.04M|    fn from(message: S) -> Self {
   40|  1.04M|        Self {
   41|  1.04M|            message: message.into(),
   42|  1.04M|        }
   43|  1.04M|    }
_RNvMs_NtNtCslUwV8J7e77q_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3endB8_:
   71|  63.8k|    pub fn end(&mut self) {
   72|  63.8k|        self.lexer.end()
   73|  63.8k|    }
_RNvMs_NtNtCslUwV8J7e77q_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE6is_endB8_:
   76|  63.8k|    pub fn is_end(&self) -> bool {
   77|  63.8k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  63.8k|    }
_RNvMs_NtNtCslUwV8J7e77q_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE9read_nextB8_:
   80|  21.5M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|  33.0M|            if let Some(error) = self.errors.pop() {
   83|  1.33M|                return Some(Err(TurtleSyntaxError {
   84|  1.33M|                    location: self.lexer.last_token_location(),
   85|  1.33M|                    message: error
   86|  1.33M|                        .message
   87|  1.33M|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|  1.33M|                }));
   89|  31.7M|            }
   90|  31.7M|            if let Some(result) = self.results.pop() {
   91|   295k|                return Some(Ok(result));
   92|  31.4M|            }
   93|  31.4M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  17.8M|                match result {
   95|  11.4M|                    Ok(token) => {
   96|  11.4M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  11.4M|                        });
  104|  11.4M|                        continue;
  105|       |                    }
  106|  6.42M|                    Err(e) => {
  107|  6.42M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  6.42M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  13.5M|            }
  112|  13.5M|            if self.lexer.is_end() {
  113|   127k|                self.state.take()?.recognize_end(
  114|  63.8k|                    &mut self.context,
  115|  63.8k|                    &mut self.results,
  116|  63.8k|                    &mut self.errors,
  117|  63.8k|                )
  118|       |            } else {
  119|  13.4M|                return None;
  120|       |            }
  121|       |        }
  122|  21.5M|    }
_RNvXNtNtCslUwV8J7e77q_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjOdcKtOMjJI_5alloc6string6StringE4fromB6_:
   39|   290k|    fn from(message: S) -> Self {
   40|   290k|        Self {
   41|   290k|            message: message.into(),
   42|   290k|        }
   43|   290k|    }


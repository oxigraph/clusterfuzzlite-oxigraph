_RINvMNtCsbozbNcdD2Rq_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|  1.30k|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|  1.30k|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|  1.30k|        let mut val = self.0.load(Relaxed);
   37|  1.30k|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|  1.30k|        }
   41|  1.30k|        val
   42|  1.30k|    }
_RINvMs_NtCsbozbNcdD2Rq_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|  1.30k|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|  1.30k|        self.0.unsync_init(|| init() as usize) != 0
   55|  1.30k|    }
_RNCINvMs_NtCsbozbNcdD2Rq_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCsbozbNcdD2Rq_9getrandom16getrandom_uninitCsaHtvKV6mKDH_9rand_core:
  396|  1.30k|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|  1.30k|    if !dest.is_empty() {
  398|  1.30k|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|  1.30k|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|  1.30k|}
_RNvCsbozbNcdD2Rq_9getrandom9getrandomCsaHtvKV6mKDH_9rand_core:
  366|  1.30k|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|  1.30k|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|  1.30k|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|  1.30k|    // `dest`.
  370|  1.30k|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|  1.30k|    Ok(())
  372|  1.30k|}

_RNvNtCsbozbNcdD2Rq_9getrandom3imp15getrandom_inner:
    9|  1.30k|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|  1.30k|    // getrandom(2) was introduced in Linux 3.17
   11|  1.30k|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|  1.30k|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|  1.30k|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|  1.30k|}
_RNvNtCsbozbNcdD2Rq_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCsbozbNcdD2Rq_9getrandom4util19slice_as_uninit_muthECsaHtvKV6mKDH_9rand_core:
   32|  1.30k|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|  1.30k|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|  1.30k|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|  1.30k|}
_RINvNtCsbozbNcdD2Rq_9getrandom4util21slice_assume_init_muthECsaHtvKV6mKDH_9rand_core:
    8|  1.30k|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|  1.30k|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|  1.30k|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|  1.30k|}

_RINvNtCsbozbNcdD2Rq_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|  1.30k|pub fn sys_fill_exact(
   56|  1.30k|    mut buf: &mut [MaybeUninit<u8>],
   57|  1.30k|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|  1.30k|) -> Result<(), Error> {
   59|  2.60k|    while !buf.is_empty() {
   60|  1.30k|        let res = sys_fill(buf);
   61|  1.30k|        match res {
   62|  1.30k|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|  1.30k|    Ok(())
   77|  1.30k|}
_RNvNtCsbozbNcdD2Rq_9getrandom9util_libc17getrandom_syscall:
  153|  1.30k|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|  1.30k|    unsafe {
  155|  1.30k|        libc::syscall(
  156|  1.30k|            libc::SYS_getrandom,
  157|  1.30k|            buf.as_mut_ptr() as *mut libc::c_void,
  158|  1.30k|            buf.len(),
  159|  1.30k|            0,
  160|  1.30k|        ) as libc::ssize_t
  161|  1.30k|    }
  162|  1.30k|}

rust_fuzzer_test_input:
  209|  56.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  56.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  56.6k|                }
  223|  56.6k|
  224|  56.6k|                __libfuzzer_sys_run(bytes);
  225|  56.6k|                0
  226|       |            }
_RNvNvCskexMmCLbqNy_2n31__19___libfuzzer_sys_run:
  241|  56.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  56.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  56.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  56.6k|    });
   63|  56.6k|
   64|  56.6k|    match test_input {
   65|  56.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  56.6k|}
_RNCNvCsgA3QTXvIRrC_13libfuzzer_sys15test_input_wrap0B3_:
   59|  56.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  56.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  56.6k|        rust_fuzzer_test_input(data_slice)
   62|  56.6k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs6AqEF9bmAuF_5oxttl:
 1044|  22.0M|    pub(crate) unsafe fn next(
 1045|  22.0M|        &mut self,
 1046|  22.0M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  22.0M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  22.0M|        let found = find_raw(self.start, self.end)?;
 1057|  92.3k|        let result = found.distance(self.original_start);
 1058|  92.3k|        self.start = found.add(1);
 1059|  92.3k|        Some(result)
 1060|  22.0M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs6AqEF9bmAuF_5oxttl:
 1125|  57.4k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  57.4k|    haystack: &[u8],
 1127|  57.4k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  57.4k|) -> Option<usize> {
 1129|  57.4k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  57.4k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  57.4k|    // a &[u8].
 1132|  57.4k|    let start = haystack.as_ptr();
 1133|  57.4k|    let end = start.add(haystack.len());
 1134|  57.4k|    let found = find_raw(start, end)?;
 1135|  17.4k|    Some(found.distance(start))
 1136|  57.4k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs6AqEF9bmAuF_5oxttl:
 1125|  3.94M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  3.94M|    haystack: &[u8],
 1127|  3.94M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  3.94M|) -> Option<usize> {
 1129|  3.94M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  3.94M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  3.94M|    // a &[u8].
 1132|  3.94M|    let start = haystack.as_ptr();
 1133|  3.94M|    let end = start.add(haystack.len());
 1134|  3.94M|    let found = find_raw(start, end)?;
 1135|  1.43M|    Some(found.distance(start))
 1136|  3.94M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  22.0M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  22.0M|        Iter {
 1029|  22.0M|            original_start: haystack.as_ptr(),
 1030|  22.0M|            start: haystack.as_ptr(),
 1031|  22.0M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  22.0M|            haystack: core::marker::PhantomData,
 1033|  22.0M|        }
 1034|  22.0M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|   110k|    pub(crate) fn needle1(&self) -> u8 {
  118|   110k|        self.s1
  119|   110k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  57.4k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  57.4k|        One { s1: needle, v1: V::splat(needle) }
  113|  57.4k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  57.4k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  57.4k|        One { s1: needle, v1: V::splat(needle) }
  113|  57.4k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  11.4k|    pub(crate) unsafe fn find_raw(
  144|  11.4k|        &self,
  145|  11.4k|        start: *const u8,
  146|  11.4k|        end: *const u8,
  147|  11.4k|    ) -> Option<*const u8> {
  148|  11.4k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  11.4k|        // need to move up to using a u64 for the masks used below. Currently
  150|  11.4k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  11.4k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  11.4k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  11.4k|        let topos = V::Mask::first_offset;
  155|  11.4k|        let len = end.distance(start);
  156|  11.4k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  11.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  3.23k|            return Some(cur);
  167|  8.26k|        }
  168|  8.26k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  8.26k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  8.26k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  8.26k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  8.26k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  12.0k|        while cur <= end.sub(V::BYTES) {
  213|  4.45k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.45k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    632|                return Some(cur);
  216|  3.81k|            }
  217|  3.81k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  7.63k|        if cur < end {
  224|  6.35k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  6.35k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  6.35k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  6.35k|            return self.search_chunk(cur, topos);
  228|  1.27k|        }
  229|  1.27k|        None
  230|  11.4k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  29.2k|    pub(crate) unsafe fn find_raw(
  144|  29.2k|        &self,
  145|  29.2k|        start: *const u8,
  146|  29.2k|        end: *const u8,
  147|  29.2k|    ) -> Option<*const u8> {
  148|  29.2k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  29.2k|        // need to move up to using a u64 for the masks used below. Currently
  150|  29.2k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  29.2k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  29.2k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  29.2k|        let topos = V::Mask::first_offset;
  155|  29.2k|        let len = end.distance(start);
  156|  29.2k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  29.2k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  5.24k|            return Some(cur);
  167|  24.0k|        }
  168|  24.0k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  24.0k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  24.0k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  24.0k|        if len >= Self::LOOP_SIZE {
  172|  4.36k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  2.26k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  2.26k|                let a = V::load_aligned(cur);
  176|  2.26k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  2.26k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  2.26k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  2.26k|                let eqa = self.v1.cmpeq(a);
  180|  2.26k|                let eqb = self.v1.cmpeq(b);
  181|  2.26k|                let eqc = self.v1.cmpeq(c);
  182|  2.26k|                let eqd = self.v1.cmpeq(d);
  183|  2.26k|                let or1 = eqa.or(eqb);
  184|  2.26k|                let or2 = eqc.or(eqd);
  185|  2.26k|                let or3 = or1.or(or2);
  186|  2.26k|                if or3.movemask_will_have_non_zero() {
  187|    792|                    let mask = eqa.movemask();
  188|    792|                    if mask.has_non_zero() {
  189|     91|                        return Some(cur.add(topos(mask)));
  190|    701|                    }
  191|    701|
  192|    701|                    let mask = eqb.movemask();
  193|    701|                    if mask.has_non_zero() {
  194|    245|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    456|                    }
  196|    456|
  197|    456|                    let mask = eqc.movemask();
  198|    456|                    if mask.has_non_zero() {
  199|    318|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    138|                    }
  201|    138|
  202|    138|                    let mask = eqd.movemask();
  203|    138|                    debug_assert!(mask.has_non_zero());
  204|    138|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  1.47k|                }
  206|  1.47k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  21.1k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  40.5k|        while cur <= end.sub(V::BYTES) {
  213|  18.3k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  18.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.02k|                return Some(cur);
  216|  17.3k|            }
  217|  17.3k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  22.1k|        if cur < end {
  224|  20.4k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  20.4k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  20.4k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  20.4k|            return self.search_chunk(cur, topos);
  228|  1.71k|        }
  229|  1.71k|        None
  230|  29.2k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  22.3k|    unsafe fn search_chunk(
  417|  22.3k|        &self,
  418|  22.3k|        cur: *const u8,
  419|  22.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  22.3k|    ) -> Option<*const u8> {
  421|  22.3k|        let chunk = V::load_unaligned(cur);
  422|  22.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  22.3k|        if mask.has_non_zero() {
  424|  3.93k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  18.3k|            None
  427|       |        }
  428|  22.3k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  68.1k|    unsafe fn search_chunk(
  417|  68.1k|        &self,
  418|  68.1k|        cur: *const u8,
  419|  68.1k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  68.1k|    ) -> Option<*const u8> {
  421|  68.1k|        let chunk = V::load_unaligned(cur);
  422|  68.1k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  68.1k|        if mask.has_non_zero() {
  424|  6.69k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  61.4k|            None
  427|       |        }
  428|  68.1k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  26.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  26.0M|        Two {
  452|  26.0M|            s1: needle1,
  453|  26.0M|            s2: needle2,
  454|  26.0M|            v1: V::splat(needle1),
  455|  26.0M|            v2: V::splat(needle2),
  456|  26.0M|        }
  457|  26.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  26.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  26.0M|        Two {
  452|  26.0M|            s1: needle1,
  453|  26.0M|            s2: needle2,
  454|  26.0M|            v1: V::splat(needle1),
  455|  26.0M|            v2: V::splat(needle2),
  456|  26.0M|        }
  457|  26.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  46.6M|    pub(crate) fn needle1(&self) -> u8 {
  462|  46.6M|        self.s1
  463|  46.6M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  45.9M|    pub(crate) fn needle2(&self) -> u8 {
  468|  45.9M|        self.s2
  469|  45.9M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   773k|    pub(crate) unsafe fn find_raw(
  494|   773k|        &self,
  495|   773k|        start: *const u8,
  496|   773k|        end: *const u8,
  497|   773k|    ) -> Option<*const u8> {
  498|   773k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   773k|        // need to move up to using a u64 for the masks used below. Currently
  500|   773k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   773k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   773k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   773k|        let topos = V::Mask::first_offset;
  505|   773k|        let len = end.distance(start);
  506|   773k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   773k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   269k|            return Some(cur);
  517|   503k|        }
  518|   503k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   503k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   503k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   503k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   503k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   679k|        while cur <= end.sub(V::BYTES) {
  551|   186k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   186k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  11.1k|                return Some(cur);
  554|   175k|            }
  555|   175k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   492k|        if cur < end {
  562|   463k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   463k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   463k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   463k|            return self.search_chunk(cur, topos);
  566|  28.8k|        }
  567|  28.8k|        None
  568|   773k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.00M|    pub(crate) unsafe fn find_raw(
  494|  1.00M|        &self,
  495|  1.00M|        start: *const u8,
  496|  1.00M|        end: *const u8,
  497|  1.00M|    ) -> Option<*const u8> {
  498|  1.00M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.00M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.00M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.00M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.00M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.00M|        let topos = V::Mask::first_offset;
  505|  1.00M|        let len = end.distance(start);
  506|  1.00M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.00M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   345k|            return Some(cur);
  517|   657k|        }
  518|   657k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   657k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   657k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   657k|        if len >= Self::LOOP_SIZE {
  522|  3.11M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  2.73M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  2.73M|                let a = V::load_aligned(cur);
  526|  2.73M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  2.73M|                let eqa1 = self.v1.cmpeq(a);
  528|  2.73M|                let eqb1 = self.v1.cmpeq(b);
  529|  2.73M|                let eqa2 = self.v2.cmpeq(a);
  530|  2.73M|                let eqb2 = self.v2.cmpeq(b);
  531|  2.73M|                let or1 = eqa1.or(eqb1);
  532|  2.73M|                let or2 = eqa2.or(eqb2);
  533|  2.73M|                let or3 = or1.or(or2);
  534|  2.73M|                if or3.movemask_will_have_non_zero() {
  535|  20.6k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  20.6k|                    if mask.has_non_zero() {
  537|  8.44k|                        return Some(cur.add(topos(mask)));
  538|  12.2k|                    }
  539|  12.2k|
  540|  12.2k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  12.2k|                    debug_assert!(mask.has_non_zero());
  542|  12.2k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  2.71M|                }
  544|  2.71M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   260k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   917k|        while cur <= end.sub(V::BYTES) {
  551|   297k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   297k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  16.5k|                return Some(cur);
  554|   280k|            }
  555|   280k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   620k|        if cur < end {
  562|   601k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   601k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   601k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   601k|            return self.search_chunk(cur, topos);
  566|  18.4k|        }
  567|  18.4k|        None
  568|  1.00M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.42M|    unsafe fn search_chunk(
  671|  1.42M|        &self,
  672|  1.42M|        cur: *const u8,
  673|  1.42M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.42M|    ) -> Option<*const u8> {
  675|  1.42M|        let chunk = V::load_unaligned(cur);
  676|  1.42M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.42M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.42M|        let mask = eq1.or(eq2).movemask();
  679|  1.42M|        if mask.has_non_zero() {
  680|   310k|            let mask1 = eq1.movemask();
  681|   310k|            let mask2 = eq2.movemask();
  682|   310k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.11M|            None
  685|       |        }
  686|  1.42M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.90M|    unsafe fn search_chunk(
  671|  1.90M|        &self,
  672|  1.90M|        cur: *const u8,
  673|  1.90M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.90M|    ) -> Option<*const u8> {
  675|  1.90M|        let chunk = V::load_unaligned(cur);
  676|  1.90M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.90M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.90M|        let mask = eq1.or(eq2).movemask();
  679|  1.90M|        if mask.has_non_zero() {
  680|   419k|            let mask1 = eq1.movemask();
  681|   419k|            let mask2 = eq2.movemask();
  682|   419k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.48M|            None
  685|       |        }
  686|  1.90M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  15.5k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  15.5k|    start: *const u8,
 1150|  15.5k|    end: *const u8,
 1151|  15.5k|    confirm: F,
 1152|  15.5k|) -> Option<*const u8> {
 1153|  15.5k|    debug_assert!(start <= end);
 1154|  15.5k|    let mut ptr = start;
 1155|   119k|    while ptr < end {
 1156|   110k|        if confirm(*ptr) {
 1157|  6.03k|            return Some(ptr);
 1158|   104k|        }
 1159|   104k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  9.52k|    None
 1162|  15.5k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  20.3M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  20.3M|    start: *const u8,
 1150|  20.3M|    end: *const u8,
 1151|  20.3M|    confirm: F,
 1152|  20.3M|) -> Option<*const u8> {
 1153|  20.3M|    debug_assert!(start <= end);
 1154|  20.3M|    let mut ptr = start;
 1155|  66.1M|    while ptr < end {
 1156|  46.6M|        if confirm(*ptr) {
 1157|   780k|            return Some(ptr);
 1158|  45.8M|        }
 1159|  45.8M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  19.5M|    None
 1162|  20.3M|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  57.4k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  57.4k|        One {
   71|  57.4k|            sse2: generic::One::new(needle),
   72|  57.4k|            avx2: generic::One::new(needle),
   73|  57.4k|        }
   74|  57.4k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  57.4k|    pub unsafe fn find_raw(
  180|  57.4k|        &self,
  181|  57.4k|        start: *const u8,
  182|  57.4k|        end: *const u8,
  183|  57.4k|    ) -> Option<*const u8> {
  184|  57.4k|        if start >= end {
  185|  1.16k|            return None;
  186|  56.3k|        }
  187|  56.3k|        let len = end.distance(start);
  188|  56.3k|        if len < __m256i::BYTES {
  189|  27.0k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  15.5k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  15.5k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  11.4k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  29.2k|        }
  201|  29.2k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  29.2k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  29.2k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  29.2k|        // responsibility.
  205|  29.2k|        //
  206|  29.2k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  29.2k|        // means we'd have to annotate this routine with `target_feature`.
  208|  29.2k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  29.2k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  29.2k|        // The real problem is that a routine with a `target_feature`
  211|  29.2k|        // annotation generally can't be inlined into caller code unless
  212|  29.2k|        // the caller code has the same target feature annotations. Namely,
  213|  29.2k|        // the common case (at time of writing) is for calling code to not
  214|  29.2k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  29.2k|        // `target_feature` on this routine, it can be inlined which will
  216|  29.2k|        // handle some of the short-haystack cases above without touching the
  217|  29.2k|        // architecture specific code.
  218|  29.2k|        self.find_raw_avx2(start, end)
  219|  57.4k|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   110k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   110k|                    b == self.sse2.needle1()
  194|   110k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  11.4k|    unsafe fn find_raw_sse2(
  337|  11.4k|        &self,
  338|  11.4k|        start: *const u8,
  339|  11.4k|        end: *const u8,
  340|  11.4k|    ) -> Option<*const u8> {
  341|  11.4k|        self.sse2.find_raw(start, end)
  342|  11.4k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  29.2k|    unsafe fn find_raw_avx2(
  397|  29.2k|        &self,
  398|  29.2k|        start: *const u8,
  399|  29.2k|        end: *const u8,
  400|  29.2k|    ) -> Option<*const u8> {
  401|  29.2k|        self.avx2.find_raw(start, end)
  402|  29.2k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  26.0M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  26.0M|        Two {
  558|  26.0M|            sse2: generic::Two::new(needle1, needle2),
  559|  26.0M|            avx2: generic::Two::new(needle1, needle2),
  560|  26.0M|        }
  561|  26.0M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  26.0M|    pub unsafe fn find_raw(
  655|  26.0M|        &self,
  656|  26.0M|        start: *const u8,
  657|  26.0M|        end: *const u8,
  658|  26.0M|    ) -> Option<*const u8> {
  659|  26.0M|        if start >= end {
  660|  3.90M|            return None;
  661|  22.1M|        }
  662|  22.1M|        let len = end.distance(start);
  663|  22.1M|        if len < __m256i::BYTES {
  664|  21.1M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  20.3M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  20.3M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   773k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.00M|        }
  676|  1.00M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.00M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.00M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.00M|        // responsibility.
  680|  1.00M|        //
  681|  1.00M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.00M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.00M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.00M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.00M|        // The real problem is that a routine with a `target_feature`
  686|  1.00M|        // annotation generally can't be inlined into caller code unless
  687|  1.00M|        // the caller code has the same target feature annotations. Namely,
  688|  1.00M|        // the common case (at time of writing) is for calling code to not
  689|  1.00M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.00M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.00M|        // handle some of the short-haystack cases above without touching the
  692|  1.00M|        // architecture specific code.
  693|  1.00M|        self.find_raw_avx2(start, end)
  694|  26.0M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  46.6M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  46.6M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  46.6M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   773k|    unsafe fn find_raw_sse2(
  765|   773k|        &self,
  766|   773k|        start: *const u8,
  767|   773k|        end: *const u8,
  768|   773k|    ) -> Option<*const u8> {
  769|   773k|        self.sse2.find_raw(start, end)
  770|   773k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.00M|    unsafe fn find_raw_avx2(
  805|  1.00M|        &self,
  806|  1.00M|        start: *const u8,
  807|  1.00M|        end: *const u8,
  808|  1.00M|    ) -> Option<*const u8> {
  809|  1.00M|        self.avx2.find_raw(start, end)
  810|  1.00M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  26.0M|pub(crate) fn memchr2_raw(
  221|  26.0M|    n1: u8,
  222|  26.0M|    n2: u8,
  223|  26.0M|    start: *const u8,
  224|  26.0M|    end: *const u8,
  225|  26.0M|) -> Option<*const u8> {
  226|  26.0M|    // SAFETY: We provide a valid function pointer type.
  227|  26.0M|    unsafe_ifunc!(
  228|  26.0M|        Two,
  229|  26.0M|        find_raw,
  230|  26.0M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  26.0M|        Option<*const u8>,
  232|  26.0M|        start,
  233|  26.0M|        end,
  234|  26.0M|        n1,
  235|  26.0M|        n2
  236|  26.0M|    )
  237|  26.0M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  57.4k|pub(crate) fn memchr_raw(
  175|  57.4k|    n1: u8,
  176|  57.4k|    start: *const u8,
  177|  57.4k|    end: *const u8,
  178|  57.4k|) -> Option<*const u8> {
  179|  57.4k|    // SAFETY: We provide a valid function pointer type.
  180|  57.4k|    unsafe_ifunc!(
  181|  57.4k|        One,
  182|  57.4k|        find_raw,
  183|  57.4k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  57.4k|        Option<*const u8>,
  185|  57.4k|        start,
  186|  57.4k|        end,
  187|  57.4k|        n1
  188|  57.4k|    )
  189|  57.4k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  57.4k|        unsafe fn find_avx2(
   79|  57.4k|            $($needle: u8),+,
   80|  57.4k|            $hay_start: *const u8,
   81|  57.4k|            $hay_end: *const u8,
   82|  57.4k|        ) -> $retty {
   83|  57.4k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  57.4k|            $memchrty::new_unchecked($($needle),+)
   85|  57.4k|                .$memchrfind($hay_start, $hay_end)
   86|  57.4k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  26.0M|        unsafe fn find_avx2(
   79|  26.0M|            $($needle: u8),+,
   80|  26.0M|            $hay_start: *const u8,
   81|  26.0M|            $hay_end: *const u8,
   82|  26.0M|        ) -> $retty {
   83|  26.0M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  26.0M|            $memchrty::new_unchecked($($needle),+)
   85|  26.0M|                .$memchrfind($hay_start, $hay_end)
   86|  26.0M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  26.6M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  26.6M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  26.6M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  26.6M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.19M|    fn as_usize(self) -> usize {
   27|  1.19M|        self as usize
   28|  1.19M|    }

_RNCNvNtCseJq1f3D7C0A_6memchr6memchr7memchr20Cs6AqEF9bmAuF_5oxttl:
   96|  3.94M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  3.94M|            memchr2_raw(needle1, needle2, start, end)
   98|  3.94M|        })
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs6AqEF9bmAuF_5oxttl:
  395|  22.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs6AqEF9bmAuF_5oxttl:
  377|  22.0M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  22.0M|        Memchr2 {
  379|  22.0M|            needle1,
  380|  22.0M|            needle2,
  381|  22.0M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  22.0M|        }
  383|  22.0M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCs6AqEF9bmAuF_5oxttl:
  574|  26.0M|unsafe fn memchr2_raw(
  575|  26.0M|    needle1: u8,
  576|  26.0M|    needle2: u8,
  577|  26.0M|    start: *const u8,
  578|  26.0M|    end: *const u8,
  579|  26.0M|) -> Option<*const u8> {
  580|  26.0M|    #[cfg(target_arch = "x86_64")]
  581|  26.0M|    {
  582|  26.0M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  26.0M|    }
  584|  26.0M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  26.0M|    {
  586|  26.0M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  26.0M|    }
  588|  26.0M|    #[cfg(target_arch = "aarch64")]
  589|  26.0M|    {
  590|  26.0M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  26.0M|    }
  592|  26.0M|    #[cfg(not(any(
  593|  26.0M|        target_arch = "x86_64",
  594|  26.0M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  26.0M|        target_arch = "aarch64"
  596|  26.0M|    )))]
  597|  26.0M|    {
  598|  26.0M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  26.0M|            .find_raw(start, end)
  600|  26.0M|    }
  601|  26.0M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs6AqEF9bmAuF_5oxttl:
  232|  22.0M|pub fn memchr2_iter<'h>(
  233|  22.0M|    needle1: u8,
  234|  22.0M|    needle2: u8,
  235|  22.0M|    haystack: &'h [u8],
  236|  22.0M|) -> Memchr2<'h> {
  237|  22.0M|    Memchr2::new(needle1, needle2, haystack)
  238|  22.0M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs6AqEF9bmAuF_5oxttl:
   27|  57.4k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  57.4k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  57.4k|    // pointer between start and end.
   30|  57.4k|    unsafe {
   31|  57.4k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  57.4k|        })
   34|  57.4k|    }
   35|  57.4k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr7memchr2Cs6AqEF9bmAuF_5oxttl:
   92|  3.94M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  3.94M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  3.94M|    // pointer between start and end.
   95|  3.94M|    unsafe {
   96|  3.94M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  3.94M|        })
   99|  3.94M|    }
  100|  3.94M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs6AqEF9bmAuF_5oxttl:
  390|  22.0M|    fn next(&mut self) -> Option<usize> {
  391|  22.0M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  22.0M|        // pointers returns will fall within the start and end bounds, and this
  393|  22.0M|        // upholds the safety contract of `self.it.next`.
  394|  22.0M|        unsafe {
  395|  22.0M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  22.0M|        }
  397|  22.0M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  57.4k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  57.4k|            memchr_raw(needle, start, end)
   33|  57.4k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  57.4k|unsafe fn memchr_raw(
  505|  57.4k|    needle: u8,
  506|  57.4k|    start: *const u8,
  507|  57.4k|    end: *const u8,
  508|  57.4k|) -> Option<*const u8> {
  509|  57.4k|    #[cfg(target_arch = "x86_64")]
  510|  57.4k|    {
  511|  57.4k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  57.4k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  57.4k|        // time. This function also handles using a fallback if neither AVX2
  514|  57.4k|        // nor SSE2 (unusual) are available.
  515|  57.4k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  57.4k|    }
  517|  57.4k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  57.4k|    {
  519|  57.4k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  57.4k|    }
  521|  57.4k|    #[cfg(target_arch = "aarch64")]
  522|  57.4k|    {
  523|  57.4k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  57.4k|    }
  525|  57.4k|    #[cfg(not(any(
  526|  57.4k|        target_arch = "x86_64",
  527|  57.4k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  57.4k|        target_arch = "aarch64"
  529|  57.4k|    )))]
  530|  57.4k|    {
  531|  57.4k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  57.4k|    }
  533|  57.4k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|   761k|    fn get_for_offset(self) -> u32 {
  127|   761k|        #[cfg(target_endian = "big")]
  128|   761k|        {
  129|   761k|            self.0.swap_bytes()
  130|   761k|        }
  131|   761k|        #[cfg(target_endian = "little")]
  132|   761k|        {
  133|   761k|            self.0
  134|   761k|        }
  135|   761k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|   761k|    fn first_offset(self) -> usize {
  172|   761k|        // We are dealing with little endian here (and if we aren't, we swap
  173|   761k|        // the bytes so we are in practice), where the most significant byte
  174|   761k|        // is at a higher address. That means the least significant bit that
  175|   761k|        // is set corresponds to the position of our first matching byte.
  176|   761k|        // That position corresponds to the number of zeros after the least
  177|   761k|        // significant bit.
  178|   761k|        self.get_for_offset().trailing_zeros() as usize
  179|   761k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  6.17M|    fn has_non_zero(self) -> bool {
  147|  6.17M|        self.0 != 0
  148|  6.17M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  1.44M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  1.44M|            _mm_loadu_si128(data as *const __m128i)
  219|  1.44M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  2.06M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  2.06M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  2.06M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  2.86M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  2.86M|            _mm_cmpeq_epi8(self, vector2)
  229|  2.86M|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  2.74M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  2.74M|        self.movemask().has_non_zero()
   65|  2.74M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  1.97M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  1.97M|            _mm256_loadu_si256(data as *const __m256i)
  268|  1.97M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  5.61M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  5.61M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  5.61M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  14.8M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  14.8M|            _mm256_cmpeq_epi8(self, vector2)
  278|  14.8M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|   762k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|   762k|        SensibleMoveMask(self.0 | other.0)
  163|   762k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  52.1M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  52.1M|            _mm_set1_epi8(byte as i8)
  209|  52.1M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  1.42M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  1.42M|            _mm_or_si128(self, vector2)
  239|  1.42M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  52.1M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  52.1M|            _mm256_set1_epi8(byte as i8)
  258|  52.1M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  5.48M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  5.48M|            _mm256_load_si256(data as *const __m256i)
  263|  5.48M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  10.1M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  10.1M|            _mm256_or_si256(self, vector2)
  288|  10.1M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsgA3QTXvIRrC_13libfuzzer_sys:
   49|  56.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  56.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  56.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  56.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  56.6k|        // `SeqCst` operations on the slow path.
   54|  56.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  56.6k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsgA3QTXvIRrC_13libfuzzer_sys:
  963|  56.6k|        pub fn get(&self) -> Option<&T> {
  964|  56.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  56.6k|                None
  969|       |            }
  970|  56.6k|        }

_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE10into_innerCs6AqEF9bmAuF_5oxttl:
   62|   359k|    pub fn into_inner(self) -> T {
   63|   359k|        self.tag
   64|   359k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE5parseCs6AqEF9bmAuF_5oxttl:
   49|   436k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   436k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   359k|        Ok(Self { tag, positions })
   52|   436k|    }
_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs2KVRoFTj7xQ_5oxrdf:
  632|   419k|fn parse_langtag(
  633|   419k|    input: &str,
  634|   419k|    output: &mut impl OutputBuffer,
  635|   419k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   419k|    #[derive(PartialEq, Eq)]
  637|   419k|    enum State {
  638|   419k|        Start,
  639|   419k|        AfterLanguage,
  640|   419k|        AfterExtLang,
  641|   419k|        AfterScript,
  642|   419k|        AfterRegion,
  643|   419k|        InExtension { expected: bool },
  644|   419k|        InPrivateUse { expected: bool },
  645|   419k|    }
  646|   419k|
  647|   419k|    let mut state = State::Start;
  648|   419k|    let mut language_end = 0;
  649|   419k|    let mut extlang_end = 0;
  650|   419k|    let mut script_end = 0;
  651|   419k|    let mut region_end = 0;
  652|   419k|    let mut variant_end = 0;
  653|   419k|    let mut extension_end = 0;
  654|   419k|    let mut extlangs_count = 0;
  655|   535k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   535k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|   535k|        }
  661|   535k|        if subtag.len() > 8 {
  662|  6.85k|            return Err(LanguageTagParseError {
  663|  6.85k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  6.85k|            });
  665|   528k|        }
  666|   528k|        if state == State::Start {
  667|       |            // Primary language
  668|   412k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  39.0k|                return Err(LanguageTagParseError {
  670|  39.0k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  39.0k|                });
  672|   373k|            }
  673|   373k|            language_end = end;
  674|   373k|            output.extend(to_lowercase(subtag));
  675|   373k|            if subtag.len() < 4 {
  676|  89.8k|                // extlangs are only allowed for short language tags
  677|  89.8k|                state = State::AfterLanguage;
  678|   283k|            } else {
  679|   283k|                state = State::AfterExtLang;
  680|   283k|            }
  681|   115k|        } else if let State::InPrivateUse { .. } = state {
  682|  9.05k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  9.05k|            }
  687|  9.05k|            output.push('-');
  688|  9.05k|            output.extend(to_lowercase(subtag));
  689|  9.05k|            state = State::InPrivateUse { expected: false };
  690|   106k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  13.6k|            if let State::InExtension { expected: true } = state {
  693|  5.28k|                return Err(LanguageTagParseError {
  694|  5.28k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  5.28k|                });
  696|  8.34k|            }
  697|  8.34k|            output.push('-');
  698|  8.34k|            output.push('x');
  699|  8.34k|            state = State::InPrivateUse { expected: true };
  700|  93.2k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  29.8k|            if let State::InExtension { expected: true } = state {
  703|  5.68k|                return Err(LanguageTagParseError {
  704|  5.68k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  5.68k|                });
  706|  24.1k|            }
  707|  24.1k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  24.1k|            output.push('-');
  709|  24.1k|            output.push(extension_tag);
  710|  24.1k|            state = State::InExtension { expected: true };
  711|  63.4k|        } else if let State::InExtension { .. } = state {
  712|  12.7k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  12.7k|            }
  717|  12.7k|            extension_end = end;
  718|  12.7k|            output.push('-');
  719|  12.7k|            output.extend(to_lowercase(subtag));
  720|  12.7k|            state = State::InExtension { expected: false };
  721|  50.6k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  13.4k|            extlangs_count += 1;
  723|  13.4k|            if extlangs_count > 3 {
  724|  1.64k|                return Err(LanguageTagParseError {
  725|  1.64k|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|  1.64k|                });
  727|  11.8k|            }
  728|  11.8k|            // valid extlangs
  729|  11.8k|            extlang_end = end;
  730|  11.8k|            output.push('-');
  731|  11.8k|            output.extend(to_lowercase(subtag));
  732|  37.1k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  24.4k|            && subtag.len() == 4
  734|  10.6k|            && is_alphabetic(subtag)
  735|  10.6k|        {
  736|  10.6k|            // Script
  737|  10.6k|            script_end = end;
  738|  10.6k|            output.push('-');
  739|  10.6k|            output.extend(to_uppercase_first(subtag));
  740|  10.6k|            state = State::AfterScript;
  741|  26.5k|        } else if (state == State::AfterLanguage
  742|  17.8k|            || state == State::AfterExtLang
  743|  12.7k|            || state == State::AfterScript)
  744|  21.9k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  12.8k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  9.03k|        {
  747|  9.03k|            // Region
  748|  9.03k|            region_end = end;
  749|  9.03k|            output.push('-');
  750|  9.03k|            output.extend(to_uppercase(subtag));
  751|  9.03k|            state = State::AfterRegion;
  752|  17.4k|        } else if (state == State::AfterLanguage
  753|  14.0k|            || state == State::AfterExtLang
  754|  12.4k|            || state == State::AfterScript
  755|  4.57k|            || state == State::AfterRegion)
  756|  17.4k|            && is_alphanumeric(subtag)
  757|  17.4k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  9.10k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  8.36k|        {
  760|  8.36k|            // Variant
  761|  8.36k|            variant_end = end;
  762|  8.36k|            output.push('-');
  763|  8.36k|            output.extend(to_lowercase(subtag));
  764|  8.36k|            state = State::AfterRegion;
  765|  8.36k|        } else {
  766|  9.10k|            return Err(LanguageTagParseError {
  767|  9.10k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  9.10k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   351k|    if let State::InExtension { expected: true } = state {
  774|  6.17k|        return Err(LanguageTagParseError {
  775|  6.17k|            kind: TagParseErrorKind::EmptyExtension,
  776|  6.17k|        });
  777|   345k|    }
  778|   345k|    if let State::InPrivateUse { expected: true } = state {
  779|  2.56k|        return Err(LanguageTagParseError {
  780|  2.56k|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|  2.56k|        });
  782|   342k|    }
  783|   342k|
  784|   342k|    //We make sure we have not skipped anyone
  785|   342k|    if extlang_end < language_end {
  786|   337k|        extlang_end = language_end;
  787|   337k|    }
  788|   342k|    if script_end < extlang_end {
  789|   337k|        script_end = extlang_end;
  790|   337k|    }
  791|   342k|    if region_end < script_end {
  792|   336k|        region_end = script_end;
  793|   336k|    }
  794|   342k|    if variant_end < region_end {
  795|   335k|        variant_end = region_end;
  796|   335k|    }
  797|   342k|    if extension_end < variant_end {
  798|   336k|        extension_end = variant_end;
  799|   336k|    }
  800|       |
  801|   342k|    Ok(TagElementsPositions {
  802|   342k|        language_end,
  803|   342k|        extlang_end,
  804|   342k|        script_end,
  805|   342k|        region_end,
  806|   342k|        variant_end,
  807|   342k|        extension_end,
  808|   342k|    })
  809|   419k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs2KVRoFTj7xQ_5oxrdf:
  587|   436k|fn parse_language_tag(
  588|   436k|    input: &str,
  589|   436k|    output: &mut impl OutputBuffer,
  590|   436k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   436k|    if let Some(tag) = GRANDFATHEREDS
  593|   436k|        .iter()
  594|   436k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   436k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  17.0k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  17.0k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  17.0k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  17.0k|            Ok(TagElementsPositions {
  618|  17.0k|                language_end: input.len(),
  619|  17.0k|                extlang_end: input.len(),
  620|  17.0k|                script_end: input.len(),
  621|  17.0k|                region_end: input.len(),
  622|  17.0k|                variant_end: input.len(),
  623|  17.0k|                extension_end: input.len(),
  624|  17.0k|            })
  625|       |        }
  626|       |    } else {
  627|   419k|        parse_langtag(input, output)
  628|       |    }
  629|   436k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs2KVRoFTj7xQ_5oxrdf:
  571|  17.0k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs2KVRoFTj7xQ_5oxrdf:
  571|   415k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs2KVRoFTj7xQ_5oxrdf:
  571|  9.03k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs2KVRoFTj7xQ_5oxrdf:
  571|  10.6k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs2KVRoFTj7xQ_5oxrdf:
  594|  11.3M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCs2KVRoFTj7xQ_5oxrdf:
  876|  8.55k|fn is_numeric(s: &str) -> bool {
  877|  8.55k|    s.chars().all(|x| x.is_ascii_digit())
  878|  8.55k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCs2KVRoFTj7xQ_5oxrdf:
  903|   415k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   415k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   415k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCs2KVRoFTj7xQ_5oxrdf:
  891|  9.03k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  9.03k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  9.03k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCs2KVRoFTj7xQ_5oxrdf:
  871|   415k|fn is_alphabetic(s: &str) -> bool {
  872|   415k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   415k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCs2KVRoFTj7xQ_5oxrdf:
  881|  69.1k|fn is_alphanumeric(s: &str) -> bool {
  882|  69.1k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  69.1k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCs2KVRoFTj7xQ_5oxrdf:
  897|  10.6k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  10.6k|    let mut chars = s.chars();
  899|  10.6k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  10.6k|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCs2KVRoFTj7xQ_5oxrdf:
  886|  17.0k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  17.0k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  17.0k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCs2KVRoFTj7xQ_5oxrdf:
  850|   419k|    fn new(input: &'a str) -> Self {
  851|   419k|        Self {
  852|   419k|            split: input.split('-'),
  853|   419k|            position: 0,
  854|   419k|        }
  855|   419k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2KVRoFTj7xQ_5oxrdf:
  563|   126k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs2KVRoFTj7xQ_5oxrdf:
  862|   886k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   886k|        let tag = self.split.next()?;
  864|   535k|        let tag_end = self.position + tag.len();
  865|   535k|        self.position = tag_end + 1;
  866|   535k|        Some((tag, tag_end))
  867|   886k|    }
_RNvXso_CsaOqqenhRLQf_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  490|  76.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  76.3k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  17.1k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|  2.56k|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  9.10k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  9.10k|                f,
  503|  9.10k|                "A subtag fails to parse, it does not match any other subtags"
  504|  9.10k|            ),
  505|  39.0k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  6.85k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|  1.64k|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  76.3k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|  1.88M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|  8.55k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|   169k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   243k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCs6AqEF9bmAuF_5oxttl:
 1156|  1.24M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.24M|        self.value.as_str().starts_with(c)
 1158|  1.24M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCs6AqEF9bmAuF_5oxttl:
 1141|  10.4M|    fn next(&mut self) -> Option<char> {
 1142|  10.4M|        if let Some(head) = self.value.next() {
 1143|  9.70M|            self.position += head.len_utf8();
 1144|  9.70M|            Some(head)
 1145|       |        } else {
 1146|   777k|            None
 1147|       |        }
 1148|  10.4M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCs6AqEF9bmAuF_5oxttl:
 1151|  2.47M|    fn front(&self) -> Option<char> {
 1152|  2.47M|        self.value.clone().next()
 1153|  2.47M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs6AqEF9bmAuF_5oxttl:
 1092|   790k|    fn len(&self) -> usize {
 1093|   790k|        self.len
 1094|   790k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs6AqEF9bmAuF_5oxttl:
 1072|  3.86M|    fn push(&mut self, c: char) {
 1073|  3.86M|        self.len += c.len_utf8();
 1074|  3.86M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs6AqEF9bmAuF_5oxttl:
 1097|   279k|    fn as_str(&self) -> &str {
 1098|   279k|        ""
 1099|   279k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs6AqEF9bmAuF_5oxttl:
 1087|   155k|    fn truncate(&mut self, new_len: usize) {
 1088|   155k|        self.len = new_len;
 1089|   155k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs6AqEF9bmAuF_5oxttl:
 1556|   296k|    fn read_url_codepoint_or_echar(
 1557|   296k|        &mut self,
 1558|   296k|        c: char,
 1559|   296k|        valid: impl Fn(char) -> bool,
 1560|   296k|    ) -> Result<(), IriParseError> {
 1561|   296k|        if UNCHECKED || valid(c) {
 1562|   296k|            self.output.push(c);
 1563|   296k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   296k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs6AqEF9bmAuF_5oxttl:
 1556|   146k|    fn read_url_codepoint_or_echar(
 1557|   146k|        &mut self,
 1558|   146k|        c: char,
 1559|   146k|        valid: impl Fn(char) -> bool,
 1560|   146k|    ) -> Result<(), IriParseError> {
 1561|   146k|        if UNCHECKED || valid(c) {
 1562|   146k|            self.output.push(c);
 1563|   146k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   146k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs6AqEF9bmAuF_5oxttl:
 1556|   158k|    fn read_url_codepoint_or_echar(
 1557|   158k|        &mut self,
 1558|   158k|        c: char,
 1559|   158k|        valid: impl Fn(char) -> bool,
 1560|   158k|    ) -> Result<(), IriParseError> {
 1561|   158k|        if UNCHECKED || valid(c) {
 1562|   158k|            self.output.push(c);
 1563|   158k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   158k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs6AqEF9bmAuF_5oxttl:
 1556|   801k|    fn read_url_codepoint_or_echar(
 1557|   801k|        &mut self,
 1558|   801k|        c: char,
 1559|   801k|        valid: impl Fn(char) -> bool,
 1560|   801k|    ) -> Result<(), IriParseError> {
 1561|   801k|        if UNCHECKED || valid(c) {
 1562|   801k|            self.output.push(c);
 1563|   801k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   801k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs6AqEF9bmAuF_5oxttl:
 1556|   682k|    fn read_url_codepoint_or_echar(
 1557|   682k|        &mut self,
 1558|   682k|        c: char,
 1559|   682k|        valid: impl Fn(char) -> bool,
 1560|   682k|    ) -> Result<(), IriParseError> {
 1561|   682k|        if UNCHECKED || valid(c) {
 1562|   682k|            self.output.push(c);
 1563|   682k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   682k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_erroruECs6AqEF9bmAuF_5oxttl:
 1590|   288k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|   288k|        Err(IriParseError { kind })
 1592|   288k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs6AqEF9bmAuF_5oxttl:
 1556|   405k|    fn read_url_codepoint_or_echar(
 1557|   405k|        &mut self,
 1558|   405k|        c: char,
 1559|   405k|        valid: impl Fn(char) -> bool,
 1560|   405k|    ) -> Result<(), IriParseError> {
 1561|   405k|        if UNCHECKED || valid(c) {
 1562|   374k|            self.output.push(c);
 1563|   374k|            Ok(())
 1564|  31.4k|        } else if c == '%' {
 1565|  10.6k|            self.read_echar()
 1566|       |        } else {
 1567|  20.7k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   405k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs6AqEF9bmAuF_5oxttl:
 1556|   311k|    fn read_url_codepoint_or_echar(
 1557|   311k|        &mut self,
 1558|   311k|        c: char,
 1559|   311k|        valid: impl Fn(char) -> bool,
 1560|   311k|    ) -> Result<(), IriParseError> {
 1561|   311k|        if UNCHECKED || valid(c) {
 1562|   251k|            self.output.push(c);
 1563|   251k|            Ok(())
 1564|  60.1k|        } else if c == '%' {
 1565|  42.9k|            self.read_echar()
 1566|       |        } else {
 1567|  17.2k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   311k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs6AqEF9bmAuF_5oxttl:
 1556|   421k|    fn read_url_codepoint_or_echar(
 1557|   421k|        &mut self,
 1558|   421k|        c: char,
 1559|   421k|        valid: impl Fn(char) -> bool,
 1560|   421k|    ) -> Result<(), IriParseError> {
 1561|   421k|        if UNCHECKED || valid(c) {
 1562|   362k|            self.output.push(c);
 1563|   362k|            Ok(())
 1564|  59.0k|        } else if c == '%' {
 1565|  23.4k|            self.read_echar()
 1566|       |        } else {
 1567|  35.6k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   421k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs6AqEF9bmAuF_5oxttl:
 1556|   210k|    fn read_url_codepoint_or_echar(
 1557|   210k|        &mut self,
 1558|   210k|        c: char,
 1559|   210k|        valid: impl Fn(char) -> bool,
 1560|   210k|    ) -> Result<(), IriParseError> {
 1561|   210k|        if UNCHECKED || valid(c) {
 1562|   196k|            self.output.push(c);
 1563|   196k|            Ok(())
 1564|  13.8k|        } else if c == '%' {
 1565|  8.13k|            self.read_echar()
 1566|       |        } else {
 1567|  5.72k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   210k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECs6AqEF9bmAuF_5oxttl:
 1556|   455k|    fn read_url_codepoint_or_echar(
 1557|   455k|        &mut self,
 1558|   455k|        c: char,
 1559|   455k|        valid: impl Fn(char) -> bool,
 1560|   455k|    ) -> Result<(), IriParseError> {
 1561|   455k|        if UNCHECKED || valid(c) {
 1562|   381k|            self.output.push(c);
 1563|   381k|            Ok(())
 1564|  73.3k|        } else if c == '%' {
 1565|  20.4k|            self.read_echar()
 1566|       |        } else {
 1567|  52.9k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   455k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs6AqEF9bmAuF_5oxttl:
 1556|  85.0k|    fn read_url_codepoint_or_echar(
 1557|  85.0k|        &mut self,
 1558|  85.0k|        c: char,
 1559|  85.0k|        valid: impl Fn(char) -> bool,
 1560|  85.0k|    ) -> Result<(), IriParseError> {
 1561|  85.0k|        if UNCHECKED || valid(c) {
 1562|  71.8k|            self.output.push(c);
 1563|  71.8k|            Ok(())
 1564|  13.2k|        } else if c == '%' {
 1565|  8.80k|            self.read_echar()
 1566|       |        } else {
 1567|  4.40k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  85.0k|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_path0Cs6AqEF9bmAuF_5oxttl:
 1516|   405k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|   405k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   405k|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echar0Cs6AqEF9bmAuF_5oxttl:
 1574|   103k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echars_0Cs6AqEF9bmAuF_5oxttl:
 1575|  73.1k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_query0Cs6AqEF9bmAuF_5oxttl:
 1530|   311k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   311k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   311k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragment0Cs6AqEF9bmAuF_5oxttl:
 1541|   421k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|   421k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   421k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authority0Cs6AqEF9bmAuF_5oxttl:
 1364|   210k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|   210k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   210k|                    })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19parse_relative_path0Cs6AqEF9bmAuF_5oxttl:
 1323|   455k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCs6AqEF9bmAuF_5oxttl:
   70|   197k|    pub fn parse_unchecked(iri: T) -> Self {
   71|   197k|        let positions =
   72|   197k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|   197k|        Self { iri, positions }
   74|   197k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCs6AqEF9bmAuF_5oxttl:
  258|   251k|    pub fn path(&self) -> &str {
  259|   251k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|   251k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE6as_refCs6AqEF9bmAuF_5oxttl:
  154|   888k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   888k|        IriRef {
  156|   888k|            iri: &self.iri,
  157|   888k|            positions: self.positions,
  158|   888k|        }
  159|   888k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCs6AqEF9bmAuF_5oxttl:
   89|   888k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   888k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   888k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   600k|        Ok(IriRef {
   93|   600k|            iri: target_buffer,
   94|   600k|            positions,
   95|   600k|        })
   96|   888k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCs6AqEF9bmAuF_5oxttl:
 1372|   159k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   159k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|  41.1k|            let start_position = self.input.position;
 1376|   224k|            while let Some(c) = self.input.next() {
 1377|   224k|                self.output.push(c);
 1378|   224k|                if c == ']' {
 1379|  41.1k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|  41.1k|                    if !UNCHECKED {
 1381|      0|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|      0|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|  41.1k|                    }
 1387|       |
 1388|  41.1k|                    let c = self.input.next();
 1389|  41.1k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  23.0k|                            self.output.push(':');
 1392|  23.0k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  18.1k|                            self.output_positions.authority_end = self.output.len();
 1396|  18.1k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|      0|                        Some(c) => {
 1399|      0|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|   183k|                }
 1408|       |            }
 1409|      0|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|   800k|            loop {
 1419|   800k|                let c = self.input.next();
 1420|   800k|                match c {
 1421|       |                    Some(':') => {
 1422|  40.9k|                        self.output.push(':');
 1423|  40.9k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  77.6k|                        self.output_positions.authority_end = self.output.len();
 1427|  77.6k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|   682k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   159k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCs6AqEF9bmAuF_5oxttl:
 1485|   130k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   436k|        loop {
 1487|   436k|            let c = self.input.next();
 1488|   436k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   139k|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|   139k|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|   139k|                    } else if c == Some('/') {
 1498|  9.22k|                        self.output.push('/');
 1499|   130k|                    }
 1500|       |
 1501|   139k|                    if c == Some('?') {
 1502|  29.9k|                        self.output_positions.path_end = self.output.len();
 1503|  29.9k|                        self.output.push('?');
 1504|  29.9k|                        return self.parse_query();
 1505|   109k|                    } else if c == Some('#') {
 1506|  21.6k|                        self.output_positions.path_end = self.output.len();
 1507|  21.6k|                        self.output_positions.query_end = self.output.len();
 1508|  21.6k|                        self.output.push('#');
 1509|  21.6k|                        return self.parse_fragment();
 1510|  87.9k|                    } else if c.is_none() {
 1511|  78.7k|                        self.output_positions.path_end = self.output.len();
 1512|  78.7k|                        self.output_positions.query_end = self.output.len();
 1513|  78.7k|                        return Ok(());
 1514|  9.22k|                    }
 1515|       |                }
 1516|   296k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   296k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   130k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCs6AqEF9bmAuF_5oxttl:
 1435|  63.9k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   147k|        loop {
 1437|   147k|            let c = self.input.next();
 1438|   147k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  63.9k|                    self.output_positions.authority_end = self.output.len();
 1441|  63.9k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  83.6k|                Some(c) => {
 1444|  83.6k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  83.6k|                        self.output.push(c)
 1446|       |                    } else {
 1447|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  63.9k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCs6AqEF9bmAuF_5oxttl:
 1523|  49.4k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   196k|        while let Some(c) = self.input.next() {
 1525|   180k|            if c == '#' {
 1526|  33.3k|                self.output_positions.query_end = self.output.len();
 1527|  33.3k|                self.output.push('#');
 1528|  33.3k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   146k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   146k|                })?
 1533|       |            }
 1534|       |        }
 1535|  16.0k|        self.output_positions.query_end = self.output.len();
 1536|  16.0k|        Ok(())
 1537|  49.4k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCs6AqEF9bmAuF_5oxttl:
 1213|   197k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   844k|        loop {
 1215|   844k|            let c = self.input.next();
 1216|   844k|            match c {
 1217|   844k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   646k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   197k|                    self.output.push(':');
 1222|   197k|                    self.output_positions.scheme_end = self.output.len();
 1223|   197k|                    self.input_scheme_end = self.input.position;
 1224|   197k|                    return if self.input.starts_with('/') {
 1225|   168k|                        self.input.next();
 1226|   168k|                        self.output.push('/');
 1227|   168k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  28.6k|                        self.output_positions.authority_end = self.output.len();
 1230|  28.6k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   197k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCs6AqEF9bmAuF_5oxttl:
 1539|  83.9k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   242k|        while let Some(c) = self.input.next() {
 1541|   158k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   158k|            })?;
 1544|       |        }
 1545|  83.9k|        Ok(())
 1546|  83.9k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCs6AqEF9bmAuF_5oxttl:
 1346|   159k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|   961k|        loop {
 1349|   961k|            let c = self.input.next();
 1350|   961k|            match c {
 1351|       |                Some('@') => {
 1352|  4.10k|                    self.output.push('@');
 1353|  4.10k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   155k|                    self.input = ParserInput {
 1357|   155k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   155k|                        position: self.input_scheme_end + 2,
 1359|   155k|                    };
 1360|   155k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   155k|                    return self.parse_host();
 1362|       |                }
 1363|   801k|                Some(c) => {
 1364|   801k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   801k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   159k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCs6AqEF9bmAuF_5oxttl:
 1454|   159k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   159k|        match c {
 1456|       |            None => {
 1457|  18.8k|                self.output_positions.path_end = self.output.len();
 1458|  18.8k|                self.output_positions.query_end = self.output.len();
 1459|  18.8k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  19.4k|                self.output_positions.path_end = self.output.len();
 1463|  19.4k|                self.output.push('?');
 1464|  19.4k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  28.9k|                self.output_positions.path_end = self.output.len();
 1468|  28.9k|                self.output_positions.query_end = self.output.len();
 1469|  28.9k|                self.output.push('#');
 1470|  28.9k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  92.5k|                self.output.push('/');
 1474|  92.5k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   159k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCs6AqEF9bmAuF_5oxttl:
 1199|   197k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   197k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   197k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   197k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCs6AqEF9bmAuF_5oxttl:
 1245|   168k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   168k|        if self.input.starts_with('/') {
 1247|   159k|            self.input.next();
 1248|   159k|            self.output.push('/');
 1249|   159k|            self.parse_authority()
 1250|       |        } else {
 1251|  9.18k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  9.18k|            self.parse_path()
 1253|       |        }
 1254|   168k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCs6AqEF9bmAuF_5oxttl:
 1174|   197k|    fn parse(
 1175|   197k|        iri: &'a str,
 1176|   197k|        base: Option<IriRef<&'a str>>,
 1177|   197k|        output: &'a mut O,
 1178|   197k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   197k|        let mut parser = Self {
 1180|   197k|            iri,
 1181|   197k|            base,
 1182|   197k|            input: ParserInput {
 1183|   197k|                value: iri.chars(),
 1184|   197k|                position: 0,
 1185|   197k|            },
 1186|   197k|            output,
 1187|   197k|            output_positions: IriElementsPositions {
 1188|   197k|                scheme_end: 0,
 1189|   197k|                authority_end: 0,
 1190|   197k|                path_end: 0,
 1191|   197k|                query_end: 0,
 1192|   197k|            },
 1193|   197k|            input_scheme_end: 0,
 1194|   197k|        };
 1195|   197k|        parser.parse_scheme_start()?;
 1196|   197k|        Ok(parser.output_positions)
 1197|   197k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_hostCs6AqEF9bmAuF_5oxttl:
 1372|   278k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   278k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|   165k|            let start_position = self.input.position;
 1376|  1.62M|            while let Some(c) = self.input.next() {
 1377|  1.61M|                self.output.push(c);
 1378|  1.61M|                if c == ']' {
 1379|   152k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|   152k|                    if !UNCHECKED {
 1381|   152k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|  52.1k|                            self.validate_ip_v_future(ip)?;
 1383|   100k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|  16.2k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|  84.0k|                        }
 1386|      0|                    }
 1387|       |
 1388|  88.8k|                    let c = self.input.next();
 1389|  88.8k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  52.3k|                            self.output.push(':');
 1392|  52.3k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  29.0k|                            self.output_positions.authority_end = self.output.len();
 1396|  29.0k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|  7.48k|                        Some(c) => {
 1399|  7.48k|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|  7.48k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  1.46M|                }
 1408|       |            }
 1409|  13.0k|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|  13.0k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|   191k|            loop {
 1419|   191k|                let c = self.input.next();
 1420|   191k|                match c {
 1421|       |                    Some(':') => {
 1422|  51.7k|                        self.output.push(':');
 1423|  51.7k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  54.3k|                        self.output_positions.authority_end = self.output.len();
 1427|  54.3k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  85.0k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   278k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_pathCs6AqEF9bmAuF_5oxttl:
 1485|   262k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   694k|        loop {
 1487|   694k|            let c = self.input.next();
 1488|   694k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   289k|                    if self.output.as_str().ends_with("/..") {
 1491|  8.90k|                        self.remove_last_segment();
 1492|  8.90k|                        self.remove_last_segment();
 1493|  8.90k|                        self.output.push('/');
 1494|   280k|                    } else if self.output.as_str().ends_with("/.") {
 1495|  21.6k|                        self.remove_last_segment();
 1496|  21.6k|                        self.output.push('/');
 1497|   258k|                    } else if c == Some('/') {
 1498|  49.9k|                        self.output.push('/');
 1499|   208k|                    }
 1500|       |
 1501|   289k|                    if c == Some('?') {
 1502|  38.1k|                        self.output_positions.path_end = self.output.len();
 1503|  38.1k|                        self.output.push('?');
 1504|  38.1k|                        return self.parse_query();
 1505|   251k|                    } else if c == Some('#') {
 1506|  23.0k|                        self.output_positions.path_end = self.output.len();
 1507|  23.0k|                        self.output_positions.query_end = self.output.len();
 1508|  23.0k|                        self.output.push('#');
 1509|  23.0k|                        return self.parse_fragment();
 1510|   228k|                    } else if c.is_none() {
 1511|   172k|                        self.output_positions.path_end = self.output.len();
 1512|   172k|                        self.output_positions.query_end = self.output.len();
 1513|   172k|                        return Ok(());
 1514|  55.9k|                    }
 1515|       |                }
 1516|   405k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   405k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   262k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_portCs6AqEF9bmAuF_5oxttl:
 1435|   104k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   142k|        loop {
 1437|   142k|            let c = self.input.next();
 1438|   142k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  90.6k|                    self.output_positions.authority_end = self.output.len();
 1441|  90.6k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  52.3k|                Some(c) => {
 1444|  52.3k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  38.8k|                        self.output.push(c)
 1446|       |                    } else {
 1447|  13.4k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|   104k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echarCs6AqEF9bmAuF_5oxttl:
 1571|   114k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|   114k|        let c1 = self.input.next();
 1573|   114k|        let c2 = self.input.next();
 1574|   114k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  73.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  63.9k|            self.output.push('%');
 1578|  63.9k|            self.output.push(c1.unwrap());
 1579|  63.9k|            self.output.push(c2.unwrap());
 1580|  63.9k|            Ok(())
 1581|       |        } else {
 1582|  50.4k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  50.4k|                Some('%'),
 1584|  50.4k|                c1,
 1585|  50.4k|                c2,
 1586|  50.4k|            ]))
 1587|       |        }
 1588|   114k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_queryCs6AqEF9bmAuF_5oxttl:
 1523|   149k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   431k|        while let Some(c) = self.input.next() {
 1525|   372k|            if c == '#' {
 1526|  61.4k|                self.output_positions.query_end = self.output.len();
 1527|  61.4k|                self.output.push('#');
 1528|  61.4k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   311k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   311k|                })?
 1533|       |            }
 1534|       |        }
 1535|  58.5k|        self.output_positions.query_end = self.output.len();
 1536|  58.5k|        Ok(())
 1537|   149k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E12parse_schemeCs6AqEF9bmAuF_5oxttl:
 1213|   148k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   481k|        loop {
 1215|   481k|            let c = self.input.next();
 1216|   465k|            match c {
 1217|   465k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   333k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  90.3k|                    self.output.push(':');
 1222|  90.3k|                    self.output_positions.scheme_end = self.output.len();
 1223|  90.3k|                    self.input_scheme_end = self.input.position;
 1224|  90.3k|                    return if self.input.starts_with('/') {
 1225|  54.1k|                        self.input.next();
 1226|  54.1k|                        self.output.push('/');
 1227|  54.1k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  36.2k|                        self.output_positions.authority_end = self.output.len();
 1230|  36.2k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  58.1k|                    self.input = ParserInput {
 1235|  58.1k|                        value: self.iri.chars(),
 1236|  58.1k|                        position: 0,
 1237|  58.1k|                    }; // reset
 1238|  58.1k|                    self.output.clear();
 1239|  58.1k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   148k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragmentCs6AqEF9bmAuF_5oxttl:
 1539|   234k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   610k|        while let Some(c) = self.input.next() {
 1541|   421k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   421k|            })?;
 1544|       |        }
 1545|   188k|        Ok(())
 1546|   234k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_relativeCs6AqEF9bmAuF_5oxttl:
 1256|   794k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   794k|        if let Some(base) = self.base {
 1258|   794k|            match self.input.front() {
 1259|       |                None => {
 1260|   114k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|   114k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|   114k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|   114k|                    self.output_positions.path_end = base.positions.path_end;
 1264|   114k|                    self.output_positions.query_end = base.positions.query_end;
 1265|   114k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   296k|                    self.input.next();
 1269|   296k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  80.7k|                    self.input.next();
 1273|  80.7k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  80.7k|                    self.output.push('?');
 1275|  80.7k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  80.7k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  80.7k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  80.7k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|   100k|                    self.input.next();
 1282|   100k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|   100k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|   100k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|   100k|                    self.output_positions.path_end = base.positions.path_end;
 1286|   100k|                    self.output_positions.query_end = base.positions.query_end;
 1287|   100k|                    self.output.push('#');
 1288|   100k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|   201k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|   201k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|   201k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|   201k|                    self.output_positions.path_end = base.positions.path_end;
 1295|   201k|                    self.remove_last_segment();
 1296|   201k|                    if self.output.len() > base.positions.scheme_end {
 1297|   194k|                        // We have some path or authority, we keep a base '/'
 1298|   194k|                        self.output.push('/');
 1299|   194k|                    }
 1300|   201k|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|   794k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authorityCs6AqEF9bmAuF_5oxttl:
 1346|   285k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|   488k|        loop {
 1349|   488k|            let c = self.input.next();
 1350|   488k|            match c {
 1351|       |                Some('@') => {
 1352|  12.4k|                    self.output.push('@');
 1353|  12.4k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   265k|                    self.input = ParserInput {
 1357|   265k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   265k|                        position: self.input_scheme_end + 2,
 1359|   265k|                    };
 1360|   265k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   265k|                    return self.parse_host();
 1362|       |                }
 1363|   210k|                Some(c) => {
 1364|   210k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   210k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   285k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E16parse_path_startCs6AqEF9bmAuF_5oxttl:
 1454|   174k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   174k|        match c {
 1456|       |            None => {
 1457|  66.8k|                self.output_positions.path_end = self.output.len();
 1458|  66.8k|                self.output_positions.query_end = self.output.len();
 1459|  66.8k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  30.6k|                self.output_positions.path_end = self.output.len();
 1463|  30.6k|                self.output.push('?');
 1464|  30.6k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  49.5k|                self.output_positions.path_end = self.output.len();
 1468|  49.5k|                self.output_positions.query_end = self.output.len();
 1469|  49.5k|                self.output.push('#');
 1470|  49.5k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  26.9k|                self.output.push('/');
 1474|  26.9k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   174k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E18parse_scheme_startCs6AqEF9bmAuF_5oxttl:
 1199|   888k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   888k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  3.90k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  3.90k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   770k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   736k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   888k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19parse_relative_pathCs6AqEF9bmAuF_5oxttl:
 1317|   201k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|   589k|        while let Some(c) = self.input.front() {
 1319|   512k|            if matches!(c, '/' | '?' | '#') {
 1320|  57.5k|                break;
 1321|   455k|            }
 1322|   455k|            self.input.next();
 1323|   455k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|   134k|        self.parse_path()
 1326|   201k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19remove_last_segmentCs6AqEF9bmAuF_5oxttl:
 1548|   241k|    fn remove_last_segment(&mut self) {
 1549|   241k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1550|   241k|            .rfind('/')
 1551|   241k|            .unwrap_or(0);
 1552|   241k|        self.output
 1553|   241k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1554|   241k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E20parse_relative_slashCs6AqEF9bmAuF_5oxttl:
 1328|   296k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1329|   296k|        if self.input.starts_with('/') {
 1330|   248k|            self.input.next();
 1331|   248k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1332|   248k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1333|   248k|            self.output.push('/');
 1334|   248k|            self.output.push('/');
 1335|   248k|            self.parse_authority()
 1336|       |        } else {
 1337|  47.7k|            self.output
 1338|  47.7k|                .push_str(&base.iri[..base.positions.authority_end]);
 1339|  47.7k|            self.output.push('/');
 1340|  47.7k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1341|  47.7k|            self.output_positions.authority_end = base.positions.authority_end;
 1342|  47.7k|            self.parse_path()
 1343|       |        }
 1344|   296k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E20validate_ip_v_futureCs6AqEF9bmAuF_5oxttl:
 1595|  52.1k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1596|  52.1k|        let mut chars = ip.chars();
 1597|       |
 1598|  52.1k|        let c = chars.next().ok_or(IriParseError {
 1599|  52.1k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1600|  52.1k|        })?;
 1601|  52.1k|        if !matches!(c, 'v' | 'V') {
 1602|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1603|  52.1k|        };
 1604|  52.1k|
 1605|  52.1k|        let mut with_a_version = false;
 1606|   139k|        for c in &mut chars {
 1607|   132k|            if c == '.' {
 1608|  26.8k|                break;
 1609|   105k|            } else if c.is_ascii_hexdigit() {
 1610|  87.3k|                with_a_version = true;
 1611|  87.3k|            } else {
 1612|  18.2k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1613|       |            }
 1614|       |        }
 1615|  33.8k|        if !with_a_version {
 1616|  16.7k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1617|  16.7k|                chars.next().unwrap_or(']'),
 1618|  16.7k|            ));
 1619|  17.1k|        }
 1620|  17.1k|
 1621|  17.1k|        if chars.as_str().is_empty() {
 1622|  1.74k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1623|  15.3k|        };
 1624|   235k|        for c in chars {
 1625|   230k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1626|  10.5k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1627|   220k|            }
 1628|       |        }
 1629|       |
 1630|  4.79k|        Ok(())
 1631|  52.1k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E23parse_path_or_authorityCs6AqEF9bmAuF_5oxttl:
 1245|  54.1k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  54.1k|        if self.input.starts_with('/') {
 1247|  36.4k|            self.input.next();
 1248|  36.4k|            self.output.push('/');
 1249|  36.4k|            self.parse_authority()
 1250|       |        } else {
 1251|  17.7k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  17.7k|            self.parse_path()
 1253|       |        }
 1254|  54.1k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E5parseCs6AqEF9bmAuF_5oxttl:
 1174|   888k|    fn parse(
 1175|   888k|        iri: &'a str,
 1176|   888k|        base: Option<IriRef<&'a str>>,
 1177|   888k|        output: &'a mut O,
 1178|   888k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   888k|        let mut parser = Self {
 1180|   888k|            iri,
 1181|   888k|            base,
 1182|   888k|            input: ParserInput {
 1183|   888k|                value: iri.chars(),
 1184|   888k|                position: 0,
 1185|   888k|            },
 1186|   888k|            output,
 1187|   888k|            output_positions: IriElementsPositions {
 1188|   888k|                scheme_end: 0,
 1189|   888k|                authority_end: 0,
 1190|   888k|                path_end: 0,
 1191|   888k|                query_end: 0,
 1192|   888k|            },
 1193|   888k|            input_scheme_end: 0,
 1194|   888k|        };
 1195|   888k|        parser.parse_scheme_start()?;
 1196|   600k|        Ok(parser.output_positions)
 1197|   888k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCs6AqEF9bmAuF_5oxttl:
  567|   197k|    pub fn parse_unchecked(iri: T) -> Self {
  568|   197k|        Iri(IriRef::parse_unchecked(iri))
  569|   197k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCs6AqEF9bmAuF_5oxttl:
  717|   251k|    pub fn path(&self) -> &str {
  718|   251k|        self.0.path()
  719|   251k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCs6AqEF9bmAuF_5oxttl:
  584|   888k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   888k|        Ok(Iri(self.0.resolve(iri)?))
  586|   888k|    }
_RNvXsL_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCs6AqEF9bmAuF_5oxttl:
  896|   375k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|   375k|        self.0.fmt(f)
  898|   375k|    }
_RNvXsg_Cs8SDT0Q3242W_5oxiriINtB5_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCs6AqEF9bmAuF_5oxttl:
  417|   375k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|   375k|        self.iri.fmt(f)
  419|   375k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer3lenCs6AqEF9bmAuF_5oxttl:
 1124|  1.33M|    fn len(&self) -> usize {
 1125|  1.33M|        self.len()
 1126|  1.33M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer4pushCs6AqEF9bmAuF_5oxttl:
 1104|  5.34M|    fn push(&mut self, c: char) {
 1105|  5.34M|        self.push(c);
 1106|  5.34M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer5clearCs6AqEF9bmAuF_5oxttl:
 1114|  58.1k|    fn clear(&mut self) {
 1115|  58.1k|        self.clear();
 1116|  58.1k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer6as_strCs6AqEF9bmAuF_5oxttl:
 1129|   810k|    fn as_str(&self) -> &str {
 1130|   810k|        self.as_str()
 1131|   810k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8push_strCs6AqEF9bmAuF_5oxttl:
 1109|   794k|    fn push_str(&mut self, s: &str) {
 1110|   794k|        self.push_str(s);
 1111|   794k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8truncateCs6AqEF9bmAuF_5oxttl:
 1119|   506k|    fn truncate(&mut self, new_len: usize) {
 1120|   506k|        self.truncate(new_len);
 1121|   506k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs2KVRoFTj7xQ_5oxrdf:
 1590|  73.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|  73.3k|        Err(IriParseError { kind })
 1592|  73.3k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs2KVRoFTj7xQ_5oxrdf:
 1556|   261k|    fn read_url_codepoint_or_echar(
 1557|   261k|        &mut self,
 1558|   261k|        c: char,
 1559|   261k|        valid: impl Fn(char) -> bool,
 1560|   261k|    ) -> Result<(), IriParseError> {
 1561|   261k|        if UNCHECKED || valid(c) {
 1562|   244k|            self.output.push(c);
 1563|   244k|            Ok(())
 1564|  16.9k|        } else if c == '%' {
 1565|  13.8k|            self.read_echar()
 1566|       |        } else {
 1567|  3.09k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   261k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs2KVRoFTj7xQ_5oxrdf:
 1556|   343k|    fn read_url_codepoint_or_echar(
 1557|   343k|        &mut self,
 1558|   343k|        c: char,
 1559|   343k|        valid: impl Fn(char) -> bool,
 1560|   343k|    ) -> Result<(), IriParseError> {
 1561|   343k|        if UNCHECKED || valid(c) {
 1562|   324k|            self.output.push(c);
 1563|   324k|            Ok(())
 1564|  18.9k|        } else if c == '%' {
 1565|  16.3k|            self.read_echar()
 1566|       |        } else {
 1567|  2.65k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   343k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs2KVRoFTj7xQ_5oxrdf:
 1556|   475k|    fn read_url_codepoint_or_echar(
 1557|   475k|        &mut self,
 1558|   475k|        c: char,
 1559|   475k|        valid: impl Fn(char) -> bool,
 1560|   475k|    ) -> Result<(), IriParseError> {
 1561|   475k|        if UNCHECKED || valid(c) {
 1562|   426k|            self.output.push(c);
 1563|   426k|            Ok(())
 1564|  49.0k|        } else if c == '%' {
 1565|  43.4k|            self.read_echar()
 1566|       |        } else {
 1567|  5.66k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   475k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs2KVRoFTj7xQ_5oxrdf:
 1556|  1.42M|    fn read_url_codepoint_or_echar(
 1557|  1.42M|        &mut self,
 1558|  1.42M|        c: char,
 1559|  1.42M|        valid: impl Fn(char) -> bool,
 1560|  1.42M|    ) -> Result<(), IriParseError> {
 1561|  1.42M|        if UNCHECKED || valid(c) {
 1562|  1.40M|            self.output.push(c);
 1563|  1.40M|            Ok(())
 1564|  15.6k|        } else if c == '%' {
 1565|  13.8k|            self.read_echar()
 1566|       |        } else {
 1567|  1.78k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  1.42M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs2KVRoFTj7xQ_5oxrdf:
 1556|  1.28M|    fn read_url_codepoint_or_echar(
 1557|  1.28M|        &mut self,
 1558|  1.28M|        c: char,
 1559|  1.28M|        valid: impl Fn(char) -> bool,
 1560|  1.28M|    ) -> Result<(), IriParseError> {
 1561|  1.28M|        if UNCHECKED || valid(c) {
 1562|  1.27M|            self.output.push(c);
 1563|  1.27M|            Ok(())
 1564|  9.97k|        } else if c == '%' {
 1565|  7.59k|            self.read_echar()
 1566|       |        } else {
 1567|  2.37k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  1.28M|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs2KVRoFTj7xQ_5oxrdf:
 1516|   261k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|   261k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   261k|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs2KVRoFTj7xQ_5oxrdf:
 1574|  84.1k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs2KVRoFTj7xQ_5oxrdf:
 1575|  67.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs2KVRoFTj7xQ_5oxrdf:
 1530|   343k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   343k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   343k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs2KVRoFTj7xQ_5oxrdf:
 1541|   475k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|   475k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   475k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs2KVRoFTj7xQ_5oxrdf:
 1364|  1.42M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|  1.42M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  1.42M|                    })?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs2KVRoFTj7xQ_5oxrdf:
  185|   600k|    pub fn into_inner(self) -> T {
  186|   600k|        self.iri
  187|   600k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs2KVRoFTj7xQ_5oxrdf:
  199|  56.6k|    pub fn is_absolute(&self) -> bool {
  200|  56.6k|        self.positions.scheme_end != 0
  201|  56.6k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs2KVRoFTj7xQ_5oxrdf:
   58|  56.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  56.6k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  56.6k|        Ok(Self { iri, positions })
   61|  56.6k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefReE11is_absoluteCs2KVRoFTj7xQ_5oxrdf:
  199|   251k|    pub fn is_absolute(&self) -> bool {
  200|   251k|        self.positions.scheme_end != 0
  201|   251k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefReE5parseCs2KVRoFTj7xQ_5oxrdf:
   58|   324k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   324k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   251k|        Ok(Self { iri, positions })
   61|   324k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs2KVRoFTj7xQ_5oxrdf:
 1372|   324k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   324k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|   108k|            let start_position = self.input.position;
 1376|  1.86M|            while let Some(c) = self.input.next() {
 1377|  1.86M|                self.output.push(c);
 1378|  1.86M|                if c == ']' {
 1379|   108k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|   108k|                    if !UNCHECKED {
 1381|   108k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|  31.1k|                            self.validate_ip_v_future(ip)?;
 1383|  77.5k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|  77.5k|                        }
 1386|      0|                    }
 1387|       |
 1388|   108k|                    let c = self.input.next();
 1389|   108k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  48.5k|                            self.output.push(':');
 1392|  48.5k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  53.4k|                            self.output_positions.authority_end = self.output.len();
 1396|  53.4k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|  6.70k|                        Some(c) => {
 1399|  6.70k|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|  6.70k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  1.75M|                }
 1408|       |            }
 1409|      0|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  1.49M|            loop {
 1419|  1.49M|                let c = self.input.next();
 1420|  1.49M|                match c {
 1421|       |                    Some(':') => {
 1422|  46.8k|                        self.output.push(':');
 1423|  46.8k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|   163k|                        self.output_positions.authority_end = self.output.len();
 1427|   163k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  1.28M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   324k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs2KVRoFTj7xQ_5oxrdf:
 1485|   163k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   427k|        loop {
 1487|   427k|            let c = self.input.next();
 1488|   427k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   165k|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|   165k|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|   165k|                    } else if c == Some('/') {
 1498|  12.1k|                        self.output.push('/');
 1499|   153k|                    }
 1500|       |
 1501|   165k|                    if c == Some('?') {
 1502|  38.9k|                        self.output_positions.path_end = self.output.len();
 1503|  38.9k|                        self.output.push('?');
 1504|  38.9k|                        return self.parse_query();
 1505|   126k|                    } else if c == Some('#') {
 1506|  14.8k|                        self.output_positions.path_end = self.output.len();
 1507|  14.8k|                        self.output_positions.query_end = self.output.len();
 1508|  14.8k|                        self.output.push('#');
 1509|  14.8k|                        return self.parse_fragment();
 1510|   111k|                    } else if c.is_none() {
 1511|  99.8k|                        self.output_positions.path_end = self.output.len();
 1512|  99.8k|                        self.output_positions.query_end = self.output.len();
 1513|  99.8k|                        return Ok(());
 1514|  12.1k|                    }
 1515|       |                }
 1516|   261k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   261k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   163k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs2KVRoFTj7xQ_5oxrdf:
 1435|  95.3k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   120k|        loop {
 1437|   120k|            let c = self.input.next();
 1438|   120k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  75.5k|                    self.output_positions.authority_end = self.output.len();
 1441|  75.5k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  45.3k|                Some(c) => {
 1444|  45.3k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  25.5k|                        self.output.push(c)
 1446|       |                    } else {
 1447|  19.8k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  95.3k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs2KVRoFTj7xQ_5oxrdf:
 1571|  95.0k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|  95.0k|        let c1 = self.input.next();
 1573|  95.0k|        let c2 = self.input.next();
 1574|  95.0k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  69.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  63.8k|            self.output.push('%');
 1578|  63.8k|            self.output.push(c1.unwrap());
 1579|  63.8k|            self.output.push(c2.unwrap());
 1580|  63.8k|            Ok(())
 1581|       |        } else {
 1582|  31.2k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  31.2k|                Some('%'),
 1584|  31.2k|                c1,
 1585|  31.2k|                c2,
 1586|  31.2k|            ]))
 1587|       |        }
 1588|  95.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs2KVRoFTj7xQ_5oxrdf:
 1523|  88.2k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   419k|        while let Some(c) = self.input.next() {
 1525|   370k|            if c == '#' {
 1526|  27.4k|                self.output_positions.query_end = self.output.len();
 1527|  27.4k|                self.output.push('#');
 1528|  27.4k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   343k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   343k|                })?
 1533|       |            }
 1534|       |        }
 1535|  49.3k|        self.output_positions.query_end = self.output.len();
 1536|  49.3k|        Ok(())
 1537|  88.2k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs2KVRoFTj7xQ_5oxrdf:
 1213|   381k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  2.03M|        loop {
 1215|  2.03M|            let c = self.input.next();
 1216|  2.03M|            match c {
 1217|  2.03M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  1.65M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   381k|                    self.output.push(':');
 1222|   381k|                    self.output_positions.scheme_end = self.output.len();
 1223|   381k|                    self.input_scheme_end = self.input.position;
 1224|   381k|                    return if self.input.starts_with('/') {
 1225|   344k|                        self.input.next();
 1226|   344k|                        self.output.push('/');
 1227|   344k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  37.2k|                        self.output_positions.authority_end = self.output.len();
 1230|  37.2k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   381k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs2KVRoFTj7xQ_5oxrdf:
 1539|  76.7k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   543k|        while let Some(c) = self.input.next() {
 1541|   475k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   475k|            })?;
 1544|       |        }
 1545|  67.4k|        Ok(())
 1546|  76.7k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs2KVRoFTj7xQ_5oxrdf:
 1346|   335k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  1.74M|        loop {
 1349|  1.74M|            let c = self.input.next();
 1350|  1.74M|            match c {
 1351|       |                Some('@') => {
 1352|  9.05k|                    self.output.push('@');
 1353|  9.05k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   315k|                    self.input = ParserInput {
 1357|   315k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   315k|                        position: self.input_scheme_end + 2,
 1359|   315k|                    };
 1360|   315k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   315k|                    return self.parse_host();
 1362|       |                }
 1363|  1.42M|                Some(c) => {
 1364|  1.42M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  1.42M|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   335k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs2KVRoFTj7xQ_5oxrdf:
 1454|   292k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   292k|        match c {
 1456|       |            None => {
 1457|  91.5k|                self.output_positions.path_end = self.output.len();
 1458|  91.5k|                self.output_positions.query_end = self.output.len();
 1459|  91.5k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  49.3k|                self.output_positions.path_end = self.output.len();
 1463|  49.3k|                self.output.push('?');
 1464|  49.3k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  34.4k|                self.output_positions.path_end = self.output.len();
 1468|  34.4k|                self.output_positions.query_end = self.output.len();
 1469|  34.4k|                self.output.push('#');
 1470|  34.4k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|   117k|                self.output.push('/');
 1474|   117k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   292k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs2KVRoFTj7xQ_5oxrdf:
 1199|   381k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   381k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   381k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   381k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCs2KVRoFTj7xQ_5oxrdf:
 1595|  31.1k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1596|  31.1k|        let mut chars = ip.chars();
 1597|       |
 1598|  31.1k|        let c = chars.next().ok_or(IriParseError {
 1599|  31.1k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1600|  31.1k|        })?;
 1601|  31.1k|        if !matches!(c, 'v' | 'V') {
 1602|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1603|  31.1k|        };
 1604|  31.1k|
 1605|  31.1k|        let mut with_a_version = false;
 1606|  65.5k|        for c in &mut chars {
 1607|  65.5k|            if c == '.' {
 1608|  31.1k|                break;
 1609|  34.4k|            } else if c.is_ascii_hexdigit() {
 1610|  34.4k|                with_a_version = true;
 1611|  34.4k|            } else {
 1612|      0|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1613|       |            }
 1614|       |        }
 1615|  31.1k|        if !with_a_version {
 1616|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1617|      0|                chars.next().unwrap_or(']'),
 1618|      0|            ));
 1619|  31.1k|        }
 1620|  31.1k|
 1621|  31.1k|        if chars.as_str().is_empty() {
 1622|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1623|  31.1k|        };
 1624|  1.41M|        for c in chars {
 1625|  1.38M|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1626|      0|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1627|  1.38M|            }
 1628|       |        }
 1629|       |
 1630|  31.1k|        Ok(())
 1631|  31.1k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs2KVRoFTj7xQ_5oxrdf:
 1245|   344k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   344k|        if self.input.starts_with('/') {
 1247|   335k|            self.input.next();
 1248|   335k|            self.output.push('/');
 1249|   335k|            self.parse_authority()
 1250|       |        } else {
 1251|  8.60k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  8.60k|            self.parse_path()
 1253|       |        }
 1254|   344k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs2KVRoFTj7xQ_5oxrdf:
 1174|   381k|    fn parse(
 1175|   381k|        iri: &'a str,
 1176|   381k|        base: Option<IriRef<&'a str>>,
 1177|   381k|        output: &'a mut O,
 1178|   381k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   381k|        let mut parser = Self {
 1180|   381k|            iri,
 1181|   381k|            base,
 1182|   381k|            input: ParserInput {
 1183|   381k|                value: iri.chars(),
 1184|   381k|                position: 0,
 1185|   381k|            },
 1186|   381k|            output,
 1187|   381k|            output_positions: IriElementsPositions {
 1188|   381k|                scheme_end: 0,
 1189|   381k|                authority_end: 0,
 1190|   381k|                path_end: 0,
 1191|   381k|                query_end: 0,
 1192|   381k|            },
 1193|   381k|            input_scheme_end: 0,
 1194|   381k|        };
 1195|   381k|        parser.parse_scheme_start()?;
 1196|   308k|        Ok(parser.output_positions)
 1197|   381k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs2KVRoFTj7xQ_5oxrdf:
  665|   600k|    pub fn into_inner(self) -> T {
  666|   600k|        self.0.into_inner()
  667|   600k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs2KVRoFTj7xQ_5oxrdf:
  556|  56.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  56.6k|        IriRef::parse(iri)?.try_into()
  558|  56.6k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriReE5parseCs2KVRoFTj7xQ_5oxrdf:
  556|   324k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   324k|        IriRef::parse(iri)?.try_into()
  558|   324k|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2KVRoFTj7xQ_5oxrdf:
  968|  56.6k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  56.6k|        if iri.is_absolute() {
  970|  56.6k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  56.6k|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriReEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2KVRoFTj7xQ_5oxrdf:
  968|   251k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   251k|        if iri.is_absolute() {
  970|   251k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   251k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCs2KVRoFTj7xQ_5oxrdf:
 1156|  1.05M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.05M|        self.value.as_str().starts_with(c)
 1158|  1.05M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCs2KVRoFTj7xQ_5oxrdf:
 1141|  9.63M|    fn next(&mut self) -> Option<char> {
 1142|  9.63M|        if let Some(head) = self.value.next() {
 1143|  9.25M|            self.position += head.len_utf8();
 1144|  9.25M|            Some(head)
 1145|       |        } else {
 1146|   384k|            None
 1147|       |        }
 1148|  9.63M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCs2KVRoFTj7xQ_5oxrdf:
 1151|   381k|    fn front(&self) -> Option<char> {
 1152|   381k|        self.value.clone().next()
 1153|   381k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2KVRoFTj7xQ_5oxrdf:
 1092|  1.36M|    fn len(&self) -> usize {
 1093|  1.36M|        self.len
 1094|  1.36M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2KVRoFTj7xQ_5oxrdf:
 1072|  8.87M|    fn push(&mut self, c: char) {
 1073|  8.87M|        self.len += c.len_utf8();
 1074|  8.87M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2KVRoFTj7xQ_5oxrdf:
 1097|   331k|    fn as_str(&self) -> &str {
 1098|   331k|        ""
 1099|   331k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2KVRoFTj7xQ_5oxrdf:
 1087|   315k|    fn truncate(&mut self, new_len: usize) {
 1088|   315k|        self.len = new_len;
 1089|   315k|    }
_RNvXsW_Cs8SDT0Q3242W_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|   361k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   361k|        match &self.kind {
 1005|  3.90k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  74.5k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  74.5k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  16.2k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  33.2k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|   152k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|   152k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  81.6k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  81.6k|                f,
 1016|  81.6k|                "Invalid IRI percent encoding '{}'",
 1017|  81.6k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  81.6k|            ),
 1019|       |        }
 1020|   361k|    }
_RNvCs8SDT0Q3242W_5oxiri28is_iunreserved_or_sub_delims:
 1634|  5.67M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1635|  5.67M|    matches!(c,
 1636|  2.85M|        'a'..='z'
 1637|   565k|        | 'A'..='Z'
 1638|  1.81M|        | '0'..='9'
 1639|       |        | '!'
 1640|       |        | '$'
 1641|       |        | '&'
 1642|       |        | '\''
 1643|       |        | '('
 1644|       |        | ')'
 1645|       |        | '*'
 1646|       |        | '+'
 1647|       |        | ','
 1648|       |        | '-'
 1649|       |        | '.'
 1650|       |        | ';'
 1651|       |        | '='
 1652|       |        | '_'
 1653|       |        | '~'
 1654|   359k|        | '\u{A0}'..='\u{D7FF}'
 1655|   140k|        | '\u{F900}'..='\u{FDCF}'
 1656|   140k|        | '\u{FDF0}'..='\u{FFEF}'
 1657|   140k|        | '\u{10000}'..='\u{1FFFD}'
 1658|   140k|        | '\u{20000}'..='\u{2FFFD}'
 1659|   140k|        | '\u{30000}'..='\u{3FFFD}'
 1660|   140k|        | '\u{40000}'..='\u{4FFFD}'
 1661|   140k|        | '\u{50000}'..='\u{5FFFD}'
 1662|   140k|        | '\u{60000}'..='\u{6FFFD}'
 1663|   140k|        | '\u{70000}'..='\u{7FFFD}'
 1664|   140k|        | '\u{80000}'..='\u{8FFFD}'
 1665|   140k|        | '\u{90000}'..='\u{9FFFD}'
 1666|   140k|        | '\u{A0000}'..='\u{AFFFD}'
 1667|   140k|        | '\u{B0000}'..='\u{BFFFD}'
 1668|   140k|        | '\u{C0000}'..='\u{CFFFD}'
 1669|   140k|        | '\u{D0000}'..='\u{DFFFD}'
 1670|    164|        | '\u{E1000}'..='\u{EFFFD}'
 1671|       |    )
 1672|  5.67M|}
_RNvCs8SDT0Q3242W_5oxiri27is_unreserved_or_sub_delims:
 1674|  1.61M|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1675|  1.61M|    matches!(c,
 1676|   171k|        'a'..='z'
 1677|   137k|        | 'A'..='Z'
 1678|   112k|        | '0'..='9'
 1679|       |        | '!'
 1680|       |        | '$'
 1681|       |        | '&'
 1682|       |        | '\''
 1683|       |        | '('
 1684|       |        | ')'
 1685|       |        | '*'
 1686|       |        | '+'
 1687|       |        | ','
 1688|       |        | '-'
 1689|       |        | '.'
 1690|       |        | ';'
 1691|       |        | '='
 1692|       |        | '_'
 1693|       |        | '~'
 1694|       |    )
 1695|  1.61M|}

_RNvMNtCslSsyAEFg2Zg_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCsbnvW2NVUxYG_11rand_chacha:
   15|  45.6M|    pub fn new(xs: [W; 2]) -> Self {
   16|  45.6M|        x2(xs, PhantomData)
   17|  45.6M|    }
_RNvXsJ_NtCslSsyAEFg2Zg_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCsbnvW2NVUxYG_11rand_chacha:
   24|  15.9M|            fn $fn(self, rhs: Self) -> Self::Output {
   25|  15.9M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   26|  15.9M|            }
_RNvXsP_NtCslSsyAEFg2Zg_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCsbnvW2NVUxYG_11rand_chacha:
   34|  15.9M|            fn $fn_assign(&mut self, rhs: Self) {
   35|  15.9M|                (self.0[0]).$fn_assign(rhs.0[0]);
   36|  15.9M|                (self.0[1]).$fn_assign(rhs.0[1]);
   37|  15.9M|            }
_RNvXs_NtCslSsyAEFg2Zg_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CsbnvW2NVUxYG_11rand_chacha:
   44|  3.99M|        fn $fn(self) -> Self {
   45|  3.99M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  3.99M|        }
_RNvXs_NtCslSsyAEFg2Zg_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CsbnvW2NVUxYG_11rand_chacha:
   44|  3.99M|        fn $fn(self) -> Self {
   45|  3.99M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  3.99M|        }
_RNvXs_NtCslSsyAEFg2Zg_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CsbnvW2NVUxYG_11rand_chacha:
   44|  3.99M|        fn $fn(self) -> Self {
   45|  3.99M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  3.99M|        }
_RNvXs_NtCslSsyAEFg2Zg_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CsbnvW2NVUxYG_11rand_chacha:
   44|  3.99M|        fn $fn(self) -> Self {
   45|  3.99M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  3.99M|        }
_RNvXsg_NtCslSsyAEFg2Zg_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CsbnvW2NVUxYG_11rand_chacha:
  210|  3.99M|    fn shuffle_lane_words1230(self) -> Self {
  211|  3.99M|        Self::new([
  212|  3.99M|            self.0[0].shuffle_lane_words1230(),
  213|  3.99M|            self.0[1].shuffle_lane_words1230(),
  214|  3.99M|        ])
  215|  3.99M|    }
_RNvXsg_NtCslSsyAEFg2Zg_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CsbnvW2NVUxYG_11rand_chacha:
  203|  3.99M|    fn shuffle_lane_words2301(self) -> Self {
  204|  3.99M|        Self::new([
  205|  3.99M|            self.0[0].shuffle_lane_words2301(),
  206|  3.99M|            self.0[1].shuffle_lane_words2301(),
  207|  3.99M|        ])
  208|  3.99M|    }
_RNvXsg_NtCslSsyAEFg2Zg_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CsbnvW2NVUxYG_11rand_chacha:
  217|  3.99M|    fn shuffle_lane_words3012(self) -> Self {
  218|  3.99M|        Self::new([
  219|  3.99M|            self.0[0].shuffle_lane_words3012(),
  220|  3.99M|            self.0[1].shuffle_lane_words3012(),
  221|  3.99M|        ])
  222|  3.99M|    }

_RINvYINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECsbnvW2NVUxYG_11rand_chacha:
  259|  2.60k|    fn read_le<V>(self, input: &[u8]) -> V
  260|  2.60k|    where
  261|  2.60k|        V: StoreBytes,
  262|  2.60k|    {
  263|  2.60k|        unsafe { V::unsafe_read_le(input) }
  264|  2.60k|    }
_RINvYINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECsbnvW2NVUxYG_11rand_chacha:
  251|   333k|    fn vec<V, A>(self, a: A) -> V
  252|   333k|    where
  253|   333k|        V: MultiLane<A>,
  254|   333k|    {
  255|   333k|        V::from_lanes(a)
  256|   333k|    }
_RINvYINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECsbnvW2NVUxYG_11rand_chacha:
  246|  2.99M|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  2.99M|        unsafe { V::unpack(s) }
  248|  2.99M|    }
_RINvYINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECsbnvW2NVUxYG_11rand_chacha:
  246|   333k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   333k|        unsafe { V::unpack(s) }
  248|   333k|    }

_RNvXNtCslSsyAEFg2Zg_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCsbnvW2NVUxYG_11rand_chacha:
   65|  1.30k|    unsafe fn instance() -> Self {
   66|  1.30k|        SseMachine(PhantomData)
   67|  1.30k|    }
_RNvXs_NtCslSsyAEFg2Zg_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCsbnvW2NVUxYG_11rand_chacha:
   93|   333k|    unsafe fn instance() -> Self {
   94|   333k|        Avx2Machine(PhantomData)
   95|   333k|    }
_RNvNtCsbnvW2NVUxYG_11rand_chacha4guts11refill_wide:
  252|   333k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  253|   333k|            #[inline(always)]
  254|   333k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  255|   333k|            use std::arch::x86_64::*;
  256|   333k|            #[target_feature(enable = "avx2")]
  257|   333k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|   333k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|   333k|                _mm256_zeroupper();
  260|   333k|                ret
  261|   333k|            }
  262|   333k|            #[target_feature(enable = "avx")]
  263|   333k|            #[target_feature(enable = "sse4.1")]
  264|   333k|            #[target_feature(enable = "ssse3")]
  265|   333k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  266|   333k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  267|   333k|                _mm256_zeroupper();
  268|   333k|                ret
  269|   333k|            }
  270|   333k|            #[target_feature(enable = "sse4.1")]
  271|   333k|            #[target_feature(enable = "ssse3")]
  272|   333k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  273|   333k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  274|   333k|            }
  275|   333k|            #[target_feature(enable = "ssse3")]
  276|   333k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  277|   333k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  278|   333k|            }
  279|   333k|            #[target_feature(enable = "sse2")]
  280|   333k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  281|   333k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  282|   333k|            }
  283|   333k|            unsafe {
  284|   333k|                if is_x86_feature_detected!("avx2") {
  285|   333k|                    impl_avx2($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("avx") {
  287|      0|                    impl_avx($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("sse4.1") {
  289|      0|                    impl_sse41($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("ssse3") {
  291|      0|                    impl_ssse3($($arg),*)
  292|      0|                } else if is_x86_feature_detected!("sse2") {
  293|      0|                    impl_sse2($($arg),*)
  294|       |                } else {
  295|      0|                    unimplemented!()
  296|       |                }
  297|       |            }
  298|       |        }
_RNvNvNtCsbnvW2NVUxYG_11rand_chacha4guts11refill_wide9impl_avx2:
  257|   333k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|   333k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|   333k|                _mm256_zeroupper();
  260|   333k|                ret
  261|   333k|            }
_RNvNtCsbnvW2NVUxYG_11rand_chacha4guts11init_chacha:
  335|  1.30k|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  336|  1.30k|            #[inline(always)]
  337|  1.30k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  338|  1.30k|            use std::arch::x86_64::*;
  339|  1.30k|            #[target_feature(enable = "avx")]
  340|  1.30k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|  1.30k|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|  1.30k|            }
  343|  1.30k|            #[target_feature(enable = "sse2")]
  344|  1.30k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  345|  1.30k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  346|  1.30k|            }
  347|  1.30k|            unsafe {
  348|  1.30k|                if is_x86_feature_detected!("avx") {
  349|  1.30k|                    impl_avx($($arg),*)
  350|      0|                } else if is_x86_feature_detected!("sse2") {
  351|      0|                    impl_sse2($($arg),*)
  352|       |                } else {
  353|      0|                    unimplemented!()
  354|       |                }
  355|       |            }
  356|       |        }
_RNvNvNtCsbnvW2NVUxYG_11rand_chacha4guts11init_chacha8impl_avx:
  340|  1.30k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|  1.30k|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|  1.30k|            }
_RNvXs2_NtCslSsyAEFg2Zg_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromAmj4_E4from:
  132|  1.30k|    fn from(u32x4: [u32; 4]) -> Self {
  133|  1.30k|        vec128_storage { u32x4 }
  134|  1.30k|    }

_RNvMNtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCsbnvW2NVUxYG_11rand_chacha:
 1398|   123M|        fn new(x: __m256i) -> Self {
 1399|   123M|            Self { x, ni: PhantomData }
 1400|   123M|        }
_RNvMsZ_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCsbnvW2NVUxYG_11rand_chacha:
   66|  18.6M|            fn new(x: __m128i) -> Self {
   67|  18.6M|                $vec {
   68|  18.6M|                    x,
   69|  18.6M|                    s3: PhantomData,
   70|  18.6M|                    s4: PhantomData,
   71|  18.6M|                    ni: PhantomData,
   72|  18.6M|                }
   73|  18.6M|            }
_RNvXs0_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCsbnvW2NVUxYG_11rand_chacha:
 1406|   666k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1407|   666k|            Self::new(p.avx)
 1408|   666k|        }
_RNvXs10_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCsbnvW2NVUxYG_11rand_chacha:
   81|  2.60k|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   82|  2.60k|                assert_eq!(input.len(), 16);
   83|  2.60k|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   84|  2.60k|            }
_RNvXs10_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCsbnvW2NVUxYG_11rand_chacha:
   91|  5.33M|            fn write_le(self, out: &mut [u8]) {
   92|  5.33M|                assert_eq!(out.len(), 16);
   93|  5.33M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   94|  5.33M|            }
_RNvXs20_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCsbnvW2NVUxYG_11rand_chacha:
   19|  5.33M|            fn $fn(self, rhs: Self) -> Self::Output {
   20|  5.33M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   21|  5.33M|            }
_RNvXs2_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCsbnvW2NVUxYG_11rand_chacha:
 1443|  2.66M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1444|  2.66M|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1445|  2.66M|        }
_RNvXs2_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCsbnvW2NVUxYG_11rand_chacha:
 1434|  2.66M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1435|  2.66M|            unsafe {
 1436|  2.66M|                [
 1437|  2.66M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1438|  2.66M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1439|  2.66M|                ]
 1440|  2.66M|            }
 1441|  2.66M|        }
_RNvXs6_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCsbnvW2NVUxYG_11rand_chacha:
  333|   333k|    fn from_lanes(xs: [u32; 4]) -> Self {
  334|   333k|        unsafe {
  335|   333k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  336|   333k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  337|   333k|            Self::new(x)
  338|   333k|        }
  339|   333k|    }
_RNvXs6_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCsbnvW2NVUxYG_11rand_chacha:
  325|  1.33M|    fn to_lanes(self) -> [u32; 4] {
  326|  1.33M|        unsafe {
  327|  1.33M|            let x = _mm_cvtsi128_si64(self.x) as u64;
  328|  1.33M|            let y = _mm_extract_epi64(self.x, 1) as u64;
  329|  1.33M|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  330|  1.33M|        }
  331|  1.33M|    }
_RNvXs6_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CsbnvW2NVUxYG_11rand_chacha:
 1474|  7.99M|            fn $name(self) -> Self {
 1475|  7.99M|                Self::new(unsafe {
 1476|  7.99M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  7.99M|                })
 1478|  7.99M|            }
_RNvXs6_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CsbnvW2NVUxYG_11rand_chacha:
 1484|  7.99M|            fn $name(self) -> Self {
 1485|  7.99M|                Self::new(unsafe {
 1486|  7.99M|                    _mm256_or_si256(
 1487|  7.99M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  7.99M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  7.99M|                    )
 1490|  7.99M|                })
 1491|  7.99M|            }
_RNvXs6_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CsbnvW2NVUxYG_11rand_chacha:
 1474|  7.99M|            fn $name(self) -> Self {
 1475|  7.99M|                Self::new(unsafe {
 1476|  7.99M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  7.99M|                })
 1478|  7.99M|            }
_RNvXs6_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CsbnvW2NVUxYG_11rand_chacha:
 1484|  7.99M|            fn $name(self) -> Self {
 1485|  7.99M|                Self::new(unsafe {
 1486|  7.99M|                    _mm256_or_si256(
 1487|  7.99M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  7.99M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  7.99M|                    )
 1490|  7.99M|                })
 1491|  7.99M|            }
_RNvXsX_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCsbnvW2NVUxYG_11rand_chacha:
   54|  2.99M|            unsafe fn unpack(x: vec128_storage) -> Self {
   55|  2.99M|                Self::new(x.sse2)
   56|  2.99M|            }
_RNvXsc_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CsbnvW2NVUxYG_11rand_chacha:
 1586|  7.99M|        fn shuffle_lane_words1230(self) -> Self {
 1587|  7.99M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1588|  7.99M|        }
_RNvXsc_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CsbnvW2NVUxYG_11rand_chacha:
 1590|  7.99M|        fn shuffle_lane_words2301(self) -> Self {
 1591|  7.99M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1592|  7.99M|        }
_RNvXsc_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CsbnvW2NVUxYG_11rand_chacha:
 1594|  7.99M|        fn shuffle_lane_words3012(self) -> Self {
 1595|  7.99M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1596|  7.99M|        }
_RNvXse_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCsbnvW2NVUxYG_11rand_chacha:
 1606|   333k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1607|   333k|            Self::new([
 1608|   333k|                u32x4x2_avx2::unpack(p.avx[0]),
 1609|   333k|                u32x4x2_avx2::unpack(p.avx[1]),
 1610|   333k|            ])
 1611|   333k|        }
_RNvXsf_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCsbnvW2NVUxYG_11rand_chacha:
 1621|  1.33M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1622|  1.33M|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1623|  1.33M|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1624|  1.33M|            Self::new([ab, cd])
 1625|  1.33M|        }
_RNvXsf_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCsbnvW2NVUxYG_11rand_chacha:
 1615|  1.33M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1616|  1.33M|            let [a, b] = self.0[0].to_lanes();
 1617|  1.33M|            let [c, d] = self.0[1].to_lanes();
 1618|  1.33M|            [a, b, c, d]
 1619|  1.33M|        }
_RNvXsl_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCsbnvW2NVUxYG_11rand_chacha:
  525|  4.66M|    fn insert(self, v: u32, i: u32) -> Self {
  526|  4.66M|        Self::new(unsafe {
  527|  4.66M|            match i {
  528|  2.33M|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  529|  2.33M|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  530|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  531|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  532|      0|                _ => unreachable!(),
  533|       |            }
  534|       |        })
  535|  4.66M|    }
_RNvXsl_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCsbnvW2NVUxYG_11rand_chacha:
  521|  1.33M|    fn extract(self, i: u32) -> u32 {
  522|  1.33M|        self.to_lanes()[i as usize]
  523|  1.33M|    }
_RNvXst_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCsbnvW2NVUxYG_11rand_chacha:
 1531|  31.9M|                fn $assign_fn(&mut self, rhs: Self) {
 1532|  31.9M|                    *self = self.$bin_fn(rhs);
 1533|  31.9M|                }
_RNvXsu_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCsbnvW2NVUxYG_11rand_chacha:
 1547|  31.9M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  31.9M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  31.9M|                }
_RNvXsy_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCsbnvW2NVUxYG_11rand_chacha:
 1547|  31.9M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  31.9M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  31.9M|                }
_RNvXsY_NtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCsbnvW2NVUxYG_11rand_chacha:
   60|   335k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   61|   335k|                vec128_storage { sse2: x.x }
   62|   335k|            }
_RNvXsj_NtNtNtCslSsyAEFg2Zg_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCscdEvteftVc2_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCsbnvW2NVUxYG_11rand_chacha:
 1687|   333k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1688|   333k|            Self {
 1689|   333k|                avx: [
 1690|   333k|                    vec256_storage { avx: x.0[0].x },
 1691|   333k|                    vec256_storage { avx: x.0[1].x },
 1692|   333k|                ],
 1693|   333k|            }
 1694|   333k|        }

_RINvXs2_NtNtCs9HF4vAf1EYI_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs6AqEF9bmAuF_5oxttl:
   51|  5.33M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  5.33M|        // Use LE; we explicitly generate one value before the next.
   53|  5.33M|        let x = u128::from(rng.next_u64());
   54|  5.33M|        let y = u128::from(rng.next_u64());
   55|  5.33M|        (y << 64) | x
   56|  5.33M|    }

_RINvCs9HF4vAf1EYI_4rand6randomoECs6AqEF9bmAuF_5oxttl:
  183|  5.33M|pub fn random<T>() -> T
  184|  5.33M|where Standard: Distribution<T> {
  185|  5.33M|    thread_rng().gen()
  186|  5.33M|}

_RINvYNtNtNtCs9HF4vAf1EYI_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs6AqEF9bmAuF_5oxttl:
   93|  5.33M|    fn gen<T>(&mut self) -> T
   94|  5.33M|    where Standard: Distribution<T> {
   95|  5.33M|        Standard.sample(self)
   96|  5.33M|    }

_RNvXs_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngENtB24_7RngCore8next_u64Cs6AqEF9bmAuF_5oxttl:
  124|  10.6M|    fn next_u64(&mut self) -> u64 {
  125|  10.6M|        self.0.next_u64()
  126|  10.6M|    }
_RNvMNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|   333k|    fn generate(&mut self, results: &mut Self::Results) {
  174|   333k|        let global_fork_counter = fork::get_fork_counter();
  175|   333k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|  1.30k|            return self.reseed_and_generate(results, global_fork_counter);
  180|   332k|        }
  181|   332k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|   332k|        self.bytes_until_reseed -= num_bytes as i64;
  183|   332k|        self.inner.generate(results);
  184|   333k|    }
_RNvMs3_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE6reseedBb_:
  219|  1.30k|    fn reseed(&mut self) -> Result<(), Error> {
  220|  1.30k|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|  1.30k|        })
  224|  1.30k|    }
_RNCNvMs3_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE6reseed0Bd_:
  220|  1.30k|        R::from_rng(&mut self.reseeder).map(|result| {
  221|  1.30k|            self.bytes_until_reseed = self.threshold;
  222|  1.30k|            self.inner = result
  223|  1.30k|        })
_RNvMs3_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE9is_forkedBb_:
  226|   333k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|   333k|        // In theory, on 32-bit platforms, it is possible for
  228|   333k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|   333k|        //
  230|   333k|        // This check will detect a fork in the normal case where
  231|   333k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|   333k|        // between both is greater than `isize::MAX` (wrapped around).
  233|   333k|        //
  234|   333k|        // It will still fail to detect a fork if there have been more than
  235|   333k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|   333k|        // enough.
  237|   333k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|   333k|    }
_RNvMs3_NtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|  1.30k|    fn reseed_and_generate(
  242|  1.30k|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|  1.30k|    ) {
  244|  1.30k|        #![allow(clippy::if_same_then_else)] // false positive
  245|  1.30k|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|  1.30k|        } else {
  248|  1.30k|            trace!("Reseeding RNG (periodic reseed)");
  249|  1.30k|        }
  250|       |
  251|  1.30k|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|  1.30k|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|  1.30k|        }
  257|  1.30k|        self.fork_counter = global_fork_counter;
  258|  1.30k|
  259|  1.30k|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|  1.30k|        self.inner.generate(results);
  261|  1.30k|    }
_RNvNtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|   333k|    pub fn get_fork_counter() -> usize {
  308|   333k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|   333k|    }
_RNvNtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCs9HF4vAf1EYI_4rand4rngs6threadNtB4_9ThreadRngNtCsaHtvKV6mKDH_9rand_core7RngCore8next_u64:
  109|  10.6M|    fn next_u64(&mut self) -> u64 {
  110|  10.6M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  10.6M|        // creates another mutable reference
  112|  10.6M|        let rng = unsafe { &mut *self.rng.get() };
  113|  10.6M|        rng.next_u64()
  114|  10.6M|    }
_RNvNtNtCs9HF4vAf1EYI_4rand4rngs6thread10thread_rng:
   88|  5.33M|pub fn thread_rng() -> ThreadRng {
   89|  5.33M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  5.33M|    ThreadRng { rng }
   91|  5.33M|}
_RNCNvNtNtCs9HF4vAf1EYI_4rand4rngs6thread10thread_rng0B7_:
   89|  5.33M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCsbnvW2NVUxYG_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsaHtvKV6mKDH_9rand_core5block12BlockRngCore8generateCs9HF4vAf1EYI_4rand:
   89|   333k|            fn generate(&mut self, r: &mut Self::Results) {
   90|   333k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|   333k|                self.state.refill4($rounds, unsafe {
   92|   333k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|   333k|                });
   94|  21.3M|                for x in r.as_mut() {
   95|  21.3M|                    *x = x.to_le();
   96|  21.3M|                }
   97|   333k|            }
_RNvXsm_NtCsbnvW2NVUxYG_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsaHtvKV6mKDH_9rand_core11SeedableRng9from_seedCs9HF4vAf1EYI_4rand:
  103|  1.30k|            fn from_seed(seed: Self::Seed) -> Self {
  104|  1.30k|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|  1.30k|            }
_RNvXs_NtCsbnvW2NVUxYG_11rand_chacha6chachaINtB4_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsRefSmE6as_refB6_:
   46|  21.9M|    fn as_ref(&self) -> &[T] {
   47|  21.9M|        &self.0
   48|  21.9M|    }
_RNvXs0_NtCsbnvW2NVUxYG_11rand_chacha6chachaINtB5_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsMutSmE6as_mutB7_:
   51|   333k|    fn as_mut(&mut self) -> &mut [T] {
   52|   333k|        &mut self.0
   53|   333k|    }
_RNvXNtCsbnvW2NVUxYG_11rand_chacha6chachaINtB2_7Array64mENtNtCscdEvteftVc2_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCsbnvW2NVUxYG_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|  1.30k|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|  1.30k|        init_chacha(key, nonce)
   74|  1.30k|    }
_RNvMNtCsbnvW2NVUxYG_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|   333k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|   333k|        refill_wide(self, drounds, out)
   86|   333k|    }
_RINvNtCsbnvW2NVUxYG_11rand_chacha4guts5roundINtNtCslSsyAEFg2Zg_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  3.99M|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  3.99M|    x.a += x.b;
   45|  3.99M|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  3.99M|    x.c += x.d;
   47|  3.99M|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  3.99M|    x.a += x.b;
   49|  3.99M|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  3.99M|    x.c += x.d;
   51|  3.99M|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  3.99M|    x
   53|  3.99M|}
_RINvNtCsbnvW2NVUxYG_11rand_chacha4guts11diagonalizeINtNtCslSsyAEFg2Zg_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  1.99M|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  1.99M|    x.b = x.b.shuffle_lane_words3012();
   58|  1.99M|    x.c = x.c.shuffle_lane_words2301();
   59|  1.99M|    x.d = x.d.shuffle_lane_words1230();
   60|  1.99M|    x
   61|  1.99M|}
_RINvNtCsbnvW2NVUxYG_11rand_chacha4guts13undiagonalizeINtNtCslSsyAEFg2Zg_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  1.99M|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  1.99M|    x.b = x.b.shuffle_lane_words1230();
   65|  1.99M|    x.c = x.c.shuffle_lane_words2301();
   66|  1.99M|    x.d = x.d.shuffle_lane_words3012();
   67|  1.99M|    x
   68|  1.99M|}
_RINvMNtCsbnvW2NVUxYG_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCslSsyAEFg2Zg_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   666k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   666k|        let d: M::u32x4 = m.unpack(self.d);
   79|   666k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   666k|    }
_RINvNtCsbnvW2NVUxYG_11rand_chacha4guts16refill_wide_implINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|   333k|fn refill_wide_impl<Mach: Machine>(
  117|   333k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|   333k|) {
  119|   333k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|   333k|    let mut pos = state.pos64(m);
  121|   333k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|   333k|    pos = pos.wrapping_add(1);
  123|   333k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|   333k|    pos = pos.wrapping_add(1);
  125|   333k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|   333k|    pos = pos.wrapping_add(1);
  127|   333k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|   333k|
  129|   333k|    let b = m.unpack(state.b);
  130|   333k|    let c = m.unpack(state.c);
  131|   333k|    let mut x = State {
  132|   333k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|   333k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|   333k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|   333k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|   333k|    };
  137|  1.99M|    for _ in 0..drounds {
  138|  1.99M|        x = round(x);
  139|  1.99M|        x = undiagonalize(round(diagonalize(x)));
  140|  1.99M|    }
  141|   333k|    let mut pos = state.pos64(m);
  142|   333k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|   333k|    pos = pos.wrapping_add(1);
  144|   333k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|   333k|    pos = pos.wrapping_add(1);
  146|   333k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|   333k|    pos = pos.wrapping_add(1);
  148|   333k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|   333k|    pos = pos.wrapping_add(1);
  150|   333k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|   333k|
  152|   333k|    let (a, b, c, d) = (
  153|   333k|        x.a.to_lanes(),
  154|   333k|        x.b.to_lanes(),
  155|   333k|        x.c.to_lanes(),
  156|   333k|        x.d.to_lanes(),
  157|   333k|    );
  158|   333k|    let sb = m.unpack(state.b);
  159|   333k|    let sc = m.unpack(state.c);
  160|   333k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|   333k|    state.d = d4.into();
  162|   333k|    let mut words = out.chunks_exact_mut(16);
  163|  1.33M|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  1.33M|        (a + k).write_le(words.next().unwrap());
  165|  1.33M|        (b + sb).write_le(words.next().unwrap());
  166|  1.33M|        (c + sc).write_le(words.next().unwrap());
  167|  1.33M|        (d + sd).write_le(words.next().unwrap());
  168|  1.33M|    }
  169|   333k|}
_RNvNtCsbnvW2NVUxYG_11rand_chacha4guts10read_u32le:
  229|  2.60k|fn read_u32le(xs: &[u8]) -> u32 {
  230|  2.60k|    assert_eq!(xs.len(), 4);
  231|  2.60k|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|  2.60k|}
_RINvNvNtCsbnvW2NVUxYG_11rand_chacha4guts11refill_wide7fn_implINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|   333k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|   333k|        refill_wide_impl(m, state, drounds, out);
  174|   333k|    }
_RINvNvNtCsbnvW2NVUxYG_11rand_chacha4guts11init_chacha7fn_implINtNtCslSsyAEFg2Zg_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|  1.30k|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|  1.30k|        let ctr_nonce = [
  237|       |            0,
  238|  1.30k|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|  1.30k|                0
  242|       |            },
  243|  1.30k|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|  1.30k|            read_u32le(&nonce[nonce.len() - 4..]),
  245|  1.30k|        ];
  246|  1.30k|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|  1.30k|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|  1.30k|        ChaCha {
  249|  1.30k|            b: key0.into(),
  250|  1.30k|            c: key1.into(),
  251|  1.30k|            d: ctr_nonce.into(),
  252|  1.30k|        }

_RNCNvXs0_NtCsaHtvKV6mKDH_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs6AqEF9bmAuF_5oxttl:
  198|  10.6M|        let read_u64 = |results: &[u32], index| {
  199|  10.6M|            let data = &results[index..=index + 1];
  200|  10.6M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  10.6M|        };
_RNvXs0_NtCsaHtvKV6mKDH_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs6AqEF9bmAuF_5oxttl:
  197|  10.6M|    fn next_u64(&mut self) -> u64 {
  198|  10.6M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  10.6M|        let len = self.results.as_ref().len();
  204|  10.6M|
  205|  10.6M|        let index = self.index;
  206|  10.6M|        if index < len - 1 {
  207|  10.3M|            self.index += 2;
  208|  10.3M|            // Read an u64 from the current index
  209|  10.3M|            read_u64(self.results.as_ref(), index)
  210|   333k|        } else if index >= len {
  211|   333k|            self.generate_and_set(2);
  212|   333k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  10.6M|    }
_RNvMs_NtCsaHtvKV6mKDH_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|   333k|    pub fn generate_and_set(&mut self, index: usize) {
  175|   333k|        assert!(index < self.results.as_ref().len());
  176|   333k|        self.core.generate(&mut self.results);
  177|   333k|        self.index = index;
  178|   333k|    }
_RNvMs_NtCsaHtvKV6mKDH_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs9HF4vAf1EYI_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtCsaHtvKV6mKDH_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs9HF4vAf1EYI_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCsbnvW2NVUxYG_11rand_chacha6chacha12ChaCha12CoreNtCsaHtvKV6mKDH_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs9HF4vAf1EYI_4rand:
  390|  1.30k|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|  1.30k|        let mut seed = Self::Seed::default();
  392|  1.30k|        rng.try_fill_bytes(seed.as_mut())?;
  393|  1.30k|        Ok(Self::from_seed(seed))
  394|  1.30k|    }
_RNvXs_CsaHtvKV6mKDH_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs9HF4vAf1EYI_4rand:
  441|  1.30k|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|  1.30k|        (**self).try_fill_bytes(dest)
  443|  1.30k|    }

_RNvXs_NtCsaHtvKV6mKDH_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|  1.30k|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|  1.30k|        getrandom(dest)?;
   69|  1.30k|        Ok(())
   70|  1.30k|    }

_RNvNvNtNtCs9HF4vAf1EYI_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCs9HF4vAf1EYI_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|  5.33M|            unsafe fn __getit(
   86|  5.33M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|  5.33M|            ) -> $crate::option::Option<&'static $t> {
   88|  5.33M|                #[thread_local]
   89|  5.33M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|  5.33M|                    $crate::thread::local_impl::Key::<$t>::new();
   91|  5.33M|
   92|  5.33M|                unsafe {
   93|  5.33M|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|  5.33M|                    })
  103|  5.33M|                }
  104|  5.33M|            }
_RNCNvNvNtNtCs9HF4vAf1EYI_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNCNvNvCskexMmCLbqNy_2n31__19___libfuzzer_sys_run0B5_:
   12|  39.6M|    for chunk in data.split(|c| *c == 0xFF) {

_RINvMNtCs2KVRoFTj7xQ_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs6AqEF9bmAuF_5oxttl:
   49|  46.1k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  46.1k|        let id = id.into();
   51|  46.1k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  5.22k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  40.9k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  46.1k|    }
_RNvMNtCs2KVRoFTj7xQ_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs6AqEF9bmAuF_5oxttl:
   62|  5.22k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  5.22k|        Self(BlankNodeContent::Anonymous {
   64|  5.22k|            id: id.to_ne_bytes(),
   65|  5.22k|            str: IdStr::new(id),
   66|  5.22k|        })
   67|  5.22k|    }
_RNvMs7_NtCs2KVRoFTj7xQ_5oxrdf10blank_nodeNtB5_5IdStr3newCs6AqEF9bmAuF_5oxttl:
  258|  5.33M|    fn new(id: u128) -> Self {
  259|  5.33M|        let mut str = [0; 32];
  260|  5.33M|        write!(&mut str[..], "{id:x}").unwrap();
  261|  5.33M|        Self(str)
  262|  5.33M|    }
_RNvMs7_NtCs2KVRoFTj7xQ_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs6AqEF9bmAuF_5oxttl:
  265|  5.33M|    fn as_str(&self) -> &str {
  266|  5.33M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  5.33M|        str::from_utf8(&self.0[..len]).unwrap()
  268|  5.33M|    }
_RNvNtCs2KVRoFTj7xQ_5oxrdf10blank_node13to_integer_idCs6AqEF9bmAuF_5oxttl:
  331|  46.1k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  46.1k|    let digits = id.as_bytes();
  333|  46.1k|    let mut value: u128 = 0;
  334|  46.1k|    if let None | Some(b'0') = digits.first() {
  335|  23.6k|        return None; // No empty string or leading zeros
  336|  22.5k|    }
  337|  58.2k|    for digit in digits {
  338|  53.0k|        value = value.checked_mul(16)?.checked_add(
  339|  52.4k|            match *digit {
  340|  51.4k|                b'0'..=b'9' => digit - b'0',
  341|  39.6k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  16.7k|                _ => return None,
  343|       |            }
  344|  35.7k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  5.22k|    Some(value)
  348|  46.1k|}
_RNvXs0_NtCs2KVRoFTj7xQ_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCs6AqEF9bmAuF_5oxttl:
  109|  2.13M|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  5.33M|        loop {
  112|  5.33M|            let id = random();
  113|  5.33M|            let str = IdStr::new(id);
  114|  5.33M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|  2.13M|                return Self(BlankNodeContent::Anonymous {
  116|  2.13M|                    id: id.to_ne_bytes(),
  117|  2.13M|                    str,
  118|  2.13M|                });
  119|  3.19M|            }
  120|       |        }
  121|  2.13M|    }
_RNCNvMs7_NtCs2KVRoFTj7xQ_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   170M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCs2KVRoFTj7xQ_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  76.2k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  76.2k|        Self(LiteralContent::String(value.into()))
   49|  76.2k|    }
_RINvMNtCs2KVRoFTj7xQ_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  22.8k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  22.8k|        let value = value.into();
   55|  22.8k|        let datatype = datatype.into();
   56|  22.8k|        Self(if datatype == xsd::STRING {
   57|  5.85k|            LiteralContent::String(value)
   58|       |        } else {
   59|  17.0k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  22.8k|    }
_RINvMNtCs2KVRoFTj7xQ_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   251k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   251k|        let value = value.into();
   55|   251k|        let datatype = datatype.into();
   56|   251k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   251k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   251k|    }
_RINvMNtCs2KVRoFTj7xQ_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  10.2k|    pub fn new_language_tagged_literal_unchecked(
   86|  10.2k|        value: impl Into<String>,
   87|  10.2k|        language: impl Into<String>,
   88|  10.2k|    ) -> Self {
   89|  10.2k|        Self(LiteralContent::LanguageTaggedString {
   90|  10.2k|            value: value.into(),
   91|  10.2k|            language: language.into(),
   92|  10.2k|        })
   93|  10.2k|    }

_RNvMs4_NtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs6AqEF9bmAuF_5oxttl:
  138|   176k|    pub fn into_owned(self) -> NamedNode {
  139|   176k|        NamedNode::new_unchecked(self.iri)
  140|   176k|    }
_RINvMNtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   379k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   379k|        Self { iri: iri.into() }
   41|   379k|    }
_RINvMNtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   453k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   453k|        Self { iri: iri.into() }
   41|   453k|    }
_RNvMNtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   274k|    pub fn as_str(&self) -> &str {
   45|   274k|        self.iri.as_str()
   46|   274k|    }
_RNvMs4_NtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   274k|    pub const fn as_str(self) -> &'a str {
  134|   274k|        self.iri
  135|   274k|    }
_RNvMs4_NtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   251k|    pub fn into_owned(self) -> NamedNode {
  139|   251k|        NamedNode::new_unchecked(self.iri)
  140|   251k|    }
_RNvXs6_NtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   251k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   251k|        node.into_owned()
  154|   251k|    }
_RNvXs9_NtCs2KVRoFTj7xQ_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   274k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   274k|        self.as_str() == other.as_str()
  175|   274k|    }

_RNvXs1g_NtCs2KVRoFTj7xQ_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs6AqEF9bmAuF_5oxttl:
  997|  73.1k|    fn from(node: BlankNode) -> Self {
  998|  73.1k|        Self::BlankNode(node)
  999|  73.1k|    }

_RINvMNtCs2KVRoFTj7xQ_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs6AqEF9bmAuF_5oxttl:
   35|  33.4k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  33.4k|        Self { name: name.into() }
   37|  33.4k|    }

_RNvXNtCs6AqEF9bmAuF_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  22.7M|    fn recognize_next_token<'a>(
   56|  22.7M|        &mut self,
   57|  22.7M|        data: &'a [u8],
   58|  22.7M|        is_ending: bool,
   59|  22.7M|        options: &N3LexerOptions,
   60|  22.7M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  22.7M|        match *data.first()? {
   62|  3.88M|            b'<' => match *data.get(1)? {
   63|  14.4k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  85.7k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  85.7k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  27.5k|                        Some(if let Ok(result) = result {
   67|  11.2k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  16.3k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  58.2k|                    } else if is_ending {
   72|  3.17k|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  55.0k|                        None
   75|       |                    }
   76|       |                }
   77|   303k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|   303k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  52.5k|                        Some(if let Ok(result) = result {
   80|  6.18k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  46.3k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|   250k|                    } else if is_ending {
   85|  66.9k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|   183k|                        None
   88|       |                    }
   89|       |                }
   90|  2.97M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   340k|                if *data.get(1)? == b'>' {
   94|  35.6k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   231k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   179k|            b'_' => match data.get(1)? {
  100|   122k|                b':' => Self::recognize_blank_node_label(data),
  101|  42.5k|                c => Some((
  102|  42.5k|                    1,
  103|  42.5k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  42.5k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  69.1k|                if self.mode != N3LexerMode::NTriples
  108|  69.1k|                    && *data.get(1)? == b'"'
  109|  46.4k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  31.1k|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|  33.3k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   338k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   338k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  67.6k|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   188k|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  1.57M|            b'@' => self.recognize_lang_tag(data),
  124|  1.80M|            b'.' => match data.get(1) {
  125|  1.19M|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.49M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   201k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  89.4k|                if *data.get(1)? == b'^' {
  131|  55.9k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  28.1k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   166k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  57.2k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  1.93M|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|   121k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   758k|                if *data.get(1)? == b'|' {
  142|  8.35k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   653k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   147k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  97.6k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|   101k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  41.3k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  31.5k|                if *data.get(1)? == b'}' {
  153|  3.54k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  17.8k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   334k|                if *data.get(1)? == b'>' {
  160|  17.9k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|   169k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  6.06M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   220k|            b'?' => self.recognize_variable(data, is_ending),
  167|  8.04M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  22.7M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  56.6k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  56.6k|        Self { mode, unchecked }
  175|  56.6k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  3.36M|    fn recognize_iri(
  178|  3.36M|        &self,
  179|  3.36M|        data: &[u8],
  180|  3.36M|        options: &N3LexerOptions,
  181|  3.36M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  3.36M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  3.36M|        let mut string = Vec::new();
  184|  3.36M|        let mut i = 1;
  185|       |        loop {
  186|  3.41M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.03M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.03M|            i += end;
  189|  1.03M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   934k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  96.8k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  77.6k|                    i += additional + 1;
  197|  77.6k|                    match c {
  198|  50.2k|                        Ok(c) => {
  199|  50.2k|                            let mut buf = [0; 4];
  200|  50.2k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  50.2k|                        }
  202|  27.4k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  3.36M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   934k|    fn parse_iri(
  211|   934k|        &self,
  212|   934k|        iri: Vec<u8>,
  213|   934k|        position: Range<usize>,
  214|   934k|        options: &N3LexerOptions,
  215|   934k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   934k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   888k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   888k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   888k|                    base_iri
  223|   888k|                        .resolve(&iri)
  224|   888k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   600k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|   934k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  8.04M|    fn recognize_pname_or_keyword<'a>(
  238|  8.04M|        &self,
  239|  8.04M|        data: &'a [u8],
  240|  8.04M|        is_ending: bool,
  241|  8.04M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  8.04M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  8.04M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  8.04M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  8.04M|        let mut i = 0;
  246|       |        loop {
  247|  16.9M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  15.9M|                match r {
  249|  15.1M|                    Ok((c, consumed)) => {
  250|  15.1M|                        if c == ':' {
  251|  2.77M|                            i += consumed;
  252|  2.77M|                            break;
  253|  12.3M|                        } else if i == 0 {
  254|  5.34M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  2.61M|                                return Some((
  256|  2.61M|                                    consumed,
  257|  2.61M|                                    Err((
  258|  2.61M|                                        0..consumed,
  259|  2.61M|                                        format!(
  260|  2.61M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  2.61M|                                        ),
  262|  2.61M|                                    )
  263|  2.61M|                                        .into()),
  264|  2.61M|                                ));
  265|  2.72M|                            }
  266|  2.72M|                            i += consumed;
  267|  7.04M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  6.19M|                            i += consumed;
  269|  6.19M|                        } else {
  270|  1.00M|                            while data[..i].ends_with(b".") {
  271|   159k|                                i -= 1;
  272|   159k|                            }
  273|   845k|                            return Some((
  274|   845k|                                i,
  275|   845k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   845k|                            ));
  277|       |                        }
  278|       |                    }
  279|   776k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|  1.02M|            } else if is_ending {
  282|  9.23k|                while data[..i].ends_with(b".") {
  283|    812|                    i -= 1;
  284|    812|                }
  285|  8.42k|                return Some(if i == 0 {
  286|  1.55k|                    (
  287|  1.55k|                        1,
  288|  1.55k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.55k|                    )
  290|       |                } else {
  291|  6.86k|                    (
  292|  6.86k|                        i,
  293|  6.86k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  6.86k|                    )
  295|       |                });
  296|       |            } else {
  297|  1.02M|                return None;
  298|       |            }
  299|       |        }
  300|  2.77M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  2.77M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  2.77M|        if pn_prefix.ends_with('.') {
  305|  3.05k|            return Some((
  306|  3.05k|                i,
  307|  3.05k|                Err((
  308|  3.05k|                    0..i,
  309|  3.05k|                    format!(
  310|  3.05k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  3.05k|                )
  312|  3.05k|                    .into()),
  313|  3.05k|            ));
  314|  2.77M|        }
  315|       |
  316|  1.07M|        let (consumed, pn_local_result) =
  317|  2.77M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  1.07M|        Some((
  319|  1.07M|            consumed + i,
  320|  1.07M|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  1.07M|            }),
  325|  1.07M|        ))
  326|  8.04M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   220k|    fn recognize_variable<'a>(
  329|   220k|        &self,
  330|   220k|        data: &'a [u8],
  331|   220k|        is_ending: bool,
  332|   220k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   220k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|   107k|        Some((
  336|   107k|            consumed + 1,
  337|   107k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   107k|            }),
  344|   107k|        ))
  345|   220k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  2.99M|    fn recognize_optional_pn_local<'a>(
  348|  2.99M|        &self,
  349|  2.99M|        data: &'a [u8],
  350|  2.99M|        is_ending: bool,
  351|  2.99M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  2.99M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  2.99M|        let mut i = 0;
  354|  2.99M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  2.99M|        let mut position_that_is_already_in_buffer = 0;
  356|  2.99M|        let mut might_be_invalid_iri = false;
  357|  2.99M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  6.62M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  4.87M|                match r {
  361|  4.82M|                    Ok((c, consumed)) => {
  362|  4.82M|                        if c == '%' {
  363|  79.4k|                            i += 1;
  364|  79.4k|                            let a = char::from(*data.get(i)?);
  365|  59.7k|                            i += 1;
  366|  59.7k|                            let b = char::from(*data.get(i)?);
  367|  51.4k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  14.5k|                                return Some((i + 1, Err((
  369|  14.5k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  14.5k|                                ).into())));
  371|  36.9k|                            }
  372|  36.9k|                            i += 1;
  373|  36.9k|                            ends_with_unescaped_dot = 0;
  374|  4.74M|                        } else if c == '\\' {
  375|   442k|                            i += 1;
  376|   442k|                            let a = char::from(*data.get(i)?);
  377|   397k|                            if self.unchecked
  378|   320k|                                || matches!(
  379|   397k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  77.6k|                            {
  396|  77.6k|                                // ok to escape
  397|   320k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   307k|                                // ok to escape but requires IRI validation
  399|   307k|                                might_be_invalid_iri = true;
  400|   307k|                            } else {
  401|  12.4k|                                return Some((i + 1, Err((
  402|  12.4k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  12.4k|                                ).into())));
  404|       |                            }
  405|   385k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   385k|                            // We add the missing bytes
  407|   385k|                            if i - position_that_is_already_in_buffer > 1 {
  408|   186k|                                buffer.push_str(
  409|   186k|                                    match str_from_utf8(
  410|   186k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   186k|                                        position_that_is_already_in_buffer..i - 1,
  412|   186k|                                    ) {
  413|   186k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   198k|                            }
  418|   385k|                            buffer.push(a);
  419|   385k|                            i += 1;
  420|   385k|                            position_that_is_already_in_buffer = i;
  421|   385k|                            ends_with_unescaped_dot = 0;
  422|  4.29M|                        } else if i == 0 {
  423|  1.67M|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   684k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   989k|                            }
  427|   989k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|   989k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|   989k|                                        || c == ':';
  431|      0|                            }
  432|   989k|                            i += consumed;
  433|  2.62M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  2.00M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  2.00M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  2.00M|                                        || c == ':';
  438|      0|                            }
  439|  2.00M|                            i += consumed;
  440|  2.00M|                            ends_with_unescaped_dot = 0;
  441|   624k|                        } else if c == '.' {
  442|   215k|                            i += consumed;
  443|   215k|                            ends_with_unescaped_dot += 1;
  444|   215k|                        } else {
  445|   409k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  86.8k|                                buffer.push_str(
  447|  86.8k|                                    match str_from_utf8(
  448|  86.8k|                                        &data[position_that_is_already_in_buffer..i],
  449|  86.8k|                                        position_that_is_already_in_buffer..i,
  450|  86.8k|                                    ) {
  451|  86.8k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  86.8k|                                for _ in 0..ends_with_unescaped_dot {
  457|  31.5k|                                    buffer.pop();
  458|  31.5k|                                }
  459|  86.8k|                                i -= ends_with_unescaped_dot;
  460|  86.8k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   322k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   322k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   322k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   322k|                                i -= ends_with_unescaped_dot;
  469|   322k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   409k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  55.6k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  1.74M|            } else if is_ending {
  477|  8.70k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  1.79k|                    while buffer.ends_with('.') {
  480|    617|                        buffer.pop();
  481|    617|                        i -= 1;
  482|    617|                    }
  483|  1.17k|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  7.52k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  7.52k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  8.06k|                    while let Some(d) = data.strip_suffix('.') {
  491|    541|                        data = d;
  492|    541|                        i -= 1;
  493|    541|                    }
  494|  7.52k|                    Cow::Borrowed(data)
  495|       |                };
  496|  8.70k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  1.73M|                return None;
  499|       |            }
  500|       |        }
  501|  2.99M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   122k|    fn recognize_blank_node_label(
  504|   122k|        data: &[u8],
  505|   122k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   122k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   122k|        let mut i = 2;
  508|       |        loop {
  509|   368k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   299k|                Ok((c, consumed)) => {
  511|   299k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   251k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|   224k|                    {
  514|   224k|                        // Ok
  515|   224k|                    } else if i > 2 && c == '.' {
  516|  26.2k|                        if data[i - 1] == b'.' {
  517|  5.27k|                            i -= 1;
  518|  5.27k|                            return Some((
  519|  5.27k|                                i,
  520|  5.27k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  5.27k|                            ));
  522|  20.9k|                        }
  523|  47.8k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|  47.8k|                    } else if data[i - 1] == b'.' {
  529|  3.38k|                        i -= 1;
  530|  3.38k|                        return Some((
  531|  3.38k|                            i,
  532|  3.38k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  3.38k|                        ));
  534|       |                    } else {
  535|  44.5k|                        return Some((
  536|  44.5k|                            i,
  537|  44.5k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  44.5k|                        ));
  539|       |                    }
  540|   245k|                    i += consumed;
  541|       |                }
  542|  5.71k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   122k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  1.57M|    fn recognize_lang_tag<'a>(
  548|  1.57M|        &self,
  549|  1.57M|        data: &'a [u8],
  550|  1.57M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  1.57M|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  1.57M|        let mut is_last_block_empty = true;
  553|  8.17M|        for (i, c) in data[1..].iter().enumerate() {
  554|  8.17M|            if c.is_ascii_alphabetic() {
  555|  7.30M|                is_last_block_empty = false;
  556|  7.30M|            } else if i == 0 {
  557|   173k|                return Some((
  558|   173k|                    1,
  559|   173k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|   173k|                ));
  561|   697k|            } else if is_last_block_empty {
  562|  12.2k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   685k|            } else if *c == b'-' {
  564|   261k|                is_last_block_empty = true;
  565|   261k|            } else {
  566|   424k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|   965k|        None
  570|  1.57M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   436k|    fn parse_lang_tag<'a>(
  573|   436k|        &self,
  574|   436k|        lang_tag: &'a [u8],
  575|   436k|        position: Range<usize>,
  576|   436k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   436k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   436k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   436k|            LanguageTag::parse(lang_tag)
  582|   436k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   359k|                .into_inner()
  584|       |        }))
  585|   436k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   222k|    fn recognize_string(
  588|   222k|        &self,
  589|   222k|        data: &[u8],
  590|   222k|        delimiter: u8,
  591|   222k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|   222k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|   222k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|   222k|        let mut string = String::new();
  595|   222k|        let mut i = 1;
  596|       |        loop {
  597|   229k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|   204k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|   191k|                Ok(s) => string.push_str(s),
  600|  12.2k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|   191k|            i += end;
  603|   191k|            match data[i] {
  604|   191k|                c if c == delimiter => {
  605|   125k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|  66.4k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|  64.8k|                    i += additional + 1;
  610|  64.8k|                    match c {
  611|  7.33k|                        Ok(c) => {
  612|  7.33k|                            string.push(c);
  613|  7.33k|                        }
  614|  57.4k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  57.4k|                            let end = memchr(delimiter, &data[i..])?;
  617|  17.4k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|   222k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  626|  98.8k|    fn recognize_long_string(
  627|  98.8k|        &self,
  628|  98.8k|        data: &[u8],
  629|  98.8k|        delimiter: u8,
  630|  98.8k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  631|  98.8k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  632|  98.8k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  633|  98.8k|        let mut string = String::new();
  634|  98.8k|        let mut i = 3;
  635|       |        loop {
  636|   193k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  637|   172k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  638|   163k|                Ok(s) => string.push_str(s),
  639|  8.95k|                Err(e) => return Some((end, Err(e))),
  640|       |            };
  641|   163k|            i += end;
  642|   163k|            match data[i] {
  643|   163k|                c if c == delimiter => {
  644|   151k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  645|  55.7k|                        return Some((i + 3, Ok(N3Token::String(string))));
  646|  88.3k|                    }
  647|  88.3k|                    i += 1;
  648|  88.3k|                    string.push(char::from(delimiter));
  649|       |                }
  650|       |                b'\\' => {
  651|  12.2k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  652|  11.5k|                    i += additional + 1;
  653|  11.5k|                    match c {
  654|  6.16k|                        Ok(c) => {
  655|  6.16k|                            string.push(c);
  656|  6.16k|                        }
  657|  5.37k|                        Err(e) => return Some((i, Err(e))),
  658|       |                    }
  659|       |                }
  660|      0|                _ => unreachable!(),
  661|       |            }
  662|       |        }
  663|  98.8k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|   861k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|   861k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|   861k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|   861k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|   861k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|   861k|        let mut i = 0;
  671|   861k|        let c = *data.first()?;
  672|   861k|        if matches!(c, b'+' | b'-') {
  673|   236k|            i += 1;
  674|   624k|        }
  675|       |        // We read the digits before .
  676|   861k|        let mut count_before: usize = 0;
  677|       |        loop {
  678|  1.51M|            let c = *data.get(i)?;
  679|  1.40M|            if c.is_ascii_digit() {
  680|   655k|                i += 1;
  681|   655k|                count_before += 1;
  682|   655k|            } else {
  683|   749k|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|   749k|        let count_after = if *data.get(i)? == b'.' {
  690|   248k|            i += 1;
  691|   248k|
  692|   248k|            let mut count_after = 0;
  693|       |            loop {
  694|   373k|                let c = *data.get(i)?;
  695|   294k|                if c.is_ascii_digit() {
  696|   124k|                    i += 1;
  697|   124k|                    count_after += 1;
  698|   124k|                } else {
  699|   169k|                    break;
  700|   169k|                }
  701|   169k|            }
  702|   169k|            Some(count_after)
  703|       |        } else {
  704|   501k|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|   671k|        let c = *data.get(i)?;
  709|   671k|        if matches!(c, b'e' | b'E') {
  710|  95.2k|            i += 1;
  711|       |
  712|  95.2k|            let c = *data.get(i)?;
  713|  76.0k|            if matches!(c, b'+' | b'-') {
  714|  4.22k|                i += 1;
  715|  71.8k|            }
  716|       |
  717|  76.0k|            let mut found = false;
  718|       |            loop {
  719|   156k|                let c = *data.get(i)?;
  720|   107k|                if c.is_ascii_digit() {
  721|  80.8k|                    i += 1;
  722|  80.8k|                    found = true;
  723|  80.8k|                } else {
  724|  26.1k|                    break;
  725|  26.1k|                }
  726|  26.1k|            }
  727|  26.1k|            Some((
  728|  26.1k|                i,
  729|  26.1k|                if !found {
  730|  11.3k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  14.7k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|  2.81k|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  11.9k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   576k|        } else if let Some(count_after) = count_after {
  738|   115k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  79.7k|                i -= 1;
  741|  79.7k|                Some((
  742|  79.7k|                    i,
  743|  79.7k|                    if count_before == 0 {
  744|  26.0k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  53.6k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  35.7k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   460k|                i,
  755|   460k|                if count_before == 0 {
  756|  87.3k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|   373k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|   861k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|   175k|    fn recognize_escape(
  765|   175k|        &self,
  766|   175k|        data: &[u8],
  767|   175k|        position: usize,
  768|   175k|        with_echar: bool,
  769|   175k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|   175k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|   175k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|   175k|        match *data.get(1)? {
  773|  75.0k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  66.2k|                Ok(c) => Some((5, Ok(c?))),
  775|  8.80k|                Err(e) => {
  776|  8.80k|                    if self.unchecked {
  777|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|      0|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|  8.80k|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  3.07k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|    634|                Ok(c) => Some((9, Ok(c?))),
  788|  2.44k|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|    601|            b't' if with_echar => Some((1, Ok('\t'))),
  791|    717|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|    894|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|    425|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|  1.13k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|    211|            b'"' if with_echar => Some((1, Ok('"'))),
  796|    766|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  8.23k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|  79.0k|            c => Some((
  799|  79.0k|                1,
  800|  79.0k|                Err((
  801|  79.0k|                    position..position + 2,
  802|  79.0k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|  79.0k|                )
  804|  79.0k|                    .into()),
  805|  79.0k|            )), // TODO: read until end of string
  806|       |        }
  807|   175k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|  78.1k|    fn recognize_hex_char(
  810|  78.1k|        data: &[u8],
  811|  78.1k|        len: usize,
  812|  78.1k|        escape_char: char,
  813|  78.1k|        position: usize,
  814|  78.1k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|  78.1k|        if data.len() < len {
  816|  16.1k|            return Ok(None);
  817|  62.0k|        }
  818|  62.0k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|  54.4k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|  54.4k|        })?;
  827|  51.0k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  51.0k|        })?;
  835|  50.7k|        Ok(Some(c))
  836|  78.1k|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  23.9M|    fn recognize_unicode_char(
  914|  23.9M|        data: &[u8],
  915|  23.9M|        position: usize,
  916|  23.9M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  23.9M|        let mut code_point: u32;
  918|  23.9M|        let bytes_needed: usize;
  919|  23.9M|        let mut lower_boundary = 0x80;
  920|  23.9M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  23.9M|        let byte = *data.first()?;
  923|  21.1M|        match byte {
  924|  21.1M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|  2.34M|            0xC2..=0xDF => {
  926|  1.96M|                bytes_needed = 1;
  927|  1.96M|                code_point = u32::from(byte) & 0x1F;
  928|  1.96M|            }
  929|   373k|            0xE0..=0xEF => {
  930|   156k|                if byte == 0xE0 {
  931|  17.8k|                    lower_boundary = 0xA0;
  932|   138k|                }
  933|   156k|                if byte == 0xED {
  934|  7.02k|                    upper_boundary = 0x9F;
  935|   149k|                }
  936|   156k|                bytes_needed = 2;
  937|   156k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|   217k|            0xF0..=0xF4 => {
  940|  98.1k|                if byte == 0xF0 {
  941|  2.61k|                    lower_boundary = 0x90;
  942|  95.4k|                }
  943|  98.1k|                if byte == 0xF4 {
  944|  2.92k|                    upper_boundary = 0x8F;
  945|  95.1k|                }
  946|  98.1k|                bytes_needed = 3;
  947|  98.1k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   573k|                return Some(Err((
  951|   573k|                    position..=position,
  952|   573k|                    "Invalid UTF-8 character encoding",
  953|   573k|                )
  954|   573k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|  2.45M|        for i in 1..=bytes_needed {
  959|  2.45M|            let byte = *data.get(i)?;
  960|  2.37M|            if byte < lower_boundary || upper_boundary < byte {
  961|   264k|                return Some(Err((
  962|   264k|                    position..=position + i,
  963|   264k|                    "Invalid UTF-8 character encoding",
  964|   264k|                )
  965|   264k|                    .into()));
  966|  2.11M|            }
  967|  2.11M|            lower_boundary = 0x80;
  968|  2.11M|            upper_boundary = 0xBF;
  969|  2.11M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  1.88M|        Some(
  973|  1.88M|            char::from_u32(code_point)
  974|  1.88M|                .map(|c| (c, bytes_needed + 1))
  975|  1.88M|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  1.88M|                }),
  982|  1.88M|        )
  983|  23.9M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  16.9M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  16.9M|        matches!(c,
  988|  10.1M|        'A'..='Z'
  989|  6.58M|        | 'a'..='z'
  990|  1.87M|        | '\u{00C0}'..='\u{00D6}'
  991|  1.87M|        | '\u{00D8}'..='\u{00F6}'
  992|  1.87M|        | '\u{00F8}'..='\u{02FF}'
  993|  1.41M|        | '\u{0370}'..='\u{037D}'
  994|  1.41M|        | '\u{037F}'..='\u{1FFF}'
  995|   130k|        | '\u{200C}'..='\u{200D}'
  996|   130k|        | '\u{2070}'..='\u{218F}'
  997|   130k|        | '\u{2C00}'..='\u{2FEF}'
  998|   130k|        | '\u{3001}'..='\u{D7FF}'
  999|  72.4k|        | '\u{F900}'..='\u{FDCF}'
 1000|  72.4k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  72.4k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  16.9M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  11.6M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  11.6M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  11.6M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  9.89M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  9.89M|        Self::is_possible_pn_chars_u(c)
 1012|  3.34M|            || matches!(c,
 1013|  2.17M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  9.89M|    }
_RNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|  2.99M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|  2.99M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|  2.99M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|  2.99M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|  2.99M|    }
_RNvNtCs6AqEF9bmAuF_5oxttl5lexer18resolve_local_name:
 1023|   510k|pub fn resolve_local_name(
 1024|   510k|    prefix: &str,
 1025|   510k|    local: &str,
 1026|   510k|    might_be_invalid_iri: bool,
 1027|   510k|    prefixes: &HashMap<String, Iri<String>>,
 1028|   510k|) -> Result<NamedNode, String> {
 1029|   510k|    if let Some(start) = prefixes.get(prefix) {
 1030|   375k|        let iri = format!("{start}{local}");
 1031|   375k|        if might_be_invalid_iri || start.path().is_empty() {
 1032|       |            // We validate again. We always validate if the local part might be the IRI authority.
 1033|   324k|            if let Err(e) = Iri::parse(iri.as_str()) {
 1034|  73.3k|                return Err(format!(
 1035|  73.3k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
 1036|  73.3k|                ));
 1037|   251k|            }
 1038|  50.7k|        }
 1039|   302k|        Ok(NamedNode::new_unchecked(iri))
 1040|       |    } else {
 1041|   135k|        Err(format!("The prefix {prefix}: has not been declared"))
 1042|       |    }
 1043|   510k|}
_RNvNtCs6AqEF9bmAuF_5oxttl5lexer13str_from_utf8:
 1045|  5.63M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  5.63M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  5.63M|    })
 1053|  5.63M|}
_RNvNtCs6AqEF9bmAuF_5oxttl5lexer16string_from_utf8:
 1055|   934k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|   934k|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|   934k|    })
 1064|   934k|}
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|   288k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  1.00M|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  1.00M|                prefix: pn_prefix,
  322|  1.00M|                local,
  323|  1.00M|                might_be_invalid_iri,
  324|  1.00M|            }),
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  94.8k|            result.and_then(|(name, _)| {
  338|  94.8k|                if name.is_empty() {
  339|  40.2k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  54.6k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  94.8k|            }),
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  76.3k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|  3.40k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|  3.40k|            (
  821|  3.40k|                position..position + len + 2,
  822|  3.40k|                format!(
  823|  3.40k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|  3.40k|                ),
  825|  3.40k|            )
  826|  3.40k|        })?;
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|    325|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|    325|            (
  829|    325|                position..position + len +2,
  830|    325|                format!(
  831|    325|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|    325|                ),
  833|    325|            )
  834|    325|        })?;
_RNCNvMs_NtCs6AqEF9bmAuF_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  1.88M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs6AqEF9bmAuF_5oxttl5lexer13str_from_utf80B5_:
 1046|  28.7k|    str::from_utf8(data).map_err(|e| {
 1047|  28.7k|        (
 1048|  28.7k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  28.7k|            format!("Invalid UTF-8: {e}"),
 1050|  28.7k|        )
 1051|  28.7k|            .into()
 1052|  28.7k|    })
_RNCNvNtCs6AqEF9bmAuF_5oxttl5lexer16string_from_utf80B5_:
 1056|  45.3k|    String::from_utf8(data).map_err(|e| {
 1057|  45.3k|        (
 1058|  45.3k|            range.start + e.utf8_error().valid_up_to()
 1059|  45.3k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  45.3k|            format!("Invalid UTF-8: {e}"),
 1061|  45.3k|        )
 1062|  45.3k|            .into()
 1063|  45.3k|    })

_RNvMsb_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_8N3Parser3newCskexMmCLbqNy_2n3:
  220|  56.6k|    pub fn new() -> Self {
  221|  56.6k|        Self::default()
  222|  56.6k|    }
_RINvMsb_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_8N3Parser13with_base_iriReECskexMmCLbqNy_2n3:
  236|  56.6k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  237|  56.6k|        self.base = Some(Iri::parse(base_iri.into())?);
  238|  56.6k|        Ok(self)
  239|  56.6k|    }
_RNvXs_NtCs6AqEF9bmAuF_5oxttl2n3NtB4_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs2KVRoFTj7xQ_5oxrdf10named_node9NamedNodeE4fromB6_:
   53|   381k|    fn from(node: NamedNode) -> Self {
   54|   381k|        Self::NamedNode(node)
   55|   381k|    }
_RNvXs0_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   60|   176k|    fn from(node: NamedNodeRef<'_>) -> Self {
   61|   176k|        Self::NamedNode(node.into_owned())
   62|   176k|    }
_RNvXs1_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs2KVRoFTj7xQ_5oxrdf10blank_node9BlankNodeE4fromB7_:
   67|  1.89M|    fn from(node: BlankNode) -> Self {
   68|  1.89M|        Self::BlankNode(node)
   69|  1.89M|    }
_RNvXs2_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs2KVRoFTj7xQ_5oxrdf7literal7LiteralE4fromB7_:
   74|   360k|    fn from(literal: Literal) -> Self {
   75|   360k|        Self::Literal(literal)
   76|   360k|    }
_RNvXs8_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs2KVRoFTj7xQ_5oxrdf8variable8VariableE4fromB7_:
  132|  33.4k|    fn from(variable: Variable) -> Self {
  133|  33.4k|        Self::Variable(variable)
  134|  33.4k|    }
_RNvMsb_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_8N3Parser5parse:
  401|  56.6k|    pub fn parse(self) -> LowLevelN3Reader {
  402|  56.6k|        LowLevelN3Reader {
  403|  56.6k|            parser: N3Recognizer::new_parser(
  404|  56.6k|                Vec::new(),
  405|  56.6k|                false,
  406|  56.6k|                self.unchecked,
  407|  56.6k|                self.base,
  408|  56.6k|                self.prefixes,
  409|  56.6k|            ),
  410|  56.6k|        }
  411|  56.6k|    }
_RNvMsg_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  765|  9.32M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  766|  9.32M|        self.parser.extend_from_slice(other)
  767|  9.32M|    }
_RNvMsg_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  772|  56.6k|    pub fn end(&mut self) {
  773|  56.6k|        self.parser.end()
  774|  56.6k|    }
_RNvMsg_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  777|  56.6k|    pub fn is_end(&self) -> bool {
  778|  56.6k|        self.parser.is_end()
  779|  56.6k|    }
_RNvMsg_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  785|  15.1M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  786|  15.1M|        self.parser.read_next()
  787|  15.1M|    }
_RNvXsh_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  871|  4.30M|    fn error_recovery_state(mut self) -> Self {
  872|  4.30M|        self.stack.clear();
  873|  4.30M|        self.terms.clear();
  874|  4.30M|        self.predicates.clear();
  875|  4.30M|        self.contexts.clear();
  876|  4.30M|        self
  877|  4.30M|    }
_RNvXsh_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  879|  9.11M|    fn recognize_next(
  880|  9.11M|        mut self,
  881|  9.11M|        token: N3Token<'_>,
  882|  9.11M|        context: &mut N3RecognizerContext,
  883|  9.11M|        results: &mut Vec<N3Quad>,
  884|  9.11M|        errors: &mut Vec<RuleRecognizerError>,
  885|  9.11M|    ) -> Self {
  886|  23.5M|        while let Some(rule) = self.stack.pop() {
  887|  19.3M|            match rule {
  888|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  889|       |                // [2]  n3Statement      ::=  n3Directive | triples
  890|       |                // [3]  n3Directive      ::=  prefixID | base
  891|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  892|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  893|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  894|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  895|       |                // [8]  base             ::=  "@base" IRIREF
  896|       |                N3State::N3Doc => {
  897|  1.37M|                    self.stack.push(N3State::N3Doc);
  898|   120k|                    match token {
  899|   184k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  900|  64.0k|                            self.stack.push(N3State::BaseExpectIri);
  901|  64.0k|                            return self;
  902|       |                        }
  903|   120k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  904|  2.63k|                            self.stack.push(N3State::PrefixExpectPrefix);
  905|  2.63k|                            return self;
  906|       |                        }
  907|   226k|                        N3Token::LangTag("prefix") => {
  908|   179k|                            self.stack.push(N3State::N3DocExpectDot);
  909|   179k|                            self.stack.push(N3State::PrefixExpectPrefix);
  910|   179k|                            return self;
  911|       |                        }
  912|  47.0k|                        N3Token::LangTag("base") => {
  913|  2.29k|                            self.stack.push(N3State::N3DocExpectDot);
  914|  2.29k|                            self.stack.push(N3State::BaseExpectIri);
  915|  2.29k|                            return self;
  916|       |                        }
  917|  1.12M|                        _ => {
  918|  1.12M|                            self.stack.push(N3State::N3DocExpectDot);
  919|  1.12M|                            self.stack.push(N3State::Triples);
  920|  1.12M|                        }
  921|       |                    }
  922|       |                }
  923|       |                N3State::N3DocExpectDot => {
  924|   198k|                    if token == N3Token::Punctuation(".") {
  925|  84.2k|                        return self;
  926|   114k|                    }
  927|   114k|                    errors.push("A dot is expected at the end of N3 statements".into());
  928|       |                }
  929|  73.5k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  930|  63.7k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  931|  63.7k|                                self
  932|       |                    } else {
  933|  9.73k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  934|       |                },
  935|   158k|                N3State::PrefixExpectPrefix => return match token {
  936|   158k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  937|   153k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  938|   153k|                        self
  939|       |                    }
  940|       |                    _ => {
  941|  21.9k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  942|       |                    }
  943|       |                },
  944|   140k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  945|   133k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  946|   133k|                    self
  947|  6.40k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  948|       |                },
  949|       |                // [9]  triples  ::=  subject predicateObjectList?
  950|  1.59M|                N3State::Triples => {
  951|  1.59M|                    self.stack.push(N3State::TriplesMiddle);
  952|  1.59M|                    self.stack.push(N3State::Path);
  953|  1.59M|                }
  954|   314k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  955|   211k|                    self.stack.push(N3State::TriplesEnd);
  956|   211k|                    self.stack.push(N3State::PredicateObjectList);
  957|   211k|                },
  958|  56.9k|                N3State::TriplesEnd => {
  959|  56.9k|                    self.terms.pop();
  960|  56.9k|                }
  961|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  962|  1.66M|                N3State::PredicateObjectList => {
  963|  1.66M|                    self.stack.push(N3State::PredicateObjectListEnd);
  964|  1.66M|                    self.stack.push(N3State::ObjectsList);
  965|  1.66M|                    self.stack.push(N3State::Verb);
  966|  1.66M|                }
  967|       |                N3State::PredicateObjectListEnd => {
  968|   183k|                    self.predicates.pop();
  969|   183k|                    if token == N3Token::Punctuation(";") {
  970|  22.2k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  971|  22.2k|                        return self;
  972|   161k|                    }
  973|       |                }
  974|  48.5k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  975|  26.6k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  976|  26.6k|                    return self;
  977|  21.8k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  978|  8.65k|                    self.stack.push(N3State::PredicateObjectListEnd);
  979|  8.65k|                    self.stack.push(N3State::ObjectsList);
  980|  8.65k|                    self.stack.push(N3State::Verb);
  981|  8.65k|                },
  982|       |                // [11]  objectList  ::=  object ( "," object) *
  983|   364k|                N3State::ObjectsList => {
  984|   364k|                    self.stack.push(N3State::ObjectsListEnd);
  985|   364k|                    self.stack.push(N3State::Path);
  986|   364k|                }
  987|       |                N3State::ObjectsListEnd => {
  988|   192k|                    let object = self.terms.pop().unwrap();
  989|   192k|                    let subject = self.terms.last().unwrap().clone();
  990|   192k|                    results.push(match self.predicates.last().unwrap().clone() {
  991|   124k|                        Predicate::Regular(predicate) => self.quad(
  992|   124k|                            subject,
  993|   124k|                            predicate,
  994|   124k|                            object,
  995|   124k|                        ),
  996|  67.5k|                        Predicate::Inverted(predicate) => self.quad(
  997|  67.5k|                            object,
  998|  67.5k|                            predicate,
  999|  67.5k|                            subject,
 1000|  67.5k|                        )
 1001|       |                    });
 1002|   192k|                    if token == N3Token::Punctuation(",") {
 1003|  8.23k|                        self.stack.push(N3State::ObjectsListEnd);
 1004|  8.23k|                        self.stack.push(N3State::Path);
 1005|  8.23k|                        return self;
 1006|   183k|                    }
 1007|       |                }
 1008|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
 1009|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
 1010|  1.67M|                N3State::Verb => match token {
 1011|  64.0k|                    N3Token::PlainKeyword("a") => {
 1012|  27.4k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
 1013|  27.4k|                        return self;
 1014|       |                    }
 1015|  36.6k|                    N3Token::PlainKeyword("has") => {
 1016|  1.46k|                        self.stack.push(N3State::AfterRegularVerb);
 1017|  1.46k|                        self.stack.push(N3State::Path);
 1018|  1.46k|                        return self;
 1019|       |                    }
 1020|  35.1k|                    N3Token::PlainKeyword("is") => {
 1021|  7.63k|                        self.stack.push(N3State::AfterVerbIs);
 1022|  7.63k|                        self.stack.push(N3State::Path);
 1023|  7.63k|                        return self;
 1024|       |                    }
 1025|  1.26M|                    N3Token::Punctuation("=") => {
 1026|  13.8k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
 1027|  13.8k|                        return self;
 1028|       |                    }
 1029|  1.25M|                    N3Token::Punctuation("=>") => {
 1030|  10.0k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1031|  10.0k|                        return self;
 1032|       |                    }
 1033|  1.24M|                    N3Token::Punctuation("<=") => {
 1034|  1.13k|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1035|  1.13k|                        return self;
 1036|       |                    }
 1037|  1.24M|                    N3Token::Punctuation("<-") => {
 1038|  68.4k|                        self.stack.push(N3State::AfterInvertedVerb);
 1039|  68.4k|                        self.stack.push(N3State::Path);
 1040|  68.4k|                        return self;
 1041|       |                    }
 1042|  1.54M|                    _ => {
 1043|  1.54M|                        self.stack.push(N3State::AfterRegularVerb);
 1044|  1.54M|                        self.stack.push(N3State::Path);
 1045|  1.54M|                    }
 1046|       |                }
 1047|   246k|                N3State::AfterRegularVerb => {
 1048|   246k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
 1049|   246k|                }
 1050|  68.0k|                N3State::AfterInvertedVerb => {
 1051|  68.0k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1052|  68.0k|                }
 1053|  7.59k|                N3State::AfterVerbIs => return match token {
 1054|  6.10k|                    N3Token::PlainKeyword("of") => {
 1055|  3.20k|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1056|  3.20k|                        self
 1057|       |                    }
 1058|       |                    _ => {
 1059|  4.39k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
 1060|       |                    }
 1061|       |                },
 1062|       |                // [13]  subject     ::=  expression
 1063|       |                // [15]  object      ::=  expression
 1064|       |                // [16]  expression  ::=  path
 1065|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
 1066|  3.73M|                N3State::Path => {
 1067|  3.73M|                    self.stack.push(N3State::PathFollowUp);
 1068|  3.73M|                    self.stack.push(N3State::PathItem);
 1069|  3.73M|                }
 1070|   907k|                N3State::PathFollowUp => match token {
 1071|   668k|                    N3Token::Punctuation("!") => {
 1072|  5.82k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
 1073|  5.82k|                        self.stack.push(N3State::PathItem);
 1074|  5.82k|                        return self;
 1075|       |                    }
 1076|   662k|                    N3Token::Punctuation("^") => {
 1077|  11.7k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
 1078|  11.7k|                        self.stack.push(N3State::PathItem);
 1079|  11.7k|                        return self;
 1080|       |                    }
 1081|   890k|                    _ => ()
 1082|       |                },
 1083|  13.9k|                N3State::PathAfterIndicator { is_inverse } => {
 1084|  13.9k|                    let predicate = self.terms.pop().unwrap();
 1085|  13.9k|                    let previous = self.terms.pop().unwrap();
 1086|  13.9k|                    let current = BlankNode::default();
 1087|  13.9k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
 1088|  13.9k|                    self.terms.push(current.into());
 1089|  13.9k|                    self.stack.push(N3State::PathFollowUp);
 1090|       |                }
 1091|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
 1092|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
 1093|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
 1094|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
 1095|       |                // [22]  collection             ::=  "(" object* ")"
 1096|       |                // [23]  formula                ::=  "{" formulaContent? "}"
 1097|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
 1098|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
 1099|       |                // [27]  iri                    ::=  IRIREF | prefixedName
 1100|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
 1101|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
 1102|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
 1103|       |                N3State::PathItem => {
 1104|  3.74M|                    return match token {
 1105|  69.1k|                        N3Token::IriRef(iri) => {
 1106|  69.1k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
 1107|  69.1k|                            self
 1108|       |                        }
 1109|   471k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1110|   283k|                            Ok(t) => {
 1111|   283k|                                self.terms.push(t.into());
 1112|   283k|                                self
 1113|       |                            }
 1114|   188k|                            Err(e) =>  self.error(errors, e)
 1115|       |                        }
 1116|  46.1k|                        N3Token::BlankNodeLabel(bnode) => {
 1117|  46.1k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
 1118|  46.1k|                            self
 1119|       |                        }
 1120|  33.4k|                        N3Token::Variable(name) => {
 1121|  33.4k|                            self.terms.push(Variable::new_unchecked(name).into());
 1122|  33.4k|                            self
 1123|       |                        }
 1124|  2.49M|                        N3Token::Punctuation("[") => {
 1125|  1.50M|                            self.stack.push(N3State::PropertyListMiddle);
 1126|  1.50M|                            self
 1127|       |                        }
 1128|   985k|                        N3Token::Punctuation("(") => {
 1129|   110k|                            self.stack.push(N3State::CollectionBeginning);
 1130|   110k|                            self
 1131|       |                        }
 1132|   137k|                        N3Token::String(value) => {
 1133|   137k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
 1134|   137k|                            self
 1135|       |                        }
 1136|   207k|                        N3Token::Integer(v) => {
 1137|   207k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
 1138|   207k|                            self
 1139|       |                        }
 1140|  27.2k|                        N3Token::Decimal(v) => {
 1141|  27.2k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1142|  27.2k|                            self
 1143|       |                        }
 1144|  11.3k|                        N3Token::Double(v) => {
 1145|  11.3k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1146|  11.3k|                            self
 1147|       |                        }
 1148|   184k|                        N3Token::PlainKeyword("true") => {
 1149|  2.48k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1150|  2.48k|                            self
 1151|       |                        }
 1152|   181k|                        N3Token::PlainKeyword("false") => {
 1153|  3.24k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1154|  3.24k|                            self
 1155|       |                        }
 1156|   875k|                        N3Token::Punctuation("{") => {
 1157|   518k|                            self.contexts.push(BlankNode::default());
 1158|   518k|                            self.stack.push(N3State::FormulaContent);
 1159|   518k|                            self
 1160|       |                        }
 1161|       |                        _ =>
 1162|   599k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1163|       |
 1164|       |                    }
 1165|       |                }
 1166|  1.48M|                N3State::PropertyListMiddle => match token {
 1167|  1.14M|                    N3Token::Punctuation("]") => {
 1168|  5.52k|                        self.terms.push(BlankNode::default().into());
 1169|  5.52k|                        return self;
 1170|       |                    }
 1171|  76.1k|                    N3Token::PlainKeyword("id") => {
 1172|  23.3k|                        self.stack.push(N3State::IriPropertyList);
 1173|  23.3k|                        return self;
 1174|       |                    }
 1175|  1.45M|                    _ => {
 1176|  1.45M|                        self.terms.push(BlankNode::default().into());
 1177|  1.45M|                        self.stack.push(N3State::PropertyListEnd);
 1178|  1.45M|                        self.stack.push(N3State::PredicateObjectList);
 1179|  1.45M|                    }
 1180|       |                }
 1181|   117k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1182|  4.39k|                    return self;
 1183|   113k|                } else {
 1184|   113k|                    errors.push("blank node property lists should end with a ']'".into());
 1185|   113k|                }
 1186|  20.9k|                N3State::IriPropertyList => return match token {
 1187|  2.16k|                    N3Token::IriRef(id) => {
 1188|  2.16k|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1189|  2.16k|                        self.stack.push(N3State::PropertyListEnd);
 1190|  2.16k|                        self.stack.push(N3State::PredicateObjectList);
 1191|  2.16k|                        self
 1192|       |                    }
 1193|  15.3k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1194|  1.99k|                        Ok(t) => {
 1195|  1.99k|                            self.terms.push(t.into());
 1196|  1.99k|                            self.stack.push(N3State::PropertyListEnd);
 1197|  1.99k|                            self.stack.push(N3State::PredicateObjectList);
 1198|  1.99k|                            self
 1199|       |                        }
 1200|  13.3k|                        Err(e) => {
 1201|  13.3k|                            self.error(errors, e)
 1202|       |                        }
 1203|       |                    }
 1204|       |                    _ => {
 1205|  3.51k|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1206|       |                    }
 1207|       |                },
 1208|   107k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1209|  9.57k|                    self.terms.push(rdf::NIL.into());
 1210|  9.57k|                    return self;
 1211|  97.8k|                } else {
 1212|  97.8k|                    let root = BlankNode::default();
 1213|  97.8k|                    self.terms.push(root.clone().into());
 1214|  97.8k|                    self.terms.push(root.into());
 1215|  97.8k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1216|  97.8k|                    self.stack.push(N3State::Path);
 1217|  97.8k|                },
 1218|       |                N3State::CollectionPossibleEnd => {
 1219|  61.2k|                    let value = self.terms.pop().unwrap();
 1220|  61.2k|                    let old = self.terms.pop().unwrap();
 1221|  61.2k|                    results.push(self.quad(
 1222|  61.2k|                        old.clone(),
 1223|  61.2k|                        rdf::FIRST,
 1224|  61.2k|                        value,
 1225|  61.2k|                    ));
 1226|  61.2k|                    if let N3Token::Punctuation(")") = token {
 1227|  17.4k|                        results.push(self.quad(
 1228|  17.4k|                            old,
 1229|  17.4k|                            rdf::REST,
 1230|  17.4k|                            rdf::NIL,
 1231|  17.4k|                        ));
 1232|  17.4k|                        return self;
 1233|  43.7k|                    }
 1234|  43.7k|                    let new = BlankNode::default();
 1235|  43.7k|                    results.push(self.quad(
 1236|  43.7k|                        old,
 1237|  43.7k|                        rdf::REST,
 1238|  43.7k|                        new.clone(),
 1239|  43.7k|                    ));
 1240|  43.7k|                    self.terms.push(new.into());
 1241|  43.7k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1242|  43.7k|                    self.stack.push(N3State::Path);
 1243|       |                }
 1244|   130k|                N3State::LiteralPossibleSuffix { value } => {
 1245|   130k|                    match token {
 1246|  10.2k|                        N3Token::LangTag(lang) => {
 1247|  10.2k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1248|  10.2k|                            return self;
 1249|       |                        }
 1250|  59.8k|                        N3Token::Punctuation("^^") => {
 1251|  43.8k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1252|  43.8k|                            return self;
 1253|       |                        }
 1254|  76.2k|                        _ => {
 1255|  76.2k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1256|  76.2k|                        }
 1257|       |                    }
 1258|       |                }
 1259|  40.2k|                N3State::LiteralExpectDatatype { value } => {
 1260|  40.2k|                    match token {
 1261|  5.96k|                        N3Token::IriRef(datatype) => {
 1262|  5.96k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1263|  5.96k|                            return self;
 1264|       |                        }
 1265|  23.8k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1266|  16.9k|                            Ok(datatype) => {
 1267|  16.9k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1268|  16.9k|                                return self;
 1269|       |                            }
 1270|  6.92k|                            Err(e) => {
 1271|  6.92k|                                return self.error(errors, e);
 1272|       |                            }
 1273|       |                        }
 1274|  10.4k|                        _ => {
 1275|  10.4k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1276|  10.4k|                            self.stack.clear();
 1277|  10.4k|                        }
 1278|       |                    }
 1279|       |                }
 1280|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1281|       |                N3State::FormulaContent => {
 1282|  33.9k|                    match token {
 1283|   428k|                        N3Token::Punctuation("}") => {
 1284|  51.1k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1285|  51.1k|                            return self;
 1286|       |                        }
 1287|  40.3k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1288|  6.32k|                            self.stack.push(N3State::FormulaContent);
 1289|  6.32k|                            self.stack.push(N3State::BaseExpectIri);
 1290|  6.32k|                            return self;
 1291|       |                        }
 1292|  33.9k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1293|  1.64k|                            self.stack.push(N3State::FormulaContent);
 1294|  1.64k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1295|  1.64k|                            return self;
 1296|       |                        }
 1297|  25.2k|                        N3Token::LangTag("prefix") => {
 1298|  3.47k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1299|  3.47k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1300|  3.47k|                            return self;
 1301|       |                        }
 1302|  21.7k|                        N3Token::LangTag("base") => {
 1303|  3.77k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1304|  3.77k|                            self.stack.push(N3State::BaseExpectIri);
 1305|  3.77k|                            return self;
 1306|       |                        }
 1307|   476k|                        _ => {
 1308|   476k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1309|   476k|                            self.stack.push(N3State::Triples);
 1310|   476k|                        }
 1311|       |                    }
 1312|       |                }
 1313|       |                N3State::FormulaContentExpectDot => {
 1314|  53.6k|                    match token {
 1315|  49.6k|                        N3Token::Punctuation("}") => {
 1316|  25.9k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1317|  25.9k|                            return self;
 1318|       |                        }
 1319|  23.6k|                        N3Token::Punctuation(".") => {
 1320|  7.71k|                            self.stack.push(N3State::FormulaContent);
 1321|  7.71k|                            return self;
 1322|       |                        }
 1323|  19.9k|                        _ => {
 1324|  19.9k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1325|  19.9k|                            self.stack.push(N3State::FormulaContent);
 1326|  19.9k|                        }
 1327|       |                    }
 1328|       |                }
 1329|       |            }
 1330|       |        }
 1331|       |        // Empty stack
 1332|  4.17M|        if token == N3Token::Punctuation(".") {
 1333|  1.22M|            self.stack.push(N3State::N3Doc);
 1334|  1.22M|            self
 1335|       |        } else {
 1336|  2.94M|            self
 1337|       |        }
 1338|  9.11M|    }
_RNvXsh_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1340|  56.6k|    fn recognize_end(
 1341|  56.6k|        self,
 1342|  56.6k|        _state: &mut N3RecognizerContext,
 1343|  56.6k|        _results: &mut Vec<Self::Output>,
 1344|  56.6k|        errors: &mut Vec<RuleRecognizerError>,
 1345|  56.6k|    ) {
 1346|  56.6k|        match &*self.stack {
 1347|  56.6k|            [] | [N3State::N3Doc] => (),
 1348|  6.92k|            _ => errors.push("Unexpected end".into()), // TODO
 1349|       |        }
 1350|  56.6k|    }
_RNvXsh_NtCs6AqEF9bmAuF_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1352|  22.8M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1353|  22.8M|        &context.lexer_options
 1354|  22.8M|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB8_:
 1358|  56.6k|    pub fn new_parser<B>(
 1359|  56.6k|        data: B,
 1360|  56.6k|        is_ending: bool,
 1361|  56.6k|        unchecked: bool,
 1362|  56.6k|        base_iri: Option<Iri<String>>,
 1363|  56.6k|        prefixes: HashMap<String, Iri<String>>,
 1364|  56.6k|    ) -> Parser<B, Self> {
 1365|  56.6k|        Parser::new(
 1366|  56.6k|            Lexer::new(
 1367|  56.6k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1368|  56.6k|                data,
 1369|  56.6k|                is_ending,
 1370|  56.6k|                MIN_BUFFER_SIZE,
 1371|  56.6k|                MAX_BUFFER_SIZE,
 1372|  56.6k|                true,
 1373|  56.6k|                Some(b"#"),
 1374|  56.6k|            ),
 1375|  56.6k|            Self {
 1376|  56.6k|                stack: vec![N3State::N3Doc],
 1377|  56.6k|                terms: Vec::new(),
 1378|  56.6k|                predicates: Vec::new(),
 1379|  56.6k|                contexts: Vec::new(),
 1380|  56.6k|            },
 1381|  56.6k|            N3RecognizerContext {
 1382|  56.6k|                lexer_options: N3LexerOptions { base_iri },
 1383|  56.6k|                prefixes,
 1384|  56.6k|            },
 1385|  56.6k|        )
 1386|  56.6k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
 1389|   208k|    fn error(
 1390|   208k|        mut self,
 1391|   208k|        errors: &mut Vec<RuleRecognizerError>,
 1392|   208k|        msg: impl Into<RuleRecognizerError>,
 1393|   208k|    ) -> Self {
 1394|   208k|        errors.push(msg.into());
 1395|   208k|        self.stack.clear();
 1396|   208k|        self
 1397|   208k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1389|   645k|    fn error(
 1390|   645k|        mut self,
 1391|   645k|        errors: &mut Vec<RuleRecognizerError>,
 1392|   645k|        msg: impl Into<RuleRecognizerError>,
 1393|   645k|    ) -> Self {
 1394|   645k|        errors.push(msg.into());
 1395|   645k|        self.stack.clear();
 1396|   645k|        self
 1397|   645k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1399|   192k|    fn quad(
 1400|   192k|        &self,
 1401|   192k|        subject: impl Into<N3Term>,
 1402|   192k|        predicate: impl Into<N3Term>,
 1403|   192k|        object: impl Into<N3Term>,
 1404|   192k|    ) -> N3Quad {
 1405|   192k|        N3Quad {
 1406|   192k|            subject: subject.into(),
 1407|   192k|            predicate: predicate.into(),
 1408|   192k|            object: object.into(),
 1409|   192k|            graph_name: self
 1410|   192k|                .contexts
 1411|   192k|                .last()
 1412|   192k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|   192k|        }
 1414|   192k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCs2KVRoFTj7xQ_5oxrdf10blank_node9BlankNodeEB8_:
 1399|  5.32k|    fn quad(
 1400|  5.32k|        &self,
 1401|  5.32k|        subject: impl Into<N3Term>,
 1402|  5.32k|        predicate: impl Into<N3Term>,
 1403|  5.32k|        object: impl Into<N3Term>,
 1404|  5.32k|    ) -> N3Quad {
 1405|  5.32k|        N3Quad {
 1406|  5.32k|            subject: subject.into(),
 1407|  5.32k|            predicate: predicate.into(),
 1408|  5.32k|            object: object.into(),
 1409|  5.32k|            graph_name: self
 1410|  5.32k|                .contexts
 1411|  5.32k|                .last()
 1412|  5.32k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  5.32k|        }
 1414|  5.32k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1399|  17.4k|    fn quad(
 1400|  17.4k|        &self,
 1401|  17.4k|        subject: impl Into<N3Term>,
 1402|  17.4k|        predicate: impl Into<N3Term>,
 1403|  17.4k|        object: impl Into<N3Term>,
 1404|  17.4k|    ) -> N3Quad {
 1405|  17.4k|        N3Quad {
 1406|  17.4k|            subject: subject.into(),
 1407|  17.4k|            predicate: predicate.into(),
 1408|  17.4k|            object: object.into(),
 1409|  17.4k|            graph_name: self
 1410|  17.4k|                .contexts
 1411|  17.4k|                .last()
 1412|  17.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  17.4k|        }
 1414|  17.4k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1399|  61.2k|    fn quad(
 1400|  61.2k|        &self,
 1401|  61.2k|        subject: impl Into<N3Term>,
 1402|  61.2k|        predicate: impl Into<N3Term>,
 1403|  61.2k|        object: impl Into<N3Term>,
 1404|  61.2k|    ) -> N3Quad {
 1405|  61.2k|        N3Quad {
 1406|  61.2k|            subject: subject.into(),
 1407|  61.2k|            predicate: predicate.into(),
 1408|  61.2k|            object: object.into(),
 1409|  61.2k|            graph_name: self
 1410|  61.2k|                .contexts
 1411|  61.2k|                .last()
 1412|  61.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  61.2k|        }
 1414|  61.2k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1399|  43.7k|    fn quad(
 1400|  43.7k|        &self,
 1401|  43.7k|        subject: impl Into<N3Term>,
 1402|  43.7k|        predicate: impl Into<N3Term>,
 1403|  43.7k|        object: impl Into<N3Term>,
 1404|  43.7k|    ) -> N3Quad {
 1405|  43.7k|        N3Quad {
 1406|  43.7k|            subject: subject.into(),
 1407|  43.7k|            predicate: predicate.into(),
 1408|  43.7k|            object: object.into(),
 1409|  43.7k|            graph_name: self
 1410|  43.7k|                .contexts
 1411|  43.7k|                .last()
 1412|  43.7k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  43.7k|        }
 1414|  43.7k|    }
_RINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCs2KVRoFTj7xQ_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1399|  8.65k|    fn quad(
 1400|  8.65k|        &self,
 1401|  8.65k|        subject: impl Into<N3Term>,
 1402|  8.65k|        predicate: impl Into<N3Term>,
 1403|  8.65k|        object: impl Into<N3Term>,
 1404|  8.65k|    ) -> N3Quad {
 1405|  8.65k|        N3Quad {
 1406|  8.65k|            subject: subject.into(),
 1407|  8.65k|            predicate: predicate.into(),
 1408|  8.65k|            object: object.into(),
 1409|  8.65k|            graph_name: self
 1410|  8.65k|                .contexts
 1411|  8.65k|                .last()
 1412|  8.65k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  8.65k|        }
 1414|  8.65k|    }
_RNCINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1412|  22.1k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCs2KVRoFTj7xQ_5oxrdf10blank_node9BlankNodeE0Ba_:
 1412|  1.21k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1412|  3.97k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1412|  24.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs2KVRoFTj7xQ_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1412|  20.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs6AqEF9bmAuF_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCs2KVRoFTj7xQ_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1412|  1.26k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RNvXNtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   31|  3.21M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  3.21M|        Self {
   33|  3.21M|            location,
   34|  3.21M|            message: message.into(),
   35|  3.21M|        }
   36|  3.21M|    }
_RNvXNtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  1.17M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.17M|        Self {
   33|  1.17M|            location,
   34|  1.17M|            message: message.into(),
   35|  1.17M|        }
   36|  1.17M|    }
_RNvXs_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   41|  69.5k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  69.5k|        (*location.start()..*location.end() + 1, message).into()
   43|  69.5k|    }
_RNvXs_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   837k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   837k|        (*location.start()..*location.end() + 1, message).into()
   43|   837k|    }
_RNvXs0_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   47|  42.5k|    fn from((location, message): (usize, S)) -> Self {
   48|  42.5k|        (location..=location, message).into()
   49|  42.5k|    }
_RNvMs1_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   73|  56.6k|    pub fn new(
   74|  56.6k|        parser: R,
   75|  56.6k|        data: B,
   76|  56.6k|        is_ending: bool,
   77|  56.6k|        min_buffer_size: usize,
   78|  56.6k|        max_buffer_size: usize,
   79|  56.6k|        is_line_jump_whitespace: bool,
   80|  56.6k|        line_comment_start: Option<&'static [u8]>,
   81|  56.6k|    ) -> Self {
   82|  56.6k|        Self {
   83|  56.6k|            parser,
   84|  56.6k|            data,
   85|  56.6k|            position: Position {
   86|  56.6k|                line_start_buffer_offset: 0,
   87|  56.6k|                buffer_offset: 0,
   88|  56.6k|                global_offset: 0,
   89|  56.6k|                global_line: 0,
   90|  56.6k|            },
   91|  56.6k|            previous_position: Position {
   92|  56.6k|                line_start_buffer_offset: 0,
   93|  56.6k|                buffer_offset: 0,
   94|  56.6k|                global_offset: 0,
   95|  56.6k|                global_line: 0,
   96|  56.6k|            },
   97|  56.6k|            is_ending,
   98|  56.6k|            min_buffer_size,
   99|  56.6k|            max_buffer_size,
  100|  56.6k|            is_line_jump_whitespace,
  101|  56.6k|            line_comment_start,
  102|  56.6k|        }
  103|  56.6k|    }
_RNvMs2_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  107|  9.32M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  108|  9.32M|        self.shrink_data();
  109|  9.32M|        self.data.extend_from_slice(other);
  110|  9.32M|    }
_RNvMs2_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  113|  56.6k|    pub fn end(&mut self) {
  114|  56.6k|        self.is_ending = true;
  115|  56.6k|    }
_RNvMs2_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  169|  9.32M|    fn shrink_data(&mut self) {
  170|  9.32M|        if self.position.line_start_buffer_offset > 0 {
  171|   161k|            self.data
  172|   161k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  173|   161k|            self.data
  174|   161k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  175|   161k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  176|   161k|            self.position.line_start_buffer_offset = 0;
  177|   161k|            self.previous_position = self.position;
  178|  9.16M|        }
  179|  9.32M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|  22.8M|    pub fn read_next(
  185|  22.8M|        &mut self,
  186|  22.8M|        options: &R::Options,
  187|  22.8M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|  22.8M|        self.skip_whitespaces_and_comments()?;
  189|  22.7M|        self.previous_position = self.position;
  190|  22.7M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|  22.7M|            &self.data[self.position.buffer_offset..],
  192|  22.7M|            self.is_ending,
  193|  22.7M|            options,
  194|  22.7M|        ) else {
  195|  9.35M|            return if self.is_ending {
  196|   128k|                if self.position.buffer_offset == self.data.len() {
  197|   113k|                    None // We have finished
  198|       |                } else {
  199|  15.4k|                    let (new_line_jumps, new_line_start) =
  200|  15.4k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|  15.4k|                            &self.data[self.position.buffer_offset..],
  202|  15.4k|                        );
  203|  15.4k|                    if new_line_jumps > 0 {
  204|    453|                        self.position.line_start_buffer_offset =
  205|    453|                            self.position.buffer_offset + new_line_start;
  206|  15.0k|                    }
  207|  15.4k|                    self.position.global_offset +=
  208|  15.4k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|  15.4k|                    self.position.buffer_offset = self.data.len();
  210|  15.4k|                    self.position.global_line += new_line_jumps;
  211|  15.4k|                    let new_position = TextPosition {
  212|  15.4k|                        line: self.position.global_line,
  213|  15.4k|                        column: Self::column_from_bytes(
  214|  15.4k|                            &self.data[self.position.line_start_buffer_offset..],
  215|  15.4k|                        ),
  216|  15.4k|                        offset: self.position.global_offset,
  217|  15.4k|                    };
  218|  15.4k|                    let error = TurtleSyntaxError {
  219|  15.4k|                        location: new_position..new_position,
  220|  15.4k|                        message: "Unexpected end of file".into(),
  221|  15.4k|                    };
  222|  15.4k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|  15.4k|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|  9.22M|                None
  227|       |            };
  228|       |        };
  229|  13.4M|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|  13.4M|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|  13.4M|        let (new_line_jumps, new_line_start) =
  239|  13.4M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  13.4M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|  13.4M|            );
  242|  13.4M|        if new_line_jumps > 0 {
  243|  17.5k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|  13.3M|        }
  245|  13.4M|        self.position.buffer_offset += consumed;
  246|  13.4M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|  13.4M|        self.position.global_line += new_line_jumps;
  248|  13.4M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|  13.4M|        }))
  252|  22.8M|    }
_RNCNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE9read_next0Bb_:
  248|  4.28M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|  4.28M|            location: self.location_from_buffer_offset_range(e.location),
  250|  4.28M|            message: e.message,
  251|  4.28M|        }))
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  4.28M|    pub fn location_from_buffer_offset_range(
  255|  4.28M|        &self,
  256|  4.28M|        offset_range: Range<usize>,
  257|  4.28M|    ) -> Range<TextPosition> {
  258|  4.28M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  4.28M|        let (start_extra_line_jumps, start_line_start) =
  260|  4.28M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  4.28M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  4.28M|            );
  263|  4.28M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  6.49k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  4.28M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  4.28M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  4.28M|        let (end_extra_line_jumps, end_line_start) =
  270|  4.28M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  4.28M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  4.28M|            );
  273|  4.28M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  19.0k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  4.27M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  4.28M|        TextPosition {
  279|  4.28M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  4.28M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  4.28M|            offset: self.previous_position.global_offset
  282|  4.28M|                + u64::try_from(offset_range.start).unwrap(),
  283|  4.28M|        }..TextPosition {
  284|  4.28M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  4.28M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  4.28M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  4.28M|        }
  288|  4.28M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|  1.11M|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|  1.11M|        TextPosition {
  292|  1.11M|            line: self.previous_position.global_line,
  293|  1.11M|            column: Self::column_from_bytes(
  294|  1.11M|                &self.data[self.previous_position.line_start_buffer_offset
  295|  1.11M|                    ..self.previous_position.buffer_offset],
  296|  1.11M|            ),
  297|  1.11M|            offset: self.previous_position.global_offset,
  298|  1.11M|        }..TextPosition {
  299|  1.11M|            line: self.position.global_line,
  300|  1.11M|            column: Self::column_from_bytes(
  301|  1.11M|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  302|  1.11M|            ),
  303|  1.11M|            offset: self.position.global_offset,
  304|  1.11M|        }
  305|  1.11M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  307|  1.11M|    pub fn last_token_source(&self) -> Cow<'_, str> {
  308|  1.11M|        String::from_utf8_lossy(
  309|  1.11M|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  310|  1.11M|        )
  311|  1.11M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  9.43M|    pub fn is_end(&self) -> bool {
  314|  9.43M|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  9.43M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|  22.8M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|  22.8M|            self.skip_whitespaces()?;
  321|       |
  322|  22.8M|            let buf = &self.data[self.position.buffer_offset..];
  323|  22.8M|            if let Some(line_comment_start) = self.line_comment_start {
  324|  22.8M|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|   108k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|  30.7k|                        let mut end_position = line_comment_start.len() + end;
  328|  30.7k|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|  24.2k|                            if let Some(c) = buf.get(end_position + 1) {
  331|  5.84k|                                if *c == b'\n' {
  332|      0|                                    end_position += 1;
  333|  5.84k|                                }
  334|  18.3k|                            } else if !self.is_ending {
  335|  18.3k|                                return None; // We need to read more
  336|     15|                            }
  337|  6.47k|                        }
  338|  12.3k|                        let comment_size = end_position + 1;
  339|  12.3k|                        self.position.buffer_offset += comment_size;
  340|  12.3k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|  12.3k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|  12.3k|                        self.position.global_line += 1;
  343|  12.3k|                        continue;
  344|  77.8k|                    }
  345|  77.8k|                    if self.is_ending {
  346|  1.48k|                        self.position.buffer_offset = self.data.len(); // EOF
  347|  1.48k|                        return Some(());
  348|  76.3k|                    }
  349|  76.3k|                    return None; // We need more data
  350|  22.7M|                }
  351|      0|            }
  352|  22.7M|            return Some(());
  353|       |        }
  354|  22.8M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  22.8M|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|  22.8M|        if self.is_line_jump_whitespace {
  358|  22.8M|            let mut i = self.position.buffer_offset;
  359|  23.1M|            while let Some(c) = self.data.get(i) {
  360|  21.4M|                match c {
  361|  90.8k|                    b' ' | b'\t' => {
  362|  90.8k|                        self.position.buffer_offset += 1;
  363|  90.8k|                        self.position.global_offset += 1;
  364|  90.8k|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|  33.5k|                        let mut increment: u8 = 1;
  368|  33.5k|                        if let Some(c) = self.data.get(i + 1) {
  369|  28.2k|                            if *c == b'\n' {
  370|     52|                                increment += 1;
  371|     52|                                i += 1;
  372|  28.2k|                            }
  373|  5.21k|                        } else if !self.is_ending {
  374|  5.08k|                            return None; // We need to read more
  375|    133|                        }
  376|  28.4k|                        self.position.buffer_offset += usize::from(increment);
  377|  28.4k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|  28.4k|                        self.position.global_offset += u64::from(increment);
  379|  28.4k|                        self.position.global_line += 1;
  380|       |                    }
  381|   158k|                    b'\n' => {
  382|   158k|                        self.position.buffer_offset += 1;
  383|   158k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|   158k|                        self.position.global_offset += 1;
  385|   158k|                        self.position.global_line += 1;
  386|   158k|                    }
  387|  21.2M|                    _ => return Some(()),
  388|       |                }
  389|   278k|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|  1.66M|        Some(())
  404|  22.8M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|  22.0M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|  22.0M|        let mut num_of_jumps = 0;
  408|  22.0M|        let mut last_jump_pos = 0;
  409|  22.0M|        let mut previous_cr = 0;
  410|  22.0M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|  92.3k|            if bytes[pos] == b'\r' {
  412|  11.3k|                previous_cr = pos;
  413|  11.3k|                num_of_jumps += 1;
  414|  11.3k|                last_jump_pos = pos + 1;
  415|  11.3k|            } else {
  416|  81.0k|                if previous_cr < pos - 1 {
  417|  50.3k|                    // We count \r\n as a single line jump
  418|  50.3k|                    num_of_jumps += 1;
  419|  50.3k|                }
  420|  81.0k|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|  22.0M|        (num_of_jumps, last_jump_pos)
  424|  22.0M|    }
_RNvMs3_NtNtCs6AqEF9bmAuF_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  426|  18.3M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  427|  18.3M|        match str::from_utf8(bytes) {
  428|  9.72M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  429|  8.65M|            Err(e) => {
  430|  8.65M|                if e.valid_up_to() == 0 {
  431|  1.11M|                    0
  432|       |                } else {
  433|  7.54M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  434|       |                }
  435|       |            }
  436|       |        }
  437|  18.3M|    }

_RNvXNtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|   208k|    fn from(message: S) -> Self {
   41|   208k|        Self {
   42|   208k|            message: message.into(),
   43|   208k|        }
   44|   208k|    }
_RNvXNtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|   910k|    fn from(message: S) -> Self {
   41|   910k|        Self {
   42|   910k|            message: message.into(),
   43|   910k|        }
   44|   910k|    }
_RNvMs_NtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_2n312N3RecognizerE3newB8_:
   57|  56.6k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  56.6k|        Self {
   59|  56.6k|            lexer,
   60|  56.6k|            state: Some(recognizer),
   61|  56.6k|            context,
   62|  56.6k|            results: vec![],
   63|  56.6k|            errors: vec![],
   64|  56.6k|        }
   65|  56.6k|    }
_RNvMs0_NtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE6is_endB9_:
   70|  56.6k|    pub fn is_end(&self) -> bool {
   71|  56.6k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  56.6k|    }
_RNvMs0_NtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE9read_nextB9_:
   74|  15.1M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  24.3M|            if let Some(error) = self.errors.pop() {
   77|  1.11M|                return Some(Err(TurtleSyntaxError {
   78|  1.11M|                    location: self.lexer.last_token_location(),
   79|  1.11M|                    message: error
   80|  1.11M|                        .message
   81|  1.11M|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|  1.11M|                }));
   83|  23.1M|            }
   84|  23.1M|            if let Some(result) = self.results.pop() {
   85|   328k|                return Some(Ok(result));
   86|  22.8M|            }
   87|  22.8M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|  13.4M|                match result {
   89|  9.11M|                    Ok(token) => {
   90|  9.11M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  9.11M|                        });
   98|  9.11M|                        continue;
   99|       |                    }
  100|  4.30M|                    Err(e) => {
  101|  4.30M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  4.30M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  9.43M|            }
  106|  9.43M|            if self.lexer.is_end() {
  107|   113k|                self.state.take()?.recognize_end(
  108|  56.6k|                    &mut self.context,
  109|  56.6k|                    &mut self.results,
  110|  56.6k|                    &mut self.errors,
  111|  56.6k|                )
  112|       |            } else {
  113|  9.32M|                return None;
  114|       |            }
  115|       |        }
  116|  15.1M|    }
_RNCNvMs0_NtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_2n312N3RecognizerE9read_next0Bb_:
   90|  9.11M|                        self.state = self.state.take().map(|state| {
   91|  9.11M|                            state.recognize_next(
   92|  9.11M|                                token,
   93|  9.11M|                                &mut self.context,
   94|  9.11M|                                &mut self.results,
   95|  9.11M|                                &mut self.errors,
   96|  9.11M|                            )
   97|  9.11M|                        });
_RNvMs1_NtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE3endB9_:
  121|  56.6k|    pub fn end(&mut self) {
  122|  56.6k|        self.lexer.end()
  123|  56.6k|    }
_RNvMs1_NtNtCs6AqEF9bmAuF_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE17extend_from_sliceB9_:
  125|  9.32M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  9.32M|        self.lexer.extend_from_slice(other)
  127|  9.32M|    }


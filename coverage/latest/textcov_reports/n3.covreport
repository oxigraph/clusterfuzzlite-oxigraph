_RINvMNtCs8REU2L9j67q_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    776|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    776|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    776|        let mut val = self.0.load(Relaxed);
   37|    776|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    775|        }
   41|    776|        val
   42|    776|    }
_RINvMs_NtCs8REU2L9j67q_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    776|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    776|        self.0.unsync_init(|| init() as usize) != 0
   55|    776|    }
_RNCINvMs_NtCs8REU2L9j67q_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs8REU2L9j67q_9getrandom16getrandom_uninitCs8qzC7aBl1xk_9rand_core:
  396|    776|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|    776|    if !dest.is_empty() {
  398|    776|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|    776|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|    776|}
_RNvCs8REU2L9j67q_9getrandom9getrandomCs8qzC7aBl1xk_9rand_core:
  366|    776|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|    776|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|    776|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|    776|    // `dest`.
  370|    776|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|    776|    Ok(())
  372|    776|}

_RNvNtCs8REU2L9j67q_9getrandom3imp15getrandom_inner:
    9|    776|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    776|    // getrandom(2) was introduced in Linux 3.17
   11|    776|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    776|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    776|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|    776|}
_RNvNtCs8REU2L9j67q_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCs8REU2L9j67q_9getrandom4util19slice_as_uninit_muthECs8qzC7aBl1xk_9rand_core:
   32|    776|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    776|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    776|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    776|}
_RINvNtCs8REU2L9j67q_9getrandom4util21slice_assume_init_muthECs8qzC7aBl1xk_9rand_core:
    8|    776|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    776|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    776|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    776|}

_RINvNtCs8REU2L9j67q_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|    776|pub fn sys_fill_exact(
   56|    776|    mut buf: &mut [MaybeUninit<u8>],
   57|    776|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|    776|) -> Result<(), Error> {
   59|  1.55k|    while !buf.is_empty() {
   60|    776|        let res = sys_fill(buf);
   61|    776|        match res {
   62|    776|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|    776|    Ok(())
   77|    776|}
_RNvNtCs8REU2L9j67q_9getrandom9util_libc17getrandom_syscall:
  153|    777|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|    777|    unsafe {
  155|    777|        libc::syscall(
  156|    777|            libc::SYS_getrandom,
  157|    777|            buf.as_mut_ptr() as *mut libc::c_void,
  158|    777|            buf.len(),
  159|    777|            0,
  160|    777|        ) as libc::ssize_t
  161|    777|    }
  162|    777|}

rust_fuzzer_test_input:
  209|  26.2k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  26.2k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  26.2k|                }
  223|  26.2k|
  224|  26.2k|                __libfuzzer_sys_run(bytes);
  225|  26.2k|                0
  226|       |            }
_RNvNvCs1y8UufSaGCW_2n31__19___libfuzzer_sys_run:
  241|  26.2k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  26.2k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  26.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  26.2k|    });
   63|  26.2k|
   64|  26.2k|    match test_input {
   65|  26.2k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  26.2k|}
_RNCNvCs7ByzrXKUO6r_13libfuzzer_sys15test_input_wrap0B3_:
   59|  26.2k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  26.2k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  26.2k|        rust_fuzzer_test_input(data_slice)
   62|  26.2k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs2AU8mwnS1zT_5oxttl:
 1044|  11.2M|    pub(crate) unsafe fn next(
 1045|  11.2M|        &mut self,
 1046|  11.2M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  11.2M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  11.2M|        let found = find_raw(self.start, self.end)?;
 1057|  46.1k|        let result = found.distance(self.original_start);
 1058|  46.1k|        self.start = found.add(1);
 1059|  46.1k|        Some(result)
 1060|  11.2M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs2AU8mwnS1zT_5oxttl:
 1125|  33.3k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  33.3k|    haystack: &[u8],
 1127|  33.3k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  33.3k|) -> Option<usize> {
 1129|  33.3k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  33.3k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  33.3k|    // a &[u8].
 1132|  33.3k|    let start = haystack.as_ptr();
 1133|  33.3k|    let end = start.add(haystack.len());
 1134|  33.3k|    let found = find_raw(start, end)?;
 1135|  8.64k|    Some(found.distance(start))
 1136|  33.3k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECs2AU8mwnS1zT_5oxttl:
 1125|  1.54M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.54M|    haystack: &[u8],
 1127|  1.54M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.54M|) -> Option<usize> {
 1129|  1.54M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.54M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.54M|    // a &[u8].
 1132|  1.54M|    let start = haystack.as_ptr();
 1133|  1.54M|    let end = start.add(haystack.len());
 1134|  1.54M|    let found = find_raw(start, end)?;
 1135|   708k|    Some(found.distance(start))
 1136|  1.54M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  11.2M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  11.2M|        Iter {
 1029|  11.2M|            original_start: haystack.as_ptr(),
 1030|  11.2M|            start: haystack.as_ptr(),
 1031|  11.2M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  11.2M|            haystack: core::marker::PhantomData,
 1033|  11.2M|        }
 1034|  11.2M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  61.0k|    pub(crate) fn needle1(&self) -> u8 {
  118|  61.0k|        self.s1
  119|  61.0k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  33.3k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  33.3k|        One { s1: needle, v1: V::splat(needle) }
  113|  33.3k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  33.3k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  33.3k|        One { s1: needle, v1: V::splat(needle) }
  113|  33.3k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  6.63k|    pub(crate) unsafe fn find_raw(
  144|  6.63k|        &self,
  145|  6.63k|        start: *const u8,
  146|  6.63k|        end: *const u8,
  147|  6.63k|    ) -> Option<*const u8> {
  148|  6.63k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  6.63k|        // need to move up to using a u64 for the masks used below. Currently
  150|  6.63k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  6.63k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  6.63k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.63k|        let topos = V::Mask::first_offset;
  155|  6.63k|        let len = end.distance(start);
  156|  6.63k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.63k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.66k|            return Some(cur);
  167|  4.97k|        }
  168|  4.97k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  4.97k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  4.97k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  4.97k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  4.97k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  7.19k|        while cur <= end.sub(V::BYTES) {
  213|  2.59k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.59k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    364|                return Some(cur);
  216|  2.22k|            }
  217|  2.22k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.60k|        if cur < end {
  224|  3.90k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  3.90k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  3.90k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  3.90k|            return self.search_chunk(cur, topos);
  228|    699|        }
  229|    699|        None
  230|  6.63k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  17.5k|    pub(crate) unsafe fn find_raw(
  144|  17.5k|        &self,
  145|  17.5k|        start: *const u8,
  146|  17.5k|        end: *const u8,
  147|  17.5k|    ) -> Option<*const u8> {
  148|  17.5k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  17.5k|        // need to move up to using a u64 for the masks used below. Currently
  150|  17.5k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  17.5k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  17.5k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  17.5k|        let topos = V::Mask::first_offset;
  155|  17.5k|        let len = end.distance(start);
  156|  17.5k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  17.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  2.37k|            return Some(cur);
  167|  15.1k|        }
  168|  15.1k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  15.1k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  15.1k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  15.1k|        if len >= Self::LOOP_SIZE {
  172|  2.66k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  1.33k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  1.33k|                let a = V::load_aligned(cur);
  176|  1.33k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  1.33k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  1.33k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  1.33k|                let eqa = self.v1.cmpeq(a);
  180|  1.33k|                let eqb = self.v1.cmpeq(b);
  181|  1.33k|                let eqc = self.v1.cmpeq(c);
  182|  1.33k|                let eqd = self.v1.cmpeq(d);
  183|  1.33k|                let or1 = eqa.or(eqb);
  184|  1.33k|                let or2 = eqc.or(eqd);
  185|  1.33k|                let or3 = or1.or(or2);
  186|  1.33k|                if or3.movemask_will_have_non_zero() {
  187|    506|                    let mask = eqa.movemask();
  188|    506|                    if mask.has_non_zero() {
  189|     46|                        return Some(cur.add(topos(mask)));
  190|    460|                    }
  191|    460|
  192|    460|                    let mask = eqb.movemask();
  193|    460|                    if mask.has_non_zero() {
  194|    163|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    297|                    }
  196|    297|
  197|    297|                    let mask = eqc.movemask();
  198|    297|                    if mask.has_non_zero() {
  199|    229|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     68|                    }
  201|     68|
  202|     68|                    let mask = eqd.movemask();
  203|     68|                    debug_assert!(mask.has_non_zero());
  204|     68|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    824|                }
  206|    824|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  13.3k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  26.4k|        while cur <= end.sub(V::BYTES) {
  213|  12.3k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  12.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    580|                return Some(cur);
  216|  11.7k|            }
  217|  11.7k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  14.0k|        if cur < end {
  224|  13.1k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  13.1k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  13.1k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  13.1k|            return self.search_chunk(cur, topos);
  228|    933|        }
  229|    933|        None
  230|  17.5k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  13.1k|    unsafe fn search_chunk(
  417|  13.1k|        &self,
  418|  13.1k|        cur: *const u8,
  419|  13.1k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  13.1k|    ) -> Option<*const u8> {
  421|  13.1k|        let chunk = V::load_unaligned(cur);
  422|  13.1k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  13.1k|        if mask.has_non_zero() {
  424|  2.06k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  11.0k|            None
  427|       |        }
  428|  13.1k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  43.0k|    unsafe fn search_chunk(
  417|  43.0k|        &self,
  418|  43.0k|        cur: *const u8,
  419|  43.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  43.0k|    ) -> Option<*const u8> {
  421|  43.0k|        let chunk = V::load_unaligned(cur);
  422|  43.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  43.0k|        if mask.has_non_zero() {
  424|  3.10k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  39.9k|            None
  427|       |        }
  428|  43.0k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  12.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  12.8M|        Two {
  452|  12.8M|            s1: needle1,
  453|  12.8M|            s2: needle2,
  454|  12.8M|            v1: V::splat(needle1),
  455|  12.8M|            v2: V::splat(needle2),
  456|  12.8M|        }
  457|  12.8M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  12.8M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  12.8M|        Two {
  452|  12.8M|            s1: needle1,
  453|  12.8M|            s2: needle2,
  454|  12.8M|            v1: V::splat(needle1),
  455|  12.8M|            v2: V::splat(needle2),
  456|  12.8M|        }
  457|  12.8M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  21.1M|    pub(crate) fn needle1(&self) -> u8 {
  462|  21.1M|        self.s1
  463|  21.1M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  20.8M|    pub(crate) fn needle2(&self) -> u8 {
  468|  20.8M|        self.s2
  469|  20.8M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   266k|    pub(crate) unsafe fn find_raw(
  494|   266k|        &self,
  495|   266k|        start: *const u8,
  496|   266k|        end: *const u8,
  497|   266k|    ) -> Option<*const u8> {
  498|   266k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   266k|        // need to move up to using a u64 for the masks used below. Currently
  500|   266k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   266k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   266k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   266k|        let topos = V::Mask::first_offset;
  505|   266k|        let len = end.distance(start);
  506|   266k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   266k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   124k|            return Some(cur);
  517|   141k|        }
  518|   141k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   141k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   141k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   141k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   141k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   186k|        while cur <= end.sub(V::BYTES) {
  551|  48.9k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  48.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.98k|                return Some(cur);
  554|  45.0k|            }
  555|  45.0k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   137k|        if cur < end {
  562|   129k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   129k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   129k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   129k|            return self.search_chunk(cur, topos);
  566|  7.87k|        }
  567|  7.87k|        None
  568|   266k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   395k|    pub(crate) unsafe fn find_raw(
  494|   395k|        &self,
  495|   395k|        start: *const u8,
  496|   395k|        end: *const u8,
  497|   395k|    ) -> Option<*const u8> {
  498|   395k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   395k|        // need to move up to using a u64 for the masks used below. Currently
  500|   395k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   395k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   395k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   395k|        let topos = V::Mask::first_offset;
  505|   395k|        let len = end.distance(start);
  506|   395k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   395k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   171k|            return Some(cur);
  517|   223k|        }
  518|   223k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   223k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   223k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   223k|        if len >= Self::LOOP_SIZE {
  522|  1.72M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  1.55M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  1.55M|                let a = V::load_aligned(cur);
  526|  1.55M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  1.55M|                let eqa1 = self.v1.cmpeq(a);
  528|  1.55M|                let eqb1 = self.v1.cmpeq(b);
  529|  1.55M|                let eqa2 = self.v2.cmpeq(a);
  530|  1.55M|                let eqb2 = self.v2.cmpeq(b);
  531|  1.55M|                let or1 = eqa1.or(eqb1);
  532|  1.55M|                let or2 = eqa2.or(eqb2);
  533|  1.55M|                let or3 = or1.or(or2);
  534|  1.55M|                if or3.movemask_will_have_non_zero() {
  535|  8.90k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  8.90k|                    if mask.has_non_zero() {
  537|  4.98k|                        return Some(cur.add(topos(mask)));
  538|  3.91k|                    }
  539|  3.91k|
  540|  3.91k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  3.91k|                    debug_assert!(mask.has_non_zero());
  542|  3.91k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.54M|                }
  544|  1.54M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  48.1k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   310k|        while cur <= end.sub(V::BYTES) {
  551|   101k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   101k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  5.33k|                return Some(cur);
  554|  96.4k|            }
  555|  96.4k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   209k|        if cur < end {
  562|   202k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   202k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   202k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   202k|            return self.search_chunk(cur, topos);
  566|  6.83k|        }
  567|  6.83k|        None
  568|   395k|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   444k|    unsafe fn search_chunk(
  671|   444k|        &self,
  672|   444k|        cur: *const u8,
  673|   444k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   444k|    ) -> Option<*const u8> {
  675|   444k|        let chunk = V::load_unaligned(cur);
  676|   444k|        let eq1 = self.v1.cmpeq(chunk);
  677|   444k|        let eq2 = self.v2.cmpeq(chunk);
  678|   444k|        let mask = eq1.or(eq2).movemask();
  679|   444k|        if mask.has_non_zero() {
  680|   141k|            let mask1 = eq1.movemask();
  681|   141k|            let mask2 = eq2.movemask();
  682|   141k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   303k|            None
  685|       |        }
  686|   444k|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   699k|    unsafe fn search_chunk(
  671|   699k|        &self,
  672|   699k|        cur: *const u8,
  673|   699k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   699k|    ) -> Option<*const u8> {
  675|   699k|        let chunk = V::load_unaligned(cur);
  676|   699k|        let eq1 = self.v1.cmpeq(chunk);
  677|   699k|        let eq2 = self.v2.cmpeq(chunk);
  678|   699k|        let mask = eq1.or(eq2).movemask();
  679|   699k|        if mask.has_non_zero() {
  680|   202k|            let mask1 = eq1.movemask();
  681|   202k|            let mask2 = eq2.movemask();
  682|   202k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   496k|            None
  685|       |        }
  686|   699k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  8.23k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  8.23k|    start: *const u8,
 1150|  8.23k|    end: *const u8,
 1151|  8.23k|    confirm: F,
 1152|  8.23k|) -> Option<*const u8> {
 1153|  8.23k|    debug_assert!(start <= end);
 1154|  8.23k|    let mut ptr = start;
 1155|  66.2k|    while ptr < end {
 1156|  61.0k|        if confirm(*ptr) {
 1157|  2.96k|            return Some(ptr);
 1158|  58.0k|        }
 1159|  58.0k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  5.27k|    None
 1162|  8.23k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  10.2M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  10.2M|    start: *const u8,
 1150|  10.2M|    end: *const u8,
 1151|  10.2M|    confirm: F,
 1152|  10.2M|) -> Option<*const u8> {
 1153|  10.2M|    debug_assert!(start <= end);
 1154|  10.2M|    let mut ptr = start;
 1155|  30.9M|    while ptr < end {
 1156|  21.1M|        if confirm(*ptr) {
 1157|   401k|            return Some(ptr);
 1158|  20.7M|        }
 1159|  20.7M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  9.79M|    None
 1162|  10.2M|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  33.3k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  33.3k|        One {
   71|  33.3k|            sse2: generic::One::new(needle),
   72|  33.3k|            avx2: generic::One::new(needle),
   73|  33.3k|        }
   74|  33.3k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  33.3k|    pub unsafe fn find_raw(
  180|  33.3k|        &self,
  181|  33.3k|        start: *const u8,
  182|  33.3k|        end: *const u8,
  183|  33.3k|    ) -> Option<*const u8> {
  184|  33.3k|        if start >= end {
  185|    871|            return None;
  186|  32.4k|        }
  187|  32.4k|        let len = end.distance(start);
  188|  32.4k|        if len < __m256i::BYTES {
  189|  14.8k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  8.23k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  8.23k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  6.63k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  17.5k|        }
  201|  17.5k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  17.5k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  17.5k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  17.5k|        // responsibility.
  205|  17.5k|        //
  206|  17.5k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  17.5k|        // means we'd have to annotate this routine with `target_feature`.
  208|  17.5k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  17.5k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  17.5k|        // The real problem is that a routine with a `target_feature`
  211|  17.5k|        // annotation generally can't be inlined into caller code unless
  212|  17.5k|        // the caller code has the same target feature annotations. Namely,
  213|  17.5k|        // the common case (at time of writing) is for calling code to not
  214|  17.5k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  17.5k|        // `target_feature` on this routine, it can be inlined which will
  216|  17.5k|        // handle some of the short-haystack cases above without touching the
  217|  17.5k|        // architecture specific code.
  218|  17.5k|        self.find_raw_avx2(start, end)
  219|  33.3k|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  61.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  61.0k|                    b == self.sse2.needle1()
  194|  61.0k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  6.63k|    unsafe fn find_raw_sse2(
  337|  6.63k|        &self,
  338|  6.63k|        start: *const u8,
  339|  6.63k|        end: *const u8,
  340|  6.63k|    ) -> Option<*const u8> {
  341|  6.63k|        self.sse2.find_raw(start, end)
  342|  6.63k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  17.5k|    unsafe fn find_raw_avx2(
  397|  17.5k|        &self,
  398|  17.5k|        start: *const u8,
  399|  17.5k|        end: *const u8,
  400|  17.5k|    ) -> Option<*const u8> {
  401|  17.5k|        self.avx2.find_raw(start, end)
  402|  17.5k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  12.8M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  12.8M|        Two {
  558|  12.8M|            sse2: generic::Two::new(needle1, needle2),
  559|  12.8M|            avx2: generic::Two::new(needle1, needle2),
  560|  12.8M|        }
  561|  12.8M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  12.8M|    pub unsafe fn find_raw(
  655|  12.8M|        &self,
  656|  12.8M|        start: *const u8,
  657|  12.8M|        end: *const u8,
  658|  12.8M|    ) -> Option<*const u8> {
  659|  12.8M|        if start >= end {
  660|  1.97M|            return None;
  661|  10.8M|        }
  662|  10.8M|        let len = end.distance(start);
  663|  10.8M|        if len < __m256i::BYTES {
  664|  10.4M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  10.2M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  10.2M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   266k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   395k|        }
  676|   395k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   395k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   395k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   395k|        // responsibility.
  680|   395k|        //
  681|   395k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   395k|        // means we'd have to annotate this routine with `target_feature`.
  683|   395k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   395k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   395k|        // The real problem is that a routine with a `target_feature`
  686|   395k|        // annotation generally can't be inlined into caller code unless
  687|   395k|        // the caller code has the same target feature annotations. Namely,
  688|   395k|        // the common case (at time of writing) is for calling code to not
  689|   395k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   395k|        // `target_feature` on this routine, it can be inlined which will
  691|   395k|        // handle some of the short-haystack cases above without touching the
  692|   395k|        // architecture specific code.
  693|   395k|        self.find_raw_avx2(start, end)
  694|  12.8M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  21.1M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  21.1M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  21.1M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   266k|    unsafe fn find_raw_sse2(
  765|   266k|        &self,
  766|   266k|        start: *const u8,
  767|   266k|        end: *const u8,
  768|   266k|    ) -> Option<*const u8> {
  769|   266k|        self.sse2.find_raw(start, end)
  770|   266k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   395k|    unsafe fn find_raw_avx2(
  805|   395k|        &self,
  806|   395k|        start: *const u8,
  807|   395k|        end: *const u8,
  808|   395k|    ) -> Option<*const u8> {
  809|   395k|        self.avx2.find_raw(start, end)
  810|   395k|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  12.8M|pub(crate) fn memchr2_raw(
  221|  12.8M|    n1: u8,
  222|  12.8M|    n2: u8,
  223|  12.8M|    start: *const u8,
  224|  12.8M|    end: *const u8,
  225|  12.8M|) -> Option<*const u8> {
  226|  12.8M|    // SAFETY: We provide a valid function pointer type.
  227|  12.8M|    unsafe_ifunc!(
  228|  12.8M|        Two,
  229|  12.8M|        find_raw,
  230|  12.8M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  12.8M|        Option<*const u8>,
  232|  12.8M|        start,
  233|  12.8M|        end,
  234|  12.8M|        n1,
  235|  12.8M|        n2
  236|  12.8M|    )
  237|  12.8M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  33.3k|pub(crate) fn memchr_raw(
  175|  33.3k|    n1: u8,
  176|  33.3k|    start: *const u8,
  177|  33.3k|    end: *const u8,
  178|  33.3k|) -> Option<*const u8> {
  179|  33.3k|    // SAFETY: We provide a valid function pointer type.
  180|  33.3k|    unsafe_ifunc!(
  181|  33.3k|        One,
  182|  33.3k|        find_raw,
  183|  33.3k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  33.3k|        Option<*const u8>,
  185|  33.3k|        start,
  186|  33.3k|        end,
  187|  33.3k|        n1
  188|  33.3k|    )
  189|  33.3k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  33.3k|        unsafe fn find_avx2(
   79|  33.3k|            $($needle: u8),+,
   80|  33.3k|            $hay_start: *const u8,
   81|  33.3k|            $hay_end: *const u8,
   82|  33.3k|        ) -> $retty {
   83|  33.3k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  33.3k|            $memchrty::new_unchecked($($needle),+)
   85|  33.3k|                .$memchrfind($hay_start, $hay_end)
   86|  33.3k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  12.8M|        unsafe fn find_avx2(
   79|  12.8M|            $($needle: u8),+,
   80|  12.8M|            $hay_start: *const u8,
   81|  12.8M|            $hay_end: *const u8,
   82|  12.8M|        ) -> $retty {
   83|  12.8M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  12.8M|            $memchrty::new_unchecked($($needle),+)
   85|  12.8M|                .$memchrfind($hay_start, $hay_end)
   86|  12.8M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  12.6M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  12.6M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  12.6M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  12.6M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   384k|    fn as_usize(self) -> usize {
   27|   384k|        self as usize
   28|   384k|    }

_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs2AU8mwnS1zT_5oxttl:
  377|  11.2M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  11.2M|        Memchr2 {
  379|  11.2M|            needle1,
  380|  11.2M|            needle2,
  381|  11.2M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  11.2M|        }
  383|  11.2M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCs2AU8mwnS1zT_5oxttl:
  574|  12.8M|unsafe fn memchr2_raw(
  575|  12.8M|    needle1: u8,
  576|  12.8M|    needle2: u8,
  577|  12.8M|    start: *const u8,
  578|  12.8M|    end: *const u8,
  579|  12.8M|) -> Option<*const u8> {
  580|  12.8M|    #[cfg(target_arch = "x86_64")]
  581|  12.8M|    {
  582|  12.8M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  12.8M|    }
  584|  12.8M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  12.8M|    {
  586|  12.8M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  12.8M|    }
  588|  12.8M|    #[cfg(target_arch = "aarch64")]
  589|  12.8M|    {
  590|  12.8M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  12.8M|    }
  592|  12.8M|    #[cfg(not(any(
  593|  12.8M|        target_arch = "x86_64",
  594|  12.8M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  12.8M|        target_arch = "aarch64"
  596|  12.8M|    )))]
  597|  12.8M|    {
  598|  12.8M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  12.8M|            .find_raw(start, end)
  600|  12.8M|    }
  601|  12.8M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs2AU8mwnS1zT_5oxttl:
  232|  11.2M|pub fn memchr2_iter<'h>(
  233|  11.2M|    needle1: u8,
  234|  11.2M|    needle2: u8,
  235|  11.2M|    haystack: &'h [u8],
  236|  11.2M|) -> Memchr2<'h> {
  237|  11.2M|    Memchr2::new(needle1, needle2, haystack)
  238|  11.2M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs2AU8mwnS1zT_5oxttl:
   27|  33.3k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  33.3k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  33.3k|    // pointer between start and end.
   30|  33.3k|    unsafe {
   31|  33.3k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  33.3k|        })
   34|  33.3k|    }
   35|  33.3k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr7memchr2Cs2AU8mwnS1zT_5oxttl:
   92|  1.54M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  1.54M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  1.54M|    // pointer between start and end.
   95|  1.54M|    unsafe {
   96|  1.54M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  1.54M|        })
   99|  1.54M|    }
  100|  1.54M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs2AU8mwnS1zT_5oxttl:
  390|  11.2M|    fn next(&mut self) -> Option<usize> {
  391|  11.2M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  11.2M|        // pointers returns will fall within the start and end bounds, and this
  393|  11.2M|        // upholds the safety contract of `self.it.next`.
  394|  11.2M|        unsafe {
  395|  11.2M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  11.2M|        }
  397|  11.2M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr7memchr20Cs2AU8mwnS1zT_5oxttl:
   96|  1.54M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  1.54M|            memchr2_raw(needle1, needle2, start, end)
   98|  1.54M|        })
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs2AU8mwnS1zT_5oxttl:
  395|  11.2M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  33.3k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  33.3k|            memchr_raw(needle, start, end)
   33|  33.3k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  33.3k|unsafe fn memchr_raw(
  505|  33.3k|    needle: u8,
  506|  33.3k|    start: *const u8,
  507|  33.3k|    end: *const u8,
  508|  33.3k|) -> Option<*const u8> {
  509|  33.3k|    #[cfg(target_arch = "x86_64")]
  510|  33.3k|    {
  511|  33.3k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  33.3k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  33.3k|        // time. This function also handles using a fallback if neither AVX2
  514|  33.3k|        // nor SSE2 (unusual) are available.
  515|  33.3k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  33.3k|    }
  517|  33.3k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  33.3k|    {
  519|  33.3k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  33.3k|    }
  521|  33.3k|    #[cfg(target_arch = "aarch64")]
  522|  33.3k|    {
  523|  33.3k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  33.3k|    }
  525|  33.3k|    #[cfg(not(any(
  526|  33.3k|        target_arch = "x86_64",
  527|  33.3k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  33.3k|        target_arch = "aarch64"
  529|  33.3k|    )))]
  530|  33.3k|    {
  531|  33.3k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  33.3k|    }
  533|  33.3k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|   358k|    fn get_for_offset(self) -> u32 {
  127|   358k|        #[cfg(target_endian = "big")]
  128|   358k|        {
  129|   358k|            self.0.swap_bytes()
  130|   358k|        }
  131|   358k|        #[cfg(target_endian = "little")]
  132|   358k|        {
  133|   358k|            self.0
  134|   358k|        }
  135|   358k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|   358k|    fn first_offset(self) -> usize {
  172|   358k|        // We are dealing with little endian here (and if we aren't, we swap
  173|   358k|        // the bytes so we are in practice), where the most significant byte
  174|   358k|        // is at a higher address. That means the least significant bit that
  175|   358k|        // is set corresponds to the position of our first matching byte.
  176|   358k|        // That position corresponds to the number of zeros after the least
  177|   358k|        // significant bit.
  178|   358k|        self.get_for_offset().trailing_zeros() as usize
  179|   358k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  2.76M|    fn has_non_zero(self) -> bool {
  147|  2.76M|        self.0 != 0
  148|  2.76M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|   457k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|   457k|            _mm_loadu_si128(data as *const __m128i)
  219|   457k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|   740k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|   740k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|   740k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|   902k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|   902k|            _mm_cmpeq_epi8(self, vector2)
  229|   902k|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  1.55M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  1.55M|        self.movemask().has_non_zero()
   65|  1.55M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|   742k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|   742k|            _mm256_loadu_si256(data as *const __m256i)
  268|   742k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  2.73M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  2.73M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  2.73M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  7.67M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  7.67M|            _mm256_cmpeq_epi8(self, vector2)
  278|  7.67M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|   356k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|   356k|        SensibleMoveMask(self.0 | other.0)
  163|   356k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  25.7M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  25.7M|            _mm_set1_epi8(byte as i8)
  209|  25.7M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|   444k|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|   444k|            _mm_or_si128(self, vector2)
  239|   444k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  25.7M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  25.7M|            _mm256_set1_epi8(byte as i8)
  258|  25.7M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  3.12M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  3.12M|            _mm256_load_si256(data as *const __m256i)
  263|  3.12M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  5.37M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  5.37M|            _mm256_or_si256(self, vector2)
  288|  5.37M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs7ByzrXKUO6r_13libfuzzer_sys:
   49|  26.2k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  26.2k|        // An `Acquire` load is enough because that makes all the initialization
   51|  26.2k|        // operations visible to us, and, this being a fast path, weaker
   52|  26.2k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  26.2k|        // `SeqCst` operations on the slow path.
   54|  26.2k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  26.2k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs7ByzrXKUO6r_13libfuzzer_sys:
  963|  26.2k|        pub fn get(&self) -> Option<&T> {
  964|  26.2k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  26.2k|                None
  969|       |            }
  970|  26.2k|        }

_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE10into_innerCs2AU8mwnS1zT_5oxttl:
   62|   156k|    pub fn into_inner(self) -> T {
   63|   156k|        self.tag
   64|   156k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE5parseCs2AU8mwnS1zT_5oxttl:
   49|   189k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   189k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   156k|        Ok(Self { tag, positions })
   52|   189k|    }
_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECslyQBdJh0KVU_5oxrdf:
  632|   181k|fn parse_langtag(
  633|   181k|    input: &str,
  634|   181k|    output: &mut impl OutputBuffer,
  635|   181k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   181k|    #[derive(PartialEq, Eq)]
  637|   181k|    enum State {
  638|   181k|        Start,
  639|   181k|        AfterLanguage,
  640|   181k|        AfterExtLang,
  641|   181k|        AfterScript,
  642|   181k|        AfterRegion,
  643|   181k|        InExtension { expected: bool },
  644|   181k|        InPrivateUse { expected: bool },
  645|   181k|    }
  646|   181k|
  647|   181k|    let mut state = State::Start;
  648|   181k|    let mut language_end = 0;
  649|   181k|    let mut extlang_end = 0;
  650|   181k|    let mut script_end = 0;
  651|   181k|    let mut region_end = 0;
  652|   181k|    let mut variant_end = 0;
  653|   181k|    let mut extension_end = 0;
  654|   181k|    let mut extlangs_count = 0;
  655|   235k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   235k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|   235k|        }
  661|   235k|        if subtag.len() > 8 {
  662|  1.52k|            return Err(LanguageTagParseError {
  663|  1.52k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  1.52k|            });
  665|   234k|        }
  666|   234k|        if state == State::Start {
  667|       |            // Primary language
  668|   180k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  16.5k|                return Err(LanguageTagParseError {
  670|  16.5k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  16.5k|                });
  672|   163k|            }
  673|   163k|            language_end = end;
  674|   163k|            output.extend(to_lowercase(subtag));
  675|   163k|            if subtag.len() < 4 {
  676|  40.7k|                // extlangs are only allowed for short language tags
  677|  40.7k|                state = State::AfterLanguage;
  678|   122k|            } else {
  679|   122k|                state = State::AfterExtLang;
  680|   122k|            }
  681|  54.0k|        } else if let State::InPrivateUse { .. } = state {
  682|  3.24k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  3.24k|            }
  687|  3.24k|            output.push('-');
  688|  3.24k|            output.extend(to_lowercase(subtag));
  689|  3.24k|            state = State::InPrivateUse { expected: false };
  690|  50.8k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  5.39k|            if let State::InExtension { expected: true } = state {
  693|  2.42k|                return Err(LanguageTagParseError {
  694|  2.42k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  2.42k|                });
  696|  2.96k|            }
  697|  2.96k|            output.push('-');
  698|  2.96k|            output.push('x');
  699|  2.96k|            state = State::InPrivateUse { expected: true };
  700|  45.4k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  15.1k|            if let State::InExtension { expected: true } = state {
  703|  3.51k|                return Err(LanguageTagParseError {
  704|  3.51k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  3.51k|                });
  706|  11.6k|            }
  707|  11.6k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  11.6k|            output.push('-');
  709|  11.6k|            output.push(extension_tag);
  710|  11.6k|            state = State::InExtension { expected: true };
  711|  30.2k|        } else if let State::InExtension { .. } = state {
  712|  4.58k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  4.58k|            }
  717|  4.58k|            extension_end = end;
  718|  4.58k|            output.push('-');
  719|  4.58k|            output.extend(to_lowercase(subtag));
  720|  4.58k|            state = State::InExtension { expected: false };
  721|  25.7k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  6.84k|            extlangs_count += 1;
  723|  6.84k|            if extlangs_count > 3 {
  724|    768|                return Err(LanguageTagParseError {
  725|    768|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|    768|                });
  727|  6.07k|            }
  728|  6.07k|            // valid extlangs
  729|  6.07k|            extlang_end = end;
  730|  6.07k|            output.push('-');
  731|  6.07k|            output.extend(to_lowercase(subtag));
  732|  18.8k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  12.4k|            && subtag.len() == 4
  734|  5.59k|            && is_alphabetic(subtag)
  735|  5.59k|        {
  736|  5.59k|            // Script
  737|  5.59k|            script_end = end;
  738|  5.59k|            output.push('-');
  739|  5.59k|            output.extend(to_uppercase_first(subtag));
  740|  5.59k|            state = State::AfterScript;
  741|  13.2k|        } else if (state == State::AfterLanguage
  742|  9.26k|            || state == State::AfterExtLang
  743|  6.44k|            || state == State::AfterScript)
  744|  11.0k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  6.17k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  4.87k|        {
  747|  4.87k|            // Region
  748|  4.87k|            region_end = end;
  749|  4.87k|            output.push('-');
  750|  4.87k|            output.extend(to_uppercase(subtag));
  751|  4.87k|            state = State::AfterRegion;
  752|  8.39k|        } else if (state == State::AfterLanguage
  753|  7.07k|            || state == State::AfterExtLang
  754|  6.30k|            || state == State::AfterScript
  755|  2.21k|            || state == State::AfterRegion)
  756|  8.39k|            && is_alphanumeric(subtag)
  757|  8.39k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  4.66k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  3.72k|        {
  760|  3.72k|            // Variant
  761|  3.72k|            variant_end = end;
  762|  3.72k|            output.push('-');
  763|  3.72k|            output.extend(to_lowercase(subtag));
  764|  3.72k|            state = State::AfterRegion;
  765|  3.72k|        } else {
  766|  4.66k|            return Err(LanguageTagParseError {
  767|  4.66k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  4.66k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   152k|    if let State::InExtension { expected: true } = state {
  774|  3.07k|        return Err(LanguageTagParseError {
  775|  3.07k|            kind: TagParseErrorKind::EmptyExtension,
  776|  3.07k|        });
  777|   148k|    }
  778|   148k|    if let State::InPrivateUse { expected: true } = state {
  779|    673|        return Err(LanguageTagParseError {
  780|    673|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    673|        });
  782|   148k|    }
  783|   148k|
  784|   148k|    //We make sure we have not skipped anyone
  785|   148k|    if extlang_end < language_end {
  786|   145k|        extlang_end = language_end;
  787|   145k|    }
  788|   148k|    if script_end < extlang_end {
  789|   145k|        script_end = extlang_end;
  790|   145k|    }
  791|   148k|    if region_end < script_end {
  792|   145k|        region_end = script_end;
  793|   145k|    }
  794|   148k|    if variant_end < region_end {
  795|   145k|        variant_end = region_end;
  796|   145k|    }
  797|   148k|    if extension_end < variant_end {
  798|   145k|        extension_end = variant_end;
  799|   145k|    }
  800|       |
  801|   148k|    Ok(TagElementsPositions {
  802|   148k|        language_end,
  803|   148k|        extlang_end,
  804|   148k|        script_end,
  805|   148k|        region_end,
  806|   148k|        variant_end,
  807|   148k|        extension_end,
  808|   148k|    })
  809|   181k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECslyQBdJh0KVU_5oxrdf:
  587|   189k|fn parse_language_tag(
  588|   189k|    input: &str,
  589|   189k|    output: &mut impl OutputBuffer,
  590|   189k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   189k|    if let Some(tag) = GRANDFATHEREDS
  593|   189k|        .iter()
  594|   189k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   189k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  7.82k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  7.82k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  7.82k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  7.82k|            Ok(TagElementsPositions {
  618|  7.82k|                language_end: input.len(),
  619|  7.82k|                extlang_end: input.len(),
  620|  7.82k|                script_end: input.len(),
  621|  7.82k|                region_end: input.len(),
  622|  7.82k|                variant_end: input.len(),
  623|  7.82k|                extension_end: input.len(),
  624|  7.82k|            })
  625|       |        }
  626|       |    } else {
  627|   181k|        parse_langtag(input, output)
  628|       |    }
  629|   189k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECslyQBdJh0KVU_5oxrdf:
  571|  7.82k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECslyQBdJh0KVU_5oxrdf:
  571|   181k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECslyQBdJh0KVU_5oxrdf:
  571|  4.87k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECslyQBdJh0KVU_5oxrdf:
  571|  5.59k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CslyQBdJh0KVU_5oxrdf:
  594|  4.92M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCslyQBdJh0KVU_5oxrdf:
  876|  4.35k|fn is_numeric(s: &str) -> bool {
  877|  4.35k|    s.chars().all(|x| x.is_ascii_digit())
  878|  4.35k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCslyQBdJh0KVU_5oxrdf:
  903|   181k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   181k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   181k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCslyQBdJh0KVU_5oxrdf:
  891|  4.87k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  4.87k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  4.87k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCslyQBdJh0KVU_5oxrdf:
  871|   184k|fn is_alphabetic(s: &str) -> bool {
  872|   184k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   184k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCslyQBdJh0KVU_5oxrdf:
  881|  31.3k|fn is_alphanumeric(s: &str) -> bool {
  882|  31.3k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  31.3k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCslyQBdJh0KVU_5oxrdf:
  897|  5.59k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  5.59k|    let mut chars = s.chars();
  899|  5.59k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  5.59k|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCslyQBdJh0KVU_5oxrdf:
  886|  7.82k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  7.82k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  7.82k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCslyQBdJh0KVU_5oxrdf:
  850|   181k|    fn new(input: &'a str) -> Self {
  851|   181k|        Self {
  852|   181k|            split: input.split('-'),
  853|   181k|            position: 0,
  854|   181k|        }
  855|   181k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCslyQBdJh0KVU_5oxrdf:
  563|  57.3k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCslyQBdJh0KVU_5oxrdf:
  862|   387k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   387k|        let tag = self.split.next()?;
  864|   235k|        let tag_end = self.position + tag.len();
  865|   235k|        self.position = tag_end + 1;
  866|   235k|        Some((tag, tag_end))
  867|   387k|    }
_RNvXso_CsaOqqenhRLQf_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  490|  33.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  33.1k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  9.01k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    673|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  4.66k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  4.66k|                f,
  503|  4.66k|                "A subtag fails to parse, it does not match any other subtags"
  504|  4.66k|            ),
  505|  16.5k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  1.52k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|    768|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  33.1k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|   854k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|  4.35k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|  74.2k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   113k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_Csa9OvQYE6bC8_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer3lenCs2AU8mwnS1zT_5oxttl:
 1124|   668k|    fn len(&self) -> usize {
 1125|   668k|        self.len()
 1126|   668k|    }
_RNvXsZ_Csa9OvQYE6bC8_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer4pushCs2AU8mwnS1zT_5oxttl:
 1104|  1.99M|    fn push(&mut self, c: char) {
 1105|  1.99M|        self.push(c);
 1106|  1.99M|    }
_RNvXsZ_Csa9OvQYE6bC8_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer5clearCs2AU8mwnS1zT_5oxttl:
 1114|  26.4k|    fn clear(&mut self) {
 1115|  26.4k|        self.clear();
 1116|  26.4k|    }
_RNvXsZ_Csa9OvQYE6bC8_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer6as_strCs2AU8mwnS1zT_5oxttl:
 1129|   414k|    fn as_str(&self) -> &str {
 1130|   414k|        self.as_str()
 1131|   414k|    }
_RNvXsZ_Csa9OvQYE6bC8_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8push_strCs2AU8mwnS1zT_5oxttl:
 1109|   354k|    fn push_str(&mut self, s: &str) {
 1110|   354k|        self.push_str(s);
 1111|   354k|    }
_RNvXsZ_Csa9OvQYE6bC8_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8truncateCs2AU8mwnS1zT_5oxttl:
 1119|   223k|    fn truncate(&mut self, new_len: usize) {
 1120|   223k|        self.truncate(new_len);
 1121|   223k|    }
_RINvMs11_Csa9OvQYE6bC8_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_erroruECs2AU8mwnS1zT_5oxttl:
 1578|   106k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|   106k|        Err(IriParseError { kind })
 1580|   106k|    }
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echar0Cs2AU8mwnS1zT_5oxttl:
 1561|  37.7k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echars_0Cs2AU8mwnS1zT_5oxttl:
 1562|  24.1k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCs2AU8mwnS1zT_5oxttl:
   70|   103k|    pub fn parse_unchecked(iri: T) -> Self {
   71|   103k|        let positions =
   72|   103k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|   103k|        Self { iri, positions }
   74|   103k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCs2AU8mwnS1zT_5oxttl:
  258|   126k|    pub fn path(&self) -> &str {
  259|   126k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|   126k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE6as_refCs2AU8mwnS1zT_5oxttl:
  154|   409k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   409k|        IriRef {
  156|   409k|            iri: &self.iri,
  157|   409k|            positions: self.positions,
  158|   409k|        }
  159|   409k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCs2AU8mwnS1zT_5oxttl:
   89|   409k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   409k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   409k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   303k|        Ok(IriRef {
   93|   303k|            iri: target_buffer,
   94|   303k|            positions,
   95|   303k|        })
   96|   409k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCs2AU8mwnS1zT_5oxttl:
 1359|  80.1k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  80.1k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  14.3k|            let start_position = self.input.position;
 1363|  57.6k|            while let Some(c) = self.input.next() {
 1364|  57.6k|                self.output.push(c);
 1365|  57.6k|                if c == ']' {
 1366|  14.3k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  14.3k|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|  14.3k|                    }
 1372|       |
 1373|  14.3k|                    let c = self.input.next();
 1374|  14.3k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  8.86k|                            self.output.push(':');
 1377|  8.86k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  5.49k|                            self.output_positions.authority_end = self.output.len();
 1381|  5.49k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  43.3k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   436k|            loop {
 1404|   436k|                let c = self.input.next();
 1405|   436k|                match c {
 1406|       |                    Some(':') => {
 1407|  22.6k|                        self.output.push(':');
 1408|  22.6k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  43.1k|                        self.output_positions.authority_end = self.output.len();
 1412|  43.1k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   370k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  80.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCs2AU8mwnS1zT_5oxttl:
 1468|  69.8k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   252k|        loop {
 1470|   252k|            let c = self.input.next();
 1471|   252k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  76.7k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  76.7k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  76.7k|                    } else if c == Some('/') {
 1481|  6.94k|                        self.output.push('/');
 1482|  69.8k|                    }
 1483|       |
 1484|  76.7k|                    if c == Some('?') {
 1485|  16.6k|                        self.output_positions.path_end = self.output.len();
 1486|  16.6k|                        self.output.push('?');
 1487|  16.6k|                        return self.parse_query();
 1488|  60.1k|                    } else if c == Some('#') {
 1489|  8.14k|                        self.output_positions.path_end = self.output.len();
 1490|  8.14k|                        self.output_positions.query_end = self.output.len();
 1491|  8.14k|                        self.output.push('#');
 1492|  8.14k|                        return self.parse_fragment();
 1493|  51.9k|                    } else if c.is_none() {
 1494|  45.0k|                        self.output_positions.path_end = self.output.len();
 1495|  45.0k|                        self.output_positions.query_end = self.output.len();
 1496|  45.0k|                        return Ok(());
 1497|  6.94k|                    }
 1498|       |                }
 1499|   175k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  69.8k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCs2AU8mwnS1zT_5oxttl:
 1420|  31.4k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  72.9k|        loop {
 1422|  72.9k|            let c = self.input.next();
 1423|  72.9k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  31.4k|                    self.output_positions.authority_end = self.output.len();
 1426|  31.4k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  41.4k|                Some(c) => {
 1429|  41.4k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  41.4k|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  31.4k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCs2AU8mwnS1zT_5oxttl:
 1504|  25.3k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   102k|        while let Some(c) = self.input.next() {
 1506|  94.2k|            if c == '#' {
 1507|  16.7k|                self.output_positions.query_end = self.output.len();
 1508|  16.7k|                self.output.push('#');
 1509|  16.7k|                return self.parse_fragment();
 1510|       |            } else {
 1511|  77.5k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  8.59k|        self.output_positions.query_end = self.output.len();
 1515|  8.59k|        Ok(())
 1516|  25.3k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCs2AU8mwnS1zT_5oxttl:
 1213|   103k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   432k|        loop {
 1215|   432k|            let c = self.input.next();
 1216|   432k|            match c {
 1217|   432k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   329k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   103k|                    self.output.push(':');
 1222|   103k|                    self.output_positions.scheme_end = self.output.len();
 1223|   103k|                    self.input_scheme_end = self.input.position;
 1224|   103k|                    return if self.input.starts_with('/') {
 1225|  87.0k|                        self.input.next();
 1226|  87.0k|                        self.output.push('/');
 1227|  87.0k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  16.0k|                        self.output_positions.authority_end = self.output.len();
 1230|  16.0k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   103k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCs2AU8mwnS1zT_5oxttl:
 1518|  38.9k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   107k|        while let Some(c) = self.input.next() {
 1520|  68.1k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  38.9k|        Ok(())
 1523|  38.9k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCs2AU8mwnS1zT_5oxttl:
 1335|  80.1k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   511k|        loop {
 1338|   511k|            let c = self.input.next();
 1339|   511k|            match c {
 1340|       |                Some('@') => {
 1341|  2.45k|                    self.output.push('@');
 1342|  2.45k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  77.6k|                    self.input = ParserInput {
 1346|  77.6k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  77.6k|                        position: self.input_scheme_end + 2,
 1348|  77.6k|                    };
 1349|  77.6k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  77.6k|                    return self.parse_host();
 1351|       |                }
 1352|   431k|                Some(c) => {
 1353|   431k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  80.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCs2AU8mwnS1zT_5oxttl:
 1439|  80.1k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  80.1k|        match c {
 1441|       |            None => {
 1442|  10.5k|                self.output_positions.path_end = self.output.len();
 1443|  10.5k|                self.output_positions.query_end = self.output.len();
 1444|  10.5k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  8.68k|                self.output_positions.path_end = self.output.len();
 1448|  8.68k|                self.output.push('?');
 1449|  8.68k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  14.1k|                self.output_positions.path_end = self.output.len();
 1453|  14.1k|                self.output_positions.query_end = self.output.len();
 1454|  14.1k|                self.output.push('#');
 1455|  14.1k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  46.8k|                self.output.push('/');
 1459|  46.8k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  80.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCs2AU8mwnS1zT_5oxttl:
 1199|   103k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   103k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   103k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   103k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCs2AU8mwnS1zT_5oxttl:
 1245|  87.0k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  87.0k|        if self.input.starts_with('/') {
 1247|  80.1k|            self.input.next();
 1248|  80.1k|            self.output.push('/');
 1249|  80.1k|            self.parse_authority()
 1250|       |        } else {
 1251|  6.93k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  6.93k|            self.parse_path()
 1253|       |        }
 1254|  87.0k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCs2AU8mwnS1zT_5oxttl:
 1534|  1.04M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.04M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.04M|            self.output.push(c);
 1537|  1.04M|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.04M|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCs2AU8mwnS1zT_5oxttl:
 1546|  77.5k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  77.5k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  77.5k|            self.output.push(c);
 1549|  77.5k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  77.5k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCs2AU8mwnS1zT_5oxttl:
 1174|   103k|    fn parse(
 1175|   103k|        iri: &'a str,
 1176|   103k|        base: Option<IriRef<&'a str>>,
 1177|   103k|        output: &'a mut O,
 1178|   103k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   103k|        let mut parser = Self {
 1180|   103k|            iri,
 1181|   103k|            base,
 1182|   103k|            input: ParserInput {
 1183|   103k|                value: iri.chars(),
 1184|   103k|                position: 0,
 1185|   103k|            },
 1186|   103k|            output,
 1187|   103k|            output_positions: IriElementsPositions {
 1188|   103k|                scheme_end: 0,
 1189|   103k|                authority_end: 0,
 1190|   103k|                path_end: 0,
 1191|   103k|                query_end: 0,
 1192|   103k|            },
 1193|   103k|            input_scheme_end: 0,
 1194|   103k|        };
 1195|   103k|        parser.parse_scheme_start()?;
 1196|   103k|        Ok(parser.output_positions)
 1197|   103k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_hostCs2AU8mwnS1zT_5oxttl:
 1359|   115k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   115k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  57.0k|            let start_position = self.input.position;
 1363|   244k|            while let Some(c) = self.input.next() {
 1364|   239k|                self.output.push(c);
 1365|   239k|                if c == ']' {
 1366|  51.8k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  51.8k|                    if !UNCHECKED {
 1368|  51.8k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  7.04k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  44.7k|                        }
 1371|      0|                    }
 1372|       |
 1373|  44.7k|                    let c = self.input.next();
 1374|  44.7k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  30.1k|                            self.output.push(':');
 1377|  30.1k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  10.1k|                            self.output_positions.authority_end = self.output.len();
 1381|  10.1k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  4.52k|                        Some(c) => {
 1384|  4.52k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  4.52k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   187k|                }
 1393|       |            }
 1394|  5.20k|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|  5.20k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   112k|            loop {
 1404|   112k|                let c = self.input.next();
 1405|   112k|                match c {
 1406|       |                    Some(':') => {
 1407|  25.0k|                        self.output.push(':');
 1408|  25.0k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  29.9k|                        self.output_positions.authority_end = self.output.len();
 1412|  29.9k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  57.7k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   115k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_pathCs2AU8mwnS1zT_5oxttl:
 1468|   158k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   597k|        loop {
 1470|   597k|            let c = self.input.next();
 1471|   597k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   152k|                    if self.output.as_str().ends_with("/..") {
 1474|  3.56k|                        self.remove_last_segment();
 1475|  3.56k|                        self.remove_last_segment();
 1476|  3.56k|                        self.output.push('/');
 1477|   148k|                    } else if self.output.as_str().ends_with("/.") {
 1478|  10.4k|                        self.remove_last_segment();
 1479|  10.4k|                        self.output.push('/');
 1480|   138k|                    } else if c == Some('/') {
 1481|  29.8k|                        self.output.push('/');
 1482|   108k|                    }
 1483|       |
 1484|   152k|                    if c == Some('?') {
 1485|  14.3k|                        self.output_positions.path_end = self.output.len();
 1486|  14.3k|                        self.output.push('?');
 1487|  14.3k|                        return self.parse_query();
 1488|   137k|                    } else if c == Some('#') {
 1489|  10.7k|                        self.output_positions.path_end = self.output.len();
 1490|  10.7k|                        self.output_positions.query_end = self.output.len();
 1491|  10.7k|                        self.output.push('#');
 1492|  10.7k|                        return self.parse_fragment();
 1493|   127k|                    } else if c.is_none() {
 1494|  94.0k|                        self.output_positions.path_end = self.output.len();
 1495|  94.0k|                        self.output_positions.query_end = self.output.len();
 1496|  94.0k|                        return Ok(());
 1497|  33.1k|                    }
 1498|       |                }
 1499|   444k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   158k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_portCs2AU8mwnS1zT_5oxttl:
 1420|  55.1k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  73.0k|        loop {
 1422|  73.0k|            let c = self.input.next();
 1423|  73.0k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  45.5k|                    self.output_positions.authority_end = self.output.len();
 1426|  45.5k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  27.5k|                Some(c) => {
 1429|  27.5k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  17.9k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  9.55k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  55.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echarCs2AU8mwnS1zT_5oxttl:
 1558|  42.2k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  42.2k|        let c1 = self.input.next();
 1560|  42.2k|        let c2 = self.input.next();
 1561|  42.2k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  24.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  19.2k|            self.output.push('%');
 1565|  19.2k|            self.output.push(c1.unwrap());
 1566|  19.2k|            self.output.push(c2.unwrap());
 1567|  19.2k|            Ok(())
 1568|       |        } else {
 1569|  23.0k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  23.0k|                Some('%'),
 1571|  23.0k|                c1,
 1572|  23.0k|                c2,
 1573|  23.0k|            ]))
 1574|       |        }
 1575|  42.2k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_queryCs2AU8mwnS1zT_5oxttl:
 1504|  66.7k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   194k|        while let Some(c) = self.input.next() {
 1506|   168k|            if c == '#' {
 1507|  27.4k|                self.output_positions.query_end = self.output.len();
 1508|  27.4k|                self.output.push('#');
 1509|  27.4k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   141k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  26.0k|        self.output_positions.query_end = self.output.len();
 1515|  26.0k|        Ok(())
 1516|  66.7k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E12parse_schemeCs2AU8mwnS1zT_5oxttl:
 1213|  78.9k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   253k|        loop {
 1215|   253k|            let c = self.input.next();
 1216|   246k|            match c {
 1217|   246k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   174k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  52.4k|                    self.output.push(':');
 1222|  52.4k|                    self.output_positions.scheme_end = self.output.len();
 1223|  52.4k|                    self.input_scheme_end = self.input.position;
 1224|  52.4k|                    return if self.input.starts_with('/') {
 1225|  32.2k|                        self.input.next();
 1226|  32.2k|                        self.output.push('/');
 1227|  32.2k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  20.2k|                        self.output_positions.authority_end = self.output.len();
 1230|  20.2k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  26.4k|                    self.input = ParserInput {
 1235|  26.4k|                        value: self.iri.chars(),
 1236|  26.4k|                        position: 0,
 1237|  26.4k|                    }; // reset
 1238|  26.4k|                    self.output.clear();
 1239|  26.4k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  78.9k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragmentCs2AU8mwnS1zT_5oxttl:
 1518|   102k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   227k|        while let Some(c) = self.input.next() {
 1520|   142k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  84.9k|        Ok(())
 1523|   102k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_relativeCs2AU8mwnS1zT_5oxttl:
 1256|   354k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   354k|        if let Some(base) = self.base {
 1258|   354k|            match self.input.front() {
 1259|       |                None => {
 1260|  60.8k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  60.8k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  60.8k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  60.8k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  60.8k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  60.8k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   116k|                    self.input.next();
 1269|   116k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  34.8k|                    self.input.next();
 1273|  34.8k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  34.8k|                    self.output.push('?');
 1275|  34.8k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  34.8k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  34.8k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  34.8k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  46.6k|                    self.input.next();
 1282|  46.6k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  46.6k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  46.6k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  46.6k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  46.6k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  46.6k|                    self.output.push('#');
 1288|  46.6k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|  96.1k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|  96.1k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|  96.1k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|  96.1k|                    self.output_positions.path_end = base.positions.path_end;
 1295|  96.1k|                    self.remove_last_segment();
 1296|  96.1k|                    if self.output.len() > base.positions.scheme_end {
 1297|  92.2k|                        // We have some path or authority, we keep a base '/'
 1298|  92.2k|                        self.output.push('/');
 1299|  92.2k|                    }
 1300|  96.1k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   354k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authorityCs2AU8mwnS1zT_5oxttl:
 1335|   118k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   234k|        loop {
 1338|   234k|            let c = self.input.next();
 1339|   234k|            match c {
 1340|       |                Some('@') => {
 1341|  5.64k|                    self.output.push('@');
 1342|  5.64k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   110k|                    self.input = ParserInput {
 1346|   110k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   110k|                        position: self.input_scheme_end + 2,
 1348|   110k|                    };
 1349|   110k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   110k|                    return self.parse_host();
 1351|       |                }
 1352|   118k|                Some(c) => {
 1353|   118k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   118k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E16parse_path_startCs2AU8mwnS1zT_5oxttl:
 1439|  85.6k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  85.6k|        match c {
 1441|       |            None => {
 1442|  37.3k|                self.output_positions.path_end = self.output.len();
 1443|  37.3k|                self.output_positions.query_end = self.output.len();
 1444|  37.3k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  17.5k|                self.output_positions.path_end = self.output.len();
 1448|  17.5k|                self.output.push('?');
 1449|  17.5k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  17.6k|                self.output_positions.path_end = self.output.len();
 1453|  17.6k|                self.output_positions.query_end = self.output.len();
 1454|  17.6k|                self.output.push('#');
 1455|  17.6k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  13.0k|                self.output.push('/');
 1459|  13.0k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  85.6k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E18parse_scheme_startCs2AU8mwnS1zT_5oxttl:
 1199|   409k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   409k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  2.03k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  2.03k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   346k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   328k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   409k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19remove_last_segmentCs2AU8mwnS1zT_5oxttl:
 1525|   113k|    fn remove_last_segment(&mut self) {
 1526|   113k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   113k|            .rfind('/')
 1528|   113k|            .unwrap_or(0);
 1529|   113k|        self.output
 1530|   113k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   113k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E20parse_relative_slashCs2AU8mwnS1zT_5oxttl:
 1317|   116k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|   116k|        if self.input.starts_with('/') {
 1319|  95.9k|            self.input.next();
 1320|  95.9k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|  95.9k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|  95.9k|            self.output.push('/');
 1323|  95.9k|            self.output.push('/');
 1324|  95.9k|            self.parse_authority()
 1325|       |        } else {
 1326|  20.2k|            self.output
 1327|  20.2k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|  20.2k|            self.output.push('/');
 1329|  20.2k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|  20.2k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|  20.2k|            self.parse_path()
 1332|       |        }
 1333|   116k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E23parse_path_or_authorityCs2AU8mwnS1zT_5oxttl:
 1245|  32.2k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  32.2k|        if self.input.starts_with('/') {
 1247|  23.0k|            self.input.next();
 1248|  23.0k|            self.output.push('/');
 1249|  23.0k|            self.parse_authority()
 1250|       |        } else {
 1251|  9.16k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  9.16k|            self.parse_path()
 1253|       |        }
 1254|  32.2k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCs2AU8mwnS1zT_5oxttl:
 1534|   764k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   764k|        if UNCHECKED || is_url_code_point(c) {
 1536|   689k|            self.output.push(c);
 1537|   689k|            Ok(())
 1538|  74.8k|        } else if c == '%' {
 1539|  27.9k|            self.read_echar()
 1540|       |        } else {
 1541|  46.8k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   764k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCs2AU8mwnS1zT_5oxttl:
 1546|   141k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   141k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   119k|            self.output.push(c);
 1549|   119k|            Ok(())
 1550|  22.0k|        } else if c == '%' {
 1551|  14.2k|            self.read_echar()
 1552|       |        } else {
 1553|  7.75k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   141k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E5parseCs2AU8mwnS1zT_5oxttl:
 1174|   409k|    fn parse(
 1175|   409k|        iri: &'a str,
 1176|   409k|        base: Option<IriRef<&'a str>>,
 1177|   409k|        output: &'a mut O,
 1178|   409k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   409k|        let mut parser = Self {
 1180|   409k|            iri,
 1181|   409k|            base,
 1182|   409k|            input: ParserInput {
 1183|   409k|                value: iri.chars(),
 1184|   409k|                position: 0,
 1185|   409k|            },
 1186|   409k|            output,
 1187|   409k|            output_positions: IriElementsPositions {
 1188|   409k|                scheme_end: 0,
 1189|   409k|                authority_end: 0,
 1190|   409k|                path_end: 0,
 1191|   409k|                query_end: 0,
 1192|   409k|            },
 1193|   409k|            input_scheme_end: 0,
 1194|   409k|        };
 1195|   409k|        parser.parse_scheme_start()?;
 1196|   303k|        Ok(parser.output_positions)
 1197|   409k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCs2AU8mwnS1zT_5oxttl:
  567|   103k|    pub fn parse_unchecked(iri: T) -> Self {
  568|   103k|        Iri(IriRef::parse_unchecked(iri))
  569|   103k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCs2AU8mwnS1zT_5oxttl:
  717|   126k|    pub fn path(&self) -> &str {
  718|   126k|        self.0.path()
  719|   126k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCs2AU8mwnS1zT_5oxttl:
  584|   409k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   409k|        Ok(Iri(self.0.resolve(iri)?))
  586|   409k|    }
_RNvXsL_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCs2AU8mwnS1zT_5oxttl:
  896|   192k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|   192k|        self.0.fmt(f)
  898|   192k|    }
_RNvXsg_Csa9OvQYE6bC8_5oxiriINtB5_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCs2AU8mwnS1zT_5oxttl:
  417|   192k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|   192k|        self.iri.fmt(f)
  419|   192k|    }
_RNvCsa9OvQYE6bC8_5oxiri17is_url_code_pointCs2AU8mwnS1zT_5oxttl:
 1584|   905k|fn is_url_code_point(c: char) -> bool {
 1585|   905k|    matches!(c,
 1586|   245k|        'a'..='z'
 1587|   156k|        | 'A'..='Z'
 1588|   449k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  90.0k|        | '\u{A0}'..='\u{D7FF}'
 1609|  26.9k|        | '\u{F900}'..='\u{FDCF}'
 1610|  26.9k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  26.9k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  26.9k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  26.9k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  26.9k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  26.9k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  26.9k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  26.9k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  26.9k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  26.9k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  26.8k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  26.8k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  26.8k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  26.8k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     46|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|   905k|}
_RNvCsa9OvQYE6bC8_5oxiri23is_url_query_code_pointCs2AU8mwnS1zT_5oxttl:
 1629|   141k|fn is_url_query_code_point(c: char) -> bool {
 1630|   141k|    is_url_code_point(c)
 1631|  23.8k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   141k|}
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput11starts_withCs2AU8mwnS1zT_5oxttl:
 1156|   587k|    fn starts_with(&self, c: char) -> bool {
 1157|   587k|        self.value.as_str().starts_with(c)
 1158|   587k|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput4nextCs2AU8mwnS1zT_5oxttl:
 1141|  4.57M|    fn next(&mut self) -> Option<char> {
 1142|  4.57M|        if let Some(head) = self.value.next() {
 1143|  4.17M|            self.position += head.len_utf8();
 1144|  4.17M|            Some(head)
 1145|       |        } else {
 1146|   395k|            None
 1147|       |        }
 1148|  4.57M|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput5frontCs2AU8mwnS1zT_5oxttl:
 1151|   867k|    fn front(&self) -> Option<char> {
 1152|   867k|        self.value.clone().next()
 1153|   867k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2AU8mwnS1zT_5oxttl:
 1092|   412k|    fn len(&self) -> usize {
 1093|   412k|        self.len
 1094|   412k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2AU8mwnS1zT_5oxttl:
 1072|  1.97M|    fn push(&mut self, c: char) {
 1073|  1.97M|        self.len += c.len_utf8();
 1074|  1.97M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2AU8mwnS1zT_5oxttl:
 1097|   153k|    fn as_str(&self) -> &str {
 1098|   153k|        ""
 1099|   153k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2AU8mwnS1zT_5oxttl:
 1087|  77.6k|    fn truncate(&mut self, new_len: usize) {
 1088|  77.6k|        self.len = new_len;
 1089|  77.6k|    }
_RINvMs11_Csa9OvQYE6bC8_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECslyQBdJh0KVU_5oxrdf:
 1578|  42.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  42.3k|        Err(IriParseError { kind })
 1580|  42.3k|    }
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CslyQBdJh0KVU_5oxrdf:
 1561|  26.3k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CslyQBdJh0KVU_5oxrdf:
 1562|  14.9k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCslyQBdJh0KVU_5oxrdf:
  185|   303k|    pub fn into_inner(self) -> T {
  186|   303k|        self.iri
  187|   303k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCslyQBdJh0KVU_5oxrdf:
  199|  26.2k|    pub fn is_absolute(&self) -> bool {
  200|  26.2k|        self.positions.scheme_end != 0
  201|  26.2k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCslyQBdJh0KVU_5oxrdf:
   58|  26.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  26.2k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  26.2k|        Ok(Self { iri, positions })
   61|  26.2k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefReE11is_absoluteCslyQBdJh0KVU_5oxrdf:
  199|   123k|    pub fn is_absolute(&self) -> bool {
  200|   123k|        self.positions.scheme_end != 0
  201|   123k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefReE5parseCslyQBdJh0KVU_5oxrdf:
   58|   165k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   165k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   123k|        Ok(Self { iri, positions })
   61|   165k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCslyQBdJh0KVU_5oxrdf:
 1359|   159k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   159k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  36.2k|            let start_position = self.input.position;
 1363|   147k|            while let Some(c) = self.input.next() {
 1364|   147k|                self.output.push(c);
 1365|   147k|                if c == ']' {
 1366|  36.2k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  36.2k|                    if !UNCHECKED {
 1368|  36.2k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  36.2k|                        }
 1371|      0|                    }
 1372|       |
 1373|  36.2k|                    let c = self.input.next();
 1374|  36.2k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  23.1k|                            self.output.push(':');
 1377|  23.1k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  9.35k|                            self.output_positions.authority_end = self.output.len();
 1381|  9.35k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  3.77k|                        Some(c) => {
 1384|  3.77k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  3.77k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   111k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   822k|            loop {
 1404|   822k|                let c = self.input.next();
 1405|   822k|                match c {
 1406|       |                    Some(':') => {
 1407|  26.6k|                        self.output.push(':');
 1408|  26.6k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  93.5k|                        self.output_positions.authority_end = self.output.len();
 1412|  93.5k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   702k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   159k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCslyQBdJh0KVU_5oxrdf:
 1468|  83.6k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   236k|        loop {
 1470|   236k|            let c = self.input.next();
 1471|   236k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  84.8k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  84.8k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  84.8k|                    } else if c == Some('/') {
 1481|  7.35k|                        self.output.push('/');
 1482|  77.4k|                    }
 1483|       |
 1484|  84.8k|                    if c == Some('?') {
 1485|  21.4k|                        self.output_positions.path_end = self.output.len();
 1486|  21.4k|                        self.output.push('?');
 1487|  21.4k|                        return self.parse_query();
 1488|  63.4k|                    } else if c == Some('#') {
 1489|  6.69k|                        self.output_positions.path_end = self.output.len();
 1490|  6.69k|                        self.output_positions.query_end = self.output.len();
 1491|  6.69k|                        self.output.push('#');
 1492|  6.69k|                        return self.parse_fragment();
 1493|  56.7k|                    } else if c.is_none() {
 1494|  49.3k|                        self.output_positions.path_end = self.output.len();
 1495|  49.3k|                        self.output_positions.query_end = self.output.len();
 1496|  49.3k|                        return Ok(());
 1497|  7.35k|                    }
 1498|       |                }
 1499|   151k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  83.6k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCslyQBdJh0KVU_5oxrdf:
 1420|  49.7k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  64.1k|        loop {
 1422|  64.1k|            let c = self.input.next();
 1423|  64.1k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  38.6k|                    self.output_positions.authority_end = self.output.len();
 1426|  38.6k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  25.5k|                Some(c) => {
 1429|  25.5k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  14.4k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  11.0k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  49.7k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCslyQBdJh0KVU_5oxrdf:
 1558|  32.2k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  32.2k|        let c1 = self.input.next();
 1560|  32.2k|        let c2 = self.input.next();
 1561|  32.2k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  16.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  13.4k|            self.output.push('%');
 1565|  13.4k|            self.output.push(c1.unwrap());
 1566|  13.4k|            self.output.push(c2.unwrap());
 1567|  13.4k|            Ok(())
 1568|       |        } else {
 1569|  18.7k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  18.7k|                Some('%'),
 1571|  18.7k|                c1,
 1572|  18.7k|                c2,
 1573|  18.7k|            ]))
 1574|       |        }
 1575|  32.2k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCslyQBdJh0KVU_5oxrdf:
 1504|  48.1k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   237k|        while let Some(c) = self.input.next() {
 1506|   211k|            if c == '#' {
 1507|  17.4k|                self.output_positions.query_end = self.output.len();
 1508|  17.4k|                self.output.push('#');
 1509|  17.4k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   194k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  25.2k|        self.output_positions.query_end = self.output.len();
 1515|  25.2k|        Ok(())
 1516|  48.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCslyQBdJh0KVU_5oxrdf:
 1213|   192k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  1.06M|        loop {
 1215|  1.06M|            let c = self.input.next();
 1216|  1.06M|            match c {
 1217|  1.06M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   872k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   192k|                    self.output.push(':');
 1222|   192k|                    self.output_positions.scheme_end = self.output.len();
 1223|   192k|                    self.input_scheme_end = self.input.position;
 1224|   192k|                    return if self.input.starts_with('/') {
 1225|   171k|                        self.input.next();
 1226|   171k|                        self.output.push('/');
 1227|   171k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  20.8k|                        self.output_positions.authority_end = self.output.len();
 1230|  20.8k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   192k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCslyQBdJh0KVU_5oxrdf:
 1518|  40.9k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   221k|        while let Some(c) = self.input.next() {
 1520|   185k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  35.6k|        Ok(())
 1523|  40.9k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCslyQBdJh0KVU_5oxrdf:
 1335|   167k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   941k|        loop {
 1338|   941k|            let c = self.input.next();
 1339|   941k|            match c {
 1340|       |                Some('@') => {
 1341|  6.10k|                    self.output.push('@');
 1342|  6.10k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   153k|                    self.input = ParserInput {
 1346|   153k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   153k|                        position: self.input_scheme_end + 2,
 1348|   153k|                    };
 1349|   153k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   153k|                    return self.parse_host();
 1351|       |                }
 1352|   782k|                Some(c) => {
 1353|   782k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   167k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCslyQBdJh0KVU_5oxrdf:
 1439|   141k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   141k|        match c {
 1441|       |            None => {
 1442|  39.4k|                self.output_positions.path_end = self.output.len();
 1443|  39.4k|                self.output_positions.query_end = self.output.len();
 1444|  39.4k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  26.7k|                self.output_positions.path_end = self.output.len();
 1448|  26.7k|                self.output.push('?');
 1449|  26.7k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  16.8k|                self.output_positions.path_end = self.output.len();
 1453|  16.8k|                self.output_positions.query_end = self.output.len();
 1454|  16.8k|                self.output.push('#');
 1455|  16.8k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  58.5k|                self.output.push('/');
 1459|  58.5k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   141k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCslyQBdJh0KVU_5oxrdf:
 1199|   192k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   192k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   192k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   192k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCslyQBdJh0KVU_5oxrdf:
 1245|   171k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   171k|        if self.input.starts_with('/') {
 1247|   167k|            self.input.next();
 1248|   167k|            self.output.push('/');
 1249|   167k|            self.parse_authority()
 1250|       |        } else {
 1251|  4.20k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  4.20k|            self.parse_path()
 1253|       |        }
 1254|   171k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCslyQBdJh0KVU_5oxrdf:
 1534|  1.82M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.82M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.78M|            self.output.push(c);
 1537|  1.78M|            Ok(())
 1538|  32.4k|        } else if c == '%' {
 1539|  24.8k|            self.read_echar()
 1540|       |        } else {
 1541|  7.63k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.82M|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCslyQBdJh0KVU_5oxrdf:
 1546|   194k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   194k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   186k|            self.output.push(c);
 1549|   186k|            Ok(())
 1550|  8.53k|        } else if c == '%' {
 1551|  7.39k|            self.read_echar()
 1552|       |        } else {
 1553|  1.14k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   194k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCslyQBdJh0KVU_5oxrdf:
 1174|   192k|    fn parse(
 1175|   192k|        iri: &'a str,
 1176|   192k|        base: Option<IriRef<&'a str>>,
 1177|   192k|        output: &'a mut O,
 1178|   192k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   192k|        let mut parser = Self {
 1180|   192k|            iri,
 1181|   192k|            base,
 1182|   192k|            input: ParserInput {
 1183|   192k|                value: iri.chars(),
 1184|   192k|                position: 0,
 1185|   192k|            },
 1186|   192k|            output,
 1187|   192k|            output_positions: IriElementsPositions {
 1188|   192k|                scheme_end: 0,
 1189|   192k|                authority_end: 0,
 1190|   192k|                path_end: 0,
 1191|   192k|                query_end: 0,
 1192|   192k|            },
 1193|   192k|            input_scheme_end: 0,
 1194|   192k|        };
 1195|   192k|        parser.parse_scheme_start()?;
 1196|   149k|        Ok(parser.output_positions)
 1197|   192k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCslyQBdJh0KVU_5oxrdf:
  665|   303k|    pub fn into_inner(self) -> T {
  666|   303k|        self.0.into_inner()
  667|   303k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCslyQBdJh0KVU_5oxrdf:
  556|  26.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  26.2k|        IriRef::parse(iri)?.try_into()
  558|  26.2k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriReE5parseCslyQBdJh0KVU_5oxrdf:
  556|   165k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   165k|        IriRef::parse(iri)?.try_into()
  558|   165k|    }
_RNvXsV_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCslyQBdJh0KVU_5oxrdf:
  968|  26.2k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  26.2k|        if iri.is_absolute() {
  970|  26.2k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  26.2k|    }
_RNvXsV_Csa9OvQYE6bC8_5oxiriINtB5_3IriReEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCslyQBdJh0KVU_5oxrdf:
  968|   123k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   123k|        if iri.is_absolute() {
  970|   123k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   123k|    }
_RNvCsa9OvQYE6bC8_5oxiri17is_url_code_pointCslyQBdJh0KVU_5oxrdf:
 1584|  2.01M|fn is_url_code_point(c: char) -> bool {
 1585|  2.01M|    matches!(c,
 1586|  1.24M|        'a'..='z'
 1587|   174k|        | 'A'..='Z'
 1588|   474k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   126k|        | '\u{A0}'..='\u{D7FF}'
 1609|  58.4k|        | '\u{F900}'..='\u{FDCF}'
 1610|  58.4k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  58.4k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  58.4k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  58.4k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  58.4k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  58.4k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  58.3k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  58.3k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  58.3k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  58.3k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  58.3k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  58.3k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  58.3k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  58.3k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      5|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  2.01M|}
_RNvCsa9OvQYE6bC8_5oxiri23is_url_query_code_pointCslyQBdJh0KVU_5oxrdf:
 1629|   194k|fn is_url_query_code_point(c: char) -> bool {
 1630|   194k|    is_url_code_point(c)
 1631|  11.4k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   194k|}
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput11starts_withCslyQBdJh0KVU_5oxrdf:
 1156|   522k|    fn starts_with(&self, c: char) -> bool {
 1157|   522k|        self.value.as_str().starts_with(c)
 1158|   522k|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput4nextCslyQBdJh0KVU_5oxrdf:
 1141|  4.17M|    fn next(&mut self) -> Option<char> {
 1142|  4.17M|        if let Some(head) = self.value.next() {
 1143|  3.97M|            self.position += head.len_utf8();
 1144|  3.97M|            Some(head)
 1145|       |        } else {
 1146|   199k|            None
 1147|       |        }
 1148|  4.17M|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput5frontCslyQBdJh0KVU_5oxrdf:
 1151|   192k|    fn front(&self) -> Option<char> {
 1152|   192k|        self.value.clone().next()
 1153|   192k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCslyQBdJh0KVU_5oxrdf:
 1092|   674k|    fn len(&self) -> usize {
 1093|   674k|        self.len
 1094|   674k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCslyQBdJh0KVU_5oxrdf:
 1072|  3.79M|    fn push(&mut self, c: char) {
 1073|  3.79M|        self.len += c.len_utf8();
 1074|  3.79M|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCslyQBdJh0KVU_5oxrdf:
 1097|   169k|    fn as_str(&self) -> &str {
 1098|   169k|        ""
 1099|   169k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCslyQBdJh0KVU_5oxrdf:
 1087|   153k|    fn truncate(&mut self, new_len: usize) {
 1088|   153k|        self.len = new_len;
 1089|   153k|    }
_RNvXsW_Csa9OvQYE6bC8_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|   148k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   148k|        match &self.kind {
 1005|  2.03k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  13.4k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  13.4k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  7.04k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  20.6k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  63.4k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  63.4k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  41.8k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  41.8k|                f,
 1016|  41.8k|                "Invalid IRI percent encoding '{}'",
 1017|  41.8k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  41.8k|            ),
 1019|       |        }
 1020|   148k|    }

_RNvMNtCseaCfzRqAQoh_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCsjhTDs2LGHe5_11rand_chacha:
   13|  27.1M|    pub fn new(xs: [W; 2]) -> Self {
   14|  27.1M|        x2(xs, PhantomData)
   15|  27.1M|    }
_RNvXsG_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCsjhTDs2LGHe5_11rand_chacha:
   22|  9.52M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  9.52M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  9.52M|            }
_RNvXsM_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCsjhTDs2LGHe5_11rand_chacha:
   32|  9.52M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  9.52M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  9.52M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  9.52M|            }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CsjhTDs2LGHe5_11rand_chacha:
   42|  2.38M|        fn $fn(self) -> Self {
   43|  2.38M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.38M|        }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CsjhTDs2LGHe5_11rand_chacha:
   42|  2.38M|        fn $fn(self) -> Self {
   43|  2.38M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.38M|        }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CsjhTDs2LGHe5_11rand_chacha:
   42|  2.38M|        fn $fn(self) -> Self {
   43|  2.38M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.38M|        }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CsjhTDs2LGHe5_11rand_chacha:
   42|  2.38M|        fn $fn(self) -> Self {
   43|  2.38M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.38M|        }
_RNvXsg_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CsjhTDs2LGHe5_11rand_chacha:
  208|  2.38M|    fn shuffle_lane_words1230(self) -> Self {
  209|  2.38M|        Self::new([
  210|  2.38M|            self.0[0].shuffle_lane_words1230(),
  211|  2.38M|            self.0[1].shuffle_lane_words1230(),
  212|  2.38M|        ])
  213|  2.38M|    }
_RNvXsg_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CsjhTDs2LGHe5_11rand_chacha:
  201|  2.38M|    fn shuffle_lane_words2301(self) -> Self {
  202|  2.38M|        Self::new([
  203|  2.38M|            self.0[0].shuffle_lane_words2301(),
  204|  2.38M|            self.0[1].shuffle_lane_words2301(),
  205|  2.38M|        ])
  206|  2.38M|    }
_RNvXsg_NtCseaCfzRqAQoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CsjhTDs2LGHe5_11rand_chacha:
  215|  2.38M|    fn shuffle_lane_words3012(self) -> Self {
  216|  2.38M|        Self::new([
  217|  2.38M|            self.0[0].shuffle_lane_words3012(),
  218|  2.38M|            self.0[1].shuffle_lane_words3012(),
  219|  2.38M|        ])
  220|  2.38M|    }

_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECsjhTDs2LGHe5_11rand_chacha:
  259|  1.55k|    fn read_le<V>(self, input: &[u8]) -> V
  260|  1.55k|    where
  261|  1.55k|        V: StoreBytes,
  262|  1.55k|    {
  263|  1.55k|        unsafe { V::unsafe_read_le(input) }
  264|  1.55k|    }
_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECsjhTDs2LGHe5_11rand_chacha:
  251|   198k|    fn vec<V, A>(self, a: A) -> V
  252|   198k|    where
  253|   198k|        V: MultiLane<A>,
  254|   198k|    {
  255|   198k|        V::from_lanes(a)
  256|   198k|    }
_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECsjhTDs2LGHe5_11rand_chacha:
  246|  1.78M|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  1.78M|        unsafe { V::unpack(s) }
  248|  1.78M|    }
_RINvYINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECsjhTDs2LGHe5_11rand_chacha:
  246|   198k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   198k|        unsafe { V::unpack(s) }
  248|   198k|    }

_RNvXNtCseaCfzRqAQoh_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCsjhTDs2LGHe5_11rand_chacha:
   64|    776|    unsafe fn instance() -> Self {
   65|    776|        SseMachine(PhantomData)
   66|    776|    }
_RNvXs_NtCseaCfzRqAQoh_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCsjhTDs2LGHe5_11rand_chacha:
   92|   198k|    unsafe fn instance() -> Self {
   93|   198k|        Avx2Machine(PhantomData)
   94|   198k|    }
_RNvNtCsjhTDs2LGHe5_11rand_chacha4guts11refill_wide:
  250|   198k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|   198k|            #[inline(always)]
  252|   198k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|   198k|            use std::arch::x86_64::*;
  254|   198k|            #[target_feature(enable = "avx2")]
  255|   198k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   198k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   198k|                _mm256_zeroupper();
  258|   198k|                ret
  259|   198k|            }
  260|   198k|            #[target_feature(enable = "avx")]
  261|   198k|            #[target_feature(enable = "sse4.1")]
  262|   198k|            #[target_feature(enable = "ssse3")]
  263|   198k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|   198k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|   198k|                _mm256_zeroupper();
  266|   198k|                ret
  267|   198k|            }
  268|   198k|            #[target_feature(enable = "sse4.1")]
  269|   198k|            #[target_feature(enable = "ssse3")]
  270|   198k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|   198k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|   198k|            }
  273|   198k|            #[target_feature(enable = "ssse3")]
  274|   198k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|   198k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|   198k|            }
  277|   198k|            #[target_feature(enable = "sse2")]
  278|   198k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|   198k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|   198k|            }
  281|   198k|            unsafe {
  282|   198k|                if is_x86_feature_detected!("avx2") {
  283|   198k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11refill_wide9impl_avx2:
  255|   198k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   198k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   198k|                _mm256_zeroupper();
  258|   198k|                ret
  259|   198k|            }
_RNvNtCsjhTDs2LGHe5_11rand_chacha4guts11init_chacha:
  333|    776|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    776|            #[inline(always)]
  335|    776|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    776|            use std::arch::x86_64::*;
  337|    776|            #[target_feature(enable = "avx")]
  338|    776|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    776|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    776|            }
  341|    776|            #[target_feature(enable = "sse2")]
  342|    776|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    776|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    776|            }
  345|    776|            unsafe {
  346|    776|                if is_x86_feature_detected!("avx") {
  347|    776|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11init_chacha8impl_avx:
  338|    776|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    776|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    776|            }
_RNvXs2_NtCseaCfzRqAQoh_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromAmj4_E4from:
  130|    776|    fn from(u32x4: [u32; 4]) -> Self {
  131|    776|        vec128_storage { u32x4 }
  132|    776|    }

_RNvMNtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCsjhTDs2LGHe5_11rand_chacha:
 1394|  73.4M|        fn new(x: __m256i) -> Self {
 1395|  73.4M|            Self { x, ni: PhantomData }
 1396|  73.4M|        }
_RNvMsZ_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCsjhTDs2LGHe5_11rand_chacha:
   64|  11.1M|            fn new(x: __m128i) -> Self {
   65|  11.1M|                $vec {
   66|  11.1M|                    x,
   67|  11.1M|                    s3: PhantomData,
   68|  11.1M|                    s4: PhantomData,
   69|  11.1M|                    ni: PhantomData,
   70|  11.1M|                }
   71|  11.1M|            }
_RNvXs0_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCsjhTDs2LGHe5_11rand_chacha:
 1402|   396k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   396k|            Self::new(p.avx)
 1404|   396k|        }
_RNvXs10_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCsjhTDs2LGHe5_11rand_chacha:
   79|  1.55k|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|  1.55k|                assert_eq!(input.len(), 16);
   81|  1.55k|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|  1.55k|            }
_RNvXs10_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCsjhTDs2LGHe5_11rand_chacha:
   89|  3.17M|            fn write_le(self, out: &mut [u8]) {
   90|  3.17M|                assert_eq!(out.len(), 16);
   91|  3.17M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  3.17M|            }
_RNvXs1R_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCsjhTDs2LGHe5_11rand_chacha:
   18|  3.17M|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  3.17M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  3.17M|            }
_RNvXs2_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCsjhTDs2LGHe5_11rand_chacha:
 1439|  1.58M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  1.58M|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  1.58M|        }
_RNvXs2_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCsjhTDs2LGHe5_11rand_chacha:
 1430|  1.58M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  1.58M|            unsafe {
 1432|  1.58M|                [
 1433|  1.58M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  1.58M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  1.58M|                ]
 1436|  1.58M|            }
 1437|  1.58M|        }
_RNvXs6_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCsjhTDs2LGHe5_11rand_chacha:
  331|   198k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|   198k|        unsafe {
  333|   198k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|   198k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|   198k|            Self::new(x)
  336|   198k|        }
  337|   198k|    }
_RNvXs6_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCsjhTDs2LGHe5_11rand_chacha:
  323|   793k|    fn to_lanes(self) -> [u32; 4] {
  324|   793k|        unsafe {
  325|   793k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   793k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   793k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   793k|        }
  329|   793k|    }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CsjhTDs2LGHe5_11rand_chacha:
 1470|  4.76M|            fn $name(self) -> Self {
 1471|  4.76M|                Self::new(unsafe {
 1472|  4.76M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  4.76M|                })
 1474|  4.76M|            }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CsjhTDs2LGHe5_11rand_chacha:
 1480|  4.76M|            fn $name(self) -> Self {
 1481|  4.76M|                Self::new(unsafe {
 1482|  4.76M|                    _mm256_or_si256(
 1483|  4.76M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  4.76M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  4.76M|                    )
 1486|  4.76M|                })
 1487|  4.76M|            }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CsjhTDs2LGHe5_11rand_chacha:
 1470|  4.76M|            fn $name(self) -> Self {
 1471|  4.76M|                Self::new(unsafe {
 1472|  4.76M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  4.76M|                })
 1474|  4.76M|            }
_RNvXs6_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CsjhTDs2LGHe5_11rand_chacha:
 1480|  4.76M|            fn $name(self) -> Self {
 1481|  4.76M|                Self::new(unsafe {
 1482|  4.76M|                    _mm256_or_si256(
 1483|  4.76M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  4.76M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  4.76M|                    )
 1486|  4.76M|                })
 1487|  4.76M|            }
_RNvXsX_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCsjhTDs2LGHe5_11rand_chacha:
   52|  1.78M|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  1.78M|                Self::new(x.sse2)
   54|  1.78M|            }
_RNvXsc_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CsjhTDs2LGHe5_11rand_chacha:
 1582|  4.76M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  4.76M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  4.76M|        }
_RNvXsc_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CsjhTDs2LGHe5_11rand_chacha:
 1586|  4.76M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  4.76M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  4.76M|        }
_RNvXsc_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CsjhTDs2LGHe5_11rand_chacha:
 1590|  4.76M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  4.76M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  4.76M|        }
_RNvXse_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCsjhTDs2LGHe5_11rand_chacha:
 1602|   198k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|   198k|            Self::new([
 1604|   198k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|   198k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|   198k|            ])
 1607|   198k|        }
_RNvXsf_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCsjhTDs2LGHe5_11rand_chacha:
 1617|   793k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   793k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   793k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   793k|            Self::new([ab, cd])
 1621|   793k|        }
_RNvXsf_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCsjhTDs2LGHe5_11rand_chacha:
 1611|   793k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   793k|            let [a, b] = self.0[0].to_lanes();
 1613|   793k|            let [c, d] = self.0[1].to_lanes();
 1614|   793k|            [a, b, c, d]
 1615|   793k|        }
_RNvXsl_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCsjhTDs2LGHe5_11rand_chacha:
  523|  2.77M|    fn insert(self, v: u32, i: u32) -> Self {
  524|  2.77M|        Self::new(unsafe {
  525|  2.77M|            match i {
  526|  1.38M|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  1.38M|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  2.77M|    }
_RNvXsl_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCsjhTDs2LGHe5_11rand_chacha:
  519|   793k|    fn extract(self, i: u32) -> u32 {
  520|   793k|        self.to_lanes()[i as usize]
  521|   793k|    }
_RNvXsq_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCsjhTDs2LGHe5_11rand_chacha:
 1527|  19.0M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  19.0M|                    *self = self.$bin_fn(rhs);
 1529|  19.0M|                }
_RNvXsr_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCsjhTDs2LGHe5_11rand_chacha:
 1543|  19.0M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  19.0M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  19.0M|                }
_RNvXsv_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCsjhTDs2LGHe5_11rand_chacha:
 1543|  19.0M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  19.0M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  19.0M|                }
_RNvXsY_NtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCsjhTDs2LGHe5_11rand_chacha:
   58|   200k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|   200k|                vec128_storage { sse2: x.x }
   60|   200k|            }
_RNvXsj_NtNtNtCseaCfzRqAQoh_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCscdEvteftVc2_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCsjhTDs2LGHe5_11rand_chacha:
 1683|   198k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|   198k|            Self {
 1685|   198k|                avx: [
 1686|   198k|                    vec256_storage { avx: x.0[0].x },
 1687|   198k|                    vec256_storage { avx: x.0[1].x },
 1688|   198k|                ],
 1689|   198k|            }
 1690|   198k|        }

_RINvXs2_NtNtCsNnZqS58YXU_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECs2AU8mwnS1zT_5oxttl:
   51|  3.17M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  3.17M|        // Use LE; we explicitly generate one value before the next.
   53|  3.17M|        let x = u128::from(rng.next_u64());
   54|  3.17M|        let y = u128::from(rng.next_u64());
   55|  3.17M|        (y << 64) | x
   56|  3.17M|    }

_RINvCsNnZqS58YXU_4rand6randomoECs2AU8mwnS1zT_5oxttl:
  183|  3.17M|pub fn random<T>() -> T
  184|  3.17M|where Standard: Distribution<T> {
  185|  3.17M|    thread_rng().gen()
  186|  3.17M|}

_RINvYNtNtNtCsNnZqS58YXU_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECs2AU8mwnS1zT_5oxttl:
   93|  3.17M|    fn gen<T>(&mut self) -> T
   94|  3.17M|    where Standard: Distribution<T> {
   95|  3.17M|        Standard.sample(self)
   96|  3.17M|    }

_RNvXs_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngENtB23_7RngCore8next_u64Cs2AU8mwnS1zT_5oxttl:
  124|  6.35M|    fn next_u64(&mut self) -> u64 {
  125|  6.35M|        self.0.next_u64()
  126|  6.35M|    }
_RNvMNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngENtNtB25_5block12BlockRngCore8generateBb_:
  173|   198k|    fn generate(&mut self, results: &mut Self::Results) {
  174|   198k|        let global_fork_counter = fork::get_fork_counter();
  175|   198k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    775|            return self.reseed_and_generate(results, global_fork_counter);
  180|   197k|        }
  181|   197k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|   197k|        self.bytes_until_reseed -= num_bytes as i64;
  183|   197k|        self.inner.generate(results);
  184|   198k|    }
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE6reseedBb_:
  219|    775|    fn reseed(&mut self) -> Result<(), Error> {
  220|    775|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    775|        })
  224|    775|    }
_RNCNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE6reseed0Bd_:
  220|    775|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    775|            self.bytes_until_reseed = self.threshold;
  222|    775|            self.inner = result
  223|    775|        })
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE9is_forkedBb_:
  226|   198k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|   198k|        // In theory, on 32-bit platforms, it is possible for
  228|   198k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|   198k|        //
  230|   198k|        // This check will detect a fork in the normal case where
  231|   198k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|   198k|        // between both is greater than `isize::MAX` (wrapped around).
  233|   198k|        //
  234|   198k|        // It will still fail to detect a fork if there have been more than
  235|   198k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|   198k|        // enough.
  237|   198k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|   198k|    }
_RNvMs3_NtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    775|    fn reseed_and_generate(
  242|    775|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    775|    ) {
  244|    775|        #![allow(clippy::if_same_then_else)] // false positive
  245|    775|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    775|        } else {
  248|    775|            trace!("Reseeding RNG (periodic reseed)");
  249|    775|        }
  250|       |
  251|    775|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    775|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    775|        }
  257|    775|        self.fork_counter = global_fork_counter;
  258|    775|
  259|    775|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    775|        self.inner.generate(results);
  261|    775|    }
_RNvNtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|   198k|    pub fn get_fork_counter() -> usize {
  308|   198k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|   198k|    }
_RNvNtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsNnZqS58YXU_4rand4rngs6threadNtB4_9ThreadRngNtCs8qzC7aBl1xk_9rand_core7RngCore8next_u64:
  109|  6.35M|    fn next_u64(&mut self) -> u64 {
  110|  6.35M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  6.35M|        // creates another mutable reference
  112|  6.35M|        let rng = unsafe { &mut *self.rng.get() };
  113|  6.35M|        rng.next_u64()
  114|  6.35M|    }
_RNvNtNtCsNnZqS58YXU_4rand4rngs6thread10thread_rng:
   88|  3.17M|pub fn thread_rng() -> ThreadRng {
   89|  3.17M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  3.17M|    ThreadRng { rng }
   91|  3.17M|}
_RNCNvNtNtCsNnZqS58YXU_4rand4rngs6thread10thread_rng0B7_:
   89|  3.17M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCsjhTDs2LGHe5_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs8qzC7aBl1xk_9rand_core5block12BlockRngCore8generateCsNnZqS58YXU_4rand:
   89|   198k|            fn generate(&mut self, r: &mut Self::Results) {
   90|   198k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|   198k|                self.state.refill4($rounds, unsafe {
   92|   198k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|   198k|                });
   94|  12.7M|                for x in r.as_mut() {
   95|  12.7M|                    *x = x.to_le();
   96|  12.7M|                }
   97|   198k|            }
_RNvXsm_NtCsjhTDs2LGHe5_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs8qzC7aBl1xk_9rand_core11SeedableRng9from_seedCsNnZqS58YXU_4rand:
  103|    776|            fn from_seed(seed: Self::Seed) -> Self {
  104|    776|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    776|            }
_RNvXs_NtCsjhTDs2LGHe5_11rand_chacha6chachaINtB4_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsRefSmE6as_refB6_:
   46|  13.0M|    fn as_ref(&self) -> &[T] {
   47|  13.0M|        &self.0
   48|  13.0M|    }
_RNvXs0_NtCsjhTDs2LGHe5_11rand_chacha6chachaINtB5_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsMutSmE6as_mutB7_:
   51|   198k|    fn as_mut(&mut self) -> &mut [T] {
   52|   198k|        &mut self.0
   53|   198k|    }
_RNvXNtCsjhTDs2LGHe5_11rand_chacha6chachaINtB2_7Array64mENtNtCscdEvteftVc2_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCsjhTDs2LGHe5_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    776|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    776|        init_chacha(key, nonce)
   74|    776|    }
_RNvMNtCsjhTDs2LGHe5_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|   198k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|   198k|        refill_wide(self, drounds, out)
   86|   198k|    }
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts5roundINtNtCseaCfzRqAQoh_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  2.38M|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  2.38M|    x.a += x.b;
   45|  2.38M|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  2.38M|    x.c += x.d;
   47|  2.38M|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  2.38M|    x.a += x.b;
   49|  2.38M|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  2.38M|    x.c += x.d;
   51|  2.38M|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  2.38M|    x
   53|  2.38M|}
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts11diagonalizeINtNtCseaCfzRqAQoh_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  1.19M|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  1.19M|    x.b = x.b.shuffle_lane_words3012();
   58|  1.19M|    x.c = x.c.shuffle_lane_words2301();
   59|  1.19M|    x.d = x.d.shuffle_lane_words1230();
   60|  1.19M|    x
   61|  1.19M|}
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts13undiagonalizeINtNtCseaCfzRqAQoh_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  1.19M|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  1.19M|    x.b = x.b.shuffle_lane_words1230();
   65|  1.19M|    x.c = x.c.shuffle_lane_words2301();
   66|  1.19M|    x.d = x.d.shuffle_lane_words3012();
   67|  1.19M|    x
   68|  1.19M|}
_RINvMNtCsjhTDs2LGHe5_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   396k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   396k|        let d: M::u32x4 = m.unpack(self.d);
   79|   396k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   396k|    }
_RINvNtCsjhTDs2LGHe5_11rand_chacha4guts16refill_wide_implINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|   198k|fn refill_wide_impl<Mach: Machine>(
  117|   198k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|   198k|) {
  119|   198k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|   198k|    let mut pos = state.pos64(m);
  121|   198k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|   198k|    pos = pos.wrapping_add(1);
  123|   198k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|   198k|    pos = pos.wrapping_add(1);
  125|   198k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|   198k|    pos = pos.wrapping_add(1);
  127|   198k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|   198k|
  129|   198k|    let b = m.unpack(state.b);
  130|   198k|    let c = m.unpack(state.c);
  131|   198k|    let mut x = State {
  132|   198k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|   198k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|   198k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|   198k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|   198k|    };
  137|  1.19M|    for _ in 0..drounds {
  138|  1.19M|        x = round(x);
  139|  1.19M|        x = undiagonalize(round(diagonalize(x)));
  140|  1.19M|    }
  141|   198k|    let mut pos = state.pos64(m);
  142|   198k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|   198k|    pos = pos.wrapping_add(1);
  144|   198k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|   198k|    pos = pos.wrapping_add(1);
  146|   198k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|   198k|    pos = pos.wrapping_add(1);
  148|   198k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|   198k|    pos = pos.wrapping_add(1);
  150|   198k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|   198k|
  152|   198k|    let (a, b, c, d) = (
  153|   198k|        x.a.to_lanes(),
  154|   198k|        x.b.to_lanes(),
  155|   198k|        x.c.to_lanes(),
  156|   198k|        x.d.to_lanes(),
  157|   198k|    );
  158|   198k|    let sb = m.unpack(state.b);
  159|   198k|    let sc = m.unpack(state.c);
  160|   198k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|   198k|    state.d = d4.into();
  162|   198k|    let mut words = out.chunks_exact_mut(16);
  163|   793k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   793k|        (a + k).write_le(words.next().unwrap());
  165|   793k|        (b + sb).write_le(words.next().unwrap());
  166|   793k|        (c + sc).write_le(words.next().unwrap());
  167|   793k|        (d + sd).write_le(words.next().unwrap());
  168|   793k|    }
  169|   198k|}
_RNvNtCsjhTDs2LGHe5_11rand_chacha4guts10read_u32le:
  229|  1.55k|fn read_u32le(xs: &[u8]) -> u32 {
  230|  1.55k|    assert_eq!(xs.len(), 4);
  231|  1.55k|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|  1.55k|}
_RINvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11refill_wide7fn_implINtNtCseaCfzRqAQoh_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|   198k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|   198k|        refill_wide_impl(m, state, drounds, out);
  174|   198k|    }
_RINvNvNtCsjhTDs2LGHe5_11rand_chacha4guts11init_chacha7fn_implINtNtCseaCfzRqAQoh_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    776|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    776|        let ctr_nonce = [
  237|       |            0,
  238|    776|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    776|                0
  242|       |            },
  243|    776|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    776|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    776|        ];
  246|    776|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    776|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    776|        ChaCha {
  249|    776|            b: key0.into(),
  250|    776|            c: key1.into(),
  251|    776|            d: ctr_nonce.into(),
  252|    776|        }

_RNCNvXs0_NtCs8qzC7aBl1xk_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Cs2AU8mwnS1zT_5oxttl:
  198|  6.35M|        let read_u64 = |results: &[u32], index| {
  199|  6.35M|            let data = &results[index..=index + 1];
  200|  6.35M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  6.35M|        };
_RNvXs0_NtCs8qzC7aBl1xk_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Cs2AU8mwnS1zT_5oxttl:
  197|  6.35M|    fn next_u64(&mut self) -> u64 {
  198|  6.35M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  6.35M|        let len = self.results.as_ref().len();
  204|  6.35M|
  205|  6.35M|        let index = self.index;
  206|  6.35M|        if index < len - 1 {
  207|  6.15M|            self.index += 2;
  208|  6.15M|            // Read an u64 from the current index
  209|  6.15M|            read_u64(self.results.as_ref(), index)
  210|   198k|        } else if index >= len {
  211|   198k|            self.generate_and_set(2);
  212|   198k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  6.35M|    }
_RNvMs_NtCs8qzC7aBl1xk_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|   198k|    pub fn generate_and_set(&mut self, index: usize) {
  175|   198k|        assert!(index < self.results.as_ref().len());
  176|   198k|        self.core.generate(&mut self.results);
  177|   198k|        self.index = index;
  178|   198k|    }
_RNvMs_NtCs8qzC7aBl1xk_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsNnZqS58YXU_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtCs8qzC7aBl1xk_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsNnZqS58YXU_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCsjhTDs2LGHe5_11rand_chacha6chacha12ChaCha12CoreNtCs8qzC7aBl1xk_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsNnZqS58YXU_4rand:
  390|    775|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    775|        let mut seed = Self::Seed::default();
  392|    775|        rng.try_fill_bytes(seed.as_mut())?;
  393|    775|        Ok(Self::from_seed(seed))
  394|    775|    }
_RNvXs_Cs8qzC7aBl1xk_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsNnZqS58YXU_4rand:
  441|    775|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    775|        (**self).try_fill_bytes(dest)
  443|    775|    }

_RNvXs_NtCs8qzC7aBl1xk_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    776|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    776|        getrandom(dest)?;
   69|    776|        Ok(())
   70|    776|    }

_RNvNvNtNtCsNnZqS58YXU_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsNnZqS58YXU_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|  3.17M|            unsafe fn __getit(
   86|  3.17M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|  3.17M|            ) -> $crate::option::Option<&'static $t> {
   88|  3.17M|                #[thread_local]
   89|  3.17M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|  3.17M|                    $crate::thread::local_impl::Key::<$t>::new();
   91|  3.17M|
   92|  3.17M|                unsafe {
   93|  3.17M|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|  3.17M|                    })
  103|  3.17M|                }
  104|  3.17M|            }
_RNCNvNvNtNtCsNnZqS58YXU_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNCNvNvCs1y8UufSaGCW_2n31__19___libfuzzer_sys_run0B5_:
   12|  18.4M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvMNtCslyQBdJh0KVU_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCs2AU8mwnS1zT_5oxttl:
   62|  2.93k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  2.93k|        Self(BlankNodeContent::Anonymous {
   64|  2.93k|            id: id.to_ne_bytes(),
   65|  2.93k|            str: IdStr::new(id),
   66|  2.93k|        })
   67|  2.93k|    }
_RNvMs7_NtCslyQBdJh0KVU_5oxrdf10blank_nodeNtB5_5IdStr3newCs2AU8mwnS1zT_5oxttl:
  258|  3.17M|    fn new(id: u128) -> Self {
  259|  3.17M|        let mut str = [0; 32];
  260|  3.17M|        write!(&mut str[..], "{id:x}").unwrap();
  261|  3.17M|        Self(str)
  262|  3.17M|    }
_RNvMs7_NtCslyQBdJh0KVU_5oxrdf10blank_nodeNtB5_5IdStr6as_strCs2AU8mwnS1zT_5oxttl:
  265|  3.17M|    fn as_str(&self) -> &str {
  266|  3.17M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  3.17M|        str::from_utf8(&self.0[..len]).unwrap()
  268|  3.17M|    }
_RNvNtCslyQBdJh0KVU_5oxrdf10blank_node13to_integer_idCs2AU8mwnS1zT_5oxttl:
  331|  23.0k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  23.0k|    let digits = id.as_bytes();
  333|  23.0k|    let mut value: u128 = 0;
  334|  23.0k|    if let None | Some(b'0') = digits.first() {
  335|  11.9k|        return None; // No empty string or leading zeros
  336|  11.0k|    }
  337|  32.5k|    for digit in digits {
  338|  29.5k|        value = value.checked_mul(16)?.checked_add(
  339|  29.2k|            match *digit {
  340|  28.8k|                b'0'..=b'9' => digit - b'0',
  341|  23.1k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  7.77k|                _ => return None,
  343|       |            }
  344|  21.4k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  2.93k|    Some(value)
  348|  23.0k|}
_RNvXs0_NtCslyQBdJh0KVU_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCs2AU8mwnS1zT_5oxttl:
  109|  1.26M|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  3.17M|        loop {
  112|  3.17M|            let id = random();
  113|  3.17M|            let str = IdStr::new(id);
  114|  3.17M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|  1.26M|                return Self(BlankNodeContent::Anonymous {
  116|  1.26M|                    id: id.to_ne_bytes(),
  117|  1.26M|                    str,
  118|  1.26M|                });
  119|  1.90M|            }
  120|       |        }
  121|  1.26M|    }
_RINvMNtCslyQBdJh0KVU_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECs2AU8mwnS1zT_5oxttl:
   49|  23.0k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  23.0k|        let id = id.into();
   51|  23.0k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  2.93k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  20.0k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  23.0k|    }
_RNCNvMs7_NtCslyQBdJh0KVU_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   101M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCslyQBdJh0KVU_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  40.3k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  40.3k|        Self(LiteralContent::String(value.into()))
   49|  40.3k|    }
_RINvMNtCslyQBdJh0KVU_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  10.1k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  10.1k|        let value = value.into();
   55|  10.1k|        let datatype = datatype.into();
   56|  10.1k|        Self(if datatype == xsd::STRING {
   57|  3.23k|            LiteralContent::String(value)
   58|       |        } else {
   59|  6.94k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  10.1k|    }
_RINvMNtCslyQBdJh0KVU_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   144k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   144k|        let value = value.into();
   55|   144k|        let datatype = datatype.into();
   56|   144k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   144k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   144k|    }
_RINvMNtCslyQBdJh0KVU_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  4.56k|    pub fn new_language_tagged_literal_unchecked(
   86|  4.56k|        value: impl Into<String>,
   87|  4.56k|        language: impl Into<String>,
   88|  4.56k|    ) -> Self {
   89|  4.56k|        Self(LiteralContent::LanguageTaggedString {
   90|  4.56k|            value: value.into(),
   91|  4.56k|            language: language.into(),
   92|  4.56k|        })
   93|  4.56k|    }

_RNvMs4_NtCslyQBdJh0KVU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCs2AU8mwnS1zT_5oxttl:
  138|  93.7k|    pub fn into_owned(self) -> NamedNode {
  139|  93.7k|        NamedNode::new_unchecked(self.iri)
  140|  93.7k|    }
_RINvMNtCslyQBdJh0KVU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   186k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   186k|        Self { iri: iri.into() }
   41|   186k|    }
_RINvMNtCslyQBdJh0KVU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   253k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   253k|        Self { iri: iri.into() }
   41|   253k|    }
_RNvMNtCslyQBdJh0KVU_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   155k|    pub fn as_str(&self) -> &str {
   45|   155k|        self.iri.as_str()
   46|   155k|    }
_RNvMs4_NtCslyQBdJh0KVU_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   155k|    pub const fn as_str(self) -> &'a str {
  134|   155k|        self.iri
  135|   155k|    }
_RNvMs4_NtCslyQBdJh0KVU_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   144k|    pub fn into_owned(self) -> NamedNode {
  139|   144k|        NamedNode::new_unchecked(self.iri)
  140|   144k|    }
_RNvXs6_NtCslyQBdJh0KVU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   144k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   144k|        node.into_owned()
  154|   144k|    }
_RNvXs9_NtCslyQBdJh0KVU_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   155k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   155k|        self.as_str() == other.as_str()
  175|   155k|    }

_RNvXs1g_NtCslyQBdJh0KVU_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCs2AU8mwnS1zT_5oxttl:
  997|  36.2k|    fn from(node: BlankNode) -> Self {
  998|  36.2k|        Self::BlankNode(node)
  999|  36.2k|    }

_RINvMNtCslyQBdJh0KVU_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs2AU8mwnS1zT_5oxttl:
   35|  17.7k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  17.7k|        Self { name: name.into() }
   37|  17.7k|    }

_RNvXNtCs2AU8mwnS1zT_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  11.3M|    fn recognize_next_token<'a>(
   56|  11.3M|        &mut self,
   57|  11.3M|        data: &'a [u8],
   58|  11.3M|        is_ending: bool,
   59|  11.3M|        options: &N3LexerOptions,
   60|  11.3M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  11.3M|        match *data.first()? {
   62|  1.54M|            b'<' => match *data.get(1)? {
   63|  8.08k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  48.0k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  48.0k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  13.8k|                        Some(if let Ok(result) = result {
   67|  6.58k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  7.29k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  34.2k|                    } else if is_ending {
   72|  1.89k|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  32.3k|                        None
   75|       |                    }
   76|       |                }
   77|   173k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|   173k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  28.8k|                        Some(if let Ok(result) = result {
   80|  2.82k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  26.0k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|   144k|                    } else if is_ending {
   85|  38.4k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|   105k|                        None
   88|       |                    }
   89|       |                }
   90|  1.03M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   188k|                if *data.get(1)? == b'>' {
   94|  21.4k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   121k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  92.8k|            b'_' => match data.get(1)? {
  100|  63.7k|                b':' => Self::recognize_blank_node_label(data),
  101|  21.0k|                c => Some((
  102|  21.0k|                    1,
  103|  21.0k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  21.0k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  38.0k|                if self.mode != N3LexerMode::NTriples
  108|  38.0k|                    && *data.get(1)? == b'"'
  109|  26.3k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  18.2k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  17.4k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   172k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   172k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  34.4k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  96.4k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   758k|            b'@' => self.recognize_lang_tag(data),
  124|   910k|            b'.' => match data.get(1) {
  125|   605k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   751k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   107k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  38.5k|                if *data.get(1)? == b'^' {
  131|  25.3k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  10.3k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  86.2k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  31.3k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  1.11M|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  57.2k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   455k|                if *data.get(1)? == b'|' {
  142|  4.42k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   401k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  86.4k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  42.3k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  61.3k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  20.5k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  16.7k|                if *data.get(1)? == b'}' {
  153|  1.87k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  9.17k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   153k|                if *data.get(1)? == b'>' {
  160|  12.0k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  65.3k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  3.13M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   119k|            b'?' => self.recognize_variable(data, is_ending),
  167|  4.13M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  11.3M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  26.2k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  26.2k|        Self { mode, unchecked }
  175|  26.2k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  1.25M|    fn recognize_iri(
  178|  1.25M|        &self,
  179|  1.25M|        data: &[u8],
  180|  1.25M|        options: &N3LexerOptions,
  181|  1.25M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  1.25M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  1.25M|        let mut string = Vec::new();
  184|  1.25M|        let mut i = 1;
  185|       |        loop {
  186|  1.28M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   486k|            string.extend_from_slice(&data[i..i + end]);
  188|   486k|            i += end;
  189|   486k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   429k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  56.9k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  41.9k|                    i += additional + 1;
  197|  41.9k|                    match c {
  198|  28.1k|                        Ok(c) => {
  199|  28.1k|                            let mut buf = [0; 4];
  200|  28.1k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  28.1k|                        }
  202|  13.7k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  1.25M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   429k|    fn parse_iri(
  211|   429k|        &self,
  212|   429k|        iri: Vec<u8>,
  213|   429k|        position: Range<usize>,
  214|   429k|        options: &N3LexerOptions,
  215|   429k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   429k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   409k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   409k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   409k|                    base_iri
  223|   409k|                        .resolve(&iri)
  224|   409k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   303k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|   429k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  4.13M|    fn recognize_pname_or_keyword<'a>(
  238|  4.13M|        &self,
  239|  4.13M|        data: &'a [u8],
  240|  4.13M|        is_ending: bool,
  241|  4.13M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  4.13M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  4.13M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  4.13M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  4.13M|        let mut i = 0;
  246|       |        loop {
  247|  8.58M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  8.04M|                match r {
  249|  7.63M|                    Ok((c, consumed)) => {
  250|  7.63M|                        if c == ':' {
  251|  1.42M|                            i += consumed;
  252|  1.42M|                            break;
  253|  6.20M|                        } else if i == 0 {
  254|  2.72M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.33M|                                return Some((
  256|  1.33M|                                    consumed,
  257|  1.33M|                                    Err((
  258|  1.33M|                                        0..consumed,
  259|  1.33M|                                        format!(
  260|  1.33M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.33M|                                        ),
  262|  1.33M|                                    )
  263|  1.33M|                                        .into()),
  264|  1.33M|                                ));
  265|  1.38M|                            }
  266|  1.38M|                            i += consumed;
  267|  3.48M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  3.06M|                            i += consumed;
  269|  3.06M|                        } else {
  270|   494k|                            while data[..i].ends_with(b".") {
  271|  73.7k|                                i -= 1;
  272|  73.7k|                            }
  273|   420k|                            return Some((
  274|   420k|                                i,
  275|   420k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   420k|                            ));
  277|       |                        }
  278|       |                    }
  279|   415k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   536k|            } else if is_ending {
  282|  4.27k|                while data[..i].ends_with(b".") {
  283|    462|                    i -= 1;
  284|    462|                }
  285|  3.81k|                return Some(if i == 0 {
  286|    938|                    (
  287|    938|                        1,
  288|    938|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|    938|                    )
  290|       |                } else {
  291|  2.87k|                    (
  292|  2.87k|                        i,
  293|  2.87k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  2.87k|                    )
  295|       |                });
  296|       |            } else {
  297|   533k|                return None;
  298|       |            }
  299|       |        }
  300|  1.42M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  1.42M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  1.42M|        if pn_prefix.ends_with('.') {
  305|  1.17k|            return Some((
  306|  1.17k|                i,
  307|  1.17k|                Err((
  308|  1.17k|                    0..i,
  309|  1.17k|                    format!(
  310|  1.17k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  1.17k|                )
  312|  1.17k|                    .into()),
  313|  1.17k|            ));
  314|  1.42M|        }
  315|       |
  316|   500k|        let (consumed, pn_local_result) =
  317|  1.42M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   500k|        Some((
  319|   500k|            consumed + i,
  320|   500k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   500k|            }),
  325|   500k|        ))
  326|  4.13M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   119k|    fn recognize_variable<'a>(
  329|   119k|        &self,
  330|   119k|        data: &'a [u8],
  331|   119k|        is_ending: bool,
  332|   119k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   119k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  59.1k|        Some((
  336|  59.1k|            consumed + 1,
  337|  59.1k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  59.1k|            }),
  344|  59.1k|        ))
  345|   119k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  1.54M|    fn recognize_optional_pn_local<'a>(
  348|  1.54M|        &self,
  349|  1.54M|        data: &'a [u8],
  350|  1.54M|        is_ending: bool,
  351|  1.54M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  1.54M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  1.54M|        let mut i = 0;
  354|  1.54M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  1.54M|        let mut position_that_is_already_in_buffer = 0;
  356|  1.54M|        let mut might_be_invalid_iri = false;
  357|  1.54M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  3.49M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  2.54M|                match r {
  361|  2.51M|                    Ok((c, consumed)) => {
  362|  2.51M|                        if c == '%' {
  363|  51.3k|                            i += 1;
  364|  51.3k|                            let a = char::from(*data.get(i)?);
  365|  38.8k|                            i += 1;
  366|  38.8k|                            let b = char::from(*data.get(i)?);
  367|  33.5k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  7.57k|                                return Some((i + 1, Err((
  369|  7.57k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  7.57k|                                ).into())));
  371|  25.9k|                            }
  372|  25.9k|                            i += 1;
  373|  25.9k|                            ends_with_unescaped_dot = 0;
  374|  2.46M|                        } else if c == '\\' {
  375|   250k|                            i += 1;
  376|   250k|                            let a = char::from(*data.get(i)?);
  377|   226k|                            if self.unchecked
  378|   186k|                                || matches!(
  379|   226k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  39.5k|                            {
  396|  39.5k|                                // ok to escape
  397|   186k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   182k|                                // ok to escape but requires IRI validation
  399|   182k|                                might_be_invalid_iri = true;
  400|   182k|                            } else {
  401|  4.44k|                                return Some((i + 1, Err((
  402|  4.44k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  4.44k|                                ).into())));
  404|       |                            }
  405|   222k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   222k|                            // We add the missing bytes
  407|   222k|                            if i - position_that_is_already_in_buffer > 1 {
  408|   108k|                                buffer.push_str(
  409|   108k|                                    match str_from_utf8(
  410|   108k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   108k|                                        position_that_is_already_in_buffer..i - 1,
  412|   108k|                                    ) {
  413|   108k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   113k|                            }
  418|   222k|                            buffer.push(a);
  419|   222k|                            i += 1;
  420|   222k|                            position_that_is_already_in_buffer = i;
  421|   222k|                            ends_with_unescaped_dot = 0;
  422|  2.21M|                        } else if i == 0 {
  423|   832k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   300k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   532k|                            }
  427|   532k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|   532k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|   532k|                                        || c == ':';
  431|      0|                            }
  432|   532k|                            i += consumed;
  433|  1.37M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  1.05M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  1.05M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  1.05M|                                        || c == ':';
  438|      0|                            }
  439|  1.05M|                            i += consumed;
  440|  1.05M|                            ends_with_unescaped_dot = 0;
  441|   328k|                        } else if c == '.' {
  442|   116k|                            i += consumed;
  443|   116k|                            ends_with_unescaped_dot += 1;
  444|   116k|                        } else {
  445|   212k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  43.9k|                                buffer.push_str(
  447|  43.9k|                                    match str_from_utf8(
  448|  43.9k|                                        &data[position_that_is_already_in_buffer..i],
  449|  43.9k|                                        position_that_is_already_in_buffer..i,
  450|  43.9k|                                    ) {
  451|  43.9k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  43.9k|                                for _ in 0..ends_with_unescaped_dot {
  457|  17.0k|                                    buffer.pop();
  458|  17.0k|                                }
  459|  43.9k|                                i -= ends_with_unescaped_dot;
  460|  43.9k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   169k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   169k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   169k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   169k|                                i -= ends_with_unescaped_dot;
  469|   169k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   212k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  30.5k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|   945k|            } else if is_ending {
  477|  4.29k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|    960|                    while buffer.ends_with('.') {
  480|    405|                        buffer.pop();
  481|    405|                        i -= 1;
  482|    405|                    }
  483|    555|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  3.73k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  3.73k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  4.18k|                    while let Some(d) = data.strip_suffix('.') {
  491|    445|                        data = d;
  492|    445|                        i -= 1;
  493|    445|                    }
  494|  3.73k|                    Cow::Borrowed(data)
  495|       |                };
  496|  4.29k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|   941k|                return None;
  499|       |            }
  500|       |        }
  501|  1.54M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|  63.7k|    fn recognize_blank_node_label(
  504|  63.7k|        data: &[u8],
  505|  63.7k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|  63.7k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|  63.7k|        let mut i = 2;
  508|       |        loop {
  509|   191k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   153k|                Ok((c, consumed)) => {
  511|   153k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   129k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|   116k|                    {
  514|   116k|                        // Ok
  515|   116k|                    } else if i > 2 && c == '.' {
  516|  12.8k|                        if data[i - 1] == b'.' {
  517|  1.81k|                            i -= 1;
  518|  1.81k|                            return Some((
  519|  1.81k|                                i,
  520|  1.81k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  1.81k|                            ));
  522|  11.0k|                        }
  523|  24.1k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|  24.1k|                    } else if data[i - 1] == b'.' {
  529|  1.75k|                        i -= 1;
  530|  1.75k|                        return Some((
  531|  1.75k|                            i,
  532|  1.75k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.75k|                        ));
  534|       |                    } else {
  535|  22.4k|                        return Some((
  536|  22.4k|                            i,
  537|  22.4k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  22.4k|                        ));
  539|       |                    }
  540|   127k|                    i += consumed;
  541|       |                }
  542|  3.12k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|  63.7k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|   758k|    fn recognize_lang_tag<'a>(
  548|   758k|        &self,
  549|   758k|        data: &'a [u8],
  550|   758k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|   758k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|   758k|        let mut is_last_block_empty = true;
  553|  3.97M|        for (i, c) in data[1..].iter().enumerate() {
  554|  3.97M|            if c.is_ascii_alphabetic() {
  555|  3.56M|                is_last_block_empty = false;
  556|  3.56M|            } else if i == 0 {
  557|  87.8k|                return Some((
  558|  87.8k|                    1,
  559|  87.8k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  87.8k|                ));
  561|   314k|            } else if is_last_block_empty {
  562|  5.57k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   308k|            } else if *c == b'-' {
  564|   125k|                is_last_block_empty = true;
  565|   125k|            } else {
  566|   183k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|   481k|        None
  570|   758k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   189k|    fn parse_lang_tag<'a>(
  573|   189k|        &self,
  574|   189k|        lang_tag: &'a [u8],
  575|   189k|        position: Range<usize>,
  576|   189k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   189k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   189k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   189k|            LanguageTag::parse(lang_tag)
  582|   189k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   156k|                .into_inner()
  584|       |        }))
  585|   189k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   113k|    fn recognize_string(
  588|   113k|        data: &[u8],
  589|   113k|        delimiter: u8,
  590|   113k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|   113k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|   113k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|   113k|        let mut string = String::new();
  594|   113k|        let mut i = 1;
  595|       |        loop {
  596|   119k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|   106k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|   100k|                Ok(s) => string.push_str(s),
  599|  6.50k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|   100k|            i += end;
  602|   100k|            match data[i] {
  603|   100k|                c if c == delimiter => {
  604|  60.2k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|  39.8k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|  38.5k|                    i += additional + 1;
  609|  38.5k|                    match c {
  610|  5.22k|                        Ok(c) => {
  611|  5.22k|                            string.push(c);
  612|  5.22k|                        }
  613|  33.3k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|  33.3k|                            let end = memchr(delimiter, &data[i..])?;
  616|  8.64k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|   113k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|  52.6k|    fn recognize_long_string(
  626|  52.6k|        data: &[u8],
  627|  52.6k|        delimiter: u8,
  628|  52.6k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|  52.6k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|  52.6k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|  52.6k|        let mut string = String::new();
  632|  52.6k|        let mut i = 3;
  633|       |        loop {
  634|   110k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|  99.1k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|  94.7k|                Ok(s) => string.push_str(s),
  637|  4.40k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|  94.7k|            i += end;
  640|  94.7k|            match data[i] {
  641|  94.7k|                c if c == delimiter => {
  642|  87.4k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  29.7k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|  53.9k|                    }
  645|  53.9k|                    i += 1;
  646|  53.9k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  7.28k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  6.80k|                    i += additional + 1;
  651|  6.80k|                    match c {
  652|  3.77k|                        Ok(c) => {
  653|  3.77k|                            string.push(c);
  654|  3.77k|                        }
  655|  3.03k|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|  52.6k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|   466k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|   466k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  665|   466k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  666|   466k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|   466k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  668|   466k|        let mut i = 0;
  669|   466k|        let c = *data.first()?;
  670|   466k|        if matches!(c, b'+' | b'-') {
  671|   131k|            i += 1;
  672|   335k|        }
  673|       |        // We read the digits before .
  674|   466k|        let mut count_before: usize = 0;
  675|       |        loop {
  676|   836k|            let c = *data.get(i)?;
  677|   776k|            if c.is_ascii_digit() {
  678|   369k|                i += 1;
  679|   369k|                count_before += 1;
  680|   369k|            } else {
  681|   406k|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|   406k|        let count_after = if *data.get(i)? == b'.' {
  688|   126k|            i += 1;
  689|   126k|
  690|   126k|            let mut count_after = 0;
  691|       |            loop {
  692|   185k|                let c = *data.get(i)?;
  693|   143k|                if c.is_ascii_digit() {
  694|  59.7k|                    i += 1;
  695|  59.7k|                    count_after += 1;
  696|  59.7k|                } else {
  697|  83.6k|                    break;
  698|  83.6k|                }
  699|  83.6k|            }
  700|  83.6k|            Some(count_after)
  701|       |        } else {
  702|   280k|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|   364k|        let c = *data.get(i)?;
  707|   364k|        if matches!(c, b'e' | b'E') {
  708|  49.3k|            i += 1;
  709|       |
  710|  49.3k|            let c = *data.get(i)?;
  711|  37.1k|            if matches!(c, b'+' | b'-') {
  712|  3.15k|                i += 1;
  713|  33.9k|            }
  714|       |
  715|  37.1k|            let mut found = false;
  716|       |            loop {
  717|  78.2k|                let c = *data.get(i)?;
  718|  54.1k|                if c.is_ascii_digit() {
  719|  41.1k|                    i += 1;
  720|  41.1k|                    found = true;
  721|  41.1k|                } else {
  722|  13.0k|                    break;
  723|  13.0k|                }
  724|  13.0k|            }
  725|  13.0k|            Some((
  726|  13.0k|                i,
  727|  13.0k|                if !found {
  728|  6.31k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|  6.68k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|  1.78k|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|  4.90k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   314k|        } else if let Some(count_after) = count_after {
  736|  59.6k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|  41.4k|                i -= 1;
  739|  41.4k|                Some((
  740|  41.4k|                    i,
  741|  41.4k|                    if count_before == 0 {
  742|  11.6k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|  29.7k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  18.1k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   255k|                i,
  753|   255k|                if count_before == 0 {
  754|  46.9k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   208k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|   466k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|   104k|    fn recognize_escape(
  763|   104k|        data: &[u8],
  764|   104k|        position: usize,
  765|   104k|        with_echar: bool,
  766|   104k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|   104k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|   104k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  769|   104k|        match *data.get(1)? {
  770|  45.8k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  40.7k|                Ok(c) => Some((5, Ok(c?))),
  772|  5.14k|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  1.83k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|    602|                Ok(c) => Some((9, Ok(c?))),
  776|  1.22k|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    401|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    333|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|    748|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|    417|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|    464|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|    195|            b'"' if with_echar => Some((1, Ok('"'))),
  784|    602|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  5.62k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|  43.6k|            c => Some((
  787|  43.6k|                1,
  788|  43.6k|                Err((
  789|  43.6k|                    position..position + 2,
  790|  43.6k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|  43.6k|                )
  792|  43.6k|                    .into()),
  793|  43.6k|            )), // TODO: read until end of string
  794|       |        }
  795|   104k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|  47.7k|    fn recognize_hex_char(
  798|  47.7k|        data: &[u8],
  799|  47.7k|        len: usize,
  800|  47.7k|        escape_char: char,
  801|  47.7k|        position: usize,
  802|  47.7k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|  47.7k|        if data.len() < len {
  804|  12.9k|            return Ok(None);
  805|  34.7k|        }
  806|  34.7k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  30.3k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  30.3k|        })?;
  815|  28.5k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  28.5k|        })?;
  823|  28.3k|        Ok(Some(c))
  824|  47.7k|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  12.2M|    fn recognize_unicode_char(
  827|  12.2M|        data: &[u8],
  828|  12.2M|        position: usize,
  829|  12.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  12.2M|        let mut code_point: u32;
  831|  12.2M|        let bytes_needed: usize;
  832|  12.2M|        let mut lower_boundary = 0x80;
  833|  12.2M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  12.2M|        let byte = *data.first()?;
  836|  10.7M|        match byte {
  837|  10.7M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|  1.30M|            0xC2..=0xDF => {
  839|  1.08M|                bytes_needed = 1;
  840|  1.08M|                code_point = u32::from(byte) & 0x1F;
  841|  1.08M|            }
  842|   211k|            0xE0..=0xEF => {
  843|  86.1k|                if byte == 0xE0 {
  844|  9.24k|                    lower_boundary = 0xA0;
  845|  76.8k|                }
  846|  86.1k|                if byte == 0xED {
  847|  2.83k|                    upper_boundary = 0x9F;
  848|  83.2k|                }
  849|  86.1k|                bytes_needed = 2;
  850|  86.1k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|   124k|            0xF0..=0xF4 => {
  853|  61.7k|                if byte == 0xF0 {
  854|  1.87k|                    lower_boundary = 0x90;
  855|  59.8k|                }
  856|  61.7k|                if byte == 0xF4 {
  857|  1.45k|                    upper_boundary = 0x8F;
  858|  60.2k|                }
  859|  61.7k|                bytes_needed = 3;
  860|  61.7k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   305k|                return Some(Err((
  864|   305k|                    position..=position,
  865|   305k|                    "Invalid UTF-8 character encoding",
  866|   305k|                )
  867|   305k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|  1.37M|        for i in 1..=bytes_needed {
  872|  1.37M|            let byte = *data.get(i)?;
  873|  1.33M|            if byte < lower_boundary || upper_boundary < byte {
  874|   142k|                return Some(Err((
  875|   142k|                    position..=position + i,
  876|   142k|                    "Invalid UTF-8 character encoding",
  877|   142k|                )
  878|   142k|                    .into()));
  879|  1.19M|            }
  880|  1.19M|            lower_boundary = 0x80;
  881|  1.19M|            upper_boundary = 0xBF;
  882|  1.19M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  1.05M|        Some(
  886|  1.05M|            char::from_u32(code_point)
  887|  1.05M|                .map(|c| (c, bytes_needed + 1))
  888|  1.05M|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  1.05M|                }),
  895|  1.05M|        )
  896|  12.2M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  8.57M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  8.57M|        matches!(c,
  901|  5.03M|        'A'..='Z'
  902|  3.45M|        | 'a'..='z'
  903|  1.04M|        | '\u{00C0}'..='\u{00D6}'
  904|  1.04M|        | '\u{00D8}'..='\u{00F6}'
  905|  1.04M|        | '\u{00F8}'..='\u{02FF}'
  906|   791k|        | '\u{0370}'..='\u{037D}'
  907|   790k|        | '\u{037F}'..='\u{1FFF}'
  908|  82.8k|        | '\u{200C}'..='\u{200D}'
  909|  82.8k|        | '\u{2070}'..='\u{218F}'
  910|  82.8k|        | '\u{2C00}'..='\u{2FEF}'
  911|  82.8k|        | '\u{3001}'..='\u{D7FF}'
  912|  45.9k|        | '\u{F900}'..='\u{FDCF}'
  913|  45.9k|        | '\u{FDF0}'..='\u{FFFD}'
  914|  45.9k|        | '\u{10000}'..='\u{EFFFF}')
  915|  8.57M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  5.85M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  919|  5.85M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  5.85M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  4.98M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  924|  4.98M|        Self::is_possible_pn_chars_u(c)
  925|  1.74M|            || matches!(c,
  926|  1.15M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  4.98M|    }
_RNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|  1.58M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|  1.58M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|  1.58M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|  1.58M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|  1.58M|    }
_RNvNtCs2AU8mwnS1zT_5oxttl5lexer18resolve_local_name:
  936|   255k|pub fn resolve_local_name(
  937|   255k|    prefix: &str,
  938|   255k|    local: &str,
  939|   255k|    might_be_invalid_iri: bool,
  940|   255k|    prefixes: &HashMap<String, Iri<String>>,
  941|   255k|) -> Result<NamedNode, String> {
  942|   255k|    if let Some(start) = prefixes.get(prefix) {
  943|   192k|        let iri = format!("{start}{local}");
  944|   192k|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|   165k|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|  42.3k|                return Err(format!(
  948|  42.3k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|  42.3k|                ));
  950|   123k|            }
  951|  26.4k|        }
  952|   149k|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|  62.9k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|   255k|}
_RNvNtCs2AU8mwnS1zT_5oxttl5lexer13str_from_utf8:
  958|  2.89M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|  2.89M|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|  2.89M|    })
  966|  2.89M|}
_RNvNtCs2AU8mwnS1zT_5oxttl5lexer16string_from_utf8:
  968|   429k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|   429k|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|   429k|    })
  977|   429k|}
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|   106k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   465k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   465k|                prefix: pn_prefix,
  322|   465k|                local,
  323|   465k|                might_be_invalid_iri,
  324|   465k|            }),
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  51.6k|            result.and_then(|(name, _)| {
  338|  51.6k|                if name.is_empty() {
  339|  21.9k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  29.6k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  51.6k|            }),
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  33.1k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|  1.71k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|  1.71k|            (
  809|  1.71k|                position..position + len + 2,
  810|  1.71k|                format!(
  811|  1.71k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|  1.71k|                ),
  813|  1.71k|            )
  814|  1.71k|        })?;
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    194|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    194|            (
  817|    194|                position..position + len +2,
  818|    194|                format!(
  819|    194|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    194|                ),
  821|    194|            )
  822|    194|        })?;
_RNCNvMs_NtCs2AU8mwnS1zT_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  1.05M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCs2AU8mwnS1zT_5oxttl5lexer13str_from_utf80B5_:
  959|  15.3k|    str::from_utf8(data).map_err(|e| {
  960|  15.3k|        (
  961|  15.3k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  15.3k|            format!("Invalid UTF-8: {e}"),
  963|  15.3k|        )
  964|  15.3k|            .into()
  965|  15.3k|    })
_RNCNvNtCs2AU8mwnS1zT_5oxttl5lexer16string_from_utf80B5_:
  969|  19.9k|    String::from_utf8(data).map_err(|e| {
  970|  19.9k|        (
  971|  19.9k|            range.start + e.utf8_error().valid_up_to()
  972|  19.9k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  19.9k|            format!("Invalid UTF-8: {e}"),
  974|  19.9k|        )
  975|  19.9k|            .into()
  976|  19.9k|    })

_RNvMsb_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_8N3Parser3newCs1y8UufSaGCW_2n3:
  220|  26.2k|    pub fn new() -> Self {
  221|  26.2k|        Self::default()
  222|  26.2k|    }
_RINvMsb_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_8N3Parser13with_base_iriReECs1y8UufSaGCW_2n3:
  236|  26.2k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  237|  26.2k|        self.base = Some(Iri::parse(base_iri.into())?);
  238|  26.2k|        Ok(self)
  239|  26.2k|    }
_RNvXs_NtCs2AU8mwnS1zT_5oxttl2n3NtB4_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCslyQBdJh0KVU_5oxrdf10named_node9NamedNodeE4fromB6_:
   53|   191k|    fn from(node: NamedNode) -> Self {
   54|   191k|        Self::NamedNode(node)
   55|   191k|    }
_RNvXs0_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   60|  93.7k|    fn from(node: NamedNodeRef<'_>) -> Self {
   61|  93.7k|        Self::NamedNode(node.into_owned())
   62|  93.7k|    }
_RNvXs1_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCslyQBdJh0KVU_5oxrdf10blank_node9BlankNodeE4fromB7_:
   67|  1.09M|    fn from(node: BlankNode) -> Self {
   68|  1.09M|        Self::BlankNode(node)
   69|  1.09M|    }
_RNvXs2_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCslyQBdJh0KVU_5oxrdf7literal7LiteralE4fromB7_:
   74|   200k|    fn from(literal: Literal) -> Self {
   75|   200k|        Self::Literal(literal)
   76|   200k|    }
_RNvXs8_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCslyQBdJh0KVU_5oxrdf8variable8VariableE4fromB7_:
  132|  17.7k|    fn from(variable: Variable) -> Self {
  133|  17.7k|        Self::Variable(variable)
  134|  17.7k|    }
_RNvMsb_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_8N3Parser5parse:
  401|  26.2k|    pub fn parse(self) -> LowLevelN3Reader {
  402|  26.2k|        LowLevelN3Reader {
  403|  26.2k|            parser: N3Recognizer::new_parser(
  404|  26.2k|                Vec::new(),
  405|  26.2k|                false,
  406|  26.2k|                self.unchecked,
  407|  26.2k|                self.base,
  408|  26.2k|                self.prefixes,
  409|  26.2k|            ),
  410|  26.2k|        }
  411|  26.2k|    }
_RNvMsg_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  765|  4.44M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  766|  4.44M|        self.parser.extend_from_slice(other)
  767|  4.44M|    }
_RNvMsg_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  772|  26.2k|    pub fn end(&mut self) {
  773|  26.2k|        self.parser.end()
  774|  26.2k|    }
_RNvMsg_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  777|  26.2k|    pub fn is_end(&self) -> bool {
  778|  26.2k|        self.parser.is_end()
  779|  26.2k|    }
_RNvMsg_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  785|  7.38M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  786|  7.38M|        self.parser.read_next()
  787|  7.38M|    }
_RNvXsh_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  871|  2.16M|    fn error_recovery_state(mut self) -> Self {
  872|  2.16M|        self.stack.clear();
  873|  2.16M|        self.terms.clear();
  874|  2.16M|        self.predicates.clear();
  875|  2.16M|        self.contexts.clear();
  876|  2.16M|        self
  877|  2.16M|    }
_RNvXsh_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  879|  4.76M|    fn recognize_next(
  880|  4.76M|        mut self,
  881|  4.76M|        token: N3Token<'_>,
  882|  4.76M|        context: &mut N3RecognizerContext,
  883|  4.76M|        results: &mut Vec<N3Quad>,
  884|  4.76M|        errors: &mut Vec<RuleRecognizerError>,
  885|  4.76M|    ) -> Self {
  886|  12.8M|        while let Some(rule) = self.stack.pop() {
  887|  10.7M|            match rule {
  888|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  889|       |                // [2]  n3Statement      ::=  n3Directive | triples
  890|       |                // [3]  n3Directive      ::=  prefixID | base
  891|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  892|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  893|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  894|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  895|       |                // [8]  base             ::=  "@base" IRIREF
  896|       |                N3State::N3Doc => {
  897|   693k|                    self.stack.push(N3State::N3Doc);
  898|  62.8k|                    match token {
  899|  96.6k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  900|  33.8k|                            self.stack.push(N3State::BaseExpectIri);
  901|  33.8k|                            return self;
  902|       |                        }
  903|  62.8k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  904|  1.95k|                            self.stack.push(N3State::PrefixExpectPrefix);
  905|  1.95k|                            return self;
  906|       |                        }
  907|   114k|                        N3Token::LangTag("prefix") => {
  908|  92.3k|                            self.stack.push(N3State::N3DocExpectDot);
  909|  92.3k|                            self.stack.push(N3State::PrefixExpectPrefix);
  910|  92.3k|                            return self;
  911|       |                        }
  912|  22.5k|                        N3Token::LangTag("base") => {
  913|  1.49k|                            self.stack.push(N3State::N3DocExpectDot);
  914|  1.49k|                            self.stack.push(N3State::BaseExpectIri);
  915|  1.49k|                            return self;
  916|       |                        }
  917|   563k|                        _ => {
  918|   563k|                            self.stack.push(N3State::N3DocExpectDot);
  919|   563k|                            self.stack.push(N3State::Triples);
  920|   563k|                        }
  921|       |                    }
  922|       |                }
  923|       |                N3State::N3DocExpectDot => {
  924|  98.9k|                    if token == N3Token::Punctuation(".") {
  925|  39.2k|                        return self;
  926|  59.7k|                    }
  927|  59.7k|                    errors.push("A dot is expected at the end of N3 statements".into());
  928|       |                }
  929|  38.1k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  930|  32.4k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  931|  32.4k|                                self
  932|       |                    } else {
  933|  5.71k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  934|       |                },
  935|  82.5k|                N3State::PrefixExpectPrefix => return match token {
  936|  82.5k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  937|  79.4k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  938|  79.4k|                        self
  939|       |                    }
  940|       |                    _ => {
  941|  13.0k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  942|       |                    }
  943|       |                },
  944|  73.8k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  945|  70.7k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  946|  70.7k|                    self
  947|  3.08k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  948|       |                },
  949|       |                // [9]  triples  ::=  subject predicateObjectList?
  950|   854k|                N3State::Triples => {
  951|   854k|                    self.stack.push(N3State::TriplesMiddle);
  952|   854k|                    self.stack.push(N3State::Path);
  953|   854k|                }
  954|   161k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  955|   112k|                    self.stack.push(N3State::TriplesEnd);
  956|   112k|                    self.stack.push(N3State::PredicateObjectList);
  957|   112k|                },
  958|  31.0k|                N3State::TriplesEnd => {
  959|  31.0k|                    self.terms.pop();
  960|  31.0k|                }
  961|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  962|   981k|                N3State::PredicateObjectList => {
  963|   981k|                    self.stack.push(N3State::PredicateObjectListEnd);
  964|   981k|                    self.stack.push(N3State::ObjectsList);
  965|   981k|                    self.stack.push(N3State::Verb);
  966|   981k|                }
  967|       |                N3State::PredicateObjectListEnd => {
  968|   103k|                    self.predicates.pop();
  969|   103k|                    if token == N3Token::Punctuation(";") {
  970|  13.7k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  971|  13.7k|                        return self;
  972|  89.7k|                    }
  973|       |                }
  974|  29.9k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  975|  16.4k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  976|  16.4k|                    return self;
  977|  13.4k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  978|  5.27k|                    self.stack.push(N3State::PredicateObjectListEnd);
  979|  5.27k|                    self.stack.push(N3State::ObjectsList);
  980|  5.27k|                    self.stack.push(N3State::Verb);
  981|  5.27k|                },
  982|       |                // [11]  objectList  ::=  object ( "," object) *
  983|   201k|                N3State::ObjectsList => {
  984|   201k|                    self.stack.push(N3State::ObjectsListEnd);
  985|   201k|                    self.stack.push(N3State::Path);
  986|   201k|                }
  987|       |                N3State::ObjectsListEnd => {
  988|   106k|                    let object = self.terms.pop().unwrap();
  989|   106k|                    let subject = self.terms.last().unwrap().clone();
  990|   106k|                    results.push(match self.predicates.last().unwrap().clone() {
  991|  65.2k|                        Predicate::Regular(predicate) => self.quad(
  992|  65.2k|                            subject,
  993|  65.2k|                            predicate,
  994|  65.2k|                            object,
  995|  65.2k|                        ),
  996|  41.5k|                        Predicate::Inverted(predicate) => self.quad(
  997|  41.5k|                            object,
  998|  41.5k|                            predicate,
  999|  41.5k|                            subject,
 1000|  41.5k|                        )
 1001|       |                    });
 1002|   106k|                    if token == N3Token::Punctuation(",") {
 1003|  3.34k|                        self.stack.push(N3State::ObjectsListEnd);
 1004|  3.34k|                        self.stack.push(N3State::Path);
 1005|  3.34k|                        return self;
 1006|   103k|                    }
 1007|       |                }
 1008|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
 1009|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
 1010|   986k|                N3State::Verb => match token {
 1011|  28.9k|                    N3Token::PlainKeyword("a") => {
 1012|  13.9k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
 1013|  13.9k|                        return self;
 1014|       |                    }
 1015|  15.0k|                    N3Token::PlainKeyword("has") => {
 1016|  1.14k|                        self.stack.push(N3State::AfterRegularVerb);
 1017|  1.14k|                        self.stack.push(N3State::Path);
 1018|  1.14k|                        return self;
 1019|       |                    }
 1020|  13.8k|                    N3Token::PlainKeyword("is") => {
 1021|  3.67k|                        self.stack.push(N3State::AfterVerbIs);
 1022|  3.67k|                        self.stack.push(N3State::Path);
 1023|  3.67k|                        return self;
 1024|       |                    }
 1025|   771k|                    N3Token::Punctuation("=") => {
 1026|  6.89k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
 1027|  6.89k|                        return self;
 1028|       |                    }
 1029|   764k|                    N3Token::Punctuation("=>") => {
 1030|  7.40k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1031|  7.40k|                        return self;
 1032|       |                    }
 1033|   757k|                    N3Token::Punctuation("<=") => {
 1034|    701|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1035|    701|                        return self;
 1036|       |                    }
 1037|   756k|                    N3Token::Punctuation("<-") => {
 1038|  41.8k|                        self.stack.push(N3State::AfterInvertedVerb);
 1039|  41.8k|                        self.stack.push(N3State::Path);
 1040|  41.8k|                        return self;
 1041|       |                    }
 1042|   911k|                    _ => {
 1043|   911k|                        self.stack.push(N3State::AfterRegularVerb);
 1044|   911k|                        self.stack.push(N3State::Path);
 1045|   911k|                    }
 1046|       |                }
 1047|   132k|                N3State::AfterRegularVerb => {
 1048|   132k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
 1049|   132k|                }
 1050|  41.6k|                N3State::AfterInvertedVerb => {
 1051|  41.6k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1052|  41.6k|                }
 1053|  3.65k|                N3State::AfterVerbIs => return match token {
 1054|  2.96k|                    N3Token::PlainKeyword("of") => {
 1055|  1.57k|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1056|  1.57k|                        self
 1057|       |                    }
 1058|       |                    _ => {
 1059|  2.08k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
 1060|       |                    }
 1061|       |                },
 1062|       |                // [13]  subject     ::=  expression
 1063|       |                // [15]  object      ::=  expression
 1064|       |                // [16]  expression  ::=  path
 1065|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
 1066|  2.08M|                N3State::Path => {
 1067|  2.08M|                    self.stack.push(N3State::PathFollowUp);
 1068|  2.08M|                    self.stack.push(N3State::PathItem);
 1069|  2.08M|                }
 1070|   484k|                N3State::PathFollowUp => match token {
 1071|   362k|                    N3Token::Punctuation("!") => {
 1072|  2.94k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
 1073|  2.94k|                        self.stack.push(N3State::PathItem);
 1074|  2.94k|                        return self;
 1075|       |                    }
 1076|   359k|                    N3Token::Punctuation("^") => {
 1077|  3.42k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
 1078|  3.42k|                        self.stack.push(N3State::PathItem);
 1079|  3.42k|                        return self;
 1080|       |                    }
 1081|   478k|                    _ => ()
 1082|       |                },
 1083|  4.77k|                N3State::PathAfterIndicator { is_inverse } => {
 1084|  4.77k|                    let predicate = self.terms.pop().unwrap();
 1085|  4.77k|                    let previous = self.terms.pop().unwrap();
 1086|  4.77k|                    let current = BlankNode::default();
 1087|  4.77k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
 1088|  4.77k|                    self.terms.push(current.into());
 1089|  4.77k|                    self.stack.push(N3State::PathFollowUp);
 1090|       |                }
 1091|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
 1092|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
 1093|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
 1094|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
 1095|       |                // [22]  collection             ::=  "(" object* ")"
 1096|       |                // [23]  formula                ::=  "{" formulaContent? "}"
 1097|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
 1098|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
 1099|       |                // [27]  iri                    ::=  IRIREF | prefixedName
 1100|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
 1101|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
 1102|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
 1103|       |                N3State::PathItem => {
 1104|  2.09M|                    return match token {
 1105|  33.5k|                        N3Token::IriRef(iri) => {
 1106|  33.5k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
 1107|  33.5k|                            self
 1108|       |                        }
 1109|   239k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1110|   141k|                            Ok(t) => {
 1111|   141k|                                self.terms.push(t.into());
 1112|   141k|                                self
 1113|       |                            }
 1114|  98.1k|                            Err(e) =>  self.error(errors, e)
 1115|       |                        }
 1116|  23.0k|                        N3Token::BlankNodeLabel(bnode) => {
 1117|  23.0k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
 1118|  23.0k|                            self
 1119|       |                        }
 1120|  17.7k|                        N3Token::Variable(name) => {
 1121|  17.7k|                            self.terms.push(Variable::new_unchecked(name).into());
 1122|  17.7k|                            self
 1123|       |                        }
 1124|  1.44M|                        N3Token::Punctuation("[") => {
 1125|   893k|                            self.stack.push(N3State::PropertyListMiddle);
 1126|   893k|                            self
 1127|       |                        }
 1128|   555k|                        N3Token::Punctuation("(") => {
 1129|  56.9k|                            self.stack.push(N3State::CollectionBeginning);
 1130|  56.9k|                            self
 1131|       |                        }
 1132|  67.9k|                        N3Token::String(value) => {
 1133|  67.9k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
 1134|  67.9k|                            self
 1135|       |                        }
 1136|   123k|                        N3Token::Integer(v) => {
 1137|   123k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
 1138|   123k|                            self
 1139|       |                        }
 1140|  13.1k|                        N3Token::Decimal(v) => {
 1141|  13.1k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1142|  13.1k|                            self
 1143|       |                        }
 1144|  4.70k|                        N3Token::Double(v) => {
 1145|  4.70k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1146|  4.70k|                            self
 1147|       |                        }
 1148|  90.3k|                        N3Token::PlainKeyword("true") => {
 1149|  1.37k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1150|  1.37k|                            self
 1151|       |                        }
 1152|  88.9k|                        N3Token::PlainKeyword("false") => {
 1153|  1.96k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1154|  1.96k|                            self
 1155|       |                        }
 1156|   498k|                        N3Token::Punctuation("{") => {
 1157|   320k|                            self.contexts.push(BlankNode::default());
 1158|   320k|                            self.stack.push(N3State::FormulaContent);
 1159|   320k|                            self
 1160|       |                        }
 1161|       |                        _ =>
 1162|   297k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1163|       |
 1164|       |                    }
 1165|       |                }
 1166|   879k|                N3State::PropertyListMiddle => match token {
 1167|   701k|                    N3Token::Punctuation("]") => {
 1168|  2.82k|                        self.terms.push(BlankNode::default().into());
 1169|  2.82k|                        return self;
 1170|       |                    }
 1171|  32.2k|                    N3Token::PlainKeyword("id") => {
 1172|  8.55k|                        self.stack.push(N3State::IriPropertyList);
 1173|  8.55k|                        return self;
 1174|       |                    }
 1175|   868k|                    _ => {
 1176|   868k|                        self.terms.push(BlankNode::default().into());
 1177|   868k|                        self.stack.push(N3State::PropertyListEnd);
 1178|   868k|                        self.stack.push(N3State::PredicateObjectList);
 1179|   868k|                    }
 1180|       |                }
 1181|  66.8k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1182|  2.78k|                    return self;
 1183|  64.0k|                } else {
 1184|  64.0k|                    errors.push("blank node property lists should end with a ']'".into());
 1185|  64.0k|                }
 1186|  7.58k|                N3State::IriPropertyList => return match token {
 1187|    717|                    N3Token::IriRef(id) => {
 1188|    717|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1189|    717|                        self.stack.push(N3State::PropertyListEnd);
 1190|    717|                        self.stack.push(N3State::PredicateObjectList);
 1191|    717|                        self
 1192|       |                    }
 1193|  5.64k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1194|    756|                        Ok(t) => {
 1195|    756|                            self.terms.push(t.into());
 1196|    756|                            self.stack.push(N3State::PropertyListEnd);
 1197|    756|                            self.stack.push(N3State::PredicateObjectList);
 1198|    756|                            self
 1199|       |                        }
 1200|  4.89k|                        Err(e) => {
 1201|  4.89k|                            self.error(errors, e)
 1202|       |                        }
 1203|       |                    }
 1204|       |                    _ => {
 1205|  1.22k|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1206|       |                    }
 1207|       |                },
 1208|  55.5k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1209|  5.65k|                    self.terms.push(rdf::NIL.into());
 1210|  5.65k|                    return self;
 1211|  49.8k|                } else {
 1212|  49.8k|                    let root = BlankNode::default();
 1213|  49.8k|                    self.terms.push(root.clone().into());
 1214|  49.8k|                    self.terms.push(root.into());
 1215|  49.8k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1216|  49.8k|                    self.stack.push(N3State::Path);
 1217|  49.8k|                },
 1218|       |                N3State::CollectionPossibleEnd => {
 1219|  32.4k|                    let value = self.terms.pop().unwrap();
 1220|  32.4k|                    let old = self.terms.pop().unwrap();
 1221|  32.4k|                    results.push(self.quad(
 1222|  32.4k|                        old.clone(),
 1223|  32.4k|                        rdf::FIRST,
 1224|  32.4k|                        value,
 1225|  32.4k|                    ));
 1226|  32.4k|                    if let N3Token::Punctuation(")") = token {
 1227|  9.24k|                        results.push(self.quad(
 1228|  9.24k|                            old,
 1229|  9.24k|                            rdf::REST,
 1230|  9.24k|                            rdf::NIL,
 1231|  9.24k|                        ));
 1232|  9.24k|                        return self;
 1233|  23.2k|                    }
 1234|  23.2k|                    let new = BlankNode::default();
 1235|  23.2k|                    results.push(self.quad(
 1236|  23.2k|                        old,
 1237|  23.2k|                        rdf::REST,
 1238|  23.2k|                        new.clone(),
 1239|  23.2k|                    ));
 1240|  23.2k|                    self.terms.push(new.into());
 1241|  23.2k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1242|  23.2k|                    self.stack.push(N3State::Path);
 1243|       |                }
 1244|  64.1k|                N3State::LiteralPossibleSuffix { value } => {
 1245|  64.1k|                    match token {
 1246|  4.56k|                        N3Token::LangTag(lang) => {
 1247|  4.56k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1248|  4.56k|                            return self;
 1249|       |                        }
 1250|  27.6k|                        N3Token::Punctuation("^^") => {
 1251|  19.2k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1252|  19.2k|                            return self;
 1253|       |                        }
 1254|  40.3k|                        _ => {
 1255|  40.3k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1256|  40.3k|                        }
 1257|       |                    }
 1258|       |                }
 1259|  17.9k|                N3State::LiteralExpectDatatype { value } => {
 1260|  17.9k|                    match token {
 1261|  2.10k|                        N3Token::IriRef(datatype) => {
 1262|  2.10k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1263|  2.10k|                            return self;
 1264|       |                        }
 1265|  10.4k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1266|  8.08k|                            Ok(datatype) => {
 1267|  8.08k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1268|  8.08k|                                return self;
 1269|       |                            }
 1270|  2.32k|                            Err(e) => {
 1271|  2.32k|                                return self.error(errors, e);
 1272|       |                            }
 1273|       |                        }
 1274|  5.42k|                        _ => {
 1275|  5.42k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1276|  5.42k|                            self.stack.clear();
 1277|  5.42k|                        }
 1278|       |                    }
 1279|       |                }
 1280|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1281|       |                N3State::FormulaContent => {
 1282|  16.9k|                    match token {
 1283|   272k|                        N3Token::Punctuation("}") => {
 1284|  34.1k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1285|  34.1k|                            return self;
 1286|       |                        }
 1287|  18.9k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1288|  1.95k|                            self.stack.push(N3State::FormulaContent);
 1289|  1.95k|                            self.stack.push(N3State::BaseExpectIri);
 1290|  1.95k|                            return self;
 1291|       |                        }
 1292|  16.9k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1293|    798|                            self.stack.push(N3State::FormulaContent);
 1294|    798|                            self.stack.push(N3State::PrefixExpectPrefix);
 1295|    798|                            return self;
 1296|       |                        }
 1297|  13.3k|                        N3Token::LangTag("prefix") => {
 1298|  1.58k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1299|  1.58k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1300|  1.58k|                            return self;
 1301|       |                        }
 1302|  11.7k|                        N3Token::LangTag("base") => {
 1303|  2.24k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1304|  2.24k|                            self.stack.push(N3State::BaseExpectIri);
 1305|  2.24k|                            return self;
 1306|       |                        }
 1307|   291k|                        _ => {
 1308|   291k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1309|   291k|                            self.stack.push(N3State::Triples);
 1310|   291k|                        }
 1311|       |                    }
 1312|       |                }
 1313|       |                N3State::FormulaContentExpectDot => {
 1314|  29.7k|                    match token {
 1315|  27.2k|                        N3Token::Punctuation("}") => {
 1316|  14.2k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1317|  14.2k|                            return self;
 1318|       |                        }
 1319|  12.9k|                        N3Token::Punctuation(".") => {
 1320|  4.11k|                            self.stack.push(N3State::FormulaContent);
 1321|  4.11k|                            return self;
 1322|       |                        }
 1323|  11.3k|                        _ => {
 1324|  11.3k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1325|  11.3k|                            self.stack.push(N3State::FormulaContent);
 1326|  11.3k|                        }
 1327|       |                    }
 1328|       |                }
 1329|       |            }
 1330|       |        }
 1331|       |        // Empty stack
 1332|  2.04M|        if token == N3Token::Punctuation(".") {
 1333|   625k|            self.stack.push(N3State::N3Doc);
 1334|   625k|            self
 1335|       |        } else {
 1336|  1.41M|            self
 1337|       |        }
 1338|  4.76M|    }
_RNvXsh_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1340|  26.2k|    fn recognize_end(
 1341|  26.2k|        self,
 1342|  26.2k|        _state: &mut N3RecognizerContext,
 1343|  26.2k|        _results: &mut Vec<Self::Output>,
 1344|  26.2k|        errors: &mut Vec<RuleRecognizerError>,
 1345|  26.2k|    ) {
 1346|  26.2k|        match &*self.stack {
 1347|  26.2k|            [] | [N3State::N3Doc] => (),
 1348|  4.01k|            _ => errors.push("Unexpected end".into()), // TODO
 1349|       |        }
 1350|  26.2k|    }
_RNvXsh_NtCs2AU8mwnS1zT_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1352|  11.4M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1353|  11.4M|        &context.lexer_options
 1354|  11.4M|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB8_:
 1358|  26.2k|    pub fn new_parser<B>(
 1359|  26.2k|        data: B,
 1360|  26.2k|        is_ending: bool,
 1361|  26.2k|        unchecked: bool,
 1362|  26.2k|        base_iri: Option<Iri<String>>,
 1363|  26.2k|        prefixes: HashMap<String, Iri<String>>,
 1364|  26.2k|    ) -> Parser<B, Self> {
 1365|  26.2k|        Parser::new(
 1366|  26.2k|            Lexer::new(
 1367|  26.2k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1368|  26.2k|                data,
 1369|  26.2k|                is_ending,
 1370|  26.2k|                MIN_BUFFER_SIZE,
 1371|  26.2k|                MAX_BUFFER_SIZE,
 1372|  26.2k|                true,
 1373|  26.2k|                Some(b"#"),
 1374|  26.2k|            ),
 1375|  26.2k|            Self {
 1376|  26.2k|                stack: vec![N3State::N3Doc],
 1377|  26.2k|                terms: Vec::new(),
 1378|  26.2k|                predicates: Vec::new(),
 1379|  26.2k|                contexts: Vec::new(),
 1380|  26.2k|            },
 1381|  26.2k|            N3RecognizerContext {
 1382|  26.2k|                lexer_options: N3LexerOptions { base_iri },
 1383|  26.2k|                prefixes,
 1384|  26.2k|            },
 1385|  26.2k|        )
 1386|  26.2k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
 1389|   105k|    fn error(
 1390|   105k|        mut self,
 1391|   105k|        errors: &mut Vec<RuleRecognizerError>,
 1392|   105k|        msg: impl Into<RuleRecognizerError>,
 1393|   105k|    ) -> Self {
 1394|   105k|        errors.push(msg.into());
 1395|   105k|        self.stack.clear();
 1396|   105k|        self
 1397|   105k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1389|   322k|    fn error(
 1390|   322k|        mut self,
 1391|   322k|        errors: &mut Vec<RuleRecognizerError>,
 1392|   322k|        msg: impl Into<RuleRecognizerError>,
 1393|   322k|    ) -> Self {
 1394|   322k|        errors.push(msg.into());
 1395|   322k|        self.stack.clear();
 1396|   322k|        self
 1397|   322k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1399|   106k|    fn quad(
 1400|   106k|        &self,
 1401|   106k|        subject: impl Into<N3Term>,
 1402|   106k|        predicate: impl Into<N3Term>,
 1403|   106k|        object: impl Into<N3Term>,
 1404|   106k|    ) -> N3Quad {
 1405|   106k|        N3Quad {
 1406|   106k|            subject: subject.into(),
 1407|   106k|            predicate: predicate.into(),
 1408|   106k|            object: object.into(),
 1409|   106k|            graph_name: self
 1410|   106k|                .contexts
 1411|   106k|                .last()
 1412|   106k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|   106k|        }
 1414|   106k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCslyQBdJh0KVU_5oxrdf10blank_node9BlankNodeEB8_:
 1399|  2.67k|    fn quad(
 1400|  2.67k|        &self,
 1401|  2.67k|        subject: impl Into<N3Term>,
 1402|  2.67k|        predicate: impl Into<N3Term>,
 1403|  2.67k|        object: impl Into<N3Term>,
 1404|  2.67k|    ) -> N3Quad {
 1405|  2.67k|        N3Quad {
 1406|  2.67k|            subject: subject.into(),
 1407|  2.67k|            predicate: predicate.into(),
 1408|  2.67k|            object: object.into(),
 1409|  2.67k|            graph_name: self
 1410|  2.67k|                .contexts
 1411|  2.67k|                .last()
 1412|  2.67k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  2.67k|        }
 1414|  2.67k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1399|  9.24k|    fn quad(
 1400|  9.24k|        &self,
 1401|  9.24k|        subject: impl Into<N3Term>,
 1402|  9.24k|        predicate: impl Into<N3Term>,
 1403|  9.24k|        object: impl Into<N3Term>,
 1404|  9.24k|    ) -> N3Quad {
 1405|  9.24k|        N3Quad {
 1406|  9.24k|            subject: subject.into(),
 1407|  9.24k|            predicate: predicate.into(),
 1408|  9.24k|            object: object.into(),
 1409|  9.24k|            graph_name: self
 1410|  9.24k|                .contexts
 1411|  9.24k|                .last()
 1412|  9.24k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  9.24k|        }
 1414|  9.24k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1399|  32.4k|    fn quad(
 1400|  32.4k|        &self,
 1401|  32.4k|        subject: impl Into<N3Term>,
 1402|  32.4k|        predicate: impl Into<N3Term>,
 1403|  32.4k|        object: impl Into<N3Term>,
 1404|  32.4k|    ) -> N3Quad {
 1405|  32.4k|        N3Quad {
 1406|  32.4k|            subject: subject.into(),
 1407|  32.4k|            predicate: predicate.into(),
 1408|  32.4k|            object: object.into(),
 1409|  32.4k|            graph_name: self
 1410|  32.4k|                .contexts
 1411|  32.4k|                .last()
 1412|  32.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  32.4k|        }
 1414|  32.4k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1399|  23.2k|    fn quad(
 1400|  23.2k|        &self,
 1401|  23.2k|        subject: impl Into<N3Term>,
 1402|  23.2k|        predicate: impl Into<N3Term>,
 1403|  23.2k|        object: impl Into<N3Term>,
 1404|  23.2k|    ) -> N3Quad {
 1405|  23.2k|        N3Quad {
 1406|  23.2k|            subject: subject.into(),
 1407|  23.2k|            predicate: predicate.into(),
 1408|  23.2k|            object: object.into(),
 1409|  23.2k|            graph_name: self
 1410|  23.2k|                .contexts
 1411|  23.2k|                .last()
 1412|  23.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  23.2k|        }
 1414|  23.2k|    }
_RINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCslyQBdJh0KVU_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1399|  2.09k|    fn quad(
 1400|  2.09k|        &self,
 1401|  2.09k|        subject: impl Into<N3Term>,
 1402|  2.09k|        predicate: impl Into<N3Term>,
 1403|  2.09k|        object: impl Into<N3Term>,
 1404|  2.09k|    ) -> N3Quad {
 1405|  2.09k|        N3Quad {
 1406|  2.09k|            subject: subject.into(),
 1407|  2.09k|            predicate: predicate.into(),
 1408|  2.09k|            object: object.into(),
 1409|  2.09k|            graph_name: self
 1410|  2.09k|                .contexts
 1411|  2.09k|                .last()
 1412|  2.09k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1413|  2.09k|        }
 1414|  2.09k|    }
_RNCINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1412|  13.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCslyQBdJh0KVU_5oxrdf10blank_node9BlankNodeE0Ba_:
 1412|    615|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1412|  1.25k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1412|  10.9k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCslyQBdJh0KVU_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1412|  9.73k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCs2AU8mwnS1zT_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCslyQBdJh0KVU_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1412|    661|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RNvXNtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   31|  1.59M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  1.59M|        Self {
   33|  1.59M|            location,
   34|  1.59M|            message: message.into(),
   35|  1.59M|        }
   36|  1.59M|    }
_RNvXNtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   625k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   625k|        Self {
   33|   625k|            location,
   34|   625k|            message: message.into(),
   35|   625k|        }
   36|   625k|    }
_RNvXs_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   41|  33.1k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  33.1k|        (*location.start()..*location.end() + 1, message).into()
   43|  33.1k|    }
_RNvXs_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   448k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   448k|        (*location.start()..*location.end() + 1, message).into()
   43|   448k|    }
_RNvXs0_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   47|  21.0k|    fn from((location, message): (usize, S)) -> Self {
   48|  21.0k|        (location..=location, message).into()
   49|  21.0k|    }
_RNvMs1_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   73|  26.2k|    pub fn new(
   74|  26.2k|        parser: R,
   75|  26.2k|        data: B,
   76|  26.2k|        is_ending: bool,
   77|  26.2k|        min_buffer_size: usize,
   78|  26.2k|        max_buffer_size: usize,
   79|  26.2k|        is_line_jump_whitespace: bool,
   80|  26.2k|        line_comment_start: Option<&'static [u8]>,
   81|  26.2k|    ) -> Self {
   82|  26.2k|        Self {
   83|  26.2k|            parser,
   84|  26.2k|            data,
   85|  26.2k|            position: Position {
   86|  26.2k|                line_start_buffer_offset: 0,
   87|  26.2k|                buffer_offset: 0,
   88|  26.2k|                global_offset: 0,
   89|  26.2k|                global_line: 0,
   90|  26.2k|            },
   91|  26.2k|            previous_position: Position {
   92|  26.2k|                line_start_buffer_offset: 0,
   93|  26.2k|                buffer_offset: 0,
   94|  26.2k|                global_offset: 0,
   95|  26.2k|                global_line: 0,
   96|  26.2k|            },
   97|  26.2k|            is_ending,
   98|  26.2k|            min_buffer_size,
   99|  26.2k|            max_buffer_size,
  100|  26.2k|            is_line_jump_whitespace,
  101|  26.2k|            line_comment_start,
  102|  26.2k|        }
  103|  26.2k|    }
_RNvMs2_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  107|  4.44M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  108|  4.44M|        self.shrink_data();
  109|  4.44M|        self.data.extend_from_slice(other);
  110|  4.44M|    }
_RNvMs2_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  113|  26.2k|    pub fn end(&mut self) {
  114|  26.2k|        self.is_ending = true;
  115|  26.2k|    }
_RNvMs2_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  169|  4.44M|    fn shrink_data(&mut self) {
  170|  4.44M|        if self.position.line_start_buffer_offset > 0 {
  171|  83.6k|            self.data
  172|  83.6k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  173|  83.6k|            self.data
  174|  83.6k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  175|  83.6k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  176|  83.6k|            self.position.line_start_buffer_offset = 0;
  177|  83.6k|            self.previous_position = self.position;
  178|  4.36M|        }
  179|  4.44M|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE9read_nextB9_:
  184|  11.4M|    pub fn read_next(
  185|  11.4M|        &mut self,
  186|  11.4M|        options: &R::Options,
  187|  11.4M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  188|  11.4M|        self.skip_whitespaces_and_comments()?;
  189|  11.3M|        self.previous_position = self.position;
  190|  11.3M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  191|  11.3M|            &self.data[self.position.buffer_offset..],
  192|  11.3M|            self.is_ending,
  193|  11.3M|            options,
  194|  11.3M|        ) else {
  195|  4.47M|            return if self.is_ending {
  196|  59.2k|                if self.position.buffer_offset == self.data.len() {
  197|  52.5k|                    None // We have finished
  198|       |                } else {
  199|  6.72k|                    let (new_line_jumps, new_line_start) =
  200|  6.72k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  201|  6.72k|                            &self.data[self.position.buffer_offset..],
  202|  6.72k|                        );
  203|  6.72k|                    if new_line_jumps > 0 {
  204|    238|                        self.position.line_start_buffer_offset =
  205|    238|                            self.position.buffer_offset + new_line_start;
  206|  6.48k|                    }
  207|  6.72k|                    self.position.global_offset +=
  208|  6.72k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  209|  6.72k|                    self.position.buffer_offset = self.data.len();
  210|  6.72k|                    self.position.global_line += new_line_jumps;
  211|  6.72k|                    let new_position = TextPosition {
  212|  6.72k|                        line: self.position.global_line,
  213|  6.72k|                        column: Self::column_from_bytes(
  214|  6.72k|                            &self.data[self.position.line_start_buffer_offset..],
  215|  6.72k|                        ),
  216|  6.72k|                        offset: self.position.global_offset,
  217|  6.72k|                    };
  218|  6.72k|                    let error = TurtleSyntaxError {
  219|  6.72k|                        location: new_position..new_position,
  220|  6.72k|                        message: "Unexpected end of file".into(),
  221|  6.72k|                    };
  222|  6.72k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  223|  6.72k|                    Some(Err(error))
  224|       |                }
  225|       |            } else {
  226|  4.41M|                None
  227|       |            };
  228|       |        };
  229|  6.91M|        debug_assert!(
  230|      0|            consumed > 0,
  231|      0|            "The lexer must consume at least one byte each time"
  232|       |        );
  233|  6.91M|        debug_assert!(
  234|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  235|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  236|      0|            self.data.len() - self.position.buffer_offset
  237|       |        );
  238|  6.91M|        let (new_line_jumps, new_line_start) =
  239|  6.91M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|  6.91M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  241|  6.91M|            );
  242|  6.91M|        if new_line_jumps > 0 {
  243|  8.44k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  244|  6.91M|        }
  245|  6.91M|        self.position.buffer_offset += consumed;
  246|  6.91M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  247|  6.91M|        self.position.global_line += new_line_jumps;
  248|  6.91M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|       |            location: self.location_from_buffer_offset_range(e.location),
  250|       |            message: e.message,
  251|  6.91M|        }))
  252|  11.4M|    }
_RNCNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE9read_next0Bb_:
  248|  2.15M|        Some(result.map_err(|e| TurtleSyntaxError {
  249|  2.15M|            location: self.location_from_buffer_offset_range(e.location),
  250|  2.15M|            message: e.message,
  251|  2.15M|        }))
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  2.15M|    pub fn location_from_buffer_offset_range(
  255|  2.15M|        &self,
  256|  2.15M|        offset_range: Range<usize>,
  257|  2.15M|    ) -> Range<TextPosition> {
  258|  2.15M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  2.15M|        let (start_extra_line_jumps, start_line_start) =
  260|  2.15M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  2.15M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  2.15M|            );
  263|  2.15M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  2.91k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  2.15M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  2.15M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  2.15M|        let (end_extra_line_jumps, end_line_start) =
  270|  2.15M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  2.15M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  2.15M|            );
  273|  2.15M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  9.20k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  2.14M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  2.15M|        TextPosition {
  279|  2.15M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  2.15M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  2.15M|            offset: self.previous_position.global_offset
  282|  2.15M|                + u64::try_from(offset_range.start).unwrap(),
  283|  2.15M|        }..TextPosition {
  284|  2.15M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  2.15M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  2.15M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  2.15M|        }
  288|  2.15M|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|   572k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|   572k|        TextPosition {
  292|   572k|            line: self.previous_position.global_line,
  293|   572k|            column: Self::column_from_bytes(
  294|   572k|                &self.data[self.previous_position.line_start_buffer_offset
  295|   572k|                    ..self.previous_position.buffer_offset],
  296|   572k|            ),
  297|   572k|            offset: self.previous_position.global_offset,
  298|   572k|        }..TextPosition {
  299|   572k|            line: self.position.global_line,
  300|   572k|            column: Self::column_from_bytes(
  301|   572k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  302|   572k|            ),
  303|   572k|            offset: self.position.global_offset,
  304|   572k|        }
  305|   572k|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  307|   572k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  308|   572k|        String::from_utf8_lossy(
  309|   572k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  310|   572k|        )
  311|   572k|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  313|  4.50M|    pub fn is_end(&self) -> bool {
  314|  4.50M|        self.is_ending && self.data.len() == self.position.buffer_offset
  315|  4.50M|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  318|  11.4M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  319|       |        loop {
  320|  11.4M|            self.skip_whitespaces()?;
  321|       |
  322|  11.4M|            let buf = &self.data[self.position.buffer_offset..];
  323|  11.4M|            if let Some(line_comment_start) = self.line_comment_start {
  324|  11.4M|                if buf.starts_with(line_comment_start) {
  325|       |                    // Comment
  326|  36.2k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  327|  16.3k|                        let mut end_position = line_comment_start.len() + end;
  328|  16.3k|                        if buf.get(end_position).copied() == Some(b'\r') {
  329|       |                            // We look for \n for Windows line end style
  330|  12.5k|                            if let Some(c) = buf.get(end_position + 1) {
  331|  2.33k|                                if *c == b'\n' {
  332|      0|                                    end_position += 1;
  333|  2.33k|                                }
  334|  10.2k|                            } else if !self.is_ending {
  335|  10.2k|                                return None; // We need to read more
  336|     14|                            }
  337|  3.82k|                        }
  338|  6.17k|                        let comment_size = end_position + 1;
  339|  6.17k|                        self.position.buffer_offset += comment_size;
  340|  6.17k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  341|  6.17k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  342|  6.17k|                        self.position.global_line += 1;
  343|  6.17k|                        continue;
  344|  19.8k|                    }
  345|  19.8k|                    if self.is_ending {
  346|    393|                        self.position.buffer_offset = self.data.len(); // EOF
  347|    393|                        return Some(());
  348|  19.4k|                    }
  349|  19.4k|                    return None; // We need more data
  350|  11.3M|                }
  351|      0|            }
  352|  11.3M|            return Some(());
  353|       |        }
  354|  11.4M|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  356|  11.4M|    fn skip_whitespaces(&mut self) -> Option<()> {
  357|  11.4M|        if self.is_line_jump_whitespace {
  358|  11.4M|            let mut i = self.position.buffer_offset;
  359|  11.5M|            while let Some(c) = self.data.get(i) {
  360|  10.7M|                match c {
  361|  45.4k|                    b' ' | b'\t' => {
  362|  45.4k|                        self.position.buffer_offset += 1;
  363|  45.4k|                        self.position.global_offset += 1;
  364|  45.4k|                    }
  365|       |                    b'\r' => {
  366|       |                        // We look for \n for Windows line end style
  367|  18.3k|                        let mut increment: u8 = 1;
  368|  18.3k|                        if let Some(c) = self.data.get(i + 1) {
  369|  15.2k|                            if *c == b'\n' {
  370|     43|                                increment += 1;
  371|     43|                                i += 1;
  372|  15.2k|                            }
  373|  3.12k|                        } else if !self.is_ending {
  374|  3.04k|                            return None; // We need to read more
  375|     79|                        }
  376|  15.3k|                        self.position.buffer_offset += usize::from(increment);
  377|  15.3k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  378|  15.3k|                        self.position.global_offset += u64::from(increment);
  379|  15.3k|                        self.position.global_line += 1;
  380|       |                    }
  381|  85.2k|                    b'\n' => {
  382|  85.2k|                        self.position.buffer_offset += 1;
  383|  85.2k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  384|  85.2k|                        self.position.global_offset += 1;
  385|  85.2k|                        self.position.global_line += 1;
  386|  85.2k|                    }
  387|  10.5M|                    _ => return Some(()),
  388|       |                }
  389|   146k|                i += 1;
  390|       |                // TODO: SIMD
  391|       |            }
  392|       |        } else {
  393|      0|            for c in &self.data[self.position.buffer_offset..] {
  394|      0|                if matches!(c, b' ' | b'\t') {
  395|      0|                    self.position.buffer_offset += 1;
  396|      0|                    self.position.global_offset += 1;
  397|      0|                } else {
  398|      0|                    return Some(());
  399|       |                }
  400|       |                // TODO: SIMD
  401|       |            }
  402|       |        }
  403|   859k|        Some(())
  404|  11.4M|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  406|  11.2M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  407|  11.2M|        let mut num_of_jumps = 0;
  408|  11.2M|        let mut last_jump_pos = 0;
  409|  11.2M|        let mut previous_cr = 0;
  410|  11.2M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  411|  46.1k|            if bytes[pos] == b'\r' {
  412|  5.46k|                previous_cr = pos;
  413|  5.46k|                num_of_jumps += 1;
  414|  5.46k|                last_jump_pos = pos + 1;
  415|  5.46k|            } else {
  416|  40.6k|                if previous_cr < pos - 1 {
  417|  23.7k|                    // We count \r\n as a single line jump
  418|  23.7k|                    num_of_jumps += 1;
  419|  23.7k|                }
  420|  40.6k|                last_jump_pos = pos + 1;
  421|       |            }
  422|       |        }
  423|  11.2M|        (num_of_jumps, last_jump_pos)
  424|  11.2M|    }
_RNvMs3_NtNtCs2AU8mwnS1zT_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  426|  9.35M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  427|  9.35M|        match str::from_utf8(bytes) {
  428|  4.91M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  429|  4.44M|            Err(e) => {
  430|  4.44M|                if e.valid_up_to() == 0 {
  431|   552k|                    0
  432|       |                } else {
  433|  3.88M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  434|       |                }
  435|       |            }
  436|       |        }
  437|  9.35M|    }

_RNvXNtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|   105k|    fn from(message: S) -> Self {
   41|   105k|        Self {
   42|   105k|            message: message.into(),
   43|   105k|        }
   44|   105k|    }
_RNvXNtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|   466k|    fn from(message: S) -> Self {
   41|   466k|        Self {
   42|   466k|            message: message.into(),
   43|   466k|        }
   44|   466k|    }
_RNvMs_NtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_2n312N3RecognizerE3newB8_:
   57|  26.2k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  26.2k|        Self {
   59|  26.2k|            lexer,
   60|  26.2k|            state: Some(recognizer),
   61|  26.2k|            context,
   62|  26.2k|            results: vec![],
   63|  26.2k|            errors: vec![],
   64|  26.2k|        }
   65|  26.2k|    }
_RNvMs0_NtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE6is_endB9_:
   70|  26.2k|    pub fn is_end(&self) -> bool {
   71|  26.2k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  26.2k|    }
_RNvMs0_NtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE9read_nextB9_:
   74|  7.38M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  12.1M|            if let Some(error) = self.errors.pop() {
   77|   572k|                return Some(Err(TurtleSyntaxError {
   78|   572k|                    location: self.lexer.last_token_location(),
   79|   572k|                    message: error
   80|   572k|                        .message
   81|   572k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|   572k|                }));
   83|  11.6M|            }
   84|  11.6M|            if let Some(result) = self.results.pop() {
   85|   176k|                return Some(Ok(result));
   86|  11.4M|            }
   87|  11.4M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   88|  6.92M|                match result {
   89|  4.76M|                    Ok(token) => {
   90|  4.76M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  4.76M|                        });
   98|  4.76M|                        continue;
   99|       |                    }
  100|  2.16M|                    Err(e) => {
  101|  2.16M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  2.16M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  4.50M|            }
  106|  4.50M|            if self.lexer.is_end() {
  107|  52.5k|                self.state.take()?.recognize_end(
  108|  26.2k|                    &mut self.context,
  109|  26.2k|                    &mut self.results,
  110|  26.2k|                    &mut self.errors,
  111|  26.2k|                )
  112|       |            } else {
  113|  4.44M|                return None;
  114|       |            }
  115|       |        }
  116|  7.38M|    }
_RNCNvMs0_NtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_2n312N3RecognizerE9read_next0Bb_:
   90|  4.76M|                        self.state = self.state.take().map(|state| {
   91|  4.76M|                            state.recognize_next(
   92|  4.76M|                                token,
   93|  4.76M|                                &mut self.context,
   94|  4.76M|                                &mut self.results,
   95|  4.76M|                                &mut self.errors,
   96|  4.76M|                            )
   97|  4.76M|                        });
_RNvMs1_NtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE3endB9_:
  121|  26.2k|    pub fn end(&mut self) {
  122|  26.2k|        self.lexer.end()
  123|  26.2k|    }
_RNvMs1_NtNtCs2AU8mwnS1zT_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE17extend_from_sliceB9_:
  125|  4.44M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  4.44M|        self.lexer.extend_from_slice(other)
  127|  4.44M|    }


_RNCINvMs_NtCs3IdWJf403OL_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCs3IdWJf403OL_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    628|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    628|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    628|        let mut val = self.0.load(Relaxed);
   37|    628|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    627|        }
   41|    628|        val
   42|    628|    }
_RINvMs_NtCs3IdWJf403OL_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    628|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    628|        self.0.unsync_init(|| init() as usize) != 0
   55|    628|    }

_RNvCs3IdWJf403OL_9getrandom16getrandom_uninitCs59ZXsH8airK_9rand_core:
  345|    628|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    628|    if !dest.is_empty() {
  347|    628|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    628|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    628|}
_RNvCs3IdWJf403OL_9getrandom9getrandomCs59ZXsH8airK_9rand_core:
  315|    628|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    628|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    628|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    628|    // `dest`.
  319|    628|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    628|    Ok(())
  321|    628|}

_RNvNtCs3IdWJf403OL_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNCNvNtCs3IdWJf403OL_9getrandom3imp15getrandom_inner0B5_:
   13|    628|        sys_fill_exact(dest, |buf| unsafe {
   14|    628|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    628|        })
_RNvNtCs3IdWJf403OL_9getrandom3imp9getrandom:
   34|    629|unsafe fn getrandom(
   35|    629|    buf: *mut libc::c_void,
   36|    629|    buflen: libc::size_t,
   37|    629|    flags: libc::c_uint,
   38|    629|) -> libc::ssize_t {
   39|    629|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    629|}
_RNvNtCs3IdWJf403OL_9getrandom3imp15getrandom_inner:
    9|    628|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    628|    // getrandom(2) was introduced in Linux 3.17
   11|    628|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    628|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    628|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    628|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    628|}

_RINvNtCs3IdWJf403OL_9getrandom4util19slice_as_uninit_muthECs59ZXsH8airK_9rand_core:
   32|    628|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    628|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    628|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    628|}
_RINvNtCs3IdWJf403OL_9getrandom4util21slice_assume_init_muthECs59ZXsH8airK_9rand_core:
    8|    628|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    628|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    628|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    628|}

_RINvNtCs3IdWJf403OL_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    628|pub fn sys_fill_exact(
   60|    628|    mut buf: &mut [MaybeUninit<u8>],
   61|    628|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    628|) -> Result<(), Error> {
   63|  1.25k|    while !buf.is_empty() {
   64|    628|        let res = sys_fill(buf);
   65|    628|        match res {
   66|    628|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    628|    Ok(())
   81|    628|}

rust_fuzzer_test_input:
  209|  30.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  30.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  30.6k|                }
  223|  30.6k|
  224|  30.6k|                __libfuzzer_sys_run(bytes);
  225|  30.6k|                0
  226|  30.6k|            }
_RNvNvCs5e1VnIiJGfJ_2n31__19___libfuzzer_sys_run:
  241|  30.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  30.6k|            }
LLVMFuzzerTestOneInput:
   58|  30.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  30.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  30.6k|    });
   63|  30.6k|
   64|  30.6k|    match test_input {
   65|  30.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  30.6k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsaCzCmRZq88S_13libfuzzer_sys15test_input_wrap0B3_:
   59|  30.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  30.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  30.6k|        rust_fuzzer_test_input(data_slice)
   62|  30.6k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsev5kJ09hNTn_5oxttl:
 1125|  1.87M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.87M|    haystack: &[u8],
 1127|  1.87M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.87M|) -> Option<usize> {
 1129|  1.87M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.87M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.87M|    // a &[u8].
 1132|  1.87M|    let start = haystack.as_ptr();
 1133|  1.87M|    let end = start.add(haystack.len());
 1134|  1.87M|    let found = find_raw(start, end)?;
 1135|   747k|    Some(found.distance(start))
 1136|  1.87M|}
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsev5kJ09hNTn_5oxttl:
 1044|  13.5M|    pub(crate) unsafe fn next(
 1045|  13.5M|        &mut self,
 1046|  13.5M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  13.5M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  13.5M|        let found = find_raw(self.start, self.end)?;
 1057|  53.7k|        let result = found.distance(self.original_start);
 1058|  53.7k|        self.start = found.add(1);
 1059|  53.7k|        Some(result)
 1060|  13.5M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsev5kJ09hNTn_5oxttl:
 1125|  64.6k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  64.6k|    haystack: &[u8],
 1127|  64.6k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  64.6k|) -> Option<usize> {
 1129|  64.6k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  64.6k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  64.6k|    // a &[u8].
 1132|  64.6k|    let start = haystack.as_ptr();
 1133|  64.6k|    let end = start.add(haystack.len());
 1134|  64.6k|    let found = find_raw(start, end)?;
 1135|  5.11k|    Some(found.distance(start))
 1136|  64.6k|}
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  13.5M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  13.5M|        Iter {
 1029|  13.5M|            original_start: haystack.as_ptr(),
 1030|  13.5M|            start: haystack.as_ptr(),
 1031|  13.5M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  13.5M|            haystack: core::marker::PhantomData,
 1033|  13.5M|        }
 1034|  13.5M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|   157k|    pub(crate) fn needle1(&self) -> u8 {
  118|   157k|        self.s1
  119|   157k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   609k|    unsafe fn search_chunk(
  671|   609k|        &self,
  672|   609k|        cur: *const u8,
  673|   609k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   609k|    ) -> Option<*const u8> {
  675|   609k|        let chunk = V::load_unaligned(cur);
  676|   609k|        let eq1 = self.v1.cmpeq(chunk);
  677|   609k|        let eq2 = self.v2.cmpeq(chunk);
  678|   609k|        let mask = eq1.or(eq2).movemask();
  679|   609k|        if mask.has_non_zero() {
  680|   160k|            let mask1 = eq1.movemask();
  681|   160k|            let mask2 = eq2.movemask();
  682|   160k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   449k|            None
  685|       |        }
  686|   609k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  11.6k|    pub(crate) unsafe fn find_raw(
  144|  11.6k|        &self,
  145|  11.6k|        start: *const u8,
  146|  11.6k|        end: *const u8,
  147|  11.6k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  11.6k|        let topos = V::Mask::first_offset;
  155|  11.6k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  11.6k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    774|            return Some(cur);
  167|  10.8k|        }
  168|  10.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  10.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  10.8k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  10.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  14.4k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.98k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    422|                return Some(cur);
  216|  3.56k|            }
  217|  3.56k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  10.4k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  9.18k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  9.18k|            return self.search_chunk(cur, topos);
  228|  1.28k|        }
  229|  1.28k|        None
  230|  11.6k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   570k|    unsafe fn search_chunk(
  671|   570k|        &self,
  672|   570k|        cur: *const u8,
  673|   570k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   570k|    ) -> Option<*const u8> {
  675|   570k|        let chunk = V::load_unaligned(cur);
  676|   570k|        let eq1 = self.v1.cmpeq(chunk);
  677|   570k|        let eq2 = self.v2.cmpeq(chunk);
  678|   570k|        let mask = eq1.or(eq2).movemask();
  679|   570k|        if mask.has_non_zero() {
  680|   194k|            let mask1 = eq1.movemask();
  681|   194k|            let mask2 = eq2.movemask();
  682|   194k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   375k|            None
  685|       |        }
  686|   570k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  64.6k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  64.6k|        One { s1: needle, v1: V::splat(needle) }
  113|  64.6k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   338k|    pub(crate) unsafe fn find_raw(
  494|   338k|        &self,
  495|   338k|        start: *const u8,
  496|   338k|        end: *const u8,
  497|   338k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   338k|        let topos = V::Mask::first_offset;
  505|   338k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   338k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   166k|            return Some(cur);
  517|   172k|        }
  518|   172k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   172k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   172k|        if len >= Self::LOOP_SIZE {
  522|   599k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   505k|                let a = V::load_aligned(cur);
  526|   505k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   505k|                let eqa1 = self.v1.cmpeq(a);
  528|   505k|                let eqb1 = self.v1.cmpeq(b);
  529|   505k|                let eqa2 = self.v2.cmpeq(a);
  530|   505k|                let eqb2 = self.v2.cmpeq(b);
  531|   505k|                let or1 = eqa1.or(eqb1);
  532|   505k|                let or2 = eqa2.or(eqb2);
  533|   505k|                let or3 = or1.or(or2);
  534|   505k|                if or3.movemask_will_have_non_zero() {
  535|  4.85k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  4.85k|                    if mask.has_non_zero() {
  537|  2.19k|                        return Some(cur.add(topos(mask)));
  538|  2.65k|                    }
  539|  2.65k|
  540|  2.65k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  2.65k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   500k|                }
  544|   500k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  72.8k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   236k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  73.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  3.90k|                return Some(cur);
  554|  69.4k|            }
  555|  69.4k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   163k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   158k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   158k|            return self.search_chunk(cur, topos);
  566|  5.04k|        }
  567|  5.04k|        None
  568|   338k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  24.9M|    pub(crate) fn needle1(&self) -> u8 {
  462|  24.9M|        self.s1
  463|  24.9M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  15.4M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  15.4M|        Two {
  452|  15.4M|            s1: needle1,
  453|  15.4M|            s2: needle2,
  454|  15.4M|            v1: V::splat(needle1),
  455|  15.4M|            v2: V::splat(needle2),
  456|  15.4M|        }
  457|  15.4M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  24.9k|    pub(crate) unsafe fn find_raw(
  144|  24.9k|        &self,
  145|  24.9k|        start: *const u8,
  146|  24.9k|        end: *const u8,
  147|  24.9k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  24.9k|        let topos = V::Mask::first_offset;
  155|  24.9k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  24.9k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.16k|            return Some(cur);
  167|  23.8k|        }
  168|  23.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  23.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  23.8k|        if len >= Self::LOOP_SIZE {
  172|  13.5k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  8.96k|                let a = V::load_aligned(cur);
  176|  8.96k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  8.96k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  8.96k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  8.96k|                let eqa = self.v1.cmpeq(a);
  180|  8.96k|                let eqb = self.v1.cmpeq(b);
  181|  8.96k|                let eqc = self.v1.cmpeq(c);
  182|  8.96k|                let eqd = self.v1.cmpeq(d);
  183|  8.96k|                let or1 = eqa.or(eqb);
  184|  8.96k|                let or2 = eqc.or(eqd);
  185|  8.96k|                let or3 = or1.or(or2);
  186|  8.96k|                if or3.movemask_will_have_non_zero() {
  187|    495|                    let mask = eqa.movemask();
  188|    495|                    if mask.has_non_zero() {
  189|     78|                        return Some(cur.add(topos(mask)));
  190|    417|                    }
  191|    417|
  192|    417|                    let mask = eqb.movemask();
  193|    417|                    if mask.has_non_zero() {
  194|    131|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    286|                    }
  196|    286|
  197|    286|                    let mask = eqc.movemask();
  198|    286|                    if mask.has_non_zero() {
  199|    147|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    139|                    }
  201|    139|
  202|    139|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    139|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  8.47k|                }
  206|  8.47k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  18.8k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  42.7k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  20.0k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    725|                return Some(cur);
  216|  19.3k|            }
  217|  19.3k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  22.6k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  21.7k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  21.7k|            return self.search_chunk(cur, topos);
  228|    892|        }
  229|    892|        None
  230|  24.9k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  66.8k|    unsafe fn search_chunk(
  417|  66.8k|        &self,
  418|  66.8k|        cur: *const u8,
  419|  66.8k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  66.8k|    ) -> Option<*const u8> {
  421|  66.8k|        let chunk = V::load_unaligned(cur);
  422|  66.8k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  66.8k|        if mask.has_non_zero() {
  424|  2.26k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  64.5k|            None
  427|       |        }
  428|  66.8k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  64.6k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  64.6k|        One { s1: needle, v1: V::splat(needle) }
  113|  64.6k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  24.5M|    pub(crate) fn needle2(&self) -> u8 {
  468|  24.5M|        self.s2
  469|  24.5M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   344k|    pub(crate) unsafe fn find_raw(
  494|   344k|        &self,
  495|   344k|        start: *const u8,
  496|   344k|        end: *const u8,
  497|   344k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   344k|        let topos = V::Mask::first_offset;
  505|   344k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   344k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   130k|            return Some(cur);
  517|   213k|        }
  518|   213k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   213k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   213k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   213k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   277k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  70.7k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  7.24k|                return Some(cur);
  554|  63.5k|            }
  555|  63.5k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   206k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   194k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   194k|            return self.search_chunk(cur, topos);
  566|  11.8k|        }
  567|  11.8k|        None
  568|   344k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  26.8k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  26.8k|    start: *const u8,
 1150|  26.8k|    end: *const u8,
 1151|  26.8k|    confirm: F,
 1152|  26.8k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  26.8k|    let mut ptr = start;
 1155|   183k|    while ptr < end {
 1156|   157k|        if confirm(*ptr) {
 1157|  1.12k|            return Some(ptr);
 1158|   156k|        }
 1159|   156k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  25.7k|    None
 1162|  26.8k|}
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  15.4M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  15.4M|        Two {
  452|  15.4M|            s1: needle1,
  453|  15.4M|            s2: needle2,
  454|  15.4M|            v1: V::splat(needle1),
  455|  15.4M|            v2: V::splat(needle2),
  456|  15.4M|        }
  457|  15.4M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  12.0M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  12.0M|    start: *const u8,
 1150|  12.0M|    end: *const u8,
 1151|  12.0M|    confirm: F,
 1152|  12.0M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  12.0M|    let mut ptr = start;
 1155|  36.5M|    while ptr < end {
 1156|  24.9M|        if confirm(*ptr) {
 1157|   441k|            return Some(ptr);
 1158|  24.4M|        }
 1159|  24.4M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  11.5M|    None
 1162|  12.0M|}
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  24.8k|    unsafe fn search_chunk(
  417|  24.8k|        &self,
  418|  24.8k|        cur: *const u8,
  419|  24.8k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  24.8k|    ) -> Option<*const u8> {
  421|  24.8k|        let chunk = V::load_unaligned(cur);
  422|  24.8k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  24.8k|        if mask.has_non_zero() {
  424|  1.22k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  23.6k|            None
  427|       |        }
  428|  24.8k|    }

_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  24.9k|    unsafe fn find_raw_avx2(
  397|  24.9k|        &self,
  398|  24.9k|        start: *const u8,
  399|  24.9k|        end: *const u8,
  400|  24.9k|    ) -> Option<*const u8> {
  401|  24.9k|        self.avx2.find_raw(start, end)
  402|  24.9k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  15.4M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  15.4M|        Two {
  558|  15.4M|            sse2: generic::Two::new(needle1, needle2),
  559|  15.4M|            avx2: generic::Two::new(needle1, needle2),
  560|  15.4M|        }
  561|  15.4M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  15.4M|    pub unsafe fn find_raw(
  655|  15.4M|        &self,
  656|  15.4M|        start: *const u8,
  657|  15.4M|        end: *const u8,
  658|  15.4M|    ) -> Option<*const u8> {
  659|  15.4M|        if start >= end {
  660|  2.73M|            return None;
  661|  12.6M|        }
  662|  12.6M|        let len = end.distance(start);
  663|  12.6M|        if len < __m256i::BYTES {
  664|  12.3M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  12.0M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  12.0M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   344k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   338k|        }
  676|   338k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   338k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   338k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   338k|        // responsibility.
  680|   338k|        //
  681|   338k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   338k|        // means we'd have to annotate this routine with `target_feature`.
  683|   338k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   338k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   338k|        // The real problem is that a routine with a `target_feature`
  686|   338k|        // annotation generally can't be inlined into caller code unless
  687|   338k|        // the caller code has the same target feature annotations. Namely,
  688|   338k|        // the common case (at time of writing) is for calling code to not
  689|   338k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   338k|        // `target_feature` on this routine, it can be inlined which will
  691|   338k|        // handle some of the short-haystack cases above without touching the
  692|   338k|        // architecture specific code.
  693|   338k|        self.find_raw_avx2(start, end)
  694|  15.4M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   338k|    unsafe fn find_raw_avx2(
  805|   338k|        &self,
  806|   338k|        start: *const u8,
  807|   338k|        end: *const u8,
  808|   338k|    ) -> Option<*const u8> {
  809|   338k|        self.avx2.find_raw(start, end)
  810|   338k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  64.6k|    pub unsafe fn find_raw(
  180|  64.6k|        &self,
  181|  64.6k|        start: *const u8,
  182|  64.6k|        end: *const u8,
  183|  64.6k|    ) -> Option<*const u8> {
  184|  64.6k|        if start >= end {
  185|  1.11k|            return None;
  186|  63.5k|        }
  187|  63.5k|        let len = end.distance(start);
  188|  63.5k|        if len < __m256i::BYTES {
  189|  38.5k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  26.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  26.8k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  11.6k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  24.9k|        }
  201|  24.9k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  24.9k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  24.9k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  24.9k|        // responsibility.
  205|  24.9k|        //
  206|  24.9k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  24.9k|        // means we'd have to annotate this routine with `target_feature`.
  208|  24.9k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  24.9k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  24.9k|        // The real problem is that a routine with a `target_feature`
  211|  24.9k|        // annotation generally can't be inlined into caller code unless
  212|  24.9k|        // the caller code has the same target feature annotations. Namely,
  213|  24.9k|        // the common case (at time of writing) is for calling code to not
  214|  24.9k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  24.9k|        // `target_feature` on this routine, it can be inlined which will
  216|  24.9k|        // handle some of the short-haystack cases above without touching the
  217|  24.9k|        // architecture specific code.
  218|  24.9k|        self.find_raw_avx2(start, end)
  219|  64.6k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   344k|    unsafe fn find_raw_sse2(
  765|   344k|        &self,
  766|   344k|        start: *const u8,
  767|   344k|        end: *const u8,
  768|   344k|    ) -> Option<*const u8> {
  769|   344k|        self.sse2.find_raw(start, end)
  770|   344k|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  24.9M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  24.9M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  24.9M|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  11.6k|    unsafe fn find_raw_sse2(
  337|  11.6k|        &self,
  338|  11.6k|        start: *const u8,
  339|  11.6k|        end: *const u8,
  340|  11.6k|    ) -> Option<*const u8> {
  341|  11.6k|        self.sse2.find_raw(start, end)
  342|  11.6k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  64.6k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  64.6k|        One {
   71|  64.6k|            sse2: generic::One::new(needle),
   72|  64.6k|            avx2: generic::One::new(needle),
   73|  64.6k|        }
   74|  64.6k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   157k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   157k|                    b == self.sse2.needle1()
  194|   157k|                })

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  15.4M|pub(crate) fn memchr2_raw(
  221|  15.4M|    n1: u8,
  222|  15.4M|    n2: u8,
  223|  15.4M|    start: *const u8,
  224|  15.4M|    end: *const u8,
  225|  15.4M|) -> Option<*const u8> {
  226|  15.4M|    // SAFETY: We provide a valid function pointer type.
  227|  15.4M|    unsafe_ifunc!(
  228|  15.4M|        Two,
  229|  15.4M|        find_raw,
  230|  15.4M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  15.4M|        Option<*const u8>,
  232|  15.4M|        start,
  233|  15.4M|        end,
  234|  15.4M|        n1,
  235|  15.4M|        n2
  236|  15.4M|    )
  237|  15.4M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|  64.6k|pub(crate) fn memchr_raw(
  175|  64.6k|    n1: u8,
  176|  64.6k|    start: *const u8,
  177|  64.6k|    end: *const u8,
  178|  64.6k|) -> Option<*const u8> {
  179|  64.6k|    // SAFETY: We provide a valid function pointer type.
  180|  64.6k|    unsafe_ifunc!(
  181|  64.6k|        One,
  182|  64.6k|        find_raw,
  183|  64.6k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  64.6k|        Option<*const u8>,
  185|  64.6k|        start,
  186|  64.6k|        end,
  187|  64.6k|        n1
  188|  64.6k|    )
  189|  64.6k|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  15.4M|        unsafe fn find_avx2(
   79|  15.4M|            $($needle: u8),+,
   80|  15.4M|            $hay_start: *const u8,
   81|  15.4M|            $hay_end: *const u8,
   82|  15.4M|        ) -> $retty {
   83|  15.4M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  15.4M|            $memchrty::new_unchecked($($needle),+)
   85|  15.4M|                .$memchrfind($hay_start, $hay_end)
   86|  15.4M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  64.6k|        unsafe fn find_avx2(
   79|  64.6k|            $($needle: u8),+,
   80|  64.6k|            $hay_start: *const u8,
   81|  64.6k|            $hay_end: *const u8,
   82|  64.6k|        ) -> $retty {
   83|  64.6k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  64.6k|            $memchrty::new_unchecked($($needle),+)
   85|  64.6k|                .$memchrfind($hay_start, $hay_end)
   86|  64.6k|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  14.6M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  14.6M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  14.6M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  14.6M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   420k|    fn as_usize(self) -> usize {
   27|   420k|        self as usize
   28|   420k|    }

_RNCNvNtCsezyNti1ZN2c_6memchr6memchr7memchr20Csev5kJ09hNTn_5oxttl:
   96|  1.87M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  1.87M|            memchr2_raw(needle1, needle2, start, end)
   98|  1.87M|        })
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Csev5kJ09hNTn_5oxttl:
  395|  13.5M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCsev5kJ09hNTn_5oxttl:
  377|  13.5M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  13.5M|        Memchr2 {
  379|  13.5M|            needle1,
  380|  13.5M|            needle2,
  381|  13.5M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  13.5M|        }
  383|  13.5M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCsev5kJ09hNTn_5oxttl:
  574|  15.4M|unsafe fn memchr2_raw(
  575|  15.4M|    needle1: u8,
  576|  15.4M|    needle2: u8,
  577|  15.4M|    start: *const u8,
  578|  15.4M|    end: *const u8,
  579|  15.4M|) -> Option<*const u8> {
  580|  15.4M|    #[cfg(target_arch = "x86_64")]
  581|  15.4M|    {
  582|  15.4M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  15.4M|    }
  584|  15.4M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  15.4M|    {
  586|  15.4M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  15.4M|    }
  588|  15.4M|    #[cfg(target_arch = "aarch64")]
  589|  15.4M|    {
  590|  15.4M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  15.4M|    }
  592|  15.4M|    #[cfg(not(any(
  593|  15.4M|        target_arch = "x86_64",
  594|  15.4M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  15.4M|        target_arch = "aarch64"
  596|  15.4M|    )))]
  597|  15.4M|    {
  598|  15.4M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  15.4M|            .find_raw(start, end)
  600|  15.4M|    }
  601|  15.4M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCsev5kJ09hNTn_5oxttl:
  232|  13.5M|pub fn memchr2_iter<'h>(
  233|  13.5M|    needle1: u8,
  234|  13.5M|    needle2: u8,
  235|  13.5M|    haystack: &'h [u8],
  236|  13.5M|) -> Memchr2<'h> {
  237|  13.5M|    Memchr2::new(needle1, needle2, haystack)
  238|  13.5M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCsev5kJ09hNTn_5oxttl:
   27|  64.6k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  64.6k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  64.6k|    // pointer between start and end.
   30|  64.6k|    unsafe {
   31|  64.6k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  64.6k|        })
   34|  64.6k|    }
   35|  64.6k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr7memchr2Csev5kJ09hNTn_5oxttl:
   92|  1.87M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  1.87M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  1.87M|    // pointer between start and end.
   95|  1.87M|    unsafe {
   96|  1.87M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  1.87M|        })
   99|  1.87M|    }
  100|  1.87M|}
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsev5kJ09hNTn_5oxttl:
  390|  13.5M|    fn next(&mut self) -> Option<usize> {
  391|  13.5M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  13.5M|        // pointers returns will fall within the start and end bounds, and this
  393|  13.5M|        // upholds the safety contract of `self.it.next`.
  394|  13.5M|        unsafe {
  395|  13.5M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  13.5M|        }
  397|  13.5M|    }
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|  64.6k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  64.6k|            memchr_raw(needle, start, end)
   33|  64.6k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|  64.6k|unsafe fn memchr_raw(
  505|  64.6k|    needle: u8,
  506|  64.6k|    start: *const u8,
  507|  64.6k|    end: *const u8,
  508|  64.6k|) -> Option<*const u8> {
  509|  64.6k|    #[cfg(target_arch = "x86_64")]
  510|  64.6k|    {
  511|  64.6k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  64.6k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  64.6k|        // time. This function also handles using a fallback if neither AVX2
  514|  64.6k|        // nor SSE2 (unusual) are available.
  515|  64.6k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  64.6k|    }
  517|  64.6k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  64.6k|    {
  519|  64.6k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  64.6k|    }
  521|  64.6k|    #[cfg(target_arch = "aarch64")]
  522|  64.6k|    {
  523|  64.6k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  64.6k|    }
  525|  64.6k|    #[cfg(not(any(
  526|  64.6k|        target_arch = "x86_64",
  527|  64.6k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  64.6k|        target_arch = "aarch64"
  529|  64.6k|    )))]
  530|  64.6k|    {
  531|  64.6k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  64.6k|    }
  533|  64.6k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   634k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   634k|            _mm_loadu_si128(data as *const __m128i)
  222|   634k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   363k|    fn first_offset(self) -> usize {
  174|   363k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   363k|        // the bytes so we are in practice), where the most significant byte
  176|   363k|        // is at a higher address. That means the least significant bit that
  177|   363k|        // is set corresponds to the position of our first matching byte.
  178|   363k|        // That position corresponds to the number of zeros after the least
  179|   363k|        // significant bit.
  180|   363k|        self.get_for_offset().trailing_zeros() as usize
  181|   363k|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   363k|    fn get_for_offset(self) -> u32 {
  129|   363k|        #[cfg(target_endian = "big")]
  130|   363k|        {
  131|   363k|            self.0.swap_bytes()
  132|   363k|        }
  133|   363k|        #[cfg(target_endian = "little")]
  134|   363k|        {
  135|   363k|            self.0
  136|   363k|        }
  137|   363k|    }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  1.79M|    fn has_non_zero(self) -> bool {
  149|  1.79M|        self.0 != 0
  150|  1.79M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   954k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   954k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   954k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  1.24M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  1.24M|            _mm_cmpeq_epi8(self, vector2)
  232|  1.24M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  1.55M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  1.55M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  1.55M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   514k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   514k|        self.movemask().has_non_zero()
   67|   514k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   637k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   637k|            _mm256_loadu_si256(data as *const __m256i)
  272|   637k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  3.26M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  3.26M|            _mm256_cmpeq_epi8(self, vector2)
  282|  3.26M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  30.9M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  30.9M|            _mm_set1_epi8(byte as i8)
  212|  30.9M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   609k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   609k|            _mm_or_si128(self, vector2)
  242|   609k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  1.04M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  1.04M|            _mm256_load_si256(data as *const __m256i)
  267|  1.04M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   362k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   362k|        SensibleMoveMask(self.0 | other.0)
  165|   362k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  30.9M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  30.9M|            _mm256_set1_epi8(byte as i8)
  262|  30.9M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.11M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.11M|            _mm256_or_si256(self, vector2)
  292|  2.11M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCsaCzCmRZq88S_13libfuzzer_sys:
   49|  30.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  30.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  30.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  30.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  30.6k|        // `SeqCst` operations on the slow path.
   54|  30.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  30.6k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCsaCzCmRZq88S_13libfuzzer_sys:
  963|  30.6k|        pub fn get(&self) -> Option<&T> {
  964|  30.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  30.6k|                None
  969|       |            }
  970|  30.6k|        }

_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE5parseCsev5kJ09hNTn_5oxttl:
   49|   188k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   188k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   158k|        Ok(Self { tag, positions })
   52|   188k|    }
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE10into_innerCsev5kJ09hNTn_5oxttl:
   62|   158k|    pub fn into_inner(self) -> T {
   63|   158k|        self.tag
   64|   158k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsev5kJ09hNTn_5oxttl:
  558|   188k|#[derive(Default)]
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsjwRv1y82X7y_5oxrdf:
  571|   186k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsjwRv1y82X7y_5oxrdf:
  571|  8.44k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsjwRv1y82X7y_5oxrdf:
  632|   182k|fn parse_langtag(
  633|   182k|    input: &str,
  634|   182k|    output: &mut impl OutputBuffer,
  635|   182k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   182k|    #[derive(PartialEq, Eq)]
  637|   182k|    enum State {
  638|   182k|        Start,
  639|   182k|        AfterLanguage,
  640|   182k|        AfterExtLang,
  641|   182k|        AfterScript,
  642|   182k|        AfterRegion,
  643|   182k|        InExtension { expected: bool },
  644|   182k|        InPrivateUse { expected: bool },
  645|   182k|    }
  646|   182k|
  647|   182k|    let mut state = State::Start;
  648|   182k|    let mut language_end = 0;
  649|   182k|    let mut extlang_end = 0;
  650|   182k|    let mut script_end = 0;
  651|   182k|    let mut region_end = 0;
  652|   182k|    let mut variant_end = 0;
  653|   182k|    let mut extension_end = 0;
  654|   182k|    let mut extlangs_count = 0;
  655|   238k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   238k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|   238k|        }
  661|   238k|        if subtag.len() > 8 {
  662|  2.97k|            return Err(LanguageTagParseError {
  663|  2.97k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  2.97k|            });
  665|   235k|        }
  666|   235k|        if state == State::Start {
  667|       |            // Primary language
  668|   179k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  14.8k|                return Err(LanguageTagParseError {
  670|  14.8k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  14.8k|                });
  672|   164k|            }
  673|   164k|            language_end = end;
  674|   164k|            output.extend(to_lowercase(subtag));
  675|   164k|            if subtag.len() < 4 {
  676|  40.7k|                // extlangs are only allowed for short language tags
  677|  40.7k|                state = State::AfterLanguage;
  678|   123k|            } else {
  679|   123k|                state = State::AfterExtLang;
  680|   123k|            }
  681|  56.4k|        } else if let State::InPrivateUse { .. } = state {
  682|  2.79k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  2.79k|            }
  687|  2.79k|            output.push('-');
  688|  2.79k|            output.extend(to_lowercase(subtag));
  689|  2.79k|            state = State::InPrivateUse { expected: false };
  690|  53.6k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  5.02k|            if let State::InExtension { expected: true } = state {
  693|  1.99k|                return Err(LanguageTagParseError {
  694|  1.99k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  1.99k|                });
  696|  3.03k|            }
  697|  3.03k|            output.push('-');
  698|  3.03k|            output.push('x');
  699|  3.03k|            state = State::InPrivateUse { expected: true };
  700|  48.6k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  11.3k|            if let State::InExtension { expected: true } = state {
  703|  2.27k|                return Err(LanguageTagParseError {
  704|  2.27k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  2.27k|                });
  706|  9.03k|            }
  707|  9.03k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  9.03k|            output.push('-');
  709|  9.03k|            output.push(extension_tag);
  710|  9.03k|            state = State::InExtension { expected: true };
  711|  37.2k|        } else if let State::InExtension { .. } = state {
  712|  5.37k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  5.37k|            }
  717|  5.37k|            extension_end = end;
  718|  5.37k|            output.push('-');
  719|  5.37k|            output.extend(to_lowercase(subtag));
  720|  5.37k|            state = State::InExtension { expected: false };
  721|  31.9k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  6.05k|            extlangs_count += 1;
  723|  6.05k|            if extlangs_count > 3 {
  724|    558|                return Err(LanguageTagParseError {
  725|    558|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|    558|                });
  727|  5.49k|            }
  728|  5.49k|            // valid extlangs
  729|  5.49k|            extlang_end = end;
  730|  5.49k|            output.push('-');
  731|  5.49k|            output.extend(to_lowercase(subtag));
  732|  25.8k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  15.8k|            && subtag.len() == 4
  734|  5.66k|            && is_alphabetic(subtag)
  735|  5.66k|        {
  736|  5.66k|            // Script
  737|  5.66k|            script_end = end;
  738|  5.66k|            output.push('-');
  739|  5.66k|            output.extend(to_uppercase_first(subtag));
  740|  5.66k|            state = State::AfterScript;
  741|  20.2k|        } else if (state == State::AfterLanguage
  742|  12.3k|            || state == State::AfterExtLang
  743|  9.98k|            || state == State::AfterScript)
  744|  14.2k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  5.83k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  8.44k|        {
  747|  8.44k|            // Region
  748|  8.44k|            region_end = end;
  749|  8.44k|            output.push('-');
  750|  8.44k|            output.extend(to_uppercase(subtag));
  751|  8.44k|            state = State::AfterRegion;
  752|  11.7k|        } else if (state == State::AfterLanguage
  753|  10.1k|            || state == State::AfterExtLang
  754|  9.85k|            || state == State::AfterScript
  755|  5.93k|            || state == State::AfterRegion)
  756|  11.7k|            && is_alphanumeric(subtag)
  757|  11.7k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  3.84k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  7.91k|        {
  760|  7.91k|            // Variant
  761|  7.91k|            variant_end = end;
  762|  7.91k|            output.push('-');
  763|  7.91k|            output.extend(to_lowercase(subtag));
  764|  7.91k|            state = State::AfterRegion;
  765|  7.91k|        } else {
  766|  3.84k|            return Err(LanguageTagParseError {
  767|  3.84k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  3.84k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   155k|    if let State::InExtension { expected: true } = state {
  774|  2.06k|        return Err(LanguageTagParseError {
  775|  2.06k|            kind: TagParseErrorKind::EmptyExtension,
  776|  2.06k|        });
  777|   153k|    }
  778|   153k|    if let State::InPrivateUse { expected: true } = state {
  779|    864|        return Err(LanguageTagParseError {
  780|    864|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    864|        });
  782|   152k|    }
  783|   152k|
  784|   152k|    //We make sure we have not skipped anyone
  785|   152k|    if extlang_end < language_end {
  786|   149k|        extlang_end = language_end;
  787|   149k|    }
  788|   152k|    if script_end < extlang_end {
  789|   148k|        script_end = extlang_end;
  790|   148k|    }
  791|   152k|    if region_end < script_end {
  792|   147k|        region_end = script_end;
  793|   147k|    }
  794|   152k|    if variant_end < region_end {
  795|   146k|        variant_end = region_end;
  796|   146k|    }
  797|   152k|    if extension_end < variant_end {
  798|   150k|        extension_end = variant_end;
  799|   150k|    }
  800|       |
  801|   152k|    Ok(TagElementsPositions {
  802|   152k|        language_end,
  803|   152k|        extlang_end,
  804|   152k|        script_end,
  805|   152k|        region_end,
  806|   152k|        variant_end,
  807|   152k|        extension_end,
  808|   152k|    })
  809|   182k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsjwRv1y82X7y_5oxrdf:
  571|  5.66k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsjwRv1y82X7y_5oxrdf:
  587|   188k|fn parse_language_tag(
  588|   188k|    input: &str,
  589|   188k|    output: &mut impl OutputBuffer,
  590|   188k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   188k|    if let Some(tag) = GRANDFATHEREDS
  593|   188k|        .iter()
  594|   188k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   188k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  5.68k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  5.68k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  5.68k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  5.68k|            Ok(TagElementsPositions {
  618|  5.68k|                language_end: input.len(),
  619|  5.68k|                extlang_end: input.len(),
  620|  5.68k|                script_end: input.len(),
  621|  5.68k|                region_end: input.len(),
  622|  5.68k|                variant_end: input.len(),
  623|  5.68k|                extension_end: input.len(),
  624|  5.68k|            })
  625|       |        }
  626|       |    } else {
  627|   182k|        parse_langtag(input, output)
  628|       |    }
  629|   188k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsjwRv1y82X7y_5oxrdf:
  571|  5.68k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsjwRv1y82X7y_5oxrdf:
  594|  4.89M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCsjwRv1y82X7y_5oxrdf:
  891|  8.44k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  8.44k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  8.44k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsjwRv1y82X7y_5oxrdf:
  636|   387k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCsjwRv1y82X7y_5oxrdf:
  881|  31.2k|fn is_alphanumeric(s: &str) -> bool {
  882|  31.2k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  31.2k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCsjwRv1y82X7y_5oxrdf:
  897|  5.66k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  5.66k|    let mut chars = s.chars();
  899|  5.66k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  5.66k|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsjwRv1y82X7y_5oxrdf:
  563|  59.8k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCsjwRv1y82X7y_5oxrdf:
  871|   192k|fn is_alphabetic(s: &str) -> bool {
  872|   192k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   192k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCsjwRv1y82X7y_5oxrdf:
  886|  5.68k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  5.68k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  5.68k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCsjwRv1y82X7y_5oxrdf:
  903|   186k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   186k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   186k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCsjwRv1y82X7y_5oxrdf:
  876|  2.85k|fn is_numeric(s: &str) -> bool {
  877|  2.85k|    s.chars().all(|x| x.is_ascii_digit())
  878|  2.85k|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsjwRv1y82X7y_5oxrdf:
  862|   394k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   394k|        let tag = self.split.next()?;
  864|   238k|        let tag_end = self.position + tag.len();
  865|   238k|        self.position = tag_end + 1;
  866|   238k|        Some((tag, tag_end))
  867|   394k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCsjwRv1y82X7y_5oxrdf:
  850|   182k|    fn new(input: &'a str) -> Self {
  851|   182k|        Self {
  852|   182k|            split: input.split('-'),
  853|   182k|            position: 0,
  854|   182k|        }
  855|   182k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|  2.85k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|  94.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_Cs87w0kKV82sz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  490|  29.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  29.4k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  6.32k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    864|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  3.84k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  3.84k|                f,
  503|  3.84k|                "A subtag fails to parse, it does not match any other subtags"
  504|  3.84k|            ),
  505|  14.8k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  2.97k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|    558|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  29.4k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|   876k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   123k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_queryCsev5kJ09hNTn_5oxttl:
 1504|  52.2k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   200k|        while let Some(c) = self.input.next() {
 1506|   173k|            if c == '#' {
 1507|  15.7k|                self.output_positions.query_end = self.output.len();
 1508|  15.7k|                self.output.push('#');
 1509|  15.7k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   157k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  26.5k|        self.output_positions.query_end = self.output.len();
 1515|  26.5k|        Ok(())
 1516|  52.2k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCsev5kJ09hNTn_5oxttl:
   70|  91.5k|    pub fn parse_unchecked(iri: T) -> Self {
   71|  91.5k|        let positions =
   72|  91.5k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|  91.5k|        Self { iri, positions }
   74|  91.5k|    }
_RNvXsg_CsbOXESBDtkxG_5oxiriINtB5_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsev5kJ09hNTn_5oxttl:
  417|   204k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|   204k|        self.iri.fmt(f)
  419|   204k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCsev5kJ09hNTn_5oxttl:
 1534|   910k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   910k|        if UNCHECKED || is_url_code_point(c) {
 1536|   859k|            self.output.push(c);
 1537|   859k|            Ok(())
 1538|  51.1k|        } else if c == '%' {
 1539|  18.2k|            self.read_echar()
 1540|       |        } else {
 1541|  32.9k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   910k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCsev5kJ09hNTn_5oxttl:
  717|   117k|    pub fn path(&self) -> &str {
  718|   117k|        self.0.path()
  719|   117k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCsev5kJ09hNTn_5oxttl:
 1245|  77.9k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  77.9k|        if self.input.starts_with('/') {
 1247|  72.3k|            self.input.next();
 1248|  72.3k|            self.output.push('/');
 1249|  72.3k|            self.parse_authority()
 1250|       |        } else {
 1251|  5.52k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  5.52k|            self.parse_path()
 1253|       |        }
 1254|  77.9k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCsev5kJ09hNTn_5oxttl:
 1439|  72.3k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  72.3k|        match c {
 1441|       |            None => {
 1442|  20.1k|                self.output_positions.path_end = self.output.len();
 1443|  20.1k|                self.output_positions.query_end = self.output.len();
 1444|  20.1k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  6.68k|                self.output_positions.path_end = self.output.len();
 1448|  6.68k|                self.output.push('?');
 1449|  6.68k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  3.96k|                self.output_positions.path_end = self.output.len();
 1453|  3.96k|                self.output_positions.query_end = self.output.len();
 1454|  3.96k|                self.output.push('#');
 1455|  3.96k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  41.6k|                self.output.push('/');
 1459|  41.6k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  72.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E23parse_path_or_authorityCsev5kJ09hNTn_5oxttl:
 1245|  28.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  28.5k|        if self.input.starts_with('/') {
 1247|  14.5k|            self.input.next();
 1248|  14.5k|            self.output.push('/');
 1249|  14.5k|            self.parse_authority()
 1250|       |        } else {
 1251|  14.0k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  14.0k|            self.parse_path()
 1253|       |        }
 1254|  28.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E16parse_path_startCsev5kJ09hNTn_5oxttl:
 1439|  71.3k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  71.3k|        match c {
 1441|       |            None => {
 1442|  34.9k|                self.output_positions.path_end = self.output.len();
 1443|  34.9k|                self.output_positions.query_end = self.output.len();
 1444|  34.9k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  13.7k|                self.output_positions.path_end = self.output.len();
 1448|  13.7k|                self.output.push('?');
 1449|  13.7k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  12.0k|                self.output_positions.path_end = self.output.len();
 1453|  12.0k|                self.output_positions.query_end = self.output.len();
 1454|  12.0k|                self.output.push('#');
 1455|  12.0k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  10.5k|                self.output.push('/');
 1459|  10.5k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  71.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCsev5kJ09hNTn_5oxttl:
 1359|  72.3k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  72.3k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  10.0k|            let start_position = self.input.position;
 1363|  40.3k|            while let Some(c) = self.input.next() {
 1364|  40.3k|                self.output.push(c);
 1365|  40.3k|                if c == ']' {
 1366|  10.0k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  10.0k|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|  10.0k|                    }
 1372|       |
 1373|  10.0k|                    let c = self.input.next();
 1374|  10.0k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  2.64k|                            self.output.push(':');
 1377|  2.64k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  7.44k|                            self.output_positions.authority_end = self.output.len();
 1381|  7.44k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  30.3k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   512k|            loop {
 1404|   512k|                let c = self.input.next();
 1405|   512k|                match c {
 1406|       |                    Some(':') => {
 1407|  14.1k|                        self.output.push(':');
 1408|  14.1k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  48.1k|                        self.output_positions.authority_end = self.output.len();
 1412|  48.1k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   449k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  72.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E5parseCsev5kJ09hNTn_5oxttl:
 1174|   371k|    fn parse(
 1175|   371k|        iri: &'a str,
 1176|   371k|        base: Option<IriRef<&'a str>>,
 1177|   371k|        output: &'a mut O,
 1178|   371k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   371k|        let mut parser = Self {
 1180|   371k|            iri,
 1181|   371k|            base,
 1182|   371k|            input: ParserInput {
 1183|   371k|                value: iri.chars(),
 1184|   371k|                position: 0,
 1185|   371k|            },
 1186|   371k|            output,
 1187|   371k|            output_positions: IriElementsPositions {
 1188|   371k|                scheme_end: 0,
 1189|   371k|                authority_end: 0,
 1190|   371k|                path_end: 0,
 1191|   371k|                query_end: 0,
 1192|   371k|            },
 1193|   371k|            input_scheme_end: 0,
 1194|   371k|        };
 1195|   371k|        parser.parse_scheme_start()?;
 1196|   283k|        Ok(parser.output_positions)
 1197|   371k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E15parse_authorityCsev5kJ09hNTn_5oxttl:
 1335|   107k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   267k|        loop {
 1338|   267k|            let c = self.input.next();
 1339|   267k|            match c {
 1340|       |                Some('@') => {
 1341|  4.55k|                    self.output.push('@');
 1342|  4.55k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  97.7k|                    self.input = ParserInput {
 1346|  97.7k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  97.7k|                        position: self.input_scheme_end + 2,
 1348|  97.7k|                    };
 1349|  97.7k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  97.7k|                    return self.parse_host();
 1351|       |                }
 1352|   165k|                Some(c) => {
 1353|   165k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   107k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_fragmentCsev5kJ09hNTn_5oxttl:
 1518|  53.9k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   177k|        while let Some(c) = self.input.next() {
 1520|   137k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  40.1k|        Ok(())
 1523|  53.9k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCsev5kJ09hNTn_5oxttl:
 1546|  64.6k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  64.6k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  64.6k|            self.output.push(c);
 1549|  64.6k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  64.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCsev5kJ09hNTn_5oxttl:
 1174|  91.5k|    fn parse(
 1175|  91.5k|        iri: &'a str,
 1176|  91.5k|        base: Option<IriRef<&'a str>>,
 1177|  91.5k|        output: &'a mut O,
 1178|  91.5k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  91.5k|        let mut parser = Self {
 1180|  91.5k|            iri,
 1181|  91.5k|            base,
 1182|  91.5k|            input: ParserInput {
 1183|  91.5k|                value: iri.chars(),
 1184|  91.5k|                position: 0,
 1185|  91.5k|            },
 1186|  91.5k|            output,
 1187|  91.5k|            output_positions: IriElementsPositions {
 1188|  91.5k|                scheme_end: 0,
 1189|  91.5k|                authority_end: 0,
 1190|  91.5k|                path_end: 0,
 1191|  91.5k|                query_end: 0,
 1192|  91.5k|            },
 1193|  91.5k|            input_scheme_end: 0,
 1194|  91.5k|        };
 1195|  91.5k|        parser.parse_scheme_start()?;
 1196|  91.5k|        Ok(parser.output_positions)
 1197|  91.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCsev5kJ09hNTn_5oxttl:
 1546|   157k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   157k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   139k|            self.output.push(c);
 1549|   139k|            Ok(())
 1550|  18.6k|        } else if c == '%' {
 1551|  12.7k|            self.read_echar()
 1552|       |        } else {
 1553|  5.90k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   157k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCsev5kJ09hNTn_5oxttl:
  258|   117k|    pub fn path(&self) -> &str {
  259|   117k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|   117k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_refCsev5kJ09hNTn_5oxttl:
  154|   371k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   371k|        IriRef {
  156|   371k|            iri: &self.iri,
  157|   371k|            positions: self.positions,
  158|   371k|        }
  159|   371k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCsev5kJ09hNTn_5oxttl:
 1504|  17.1k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  81.8k|        while let Some(c) = self.input.next() {
 1506|  72.0k|            if c == '#' {
 1507|  7.32k|                self.output_positions.query_end = self.output.len();
 1508|  7.32k|                self.output.push('#');
 1509|  7.32k|                return self.parse_fragment();
 1510|       |            } else {
 1511|  64.6k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  9.78k|        self.output_positions.query_end = self.output.len();
 1515|  9.78k|        Ok(())
 1516|  17.1k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCsev5kJ09hNTn_5oxttl:
   89|   371k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   371k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   371k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   283k|        Ok(IriRef {
   93|   283k|            iri: target_buffer,
   94|   283k|            positions,
   95|   283k|        })
   96|   371k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCsev5kJ09hNTn_5oxttl:
 1534|  1.16M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.16M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.16M|            self.output.push(c);
 1537|  1.16M|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.16M|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCsev5kJ09hNTn_5oxttl:
  584|   371k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   371k|        Ok(Iri(self.0.resolve(iri)?))
  586|   371k|    }
_RNvXsL_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsev5kJ09hNTn_5oxttl:
  896|   204k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|   204k|        self.0.fmt(f)
  898|   204k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCsev5kJ09hNTn_5oxttl:
 1199|  91.5k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  91.5k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  91.5k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  91.5k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_erroruECsev5kJ09hNTn_5oxttl:
 1578|  87.6k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  87.6k|        Err(IriParseError { kind })
 1580|  87.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E18parse_scheme_startCsev5kJ09hNTn_5oxttl:
 1199|   371k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   371k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  2.84k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  2.84k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   291k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   281k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   371k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_hostCsev5kJ09hNTn_5oxttl:
 1359|   102k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   102k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  46.6k|            let start_position = self.input.position;
 1363|   233k|            while let Some(c) = self.input.next() {
 1364|   221k|                self.output.push(c);
 1365|   221k|                if c == ']' {
 1366|  34.7k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  34.7k|                    if !UNCHECKED {
 1368|  34.7k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  4.19k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  30.5k|                        }
 1371|      0|                    }
 1372|       |
 1373|  30.5k|                    let c = self.input.next();
 1374|  30.5k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  12.9k|                            self.output.push(':');
 1377|  12.9k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  11.4k|                            self.output_positions.authority_end = self.output.len();
 1381|  11.4k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  6.11k|                        Some(c) => {
 1384|  6.11k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  6.11k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   186k|                }
 1393|       |            }
 1394|  11.8k|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|  11.8k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   156k|            loop {
 1404|   156k|                let c = self.input.next();
 1405|   156k|                match c {
 1406|       |                    Some(':') => {
 1407|  19.8k|                        self.output.push(':');
 1408|  19.8k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  33.6k|                        self.output_positions.authority_end = self.output.len();
 1412|  33.6k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   102k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   102k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E19remove_last_segmentCsev5kJ09hNTn_5oxttl:
 1525|   117k|    fn remove_last_segment(&mut self) {
 1526|   117k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   117k|            .rfind('/')
 1528|   117k|            .unwrap_or(0);
 1529|   117k|        self.output
 1530|   117k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   117k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echar0Csev5kJ09hNTn_5oxttl:
 1561|  27.8k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCsev5kJ09hNTn_5oxttl:
 1518|  13.5k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  82.7k|        while let Some(c) = self.input.next() {
 1520|  69.1k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  13.5k|        Ok(())
 1523|  13.5k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echars_0Csev5kJ09hNTn_5oxttl:
 1562|  16.1k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCsev5kJ09hNTn_5oxttl:
 1335|  72.3k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   557k|        loop {
 1338|   557k|            let c = self.input.next();
 1339|   557k|            match c {
 1340|       |                Some('@') => {
 1341|    690|                    self.output.push('@');
 1342|    690|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  71.6k|                    self.input = ParserInput {
 1346|  71.6k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  71.6k|                        position: self.input_scheme_end + 2,
 1348|  71.6k|                    };
 1349|  71.6k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  71.6k|                    return self.parse_host();
 1351|       |                }
 1352|   484k|                Some(c) => {
 1353|   484k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  72.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_relativeCsev5kJ09hNTn_5oxttl:
 1256|   316k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   316k|        if let Some(base) = self.base {
 1258|   316k|            match self.input.front() {
 1259|       |                None => {
 1260|  76.9k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  76.9k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  76.9k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  76.9k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  76.9k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  76.9k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   111k|                    self.input.next();
 1269|   111k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  20.9k|                    self.input.next();
 1273|  20.9k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  20.9k|                    self.output.push('?');
 1275|  20.9k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  20.9k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  20.9k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  20.9k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  12.8k|                    self.input.next();
 1282|  12.8k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  12.8k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  12.8k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  12.8k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  12.8k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  12.8k|                    self.output.push('#');
 1288|  12.8k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|  94.7k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|  94.7k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|  94.7k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|  94.7k|                    self.output_positions.path_end = base.positions.path_end;
 1295|  94.7k|                    self.remove_last_segment();
 1296|  94.7k|                    if self.output.len() > base.positions.scheme_end {
 1297|  89.4k|                        // We have some path or authority, we keep a base '/'
 1298|  89.4k|                        self.output.push('/');
 1299|  89.4k|                    }
 1300|  94.7k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   316k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_pathCsev5kJ09hNTn_5oxttl:
 1468|   160k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   676k|        loop {
 1470|   676k|            let c = self.input.next();
 1471|   676k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   171k|                    if self.output.as_str().ends_with("/..") {
 1474|  3.64k|                        self.remove_last_segment();
 1475|  3.64k|                        self.remove_last_segment();
 1476|  3.64k|                        self.output.push('/');
 1477|   167k|                    } else if self.output.as_str().ends_with("/.") {
 1478|  15.6k|                        self.remove_last_segment();
 1479|  15.6k|                        self.output.push('/');
 1480|   152k|                    } else if c == Some('/') {
 1481|  27.1k|                        self.output.push('/');
 1482|   125k|                    }
 1483|       |
 1484|   171k|                    if c == Some('?') {
 1485|  17.4k|                        self.output_positions.path_end = self.output.len();
 1486|  17.4k|                        self.output.push('?');
 1487|  17.4k|                        return self.parse_query();
 1488|   154k|                    } else if c == Some('#') {
 1489|  13.3k|                        self.output_positions.path_end = self.output.len();
 1490|  13.3k|                        self.output_positions.query_end = self.output.len();
 1491|  13.3k|                        self.output.push('#');
 1492|  13.3k|                        return self.parse_fragment();
 1493|   140k|                    } else if c.is_none() {
 1494|   104k|                        self.output_positions.path_end = self.output.len();
 1495|   104k|                        self.output_positions.query_end = self.output.len();
 1496|   104k|                        return Ok(());
 1497|  35.9k|                    }
 1498|       |                }
 1499|   505k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   160k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echarCsev5kJ09hNTn_5oxttl:
 1558|  30.9k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  30.9k|        let c1 = self.input.next();
 1560|  30.9k|        let c2 = self.input.next();
 1561|  30.9k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  16.1k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  13.7k|            self.output.push('%');
 1565|  13.7k|            self.output.push(c1.unwrap());
 1566|  13.7k|            self.output.push(c2.unwrap());
 1567|  13.7k|            Ok(())
 1568|       |        } else {
 1569|  17.2k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  17.2k|                Some('%'),
 1571|  17.2k|                c1,
 1572|  17.2k|                c2,
 1573|  17.2k|            ]))
 1574|       |        }
 1575|  30.9k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCsev5kJ09hNTn_5oxttl:
  567|  91.5k|    pub fn parse_unchecked(iri: T) -> Self {
  568|  91.5k|        Iri(IriRef::parse_unchecked(iri))
  569|  91.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E12parse_schemeCsev5kJ09hNTn_5oxttl:
 1213|  86.4k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   294k|        loop {
 1215|   294k|            let c = self.input.next();
 1216|   284k|            match c {
 1217|   284k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   207k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  51.3k|                    self.output.push(':');
 1222|  51.3k|                    self.output_positions.scheme_end = self.output.len();
 1223|  51.3k|                    self.input_scheme_end = self.input.position;
 1224|  51.3k|                    return if self.input.starts_with('/') {
 1225|  28.5k|                        self.input.next();
 1226|  28.5k|                        self.output.push('/');
 1227|  28.5k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  22.8k|                        self.output_positions.authority_end = self.output.len();
 1230|  22.8k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  35.0k|                    self.input = ParserInput {
 1235|  35.0k|                        value: self.iri.chars(),
 1236|  35.0k|                        position: 0,
 1237|  35.0k|                    }; // reset
 1238|  35.0k|                    self.output.clear();
 1239|  35.0k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  86.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_portCsev5kJ09hNTn_5oxttl:
 1420|  32.8k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  39.8k|        loop {
 1422|  39.8k|            let c = self.input.next();
 1423|  39.8k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  26.2k|                    self.output_positions.authority_end = self.output.len();
 1426|  26.2k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  13.6k|                Some(c) => {
 1429|  13.6k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  7.06k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  6.57k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  32.8k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCsev5kJ09hNTn_5oxttl:
 1468|  60.8k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   228k|        loop {
 1470|   228k|            let c = self.input.next();
 1471|   228k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  67.2k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  67.2k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  67.2k|                    } else if c == Some('/') {
 1481|  6.38k|                        self.output.push('/');
 1482|  60.8k|                    }
 1483|       |
 1484|  67.2k|                    if c == Some('?') {
 1485|  10.4k|                        self.output_positions.path_end = self.output.len();
 1486|  10.4k|                        self.output.push('?');
 1487|  10.4k|                        return self.parse_query();
 1488|  56.7k|                    } else if c == Some('#') {
 1489|  2.29k|                        self.output_positions.path_end = self.output.len();
 1490|  2.29k|                        self.output_positions.query_end = self.output.len();
 1491|  2.29k|                        self.output.push('#');
 1492|  2.29k|                        return self.parse_fragment();
 1493|  54.4k|                    } else if c.is_none() {
 1494|  48.0k|                        self.output_positions.path_end = self.output.len();
 1495|  48.0k|                        self.output_positions.query_end = self.output.len();
 1496|  48.0k|                        return Ok(());
 1497|  6.38k|                    }
 1498|       |                }
 1499|   161k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  60.8k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCsev5kJ09hNTn_5oxttl:
 1213|  91.5k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   402k|        loop {
 1215|   402k|            let c = self.input.next();
 1216|   402k|            match c {
 1217|   402k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   310k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  91.5k|                    self.output.push(':');
 1222|  91.5k|                    self.output_positions.scheme_end = self.output.len();
 1223|  91.5k|                    self.input_scheme_end = self.input.position;
 1224|  91.5k|                    return if self.input.starts_with('/') {
 1225|  77.9k|                        self.input.next();
 1226|  77.9k|                        self.output.push('/');
 1227|  77.9k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  13.6k|                        self.output_positions.authority_end = self.output.len();
 1230|  13.6k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  91.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCsev5kJ09hNTn_5oxttl:
 1420|  16.7k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  39.6k|        loop {
 1422|  39.6k|            let c = self.input.next();
 1423|  39.6k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  16.7k|                    self.output_positions.authority_end = self.output.len();
 1426|  16.7k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  22.8k|                Some(c) => {
 1429|  22.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  22.8k|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  16.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E20parse_relative_slashCsev5kJ09hNTn_5oxttl:
 1317|   111k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|   111k|        if self.input.starts_with('/') {
 1319|  92.6k|            self.input.next();
 1320|  92.6k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|  92.6k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|  92.6k|            self.output.push('/');
 1323|  92.6k|            self.output.push('/');
 1324|  92.6k|            self.parse_authority()
 1325|       |        } else {
 1326|  18.7k|            self.output
 1327|  18.7k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|  18.7k|            self.output.push('/');
 1329|  18.7k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|  18.7k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|  18.7k|            self.parse_path()
 1332|       |        }
 1333|   111k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer4pushCsev5kJ09hNTn_5oxttl:
 1104|  2.06M|    fn push(&mut self, c: char) {
 1105|  2.06M|        self.push(c);
 1106|  2.06M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer5clearCsev5kJ09hNTn_5oxttl:
 1114|  35.0k|    fn clear(&mut self) {
 1115|  35.0k|        self.clear();
 1116|  35.0k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8push_strCsev5kJ09hNTn_5oxttl:
 1109|   316k|    fn push_str(&mut self, s: &str) {
 1110|   316k|        self.push_str(s);
 1111|   316k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8truncateCsev5kJ09hNTn_5oxttl:
 1119|   215k|    fn truncate(&mut self, new_len: usize) {
 1120|   215k|        self.truncate(new_len);
 1121|   215k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer3lenCsev5kJ09hNTn_5oxttl:
 1124|   658k|    fn len(&self) -> usize {
 1125|   658k|        self.len()
 1126|   658k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer6as_strCsev5kJ09hNTn_5oxttl:
 1129|   457k|    fn as_str(&self) -> &str {
 1130|   457k|        self.as_str()
 1131|   457k|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsev5kJ09hNTn_5oxttl:
 1629|   157k|fn is_url_query_code_point(c: char) -> bool {
 1630|   157k|    is_url_code_point(c)
 1631|  19.9k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   157k|}
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsev5kJ09hNTn_5oxttl:
 1092|   366k|    fn len(&self) -> usize {
 1093|   366k|        self.len
 1094|   366k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsev5kJ09hNTn_5oxttl:
 1087|  71.6k|    fn truncate(&mut self, new_len: usize) {
 1088|  71.6k|        self.len = new_len;
 1089|  71.6k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsev5kJ09hNTn_5oxttl:
 1065|  91.5k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsev5kJ09hNTn_5oxttl:
 1072|  1.94M|    fn push(&mut self, c: char) {
 1073|  1.94M|        self.len += c.len_utf8();
 1074|  1.94M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsev5kJ09hNTn_5oxttl:
 1097|   134k|    fn as_str(&self) -> &str {
 1098|   134k|        ""
 1099|   134k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsev5kJ09hNTn_5oxttl:
 1141|  4.52M|    fn next(&mut self) -> Option<char> {
 1142|  4.52M|        if let Some(head) = self.value.next() {
 1143|  4.15M|            self.position += head.len_utf8();
 1144|  4.15M|            Some(head)
 1145|       |        } else {
 1146|   366k|            None
 1147|       |        }
 1148|  4.52M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsev5kJ09hNTn_5oxttl:
 1151|   779k|    fn front(&self) -> Option<char> {
 1152|   779k|        self.value.clone().next()
 1153|   779k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsev5kJ09hNTn_5oxttl:
 1156|   535k|    fn starts_with(&self, c: char) -> bool {
 1157|   535k|        self.value.as_str().starts_with(c)
 1158|   535k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsev5kJ09hNTn_5oxttl:
 1584|  1.06M|fn is_url_code_point(c: char) -> bool {
 1585|  1.06M|    matches!(c,
 1586|   345k|        'a'..='z'
 1587|   191k|        | 'A'..='Z'
 1588|   485k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   114k|        | '\u{A0}'..='\u{D7FF}'
 1609|  34.2k|        | '\u{F900}'..='\u{FDCF}'
 1610|  34.2k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  34.2k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  34.2k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  34.2k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  34.2k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  34.2k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  34.2k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  34.2k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  34.2k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  34.2k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  34.2k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  34.2k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  34.2k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  34.1k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     25|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  1.06M|}
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsjwRv1y82X7y_5oxrdf:
 1578|  66.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  66.3k|        Err(IriParseError { kind })
 1580|  66.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsjwRv1y82X7y_5oxrdf:
 1468|  86.6k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   340k|        loop {
 1470|   340k|            let c = self.input.next();
 1471|   340k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  93.0k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  93.0k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  93.0k|                    } else if c == Some('/') {
 1481|  12.8k|                        self.output.push('/');
 1482|  80.2k|                    }
 1483|       |
 1484|  93.0k|                    if c == Some('?') {
 1485|  19.3k|                        self.output_positions.path_end = self.output.len();
 1486|  19.3k|                        self.output.push('?');
 1487|  19.3k|                        return self.parse_query();
 1488|  73.7k|                    } else if c == Some('#') {
 1489|  5.87k|                        self.output_positions.path_end = self.output.len();
 1490|  5.87k|                        self.output_positions.query_end = self.output.len();
 1491|  5.87k|                        self.output.push('#');
 1492|  5.87k|                        return self.parse_fragment();
 1493|  67.8k|                    } else if c.is_none() {
 1494|  55.0k|                        self.output_positions.path_end = self.output.len();
 1495|  55.0k|                        self.output_positions.query_end = self.output.len();
 1496|  55.0k|                        return Ok(());
 1497|  12.8k|                    }
 1498|       |                }
 1499|   246k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  86.6k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsjwRv1y82X7y_5oxrdf:
  185|   283k|    pub fn into_inner(self) -> T {
  186|   283k|        self.iri
  187|   283k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsjwRv1y82X7y_5oxrdf:
 1561|  41.0k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsjwRv1y82X7y_5oxrdf:
   58|  30.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  30.6k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  30.6k|        Ok(Self { iri, positions })
   61|  30.6k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE5parseCsjwRv1y82X7y_5oxrdf:
   58|   191k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   191k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   125k|        Ok(Self { iri, positions })
   61|   191k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsjwRv1y82X7y_5oxrdf:
  556|  30.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  30.6k|        IriRef::parse(iri)?.try_into()
  558|  30.6k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriReE5parseCsjwRv1y82X7y_5oxrdf:
  556|   191k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   191k|        IriRef::parse(iri)?.try_into()
  558|   191k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE11is_absoluteCsjwRv1y82X7y_5oxrdf:
  199|   125k|    pub fn is_absolute(&self) -> bool {
  200|   125k|        self.positions.scheme_end != 0
  201|   125k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCsjwRv1y82X7y_5oxrdf:
  199|  30.6k|    pub fn is_absolute(&self) -> bool {
  200|  30.6k|        self.positions.scheme_end != 0
  201|  30.6k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsjwRv1y82X7y_5oxrdf:
 1562|  18.0k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsjwRv1y82X7y_5oxrdf:
 1245|   202k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   202k|        if self.input.starts_with('/') {
 1247|   199k|            self.input.next();
 1248|   199k|            self.output.push('/');
 1249|   199k|            self.parse_authority()
 1250|       |        } else {
 1251|  2.38k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  2.38k|            self.parse_path()
 1253|       |        }
 1254|   202k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsjwRv1y82X7y_5oxrdf:
 1439|   162k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   162k|        match c {
 1441|       |            None => {
 1442|  40.5k|                self.output_positions.path_end = self.output.len();
 1443|  40.5k|                self.output_positions.query_end = self.output.len();
 1444|  40.5k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  39.8k|                self.output_positions.path_end = self.output.len();
 1448|  39.8k|                self.output.push('?');
 1449|  39.8k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  18.4k|                self.output_positions.path_end = self.output.len();
 1453|  18.4k|                self.output_positions.query_end = self.output.len();
 1454|  18.4k|                self.output.push('#');
 1455|  18.4k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  63.8k|                self.output.push('/');
 1459|  63.8k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   162k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsjwRv1y82X7y_5oxrdf:
 1558|  51.6k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  51.6k|        let c1 = self.input.next();
 1560|  51.6k|        let c2 = self.input.next();
 1561|  51.6k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  19.6k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  14.2k|            self.output.push('%');
 1565|  14.2k|            self.output.push(c1.unwrap());
 1566|  14.2k|            self.output.push(c2.unwrap());
 1567|  14.2k|            Ok(())
 1568|       |        } else {
 1569|  37.4k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  37.4k|                Some('%'),
 1571|  37.4k|                c1,
 1572|  37.4k|                c2,
 1573|  37.4k|            ]))
 1574|       |        }
 1575|  51.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsjwRv1y82X7y_5oxrdf:
 1174|   222k|    fn parse(
 1175|   222k|        iri: &'a str,
 1176|   222k|        base: Option<IriRef<&'a str>>,
 1177|   222k|        output: &'a mut O,
 1178|   222k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   222k|        let mut parser = Self {
 1180|   222k|            iri,
 1181|   222k|            base,
 1182|   222k|            input: ParserInput {
 1183|   222k|                value: iri.chars(),
 1184|   222k|                position: 0,
 1185|   222k|            },
 1186|   222k|            output,
 1187|   222k|            output_positions: IriElementsPositions {
 1188|   222k|                scheme_end: 0,
 1189|   222k|                authority_end: 0,
 1190|   222k|                path_end: 0,
 1191|   222k|                query_end: 0,
 1192|   222k|            },
 1193|   222k|            input_scheme_end: 0,
 1194|   222k|        };
 1195|   222k|        parser.parse_scheme_start()?;
 1196|   156k|        Ok(parser.output_positions)
 1197|   222k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsjwRv1y82X7y_5oxrdf:
 1335|   199k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  1.16M|        loop {
 1338|  1.16M|            let c = self.input.next();
 1339|  1.16M|            match c {
 1340|       |                Some('@') => {
 1341|  8.00k|                    self.output.push('@');
 1342|  8.00k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   175k|                    self.input = ParserInput {
 1346|   175k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   175k|                        position: self.input_scheme_end + 2,
 1348|   175k|                    };
 1349|   175k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   175k|                    return self.parse_host();
 1351|       |                }
 1352|   977k|                Some(c) => {
 1353|   977k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   199k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsjwRv1y82X7y_5oxrdf:
 1518|  36.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   303k|        while let Some(c) = self.input.next() {
 1520|   270k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  32.3k|        Ok(())
 1523|  36.3k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsjwRv1y82X7y_5oxrdf:
  968|  30.6k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  30.6k|        if iri.is_absolute() {
  970|  30.6k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  30.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsjwRv1y82X7y_5oxrdf:
 1213|   222k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  1.32M|        loop {
 1215|  1.32M|            let c = self.input.next();
 1216|  1.32M|            match c {
 1217|  1.32M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  1.10M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   222k|                    self.output.push(':');
 1222|   222k|                    self.output_positions.scheme_end = self.output.len();
 1223|   222k|                    self.input_scheme_end = self.input.position;
 1224|   222k|                    return if self.input.starts_with('/') {
 1225|   202k|                        self.input.next();
 1226|   202k|                        self.output.push('/');
 1227|   202k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  20.4k|                        self.output_positions.authority_end = self.output.len();
 1230|  20.4k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   222k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsjwRv1y82X7y_5oxrdf:
 1420|  57.1k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  71.0k|        loop {
 1422|  71.0k|            let c = self.input.next();
 1423|  71.0k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  43.2k|                    self.output_positions.authority_end = self.output.len();
 1426|  43.2k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  27.8k|                Some(c) => {
 1429|  27.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  13.8k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  13.9k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  57.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsjwRv1y82X7y_5oxrdf:
 1534|  2.32M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  2.32M|        if UNCHECKED || is_url_code_point(c) {
 1536|  2.28M|            self.output.push(c);
 1537|  2.28M|            Ok(())
 1538|  39.6k|        } else if c == '%' {
 1539|  34.6k|            self.read_echar()
 1540|       |        } else {
 1541|  4.96k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  2.32M|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriReEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsjwRv1y82X7y_5oxrdf:
  968|   125k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   125k|        if iri.is_absolute() {
  970|   125k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   125k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsjwRv1y82X7y_5oxrdf:
  665|   283k|    pub fn into_inner(self) -> T {
  666|   283k|        self.0.into_inner()
  667|   283k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsjwRv1y82X7y_5oxrdf:
 1546|   313k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   313k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   291k|            self.output.push(c);
 1549|   291k|            Ok(())
 1550|  22.1k|        } else if c == '%' {
 1551|  17.0k|            self.read_echar()
 1552|       |        } else {
 1553|  5.08k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   313k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsjwRv1y82X7y_5oxrdf:
 1504|  59.1k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   354k|        while let Some(c) = self.input.next() {
 1506|   325k|            if c == '#' {
 1507|  12.0k|                self.output_positions.query_end = self.output.len();
 1508|  12.0k|                self.output.push('#');
 1509|  12.0k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   313k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  28.2k|        self.output_positions.query_end = self.output.len();
 1515|  28.2k|        Ok(())
 1516|  59.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsjwRv1y82X7y_5oxrdf:
 1199|   222k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   222k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   222k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   222k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsjwRv1y82X7y_5oxrdf:
 1359|   183k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   183k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  30.5k|            let start_position = self.input.position;
 1363|   122k|            while let Some(c) = self.input.next() {
 1364|   122k|                self.output.push(c);
 1365|   122k|                if c == ']' {
 1366|  30.5k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  30.5k|                    if !UNCHECKED {
 1368|  30.5k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  30.5k|                        }
 1371|      0|                    }
 1372|       |
 1373|  30.5k|                    let c = self.input.next();
 1374|  30.5k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  14.8k|                            self.output.push(':');
 1377|  14.8k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  10.7k|                            self.output_positions.authority_end = self.output.len();
 1381|  10.7k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  4.97k|                        Some(c) => {
 1384|  4.97k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  4.97k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  92.1k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   977k|            loop {
 1404|   977k|                let c = self.input.next();
 1405|   977k|                match c {
 1406|       |                    Some(':') => {
 1407|  42.3k|                        self.output.push(':');
 1408|  42.3k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   108k|                        self.output_positions.authority_end = self.output.len();
 1412|   108k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   825k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   183k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsjwRv1y82X7y_5oxrdf:
 1156|   608k|    fn starts_with(&self, c: char) -> bool {
 1157|   608k|        self.value.as_str().starts_with(c)
 1158|   608k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsjwRv1y82X7y_5oxrdf:
 1065|   222k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsjwRv1y82X7y_5oxrdf:
 1092|   747k|    fn len(&self) -> usize {
 1093|   747k|        self.len
 1094|   747k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsjwRv1y82X7y_5oxrdf:
 1072|  4.71M|    fn push(&mut self, c: char) {
 1073|  4.71M|        self.len += c.len_utf8();
 1074|  4.71M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsjwRv1y82X7y_5oxrdf:
 1097|   186k|    fn as_str(&self) -> &str {
 1098|   186k|        ""
 1099|   186k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsjwRv1y82X7y_5oxrdf:
 1087|   175k|    fn truncate(&mut self, new_len: usize) {
 1088|   175k|        self.len = new_len;
 1089|   175k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsjwRv1y82X7y_5oxrdf:
 1584|  2.63M|fn is_url_code_point(c: char) -> bool {
 1585|  2.63M|    matches!(c,
 1586|  1.49M|        'a'..='z'
 1587|   241k|        | 'A'..='Z'
 1588|   729k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   176k|        | '\u{A0}'..='\u{D7FF}'
 1609|  56.5k|        | '\u{F900}'..='\u{FDCF}'
 1610|  56.5k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  56.5k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  56.5k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  56.5k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  56.5k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  56.5k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  56.5k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  56.5k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  56.5k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  56.5k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  56.5k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  56.5k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  56.5k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  56.5k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     20|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  2.63M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsjwRv1y82X7y_5oxrdf:
 1141|  5.19M|    fn next(&mut self) -> Option<char> {
 1142|  5.19M|        if let Some(head) = self.value.next() {
 1143|  4.96M|            self.position += head.len_utf8();
 1144|  4.96M|            Some(head)
 1145|       |        } else {
 1146|   224k|            None
 1147|       |        }
 1148|  5.19M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsjwRv1y82X7y_5oxrdf:
 1629|   313k|fn is_url_query_code_point(c: char) -> bool {
 1630|   313k|    is_url_code_point(c)
 1631|  25.8k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   313k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsjwRv1y82X7y_5oxrdf:
 1151|   222k|    fn front(&self) -> Option<char> {
 1152|   222k|        self.value.clone().next()
 1153|   222k|    }
_RNvXsW_CsbOXESBDtkxG_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1003|   154k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   154k|        match &self.kind {
 1005|  2.84k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  22.9k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  22.9k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  4.19k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  20.5k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  48.9k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  48.9k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  54.6k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  54.6k|                f,
 1016|  54.6k|                "Invalid IRI percent encoding '{}'",
 1017|  54.6k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  54.6k|            ),
 1019|       |        }
 1020|   154k|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs7Qy2jXn7BB4_11rand_chacha:
   42|  1.92M|        fn $fn(self) -> Self {
   43|  1.92M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  1.92M|        }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs7Qy2jXn7BB4_11rand_chacha:
  215|  1.92M|    fn shuffle_lane_words3012(self) -> Self {
  216|  1.92M|        Self::new([
  217|  1.92M|            self.0[0].shuffle_lane_words3012(),
  218|  1.92M|            self.0[1].shuffle_lane_words3012(),
  219|  1.92M|        ])
  220|  1.92M|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs7Qy2jXn7BB4_11rand_chacha:
   42|  1.92M|        fn $fn(self) -> Self {
   43|  1.92M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  1.92M|        }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs7Qy2jXn7BB4_11rand_chacha:
   22|  7.71M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  7.71M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  7.71M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs7Qy2jXn7BB4_11rand_chacha:
  201|  1.92M|    fn shuffle_lane_words2301(self) -> Self {
  202|  1.92M|        Self::new([
  203|  1.92M|            self.0[0].shuffle_lane_words2301(),
  204|  1.92M|            self.0[1].shuffle_lane_words2301(),
  205|  1.92M|        ])
  206|  1.92M|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs7Qy2jXn7BB4_11rand_chacha:
   42|  1.92M|        fn $fn(self) -> Self {
   43|  1.92M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  1.92M|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs7Qy2jXn7BB4_11rand_chacha:
   13|  22.0M|    pub fn new(xs: [W; 2]) -> Self {
   14|  22.0M|        x2(xs, PhantomData)
   15|  22.0M|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs7Qy2jXn7BB4_11rand_chacha:
   32|  7.71M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  7.71M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  7.71M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  7.71M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs7Qy2jXn7BB4_11rand_chacha:
  208|  1.92M|    fn shuffle_lane_words1230(self) -> Self {
  209|  1.92M|        Self::new([
  210|  1.92M|            self.0[0].shuffle_lane_words1230(),
  211|  1.92M|            self.0[1].shuffle_lane_words1230(),
  212|  1.92M|        ])
  213|  1.92M|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs7Qy2jXn7BB4_11rand_chacha:
   42|  1.92M|        fn $fn(self) -> Self {
   43|  1.92M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  1.92M|        }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs7Qy2jXn7BB4_11rand_chacha:
  246|  1.44M|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  1.44M|        unsafe { V::unpack(s) }
  248|  1.44M|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs7Qy2jXn7BB4_11rand_chacha:
  246|   160k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   160k|        unsafe { V::unpack(s) }
  248|   160k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs7Qy2jXn7BB4_11rand_chacha:
  251|   160k|    fn vec<V, A>(self, a: A) -> V
  252|   160k|    where
  253|   160k|        V: MultiLane<A>,
  254|   160k|    {
  255|   160k|        V::from_lanes(a)
  256|   160k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs7Qy2jXn7BB4_11rand_chacha:
  259|  1.25k|    fn read_le<V>(self, input: &[u8]) -> V
  260|  1.25k|    where
  261|  1.25k|        V: StoreBytes,
  262|  1.25k|    {
  263|  1.25k|        unsafe { V::unsafe_read_le(input) }
  264|  1.25k|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs7Qy2jXn7BB4_11rand_chacha:
   92|   160k|    unsafe fn instance() -> Self {
   93|   160k|        Avx2Machine(PhantomData)
   94|   160k|    }
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha:
  333|    628|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    628|            #[inline(always)]
  335|    628|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    628|            use std::arch::x86_64::*;
  337|    628|            #[target_feature(enable = "avx")]
  338|    628|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    628|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    628|            }
  341|    628|            #[target_feature(enable = "sse2")]
  342|    628|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    628|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    628|            }
  345|    628|            unsafe {
  346|    628|                if is_x86_feature_detected!("avx") {
  347|    628|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    628|        }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs7Qy2jXn7BB4_11rand_chacha:
   64|    628|    unsafe fn instance() -> Self {
   65|    628|        SseMachine(PhantomData)
   66|    628|    }
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide:
  250|   160k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|   160k|            #[inline(always)]
  252|   160k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|   160k|            use std::arch::x86_64::*;
  254|   160k|            #[target_feature(enable = "avx2")]
  255|   160k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   160k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   160k|                _mm256_zeroupper();
  258|   160k|                ret
  259|   160k|            }
  260|   160k|            #[target_feature(enable = "avx")]
  261|   160k|            #[target_feature(enable = "sse4.1")]
  262|   160k|            #[target_feature(enable = "ssse3")]
  263|   160k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|   160k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|   160k|                _mm256_zeroupper();
  266|   160k|                ret
  267|   160k|            }
  268|   160k|            #[target_feature(enable = "sse4.1")]
  269|   160k|            #[target_feature(enable = "ssse3")]
  270|   160k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|   160k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|   160k|            }
  273|   160k|            #[target_feature(enable = "ssse3")]
  274|   160k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|   160k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|   160k|            }
  277|   160k|            #[target_feature(enable = "sse2")]
  278|   160k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|   160k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|   160k|            }
  281|   160k|            unsafe {
  282|   160k|                if is_x86_feature_detected!("avx2") {
  283|   160k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|   160k|        }
_RNvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide9impl_avx2:
  255|   160k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   160k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   160k|                _mm256_zeroupper();
  258|   160k|                ret
  259|   160k|            }
_RNvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha8impl_avx:
  338|    628|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    628|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    628|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|    628|    fn from(u32x4: [u32; 4]) -> Self {
  131|    628|        vec128_storage { u32x4 }
  132|    628|    }

_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs7Qy2jXn7BB4_11rand_chacha:
   89|  2.57M|            fn write_le(self, out: &mut [u8]) {
   90|  2.57M|                assert_eq!(out.len(), 16);
   91|  2.57M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  2.57M|            }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
  331|   160k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|   160k|        unsafe {
  333|   160k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|   160k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|   160k|            Self::new(x)
  336|   160k|        }
  337|   160k|    }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs7Qy2jXn7BB4_11rand_chacha:
   18|  2.57M|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  2.57M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  2.57M|            }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs7Qy2jXn7BB4_11rand_chacha:
  523|  2.24M|    fn insert(self, v: u32, i: u32) -> Self {
  524|  2.24M|        Self::new(unsafe {
  525|  2.24M|            match i {
  526|  1.12M|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  1.12M|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  2.24M|    }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1611|   642k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   642k|            let [a, b] = self.0[0].to_lanes();
 1613|   642k|            let [c, d] = self.0[1].to_lanes();
 1614|   642k|            [a, b, c, d]
 1615|   642k|        }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
 1402|   321k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   321k|            Self::new(p.avx)
 1404|   321k|        }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1439|  1.28M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  1.28M|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  1.28M|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs7Qy2jXn7BB4_11rand_chacha:
 1590|  3.85M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  3.85M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  3.85M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs7Qy2jXn7BB4_11rand_chacha:
 1470|  3.85M|            fn $name(self) -> Self {
 1471|  3.85M|                Self::new(unsafe {
 1472|  3.85M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  3.85M|                })
 1474|  3.85M|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs7Qy2jXn7BB4_11rand_chacha:
 1586|  3.85M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  3.85M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  3.85M|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
  323|   642k|    fn to_lanes(self) -> [u32; 4] {
  324|   642k|        unsafe {
  325|   642k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   642k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   642k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   642k|        }
  329|   642k|    }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs7Qy2jXn7BB4_11rand_chacha:
 1543|  15.4M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  15.4M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  15.4M|                }
_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs7Qy2jXn7BB4_11rand_chacha:
 1543|  15.4M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  15.4M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  15.4M|                }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs7Qy2jXn7BB4_11rand_chacha:
 1527|  15.4M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  15.4M|                    *self = self.$bin_fn(rhs);
 1529|  15.4M|                }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs7Qy2jXn7BB4_11rand_chacha:
   79|  1.25k|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|  1.25k|                assert_eq!(input.len(), 16);
   81|  1.25k|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|  1.25k|            }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1430|  1.28M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  1.28M|            unsafe {
 1432|  1.28M|                [
 1433|  1.28M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  1.28M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  1.28M|                ]
 1436|  1.28M|            }
 1437|  1.28M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs7Qy2jXn7BB4_11rand_chacha:
 1480|  3.85M|            fn $name(self) -> Self {
 1481|  3.85M|                Self::new(unsafe {
 1482|  3.85M|                    _mm256_or_si256(
 1483|  3.85M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  3.85M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  3.85M|                    )
 1486|  3.85M|                })
 1487|  3.85M|            }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs7Qy2jXn7BB4_11rand_chacha:
   64|  8.99M|            fn new(x: __m128i) -> Self {
   65|  8.99M|                $vec {
   66|  8.99M|                    x,
   67|  8.99M|                    s3: PhantomData,
   68|  8.99M|                    s4: PhantomData,
   69|  8.99M|                    ni: PhantomData,
   70|  8.99M|                }
   71|  8.99M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs7Qy2jXn7BB4_11rand_chacha:
 1470|  3.85M|            fn $name(self) -> Self {
 1471|  3.85M|                Self::new(unsafe {
 1472|  3.85M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  3.85M|                })
 1474|  3.85M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs7Qy2jXn7BB4_11rand_chacha:
 1480|  3.85M|            fn $name(self) -> Self {
 1481|  3.85M|                Self::new(unsafe {
 1482|  3.85M|                    _mm256_or_si256(
 1483|  3.85M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  3.85M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  3.85M|                    )
 1486|  3.85M|                })
 1487|  3.85M|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs7Qy2jXn7BB4_11rand_chacha:
 1582|  3.85M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  3.85M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  3.85M|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
 1602|   160k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|   160k|            Self::new([
 1604|   160k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|   160k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|   160k|            ])
 1607|   160k|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs7Qy2jXn7BB4_11rand_chacha:
  519|   642k|    fn extract(self, i: u32) -> u32 {
  520|   642k|        self.to_lanes()[i as usize]
  521|   642k|    }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1617|   642k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   642k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   642k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   642k|            Self::new([ab, cd])
 1621|   642k|        }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
   52|  1.44M|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  1.44M|                Self::new(x.sse2)
   54|  1.44M|            }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs7Qy2jXn7BB4_11rand_chacha:
 1394|  59.4M|        fn new(x: __m256i) -> Self {
 1395|  59.4M|            Self { x, ni: PhantomData }
 1396|  59.4M|        }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs7Qy2jXn7BB4_11rand_chacha:
 1683|   160k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|   160k|            Self {
 1685|   160k|                avx: [
 1686|   160k|                    vec256_storage { avx: x.0[0].x },
 1687|   160k|                    vec256_storage { avx: x.0[1].x },
 1688|   160k|                ],
 1689|   160k|            }
 1690|   160k|        }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs7Qy2jXn7BB4_11rand_chacha:
   58|   161k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|   161k|                vec128_storage { sse2: x.x }
   60|   161k|            }

_RINvXs2_NtNtCs55N2eBX4uiz_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsev5kJ09hNTn_5oxttl:
   51|  2.57M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  2.57M|        // Use LE; we explicitly generate one value before the next.
   53|  2.57M|        let x = u128::from(rng.next_u64());
   54|  2.57M|        let y = u128::from(rng.next_u64());
   55|  2.57M|        (y << 64) | x
   56|  2.57M|    }

_RINvCs55N2eBX4uiz_4rand6randomoECsev5kJ09hNTn_5oxttl:
  183|  2.57M|pub fn random<T>() -> T
  184|  2.57M|where Standard: Distribution<T> {
  185|  2.57M|    thread_rng().gen()
  186|  2.57M|}

_RINvYNtNtNtCs55N2eBX4uiz_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsev5kJ09hNTn_5oxttl:
   93|  2.57M|    fn gen<T>(&mut self) -> T
   94|  2.57M|    where Standard: Distribution<T> {
   95|  2.57M|        Standard.sample(self)
   96|  2.57M|    }

_RNvXs_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngENtB24_7RngCore8next_u64Csev5kJ09hNTn_5oxttl:
  124|  5.14M|    fn next_u64(&mut self) -> u64 {
  125|  5.14M|        self.0.next_u64()
  126|  5.14M|    }
_RNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|   160k|    pub fn get_fork_counter() -> usize {
  308|   160k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|   160k|    }
_RNCNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE6reseed0Bd_:
  220|    627|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    627|            self.bytes_until_reseed = self.threshold;
  222|    627|            self.inner = result
  223|    627|        })
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE6reseedBb_:
  219|    627|    fn reseed(&mut self) -> Result<(), Error> {
  220|    627|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    627|        })
  224|    627|    }
_RNvMNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvXs2_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|   160k|    fn generate(&mut self, results: &mut Self::Results) {
  174|   160k|        let global_fork_counter = fork::get_fork_counter();
  175|   160k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    627|            return self.reseed_and_generate(results, global_fork_counter);
  180|   160k|        }
  181|   160k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|   160k|        self.bytes_until_reseed -= num_bytes as i64;
  183|   160k|        self.inner.generate(results);
  184|   160k|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE9is_forkedBb_:
  226|   160k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|   160k|        // In theory, on 32-bit platforms, it is possible for
  228|   160k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|   160k|        //
  230|   160k|        // This check will detect a fork in the normal case where
  231|   160k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|   160k|        // between both is greater than `isize::MAX` (wrapped around).
  233|   160k|        //
  234|   160k|        // It will still fail to detect a fork if there have been more than
  235|   160k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|   160k|        // enough.
  237|   160k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|   160k|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    627|    fn reseed_and_generate(
  242|    627|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    627|    ) {
  244|    627|        #![allow(clippy::if_same_then_else)] // false positive
  245|    627|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    627|        } else {
  248|    627|            trace!("Reseeding RNG (periodic reseed)");
  249|    627|        }
  250|       |
  251|    627|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    627|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    627|        }
  257|    627|        self.fork_counter = global_fork_counter;
  258|    627|
  259|    627|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    627|        self.inner.generate(results);
  261|    627|    }

_RNvXs_NtNtCs55N2eBX4uiz_4rand4rngs6threadNtB4_9ThreadRngNtCs59ZXsH8airK_9rand_core7RngCore8next_u64:
  109|  5.14M|    fn next_u64(&mut self) -> u64 {
  110|  5.14M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  5.14M|        // creates another mutable reference
  112|  5.14M|        let rng = unsafe { &mut *self.rng.get() };
  113|  5.14M|        rng.next_u64()
  114|  5.14M|    }
_RNCNvNtNtCs55N2eBX4uiz_4rand4rngs6thread10thread_rng0B7_:
   89|  2.57M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNvNtNtCs55N2eBX4uiz_4rand4rngs6thread10thread_rng:
   88|  2.57M|pub fn thread_rng() -> ThreadRng {
   89|  2.57M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  2.57M|    ThreadRng { rng }
   91|  2.57M|}
_RNCNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCs7Qy2jXn7BB4_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core5block12BlockRngCore8generateCs55N2eBX4uiz_4rand:
   89|   160k|            fn generate(&mut self, r: &mut Self::Results) {
   90|   160k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|   160k|                self.state.refill4($rounds, unsafe {
   92|   160k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|   160k|                });
   94|  10.2M|                for x in r.as_mut() {
   95|  10.2M|                    *x = x.to_le();
   96|  10.2M|                }
   97|   160k|            }
_RNvXsn_NtCs7Qy2jXn7BB4_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng9from_seedCs55N2eBX4uiz_4rand:
  103|    628|            fn from_seed(seed: Self::Seed) -> Self {
  104|    628|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    628|            }
_RNvXs_NtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|  10.6M|    fn as_ref(&self) -> &[T] {
   47|  10.6M|        &self.0
   48|  10.6M|    }
_RNvXs0_NtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|   160k|    fn as_mut(&mut self) -> &mut [T] {
   52|   160k|        &mut self.0
   53|   160k|    }
_RNvXNtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|   160k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|   160k|        refill_wide(self, drounds, out)
   86|   160k|    }
_RNvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    628|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    628|        init_chacha(key, nonce)
   74|    628|    }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   964k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   964k|    x.b = x.b.shuffle_lane_words1230();
   65|   964k|    x.c = x.c.shuffle_lane_words2301();
   66|   964k|    x.d = x.d.shuffle_lane_words3012();
   67|   964k|    x
   68|   964k|}
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   964k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   964k|    x.b = x.b.shuffle_lane_words3012();
   58|   964k|    x.c = x.c.shuffle_lane_words2301();
   59|   964k|    x.d = x.d.shuffle_lane_words1230();
   60|   964k|    x
   61|   964k|}
_RINvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    628|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    628|        let ctr_nonce = [
  237|       |            0,
  238|    628|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    628|                0
  242|       |            },
  243|    628|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    628|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    628|        ];
  246|    628|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    628|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    628|        ChaCha {
  249|    628|            b: key0.into(),
  250|    628|            c: key1.into(),
  251|    628|            d: ctr_nonce.into(),
  252|    628|        }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|   160k|fn refill_wide_impl<Mach: Machine>(
  117|   160k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|   160k|) {
  119|   160k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|   160k|    let mut pos = state.pos64(m);
  121|   160k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|   160k|    pos = pos.wrapping_add(1);
  123|   160k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|   160k|    pos = pos.wrapping_add(1);
  125|   160k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|   160k|    pos = pos.wrapping_add(1);
  127|   160k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|   160k|
  129|   160k|    let b = m.unpack(state.b);
  130|   160k|    let c = m.unpack(state.c);
  131|   160k|    let mut x = State {
  132|   160k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|   160k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|   160k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|   160k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|   160k|    };
  137|   964k|    for _ in 0..drounds {
  138|   964k|        x = round(x);
  139|   964k|        x = undiagonalize(round(diagonalize(x)));
  140|   964k|    }
  141|   160k|    let mut pos = state.pos64(m);
  142|   160k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|   160k|    pos = pos.wrapping_add(1);
  144|   160k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|   160k|    pos = pos.wrapping_add(1);
  146|   160k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|   160k|    pos = pos.wrapping_add(1);
  148|   160k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|   160k|    pos = pos.wrapping_add(1);
  150|   160k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|   160k|
  152|   160k|    let (a, b, c, d) = (
  153|   160k|        x.a.to_lanes(),
  154|   160k|        x.b.to_lanes(),
  155|   160k|        x.c.to_lanes(),
  156|   160k|        x.d.to_lanes(),
  157|   160k|    );
  158|   160k|    let sb = m.unpack(state.b);
  159|   160k|    let sc = m.unpack(state.c);
  160|   160k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|   160k|    state.d = d4.into();
  162|   160k|    let mut words = out.chunks_exact_mut(16);
  163|   642k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   642k|        (a + k).write_le(words.next().unwrap());
  165|   642k|        (b + sb).write_le(words.next().unwrap());
  166|   642k|        (c + sc).write_le(words.next().unwrap());
  167|   642k|        (d + sd).write_le(words.next().unwrap());
  168|   642k|    }
  169|   160k|}
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts10read_u32le:
  229|  1.25k|fn read_u32le(xs: &[u8]) -> u32 {
  230|  1.25k|    assert_eq!(xs.len(), 4);
  231|  1.25k|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|  1.25k|}
_RINvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   321k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   321k|        let d: M::u32x4 = m.unpack(self.d);
   79|   321k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   321k|    }
_RINvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|   160k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|   160k|        refill_wide_impl(m, state, drounds, out);
  174|   160k|    }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  1.92M|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  1.92M|    x.a += x.b;
   45|  1.92M|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  1.92M|    x.c += x.d;
   47|  1.92M|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  1.92M|    x.a += x.b;
   49|  1.92M|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  1.92M|    x.c += x.d;
   51|  1.92M|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  1.92M|    x
   53|  1.92M|}

_RNCNvXs0_NtCs59ZXsH8airK_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Csev5kJ09hNTn_5oxttl:
  198|  5.14M|        let read_u64 = |results: &[u32], index| {
  199|  5.14M|            let data = &results[index..=index + 1];
  200|  5.14M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  5.14M|        };
_RNvXs0_NtCs59ZXsH8airK_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Csev5kJ09hNTn_5oxttl:
  197|  5.14M|    fn next_u64(&mut self) -> u64 {
  198|  5.14M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  5.14M|        let len = self.results.as_ref().len();
  204|  5.14M|
  205|  5.14M|        let index = self.index;
  206|  5.14M|        if index < len - 1 {
  207|  4.98M|            self.index += 2;
  208|  4.98M|            // Read an u64 from the current index
  209|  4.98M|            read_u64(self.results.as_ref(), index)
  210|   160k|        } else if index >= len {
  211|   160k|            self.generate_and_set(2);
  212|   160k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  5.14M|    }
_RNvMs_NtCs59ZXsH8airK_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|   160k|    pub fn generate_and_set(&mut self, index: usize) {
  175|   160k|        assert!(index < self.results.as_ref().len());
  176|   160k|        self.core.generate(&mut self.results);
  177|   160k|        self.index = index;
  178|   160k|    }
_RNvMs_NtCs59ZXsH8airK_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs55N2eBX4uiz_4rand:
  390|    627|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    627|        let mut seed = Self::Seed::default();
  392|    627|        rng.try_fill_bytes(seed.as_mut())?;
  393|    627|        Ok(Self::from_seed(seed))
  394|    627|    }
_RNvXs_Cs59ZXsH8airK_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs55N2eBX4uiz_4rand:
  441|    627|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    627|        (**self).try_fill_bytes(dest)
  443|    627|    }
_RINvYNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs55N2eBX4uiz_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCs59ZXsH8airK_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    628|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    628|        getrandom(dest)?;
   69|    628|        Ok(())
   70|    628|    }

_RNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  2.57M|            unsafe fn __getit(
   84|  2.57M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  2.57M|            ) -> $crate::option::Option<&'static $t> {
   86|  2.57M|                #[thread_local]
   87|  2.57M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  2.57M|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  2.57M|
   90|  2.57M|                unsafe {
   91|  2.57M|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  2.57M|                    })
  101|  2.57M|                }
  102|  2.57M|            }
_RNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCs5e1VnIiJGfJ_2n31__19___libfuzzer_sys_run0B5_:
   12|  22.0M|    for chunk in data.split(|c| *c == 0xFF) {

_RINvMNtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsev5kJ09hNTn_5oxttl:
   48|  24.5k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|  24.5k|        let id = id.into();
   50|  24.5k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|  2.88k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  21.7k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|  24.5k|    }
_RNvXsk_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
   22|   219k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsev5kJ09hNTn_5oxttl:
  261|  2.57M|    fn as_str(&self) -> &str {
  262|  2.57M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  2.57M|        str::from_utf8(&self.0[..len]).unwrap()
  264|  2.57M|    }
_RNvXsH_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
  249|   213k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
   19|   219k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvNtCsjwRv1y82X7y_5oxrdf10blank_node13to_integer_idCsev5kJ09hNTn_5oxttl:
  327|  24.5k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  24.5k|    let digits = id.as_bytes();
  329|  24.5k|    let mut value: u128 = 0;
  330|  24.5k|    if let None | Some(b'0') = digits.first() {
  331|  18.6k|        return None; // No empty string or leading zeros
  332|  5.94k|    }
  333|  32.9k|    for digit in digits {
  334|  30.0k|        value = value.checked_mul(16)?.checked_add(
  335|  29.5k|            match *digit {
  336|  29.1k|                b'0'..=b'9' => digit - b'0',
  337|  25.9k|                b'a'..=b'f' => digit - b'a' + 10,
  338|  2.51k|                _ => return None,
  339|       |            }
  340|  27.0k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  2.88k|    Some(value)
  344|  24.5k|}
_RNvMNtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsev5kJ09hNTn_5oxttl:
   61|  2.88k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  2.88k|        Self(BlankNodeContent::Anonymous {
   63|  2.88k|            id,
   64|  2.88k|            str: IdStr::new(id),
   65|  2.88k|        })
   66|  2.88k|    }
_RNvMs7_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB5_5IdStr3newCsev5kJ09hNTn_5oxttl:
  254|  2.57M|    fn new(id: u128) -> Self {
  255|  2.57M|        let mut str = [0; 32];
  256|  2.57M|        write!(&mut str[..], "{id:x}").unwrap();
  257|  2.57M|        Self(str)
  258|  2.57M|    }
_RNvXs0_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsev5kJ09hNTn_5oxttl:
  108|  1.02M|    fn default() -> Self {
  109|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  110|  2.57M|        loop {
  111|  2.57M|            let id = random();
  112|  2.57M|            let str = IdStr::new(id);
  113|  2.57M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  114|  1.02M|                return Self(BlankNodeContent::Anonymous { id, str });
  115|  1.54M|            }
  116|       |        }
  117|  1.02M|    }
_RNCNvMs7_NtCsjwRv1y82X7y_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  82.2M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvXsF_NtCsjwRv1y82X7y_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
   34|  36.0k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsjwRv1y82X7y_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
   37|  36.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsjwRv1y82X7y_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  78.2k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  78.2k|        let value = value.into();
   55|  78.2k|        let datatype = datatype.into();
   56|  78.2k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  78.2k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  78.2k|    }
_RINvMNtCsjwRv1y82X7y_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  4.46k|    pub fn new_language_tagged_literal_unchecked(
   86|  4.46k|        value: impl Into<String>,
   87|  4.46k|        language: impl Into<String>,
   88|  4.46k|    ) -> Self {
   89|  4.46k|        Self(LiteralContent::LanguageTaggedString {
   90|  4.46k|            value: value.into(),
   91|  4.46k|            language: language.into(),
   92|  4.46k|        })
   93|  4.46k|    }
_RINvMNtCsjwRv1y82X7y_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  5.75k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  5.75k|        let value = value.into();
   55|  5.75k|        let datatype = datatype.into();
   56|  5.75k|        Self(if datatype == xsd::STRING {
   57|  1.03k|            LiteralContent::String(value)
   58|       |        } else {
   59|  4.72k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  5.75k|    }
_RINvMNtCsjwRv1y82X7y_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  41.0k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  41.0k|        Self(LiteralContent::String(value.into()))
   49|  41.0k|    }

_RNvMs4_NtCsjwRv1y82X7y_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsev5kJ09hNTn_5oxttl:
  138|  90.3k|    pub fn into_owned(self) -> NamedNode {
  139|  90.3k|        NamedNode::new_unchecked(self.iri)
  140|  90.3k|    }
_RNvXsp_NtCsjwRv1y82X7y_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
   17|  27.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsjwRv1y82X7y_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   178k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   178k|        Self { iri: iri.into() }
   41|   178k|    }
_RINvMNtCsjwRv1y82X7y_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|   187k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   187k|        Self { iri: iri.into() }
   41|   187k|    }
_RNvMs4_NtCsjwRv1y82X7y_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  83.9k|    pub const fn as_str(self) -> &'a str {
  134|  83.9k|        self.iri
  135|  83.9k|    }
_RNvMs4_NtCsjwRv1y82X7y_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  78.2k|    pub fn into_owned(self) -> NamedNode {
  139|  78.2k|        NamedNode::new_unchecked(self.iri)
  140|  78.2k|    }
_RNvXs9_NtCsjwRv1y82X7y_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  83.9k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  83.9k|        self.as_str() == other.as_str()
  175|  83.9k|    }
_RNvMNtCsjwRv1y82X7y_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  83.9k|    pub fn as_str(&self) -> &str {
   45|  83.9k|        self.iri.as_str()
   46|  83.9k|    }
_RNvXs6_NtCsjwRv1y82X7y_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  78.2k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  78.2k|        node.into_owned()
  154|  78.2k|    }

_RNvXs1g_NtCsjwRv1y82X7y_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsev5kJ09hNTn_5oxttl:
  997|  36.5k|    fn from(node: BlankNode) -> Self {
  998|  36.5k|        Self::BlankNode(node)
  999|  36.5k|    }

_RNvXsf_NtCsjwRv1y82X7y_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsev5kJ09hNTn_5oxttl:
   13|  7.82k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsjwRv1y82X7y_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsev5kJ09hNTn_5oxttl:
   35|  13.7k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  13.7k|        Self { name: name.into() }
   37|  13.7k|    }

_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  30.6k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  30.6k|        Self { mode, unchecked }
  175|  30.6k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  5.63M|    fn recognize_pname_or_keyword<'a>(
  238|  5.63M|        &self,
  239|  5.63M|        data: &'a [u8],
  240|  5.63M|        is_ending: bool,
  241|  5.63M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  5.63M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  5.63M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  5.63M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  5.63M|        let mut i = 0;
  246|       |        loop {
  247|  11.0M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  10.4M|                match r {
  249|  9.88M|                    Ok((c, consumed)) => {
  250|  9.88M|                        if c == ':' {
  251|  2.11M|                            i += consumed;
  252|  2.11M|                            break;
  253|  7.76M|                        } else if i == 0 {
  254|  3.37M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  1.86M|                                return Some((
  256|  1.86M|                                    consumed,
  257|  1.86M|                                    Err((
  258|  1.86M|                                        0..consumed,
  259|  1.86M|                                        format!(
  260|  1.86M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  1.86M|                                        ),
  262|  1.86M|                                    )
  263|  1.86M|                                        .into()),
  264|  1.86M|                                ));
  265|  1.51M|                            }
  266|  1.51M|                            i += consumed;
  267|  4.38M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  3.90M|                            i += consumed;
  269|  3.90M|                        } else {
  270|   590k|                            while data[..i].ends_with(b".") {
  271|   106k|                                i -= 1;
  272|   106k|                            }
  273|   484k|                            return Some((
  274|   484k|                                i,
  275|   484k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   484k|                            ));
  277|       |                        }
  278|       |                    }
  279|   561k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   612k|            } else if is_ending {
  282|  5.78k|                while data[..i].ends_with(b".") {
  283|    489|                    i -= 1;
  284|    489|                }
  285|  5.30k|                return Some(if i == 0 {
  286|  1.23k|                    (
  287|  1.23k|                        1,
  288|  1.23k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.23k|                    )
  290|       |                } else {
  291|  4.06k|                    (
  292|  4.06k|                        i,
  293|  4.06k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  4.06k|                    )
  295|       |                });
  296|       |            } else {
  297|   607k|                return None;
  298|       |            }
  299|       |        }
  300|  2.11M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  2.11M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  2.11M|        if pn_prefix.ends_with('.') {
  305|  1.97k|            return Some((
  306|  1.97k|                i,
  307|  1.97k|                Err((
  308|  1.97k|                    0..i,
  309|  1.97k|                    format!(
  310|  1.97k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  1.97k|                )
  312|  1.97k|                    .into()),
  313|  1.97k|            ));
  314|  2.11M|        }
  315|       |
  316|   547k|        let (consumed, pn_local_result) =
  317|  2.11M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   547k|        Some((
  319|   547k|            consumed + i,
  320|   547k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   547k|            }),
  325|   547k|        ))
  326|  5.63M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  2.26M|    fn recognize_optional_pn_local<'a>(
  348|  2.26M|        &self,
  349|  2.26M|        data: &'a [u8],
  350|  2.26M|        is_ending: bool,
  351|  2.26M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  2.26M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  2.26M|        let mut i = 0;
  354|  2.26M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  2.26M|        let mut position_that_is_already_in_buffer = 0;
  356|  2.26M|        let mut might_be_invalid_iri = false;
  357|  2.26M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  5.99M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  4.41M|                match r {
  361|  4.36M|                    Ok((c, consumed)) => {
  362|  4.36M|                        if c == '%' {
  363|  35.8k|                            i += 1;
  364|  35.8k|                            let a = char::from(*data.get(i)?);
  365|  19.6k|                            i += 1;
  366|  19.6k|                            let b = char::from(*data.get(i)?);
  367|  14.3k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  5.05k|                                return Some((i + 1, Err((
  369|  5.05k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  5.05k|                                ).into())));
  371|  9.26k|                            }
  372|  9.26k|                            i += 1;
  373|  9.26k|                            ends_with_unescaped_dot = 0;
  374|  4.32M|                        } else if c == '\\' {
  375|   535k|                            i += 1;
  376|   535k|                            let a = char::from(*data.get(i)?);
  377|   506k|                            if self.unchecked
  378|   437k|                                || matches!(
  379|   506k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  68.7k|                            {
  396|  68.7k|                                // ok to escape
  397|   437k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   431k|                                // ok to escape but requires IRI validation
  399|   431k|                                might_be_invalid_iri = true;
  400|   431k|                            } else {
  401|  5.50k|                                return Some((i + 1, Err((
  402|  5.50k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  5.50k|                                ).into())));
  404|       |                            }
  405|   500k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   500k|                            // We add the missing bytes
  407|   500k|                            if i - position_that_is_already_in_buffer > 1 {
  408|   242k|                                buffer.push_str(
  409|   242k|                                    match str_from_utf8(
  410|   242k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   242k|                                        position_that_is_already_in_buffer..i - 1,
  412|   242k|                                    ) {
  413|   242k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   258k|                            }
  418|   500k|                            buffer.push(a);
  419|   500k|                            i += 1;
  420|   500k|                            position_that_is_already_in_buffer = i;
  421|   500k|                            ends_with_unescaped_dot = 0;
  422|  3.79M|                        } else if i == 0 {
  423|  1.19M|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   284k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|   906k|                            }
  427|   906k|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|   906k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|   906k|                                        || c == ':';
  431|      0|                            }
  432|   906k|                            i += consumed;
  433|  2.60M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  2.13M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  2.13M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  2.13M|                                        || c == ':';
  438|      0|                            }
  439|  2.13M|                            i += consumed;
  440|  2.13M|                            ends_with_unescaped_dot = 0;
  441|   469k|                        } else if c == '.' {
  442|   185k|                            i += consumed;
  443|   185k|                            ends_with_unescaped_dot += 1;
  444|   185k|                        } else {
  445|   283k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  63.4k|                                buffer.push_str(
  447|  63.4k|                                    match str_from_utf8(
  448|  63.4k|                                        &data[position_that_is_already_in_buffer..i],
  449|  63.4k|                                        position_that_is_already_in_buffer..i,
  450|  63.4k|                                    ) {
  451|  63.4k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  63.4k|                                for _ in 0..ends_with_unescaped_dot {
  457|  22.8k|                                    buffer.pop();
  458|  22.8k|                                }
  459|  63.4k|                                i -= ends_with_unescaped_dot;
  460|  63.4k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   220k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   220k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   220k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   220k|                                i -= ends_with_unescaped_dot;
  469|   220k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   283k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  45.3k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  1.58M|            } else if is_ending {
  477|  4.21k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  1.41k|                    while buffer.ends_with('.') {
  480|    647|                        buffer.pop();
  481|    647|                        i -= 1;
  482|    647|                    }
  483|    768|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  3.44k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  3.44k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  4.30k|                    while let Some(d) = data.strip_suffix('.') {
  491|    858|                        data = d;
  492|    858|                        i -= 1;
  493|    858|                    }
  494|  3.44k|                    Cow::Borrowed(data)
  495|       |                };
  496|  4.21k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  1.58M|                return None;
  499|       |            }
  500|       |        }
  501|  2.26M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|   530k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|   530k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  665|   530k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  666|   530k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|   530k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  668|   530k|        let mut i = 0;
  669|   530k|        let c = *data.first()?;
  670|   530k|        if matches!(c, b'+' | b'-') {
  671|   105k|            i += 1;
  672|   424k|        }
  673|       |        // We read the digits before .
  674|   530k|        let mut count_before: usize = 0;
  675|       |        loop {
  676|   966k|            let c = *data.get(i)?;
  677|   884k|            if c.is_ascii_digit() {
  678|   436k|                i += 1;
  679|   436k|                count_before += 1;
  680|   436k|            } else {
  681|   448k|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|   448k|        let count_after = if *data.get(i)? == b'.' {
  688|   182k|            i += 1;
  689|   182k|
  690|   182k|            let mut count_after = 0;
  691|       |            loop {
  692|   263k|                let c = *data.get(i)?;
  693|   189k|                if c.is_ascii_digit() {
  694|  80.3k|                    i += 1;
  695|  80.3k|                    count_after += 1;
  696|  80.3k|                } else {
  697|   109k|                    break;
  698|   109k|                }
  699|   109k|            }
  700|   109k|            Some(count_after)
  701|       |        } else {
  702|   265k|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|   374k|        let c = *data.get(i)?;
  707|   374k|        if matches!(c, b'e' | b'E') {
  708|  71.5k|            i += 1;
  709|       |
  710|  71.5k|            let c = *data.get(i)?;
  711|  56.8k|            if matches!(c, b'+' | b'-') {
  712|  3.01k|                i += 1;
  713|  53.8k|            }
  714|       |
  715|  56.8k|            let mut found = false;
  716|       |            loop {
  717|   103k|                let c = *data.get(i)?;
  718|  66.9k|                if c.is_ascii_digit() {
  719|  46.1k|                    i += 1;
  720|  46.1k|                    found = true;
  721|  46.1k|                } else {
  722|  20.7k|                    break;
  723|  20.7k|                }
  724|  20.7k|            }
  725|  20.7k|            Some((
  726|  20.7k|                i,
  727|  20.7k|                if !found {
  728|  12.7k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|  8.03k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|    820|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|  7.21k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   302k|        } else if let Some(count_after) = count_after {
  736|  70.4k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|  50.0k|                i -= 1;
  739|  50.0k|                Some((
  740|  50.0k|                    i,
  741|  50.0k|                    if count_before == 0 {
  742|  5.17k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|  44.8k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  20.4k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   232k|                i,
  753|   232k|                if count_before == 0 {
  754|  62.3k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   170k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|   530k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|  45.3k|    fn recognize_hex_char(
  798|  45.3k|        data: &[u8],
  799|  45.3k|        len: usize,
  800|  45.3k|        escape_char: char,
  801|  45.3k|        position: usize,
  802|  45.3k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|  45.3k|        if data.len() < len {
  804|  17.1k|            return Ok(None);
  805|  28.1k|        }
  806|  28.1k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  23.8k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  23.8k|        })?;
  815|  22.8k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  22.8k|        })?;
  823|  22.5k|        Ok(Some(c))
  824|  45.3k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  11.6M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  11.6M|        matches!(c,
  901|  6.80M|        'A'..='Z'
  902|  4.12M|        | 'a'..='z'
  903|  1.29M|        | '\u{00C0}'..='\u{00D6}'
  904|  1.29M|        | '\u{00D8}'..='\u{00F6}'
  905|  1.29M|        | '\u{00F8}'..='\u{02FF}'
  906|  1.03M|        | '\u{0370}'..='\u{037D}'
  907|  1.03M|        | '\u{037F}'..='\u{1FFF}'
  908|   262k|        | '\u{200C}'..='\u{200D}'
  909|   262k|        | '\u{2070}'..='\u{218F}'
  910|   262k|        | '\u{2C00}'..='\u{2FEF}'
  911|   262k|        | '\u{3001}'..='\u{D7FF}'
  912|  96.8k|        | '\u{F900}'..='\u{FDCF}'
  913|  96.8k|        | '\u{FDF0}'..='\u{FFFD}'
  914|  96.8k|        | '\u{10000}'..='\u{EFFFF}')
  915|  11.6M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|  84.8k|    fn recognize_blank_node_label(
  504|  84.8k|        data: &[u8],
  505|  84.8k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|  84.8k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|  84.8k|        let mut i = 2;
  508|       |        loop {
  509|   193k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   138k|                Ok((c, consumed)) => {
  511|   138k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   118k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|  98.8k|                    {
  514|  98.8k|                        // Ok
  515|  98.8k|                    } else if i > 2 && c == '.' {
  516|  13.3k|                        if data[i - 1] == b'.' {
  517|  3.37k|                            i -= 1;
  518|  3.37k|                            return Some((
  519|  3.37k|                                i,
  520|  3.37k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  3.37k|                            ));
  522|  9.97k|                        }
  523|  26.1k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|  26.1k|                    } else if data[i - 1] == b'.' {
  529|  1.41k|                        i -= 1;
  530|  1.41k|                        return Some((
  531|  1.41k|                            i,
  532|  1.41k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.41k|                        ));
  534|       |                    } else {
  535|  24.7k|                        return Some((
  536|  24.7k|                            i,
  537|  24.7k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  24.7k|                        ));
  539|       |                    }
  540|   108k|                    i += consumed;
  541|       |                }
  542|  5.11k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|  84.8k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   155k|    fn recognize_string(
  588|   155k|        data: &[u8],
  589|   155k|        delimiter: u8,
  590|   155k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|   155k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|   155k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|   155k|        let mut string = String::new();
  594|   155k|        let mut i = 1;
  595|       |        loop {
  596|   163k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|   142k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|   136k|                Ok(s) => string.push_str(s),
  599|  5.70k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|   136k|            i += end;
  602|   136k|            match data[i] {
  603|   136k|                c if c == delimiter => {
  604|  63.1k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|  73.7k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|  72.3k|                    i += additional + 1;
  609|  72.3k|                    match c {
  610|  7.70k|                        Ok(c) => {
  611|  7.70k|                            string.push(c);
  612|  7.70k|                        }
  613|  64.6k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|  64.6k|                            let end = memchr(delimiter, &data[i..])?;
  616|  5.11k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|   155k|    }
_RNvNtCsev5kJ09hNTn_5oxttl5lexer18resolve_local_name:
  936|   254k|pub fn resolve_local_name(
  937|   254k|    prefix: &str,
  938|   254k|    local: &str,
  939|   254k|    might_be_invalid_iri: bool,
  940|   254k|    prefixes: &HashMap<String, Iri<String>>,
  941|   254k|) -> Result<NamedNode, String> {
  942|   254k|    if let Some(start) = prefixes.get(prefix) {
  943|   204k|        let iri = format!("{start}{local}");
  944|   204k|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|   191k|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|  66.3k|                return Err(format!(
  948|  66.3k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|  66.3k|                ));
  950|   125k|            }
  951|  12.9k|        }
  952|   138k|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|  49.4k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|   254k|}
_RNvXs2_NtCsev5kJ09hNTn_5oxttl5lexerNtB5_7N3TokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   12|  2.62M|#[derive(Debug, PartialEq, Eq)]
_RNvNtCsev5kJ09hNTn_5oxttl5lexer16string_from_utf8:
  968|   388k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|   388k|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|   388k|    })
  977|   388k|}
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|  71.6k|    fn recognize_long_string(
  626|  71.6k|        data: &[u8],
  627|  71.6k|        delimiter: u8,
  628|  71.6k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|  71.6k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|  71.6k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|  71.6k|        let mut string = String::new();
  632|  71.6k|        let mut i = 3;
  633|       |        loop {
  634|   129k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|   110k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|   104k|                Ok(s) => string.push_str(s),
  637|  5.59k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|   104k|            i += end;
  640|   104k|            match data[i] {
  641|   104k|                c if c == delimiter => {
  642|  94.2k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  36.2k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|  51.5k|                    }
  645|  51.5k|                    i += 1;
  646|  51.5k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  10.4k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  9.54k|                    i += additional + 1;
  651|  9.54k|                    match c {
  652|  6.66k|                        Ok(c) => {
  653|  6.66k|                            string.push(c);
  654|  6.66k|                        }
  655|  2.87k|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|  71.6k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  17.2M|    fn recognize_unicode_char(
  827|  17.2M|        data: &[u8],
  828|  17.2M|        position: usize,
  829|  17.2M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  17.2M|        let mut code_point: u32;
  831|  17.2M|        let bytes_needed: usize;
  832|  17.2M|        let mut lower_boundary = 0x80;
  833|  17.2M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  17.2M|        let byte = *data.first()?;
  836|  15.0M|        match byte {
  837|  15.0M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|  1.71M|            0xC2..=0xDF => {
  839|  1.27M|                bytes_needed = 1;
  840|  1.27M|                code_point = u32::from(byte) & 0x1F;
  841|  1.27M|            }
  842|   439k|            0xE0..=0xEF => {
  843|   258k|                if byte == 0xE0 {
  844|  17.6k|                    lower_boundary = 0xA0;
  845|   240k|                }
  846|   258k|                if byte == 0xED {
  847|  8.81k|                    upper_boundary = 0x9F;
  848|   249k|                }
  849|   258k|                bytes_needed = 2;
  850|   258k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|   180k|            0xF0..=0xF4 => {
  853|   129k|                if byte == 0xF0 {
  854|  1.16k|                    lower_boundary = 0x90;
  855|   128k|                }
  856|   129k|                if byte == 0xF4 {
  857|  2.49k|                    upper_boundary = 0x8F;
  858|   126k|                }
  859|   129k|                bytes_needed = 3;
  860|   129k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   384k|                return Some(Err((
  864|   384k|                    position..=position,
  865|   384k|                    "Invalid UTF-8 character encoding",
  866|   384k|                )
  867|   384k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|  2.04M|        for i in 1..=bytes_needed {
  872|  2.04M|            let byte = *data.get(i)?;
  873|  1.97M|            if byte < lower_boundary || upper_boundary < byte {
  874|   227k|                return Some(Err((
  875|   227k|                    position..=position + i,
  876|   227k|                    "Invalid UTF-8 character encoding",
  877|   227k|                )
  878|   227k|                    .into()));
  879|  1.74M|            }
  880|  1.74M|            lower_boundary = 0x80;
  881|  1.74M|            upper_boundary = 0xBF;
  882|  1.74M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  1.36M|        Some(
  886|  1.36M|            char::from_u32(code_point)
  887|  1.36M|                .map(|c| (c, bytes_needed + 1))
  888|  1.36M|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  1.36M|                }),
  895|  1.36M|        )
  896|  17.2M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|  3.04M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|  3.04M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|  3.04M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|  3.04M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|  3.04M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   188k|    fn parse_lang_tag<'a>(
  573|   188k|        &self,
  574|   188k|        lang_tag: &'a [u8],
  575|   188k|        position: Range<usize>,
  576|   188k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   188k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   188k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   188k|            LanguageTag::parse(lang_tag)
  582|   188k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   158k|                .into_inner()
  584|       |        }))
  585|   188k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  1.48M|    fn recognize_iri(
  178|  1.48M|        &self,
  179|  1.48M|        data: &[u8],
  180|  1.48M|        options: &N3LexerOptions,
  181|  1.48M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  1.48M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  1.48M|        let mut string = Vec::new();
  184|  1.48M|        let mut i = 1;
  185|       |        loop {
  186|  1.50M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   451k|            string.extend_from_slice(&data[i..i + end]);
  188|   451k|            i += end;
  189|   451k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   388k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  62.9k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  40.9k|                    i += additional + 1;
  197|  40.9k|                    match c {
  198|  22.0k|                        Ok(c) => {
  199|  22.0k|                            let mut buf = [0; 4];
  200|  22.0k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  22.0k|                        }
  202|  18.9k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  1.48M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|   147k|    fn recognize_escape(
  763|   147k|        data: &[u8],
  764|   147k|        position: usize,
  765|   147k|        with_echar: bool,
  766|   147k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|   147k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|   147k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  769|   147k|        match *data.get(1)? {
  770|  43.6k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  38.9k|                Ok(c) => Some((5, Ok(c?))),
  772|  4.68k|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  1.69k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|    753|                Ok(c) => Some((9, Ok(c?))),
  776|    943|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    204|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    216|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|    202|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|    863|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|  3.13k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|    195|            b'"' if with_echar => Some((1, Ok('"'))),
  784|  1.67k|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  7.36k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|  80.8k|            c => Some((
  787|  80.8k|                1,
  788|  80.8k|                Err((
  789|  80.8k|                    position..position + 2,
  790|  80.8k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|  80.8k|                )
  792|  80.8k|                    .into()),
  793|  80.8k|            )), // TODO: read until end of string
  794|       |        }
  795|   147k|    }
_RNvNtCsev5kJ09hNTn_5oxttl5lexer13str_from_utf8:
  958|  3.87M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|  3.87M|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|  3.87M|    })
  966|  3.87M|}
_RNvXNtCsev5kJ09hNTn_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  13.9M|    fn recognize_next_token<'a>(
   56|  13.9M|        &mut self,
   57|  13.9M|        data: &'a [u8],
   58|  13.9M|        is_ending: bool,
   59|  13.9M|        options: &N3LexerOptions,
   60|  13.9M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  13.9M|        match *data.first()? {
   62|  1.91M|            b'<' => match *data.get(1)? {
   63|  8.84k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  41.7k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  41.7k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  8.20k|                        Some(if let Ok(result) = result {
   67|  2.15k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  6.05k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  33.5k|                    } else if is_ending {
   72|    651|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  32.8k|                        None
   75|       |                    }
   76|       |                }
   77|  88.2k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|  88.2k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  22.0k|                        Some(if let Ok(result) = result {
   80|  5.30k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  16.7k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|  66.1k|                    } else if is_ending {
   85|  5.91k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|  60.2k|                        None
   88|       |                    }
   89|       |                }
   90|  1.35M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   230k|                if *data.get(1)? == b'>' {
   94|  21.0k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   129k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   144k|            b'_' => match data.get(1)? {
  100|  84.8k|                b':' => Self::recognize_blank_node_label(data),
  101|  44.1k|                c => Some((
  102|  44.1k|                    1,
  103|  44.1k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  44.1k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  54.1k|                if self.mode != N3LexerMode::NTriples
  108|  54.1k|                    && *data.get(1)? == b'"'
  109|  34.9k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  24.9k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  24.7k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   217k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   217k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  46.7k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   130k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   764k|            b'@' => self.recognize_lang_tag(data),
  124|  1.04M|            b'.' => match data.get(1) {
  125|   647k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   808k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   163k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  45.0k|                if *data.get(1)? == b'^' {
  131|  30.1k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  12.4k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   123k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  32.4k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|   596k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  65.9k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   797k|                if *data.get(1)? == b'|' {
  142|  4.55k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   725k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   158k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  59.4k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  55.9k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  43.8k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  13.4k|                if *data.get(1)? == b'}' {
  153|  1.83k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  7.76k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  62.6k|                if *data.get(1)? == b'>' {
  160|  7.88k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  32.6k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  4.20M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   149k|            b'?' => self.recognize_variable(data, is_ending),
  167|  5.63M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  13.9M|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   388k|    fn parse_iri(
  211|   388k|        &self,
  212|   388k|        iri: Vec<u8>,
  213|   388k|        position: Range<usize>,
  214|   388k|        options: &N3LexerOptions,
  215|   388k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   388k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   371k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   371k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   371k|                    base_iri
  223|   371k|                        .resolve(&iri)
  224|   371k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   283k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|   388k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   149k|    fn recognize_variable<'a>(
  329|   149k|        &self,
  330|   149k|        data: &'a [u8],
  331|   149k|        is_ending: bool,
  332|   149k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   149k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  80.8k|        Some((
  336|  80.8k|            consumed + 1,
  337|  80.8k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  80.8k|            }),
  344|  80.8k|        ))
  345|   149k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|   764k|    fn recognize_lang_tag<'a>(
  548|   764k|        &self,
  549|   764k|        data: &'a [u8],
  550|   764k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|   764k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|   764k|        let mut is_last_block_empty = true;
  553|  4.09M|        for (i, c) in data[1..].iter().enumerate() {
  554|  4.09M|            if c.is_ascii_alphabetic() {
  555|  3.70M|                is_last_block_empty = false;
  556|  3.70M|            } else if i == 0 {
  557|  97.1k|                return Some((
  558|  97.1k|                    1,
  559|  97.1k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|  97.1k|                ));
  561|   298k|            } else if is_last_block_empty {
  562|  3.67k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   294k|            } else if *c == b'-' {
  564|   110k|                is_last_block_empty = true;
  565|   110k|            } else {
  566|   184k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|   479k|        None
  570|   764k|    }
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  8.31M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  919|  8.31M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  8.31M|    }
_RNvXs8_NtCsev5kJ09hNTn_5oxttl5lexerNtB5_11N3LexerModeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   31|   401k|#[derive(Eq, PartialEq)]
_RNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  7.09M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  924|  7.09M|        Self::is_possible_pn_chars_u(c)
  925|  2.48M|            || matches!(c,
  926|  1.61M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  7.09M|    }
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  72.7k|            result.and_then(|(name, _)| {
  338|  72.7k|                if name.is_empty() {
  339|  43.2k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  29.5k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  72.7k|            }),
_RNCNvNtCsev5kJ09hNTn_5oxttl5lexer16string_from_utf80B5_:
  969|  16.9k|    String::from_utf8(data).map_err(|e| {
  970|  16.9k|        (
  971|  16.9k|            range.start + e.utf8_error().valid_up_to()
  972|  16.9k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  16.9k|            format!("Invalid UTF-8: {e}"),
  974|  16.9k|        )
  975|  16.9k|            .into()
  976|  16.9k|    })
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  29.4k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|  1.03k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|  1.03k|            (
  809|  1.03k|                position..position + len + 2,
  810|  1.03k|                format!(
  811|  1.03k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|  1.03k|                ),
  813|  1.03k|            )
  814|  1.03k|        })?;
_RNCNvNtCsev5kJ09hNTn_5oxttl5lexer13str_from_utf80B5_:
  959|  15.5k|    str::from_utf8(data).map_err(|e| {
  960|  15.5k|        (
  961|  15.5k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  15.5k|            format!("Invalid UTF-8: {e}"),
  963|  15.5k|        )
  964|  15.5k|            .into()
  965|  15.5k|    })
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  87.6k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  1.36M|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    322|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    322|            (
  817|    322|                position..position + len +2,
  818|    322|                format!(
  819|    322|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    322|                ),
  821|    322|            )
  822|    322|        })?;
_RNCNvMs_NtCsev5kJ09hNTn_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   499k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   499k|                prefix: pn_prefix,
  322|   499k|                local,
  323|   499k|                might_be_invalid_iri,
  324|   499k|            }),

_RNvMsb_NtCsev5kJ09hNTn_5oxttl2n3NtB5_8N3Parser3newCs5e1VnIiJGfJ_2n3:
  219|  30.6k|    pub fn new() -> Self {
  220|  30.6k|        Self::default()
  221|  30.6k|    }
_RNvXsw_NtCsev5kJ09hNTn_5oxttl2n3NtB5_8N3ParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs5e1VnIiJGfJ_2n3:
  208|  30.6k|#[derive(Default)]
_RINvMsb_NtCsev5kJ09hNTn_5oxttl2n3NtB6_8N3Parser13with_base_iriReECs5e1VnIiJGfJ_2n3:
  235|  30.6k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  236|  30.6k|        self.base = Some(Iri::parse(base_iri.into())?);
  237|  30.6k|        Ok(self)
  238|  30.6k|    }
_RNCINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1267|    441|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1267|  25.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1267|  5.22k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1267|  4.78k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCsjwRv1y82X7y_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1267|    459|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCsjwRv1y82X7y_5oxrdf10blank_node9BlankNodeEB8_:
 1254|  3.52k|    fn quad(
 1255|  3.52k|        &self,
 1256|  3.52k|        subject: impl Into<N3Term>,
 1257|  3.52k|        predicate: impl Into<N3Term>,
 1258|  3.52k|        object: impl Into<N3Term>,
 1259|  3.52k|    ) -> N3Quad {
 1260|  3.52k|        N3Quad {
 1261|  3.52k|            subject: subject.into(),
 1262|  3.52k|            predicate: predicate.into(),
 1263|  3.52k|            object: object.into(),
 1264|  3.52k|            graph_name: self
 1265|  3.52k|                .contexts
 1266|  3.52k|                .last()
 1267|  3.52k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  3.52k|        }
 1269|  3.52k|    }
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
 1244|   115k|    fn error(
 1245|   115k|        mut self,
 1246|   115k|        errors: &mut Vec<RuleRecognizerError>,
 1247|   115k|        msg: impl Into<RuleRecognizerError>,
 1248|   115k|    ) -> Self {
 1249|   115k|        errors.push(msg.into());
 1250|   115k|        self.stack.clear();
 1251|   115k|        self
 1252|   115k|    }
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1244|   318k|    fn error(
 1245|   318k|        mut self,
 1246|   318k|        errors: &mut Vec<RuleRecognizerError>,
 1247|   318k|        msg: impl Into<RuleRecognizerError>,
 1248|   318k|    ) -> Self {
 1249|   318k|        errors.push(msg.into());
 1250|   318k|        self.stack.clear();
 1251|   318k|        self
 1252|   318k|    }
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1254|  10.2k|    fn quad(
 1255|  10.2k|        &self,
 1256|  10.2k|        subject: impl Into<N3Term>,
 1257|  10.2k|        predicate: impl Into<N3Term>,
 1258|  10.2k|        object: impl Into<N3Term>,
 1259|  10.2k|    ) -> N3Quad {
 1260|  10.2k|        N3Quad {
 1261|  10.2k|            subject: subject.into(),
 1262|  10.2k|            predicate: predicate.into(),
 1263|  10.2k|            object: object.into(),
 1264|  10.2k|            graph_name: self
 1265|  10.2k|                .contexts
 1266|  10.2k|                .last()
 1267|  10.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  10.2k|        }
 1269|  10.2k|    }
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1254|  25.6k|    fn quad(
 1255|  25.6k|        &self,
 1256|  25.6k|        subject: impl Into<N3Term>,
 1257|  25.6k|        predicate: impl Into<N3Term>,
 1258|  25.6k|        object: impl Into<N3Term>,
 1259|  25.6k|    ) -> N3Quad {
 1260|  25.6k|        N3Quad {
 1261|  25.6k|            subject: subject.into(),
 1262|  25.6k|            predicate: predicate.into(),
 1263|  25.6k|            object: object.into(),
 1264|  25.6k|            graph_name: self
 1265|  25.6k|                .contexts
 1266|  25.6k|                .last()
 1267|  25.6k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  25.6k|        }
 1269|  25.6k|    }
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1254|  15.4k|    fn quad(
 1255|  15.4k|        &self,
 1256|  15.4k|        subject: impl Into<N3Term>,
 1257|  15.4k|        predicate: impl Into<N3Term>,
 1258|  15.4k|        object: impl Into<N3Term>,
 1259|  15.4k|    ) -> N3Quad {
 1260|  15.4k|        N3Quad {
 1261|  15.4k|            subject: subject.into(),
 1262|  15.4k|            predicate: predicate.into(),
 1263|  15.4k|            object: object.into(),
 1264|  15.4k|            graph_name: self
 1265|  15.4k|                .contexts
 1266|  15.4k|                .last()
 1267|  15.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  15.4k|        }
 1269|  15.4k|    }
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCsjwRv1y82X7y_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1254|  1.60k|    fn quad(
 1255|  1.60k|        &self,
 1256|  1.60k|        subject: impl Into<N3Term>,
 1257|  1.60k|        predicate: impl Into<N3Term>,
 1258|  1.60k|        object: impl Into<N3Term>,
 1259|  1.60k|    ) -> N3Quad {
 1260|  1.60k|        N3Quad {
 1261|  1.60k|            subject: subject.into(),
 1262|  1.60k|            predicate: predicate.into(),
 1263|  1.60k|            object: object.into(),
 1264|  1.60k|            graph_name: self
 1265|  1.60k|                .contexts
 1266|  1.60k|                .last()
 1267|  1.60k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  1.60k|        }
 1269|  1.60k|    }
_RNCINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCsjwRv1y82X7y_5oxrdf10blank_node9BlankNodeE0Ba_:
 1267|    496|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1254|  61.2k|    fn quad(
 1255|  61.2k|        &self,
 1256|  61.2k|        subject: impl Into<N3Term>,
 1257|  61.2k|        predicate: impl Into<N3Term>,
 1258|  61.2k|        object: impl Into<N3Term>,
 1259|  61.2k|    ) -> N3Quad {
 1260|  61.2k|        N3Quad {
 1261|  61.2k|            subject: subject.into(),
 1262|  61.2k|            predicate: predicate.into(),
 1263|  61.2k|            object: object.into(),
 1264|  61.2k|            graph_name: self
 1265|  61.2k|                .contexts
 1266|  61.2k|                .last()
 1267|  61.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  61.2k|        }
 1269|  61.2k|    }
_RNvMse_NtCsev5kJ09hNTn_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  636|  30.6k|    pub fn is_end(&self) -> bool {
  637|  30.6k|        self.parser.is_end()
  638|  30.6k|    }
_RNvXsn_NtCsev5kJ09hNTn_5oxttl2n3NtB5_6N3TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   26|   148k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsf_NtCsev5kJ09hNTn_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  738|  4.78M|    fn recognize_next(
  739|  4.78M|        mut self,
  740|  4.78M|        token: N3Token<'_>,
  741|  4.78M|        context: &mut N3RecognizerContext,
  742|  4.78M|        results: &mut Vec<N3Quad>,
  743|  4.78M|        errors: &mut Vec<RuleRecognizerError>,
  744|  4.78M|    ) -> Self {
  745|  11.2M|        while let Some(rule) = self.stack.pop() {
  746|  8.90M|            match rule {
  747|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  748|       |                // [2]  n3Statement      ::=  n3Directive | triples
  749|       |                // [3]  n3Directive      ::=  prefixID | base
  750|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  751|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  752|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  753|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  754|       |                // [8]  base             ::=  "@base" IRIREF
  755|       |                N3State::N3Doc => {
  756|   703k|                    self.stack.push(N3State::N3Doc);
  757|  63.1k|                    match token {
  758|  82.9k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  759|  19.7k|                            self.stack.push(N3State::BaseExpectIri);
  760|  19.7k|                            return self;
  761|       |                        }
  762|  63.1k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  763|  2.14k|                            self.stack.push(N3State::PrefixExpectPrefix);
  764|  2.14k|                            return self;
  765|       |                        }
  766|   123k|                        N3Token::LangTag("prefix") => {
  767|  98.5k|                            self.stack.push(N3State::N3DocExpectDot);
  768|  98.5k|                            self.stack.push(N3State::PrefixExpectPrefix);
  769|  98.5k|                            return self;
  770|       |                        }
  771|  25.1k|                        N3Token::LangTag("base") => {
  772|    914|                            self.stack.push(N3State::N3DocExpectDot);
  773|    914|                            self.stack.push(N3State::BaseExpectIri);
  774|    914|                            return self;
  775|       |                        }
  776|   581k|                        _ => {
  777|   581k|                            self.stack.push(N3State::N3DocExpectDot);
  778|   581k|                            self.stack.push(N3State::Triples);
  779|   581k|                        }
  780|       |                    }
  781|       |                }
  782|       |                N3State::N3DocExpectDot => {
  783|  84.0k|                    if token == N3Token::Punctuation(".") {
  784|  19.8k|                        return self;
  785|  64.1k|                    }
  786|  64.1k|                    errors.push("A dot is expected at the end of N3 statements".into());
  787|       |                }
  788|  22.0k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  789|  17.4k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  790|  17.4k|                                self
  791|       |                    } else {
  792|  4.55k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  793|       |                },
  794|  89.2k|                N3State::PrefixExpectPrefix => return match token {
  795|  89.2k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  796|  84.5k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  797|  84.5k|                        self
  798|       |                    }
  799|       |                    _ => {
  800|  12.8k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  801|       |                    }
  802|       |                },
  803|  76.6k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  804|  74.1k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  805|  74.1k|                    self
  806|  2.47k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  807|       |                },
  808|       |                // [9]  triples  ::=  subject predicateObjectList?
  809|  1.11M|                N3State::Triples => {
  810|  1.11M|                    self.stack.push(N3State::TriplesMiddle);
  811|  1.11M|                    self.stack.push(N3State::Path);
  812|  1.11M|                }
  813|   171k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  814|   137k|                    self.stack.push(N3State::TriplesEnd);
  815|   137k|                    self.stack.push(N3State::PredicateObjectList);
  816|   137k|                },
  817|  39.5k|                N3State::TriplesEnd => {
  818|  39.5k|                    self.terms.pop();
  819|  39.5k|                }
  820|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  821|   464k|                N3State::PredicateObjectList => {
  822|   464k|                    self.stack.push(N3State::PredicateObjectListEnd);
  823|   464k|                    self.stack.push(N3State::ObjectsList);
  824|   464k|                    self.stack.push(N3State::Verb);
  825|   464k|                }
  826|       |                N3State::PredicateObjectListEnd => {
  827|  57.7k|                    self.predicates.pop();
  828|  57.7k|                    if token == N3Token::Punctuation(";") {
  829|  10.3k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  830|  10.3k|                        return self;
  831|  47.4k|                    }
  832|       |                }
  833|  21.4k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  834|  11.1k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  835|  11.1k|                    return self;
  836|  10.2k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  837|  3.39k|                    self.stack.push(N3State::PredicateObjectListEnd);
  838|  3.39k|                    self.stack.push(N3State::ObjectsList);
  839|  3.39k|                    self.stack.push(N3State::Verb);
  840|  3.39k|                },
  841|       |                // [11]  objectList  ::=  object ( "," object) *
  842|   161k|                N3State::ObjectsList => {
  843|   161k|                    self.stack.push(N3State::ObjectsListEnd);
  844|   161k|                    self.stack.push(N3State::Path);
  845|   161k|                }
  846|       |                N3State::ObjectsListEnd => {
  847|  61.2k|                    let object = self.terms.pop().unwrap();
  848|  61.2k|                    let subject = self.terms.last().unwrap().clone();
  849|  61.2k|                    results.push(match self.predicates.last().unwrap().clone() {
  850|  58.2k|                        Predicate::Regular(predicate) => self.quad(
  851|  58.2k|                            subject,
  852|  58.2k|                            predicate,
  853|  58.2k|                            object,
  854|  58.2k|                        ),
  855|  2.97k|                        Predicate::Inverted(predicate) => self.quad(
  856|  2.97k|                            object,
  857|  2.97k|                            predicate,
  858|  2.97k|                            subject,
  859|  2.97k|                        )
  860|       |                    });
  861|  61.2k|                    if token == N3Token::Punctuation(",") {
  862|  3.45k|                        self.stack.push(N3State::ObjectsListEnd);
  863|  3.45k|                        self.stack.push(N3State::Path);
  864|  3.45k|                        return self;
  865|  57.7k|                    }
  866|       |                }
  867|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
  868|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
  869|   468k|                N3State::Verb => match token {
  870|  37.7k|                    N3Token::PlainKeyword("a") => {
  871|  23.2k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
  872|  23.2k|                        return self;
  873|       |                    }
  874|  14.4k|                    N3Token::PlainKeyword("has") => {
  875|    688|                        self.stack.push(N3State::AfterRegularVerb);
  876|    688|                        self.stack.push(N3State::Path);
  877|    688|                        return self;
  878|       |                    }
  879|  13.8k|                    N3Token::PlainKeyword("is") => {
  880|  3.46k|                        self.stack.push(N3State::AfterVerbIs);
  881|  3.46k|                        self.stack.push(N3State::Path);
  882|  3.46k|                        return self;
  883|       |                    }
  884|   229k|                    N3Token::Punctuation("=") => {
  885|  5.37k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
  886|  5.37k|                        return self;
  887|       |                    }
  888|   223k|                    N3Token::Punctuation("=>") => {
  889|  3.89k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  890|  3.89k|                        return self;
  891|       |                    }
  892|   219k|                    N3Token::Punctuation("<=") => {
  893|    562|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  894|    562|                        return self;
  895|       |                    }
  896|   219k|                    N3Token::Punctuation("<-") => {
  897|  2.86k|                        self.stack.push(N3State::AfterInvertedVerb);
  898|  2.86k|                        self.stack.push(N3State::Path);
  899|  2.86k|                        return self;
  900|       |                    }
  901|   427k|                    _ => {
  902|   427k|                        self.stack.push(N3State::AfterRegularVerb);
  903|   427k|                        self.stack.push(N3State::Path);
  904|   427k|                    }
  905|       |                }
  906|   127k|                N3State::AfterRegularVerb => {
  907|   127k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
  908|   127k|                }
  909|  2.78k|                N3State::AfterInvertedVerb => {
  910|  2.78k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  911|  2.78k|                }
  912|  3.44k|                N3State::AfterVerbIs => return match token {
  913|  2.46k|                    N3Token::PlainKeyword("of") => {
  914|    671|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  915|    671|                        self
  916|       |                    }
  917|       |                    _ => {
  918|  2.77k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
  919|       |                    }
  920|       |                },
  921|       |                // [13]  subject     ::=  expression
  922|       |                // [15]  object      ::=  expression
  923|       |                // [16]  expression  ::=  path
  924|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
  925|  1.80M|                N3State::Path => {
  926|  1.80M|                    self.stack.push(N3State::PathFollowUp);
  927|  1.80M|                    self.stack.push(N3State::PathItem);
  928|  1.80M|                }
  929|   398k|                N3State::PathFollowUp => match token {
  930|   284k|                    N3Token::Punctuation("!") => {
  931|  3.91k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
  932|  3.91k|                        self.stack.push(N3State::PathItem);
  933|  3.91k|                        return self;
  934|       |                    }
  935|   280k|                    N3Token::Punctuation("^") => {
  936|  2.64k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
  937|  2.64k|                        self.stack.push(N3State::PathItem);
  938|  2.64k|                        return self;
  939|       |                    }
  940|   392k|                    _ => ()
  941|       |                },
  942|  5.13k|                N3State::PathAfterIndicator { is_inverse } => {
  943|  5.13k|                    let predicate = self.terms.pop().unwrap();
  944|  5.13k|                    let previous = self.terms.pop().unwrap();
  945|  5.13k|                    let current = BlankNode::default();
  946|  5.13k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
  947|  5.13k|                    self.terms.push(current.into());
  948|  5.13k|                    self.stack.push(N3State::PathFollowUp);
  949|       |                }
  950|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
  951|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
  952|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
  953|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
  954|       |                // [22]  collection             ::=  "(" object* ")"
  955|       |                // [23]  formula                ::=  "{" formulaContent? "}"
  956|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
  957|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
  958|       |                // [27]  iri                    ::=  IRIREF | prefixedName
  959|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
  960|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
  961|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
  962|       |                N3State::PathItem => {
  963|  1.80M|                    return match token {
  964|  45.8k|                        N3Token::IriRef(iri) => {
  965|  45.8k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
  966|  45.8k|                            self
  967|       |                        }
  968|   244k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  969|   134k|                            Ok(t) => {
  970|   134k|                                self.terms.push(t.into());
  971|   134k|                                self
  972|       |                            }
  973|   109k|                            Err(e) =>  self.error(errors, e)
  974|       |                        }
  975|  24.5k|                        N3Token::BlankNodeLabel(bnode) => {
  976|  24.5k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
  977|  24.5k|                            self
  978|       |                        }
  979|  13.7k|                        N3Token::Variable(name) => {
  980|  13.7k|                            self.terms.push(Variable::new_unchecked(name).into());
  981|  13.7k|                            self
  982|       |                        }
  983|  1.21M|                        N3Token::Punctuation("[") => {
  984|   351k|                            self.stack.push(N3State::PropertyListMiddle);
  985|   351k|                            self
  986|       |                        }
  987|   862k|                        N3Token::Punctuation("(") => {
  988|  79.0k|                            self.stack.push(N3State::CollectionBeginning);
  989|  79.0k|                            self
  990|       |                        }
  991|  69.0k|                        N3Token::String(value) => {
  992|  69.0k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
  993|  69.0k|                            self
  994|       |                        }
  995|  55.6k|                        N3Token::Integer(v) => {
  996|  55.6k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  997|  55.6k|                            self
  998|       |                        }
  999|  12.5k|                        N3Token::Decimal(v) => {
 1000|  12.5k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1001|  12.5k|                            self
 1002|       |                        }
 1003|  6.73k|                        N3Token::Double(v) => {
 1004|  6.73k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1005|  6.73k|                            self
 1006|       |                        }
 1007|  91.4k|                        N3Token::PlainKeyword("true") => {
 1008|  1.27k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1009|  1.27k|                            self
 1010|       |                        }
 1011|  90.2k|                        N3Token::PlainKeyword("false") => {
 1012|  2.06k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1013|  2.06k|                            self
 1014|       |                        }
 1015|   783k|                        N3Token::Punctuation("{") => {
 1016|   605k|                            self.contexts.push(BlankNode::default());
 1017|   605k|                            self.stack.push(N3State::FormulaContent);
 1018|   605k|                            self
 1019|       |                        }
 1020|       |                        _ =>
 1021|   294k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1022|       |
 1023|       |                    }
 1024|       |                }
 1025|   334k|                N3State::PropertyListMiddle => match token {
 1026|   141k|                    N3Token::Punctuation("]") => {
 1027|  3.06k|                        self.terms.push(BlankNode::default().into());
 1028|  3.06k|                        return self;
 1029|       |                    }
 1030|  37.0k|                    N3Token::PlainKeyword("id") => {
 1031|  4.95k|                        self.stack.push(N3State::IriPropertyList);
 1032|  4.95k|                        return self;
 1033|       |                    }
 1034|   326k|                    _ => {
 1035|   326k|                        self.terms.push(BlankNode::default().into());
 1036|   326k|                        self.stack.push(N3State::PropertyListEnd);
 1037|   326k|                        self.stack.push(N3State::PredicateObjectList);
 1038|   326k|                    }
 1039|       |                }
 1040|  14.7k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1041|  1.38k|                    return self;
 1042|  13.4k|                } else {
 1043|  13.4k|                    errors.push("blank node property lists should end with a ']'".into());
 1044|  13.4k|                }
 1045|  4.50k|                N3State::IriPropertyList => return match token {
 1046|    988|                    N3Token::IriRef(id) => {
 1047|    988|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1048|    988|                        self.stack.push(N3State::PropertyListEnd);
 1049|    988|                        self.stack.push(N3State::PredicateObjectList);
 1050|    988|                        self
 1051|       |                    }
 1052|  2.67k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1053|    493|                        Ok(t) => {
 1054|    493|                            self.terms.push(t.into());
 1055|    493|                            self.stack.push(N3State::PropertyListEnd);
 1056|    493|                            self.stack.push(N3State::PredicateObjectList);
 1057|    493|                            self
 1058|       |                        }
 1059|  2.18k|                        Err(e) => {
 1060|  2.18k|                            self.error(errors, e)
 1061|       |                        }
 1062|       |                    }
 1063|       |                    _ => {
 1064|    838|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1065|       |                    }
 1066|       |                },
 1067|  77.5k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1068|  5.45k|                    self.terms.push(rdf::NIL.into());
 1069|  5.45k|                    return self;
 1070|  72.0k|                } else {
 1071|  72.0k|                    let root = BlankNode::default();
 1072|  72.0k|                    self.terms.push(root.clone().into());
 1073|  72.0k|                    self.terms.push(root.into());
 1074|  72.0k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1075|  72.0k|                    self.stack.push(N3State::Path);
 1076|  72.0k|                },
 1077|       |                N3State::CollectionPossibleEnd => {
 1078|  25.6k|                    let value = self.terms.pop().unwrap();
 1079|  25.6k|                    let old = self.terms.pop().unwrap();
 1080|  25.6k|                    results.push(self.quad(
 1081|  25.6k|                        old.clone(),
 1082|  25.6k|                        rdf::FIRST,
 1083|  25.6k|                        value,
 1084|  25.6k|                    ));
 1085|  25.6k|                    if let N3Token::Punctuation(")") = token {
 1086|  10.2k|                        results.push(self.quad(
 1087|  10.2k|                            old,
 1088|  10.2k|                            rdf::REST,
 1089|  10.2k|                            rdf::NIL,
 1090|  10.2k|                        ));
 1091|  10.2k|                        return self;
 1092|  15.4k|                    }
 1093|  15.4k|                    let new = BlankNode::default();
 1094|  15.4k|                    results.push(self.quad(
 1095|  15.4k|                        old,
 1096|  15.4k|                        rdf::REST,
 1097|  15.4k|                        new.clone(),
 1098|  15.4k|                    ));
 1099|  15.4k|                    self.terms.push(new.into());
 1100|  15.4k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1101|  15.4k|                    self.stack.push(N3State::Path);
 1102|       |                }
 1103|  65.4k|                N3State::LiteralPossibleSuffix { value } => {
 1104|  65.4k|                    match token {
 1105|  4.46k|                        N3Token::LangTag(lang) => {
 1106|  4.46k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1107|  4.46k|                            return self;
 1108|       |                        }
 1109|  27.5k|                        N3Token::Punctuation("^^") => {
 1110|  19.9k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1111|  19.9k|                            return self;
 1112|       |                        }
 1113|  41.0k|                        _ => {
 1114|  41.0k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1115|  41.0k|                        }
 1116|       |                    }
 1117|       |                }
 1118|  18.2k|                N3State::LiteralExpectDatatype { value } => {
 1119|  18.2k|                    match token {
 1120|  2.64k|                        N3Token::IriRef(datatype) => {
 1121|  2.64k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1122|  2.64k|                            return self;
 1123|       |                        }
 1124|  7.54k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1125|  3.11k|                            Ok(datatype) => {
 1126|  3.11k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1127|  3.11k|                                return self;
 1128|       |                            }
 1129|  4.42k|                            Err(e) => {
 1130|  4.42k|                                return self.error(errors, e);
 1131|       |                            }
 1132|       |                        }
 1133|  8.07k|                        _ => {
 1134|  8.07k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1135|  8.07k|                            self.stack.clear();
 1136|  8.07k|                        }
 1137|       |                    }
 1138|       |                }
 1139|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1140|       |                N3State::FormulaContent => {
 1141|  16.9k|                    match token {
 1142|   579k|                        N3Token::Punctuation("}") => {
 1143|  91.1k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1144|  91.1k|                            return self;
 1145|       |                        }
 1146|  19.1k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1147|  2.15k|                            self.stack.push(N3State::FormulaContent);
 1148|  2.15k|                            self.stack.push(N3State::BaseExpectIri);
 1149|  2.15k|                            return self;
 1150|       |                        }
 1151|  16.9k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1152|    856|                            self.stack.push(N3State::FormulaContent);
 1153|    856|                            self.stack.push(N3State::PrefixExpectPrefix);
 1154|    856|                            return self;
 1155|       |                        }
 1156|  5.15k|                        N3Token::LangTag("prefix") => {
 1157|    823|                            self.stack.push(N3State::FormulaContentExpectDot);
 1158|    823|                            self.stack.push(N3State::PrefixExpectPrefix);
 1159|    823|                            return self;
 1160|       |                        }
 1161|  4.32k|                        N3Token::LangTag("base") => {
 1162|    656|                            self.stack.push(N3State::FormulaContentExpectDot);
 1163|    656|                            self.stack.push(N3State::BaseExpectIri);
 1164|    656|                            return self;
 1165|       |                        }
 1166|   534k|                        _ => {
 1167|   534k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1168|   534k|                            self.stack.push(N3State::Triples);
 1169|   534k|                        }
 1170|       |                    }
 1171|       |                }
 1172|       |                N3State::FormulaContentExpectDot => {
 1173|  43.2k|                    match token {
 1174|  41.1k|                        N3Token::Punctuation("}") => {
 1175|  15.3k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1176|  15.3k|                            return self;
 1177|       |                        }
 1178|  25.8k|                        N3Token::Punctuation(".") => {
 1179|  5.71k|                            self.stack.push(N3State::FormulaContent);
 1180|  5.71k|                            return self;
 1181|       |                        }
 1182|  22.2k|                        _ => {
 1183|  22.2k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1184|  22.2k|                            self.stack.push(N3State::FormulaContent);
 1185|  22.2k|                        }
 1186|       |                    }
 1187|       |                }
 1188|       |            }
 1189|       |        }
 1190|       |        // Empty stack
 1191|  2.38M|        if token == N3Token::Punctuation(".") {
 1192|   678k|            self.stack.push(N3State::N3Doc);
 1193|   678k|            self
 1194|       |        } else {
 1195|  1.70M|            self
 1196|       |        }
 1197|  4.78M|    }
_RNvMse_NtCsev5kJ09hNTn_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  644|  9.84M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  645|  9.84M|        self.parser.read_next()
  646|  9.84M|    }
_RNvXs_NtCsev5kJ09hNTn_5oxttl2n3NtB4_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjwRv1y82X7y_5oxrdf10named_node9NamedNodeE4fromB6_:
   52|   192k|    fn from(node: NamedNode) -> Self {
   53|   192k|        Self::NamedNode(node)
   54|   192k|    }
_RNvXs2_NtCsev5kJ09hNTn_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjwRv1y82X7y_5oxrdf7literal7LiteralE4fromB7_:
   73|   129k|    fn from(literal: Literal) -> Self {
   74|   129k|        Self::Literal(literal)
   75|   129k|    }
_RNvXs8_NtCsev5kJ09hNTn_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjwRv1y82X7y_5oxrdf8variable8VariableE4fromB7_:
  131|  13.7k|    fn from(variable: Variable) -> Self {
  132|  13.7k|        Self::Variable(variable)
  133|  13.7k|    }
_RNvMse_NtCsev5kJ09hNTn_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  631|  30.6k|    pub fn end(&mut self) {
  632|  30.6k|        self.parser.end()
  633|  30.6k|    }
_RNvMsb_NtCsev5kJ09hNTn_5oxttl2n3NtB5_8N3Parser5parse:
  365|  30.6k|    pub fn parse(self) -> LowLevelN3Reader {
  366|  30.6k|        LowLevelN3Reader {
  367|  30.6k|            parser: N3Recognizer::new_parser(self.unchecked, self.base, self.prefixes),
  368|  30.6k|        }
  369|  30.6k|    }
_RNvXs1_NtCsev5kJ09hNTn_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjwRv1y82X7y_5oxrdf10blank_node9BlankNodeE4fromB7_:
   66|   645k|    fn from(node: BlankNode) -> Self {
   67|   645k|        Self::BlankNode(node)
   68|   645k|    }
_RNvXsf_NtCsev5kJ09hNTn_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1211|  14.0M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1212|  14.0M|        &context.lexer_options
 1213|  14.0M|    }
_RNvMsg_NtCsev5kJ09hNTn_5oxttl2n3NtB5_12N3Recognizer10new_parser:
 1217|  30.6k|    pub fn new_parser(
 1218|  30.6k|        unchecked: bool,
 1219|  30.6k|        base_iri: Option<Iri<String>>,
 1220|  30.6k|        prefixes: HashMap<String, Iri<String>>,
 1221|  30.6k|    ) -> Parser<Self> {
 1222|  30.6k|        Parser::new(
 1223|  30.6k|            Lexer::new(
 1224|  30.6k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1225|  30.6k|                MIN_BUFFER_SIZE,
 1226|  30.6k|                MAX_BUFFER_SIZE,
 1227|  30.6k|                true,
 1228|  30.6k|                Some(b"#"),
 1229|  30.6k|            ),
 1230|  30.6k|            Self {
 1231|  30.6k|                stack: vec![N3State::N3Doc],
 1232|  30.6k|                terms: Vec::new(),
 1233|  30.6k|                predicates: Vec::new(),
 1234|  30.6k|                contexts: Vec::new(),
 1235|  30.6k|            },
 1236|  30.6k|            N3RecognizerContext {
 1237|  30.6k|                lexer_options: N3LexerOptions { base_iri },
 1238|  30.6k|                prefixes,
 1239|  30.6k|            },
 1240|  30.6k|        )
 1241|  30.6k|    }
_RNvXs0_NtCsev5kJ09hNTn_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjwRv1y82X7y_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   59|  90.3k|    fn from(node: NamedNodeRef<'_>) -> Self {
   60|  90.3k|        Self::NamedNode(node.into_owned())
   61|  90.3k|    }
_RNvXsf_NtCsev5kJ09hNTn_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1199|  30.6k|    fn recognize_end(
 1200|  30.6k|        self,
 1201|  30.6k|        _state: &mut N3RecognizerContext,
 1202|  30.6k|        _results: &mut Vec<Self::Output>,
 1203|  30.6k|        errors: &mut Vec<RuleRecognizerError>,
 1204|  30.6k|    ) {
 1205|  30.6k|        match &*self.stack {
 1206|  30.6k|            [] | [N3State::N3Doc] => (),
 1207|  3.22k|            _ => errors.push("Unexpected end".into()), // TODO
 1208|       |        }
 1209|  30.6k|    }
_RNvXsx_NtCsev5kJ09hNTn_5oxttl2n3NtB5_9PredicateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  707|  61.2k|#[derive(Clone)]
_RNvMse_NtCsev5kJ09hNTn_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  624|  6.24M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  625|  6.24M|        self.parser.extend_from_slice(other)
  626|  6.24M|    }
_RNvXsf_NtCsev5kJ09hNTn_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  730|  2.91M|    fn error_recovery_state(mut self) -> Self {
  731|  2.91M|        self.stack.clear();
  732|  2.91M|        self.terms.clear();
  733|  2.91M|        self.predicates.clear();
  734|  2.91M|        self.contexts.clear();
  735|  2.91M|        self
  736|  2.91M|    }

_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  30.6k|    pub fn new(
   74|  30.6k|        parser: R,
   75|  30.6k|        min_buffer_size: usize,
   76|  30.6k|        max_buffer_size: usize,
   77|  30.6k|        is_line_jump_whitespace: bool,
   78|  30.6k|        line_comment_start: Option<&'static [u8]>,
   79|  30.6k|    ) -> Self {
   80|  30.6k|        Self {
   81|  30.6k|            parser,
   82|  30.6k|            data: Vec::new(),
   83|  30.6k|            position: Position {
   84|  30.6k|                line_start_buffer_offset: 0,
   85|  30.6k|                buffer_offset: 0,
   86|  30.6k|                global_offset: 0,
   87|  30.6k|                global_line: 0,
   88|  30.6k|            },
   89|  30.6k|            previous_position: Position {
   90|  30.6k|                line_start_buffer_offset: 0,
   91|  30.6k|                buffer_offset: 0,
   92|  30.6k|                global_offset: 0,
   93|  30.6k|                global_line: 0,
   94|  30.6k|            },
   95|  30.6k|            is_ending: false,
   96|  30.6k|            min_buffer_size,
   97|  30.6k|            max_buffer_size,
   98|  30.6k|            is_line_jump_whitespace,
   99|  30.6k|            line_comment_start,
  100|  30.6k|        }
  101|  30.6k|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|  2.90M|    pub fn location_from_buffer_offset_range(
  237|  2.90M|        &self,
  238|  2.90M|        offset_range: Range<usize>,
  239|  2.90M|    ) -> Range<TextPosition> {
  240|  2.90M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|  2.90M|        let (start_extra_line_jumps, start_line_start) =
  242|  2.90M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|  2.90M|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|  2.90M|            );
  245|  2.90M|        let start_line_start = if start_extra_line_jumps > 0 {
  246|  2.67k|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|  2.90M|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|  2.90M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|  2.90M|        let (end_extra_line_jumps, end_line_start) =
  252|  2.90M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|  2.90M|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|  2.90M|            );
  255|  2.90M|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  8.74k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|  2.89M|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|  2.90M|        TextPosition {
  261|  2.90M|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|  2.90M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|  2.90M|            offset: self.previous_position.global_offset
  264|  2.90M|                + u64::try_from(offset_range.start).unwrap(),
  265|  2.90M|        }..TextPosition {
  266|  2.90M|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|  2.90M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|  2.90M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|  2.90M|        }
  270|  2.90M|    }
_RNCNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|  2.90M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|  2.90M|            location: self.location_from_buffer_offset_range(e.location),
  232|  2.90M|            message: e.message,
  233|  2.90M|        }))
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|   545k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|   545k|        TextPosition {
  274|   545k|            line: self.previous_position.global_line,
  275|   545k|            column: Self::column_from_bytes(
  276|   545k|                &self.data[self.previous_position.line_start_buffer_offset
  277|   545k|                    ..self.previous_position.buffer_offset],
  278|   545k|            ),
  279|   545k|            offset: self.previous_position.global_offset,
  280|   545k|        }..TextPosition {
  281|   545k|            line: self.position.global_line,
  282|   545k|            column: Self::column_from_bytes(
  283|   545k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|   545k|            ),
  285|   545k|            offset: self.position.global_offset,
  286|   545k|        }
  287|   545k|    }
_RNvXNtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB6_:
   31|  2.15M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.15M|        Self {
   33|  2.15M|            location,
   34|  2.15M|            message: message.into(),
   35|  2.15M|        }
   36|  2.15M|    }
_RNvXs0_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTjNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB9_:
   47|  44.1k|    fn from((location, message): (usize, S)) -> Self {
   48|  44.1k|        (location..=location, message).into()
   49|  44.1k|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|  6.24M|    fn shrink_data(&mut self) {
  389|  6.24M|        if self.position.line_start_buffer_offset > 0 {
  390|  88.5k|            self.data
  391|  88.5k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|  88.5k|            self.data
  393|  88.5k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|  88.5k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|  88.5k|            self.position.line_start_buffer_offset = 0;
  396|  88.5k|            self.previous_position = self.position;
  397|  6.15M|        }
  398|  6.24M|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|  13.5M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|  13.5M|        let mut num_of_jumps = 0;
  402|  13.5M|        let mut last_jump_pos = 0;
  403|  13.5M|        let mut previous_cr = 0;
  404|  13.5M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|  53.7k|            if bytes[pos] == b'\r' {
  406|  6.59k|                previous_cr = pos;
  407|  6.59k|                num_of_jumps += 1;
  408|  6.59k|                last_jump_pos = pos + 1;
  409|  6.59k|            } else {
  410|  47.1k|                if previous_cr < pos - 1 {
  411|  21.7k|                    // We count \r\n as a single line jump
  412|  21.7k|                    num_of_jumps += 1;
  413|  25.4k|                }
  414|  47.1k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|  13.5M|        (num_of_jumps, last_jump_pos)
  418|  13.5M|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|  12.0M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|  12.0M|        match str::from_utf8(bytes) {
  422|  6.12M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|  5.97M|            Err(e) => {
  424|  5.97M|                if e.valid_up_to() == 0 {
  425|   783k|                    0
  426|       |                } else {
  427|  5.18M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|  12.0M|    }
_RNvXs_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   612k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   612k|        (*location.start()..*location.end() + 1, message).into()
   43|   612k|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|  14.0M|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|  14.0M|        if self.is_line_jump_whitespace {
  340|  14.0M|            let mut i = self.position.buffer_offset;
  341|  14.1M|            while let Some(c) = self.data.get(i) {
  342|  12.9M|                match c {
  343|  56.0k|                    b' ' | b'\t' => {
  344|  56.0k|                        self.position.buffer_offset += 1;
  345|  56.0k|                        self.position.global_offset += 1;
  346|  56.0k|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  31.3k|                        let mut increment: u8 = 1;
  350|  31.3k|                        if let Some(c) = self.data.get(i + 1) {
  351|  20.0k|                            if *c == b'\n' {
  352|    170|                                increment += 1;
  353|    170|                                i += 1;
  354|  19.8k|                            }
  355|  11.2k|                        } else if !self.is_ending {
  356|  11.1k|                            return None; // We need to read more
  357|    137|                        }
  358|  20.1k|                        self.position.buffer_offset += usize::from(increment);
  359|  20.1k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  20.1k|                        self.position.global_offset += u64::from(increment);
  361|  20.1k|                        self.position.global_line += 1;
  362|       |                    }
  363|  73.0k|                    b'\n' => {
  364|  73.0k|                        self.position.buffer_offset += 1;
  365|  73.0k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|  73.0k|                        self.position.global_offset += 1;
  367|  73.0k|                        self.position.global_line += 1;
  368|  73.0k|                    }
  369|  12.7M|                    _ => return Some(()),
  370|       |                }
  371|   149k|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|  1.26M|        Some(())
  386|  14.0M|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  6.24M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  6.24M|        self.shrink_data();
  105|  6.24M|        self.data.extend_from_slice(other);
  106|  6.24M|    }
_RNvXNtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   833k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   833k|        Self {
   33|   833k|            location,
   34|   833k|            message: message.into(),
   35|   833k|        }
   36|   833k|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  30.6k|    pub fn end(&mut self) {
  110|  30.6k|        self.is_ending = true;
  111|  30.6k|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|   545k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|   545k|        String::from_utf8_lossy(
  291|   545k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|   545k|        )
  293|   545k|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|  6.30M|    pub fn is_end(&self) -> bool {
  296|  6.30M|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|  6.30M|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  14.0M|    pub fn read_next(
  167|  14.0M|        &mut self,
  168|  14.0M|        options: &R::Options,
  169|  14.0M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|  14.0M|        self.skip_whitespaces_and_comments()?;
  171|  13.9M|        self.previous_position = self.position;
  172|  13.9M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|  13.9M|            &self.data[self.position.buffer_offset..],
  174|  13.9M|            self.is_ending,
  175|  13.9M|            options,
  176|  13.9M|        ) else {
  177|  6.24M|            return if self.is_ending {
  178|  69.8k|                if self.position.buffer_offset == self.data.len() {
  179|  61.2k|                    None // We have finished
  180|       |                } else {
  181|  8.65k|                    let (new_line_jumps, new_line_start) =
  182|  8.65k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  8.65k|                            &self.data[self.position.buffer_offset..],
  184|  8.65k|                        );
  185|  8.65k|                    if new_line_jumps > 0 {
  186|    240|                        self.position.line_start_buffer_offset =
  187|    240|                            self.position.buffer_offset + new_line_start;
  188|  8.41k|                    }
  189|  8.65k|                    self.position.global_offset +=
  190|  8.65k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  8.65k|                    self.position.buffer_offset = self.data.len();
  192|  8.65k|                    self.position.global_line += new_line_jumps;
  193|  8.65k|                    let new_position = TextPosition {
  194|  8.65k|                        line: self.position.global_line,
  195|  8.65k|                        column: Self::column_from_bytes(
  196|  8.65k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  8.65k|                        ),
  198|  8.65k|                        offset: self.position.global_offset,
  199|  8.65k|                    };
  200|  8.65k|                    let error = TurtleSyntaxError {
  201|  8.65k|                        location: new_position..new_position,
  202|  8.65k|                        message: "Unexpected end of file".into(),
  203|  8.65k|                    };
  204|  8.65k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  8.65k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|  6.17M|                None
  209|       |            };
  210|       |        };
  211|       |        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|       |        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|  7.69M|        let (new_line_jumps, new_line_start) =
  221|  7.69M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|  7.69M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|  7.69M|            );
  224|  7.69M|        if new_line_jumps > 0 {
  225|  9.03k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|  7.68M|        }
  227|  7.69M|        self.position.buffer_offset += consumed;
  228|  7.69M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|  7.69M|        self.position.global_line += new_line_jumps;
  230|  7.69M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|  7.69M|        }))
  234|  14.0M|    }
_RNvMs1_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|  14.0M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|  14.0M|            self.skip_whitespaces()?;
  303|       |
  304|  14.0M|            let buf = &self.data[self.position.buffer_offset..];
  305|  14.0M|            if let Some(line_comment_start) = self.line_comment_start {
  306|  14.0M|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|  76.1k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  43.2k|                        let mut end_position = line_comment_start.len() + end;
  310|  43.2k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  40.1k|                            if let Some(c) = buf.get(end_position + 1) {
  313|  13.9k|                                if *c == b'\n' {
  314|      0|                                    end_position += 1;
  315|  13.9k|                                }
  316|  26.1k|                            } else if !self.is_ending {
  317|  26.1k|                                return None; // We need to read more
  318|     14|                            }
  319|  3.14k|                        }
  320|  17.1k|                        let comment_size = end_position + 1;
  321|  17.1k|                        self.position.buffer_offset += comment_size;
  322|  17.1k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  17.1k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  17.1k|                        self.position.global_line += 1;
  325|  17.1k|                        continue;
  326|  32.8k|                    }
  327|  32.8k|                    if self.is_ending {
  328|    495|                        self.position.buffer_offset = self.data.len(); // EOF
  329|    495|                        return Some(());
  330|  32.3k|                    }
  331|  32.3k|                    return None; // We need more data
  332|  13.9M|                }
  333|      0|            }
  334|  13.9M|            return Some(());
  335|       |        }
  336|  14.0M|    }
_RNvXs_NtNtCsev5kJ09hNTn_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB8_:
   41|  54.7k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  54.7k|        (*location.start()..*location.end() + 1, message).into()
   43|  54.7k|    }

_RNvMs_NtNtCsev5kJ09hNTn_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3newB8_:
   56|  30.6k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  30.6k|        Self {
   58|  30.6k|            lexer,
   59|  30.6k|            state: Some(recognizer),
   60|  30.6k|            context,
   61|  30.6k|            results: vec![],
   62|  30.6k|            errors: vec![],
   63|  30.6k|        }
   64|  30.6k|    }
_RNvMs_NtNtCsev5kJ09hNTn_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE17extend_from_sliceB8_:
   66|  6.24M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  6.24M|        self.lexer.extend_from_slice(other)
   68|  6.24M|    }
_RNvXNtNtCsev5kJ09hNTn_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromReE4fromB6_:
   39|   429k|    fn from(message: S) -> Self {
   40|   429k|        Self {
   41|   429k|            message: message.into(),
   42|   429k|        }
   43|   429k|    }
_RNvMs_NtNtCsev5kJ09hNTn_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3endB8_:
   71|  30.6k|    pub fn end(&mut self) {
   72|  30.6k|        self.lexer.end()
   73|  30.6k|    }
_RNvMs_NtNtCsev5kJ09hNTn_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE6is_endB8_:
   76|  30.6k|    pub fn is_end(&self) -> bool {
   77|  30.6k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  30.6k|    }
_RNvMs_NtNtCsev5kJ09hNTn_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE9read_nextB8_:
   80|  9.84M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|  14.6M|            if let Some(error) = self.errors.pop() {
   83|   545k|                return Some(Err(TurtleSyntaxError {
   84|   545k|                    location: self.lexer.last_token_location(),
   85|   545k|                    message: error
   86|   545k|                        .message
   87|   545k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   545k|                }));
   89|  14.1M|            }
   90|  14.1M|            if let Some(result) = self.results.pop() {
   91|   117k|                return Some(Ok(result));
   92|  14.0M|            }
   93|  14.0M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  7.69M|                match result {
   95|  4.78M|                    Ok(token) => {
   96|  4.78M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  4.78M|                        });
  104|  4.78M|                        continue;
  105|       |                    }
  106|  2.91M|                    Err(e) => {
  107|  2.91M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  2.91M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  6.30M|            }
  112|  6.30M|            if self.lexer.is_end() {
  113|  61.2k|                self.state.take()?.recognize_end(
  114|  30.6k|                    &mut self.context,
  115|  30.6k|                    &mut self.results,
  116|  30.6k|                    &mut self.errors,
  117|  30.6k|                )
  118|       |            } else {
  119|  6.24M|                return None;
  120|       |            }
  121|       |        }
  122|  9.84M|    }
_RNvXNtNtCsev5kJ09hNTn_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjOdcKtOMjJI_5alloc6string6StringE4fromB6_:
   39|   115k|    fn from(message: S) -> Self {
   40|   115k|        Self {
   41|   115k|            message: message.into(),
   42|   115k|        }
   43|   115k|    }
_RNCNvMs_NtNtCsev5kJ09hNTn_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_2n312N3RecognizerE9read_next0Ba_:
   96|  4.78M|                        self.state = self.state.take().map(|state| {
   97|  4.78M|                            state.recognize_next(
   98|  4.78M|                                token,
   99|  4.78M|                                &mut self.context,
  100|  4.78M|                                &mut self.results,
  101|  4.78M|                                &mut self.errors,
  102|  4.78M|                            )
  103|  4.78M|                        });


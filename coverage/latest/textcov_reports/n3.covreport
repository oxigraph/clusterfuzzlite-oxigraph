_RNvCsjpauQ7jJk27_9getrandom16getrandom_uninitCsfmkKAYmFAU1_9rand_core:
  344|     44|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|     44|    if !dest.is_empty() {
  346|     44|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|     44|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|     44|}
_RNvCsjpauQ7jJk27_9getrandom9getrandomCsfmkKAYmFAU1_9rand_core:
  314|     44|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|     44|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|     44|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|     44|    // `dest`.
  318|     44|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|     44|    Ok(())
  320|     44|}

_RNvNtCsjpauQ7jJk27_9getrandom3imp15getrandom_inner:
   17|     44|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|     44|    // getrandom(2) was introduced in Linux 3.17
   19|     44|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|     44|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|     44|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|     44|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|     44|}
_RNCNvNtCsjpauQ7jJk27_9getrandom3imp15getrandom_inner0B5_:
   21|     44|        sys_fill_exact(dest, |buf| unsafe {
   22|     44|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|     44|        })
_RNvNtCsjpauQ7jJk27_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCsjpauQ7jJk27_9getrandom3imp9getrandom:
   42|     45|unsafe fn getrandom(
   43|     45|    buf: *mut libc::c_void,
   44|     45|    buflen: libc::size_t,
   45|     45|    flags: libc::c_uint,
   46|     45|) -> libc::ssize_t {
   47|     45|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|     45|}

_RINvNtCsjpauQ7jJk27_9getrandom4util19slice_as_uninit_muthECsfmkKAYmFAU1_9rand_core:
   98|     44|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|     44|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|     44|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|     44|}
_RINvNtCsjpauQ7jJk27_9getrandom4util21slice_assume_init_muthECsfmkKAYmFAU1_9rand_core:
   74|     44|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|     44|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|     44|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|     44|}
_RINvMNtCsjpauQ7jJk27_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|     44|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|     44|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|     44|        let mut val = self.0.load(Relaxed);
   49|     44|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|     43|        }
   53|     44|        val
   54|     44|    }
_RINvMs_NtCsjpauQ7jJk27_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|     44|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|     44|        self.0.unsync_init(|| init() as usize) != 0
   67|     44|    }
_RNCINvMs_NtCsjpauQ7jJk27_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCsjpauQ7jJk27_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|     44|pub fn sys_fill_exact(
   68|     44|    mut buf: &mut [MaybeUninit<u8>],
   69|     44|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|     44|) -> Result<(), Error> {
   71|     88|    while !buf.is_empty() {
   72|     44|        let res = sys_fill(buf);
   73|     44|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|     44|        } else {
   80|     44|            // We don't check for EOF (ret = 0) as the data we are reading
   81|     44|            // should be an infinite stream of random bytes.
   82|     44|            let len = min(res as usize, buf.len());
   83|     44|            buf = &mut buf[len..];
   84|     44|        }
   85|       |    }
   86|     44|    Ok(())
   87|     44|}

rust_fuzzer_test_input:
  209|  4.93k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  4.93k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  4.93k|                }
  223|  4.93k|
  224|  4.93k|                __libfuzzer_sys_run(bytes);
  225|  4.93k|                0
  226|  4.93k|            }
_RNvNvCsiOoKLCLNKqP_2n31__19___libfuzzer_sys_run:
  241|  4.93k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  4.93k|            }
LLVMFuzzerTestOneInput:
   58|  4.93k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  4.93k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  4.93k|    });
   63|  4.93k|
   64|  4.93k|    match test_input {
   65|  4.93k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  4.93k|}
_RNCNvCssYmL8WCiQ9_13libfuzzer_sys15test_input_wrap0B3_:
   59|  4.93k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  4.93k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  4.93k|        rust_fuzzer_test_input(data_slice)
   62|  4.93k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4next0ECsibMRFqTCw42_5oxttl:
 1044|  1.32M|    pub(crate) unsafe fn next(
 1045|  1.32M|        &mut self,
 1046|  1.32M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.32M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.32M|        let found = find_raw(self.start, self.end)?;
 1057|  6.32k|        let result = found.distance(self.original_start);
 1058|  6.32k|        self.start = found.add(1);
 1059|  6.32k|        Some(result)
 1060|  1.32M|    }
_RINvNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsibMRFqTCw42_5oxttl:
 1125|  9.39k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  9.39k|    haystack: &[u8],
 1127|  9.39k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  9.39k|) -> Option<usize> {
 1129|  9.39k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  9.39k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  9.39k|    // a &[u8].
 1132|  9.39k|    let start = haystack.as_ptr();
 1133|  9.39k|    let end = start.add(haystack.len());
 1134|  9.39k|    let found = find_raw(start, end)?;
 1135|    318|    Some(found.distance(start))
 1136|  9.39k|}
_RINvNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsibMRFqTCw42_5oxttl:
 1125|   239k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   239k|    haystack: &[u8],
 1127|   239k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   239k|) -> Option<usize> {
 1129|   239k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   239k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   239k|    // a &[u8].
 1132|   239k|    let start = haystack.as_ptr();
 1133|   239k|    let end = start.add(haystack.len());
 1134|   239k|    let found = find_raw(start, end)?;
 1135|  99.4k|    Some(found.distance(start))
 1136|   239k|}
_RNvMs3_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  1.32M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  1.32M|        Iter {
 1029|  1.32M|            original_start: haystack.as_ptr(),
 1030|  1.32M|            start: haystack.as_ptr(),
 1031|  1.32M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  1.32M|            haystack: core::marker::PhantomData,
 1033|  1.32M|        }
 1034|  1.32M|    }
_RNvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE7needle1B8_:
  117|  24.4k|    pub(crate) fn needle1(&self) -> u8 {
  118|  24.4k|        self.s1
  119|  24.4k|    }
_RNvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE3newB8_:
  111|  9.39k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  9.39k|        One { s1: needle, v1: V::splat(needle) }
  113|  9.39k|    }
_RNvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iE3newB8_:
  111|  9.39k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  9.39k|        One { s1: needle, v1: V::splat(needle) }
  113|  9.39k|    }
_RNvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  1.39k|    pub(crate) unsafe fn find_raw(
  144|  1.39k|        &self,
  145|  1.39k|        start: *const u8,
  146|  1.39k|        end: *const u8,
  147|  1.39k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.39k|        let topos = V::Mask::first_offset;
  155|  1.39k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.39k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     37|            return Some(cur);
  167|  1.35k|        }
  168|  1.35k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.35k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.35k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.35k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  1.87k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    555|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     35|                return Some(cur);
  216|    520|            }
  217|    520|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.32k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.11k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.11k|            return self.search_chunk(cur, topos);
  228|    213|        }
  229|    213|        None
  230|  1.39k|    }
_RNvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  3.90k|    pub(crate) unsafe fn find_raw(
  144|  3.90k|        &self,
  145|  3.90k|        start: *const u8,
  146|  3.90k|        end: *const u8,
  147|  3.90k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  3.90k|        let topos = V::Mask::first_offset;
  155|  3.90k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  3.90k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     46|            return Some(cur);
  167|  3.85k|        }
  168|  3.85k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  3.85k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  3.85k|        if len >= Self::LOOP_SIZE {
  172|  1.40k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    608|                let a = V::load_aligned(cur);
  176|    608|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    608|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    608|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    608|                let eqa = self.v1.cmpeq(a);
  180|    608|                let eqb = self.v1.cmpeq(b);
  181|    608|                let eqc = self.v1.cmpeq(c);
  182|    608|                let eqd = self.v1.cmpeq(d);
  183|    608|                let or1 = eqa.or(eqb);
  184|    608|                let or2 = eqc.or(eqd);
  185|    608|                let or3 = or1.or(or2);
  186|    608|                if or3.movemask_will_have_non_zero() {
  187|     63|                    let mask = eqa.movemask();
  188|     63|                    if mask.has_non_zero() {
  189|      8|                        return Some(cur.add(topos(mask)));
  190|     55|                    }
  191|     55|
  192|     55|                    let mask = eqb.movemask();
  193|     55|                    if mask.has_non_zero() {
  194|     23|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     32|                    }
  196|     32|
  197|     32|                    let mask = eqc.movemask();
  198|     32|                    if mask.has_non_zero() {
  199|     15|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     17|                    }
  201|     17|
  202|     17|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     17|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    545|                }
  206|    545|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.99k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  6.68k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  2.94k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     54|                return Some(cur);
  216|  2.89k|            }
  217|  2.89k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  3.74k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  3.54k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  3.54k|            return self.search_chunk(cur, topos);
  228|    196|        }
  229|    196|        None
  230|  3.90k|    }
_RINvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  3.06k|    unsafe fn search_chunk(
  417|  3.06k|        &self,
  418|  3.06k|        cur: *const u8,
  419|  3.06k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  3.06k|    ) -> Option<*const u8> {
  421|  3.06k|        let chunk = V::load_unaligned(cur);
  422|  3.06k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  3.06k|        if mask.has_non_zero() {
  424|     82|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.98k|            None
  427|       |        }
  428|  3.06k|    }
_RINvMNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  10.3k|    unsafe fn search_chunk(
  417|  10.3k|        &self,
  418|  10.3k|        cur: *const u8,
  419|  10.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  10.3k|    ) -> Option<*const u8> {
  421|  10.3k|        let chunk = V::load_unaligned(cur);
  422|  10.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  10.3k|        if mask.has_non_zero() {
  424|    130|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  10.2k|            None
  427|       |        }
  428|  10.3k|    }
_RNvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE3newBa_:
  450|  1.56M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.56M|        Two {
  452|  1.56M|            s1: needle1,
  453|  1.56M|            s2: needle2,
  454|  1.56M|            v1: V::splat(needle1),
  455|  1.56M|            v2: V::splat(needle2),
  456|  1.56M|        }
  457|  1.56M|    }
_RNvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iE3newBa_:
  450|  1.56M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.56M|        Two {
  452|  1.56M|            s1: needle1,
  453|  1.56M|            s2: needle2,
  454|  1.56M|            v1: V::splat(needle1),
  455|  1.56M|            v2: V::splat(needle2),
  456|  1.56M|        }
  457|  1.56M|    }
_RNvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  2.22M|    pub(crate) fn needle1(&self) -> u8 {
  462|  2.22M|        self.s1
  463|  2.22M|    }
_RNvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  2.19M|    pub(crate) fn needle2(&self) -> u8 {
  468|  2.19M|        self.s2
  469|  2.19M|    }
_RNvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  45.8k|    pub(crate) unsafe fn find_raw(
  494|  45.8k|        &self,
  495|  45.8k|        start: *const u8,
  496|  45.8k|        end: *const u8,
  497|  45.8k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  45.8k|        let topos = V::Mask::first_offset;
  505|  45.8k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  45.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  13.7k|            return Some(cur);
  517|  32.0k|        }
  518|  32.0k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  32.0k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  32.0k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  32.0k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  43.5k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  12.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    901|                return Some(cur);
  554|  11.4k|            }
  555|  11.4k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  31.1k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  29.2k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  29.2k|            return self.search_chunk(cur, topos);
  566|  1.89k|        }
  567|  1.89k|        None
  568|  45.8k|    }
_RNvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  87.5k|    pub(crate) unsafe fn find_raw(
  494|  87.5k|        &self,
  495|  87.5k|        start: *const u8,
  496|  87.5k|        end: *const u8,
  497|  87.5k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  87.5k|        let topos = V::Mask::first_offset;
  505|  87.5k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  87.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  42.3k|            return Some(cur);
  517|  45.2k|        }
  518|  45.2k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  45.2k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  45.2k|        if len >= Self::LOOP_SIZE {
  522|  92.7k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  72.8k|                let a = V::load_aligned(cur);
  526|  72.8k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  72.8k|                let eqa1 = self.v1.cmpeq(a);
  528|  72.8k|                let eqb1 = self.v1.cmpeq(b);
  529|  72.8k|                let eqa2 = self.v2.cmpeq(a);
  530|  72.8k|                let eqb2 = self.v2.cmpeq(b);
  531|  72.8k|                let or1 = eqa1.or(eqb1);
  532|  72.8k|                let or2 = eqa2.or(eqb2);
  533|  72.8k|                let or3 = or1.or(or2);
  534|  72.8k|                if or3.movemask_will_have_non_zero() {
  535|  1.22k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  1.22k|                    if mask.has_non_zero() {
  537|    524|                        return Some(cur.add(topos(mask)));
  538|    699|                    }
  539|    699|
  540|    699|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|    699|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  71.6k|                }
  544|  71.6k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  24.0k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  62.4k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  19.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    859|                return Some(cur);
  554|  18.5k|            }
  555|  18.5k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  43.1k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  41.8k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  41.8k|            return self.search_chunk(cur, topos);
  566|  1.26k|        }
  567|  1.26k|        None
  568|  87.5k|    }
_RINvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  87.4k|    unsafe fn search_chunk(
  671|  87.4k|        &self,
  672|  87.4k|        cur: *const u8,
  673|  87.4k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  87.4k|    ) -> Option<*const u8> {
  675|  87.4k|        let chunk = V::load_unaligned(cur);
  676|  87.4k|        let eq1 = self.v1.cmpeq(chunk);
  677|  87.4k|        let eq2 = self.v2.cmpeq(chunk);
  678|  87.4k|        let mask = eq1.or(eq2).movemask();
  679|  87.4k|        if mask.has_non_zero() {
  680|  17.4k|            let mask1 = eq1.movemask();
  681|  17.4k|            let mask2 = eq2.movemask();
  682|  17.4k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  70.0k|            None
  685|       |        }
  686|  87.4k|    }
_RINvMs_NtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   148k|    unsafe fn search_chunk(
  671|   148k|        &self,
  672|   148k|        cur: *const u8,
  673|   148k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   148k|    ) -> Option<*const u8> {
  675|   148k|        let chunk = V::load_unaligned(cur);
  676|   148k|        let eq1 = self.v1.cmpeq(chunk);
  677|   148k|        let eq2 = self.v2.cmpeq(chunk);
  678|   148k|        let mask = eq1.or(eq2).movemask();
  679|   148k|        if mask.has_non_zero() {
  680|  47.3k|            let mask1 = eq1.movemask();
  681|  47.3k|            let mask2 = eq2.movemask();
  682|  47.3k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   101k|            None
  685|       |        }
  686|   148k|    }
_RINvNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  3.70k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  3.70k|    start: *const u8,
 1150|  3.70k|    end: *const u8,
 1151|  3.70k|    confirm: F,
 1152|  3.70k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  3.70k|    let mut ptr = start;
 1155|  28.0k|    while ptr < end {
 1156|  24.4k|        if confirm(*ptr) {
 1157|     43|            return Some(ptr);
 1158|  24.3k|        }
 1159|  24.3k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.66k|    None
 1162|  3.70k|}
_RINvNtNtNtCs4fanAGkIP7w_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  1.13M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.13M|    start: *const u8,
 1150|  1.13M|    end: *const u8,
 1151|  1.13M|    confirm: F,
 1152|  1.13M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  1.13M|    let mut ptr = start;
 1155|  3.31M|    while ptr < end {
 1156|  2.22M|        if confirm(*ptr) {
 1157|  39.7k|            return Some(ptr);
 1158|  2.18M|        }
 1159|  2.18M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.09M|    None
 1162|  1.13M|}

_RNvMNtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  9.39k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  9.39k|        One {
   71|  9.39k|            sse2: generic::One::new(needle),
   72|  9.39k|            avx2: generic::One::new(needle),
   73|  9.39k|        }
   74|  9.39k|    }
_RNvMNtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  9.39k|    pub unsafe fn find_raw(
  180|  9.39k|        &self,
  181|  9.39k|        start: *const u8,
  182|  9.39k|        end: *const u8,
  183|  9.39k|    ) -> Option<*const u8> {
  184|  9.39k|        if start >= end {
  185|    389|            return None;
  186|  9.00k|        }
  187|  9.00k|        let len = end.distance(start);
  188|  9.00k|        if len < __m256i::BYTES {
  189|  5.10k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  3.70k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  3.70k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  1.39k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  3.90k|        }
  201|  3.90k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  3.90k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  3.90k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  3.90k|        // responsibility.
  205|  3.90k|        //
  206|  3.90k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  3.90k|        // means we'd have to annotate this routine with `target_feature`.
  208|  3.90k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  3.90k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  3.90k|        // The real problem is that a routine with a `target_feature`
  211|  3.90k|        // annotation generally can't be inlined into caller code unless
  212|  3.90k|        // the caller code has the same target feature annotations. Namely,
  213|  3.90k|        // the common case (at time of writing) is for calling code to not
  214|  3.90k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  3.90k|        // `target_feature` on this routine, it can be inlined which will
  216|  3.90k|        // handle some of the short-haystack cases above without touching the
  217|  3.90k|        // architecture specific code.
  218|  3.90k|        self.find_raw_avx2(start, end)
  219|  9.39k|    }
_RNCNvMNtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  24.4k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  24.4k|                    b == self.sse2.needle1()
  194|  24.4k|                })
_RNvMNtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  1.39k|    unsafe fn find_raw_sse2(
  337|  1.39k|        &self,
  338|  1.39k|        start: *const u8,
  339|  1.39k|        end: *const u8,
  340|  1.39k|    ) -> Option<*const u8> {
  341|  1.39k|        self.sse2.find_raw(start, end)
  342|  1.39k|    }
_RNvMNtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  3.90k|    unsafe fn find_raw_avx2(
  397|  3.90k|        &self,
  398|  3.90k|        start: *const u8,
  399|  3.90k|        end: *const u8,
  400|  3.90k|    ) -> Option<*const u8> {
  401|  3.90k|        self.avx2.find_raw(start, end)
  402|  3.90k|    }
_RNvMs2_NtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.56M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.56M|        Two {
  558|  1.56M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.56M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.56M|        }
  561|  1.56M|    }
_RNvMs2_NtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.56M|    pub unsafe fn find_raw(
  655|  1.56M|        &self,
  656|  1.56M|        start: *const u8,
  657|  1.56M|        end: *const u8,
  658|  1.56M|    ) -> Option<*const u8> {
  659|  1.56M|        if start >= end {
  660|   298k|            return None;
  661|  1.27M|        }
  662|  1.27M|        let len = end.distance(start);
  663|  1.27M|        if len < __m256i::BYTES {
  664|  1.18M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  1.13M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  1.13M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  45.8k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  87.5k|        }
  676|  87.5k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  87.5k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  87.5k|        // enough to run on the vector routine. Pointer validity is caller's
  679|  87.5k|        // responsibility.
  680|  87.5k|        //
  681|  87.5k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  87.5k|        // means we'd have to annotate this routine with `target_feature`.
  683|  87.5k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  87.5k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  87.5k|        // The real problem is that a routine with a `target_feature`
  686|  87.5k|        // annotation generally can't be inlined into caller code unless
  687|  87.5k|        // the caller code has the same target feature annotations. Namely,
  688|  87.5k|        // the common case (at time of writing) is for calling code to not
  689|  87.5k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  87.5k|        // `target_feature` on this routine, it can be inlined which will
  691|  87.5k|        // handle some of the short-haystack cases above without touching the
  692|  87.5k|        // architecture specific code.
  693|  87.5k|        self.find_raw_avx2(start, end)
  694|  1.56M|    }
_RNCNvMs2_NtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  2.22M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  2.22M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  2.22M|                })
_RNvMs2_NtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  45.8k|    unsafe fn find_raw_sse2(
  765|  45.8k|        &self,
  766|  45.8k|        start: *const u8,
  767|  45.8k|        end: *const u8,
  768|  45.8k|    ) -> Option<*const u8> {
  769|  45.8k|        self.sse2.find_raw(start, end)
  770|  45.8k|    }
_RNvMs2_NtNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  87.5k|    unsafe fn find_raw_avx2(
  805|  87.5k|        &self,
  806|  87.5k|        start: *const u8,
  807|  87.5k|        end: *const u8,
  808|  87.5k|    ) -> Option<*const u8> {
  809|  87.5k|        self.avx2.find_raw(start, end)
  810|  87.5k|    }

_RNvNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.56M|pub(crate) fn memchr2_raw(
  221|  1.56M|    n1: u8,
  222|  1.56M|    n2: u8,
  223|  1.56M|    start: *const u8,
  224|  1.56M|    end: *const u8,
  225|  1.56M|) -> Option<*const u8> {
  226|  1.56M|    // SAFETY: We provide a valid function pointer type.
  227|  1.56M|    unsafe_ifunc!(
  228|  1.56M|        Two,
  229|  1.56M|        find_raw,
  230|  1.56M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.56M|        Option<*const u8>,
  232|  1.56M|        start,
  233|  1.56M|        end,
  234|  1.56M|        n1,
  235|  1.56M|        n2
  236|  1.56M|    )
  237|  1.56M|}
_RNvNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_646memchr10memchr_raw:
  174|  9.39k|pub(crate) fn memchr_raw(
  175|  9.39k|    n1: u8,
  176|  9.39k|    start: *const u8,
  177|  9.39k|    end: *const u8,
  178|  9.39k|) -> Option<*const u8> {
  179|  9.39k|    // SAFETY: We provide a valid function pointer type.
  180|  9.39k|    unsafe_ifunc!(
  181|  9.39k|        One,
  182|  9.39k|        find_raw,
  183|  9.39k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  9.39k|        Option<*const u8>,
  185|  9.39k|        start,
  186|  9.39k|        end,
  187|  9.39k|        n1
  188|  9.39k|    )
  189|  9.39k|}
_RNvNvNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  9.39k|        unsafe fn find_avx2(
   79|  9.39k|            $($needle: u8),+,
   80|  9.39k|            $hay_start: *const u8,
   81|  9.39k|            $hay_end: *const u8,
   82|  9.39k|        ) -> $retty {
   83|  9.39k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  9.39k|            $memchrty::new_unchecked($($needle),+)
   85|  9.39k|                .$memchrfind($hay_start, $hay_end)
   86|  9.39k|        }
_RNvNvNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.56M|        unsafe fn find_avx2(
   79|  1.56M|            $($needle: u8),+,
   80|  1.56M|            $hay_start: *const u8,
   81|  1.56M|            $hay_end: *const u8,
   82|  1.56M|        ) -> $retty {
   83|  1.56M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.56M|            $memchrty::new_unchecked($($needle),+)
   85|  1.56M|                .$memchrfind($hay_start, $hay_end)
   86|  1.56M|        }
_RNvNvNtNtNtCs4fanAGkIP7w_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCs4fanAGkIP7w_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  1.59M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  1.59M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  1.59M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  1.59M|    }
_RNvXNtCs4fanAGkIP7w_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  82.4k|    fn as_usize(self) -> usize {
   27|  82.4k|        self as usize
   28|  82.4k|    }

_RNvMs2_NtCs4fanAGkIP7w_6memchr6memchrNtB5_7Memchr23newCsibMRFqTCw42_5oxttl:
  377|  1.32M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  1.32M|        Memchr2 {
  379|  1.32M|            needle1,
  380|  1.32M|            needle2,
  381|  1.32M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  1.32M|        }
  383|  1.32M|    }
_RNvNtCs4fanAGkIP7w_6memchr6memchr11memchr2_rawCsibMRFqTCw42_5oxttl:
  574|  1.56M|unsafe fn memchr2_raw(
  575|  1.56M|    needle1: u8,
  576|  1.56M|    needle2: u8,
  577|  1.56M|    start: *const u8,
  578|  1.56M|    end: *const u8,
  579|  1.56M|) -> Option<*const u8> {
  580|  1.56M|    #[cfg(target_arch = "x86_64")]
  581|  1.56M|    {
  582|  1.56M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.56M|    }
  584|  1.56M|    #[cfg(target_arch = "wasm32")]
  585|  1.56M|    {
  586|  1.56M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.56M|    }
  588|  1.56M|    #[cfg(target_arch = "aarch64")]
  589|  1.56M|    {
  590|  1.56M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.56M|    }
  592|  1.56M|    #[cfg(not(any(
  593|  1.56M|        target_arch = "x86_64",
  594|  1.56M|        target_arch = "wasm32",
  595|  1.56M|        target_arch = "aarch64"
  596|  1.56M|    )))]
  597|  1.56M|    {
  598|  1.56M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.56M|            .find_raw(start, end)
  600|  1.56M|    }
  601|  1.56M|}
_RNvNtCs4fanAGkIP7w_6memchr6memchr12memchr2_iterCsibMRFqTCw42_5oxttl:
  232|  1.32M|pub fn memchr2_iter<'h>(
  233|  1.32M|    needle1: u8,
  234|  1.32M|    needle2: u8,
  235|  1.32M|    haystack: &'h [u8],
  236|  1.32M|) -> Memchr2<'h> {
  237|  1.32M|    Memchr2::new(needle1, needle2, haystack)
  238|  1.32M|}
_RNvNtCs4fanAGkIP7w_6memchr6memchr6memchrCsibMRFqTCw42_5oxttl:
   27|  9.39k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  9.39k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  9.39k|    // pointer between start and end.
   30|  9.39k|    unsafe {
   31|  9.39k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  9.39k|        })
   34|  9.39k|    }
   35|  9.39k|}
_RNvNtCs4fanAGkIP7w_6memchr6memchr7memchr2CsibMRFqTCw42_5oxttl:
   92|   239k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   239k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   239k|    // pointer between start and end.
   95|   239k|    unsafe {
   96|   239k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   239k|        })
   99|   239k|    }
  100|   239k|}
_RNvXs3_NtCs4fanAGkIP7w_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4nextCsibMRFqTCw42_5oxttl:
  390|  1.32M|    fn next(&mut self) -> Option<usize> {
  391|  1.32M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  1.32M|        // pointers returns will fall within the start and end bounds, and this
  393|  1.32M|        // upholds the safety contract of `self.it.next`.
  394|  1.32M|        unsafe {
  395|  1.32M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  1.32M|        }
  397|  1.32M|    }
_RNCNvNtCs4fanAGkIP7w_6memchr6memchr7memchr20CsibMRFqTCw42_5oxttl:
   96|   239k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   239k|            memchr2_raw(needle1, needle2, start, end)
   98|   239k|        })
_RNCNvXs3_NtCs4fanAGkIP7w_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4next0CsibMRFqTCw42_5oxttl:
  395|  1.32M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs4fanAGkIP7w_6memchr6memchr6memchr0B5_:
   31|  9.39k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  9.39k|            memchr_raw(needle, start, end)
   33|  9.39k|        })
_RNvNtCs4fanAGkIP7w_6memchr6memchr10memchr_rawB3_:
  504|  9.39k|unsafe fn memchr_raw(
  505|  9.39k|    needle: u8,
  506|  9.39k|    start: *const u8,
  507|  9.39k|    end: *const u8,
  508|  9.39k|) -> Option<*const u8> {
  509|  9.39k|    #[cfg(target_arch = "x86_64")]
  510|  9.39k|    {
  511|  9.39k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  9.39k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  9.39k|        // time. This function also handles using a fallback if neither AVX2
  514|  9.39k|        // nor SSE2 (unusual) are available.
  515|  9.39k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  9.39k|    }
  517|  9.39k|    #[cfg(target_arch = "wasm32")]
  518|  9.39k|    {
  519|  9.39k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  9.39k|    }
  521|  9.39k|    #[cfg(target_arch = "aarch64")]
  522|  9.39k|    {
  523|  9.39k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  9.39k|    }
  525|  9.39k|    #[cfg(not(any(
  526|  9.39k|        target_arch = "x86_64",
  527|  9.39k|        target_arch = "wasm32",
  528|  9.39k|        target_arch = "aarch64"
  529|  9.39k|    )))]
  530|  9.39k|    {
  531|  9.39k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  9.39k|    }
  533|  9.39k|}

_RNvYNtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtNtCs4fanAGkIP7w_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  73.4k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  73.4k|        self.movemask().has_non_zero()
   67|  73.4k|    }
_RNvMNtCs4fanAGkIP7w_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  66.3k|    fn get_for_offset(self) -> u32 {
  129|  66.3k|        #[cfg(target_endian = "big")]
  130|  66.3k|        {
  131|  66.3k|            self.0.swap_bytes()
  132|  66.3k|        }
  133|  66.3k|        #[cfg(target_endian = "little")]
  134|  66.3k|        {
  135|  66.3k|            self.0
  136|  66.3k|        }
  137|  66.3k|    }
_RNvXs_NtCs4fanAGkIP7w_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   324k|    fn has_non_zero(self) -> bool {
  149|   324k|        self.0 != 0
  150|   324k|    }
_RNvXs_NtCs4fanAGkIP7w_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  66.3k|    fn first_offset(self) -> usize {
  174|  66.3k|        // We are dealing with little endian here (and if we aren't, we swap
  175|  66.3k|        // the bytes so we are in practice), where the most significant byte
  176|  66.3k|        // is at a higher address. That means the least significant bit that
  177|  66.3k|        // is set corresponds to the position of our first matching byte.
  178|  66.3k|        // That position corresponds to the number of zeros after the least
  179|  66.3k|        // significant bit.
  180|  66.3k|        self.get_for_offset().trailing_zeros() as usize
  181|  66.3k|    }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86sse2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   125k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   125k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   125k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86avx2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   331k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   331k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   331k|        }
_RNvXs_NtCs4fanAGkIP7w_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  66.7k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  66.7k|        SensibleMoveMask(self.0 | other.0)
  165|  66.7k|    }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86sse2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  3.14M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  3.14M|            _mm_set1_epi8(byte as i8)
  212|  3.14M|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86sse2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  90.5k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  90.5k|            _mm_loadu_si128(data as *const __m128i)
  222|  90.5k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86sse2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   177k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   177k|            _mm_cmpeq_epi8(self, vector2)
  232|   177k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86sse2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  87.4k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  87.4k|            _mm_or_si128(self, vector2)
  242|  87.4k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86avx2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  3.14M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  3.14M|            _mm256_set1_epi8(byte as i8)
  262|  3.14M|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86avx2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   148k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   148k|            _mm256_load_si256(data as *const __m256i)
  267|   148k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86avx2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   159k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   159k|            _mm256_loadu_si256(data as *const __m256i)
  272|   159k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86avx2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   601k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   601k|            _mm256_cmpeq_epi8(self, vector2)
  282|   601k|        }
_RNvXNtNtCs4fanAGkIP7w_6memchr6vector7x86avx2NtNtNtCs3enrnThfs6H_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   369k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   369k|            _mm256_or_si256(self, vector2)
  292|   369k|        }

_RNvMs2_NtCs6nwz1C93WHf_9once_cell3impINtB5_8OnceCellNtNtCsbqtYJIZlK4w_5alloc6string6StringE14is_initializedCssYmL8WCiQ9_13libfuzzer_sys:
   49|  4.93k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  4.93k|        // An `Acquire` load is enough because that makes all the initialization
   51|  4.93k|        // operations visible to us, and, this being a fast path, weaker
   52|  4.93k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  4.93k|        // `SeqCst` operations on the slow path.
   54|  4.93k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  4.93k|    }

_RNvMs4_NtCs6nwz1C93WHf_9once_cell4syncINtB5_8OnceCellNtNtCsbqtYJIZlK4w_5alloc6string6StringE3getCssYmL8WCiQ9_13libfuzzer_sys:
  963|  4.93k|        pub fn get(&self) -> Option<&T> {
  964|  4.93k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  4.93k|                None
  969|       |            }
  970|  4.93k|        }

_RNvMCs37iYxXZFtSz_10oxilangtagINtB2_11LanguageTagReE10into_innerCsibMRFqTCw42_5oxttl:
   54|  6.91k|    pub fn into_inner(self) -> T {
   55|  6.91k|        self.tag
   56|  6.91k|    }
_RNvMCs37iYxXZFtSz_10oxilangtagINtB2_11LanguageTagReE5parseCsibMRFqTCw42_5oxttl:
   41|  9.26k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  9.26k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  6.91k|        Ok(Self { tag, positions })
   44|  9.26k|    }
_RNvXsE_Cs37iYxXZFtSz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs3enrnThfs6H_4core7default7Default7defaultCsibMRFqTCw42_5oxttl:
  547|  9.26k|#[derive(Default)]
_RINvCs37iYxXZFtSz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECse77hlhKzJ8Y_5oxrdf:
  621|  8.79k|fn parse_langtag(
  622|  8.79k|    input: &str,
  623|  8.79k|    output: &mut impl OutputBuffer,
  624|  8.79k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  8.79k|    #[derive(PartialEq, Eq)]
  626|  8.79k|    enum State {
  627|  8.79k|        Start,
  628|  8.79k|        AfterLanguage,
  629|  8.79k|        AfterExtLang,
  630|  8.79k|        AfterScript,
  631|  8.79k|        AfterRegion,
  632|  8.79k|        InExtension { expected: bool },
  633|  8.79k|        InPrivateUse { expected: bool },
  634|  8.79k|    }
  635|  8.79k|
  636|  8.79k|    let mut state = State::Start;
  637|  8.79k|    let mut language_end = 0;
  638|  8.79k|    let mut extlang_end = 0;
  639|  8.79k|    let mut script_end = 0;
  640|  8.79k|    let mut region_end = 0;
  641|  8.79k|    let mut variant_end = 0;
  642|  8.79k|    let mut extension_end = 0;
  643|  8.79k|    let mut extlangs_count = 0;
  644|  12.1k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  12.1k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  12.1k|        }
  650|  12.1k|        if subtag.len() > 8 {
  651|    377|            return Err(LanguageTagParseError {
  652|    377|                kind: TagParseErrorKind::SubtagTooLong,
  653|    377|            });
  654|  11.7k|        }
  655|  11.7k|        if state == State::Start {
  656|       |            // Primary language
  657|  8.43k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  1.16k|                return Err(LanguageTagParseError {
  659|  1.16k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  1.16k|                });
  661|  7.27k|            }
  662|  7.27k|            language_end = end;
  663|  7.27k|            output.extend(to_lowercase(subtag));
  664|  7.27k|            if subtag.len() < 4 {
  665|  2.05k|                // extlangs are only allowed for short language tags
  666|  2.05k|                state = State::AfterLanguage;
  667|  5.22k|            } else {
  668|  5.22k|                state = State::AfterExtLang;
  669|  5.22k|            }
  670|  3.35k|        } else if let State::InPrivateUse { .. } = state {
  671|    140|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    140|            }
  676|    140|            output.push('-');
  677|    140|            output.extend(to_lowercase(subtag));
  678|    140|            state = State::InPrivateUse { expected: false };
  679|  3.21k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    422|            if let State::InExtension { expected: true } = state {
  682|    225|                return Err(LanguageTagParseError {
  683|    225|                    kind: TagParseErrorKind::EmptyExtension,
  684|    225|                });
  685|    197|            }
  686|    197|            output.push('-');
  687|    197|            output.push('x');
  688|    197|            state = State::InPrivateUse { expected: true };
  689|  2.78k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|    729|            if let State::InExtension { expected: true } = state {
  692|    146|                return Err(LanguageTagParseError {
  693|    146|                    kind: TagParseErrorKind::EmptyExtension,
  694|    146|                });
  695|    583|            }
  696|    583|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|    583|            output.push('-');
  698|    583|            output.push(extension_tag);
  699|    583|            state = State::InExtension { expected: true };
  700|  2.05k|        } else if let State::InExtension { .. } = state {
  701|    119|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|    119|            }
  706|    119|            extension_end = end;
  707|    119|            output.push('-');
  708|    119|            output.extend(to_lowercase(subtag));
  709|    119|            state = State::InExtension { expected: false };
  710|  1.94k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    265|            extlangs_count += 1;
  712|    265|            if extlangs_count > 3 {
  713|     24|                return Err(LanguageTagParseError {
  714|     24|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|     24|                });
  716|    241|            }
  717|    241|            // valid extlangs
  718|    241|            extlang_end = end;
  719|    241|            output.push('-');
  720|    241|            output.extend(to_lowercase(subtag));
  721|  1.67k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  1.00k|            && subtag.len() == 4
  723|    615|            && is_alphabetic(subtag)
  724|    615|        {
  725|    615|            // Script
  726|    615|            script_end = end;
  727|    615|            output.push('-');
  728|    615|            output.extend(to_uppercase_first(subtag));
  729|    615|            state = State::AfterScript;
  730|  1.06k|        } else if (state == State::AfterLanguage
  731|    791|            || state == State::AfterExtLang
  732|    667|            || state == State::AfterScript)
  733|    906|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    661|                || subtag.len() == 3 && is_numeric(subtag))
  735|    245|        {
  736|    245|            // Region
  737|    245|            region_end = end;
  738|    245|            output.push('-');
  739|    245|            output.extend(to_uppercase(subtag));
  740|    245|            state = State::AfterRegion;
  741|    815|        } else if (state == State::AfterLanguage
  742|    706|            || state == State::AfterExtLang
  743|    649|            || state == State::AfterScript
  744|    154|            || state == State::AfterRegion)
  745|    815|            && is_alphanumeric(subtag)
  746|    815|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    207|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|    608|        {
  749|    608|            // Variant
  750|    608|            variant_end = end;
  751|    608|            output.push('-');
  752|    608|            output.extend(to_lowercase(subtag));
  753|    608|            state = State::AfterRegion;
  754|    608|        } else {
  755|    207|            return Err(LanguageTagParseError {
  756|    207|                kind: TagParseErrorKind::InvalidSubtag,
  757|    207|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  6.65k|    if let State::InExtension { expected: true } = state {
  763|    148|        return Err(LanguageTagParseError {
  764|    148|            kind: TagParseErrorKind::EmptyExtension,
  765|    148|        });
  766|  6.50k|    }
  767|  6.50k|    if let State::InPrivateUse { expected: true } = state {
  768|     58|        return Err(LanguageTagParseError {
  769|     58|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|     58|        });
  771|  6.44k|    }
  772|  6.44k|
  773|  6.44k|    //We make sure we have not skipped anyone
  774|  6.44k|    if extlang_end < language_end {
  775|  6.29k|        extlang_end = language_end;
  776|  6.29k|    }
  777|  6.44k|    if script_end < extlang_end {
  778|  5.97k|        script_end = extlang_end;
  779|  5.97k|    }
  780|  6.44k|    if region_end < script_end {
  781|  6.27k|        region_end = script_end;
  782|  6.27k|    }
  783|  6.44k|    if variant_end < region_end {
  784|  5.89k|        variant_end = region_end;
  785|  5.89k|    }
  786|  6.44k|    if extension_end < variant_end {
  787|  6.40k|        extension_end = variant_end;
  788|  6.40k|    }
  789|       |
  790|  6.44k|    Ok(TagElementsPositions {
  791|  6.44k|        language_end,
  792|  6.44k|        extlang_end,
  793|  6.44k|        script_end,
  794|  6.44k|        region_end,
  795|  6.44k|        variant_end,
  796|  6.44k|        extension_end,
  797|  6.44k|    })
  798|  8.79k|}
_RINvCs37iYxXZFtSz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECse77hlhKzJ8Y_5oxrdf:
  576|  9.26k|fn parse_language_tag(
  577|  9.26k|    input: &str,
  578|  9.26k|    output: &mut impl OutputBuffer,
  579|  9.26k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  9.26k|    if let Some(tag) = GRANDFATHEREDS
  582|  9.26k|        .iter()
  583|  9.26k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  9.26k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    469|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    469|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|    469|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    469|            Ok(TagElementsPositions {
  607|    469|                language_end: input.len(),
  608|    469|                extlang_end: input.len(),
  609|    469|                script_end: input.len(),
  610|    469|                region_end: input.len(),
  611|    469|                variant_end: input.len(),
  612|    469|                extension_end: input.len(),
  613|    469|            })
  614|       |        }
  615|       |    } else {
  616|  8.79k|        parse_langtag(input, output)
  617|       |    }
  618|  9.26k|}
_RINvXsr_Cs37iYxXZFtSz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs3enrnThfs6H_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECse77hlhKzJ8Y_5oxrdf:
  560|    469|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs37iYxXZFtSz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs3enrnThfs6H_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECse77hlhKzJ8Y_5oxrdf:
  560|  8.38k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs37iYxXZFtSz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs3enrnThfs6H_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECse77hlhKzJ8Y_5oxrdf:
  560|    245|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs37iYxXZFtSz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs3enrnThfs6H_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECse77hlhKzJ8Y_5oxrdf:
  560|    615|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs37iYxXZFtSz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cse77hlhKzJ8Y_5oxrdf:
  583|   240k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs37iYxXZFtSz_10oxilangtag10is_numericCse77hlhKzJ8Y_5oxrdf:
  865|    198|fn is_numeric(s: &str) -> bool {
  866|    198|    s.chars().all(|x| x.is_ascii_digit())
  867|    198|}
_RNvCs37iYxXZFtSz_10oxilangtag12to_lowercaseCse77hlhKzJ8Y_5oxrdf:
  892|  8.38k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  8.38k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  8.38k|}
_RNvCs37iYxXZFtSz_10oxilangtag12to_uppercaseCse77hlhKzJ8Y_5oxrdf:
  880|    245|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|    245|    s.chars().map(|c| c.to_ascii_uppercase())
  882|    245|}
_RNvCs37iYxXZFtSz_10oxilangtag13is_alphabeticCse77hlhKzJ8Y_5oxrdf:
  860|  9.01k|fn is_alphabetic(s: &str) -> bool {
  861|  9.01k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  9.01k|}
_RNvCs37iYxXZFtSz_10oxilangtag15is_alphanumericCse77hlhKzJ8Y_5oxrdf:
  870|  1.80k|fn is_alphanumeric(s: &str) -> bool {
  871|  1.80k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  1.80k|}
_RNvCs37iYxXZFtSz_10oxilangtag18to_uppercase_firstCse77hlhKzJ8Y_5oxrdf:
  886|    615|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    615|    let mut chars = s.chars();
  888|    615|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    615|}
_RNvCs37iYxXZFtSz_10oxilangtag23is_alphanumeric_or_dashCse77hlhKzJ8Y_5oxrdf:
  875|    469|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    469|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    469|}
_RNvMsv_Cs37iYxXZFtSz_10oxilangtagNtB5_14SubTagIterator3newCse77hlhKzJ8Y_5oxrdf:
  839|  8.79k|    fn new(input: &'a str) -> Self {
  840|  8.79k|        Self {
  841|  8.79k|            split: input.split('-'),
  842|  8.79k|            position: 0,
  843|  8.79k|        }
  844|  8.79k|    }
_RNvXs_NvCs37iYxXZFtSz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqCse77hlhKzJ8Y_5oxrdf:
  625|  21.0k|    #[derive(PartialEq, Eq)]
_RNvXsq_Cs37iYxXZFtSz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCse77hlhKzJ8Y_5oxrdf:
  552|  3.52k|    fn push(&mut self, _: char) {}
_RNvXsw_Cs37iYxXZFtSz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4nextCse77hlhKzJ8Y_5oxrdf:
  851|  18.8k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  18.8k|        let tag = self.split.next()?;
  853|  12.1k|        let tag_end = self.position + tag.len();
  854|  12.1k|        self.position = tag_end + 1;
  855|  12.1k|        Some((tag, tag_end))
  856|  18.8k|    }
_RNvXso_Cs37iYxXZFtSz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs3enrnThfs6H_4core3fmt7Display3fmt:
  482|  2.34k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  2.34k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|    519|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|     58|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    207|            TagParseErrorKind::InvalidSubtag => write!(
  494|    207|                f,
  495|    207|                "A subtag fails to parse, it does not match any other subtags"
  496|    207|            ),
  497|  1.16k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    377|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|     24|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  2.34k|    }
_RNCNvCs37iYxXZFtSz_10oxilangtag13is_alphabetic0B3_:
  861|  38.9k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs37iYxXZFtSz_10oxilangtag10is_numeric0B3_:
  866|    198|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs37iYxXZFtSz_10oxilangtag15is_alphanumeric0B3_:
  871|  6.48k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCs37iYxXZFtSz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  16.7k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_CshZH4L1BJXsw_5oxiriNtNtCsbqtYJIZlK4w_5alloc6string6StringNtB5_12OutputBuffer3lenCsibMRFqTCw42_5oxttl:
 1137|  33.0k|    fn len(&self) -> usize {
 1138|  33.0k|        self.len()
 1139|  33.0k|    }
_RNvXsZ_CshZH4L1BJXsw_5oxiriNtNtCsbqtYJIZlK4w_5alloc6string6StringNtB5_12OutputBuffer4pushCsibMRFqTCw42_5oxttl:
 1117|   154k|    fn push(&mut self, c: char) {
 1118|   154k|        self.push(c);
 1119|   154k|    }
_RNvXsZ_CshZH4L1BJXsw_5oxiriNtNtCsbqtYJIZlK4w_5alloc6string6StringNtB5_12OutputBuffer5clearCsibMRFqTCw42_5oxttl:
 1127|  1.70k|    fn clear(&mut self) {
 1128|  1.70k|        self.clear();
 1129|  1.70k|    }
_RNvXsZ_CshZH4L1BJXsw_5oxiriNtNtCsbqtYJIZlK4w_5alloc6string6StringNtB5_12OutputBuffer6as_strCsibMRFqTCw42_5oxttl:
 1142|  24.1k|    fn as_str(&self) -> &str {
 1143|  24.1k|        self.as_str()
 1144|  24.1k|    }
_RNvXsZ_CshZH4L1BJXsw_5oxiriNtNtCsbqtYJIZlK4w_5alloc6string6StringNtB5_12OutputBuffer8push_strCsibMRFqTCw42_5oxttl:
 1122|  14.4k|    fn push_str(&mut self, s: &str) {
 1123|  14.4k|        self.push_str(s);
 1124|  14.4k|    }
_RNvXsZ_CshZH4L1BJXsw_5oxiriNtNtCsbqtYJIZlK4w_5alloc6string6StringNtB5_12OutputBuffer8truncateCsibMRFqTCw42_5oxttl:
 1132|  10.9k|    fn truncate(&mut self, new_len: usize) {
 1133|  10.9k|        self.truncate(new_len);
 1134|  10.9k|    }
_RINvMs11_CshZH4L1BJXsw_5oxiriINtB7_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E11parse_erroruECsibMRFqTCw42_5oxttl:
 1567|  5.33k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  5.33k|        Err(IriParseError { kind })
 1569|  5.33k|    }
_RNCNvMs11_CshZH4L1BJXsw_5oxiriINtB8_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E10read_echar0CsibMRFqTCw42_5oxttl:
 1550|  1.17k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CshZH4L1BJXsw_5oxiriINtB8_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E10read_echars_0CsibMRFqTCw42_5oxttl:
 1551|    475|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE15parse_uncheckedCsibMRFqTCw42_5oxttl:
   71|  3.20k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|  3.20k|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|  3.20k|        Ok(Self { iri, positions })
   74|  3.20k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE4pathCsibMRFqTCw42_5oxttl:
  264|  2.40k|    pub fn path(&self) -> &str {
  265|  2.40k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  266|  2.40k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE6as_refCsibMRFqTCw42_5oxttl:
  160|  16.3k|    pub fn as_ref(&self) -> IriRef<&str> {
  161|  16.3k|        IriRef {
  162|  16.3k|            iri: &self.iri,
  163|  16.3k|            positions: self.positions,
  164|  16.3k|        }
  165|  16.3k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE7resolveCsibMRFqTCw42_5oxttl:
   89|  16.3k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|  16.3k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|  16.3k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|  10.9k|        Ok(IriRef {
   93|  10.9k|            iri: target_buffer,
   94|  10.9k|            positions,
   95|  10.9k|        })
   96|  16.3k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCsibMRFqTCw42_5oxttl:
 1366|  2.20k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  2.20k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  17.7k|            loop {
 1398|  17.7k|                let c = self.input.next();
 1399|  17.7k|                match c {
 1400|       |                    Some(':') => {
 1401|    343|                        self.output.push(':');
 1402|    343|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  1.86k|                        self.output_positions.authority_end = self.output.len();
 1406|  1.86k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  15.5k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  2.20k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCsibMRFqTCw42_5oxttl:
 1457|  2.44k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  12.6k|        loop {
 1459|  12.6k|            let c = self.input.next();
 1460|  12.6k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  3.09k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  3.09k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  3.09k|                    } else if c == Some('/') {
 1470|    658|                        self.output.push('/');
 1471|  2.44k|                    }
 1472|       |
 1473|  3.09k|                    if c == Some('?') {
 1474|    459|                        self.output_positions.path_end = self.output.len();
 1475|    459|                        self.output.push('?');
 1476|    459|                        return self.parse_query();
 1477|  2.64k|                    } else if c == Some('#') {
 1478|    291|                        self.output_positions.path_end = self.output.len();
 1479|    291|                        self.output_positions.query_end = self.output.len();
 1480|    291|                        self.output.push('#');
 1481|    291|                        return self.parse_fragment();
 1482|  2.34k|                    } else if c.is_none() {
 1483|  1.69k|                        self.output_positions.path_end = self.output.len();
 1484|  1.69k|                        self.output_positions.query_end = self.output.len();
 1485|  1.69k|                        return Ok(());
 1486|    658|                    }
 1487|       |                }
 1488|  9.54k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  2.44k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCsibMRFqTCw42_5oxttl:
 1414|    343|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|    479|        loop {
 1416|    479|            let c = self.input.next();
 1417|    374|            match c {
 1418|    374|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    343|                    self.output_positions.authority_end = self.output.len();
 1421|    343|                    return self.parse_path_start(c);
 1422|       |                }
 1423|      0|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    343|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCsibMRFqTCw42_5oxttl:
 1493|    598|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  4.27k|        while let Some(c) = self.input.next() {
 1495|  3.76k|            if c == '#' {
 1496|     89|                self.output_positions.query_end = self.output.len();
 1497|     89|                self.output.push('#');
 1498|     89|                return self.parse_fragment();
 1499|       |            } else {
 1500|  3.67k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    509|        self.output_positions.query_end = self.output.len();
 1504|    509|        Ok(())
 1505|    598|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCsibMRFqTCw42_5oxttl:
 1220|  3.20k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  14.7k|        loop {
 1222|  14.7k|            let c = self.input.next();
 1223|  14.7k|            match c {
 1224|  14.7k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  11.5k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  3.20k|                    self.output.push(':');
 1229|  3.20k|                    self.output_positions.scheme_end = self.output.len();
 1230|  3.20k|                    self.input_scheme_end = self.input.position;
 1231|  3.20k|                    return if self.input.starts_with('/') {
 1232|  2.34k|                        self.input.next();
 1233|  2.34k|                        self.output.push('/');
 1234|  2.34k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|    864|                        self.output_positions.authority_end = self.output.len();
 1237|    864|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  3.20k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCsibMRFqTCw42_5oxttl:
 1507|    581|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  3.79k|        while let Some(c) = self.input.next() {
 1509|  3.21k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    581|        Ok(())
 1512|    581|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCsibMRFqTCw42_5oxttl:
 1342|  2.20k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  18.0k|        loop {
 1345|  18.0k|            let c = self.input.next();
 1346|  18.0k|            match c {
 1347|       |                Some('@') => {
 1348|     45|                    self.output.push('@');
 1349|     45|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  2.16k|                    self.input = ParserInput {
 1353|  2.16k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  2.16k|                        position: self.input_scheme_end + 2,
 1355|  2.16k|                    };
 1356|  2.16k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  2.16k|                    return self.parse_host();
 1358|       |                }
 1359|  15.8k|                Some(c) => {
 1360|  15.8k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  2.20k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCsibMRFqTCw42_5oxttl:
 1428|  2.20k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  2.20k|        match c {
 1430|       |            None => {
 1431|    425|                self.output_positions.path_end = self.output.len();
 1432|    425|                self.output_positions.query_end = self.output.len();
 1433|    425|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    139|                self.output_positions.path_end = self.output.len();
 1437|    139|                self.output.push('?');
 1438|    139|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    201|                self.output_positions.path_end = self.output.len();
 1442|    201|                self.output_positions.query_end = self.output.len();
 1443|    201|                self.output.push('#');
 1444|    201|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  1.44k|                self.output.push('/');
 1448|  1.44k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  2.20k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCsibMRFqTCw42_5oxttl:
 1212|  3.20k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  3.20k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  3.20k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  3.20k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCsibMRFqTCw42_5oxttl:
 1252|  2.34k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  2.34k|        if self.input.starts_with('/') {
 1254|  2.20k|            self.input.next();
 1255|  2.20k|            self.output.push('/');
 1256|  2.20k|            self.parse_authority()
 1257|       |        } else {
 1258|    136|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    136|            self.parse_path()
 1260|       |        }
 1261|  2.34k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCsibMRFqTCw42_5oxttl:
 1523|  44.1k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  44.1k|        if UNCHECKED || is_url_code_point(c) {
 1525|  44.1k|            self.output.push(c);
 1526|  44.1k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  44.1k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCsibMRFqTCw42_5oxttl:
 1535|  3.67k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  3.67k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  3.67k|            self.output.push(c);
 1538|  3.67k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  3.67k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCsibMRFqTCw42_5oxttl:
 1187|  3.20k|    fn parse(
 1188|  3.20k|        iri: &'a str,
 1189|  3.20k|        base: Option<IriRef<&'a str>>,
 1190|  3.20k|        output: &'a mut O,
 1191|  3.20k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  3.20k|        let mut parser = Self {
 1193|  3.20k|            iri,
 1194|  3.20k|            base,
 1195|  3.20k|            input: ParserInput {
 1196|  3.20k|                value: iri.chars(),
 1197|  3.20k|                position: 0,
 1198|  3.20k|            },
 1199|  3.20k|            output,
 1200|  3.20k|            output_positions: IriElementsPositions {
 1201|  3.20k|                scheme_end: 0,
 1202|  3.20k|                authority_end: 0,
 1203|  3.20k|                path_end: 0,
 1204|  3.20k|                query_end: 0,
 1205|  3.20k|            },
 1206|  3.20k|            input_scheme_end: 0,
 1207|  3.20k|        };
 1208|  3.20k|        parser.parse_scheme_start()?;
 1209|  3.20k|        Ok(parser.output_positions)
 1210|  3.20k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E10parse_hostCsibMRFqTCw42_5oxttl:
 1366|  4.68k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  4.68k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|    449|            let start_position = self.input.position;
 1370|  5.37k|            while let Some(c) = self.input.next() {
 1371|  5.06k|                self.output.push(c);
 1372|  5.06k|                if c == ']' {
 1373|    136|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|    136|                    if !UNCHECKED {
 1375|    136|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|    136|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  4.93k|                }
 1393|       |            }
 1394|    313|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  15.0k|            loop {
 1398|  15.0k|                let c = self.input.next();
 1399|  15.0k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.43k|                        self.output.push(':');
 1402|  1.43k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  2.59k|                        self.output_positions.authority_end = self.output.len();
 1406|  2.59k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  11.0k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  4.68k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E10parse_pathCsibMRFqTCw42_5oxttl:
 1457|  9.45k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  55.5k|        loop {
 1459|  55.5k|            let c = self.input.next();
 1460|  55.5k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  8.77k|                    if self.output.as_str().ends_with("/..") {
 1463|    129|                        self.remove_last_segment();
 1464|    129|                        self.remove_last_segment();
 1465|    129|                        self.output.push('/');
 1466|  8.64k|                    } else if self.output.as_str().ends_with("/.") {
 1467|    349|                        self.remove_last_segment();
 1468|    349|                        self.output.push('/');
 1469|  8.29k|                    } else if c == Some('/') {
 1470|  1.86k|                        self.output.push('/');
 1471|  6.43k|                    }
 1472|       |
 1473|  8.77k|                    if c == Some('?') {
 1474|  1.04k|                        self.output_positions.path_end = self.output.len();
 1475|  1.04k|                        self.output.push('?');
 1476|  1.04k|                        return self.parse_query();
 1477|  7.72k|                    } else if c == Some('#') {
 1478|    844|                        self.output_positions.path_end = self.output.len();
 1479|    844|                        self.output_positions.query_end = self.output.len();
 1480|    844|                        self.output.push('#');
 1481|    844|                        return self.parse_fragment();
 1482|  6.88k|                    } else if c.is_none() {
 1483|  5.00k|                        self.output_positions.path_end = self.output.len();
 1484|  5.00k|                        self.output_positions.query_end = self.output.len();
 1485|  5.00k|                        return Ok(());
 1486|  1.88k|                    }
 1487|       |                }
 1488|  46.7k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  9.45k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E10parse_portCsibMRFqTCw42_5oxttl:
 1414|  1.43k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  2.13k|        loop {
 1416|  2.13k|            let c = self.input.next();
 1417|  1.83k|            match c {
 1418|  1.83k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    884|                    self.output_positions.authority_end = self.output.len();
 1421|    884|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    554|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.43k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E10read_echarCsibMRFqTCw42_5oxttl:
 1547|  1.29k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.29k|        let c1 = self.input.next();
 1549|  1.29k|        let c2 = self.input.next();
 1550|  1.29k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|    475|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|    375|            self.output.push('%');
 1554|    375|            self.output.push(c1.unwrap());
 1555|    375|            self.output.push(c2.unwrap());
 1556|    375|            Ok(())
 1557|       |        } else {
 1558|    924|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|    924|                Some('%'),
 1560|    924|                c1,
 1561|    924|                c2,
 1562|    924|            ]))
 1563|       |        }
 1564|  1.29k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E11parse_queryCsibMRFqTCw42_5oxttl:
 1493|  2.14k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  14.8k|        while let Some(c) = self.input.next() {
 1495|  13.4k|            if c == '#' {
 1496|    140|                self.output_positions.query_end = self.output.len();
 1497|    140|                self.output.push('#');
 1498|    140|                return self.parse_fragment();
 1499|       |            } else {
 1500|  13.3k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.39k|        self.output_positions.query_end = self.output.len();
 1504|  1.39k|        Ok(())
 1505|  2.14k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E12parse_schemeCsibMRFqTCw42_5oxttl:
 1220|  3.56k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  23.1k|        loop {
 1222|  23.1k|            let c = self.input.next();
 1223|  22.8k|            match c {
 1224|  22.8k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  19.5k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  1.85k|                    self.output.push(':');
 1229|  1.85k|                    self.output_positions.scheme_end = self.output.len();
 1230|  1.85k|                    self.input_scheme_end = self.input.position;
 1231|  1.85k|                    return if self.input.starts_with('/') {
 1232|    356|                        self.input.next();
 1233|    356|                        self.output.push('/');
 1234|    356|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  1.49k|                        self.output_positions.authority_end = self.output.len();
 1237|  1.49k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  1.70k|                    self.input = ParserInput {
 1242|  1.70k|                        value: self.iri.chars(),
 1243|  1.70k|                        position: 0,
 1244|  1.70k|                    }; // reset
 1245|  1.70k|                    self.output.clear();
 1246|  1.70k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  3.56k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E14parse_fragmentCsibMRFqTCw42_5oxttl:
 1507|  2.07k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  18.1k|        while let Some(c) = self.input.next() {
 1509|  16.7k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  1.41k|        Ok(())
 1512|  2.07k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E14parse_relativeCsibMRFqTCw42_5oxttl:
 1263|  14.4k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  14.4k|        if let Some(base) = self.base {
 1265|  14.4k|            match self.input.front() {
 1266|       |                None => {
 1267|  1.17k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  1.17k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  1.17k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  1.17k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  1.17k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  1.17k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  5.94k|                    self.input.next();
 1276|  5.94k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|    776|                    self.input.next();
 1280|    776|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|    776|                    self.output.push('?');
 1282|    776|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|    776|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|    776|                    self.output_positions.path_end = base.positions.path_end;
 1285|    776|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|    406|                    self.input.next();
 1289|    406|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|    406|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|    406|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|    406|                    self.output_positions.path_end = base.positions.path_end;
 1293|    406|                    self.output_positions.query_end = base.positions.query_end;
 1294|    406|                    self.output.push('#');
 1295|    406|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  6.10k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  6.10k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  6.10k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  6.10k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  6.10k|                    self.remove_last_segment();
 1303|  6.10k|                    if self.output.len() > base.positions.scheme_end {
 1304|  5.54k|                        // We have some path or authority, we keep a base '/'
 1305|  5.54k|                        self.output.push('/');
 1306|  5.54k|                    }
 1307|  6.10k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  14.4k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E15parse_authorityCsibMRFqTCw42_5oxttl:
 1342|  4.91k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  21.6k|        loop {
 1345|  21.6k|            let c = self.input.next();
 1346|  21.6k|            match c {
 1347|       |                Some('@') => {
 1348|    400|                    self.output.push('@');
 1349|    400|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  4.28k|                    self.input = ParserInput {
 1353|  4.28k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  4.28k|                        position: self.input_scheme_end + 2,
 1355|  4.28k|                    };
 1356|  4.28k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  4.28k|                    return self.parse_host();
 1358|       |                }
 1359|  16.9k|                Some(c) => {
 1360|  16.9k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  4.91k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E16parse_path_startCsibMRFqTCw42_5oxttl:
 1428|  3.47k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  3.47k|        match c {
 1430|       |            None => {
 1431|  2.00k|                self.output_positions.path_end = self.output.len();
 1432|  2.00k|                self.output_positions.query_end = self.output.len();
 1433|  2.00k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    322|                self.output_positions.path_end = self.output.len();
 1437|    322|                self.output.push('?');
 1438|    322|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    682|                self.output_positions.path_end = self.output.len();
 1442|    682|                self.output_positions.query_end = self.output.len();
 1443|    682|                self.output.push('#');
 1444|    682|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|    470|                self.output.push('/');
 1448|    470|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  3.47k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E18parse_scheme_startCsibMRFqTCw42_5oxttl:
 1212|  16.3k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  16.3k|        match self.input.front() {
 1214|     57|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  15.0k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  12.6k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  16.3k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E19remove_last_segmentCsibMRFqTCw42_5oxttl:
 1514|  6.70k|    fn remove_last_segment(&mut self) {
 1515|  6.70k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  6.70k|            .rfind('/')
 1517|  6.70k|            .unwrap_or(0);
 1518|  6.70k|        self.output
 1519|  6.70k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  6.70k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E20parse_relative_slashCsibMRFqTCw42_5oxttl:
 1324|  5.94k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  5.94k|        if self.input.starts_with('/') {
 1326|  4.77k|            self.input.next();
 1327|  4.77k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  4.77k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  4.77k|            self.output.push('/');
 1330|  4.77k|            self.output.push('/');
 1331|  4.77k|            self.parse_authority()
 1332|       |        } else {
 1333|  1.17k|            self.output
 1334|  1.17k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  1.17k|            self.output.push('/');
 1336|  1.17k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  1.17k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  1.17k|            self.parse_path()
 1339|       |        }
 1340|  5.94k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E23parse_path_or_authorityCsibMRFqTCw42_5oxttl:
 1252|    356|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|    356|        if self.input.starts_with('/') {
 1254|    138|            self.input.next();
 1255|    138|            self.output.push('/');
 1256|    138|            self.parse_authority()
 1257|       |        } else {
 1258|    218|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    218|            self.parse_path()
 1260|       |        }
 1261|    356|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCsibMRFqTCw42_5oxttl:
 1523|  91.4k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  91.4k|        if UNCHECKED || is_url_code_point(c) {
 1525|  87.5k|            self.output.push(c);
 1526|  87.5k|            Ok(())
 1527|  3.96k|        } else if c == '%' {
 1528|  1.00k|            self.read_echar()
 1529|       |        } else {
 1530|  2.96k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  91.4k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCsibMRFqTCw42_5oxttl:
 1535|  13.3k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  13.3k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  12.6k|            self.output.push(c);
 1538|  12.6k|            Ok(())
 1539|    678|        } else if c == '%' {
 1540|    299|            self.read_echar()
 1541|       |        } else {
 1542|    379|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  13.3k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtNtCsbqtYJIZlK4w_5alloc6string6StringKb0_E5parseCsibMRFqTCw42_5oxttl:
 1187|  16.3k|    fn parse(
 1188|  16.3k|        iri: &'a str,
 1189|  16.3k|        base: Option<IriRef<&'a str>>,
 1190|  16.3k|        output: &'a mut O,
 1191|  16.3k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  16.3k|        let mut parser = Self {
 1193|  16.3k|            iri,
 1194|  16.3k|            base,
 1195|  16.3k|            input: ParserInput {
 1196|  16.3k|                value: iri.chars(),
 1197|  16.3k|                position: 0,
 1198|  16.3k|            },
 1199|  16.3k|            output,
 1200|  16.3k|            output_positions: IriElementsPositions {
 1201|  16.3k|                scheme_end: 0,
 1202|  16.3k|                authority_end: 0,
 1203|  16.3k|                path_end: 0,
 1204|  16.3k|                query_end: 0,
 1205|  16.3k|            },
 1206|  16.3k|            input_scheme_end: 0,
 1207|  16.3k|        };
 1208|  16.3k|        parser.parse_scheme_start()?;
 1209|  10.9k|        Ok(parser.output_positions)
 1210|  16.3k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE15parse_uncheckedCsibMRFqTCw42_5oxttl:
  574|  3.20k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|  3.20k|        IriRef::parse_unchecked(iri)?.try_into()
  576|  3.20k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE4pathCsibMRFqTCw42_5oxttl:
  730|  2.40k|    pub fn path(&self) -> &str {
  731|  2.40k|        self.0.path()
  732|  2.40k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE7resolveCsibMRFqTCw42_5oxttl:
  591|  16.3k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|  16.3k|        Ok(Iri(self.0.resolve(iri)?))
  593|  16.3k|    }
_RNvXsL_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringENtNtCs3enrnThfs6H_4core3fmt7Display3fmtCsibMRFqTCw42_5oxttl:
  909|  4.63k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  910|  4.63k|        self.0.fmt(f)
  911|  4.63k|    }
_RNvXsg_CshZH4L1BJXsw_5oxiriINtB5_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringENtNtCs3enrnThfs6H_4core3fmt7Display3fmtCsibMRFqTCw42_5oxttl:
  423|  4.63k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  424|  4.63k|        self.iri.fmt(f)
  425|  4.63k|    }
_RNvCshZH4L1BJXsw_5oxiri17is_url_code_pointCsibMRFqTCw42_5oxttl:
 1573|   104k|fn is_url_code_point(c: char) -> bool {
 1574|   104k|    matches!(c,
 1575|  28.1k|        'a'..='z'
 1576|  20.5k|        | 'A'..='Z'
 1577|  46.9k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  7.98k|        | '\u{A0}'..='\u{D7FF}'
 1598|  1.20k|        | '\u{F900}'..='\u{FDCF}'
 1599|  1.20k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  1.20k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  1.20k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  1.20k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  1.20k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  1.20k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  1.20k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  1.20k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  1.20k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  1.20k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  1.20k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  1.20k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  1.20k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|  1.20k|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   104k|}
_RNvCshZH4L1BJXsw_5oxiri23is_url_query_code_pointCsibMRFqTCw42_5oxttl:
 1618|  13.3k|fn is_url_query_code_point(c: char) -> bool {
 1619|  13.3k|    is_url_code_point(c)
 1620|    724|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  13.3k|}
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput11starts_withCsibMRFqTCw42_5oxttl:
 1169|  20.5k|    fn starts_with(&self, c: char) -> bool {
 1170|  20.5k|        self.value.as_str().starts_with(c)
 1171|  20.5k|    }
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput4nextCsibMRFqTCw42_5oxttl:
 1154|   247k|    fn next(&mut self) -> Option<char> {
 1155|   247k|        if let Some(head) = self.value.next() {
 1156|   230k|            self.position += head.len_utf8();
 1157|   230k|            Some(head)
 1158|       |        } else {
 1159|  16.6k|            None
 1160|       |        }
 1161|   247k|    }
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput5frontCsibMRFqTCw42_5oxttl:
 1164|  33.9k|    fn front(&self) -> Option<char> {
 1165|  33.9k|        self.value.clone().next()
 1166|  33.9k|    }
_RNvXs1b_CshZH4L1BJXsw_5oxiriNtB6_16VoidOutputBufferNtNtCs3enrnThfs6H_4core7default7Default7defaultCsibMRFqTCw42_5oxttl:
 1078|  3.20k|#[derive(Default)]
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsibMRFqTCw42_5oxttl:
 1105|  12.8k|    fn len(&self) -> usize {
 1106|  12.8k|        self.len
 1107|  12.8k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsibMRFqTCw42_5oxttl:
 1085|  70.9k|    fn push(&mut self, c: char) {
 1086|  70.9k|        self.len += c.len_utf8();
 1087|  70.9k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsibMRFqTCw42_5oxttl:
 1110|  6.19k|    fn as_str(&self) -> &str {
 1111|  6.19k|        ""
 1112|  6.19k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsibMRFqTCw42_5oxttl:
 1100|  2.16k|    fn truncate(&mut self, new_len: usize) {
 1101|  2.16k|        self.len = new_len;
 1102|  2.16k|    }
_RINvMs11_CshZH4L1BJXsw_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECse77hlhKzJ8Y_5oxrdf:
 1567|    547|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|    547|        Err(IriParseError { kind })
 1569|    547|    }
_RNCNvMs11_CshZH4L1BJXsw_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cse77hlhKzJ8Y_5oxrdf:
 1550|    275|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CshZH4L1BJXsw_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cse77hlhKzJ8Y_5oxrdf:
 1551|    201|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE10into_innerCse77hlhKzJ8Y_5oxrdf:
  191|  10.9k|    pub fn into_inner(self) -> T {
  192|  10.9k|        self.iri
  193|  10.9k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE11is_absoluteCse77hlhKzJ8Y_5oxrdf:
  205|  8.14k|    pub fn is_absolute(&self) -> bool {
  206|  8.14k|        self.positions.scheme_end != 0
  207|  8.14k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE5parseCse77hlhKzJ8Y_5oxrdf:
   58|  4.93k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  4.93k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  4.93k|        Ok(Self { iri, positions })
   61|  4.93k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefReE11is_absoluteCse77hlhKzJ8Y_5oxrdf:
  205|  3.23k|    pub fn is_absolute(&self) -> bool {
  206|  3.23k|        self.positions.scheme_end != 0
  207|  3.23k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefReE5parseCse77hlhKzJ8Y_5oxrdf:
   58|  3.77k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  3.77k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  3.23k|        Ok(Self { iri, positions })
   61|  3.77k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCse77hlhKzJ8Y_5oxrdf:
 1366|  7.37k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  7.37k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|      0|            let start_position = self.input.position;
 1370|      0|            while let Some(c) = self.input.next() {
 1371|      0|                self.output.push(c);
 1372|      0|                if c == ']' {
 1373|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      0|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  71.2k|            loop {
 1398|  71.2k|                let c = self.input.next();
 1399|  71.2k|                match c {
 1400|       |                    Some(':') => {
 1401|  1.16k|                        self.output.push(':');
 1402|  1.16k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  6.20k|                        self.output_positions.authority_end = self.output.len();
 1406|  6.20k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  63.8k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  7.37k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCse77hlhKzJ8Y_5oxrdf:
 1457|  6.88k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  21.0k|        loop {
 1459|  21.0k|            let c = self.input.next();
 1460|  21.0k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  7.15k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  7.15k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  7.15k|                    } else if c == Some('/') {
 1470|    328|                        self.output.push('/');
 1471|  6.83k|                    }
 1472|       |
 1473|  7.15k|                    if c == Some('?') {
 1474|    326|                        self.output_positions.path_end = self.output.len();
 1475|    326|                        self.output.push('?');
 1476|    326|                        return self.parse_query();
 1477|  6.83k|                    } else if c == Some('#') {
 1478|    150|                        self.output_positions.path_end = self.output.len();
 1479|    150|                        self.output_positions.query_end = self.output.len();
 1480|    150|                        self.output.push('#');
 1481|    150|                        return self.parse_fragment();
 1482|  6.68k|                    } else if c.is_none() {
 1483|  6.35k|                        self.output_positions.path_end = self.output.len();
 1484|  6.35k|                        self.output_positions.query_end = self.output.len();
 1485|  6.35k|                        return Ok(());
 1486|    328|                    }
 1487|       |                }
 1488|  13.8k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  6.88k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCse77hlhKzJ8Y_5oxrdf:
 1414|  1.16k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  1.73k|        loop {
 1416|  1.73k|            let c = self.input.next();
 1417|  1.43k|            match c {
 1418|  1.43k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    857|                    self.output_positions.authority_end = self.output.len();
 1421|    857|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    307|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  1.16k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCse77hlhKzJ8Y_5oxrdf:
 1547|    380|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|    380|        let c1 = self.input.next();
 1549|    380|        let c2 = self.input.next();
 1550|    380|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|    202|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|    150|            self.output.push('%');
 1554|    150|            self.output.push(c1.unwrap());
 1555|    150|            self.output.push(c2.unwrap());
 1556|    150|            Ok(())
 1557|       |        } else {
 1558|    230|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|    230|                Some('%'),
 1560|    230|                c1,
 1561|    230|                c2,
 1562|    230|            ]))
 1563|       |        }
 1564|    380|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCse77hlhKzJ8Y_5oxrdf:
 1493|    692|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  6.22k|        while let Some(c) = self.input.next() {
 1495|  5.72k|            if c == '#' {
 1496|     71|                self.output_positions.query_end = self.output.len();
 1497|     71|                self.output.push('#');
 1498|     71|                return self.parse_fragment();
 1499|       |            } else {
 1500|  5.65k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    499|        self.output_positions.query_end = self.output.len();
 1504|    499|        Ok(())
 1505|    692|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCse77hlhKzJ8Y_5oxrdf:
 1220|  8.71k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  41.4k|        loop {
 1222|  41.4k|            let c = self.input.next();
 1223|  41.4k|            match c {
 1224|  41.4k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  32.7k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  8.71k|                    self.output.push(':');
 1229|  8.71k|                    self.output_positions.scheme_end = self.output.len();
 1230|  8.71k|                    self.input_scheme_end = self.input.position;
 1231|  8.71k|                    return if self.input.starts_with('/') {
 1232|  7.45k|                        self.input.next();
 1233|  7.45k|                        self.output.push('/');
 1234|  7.45k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  1.25k|                        self.output_positions.authority_end = self.output.len();
 1237|  1.25k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  8.71k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCse77hlhKzJ8Y_5oxrdf:
 1507|    513|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  3.80k|        while let Some(c) = self.input.next() {
 1509|  3.34k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    460|        Ok(())
 1512|    513|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCse77hlhKzJ8Y_5oxrdf:
 1342|  7.38k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  74.1k|        loop {
 1345|  74.1k|            let c = self.input.next();
 1346|  74.1k|            match c {
 1347|       |                Some('@') => {
 1348|    128|                    self.output.push('@');
 1349|    128|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  7.24k|                    self.input = ParserInput {
 1353|  7.24k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  7.24k|                        position: self.input_scheme_end + 2,
 1355|  7.24k|                    };
 1356|  7.24k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  7.24k|                    return self.parse_host();
 1358|       |                }
 1359|  66.7k|                Some(c) => {
 1360|  66.7k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  7.38k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCse77hlhKzJ8Y_5oxrdf:
 1428|  7.06k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  7.06k|        match c {
 1430|       |            None => {
 1431|    852|                self.output_positions.path_end = self.output.len();
 1432|    852|                self.output_positions.query_end = self.output.len();
 1433|    852|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    366|                self.output_positions.path_end = self.output.len();
 1437|    366|                self.output.push('?');
 1438|    366|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    292|                self.output_positions.path_end = self.output.len();
 1442|    292|                self.output_positions.query_end = self.output.len();
 1443|    292|                self.output.push('#');
 1444|    292|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  5.55k|                self.output.push('/');
 1448|  5.55k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  7.06k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCse77hlhKzJ8Y_5oxrdf:
 1212|  8.71k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  8.71k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  8.71k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  8.71k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCse77hlhKzJ8Y_5oxrdf:
 1252|  7.45k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  7.45k|        if self.input.starts_with('/') {
 1254|  7.38k|            self.input.next();
 1255|  7.38k|            self.output.push('/');
 1256|  7.38k|            self.parse_authority()
 1257|       |        } else {
 1258|     73|            self.output_positions.authority_end = self.output.len() - 1;
 1259|     73|            self.parse_path()
 1260|       |        }
 1261|  7.45k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCse77hlhKzJ8Y_5oxrdf:
 1523|   147k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   147k|        if UNCHECKED || is_url_code_point(c) {
 1525|   147k|            self.output.push(c);
 1526|   147k|            Ok(())
 1527|    249|        } else if c == '%' {
 1528|    239|            self.read_echar()
 1529|       |        } else {
 1530|     10|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   147k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCse77hlhKzJ8Y_5oxrdf:
 1535|  5.65k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  5.65k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  5.51k|            self.output.push(c);
 1538|  5.51k|            Ok(())
 1539|    141|        } else if c == '%' {
 1540|    141|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  5.65k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCse77hlhKzJ8Y_5oxrdf:
 1187|  8.71k|    fn parse(
 1188|  8.71k|        iri: &'a str,
 1189|  8.71k|        base: Option<IriRef<&'a str>>,
 1190|  8.71k|        output: &'a mut O,
 1191|  8.71k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  8.71k|        let mut parser = Self {
 1193|  8.71k|            iri,
 1194|  8.71k|            base,
 1195|  8.71k|            input: ParserInput {
 1196|  8.71k|                value: iri.chars(),
 1197|  8.71k|                position: 0,
 1198|  8.71k|            },
 1199|  8.71k|            output,
 1200|  8.71k|            output_positions: IriElementsPositions {
 1201|  8.71k|                scheme_end: 0,
 1202|  8.71k|                authority_end: 0,
 1203|  8.71k|                path_end: 0,
 1204|  8.71k|                query_end: 0,
 1205|  8.71k|            },
 1206|  8.71k|            input_scheme_end: 0,
 1207|  8.71k|        };
 1208|  8.71k|        parser.parse_scheme_start()?;
 1209|  8.16k|        Ok(parser.output_positions)
 1210|  8.71k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE10into_innerCse77hlhKzJ8Y_5oxrdf:
  678|  10.9k|    pub fn into_inner(self) -> T {
  679|  10.9k|        self.0.into_inner()
  680|  10.9k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE5parseCse77hlhKzJ8Y_5oxrdf:
  562|  4.93k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  4.93k|        IriRef::parse(iri)?.try_into()
  564|  4.93k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriReE5parseCse77hlhKzJ8Y_5oxrdf:
  562|  3.77k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  3.77k|        IriRef::parse(iri)?.try_into()
  564|  3.77k|    }
_RNvXsV_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringEINtNtCs3enrnThfs6H_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCse77hlhKzJ8Y_5oxrdf:
  981|  8.14k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  8.14k|        if iri.is_absolute() {
  983|  8.14k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  8.14k|    }
_RNvXsV_CshZH4L1BJXsw_5oxiriINtB5_3IriReEINtNtCs3enrnThfs6H_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCse77hlhKzJ8Y_5oxrdf:
  981|  3.23k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  3.23k|        if iri.is_absolute() {
  983|  3.23k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  3.23k|    }
_RNvCshZH4L1BJXsw_5oxiri17is_url_code_pointCse77hlhKzJ8Y_5oxrdf:
 1573|   153k|fn is_url_code_point(c: char) -> bool {
 1574|   153k|    matches!(c,
 1575|   116k|        'a'..='z'
 1576|  3.88k|        | 'A'..='Z'
 1577|  21.3k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  2.74k|        | '\u{A0}'..='\u{D7FF}'
 1598|    419|        | '\u{F900}'..='\u{FDCF}'
 1599|    419|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    419|        | '\u{10000}'..='\u{1FFFD}'
 1601|    419|        | '\u{20000}'..='\u{2FFFD}'
 1602|    419|        | '\u{30000}'..='\u{3FFFD}'
 1603|    419|        | '\u{40000}'..='\u{4FFFD}'
 1604|    419|        | '\u{50000}'..='\u{5FFFD}'
 1605|    419|        | '\u{60000}'..='\u{6FFFD}'
 1606|    419|        | '\u{70000}'..='\u{7FFFD}'
 1607|    419|        | '\u{80000}'..='\u{8FFFD}'
 1608|    419|        | '\u{90000}'..='\u{9FFFD}'
 1609|    419|        | '\u{A0000}'..='\u{AFFFD}'
 1610|    419|        | '\u{B0000}'..='\u{BFFFD}'
 1611|    419|        | '\u{C0000}'..='\u{CFFFD}'
 1612|    419|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      1|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   153k|}
_RNvCshZH4L1BJXsw_5oxiri23is_url_query_code_pointCse77hlhKzJ8Y_5oxrdf:
 1618|  5.65k|fn is_url_query_code_point(c: char) -> bool {
 1619|  5.65k|    is_url_code_point(c)
 1620|    175|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  5.65k|}
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput11starts_withCse77hlhKzJ8Y_5oxrdf:
 1169|  23.5k|    fn starts_with(&self, c: char) -> bool {
 1170|  23.5k|        self.value.as_str().starts_with(c)
 1171|  23.5k|    }
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput4nextCse77hlhKzJ8Y_5oxrdf:
 1154|   235k|    fn next(&mut self) -> Option<char> {
 1155|   235k|        if let Some(head) = self.value.next() {
 1156|   225k|            self.position += head.len_utf8();
 1157|   225k|            Some(head)
 1158|       |        } else {
 1159|  9.43k|            None
 1160|       |        }
 1161|   235k|    }
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput5frontCse77hlhKzJ8Y_5oxrdf:
 1164|  8.71k|    fn front(&self) -> Option<char> {
 1165|  8.71k|        self.value.clone().next()
 1166|  8.71k|    }
_RNvXs1b_CshZH4L1BJXsw_5oxiriNtB6_16VoidOutputBufferNtNtCs3enrnThfs6H_4core7default7Default7defaultCse77hlhKzJ8Y_5oxrdf:
 1078|  8.71k|#[derive(Default)]
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCse77hlhKzJ8Y_5oxrdf:
 1105|  33.6k|    fn len(&self) -> usize {
 1106|  33.6k|        self.len
 1107|  33.6k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCse77hlhKzJ8Y_5oxrdf:
 1085|   218k|    fn push(&mut self, c: char) {
 1086|   218k|        self.len += c.len_utf8();
 1087|   218k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCse77hlhKzJ8Y_5oxrdf:
 1110|  14.3k|    fn as_str(&self) -> &str {
 1111|  14.3k|        ""
 1112|  14.3k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCse77hlhKzJ8Y_5oxrdf:
 1100|  7.24k|    fn truncate(&mut self, new_len: usize) {
 1101|  7.24k|        self.len = new_len;
 1102|  7.24k|    }
_RNvXsW_CshZH4L1BJXsw_5oxiriNtB5_13IriParseErrorNtNtCs3enrnThfs6H_4core3fmt7Display3fmt:
 1016|  5.87k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  5.87k|        match &self.kind {
 1018|     57|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|    313|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|    313|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|    136|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|    861|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  3.35k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  3.35k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  1.15k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  1.15k|                f,
 1029|  1.15k|                "Invalid IRI percent encoding '{}'",
 1030|  1.15k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  1.15k|            ),
 1032|       |        }
 1033|  5.87k|    }

_RNvMNtCskpyHVEFKLB2_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCsc7vzZlXzn9x_11rand_chacha:
   13|  1.53M|    pub fn new(xs: [W; 2]) -> Self {
   14|  1.53M|        x2(xs, PhantomData)
   15|  1.53M|    }
_RNvXsG_NtCskpyHVEFKLB2_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs3enrnThfs6H_4core3ops3bit6BitXor6bitxorCsc7vzZlXzn9x_11rand_chacha:
   22|   538k|            fn $fn(self, rhs: Self) -> Self::Output {
   23|   538k|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|   538k|            }
_RNvXsM_NtCskpyHVEFKLB2_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs3enrnThfs6H_4core3ops5arith9AddAssign10add_assignCsc7vzZlXzn9x_11rand_chacha:
   32|   538k|            fn $fn_assign(&mut self, rhs: Self) {
   33|   538k|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|   538k|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|   538k|            }
_RNvXs_NtCskpyHVEFKLB2_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Csc7vzZlXzn9x_11rand_chacha:
   42|   134k|        fn $fn(self) -> Self {
   43|   134k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   134k|        }
_RNvXs_NtCskpyHVEFKLB2_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Csc7vzZlXzn9x_11rand_chacha:
   42|   134k|        fn $fn(self) -> Self {
   43|   134k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   134k|        }
_RNvXs_NtCskpyHVEFKLB2_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Csc7vzZlXzn9x_11rand_chacha:
   42|   134k|        fn $fn(self) -> Self {
   43|   134k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   134k|        }
_RNvXs_NtCskpyHVEFKLB2_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Csc7vzZlXzn9x_11rand_chacha:
   42|   134k|        fn $fn(self) -> Self {
   43|   134k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   134k|        }
_RNvXsg_NtCskpyHVEFKLB2_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Csc7vzZlXzn9x_11rand_chacha:
  208|   134k|    fn shuffle_lane_words1230(self) -> Self {
  209|   134k|        Self::new([
  210|   134k|            self.0[0].shuffle_lane_words1230(),
  211|   134k|            self.0[1].shuffle_lane_words1230(),
  212|   134k|        ])
  213|   134k|    }
_RNvXsg_NtCskpyHVEFKLB2_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Csc7vzZlXzn9x_11rand_chacha:
  201|   134k|    fn shuffle_lane_words2301(self) -> Self {
  202|   134k|        Self::new([
  203|   134k|            self.0[0].shuffle_lane_words2301(),
  204|   134k|            self.0[1].shuffle_lane_words2301(),
  205|   134k|        ])
  206|   134k|    }
_RNvXsg_NtCskpyHVEFKLB2_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Csc7vzZlXzn9x_11rand_chacha:
  215|   134k|    fn shuffle_lane_words3012(self) -> Self {
  216|   134k|        Self::new([
  217|   134k|            self.0[0].shuffle_lane_words3012(),
  218|   134k|            self.0[1].shuffle_lane_words3012(),
  219|   134k|        ])
  220|   134k|    }

_RINvYINtNtCskpyHVEFKLB2_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECsc7vzZlXzn9x_11rand_chacha:
  259|     88|    fn read_le<V>(self, input: &[u8]) -> V
  260|     88|    where
  261|     88|        V: StoreBytes,
  262|     88|    {
  263|     88|        unsafe { V::unsafe_read_le(input) }
  264|     88|    }
_RINvYINtNtCskpyHVEFKLB2_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECsc7vzZlXzn9x_11rand_chacha:
  251|  11.2k|    fn vec<V, A>(self, a: A) -> V
  252|  11.2k|    where
  253|  11.2k|        V: MultiLane<A>,
  254|  11.2k|    {
  255|  11.2k|        V::from_lanes(a)
  256|  11.2k|    }
_RINvYINtNtCskpyHVEFKLB2_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECsc7vzZlXzn9x_11rand_chacha:
  246|   101k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   101k|        unsafe { V::unpack(s) }
  248|   101k|    }
_RINvYINtNtCskpyHVEFKLB2_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECsc7vzZlXzn9x_11rand_chacha:
  246|  11.2k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  11.2k|        unsafe { V::unpack(s) }
  248|  11.2k|    }

_RNvXNtCskpyHVEFKLB2_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCsc7vzZlXzn9x_11rand_chacha:
   64|     44|    unsafe fn instance() -> Self {
   65|     44|        SseMachine(PhantomData)
   66|     44|    }
_RNvXs_NtCskpyHVEFKLB2_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCsc7vzZlXzn9x_11rand_chacha:
   92|  11.2k|    unsafe fn instance() -> Self {
   93|  11.2k|        Avx2Machine(PhantomData)
   94|  11.2k|    }
_RNvNtCsc7vzZlXzn9x_11rand_chacha4guts11refill_wide:
  250|  11.2k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  11.2k|            #[inline(always)]
  252|  11.2k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  11.2k|            use std::arch::x86_64::*;
  254|  11.2k|            #[target_feature(enable = "avx2")]
  255|  11.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  11.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  11.2k|                _mm256_zeroupper();
  258|  11.2k|                ret
  259|  11.2k|            }
  260|  11.2k|            #[target_feature(enable = "avx")]
  261|  11.2k|            #[target_feature(enable = "sse4.1")]
  262|  11.2k|            #[target_feature(enable = "ssse3")]
  263|  11.2k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  11.2k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  11.2k|                _mm256_zeroupper();
  266|  11.2k|                ret
  267|  11.2k|            }
  268|  11.2k|            #[target_feature(enable = "sse4.1")]
  269|  11.2k|            #[target_feature(enable = "ssse3")]
  270|  11.2k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  11.2k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  11.2k|            }
  273|  11.2k|            #[target_feature(enable = "ssse3")]
  274|  11.2k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  11.2k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  11.2k|            }
  277|  11.2k|            #[target_feature(enable = "sse2")]
  278|  11.2k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  11.2k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  11.2k|            }
  281|  11.2k|            unsafe {
  282|  11.2k|                if is_x86_feature_detected!("avx2") {
  283|  11.2k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  11.2k|        }
_RNvNvNtCsc7vzZlXzn9x_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  11.2k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  11.2k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  11.2k|                _mm256_zeroupper();
  258|  11.2k|                ret
  259|  11.2k|            }
_RNvNtCsc7vzZlXzn9x_11rand_chacha4guts11init_chacha:
  333|     44|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|     44|            #[inline(always)]
  335|     44|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|     44|            use std::arch::x86_64::*;
  337|     44|            #[target_feature(enable = "avx")]
  338|     44|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     44|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     44|            }
  341|     44|            #[target_feature(enable = "sse2")]
  342|     44|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|     44|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|     44|            }
  345|     44|            unsafe {
  346|     44|                if is_x86_feature_detected!("avx") {
  347|     44|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|     44|        }
_RNvNvNtCsc7vzZlXzn9x_11rand_chacha4guts11init_chacha8impl_avx:
  338|     44|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     44|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     44|            }
_RNvXs2_NtCskpyHVEFKLB2_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs3enrnThfs6H_4core7convert4FromAmj4_E4from:
  130|     44|    fn from(u32x4: [u32; 4]) -> Self {
  131|     44|        vec128_storage { u32x4 }
  132|     44|    }

_RNvMNtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCsc7vzZlXzn9x_11rand_chacha:
 1394|  4.15M|        fn new(x: __m256i) -> Self {
 1395|  4.15M|            Self { x, ni: PhantomData }
 1396|  4.15M|        }
_RNvMsZ_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCsc7vzZlXzn9x_11rand_chacha:
   64|   628k|            fn new(x: __m128i) -> Self {
   65|   628k|                $vec {
   66|   628k|                    x,
   67|   628k|                    s3: PhantomData,
   68|   628k|                    s4: PhantomData,
   69|   628k|                    ni: PhantomData,
   70|   628k|                }
   71|   628k|            }
_RNvXs0_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCsc7vzZlXzn9x_11rand_chacha:
 1402|  22.4k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  22.4k|            Self::new(p.avx)
 1404|  22.4k|        }
_RNvXs10_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCsc7vzZlXzn9x_11rand_chacha:
   79|     88|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|     88|                assert_eq!(input.len(), 16);
   81|     88|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|     88|            }
_RNvXs10_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCsc7vzZlXzn9x_11rand_chacha:
   89|   179k|            fn write_le(self, out: &mut [u8]) {
   90|   179k|                assert_eq!(out.len(), 16);
   91|   179k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   179k|            }
_RNvXs1R_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs3enrnThfs6H_4core3ops5arith3Add3addCsc7vzZlXzn9x_11rand_chacha:
   18|   179k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   179k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   179k|            }
_RNvXs2_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCsc7vzZlXzn9x_11rand_chacha:
 1439|  89.8k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  89.8k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  89.8k|        }
_RNvXs2_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCsc7vzZlXzn9x_11rand_chacha:
 1430|  89.8k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  89.8k|            unsafe {
 1432|  89.8k|                [
 1433|  89.8k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  89.8k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  89.8k|                ]
 1436|  89.8k|            }
 1437|  89.8k|        }
_RNvXs6_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCsc7vzZlXzn9x_11rand_chacha:
  331|  11.2k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  11.2k|        unsafe {
  333|  11.2k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  11.2k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  11.2k|            Self::new(x)
  336|  11.2k|        }
  337|  11.2k|    }
_RNvXs6_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCsc7vzZlXzn9x_11rand_chacha:
  323|  44.9k|    fn to_lanes(self) -> [u32; 4] {
  324|  44.9k|        unsafe {
  325|  44.9k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  44.9k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  44.9k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  44.9k|        }
  329|  44.9k|    }
_RNvXs6_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Csc7vzZlXzn9x_11rand_chacha:
 1470|   269k|            fn $name(self) -> Self {
 1471|   269k|                Self::new(unsafe {
 1472|   269k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   269k|                })
 1474|   269k|            }
_RNvXs6_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Csc7vzZlXzn9x_11rand_chacha:
 1480|   269k|            fn $name(self) -> Self {
 1481|   269k|                Self::new(unsafe {
 1482|   269k|                    _mm256_or_si256(
 1483|   269k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   269k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   269k|                    )
 1486|   269k|                })
 1487|   269k|            }
_RNvXs6_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Csc7vzZlXzn9x_11rand_chacha:
 1470|   269k|            fn $name(self) -> Self {
 1471|   269k|                Self::new(unsafe {
 1472|   269k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   269k|                })
 1474|   269k|            }
_RNvXs6_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Csc7vzZlXzn9x_11rand_chacha:
 1480|   269k|            fn $name(self) -> Self {
 1481|   269k|                Self::new(unsafe {
 1482|   269k|                    _mm256_or_si256(
 1483|   269k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   269k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   269k|                    )
 1486|   269k|                })
 1487|   269k|            }
_RNvXsX_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCsc7vzZlXzn9x_11rand_chacha:
   52|   101k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   101k|                Self::new(x.sse2)
   54|   101k|            }
_RNvXsc_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Csc7vzZlXzn9x_11rand_chacha:
 1582|   269k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   269k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   269k|        }
_RNvXsc_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Csc7vzZlXzn9x_11rand_chacha:
 1586|   269k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   269k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   269k|        }
_RNvXsc_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Csc7vzZlXzn9x_11rand_chacha:
 1590|   269k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   269k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   269k|        }
_RNvXse_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCsc7vzZlXzn9x_11rand_chacha:
 1602|  11.2k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  11.2k|            Self::new([
 1604|  11.2k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  11.2k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  11.2k|            ])
 1607|  11.2k|        }
_RNvXsf_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCsc7vzZlXzn9x_11rand_chacha:
 1617|  44.9k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  44.9k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  44.9k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  44.9k|            Self::new([ab, cd])
 1621|  44.9k|        }
_RNvXsf_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCsc7vzZlXzn9x_11rand_chacha:
 1611|  44.9k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  44.9k|            let [a, b] = self.0[0].to_lanes();
 1613|  44.9k|            let [c, d] = self.0[1].to_lanes();
 1614|  44.9k|            [a, b, c, d]
 1615|  44.9k|        }
_RNvXsl_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCsc7vzZlXzn9x_11rand_chacha:
  523|   157k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   157k|        Self::new(unsafe {
  525|   157k|            match i {
  526|  78.6k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  78.6k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   157k|    }
_RNvXsl_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCsc7vzZlXzn9x_11rand_chacha:
  519|  44.9k|    fn extract(self, i: u32) -> u32 {
  520|  44.9k|        self.to_lanes()[i as usize]
  521|  44.9k|    }
_RNvXsq_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs3enrnThfs6H_4core3ops5arith9AddAssign10add_assignCsc7vzZlXzn9x_11rand_chacha:
 1527|  1.07M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  1.07M|                    *self = self.$bin_fn(rhs);
 1529|  1.07M|                }
_RNvXsr_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs3enrnThfs6H_4core3ops3bit6BitXor6bitxorCsc7vzZlXzn9x_11rand_chacha:
 1543|  1.07M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  1.07M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  1.07M|                }
_RNvXsv_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs3enrnThfs6H_4core3ops5arith3Add3addCsc7vzZlXzn9x_11rand_chacha:
 1543|  1.07M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  1.07M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  1.07M|                }
_RNvXsY_NtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs3enrnThfs6H_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCsc7vzZlXzn9x_11rand_chacha:
   58|  11.3k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  11.3k|                vec128_storage { sse2: x.x }
   60|  11.3k|            }
_RNvXsj_NtNtNtCskpyHVEFKLB2_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs3enrnThfs6H_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCsc7vzZlXzn9x_11rand_chacha:
 1683|  11.2k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  11.2k|            Self {
 1685|  11.2k|                avx: [
 1686|  11.2k|                    vec256_storage { avx: x.0[0].x },
 1687|  11.2k|                    vec256_storage { avx: x.0[1].x },
 1688|  11.2k|                ],
 1689|  11.2k|            }
 1690|  11.2k|        }

_RINvXs2_NtNtCskRO9jcDHrIk_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsibMRFqTCw42_5oxttl:
   51|   179k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   179k|        // Use LE; we explicitly generate one value before the next.
   53|   179k|        let x = u128::from(rng.next_u64());
   54|   179k|        let y = u128::from(rng.next_u64());
   55|   179k|        (y << 64) | x
   56|   179k|    }

_RINvCskRO9jcDHrIk_4rand6randomoECsibMRFqTCw42_5oxttl:
  183|   179k|pub fn random<T>() -> T
  184|   179k|where Standard: Distribution<T> {
  185|   179k|    thread_rng().gen()
  186|   179k|}

_RINvYNtNtNtCskRO9jcDHrIk_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsibMRFqTCw42_5oxttl:
   93|   179k|    fn gen<T>(&mut self) -> T
   94|   179k|    where Standard: Distribution<T> {
   95|   179k|        Standard.sample(self)
   96|   179k|    }

_RNvXs_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngENtB24_7RngCore8next_u64CsibMRFqTCw42_5oxttl:
  124|   359k|    fn next_u64(&mut self) -> u64 {
  125|   359k|        self.0.next_u64()
  126|   359k|    }
_RNvMNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  11.2k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  11.2k|        let global_fork_counter = fork::get_fork_counter();
  175|  11.2k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|     43|            return self.reseed_and_generate(results, global_fork_counter);
  180|  11.1k|        }
  181|  11.1k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  11.1k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  11.1k|        self.inner.generate(results);
  184|  11.2k|    }
_RNvMs3_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngE6reseedBb_:
  219|     43|    fn reseed(&mut self) -> Result<(), Error> {
  220|     43|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|     43|        })
  224|     43|    }
_RNCNvMs3_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngE6reseed0Bd_:
  220|     43|        R::from_rng(&mut self.reseeder).map(|result| {
  221|     43|            self.bytes_until_reseed = self.threshold;
  222|     43|            self.inner = result
  223|     43|        })
_RNvMs3_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngE9is_forkedBb_:
  226|  11.2k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  11.2k|        // In theory, on 32-bit platforms, it is possible for
  228|  11.2k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  11.2k|        //
  230|  11.2k|        // This check will detect a fork in the normal case where
  231|  11.2k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  11.2k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  11.2k|        //
  234|  11.2k|        // It will still fail to detect a fork if there have been more than
  235|  11.2k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  11.2k|        // enough.
  237|  11.2k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  11.2k|    }
_RNvMs3_NtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|     43|    fn reseed_and_generate(
  242|     43|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|     43|    ) {
  244|     43|        #![allow(clippy::if_same_then_else)] // false positive
  245|     43|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|     43|        } else {
  248|     43|            trace!("Reseeding RNG (periodic reseed)");
  249|     43|        }
  250|       |
  251|     43|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|     43|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|     43|        }
  257|     43|        self.fork_counter = global_fork_counter;
  258|     43|
  259|     43|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|     43|        self.inner.generate(results);
  261|     43|    }
_RNvNtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  11.2k|    pub fn get_fork_counter() -> usize {
  308|  11.2k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  11.2k|    }
_RNvNtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCskRO9jcDHrIk_4rand4rngs6threadNtB4_9ThreadRngNtCsfmkKAYmFAU1_9rand_core7RngCore8next_u64:
  109|   359k|    fn next_u64(&mut self) -> u64 {
  110|   359k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   359k|        // creates another mutable reference
  112|   359k|        let rng = unsafe { &mut *self.rng.get() };
  113|   359k|        rng.next_u64()
  114|   359k|    }
_RNvNtNtCskRO9jcDHrIk_4rand4rngs6thread10thread_rng:
   88|   179k|pub fn thread_rng() -> ThreadRng {
   89|   179k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   179k|    ThreadRng { rng }
   91|   179k|}
_RNCNvNtNtCskRO9jcDHrIk_4rand4rngs6thread10thread_rng0B7_:
   89|   179k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCskRO9jcDHrIk_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCsc7vzZlXzn9x_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsfmkKAYmFAU1_9rand_core5block12BlockRngCore8generateCskRO9jcDHrIk_4rand:
   89|  11.2k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  11.2k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  11.2k|                self.state.refill4($rounds, unsafe {
   92|  11.2k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  11.2k|                });
   94|   718k|                for x in r.as_mut() {
   95|   718k|                    *x = x.to_le();
   96|   718k|                }
   97|  11.2k|            }
_RNvXsn_NtCsc7vzZlXzn9x_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsfmkKAYmFAU1_9rand_core11SeedableRng9from_seedCskRO9jcDHrIk_4rand:
  103|     44|            fn from_seed(seed: Self::Seed) -> Self {
  104|     44|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|     44|            }
_RNvXs_NtCsc7vzZlXzn9x_11rand_chacha6chachaINtB4_7Array64mEINtNtCs3enrnThfs6H_4core7convert5AsRefSmE6as_refB6_:
   46|   741k|    fn as_ref(&self) -> &[T] {
   47|   741k|        &self.0
   48|   741k|    }
_RNvXs0_NtCsc7vzZlXzn9x_11rand_chacha6chachaINtB5_7Array64mEINtNtCs3enrnThfs6H_4core7convert5AsMutSmE6as_mutB7_:
   51|  11.2k|    fn as_mut(&mut self) -> &mut [T] {
   52|  11.2k|        &mut self.0
   53|  11.2k|    }
_RNvXNtCsc7vzZlXzn9x_11rand_chacha6chachaINtB2_7Array64mENtNtCs3enrnThfs6H_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCsc7vzZlXzn9x_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|     44|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|     44|        init_chacha(key, nonce)
   74|     44|    }
_RNvMNtCsc7vzZlXzn9x_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  11.2k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  11.2k|        refill_wide(self, drounds, out)
   86|  11.2k|    }
_RINvNtCsc7vzZlXzn9x_11rand_chacha4guts5roundINtNtCskpyHVEFKLB2_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   134k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   134k|    x.a += x.b;
   45|   134k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   134k|    x.c += x.d;
   47|   134k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   134k|    x.a += x.b;
   49|   134k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   134k|    x.c += x.d;
   51|   134k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   134k|    x
   53|   134k|}
_RINvNtCsc7vzZlXzn9x_11rand_chacha4guts11diagonalizeINtNtCskpyHVEFKLB2_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  67.3k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  67.3k|    x.b = x.b.shuffle_lane_words3012();
   58|  67.3k|    x.c = x.c.shuffle_lane_words2301();
   59|  67.3k|    x.d = x.d.shuffle_lane_words1230();
   60|  67.3k|    x
   61|  67.3k|}
_RINvNtCsc7vzZlXzn9x_11rand_chacha4guts13undiagonalizeINtNtCskpyHVEFKLB2_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  67.3k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  67.3k|    x.b = x.b.shuffle_lane_words1230();
   65|  67.3k|    x.c = x.c.shuffle_lane_words2301();
   66|  67.3k|    x.d = x.d.shuffle_lane_words3012();
   67|  67.3k|    x
   68|  67.3k|}
_RINvMNtCsc7vzZlXzn9x_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCskpyHVEFKLB2_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  22.4k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  22.4k|        let d: M::u32x4 = m.unpack(self.d);
   79|  22.4k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  22.4k|    }
_RINvNtCsc7vzZlXzn9x_11rand_chacha4guts16refill_wide_implINtNtCskpyHVEFKLB2_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  11.2k|fn refill_wide_impl<Mach: Machine>(
  117|  11.2k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  11.2k|) {
  119|  11.2k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  11.2k|    let mut pos = state.pos64(m);
  121|  11.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  11.2k|    pos = pos.wrapping_add(1);
  123|  11.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  11.2k|    pos = pos.wrapping_add(1);
  125|  11.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  11.2k|    pos = pos.wrapping_add(1);
  127|  11.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  11.2k|
  129|  11.2k|    let b = m.unpack(state.b);
  130|  11.2k|    let c = m.unpack(state.c);
  131|  11.2k|    let mut x = State {
  132|  11.2k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  11.2k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  11.2k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  11.2k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  11.2k|    };
  137|  67.3k|    for _ in 0..drounds {
  138|  67.3k|        x = round(x);
  139|  67.3k|        x = undiagonalize(round(diagonalize(x)));
  140|  67.3k|    }
  141|  11.2k|    let mut pos = state.pos64(m);
  142|  11.2k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  11.2k|    pos = pos.wrapping_add(1);
  144|  11.2k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  11.2k|    pos = pos.wrapping_add(1);
  146|  11.2k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  11.2k|    pos = pos.wrapping_add(1);
  148|  11.2k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  11.2k|    pos = pos.wrapping_add(1);
  150|  11.2k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  11.2k|
  152|  11.2k|    let (a, b, c, d) = (
  153|  11.2k|        x.a.to_lanes(),
  154|  11.2k|        x.b.to_lanes(),
  155|  11.2k|        x.c.to_lanes(),
  156|  11.2k|        x.d.to_lanes(),
  157|  11.2k|    );
  158|  11.2k|    let sb = m.unpack(state.b);
  159|  11.2k|    let sc = m.unpack(state.c);
  160|  11.2k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  11.2k|    state.d = d4.into();
  162|  11.2k|    let mut words = out.chunks_exact_mut(16);
  163|  44.9k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  44.9k|        (a + k).write_le(words.next().unwrap());
  165|  44.9k|        (b + sb).write_le(words.next().unwrap());
  166|  44.9k|        (c + sc).write_le(words.next().unwrap());
  167|  44.9k|        (d + sd).write_le(words.next().unwrap());
  168|  44.9k|    }
  169|  11.2k|}
_RNvNtCsc7vzZlXzn9x_11rand_chacha4guts10read_u32le:
  229|     88|fn read_u32le(xs: &[u8]) -> u32 {
  230|     88|    assert_eq!(xs.len(), 4);
  231|     88|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|     88|}
_RINvNvNtCsc7vzZlXzn9x_11rand_chacha4guts11refill_wide7fn_implINtNtCskpyHVEFKLB2_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  11.2k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  11.2k|        refill_wide_impl(m, state, drounds, out);
  174|  11.2k|    }
_RINvNvNtCsc7vzZlXzn9x_11rand_chacha4guts11init_chacha7fn_implINtNtCskpyHVEFKLB2_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|     44|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|     44|        let ctr_nonce = [
  237|       |            0,
  238|     44|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|     44|                0
  242|       |            },
  243|     44|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|     44|            read_u32le(&nonce[nonce.len() - 4..]),
  245|     44|        ];
  246|     44|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|     44|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|     44|        ChaCha {
  249|     44|            b: key0.into(),
  250|     44|            c: key1.into(),
  251|     44|            d: ctr_nonce.into(),
  252|     44|        }

_RNCNvXs0_NtCsfmkKAYmFAU1_9rand_core5blockINtB7_8BlockRngINtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CsibMRFqTCw42_5oxttl:
  198|   359k|        let read_u64 = |results: &[u32], index| {
  199|   359k|            let data = &results[index..=index + 1];
  200|   359k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   359k|        };
_RNvXs0_NtCsfmkKAYmFAU1_9rand_core5blockINtB5_8BlockRngINtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CsibMRFqTCw42_5oxttl:
  197|   359k|    fn next_u64(&mut self) -> u64 {
  198|   359k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   359k|        let len = self.results.as_ref().len();
  204|   359k|
  205|   359k|        let index = self.index;
  206|   359k|        if index < len - 1 {
  207|   348k|            self.index += 2;
  208|   348k|            // Read an u64 from the current index
  209|   348k|            read_u64(self.results.as_ref(), index)
  210|  11.2k|        } else if index >= len {
  211|  11.2k|            self.generate_and_set(2);
  212|  11.2k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   359k|    }
_RNvMs_NtCsfmkKAYmFAU1_9rand_core5blockINtB4_8BlockRngINtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  11.2k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  11.2k|        assert!(index < self.results.as_ref().len());
  176|  11.2k|        self.core.generate(&mut self.results);
  177|  11.2k|        self.index = index;
  178|  11.2k|    }
_RNvMs_NtCsfmkKAYmFAU1_9rand_core5blockINtB4_8BlockRngINtNtNtNtCskRO9jcDHrIk_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtCsfmkKAYmFAU1_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECskRO9jcDHrIk_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCsc7vzZlXzn9x_11rand_chacha6chacha12ChaCha12CoreNtCsfmkKAYmFAU1_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECskRO9jcDHrIk_4rand:
  390|     43|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|     43|        let mut seed = Self::Seed::default();
  392|     43|        rng.try_fill_bytes(seed.as_mut())?;
  393|     43|        Ok(Self::from_seed(seed))
  394|     43|    }
_RNvXs_CsfmkKAYmFAU1_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCskRO9jcDHrIk_4rand:
  441|     43|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|     43|        (**self).try_fill_bytes(dest)
  443|     43|    }

_RNvXs_NtCsfmkKAYmFAU1_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|     44|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|     44|        getrandom(dest)?;
   69|     44|        Ok(())
   70|     44|    }

_RNvNvNtNtCskRO9jcDHrIk_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCskRO9jcDHrIk_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   179k|            unsafe fn __getit(
   84|   179k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   179k|            ) -> $crate::option::Option<&'static $t> {
   86|   179k|                #[thread_local]
   87|   179k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   179k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   179k|
   90|   179k|                unsafe {
   91|   179k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   179k|                    })
  101|   179k|                }
  102|   179k|            }

_RNCNvNvCsiOoKLCLNKqP_2n31__19___libfuzzer_sys_run0B5_:
   12|  2.03M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvMNtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsibMRFqTCw42_5oxttl:
   66|    510|    pub fn new_from_unique_id(id: u128) -> Self {
   67|    510|        Self(BlankNodeContent::Anonymous {
   68|    510|            id,
   69|    510|            str: IdStr::new(id),
   70|    510|        })
   71|    510|    }
_RNvMs7_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB5_5IdStr3newCsibMRFqTCw42_5oxttl:
  259|   180k|    fn new(id: u128) -> Self {
  260|   180k|        let mut str = [0; 32];
  261|   180k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   180k|        Self(str)
  263|   180k|    }
_RNvMs7_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsibMRFqTCw42_5oxttl:
  266|   179k|    fn as_str(&self) -> &str {
  267|   179k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   179k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   179k|    }
_RNvNtCse77hlhKzJ8Y_5oxrdf10blank_node13to_integer_idCsibMRFqTCw42_5oxttl:
  332|  3.57k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  3.57k|    let digits = id.as_bytes();
  334|  3.57k|    let mut value: u128 = 0;
  335|  3.57k|    if let None | Some(b'0') = digits.first() {
  336|  2.64k|        return None; // No empty string or leading zeros
  337|    929|    }
  338|  4.94k|    for digit in digits {
  339|  4.43k|        value = value.checked_mul(16)?.checked_add(
  340|  4.38k|            match *digit {
  341|  4.24k|                b'0'..=b'9' => digit - b'0',
  342|  3.37k|                b'a'..=b'f' => digit - b'a' + 10,
  343|    367|                _ => return None,
  344|       |            }
  345|  4.01k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|    510|    Some(value)
  349|  3.57k|}
_RNvXs0_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs3enrnThfs6H_4core7default7Default7defaultCsibMRFqTCw42_5oxttl:
  113|  71.8k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|   179k|        loop {
  116|   179k|            let id = random();
  117|   179k|            let str = IdStr::new(id);
  118|   179k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|  71.8k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|   107k|            }
  121|       |        }
  122|  71.8k|    }
_RNvXsJ_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
  254|  20.8k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsf_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
   24|  21.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsm_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
   27|  21.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsibMRFqTCw42_5oxttl:
   53|  3.57k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  3.57k|        let id = id.into();
   55|  3.57k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|    510|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|  3.06k|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  3.57k|    }
_RNCNvMs7_NtCse77hlhKzJ8Y_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  5.74M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvXsF_NtCse77hlhKzJ8Y_5oxrdf7literalNtB5_7LiteralNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
   37|  5.88k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCse77hlhKzJ8Y_5oxrdf7literalNtB5_14LiteralContentNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
   40|  5.88k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCse77hlhKzJ8Y_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsbqtYJIZlK4w_5alloc6string6StringEB5_:
   50|  9.25k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  9.25k|        Self(LiteralContent::String(value.into()))
   52|  9.25k|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsbqtYJIZlK4w_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   56|    235|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|    235|        let value = value.into();
   58|    235|        let datatype = datatype.into();
   59|    235|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|    235|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|    235|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  5.43k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  5.43k|        let value = value.into();
   58|  5.43k|        let datatype = datatype.into();
   59|  5.43k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  5.43k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  5.43k|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsbqtYJIZlK4w_5alloc6string6StringB1n_EB5_:
   88|    322|    pub fn new_language_tagged_literal_unchecked(
   89|    322|        value: impl Into<String>,
   90|    322|        language: impl Into<String>,
   91|    322|    ) -> Self {
   92|    322|        Self(LiteralContent::LanguageTaggedString {
   93|    322|            value: value.into(),
   94|    322|            language: language.into(),
   95|    322|        })
   96|    322|    }

_RNvMs4_NtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsibMRFqTCw42_5oxttl:
  138|  9.64k|    pub fn into_owned(self) -> NamedNode {
  139|  9.64k|        NamedNode::new_unchecked(self.iri)
  140|  9.64k|    }
_RNvXsp_NtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
   17|  1.20k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsbqtYJIZlK4w_5alloc6string6StringEB5_:
   39|  4.89k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  4.89k|        Self { iri: iri.into() }
   41|  4.89k|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  15.5k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  15.5k|        Self { iri: iri.into() }
   41|  15.5k|    }
_RNvMNtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  5.67k|    pub fn as_str(&self) -> &str {
   45|  5.67k|        self.iri.as_str()
   46|  5.67k|    }
_RNvMs4_NtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  5.67k|    pub const fn as_str(self) -> &'a str {
  134|  5.67k|        self.iri
  135|  5.67k|    }
_RNvMs4_NtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  5.43k|    pub fn into_owned(self) -> NamedNode {
  139|  5.43k|        NamedNode::new_unchecked(self.iri)
  140|  5.43k|    }
_RNvXs6_NtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs3enrnThfs6H_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  5.43k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  5.43k|        node.into_owned()
  154|  5.43k|    }
_RNvXs9_NtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs3enrnThfs6H_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  5.67k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  5.67k|        self.as_str() == other.as_str()
  175|  5.67k|    }

_RNvXs1c_NtCse77hlhKzJ8Y_5oxrdf6tripleNtB6_9GraphNameINtNtCs3enrnThfs6H_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsibMRFqTCw42_5oxttl:
  913|  2.62k|    fn from(node: BlankNode) -> Self {
  914|  2.62k|        Self::BlankNode(node)
  915|  2.62k|    }

_RNvXsh_NtCse77hlhKzJ8Y_5oxrdf8variableNtB5_8VariableNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCsibMRFqTCw42_5oxttl:
   17|    987|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCse77hlhKzJ8Y_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCsbqtYJIZlK4w_5alloc6borrow3CoweEECsibMRFqTCw42_5oxttl:
   39|  2.02k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  2.02k|        Self { name: name.into() }
   41|  2.02k|    }

_RNvXNtCsibMRFqTCw42_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  1.29M|    fn recognize_next_token<'a>(
   56|  1.29M|        &mut self,
   57|  1.29M|        data: &'a [u8],
   58|  1.29M|        is_ending: bool,
   59|  1.29M|        options: &N3LexerOptions,
   60|  1.29M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  1.29M|        match *data.first()? {
   62|   175k|            b'<' => match *data.get(1)? {
   63|    730|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  7.86k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  7.86k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  1.01k|                        Some(if let Ok(result) = result {
   67|    286|                            (consumed, Ok(result))
   68|       |                        } else {
   69|    731|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  6.84k|                    } else if is_ending {
   72|    170|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  6.67k|                        None
   75|       |                    }
   76|       |                }
   77|  10.6k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|  10.6k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  2.19k|                        Some(if let Ok(result) = result {
   80|     97|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  2.10k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|  8.41k|                    } else if is_ending {
   85|    409|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|  8.01k|                        None
   88|       |                    }
   89|       |                }
   90|   125k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  22.8k|                if *data.get(1)? == b'>' {
   94|  4.58k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  8.75k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  20.7k|            b'_' => match data.get(1)? {
  100|  14.0k|                b':' => Self::recognize_blank_node_label(data),
  101|  5.37k|                c => Some((
  102|  5.37k|                    1,
  103|  5.37k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  5.37k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  14.8k|                if self.mode != N3LexerMode::NTriples
  108|  14.8k|                    && *data.get(1)? == b'"'
  109|  11.3k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  9.39k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  3.44k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  39.7k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  39.7k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  12.9k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  21.7k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  47.4k|            b'@' => self.recognize_lang_tag(data),
  124|  73.5k|            b'.' => match data.get(1) {
  125|  36.8k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  60.0k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  8.03k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  6.60k|                if *data.get(1)? == b'^' {
  131|  3.71k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  2.10k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  21.8k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  2.99k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  48.7k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  7.86k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|  53.7k|                if *data.get(1)? == b'|' {
  142|    176|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|  47.3k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  12.0k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  5.10k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  6.60k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  5.76k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  1.65k|                if *data.get(1)? == b'}' {
  153|     70|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  1.12k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  10.2k|                if *data.get(1)? == b'>' {
  160|    417|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  7.18k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|   325k|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  20.3k|            b'?' => self.recognize_variable(data, is_ending),
  167|   491k|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  1.29M|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  4.93k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  4.93k|        Self { mode, unchecked }
  175|  4.93k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   144k|    fn recognize_iri(
  178|   144k|        &self,
  179|   144k|        data: &[u8],
  180|   144k|        options: &N3LexerOptions,
  181|   144k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   144k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   144k|        let mut string = Vec::new();
  184|   144k|        let mut i = 1;
  185|       |        loop {
  186|   167k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  48.7k|            string.extend_from_slice(&data[i..i + end]);
  188|  48.7k|            i += end;
  189|  48.7k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  18.5k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  30.1k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  24.8k|                    i += additional + 1;
  197|  24.8k|                    match c {
  198|  23.0k|                        Ok(c) => {
  199|  23.0k|                            let mut buf = [0; 4];
  200|  23.0k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  23.0k|                        }
  202|  1.78k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   144k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  18.5k|    fn parse_iri(
  211|  18.5k|        &self,
  212|  18.5k|        iri: Vec<u8>,
  213|  18.5k|        position: Range<usize>,
  214|  18.5k|        options: &N3LexerOptions,
  215|  18.5k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  18.5k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  16.3k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|  16.3k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|  16.3k|                    base_iri.resolve(&iri)
  223|       |                }
  224|  16.3k|                .map_err(|e| (position, e.to_string()))?
  225|  10.9k|                .into_inner()
  226|      0|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|      0|                Iri::parse(iri)
  230|      0|                    .map_err(|e| (position, e.to_string()))?
  231|      0|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  18.5k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|   491k|    fn recognize_pname_or_keyword<'a>(
  237|   491k|        &self,
  238|   491k|        data: &'a [u8],
  239|   491k|        is_ending: bool,
  240|   491k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|   491k|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  242|   491k|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  243|   491k|
  244|   491k|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|   491k|        let mut i = 0;
  246|       |        loop {
  247|   962k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|   905k|                match r {
  249|   845k|                    Ok((c, consumed)) => {
  250|   845k|                        if c == ':' {
  251|   127k|                            i += consumed;
  252|   127k|                            break;
  253|   717k|                        } else if i == 0 {
  254|   310k|                            if !Self::is_possible_pn_chars_base(c) {
  255|   204k|                                return Some((
  256|   204k|                                    consumed,
  257|   204k|                                    Err((
  258|   204k|                                        0..consumed,
  259|   204k|                                        format!(
  260|   204k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|   204k|                                        ),
  262|   204k|                                    )
  263|   204k|                                        .into()),
  264|   204k|                                ));
  265|   106k|                            }
  266|   106k|                            i += consumed;
  267|   406k|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|   364k|                            i += consumed;
  269|   364k|                        } else {
  270|  51.0k|                            while data[..i].ends_with(b".") {
  271|  8.14k|                                i -= 1;
  272|  8.14k|                            }
  273|  42.9k|                            return Some((
  274|  42.9k|                                i,
  275|  42.9k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|  42.9k|                            ));
  277|       |                        }
  278|       |                    }
  279|  60.1k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|  56.2k|            } else if is_ending {
  282|  1.01k|                while data[..i].ends_with(b".") {
  283|    166|                    i -= 1;
  284|    166|                }
  285|    852|                return Some(if i == 0 {
  286|    284|                    (
  287|    284|                        1,
  288|    284|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|    284|                    )
  290|       |                } else {
  291|    568|                    (
  292|    568|                        i,
  293|    568|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|    568|                    )
  295|       |                });
  296|       |            } else {
  297|  55.3k|                return None;
  298|       |            }
  299|       |        }
  300|   127k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|   127k|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|   127k|        if pn_prefix.ends_with('.') {
  305|    208|            return Some((
  306|    208|                i,
  307|    208|                Err((
  308|    208|                    0..i,
  309|    208|                    format!(
  310|    208|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|    208|                )
  312|    208|                    .into()),
  313|    208|            ));
  314|   127k|        }
  315|       |
  316|  23.6k|        let (consumed, pn_local_result) =
  317|   127k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  23.6k|        Some((
  319|  23.6k|            consumed + i,
  320|  23.6k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  23.6k|            }),
  325|  23.6k|        ))
  326|   491k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|  20.3k|    fn recognize_variable<'a>(
  329|  20.3k|        &self,
  330|  20.3k|        data: &'a [u8],
  331|  20.3k|        is_ending: bool,
  332|  20.3k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  334|  20.3k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  7.84k|        Some((
  336|  7.84k|            consumed + 1,
  337|  7.84k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  7.84k|            }),
  344|  7.84k|        ))
  345|  20.3k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|   148k|    fn recognize_optional_pn_local<'a>(
  348|   148k|        &self,
  349|   148k|        data: &'a [u8],
  350|   148k|        is_ending: bool,
  351|   148k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|   148k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|   148k|        let mut i = 0;
  354|   148k|        let mut buffer = None; // Buffer if there are some escaped characters
  355|   148k|        let mut position_that_is_already_in_buffer = 0;
  356|   148k|        let mut might_be_invalid_iri = false;
  357|       |        loop {
  358|   630k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|   517k|                match r {
  360|   515k|                    Ok((c, consumed)) => {
  361|   515k|                        if c == '%' {
  362|  3.94k|                            i += 1;
  363|  3.94k|                            let a = char::from(*data.get(i)?);
  364|  1.97k|                            i += 1;
  365|  1.97k|                            let b = char::from(*data.get(i)?);
  366|    937|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|    219|                                return Some((i + 1, Err((
  368|    219|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|    219|                                ).into())));
  370|    718|                            }
  371|    718|                            i += 1;
  372|   511k|                        } else if c == '\\' {
  373|  15.8k|                            i += 1;
  374|  15.8k|                            let a = char::from(*data.get(i)?);
  375|  14.8k|                            if self.unchecked
  376|  6.70k|                                || matches!(
  377|  14.8k|                                    a,
  378|       |                                    '_' | '~'
  379|       |                                        | '.'
  380|       |                                        | '-'
  381|       |                                        | '!'
  382|       |                                        | '$'
  383|       |                                        | '&'
  384|       |                                        | '\''
  385|       |                                        | '('
  386|       |                                        | ')'
  387|       |                                        | '*'
  388|       |                                        | '+'
  389|       |                                        | ','
  390|       |                                        | ';'
  391|       |                                        | '='
  392|       |                                )
  393|  8.12k|                            {
  394|  8.12k|                                // ok to escape
  395|  8.12k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  396|  6.56k|                                // ok to escape but requires IRI validation
  397|  6.56k|                                might_be_invalid_iri = true;
  398|  6.56k|                            } else {
  399|    137|                                return Some((i + 1, Err((
  400|    137|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  401|    137|                                ).into())));
  402|       |                            }
  403|  14.6k|                            let buffer = buffer.get_or_insert_with(String::new);
  404|  14.6k|                            // We add the missing bytes
  405|  14.6k|                            if i - position_that_is_already_in_buffer > 1 {
  406|  7.08k|                                buffer.push_str(
  407|  7.08k|                                    match str_from_utf8(
  408|  7.08k|                                        &data[position_that_is_already_in_buffer..i - 1],
  409|  7.08k|                                        position_that_is_already_in_buffer..i - 1,
  410|  7.08k|                                    ) {
  411|  7.08k|                                        Ok(data) => data,
  412|      0|                                        Err(e) => return Some((i, Err(e))),
  413|       |                                    },
  414|       |                                )
  415|  7.60k|                            }
  416|  14.6k|                            buffer.push(a);
  417|  14.6k|                            i += 1;
  418|  14.6k|                            position_that_is_already_in_buffer = i;
  419|   495k|                        } else if i == 0 {
  420|  75.8k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  421|       |                            {
  422|  12.3k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  423|  63.5k|                            }
  424|  63.5k|                            if !self.unchecked {
  425|       |                                might_be_invalid_iri |=
  426|  63.5k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  427|  63.5k|                                        || c == ':';
  428|      0|                            }
  429|  63.5k|                            i += consumed;
  430|   419k|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  431|   403k|                            if !self.unchecked {
  432|       |                                might_be_invalid_iri |=
  433|   403k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  434|   403k|                                        || c == ':';
  435|      0|                            }
  436|   403k|                            i += consumed;
  437|       |                        } else {
  438|  16.1k|                            let buffer = if let Some(mut buffer) = buffer {
  439|  1.76k|                                buffer.push_str(
  440|  1.76k|                                    match str_from_utf8(
  441|  1.76k|                                        &data[position_that_is_already_in_buffer..i],
  442|  1.76k|                                        position_that_is_already_in_buffer..i,
  443|  1.76k|                                    ) {
  444|  1.76k|                                        Ok(data) => data,
  445|      0|                                        Err(e) => return Some((i, Err(e))),
  446|       |                                    },
  447|       |                                );
  448|       |                                // We do not include the last dot
  449|  2.66k|                                while buffer.ends_with('.') {
  450|    903|                                    buffer.pop();
  451|    903|                                    i -= 1;
  452|    903|                                }
  453|  1.76k|                                Cow::Owned(buffer)
  454|       |                            } else {
  455|  14.3k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  456|  14.3k|                                    Ok(data) => data,
  457|      0|                                    Err(e) => return Some((i, Err(e))),
  458|       |                                };
  459|       |                                // We do not include the last dot
  460|  19.6k|                                while let Some(d) = data.strip_suffix('.') {
  461|  5.33k|                                    data = d;
  462|  5.33k|                                    i -= 1;
  463|  5.33k|                                }
  464|  14.3k|                                Cow::Borrowed(data)
  465|       |                            };
  466|  16.1k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  467|       |                        }
  468|       |                    }
  469|  2.21k|                    Err(e) => return Some((e.location.end, Err(e))),
  470|       |                }
  471|   113k|            } else if is_ending {
  472|    432|                let buffer = if let Some(mut buffer) = buffer {
  473|       |                    // We do not include the last dot
  474|    252|                    while buffer.ends_with('.') {
  475|    124|                        buffer.pop();
  476|    124|                        i -= 1;
  477|    124|                    }
  478|    128|                    Cow::Owned(buffer)
  479|       |                } else {
  480|    304|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  481|    304|                        Ok(data) => data,
  482|      0|                        Err(e) => return Some((i, Err(e))),
  483|       |                    };
  484|       |                    // We do not include the last dot
  485|    409|                    while let Some(d) = data.strip_suffix('.') {
  486|    105|                        data = d;
  487|    105|                        i -= 1;
  488|    105|                    }
  489|    304|                    Cow::Borrowed(data)
  490|       |                };
  491|    432|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  492|       |            } else {
  493|   112k|                return None;
  494|       |            }
  495|       |        }
  496|   148k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  498|  14.0k|    fn recognize_blank_node_label(
  499|  14.0k|        data: &[u8],
  500|  14.0k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  501|  14.0k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  502|  14.0k|        let mut i = 2;
  503|       |        loop {
  504|  41.3k|            match Self::recognize_unicode_char(&data[i..], i)? {
  505|  31.0k|                Ok((c, consumed)) => {
  506|  31.0k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  507|  25.6k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  508|  24.5k|                    {
  509|  24.5k|                        // Ok
  510|  24.5k|                    } else if i > 2 && c == '.' {
  511|  2.75k|                        if data[i - 1] == b'.' {
  512|     38|                            i -= 1;
  513|     38|                            return Some((
  514|     38|                                i,
  515|     38|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  516|     38|                            ));
  517|  2.71k|                        }
  518|  3.77k|                    } else if i == 0 {
  519|      0|                        return Some((
  520|      0|                            i,
  521|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  522|      0|                        ));
  523|  3.77k|                    } else if data[i - 1] == b'.' {
  524|    426|                        i -= 1;
  525|    426|                        return Some((
  526|    426|                            i,
  527|    426|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  528|    426|                        ));
  529|       |                    } else {
  530|  3.35k|                        return Some((
  531|  3.35k|                            i,
  532|  3.35k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  3.35k|                        ));
  534|       |                    }
  535|  27.2k|                    i += consumed;
  536|       |                }
  537|    668|                Err(e) => return Some((e.location.end, Err(e))),
  538|       |            }
  539|       |        }
  540|  14.0k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  542|  47.4k|    fn recognize_lang_tag<'a>(
  543|  47.4k|        &self,
  544|  47.4k|        data: &'a [u8],
  545|  47.4k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  546|  47.4k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  547|  47.4k|        let mut is_last_block_empty = true;
  548|   218k|        for (i, c) in data[1..].iter().enumerate() {
  549|   218k|            if c.is_ascii_alphabetic() {
  550|   187k|                is_last_block_empty = false;
  551|   187k|            } else if i == 0 {
  552|  13.4k|                return Some((
  553|  13.4k|                    1,
  554|  13.4k|                    Err((1..2, "A language code should always start with a letter").into()),
  555|  13.4k|                ));
  556|  17.6k|            } else if is_last_block_empty {
  557|    229|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  558|  17.3k|            } else if *c == b'-' {
  559|  8.36k|                is_last_block_empty = true;
  560|  8.36k|            } else {
  561|  9.03k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  562|       |            }
  563|       |        }
  564|  24.7k|        None
  565|  47.4k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  567|  9.26k|    fn parse_lang_tag<'a>(
  568|  9.26k|        &self,
  569|  9.26k|        lang_tag: &'a [u8],
  570|  9.26k|        position: Range<usize>,
  571|  9.26k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  572|  9.26k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  573|  9.26k|        Ok(N3Token::LangTag(if self.unchecked {
  574|      0|            lang_tag
  575|       |        } else {
  576|  9.26k|            LanguageTag::parse(lang_tag)
  577|  9.26k|                .map_err(|e| (position.clone(), e.to_string()))?
  578|  6.91k|                .into_inner()
  579|       |        }))
  580|  9.26k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  582|  25.1k|    fn recognize_string(
  583|  25.1k|        data: &[u8],
  584|  25.1k|        delimiter: u8,
  585|  25.1k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  586|  25.1k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  587|  25.1k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  588|  25.1k|        let mut string = String::new();
  589|  25.1k|        let mut i = 1;
  590|       |        loop {
  591|  27.6k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  592|  18.8k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  593|  18.4k|                Ok(s) => string.push_str(s),
  594|    397|                Err(e) => return Some((end, Err(e))),
  595|       |            };
  596|  18.4k|            i += end;
  597|  18.4k|            match data[i] {
  598|  18.4k|                c if c == delimiter => {
  599|  5.39k|                    return Some((i + 1, Ok(N3Token::String(string))));
  600|       |                }
  601|       |                b'\\' => {
  602|  13.0k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  603|  11.8k|                    i += additional + 1;
  604|  11.8k|                    match c {
  605|  2.49k|                        Ok(c) => {
  606|  2.49k|                            string.push(c);
  607|  2.49k|                        }
  608|  9.39k|                        Err(e) => {
  609|       |                            // We read until the end of string char
  610|  9.39k|                            let end = memchr(delimiter, &data[i..])?;
  611|    318|                            return Some((i + end + 1, Err(e)));
  612|       |                        }
  613|       |                    }
  614|       |                }
  615|      0|                _ => unreachable!(),
  616|       |            }
  617|       |        }
  618|  25.1k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  620|  22.3k|    fn recognize_long_string(
  621|  22.3k|        data: &[u8],
  622|  22.3k|        delimiter: u8,
  623|  22.3k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  624|  22.3k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  625|  22.3k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  626|  22.3k|        let mut string = String::new();
  627|  22.3k|        let mut i = 3;
  628|       |        loop {
  629|  37.9k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  630|  30.0k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  631|  29.4k|                Ok(s) => string.push_str(s),
  632|    638|                Err(e) => return Some((end, Err(e))),
  633|       |            };
  634|  29.4k|            i += end;
  635|  29.4k|            match data[i] {
  636|  29.4k|                c if c == delimiter => {
  637|  26.5k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  638|  10.7k|                        return Some((i + 3, Ok(N3Token::String(string))));
  639|  13.0k|                    }
  640|  13.0k|                    i += 1;
  641|  13.0k|                    string.push(char::from(delimiter));
  642|       |                }
  643|       |                b'\\' => {
  644|  2.93k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  645|  2.72k|                    i += additional + 1;
  646|  2.72k|                    match c {
  647|  2.56k|                        Ok(c) => {
  648|  2.56k|                            string.push(c);
  649|  2.56k|                        }
  650|    161|                        Err(e) => return Some((i, Err(e))),
  651|       |                    }
  652|       |                }
  653|      0|                _ => unreachable!(),
  654|       |            }
  655|       |        }
  656|  22.3k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  658|  53.6k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  659|  53.6k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  660|  53.6k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  661|  53.6k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  662|  53.6k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  663|  53.6k|        let mut i = 0;
  664|  53.6k|        let c = *data.first()?;
  665|  53.6k|        if matches!(c, b'+' | b'-') {
  666|  18.9k|            i += 1;
  667|  34.7k|        }
  668|       |        // We read the digits before .
  669|  53.6k|        let mut count_before: usize = 0;
  670|       |        loop {
  671|  99.0k|            let c = *data.get(i)?;
  672|  89.0k|            if c.is_ascii_digit() {
  673|  45.3k|                i += 1;
  674|  45.3k|                count_before += 1;
  675|  45.3k|            } else {
  676|  43.6k|                break;
  677|       |            }
  678|       |        }
  679|       |
  680|       |        // We read the digits after .
  681|       |        #[allow(clippy::if_then_some_else_none)]
  682|  43.6k|        let count_after = if *data.get(i)? == b'.' {
  683|  12.0k|            i += 1;
  684|  12.0k|
  685|  12.0k|            let mut count_after = 0;
  686|       |            loop {
  687|  20.4k|                let c = *data.get(i)?;
  688|  15.6k|                if c.is_ascii_digit() {
  689|  8.39k|                    i += 1;
  690|  8.39k|                    count_after += 1;
  691|  8.39k|                } else {
  692|  7.25k|                    break;
  693|  7.25k|                }
  694|  7.25k|            }
  695|  7.25k|            Some(count_after)
  696|       |        } else {
  697|  31.6k|            None
  698|       |        };
  699|       |
  700|       |        // End
  701|  38.8k|        let c = *data.get(i)?;
  702|  38.8k|        if matches!(c, b'e' | b'E') {
  703|  8.55k|            i += 1;
  704|       |
  705|  8.55k|            let c = *data.get(i)?;
  706|  5.85k|            if matches!(c, b'+' | b'-') {
  707|    301|                i += 1;
  708|  5.55k|            }
  709|       |
  710|  5.85k|            let mut found = false;
  711|       |            loop {
  712|  11.6k|                let c = *data.get(i)?;
  713|  7.21k|                if c.is_ascii_digit() {
  714|  5.78k|                    i += 1;
  715|  5.78k|                    found = true;
  716|  5.78k|                } else {
  717|  1.42k|                    break;
  718|  1.42k|                }
  719|  1.42k|            }
  720|  1.42k|            Some((
  721|  1.42k|                i,
  722|  1.42k|                if !found {
  723|    988|                    Err((0..i, "A double exponent cannot be empty").into())
  724|    434|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  725|     37|                    Err((0..i, "A double should not be empty").into())
  726|       |                } else {
  727|    397|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  728|       |                },
  729|       |            ))
  730|  30.3k|        } else if let Some(count_after) = count_after {
  731|  3.82k|            if count_after == 0 {
  732|       |                // We do not consume the '.' after all
  733|  2.64k|                i -= 1;
  734|  2.64k|                Some((
  735|  2.64k|                    i,
  736|  2.64k|                    if count_before == 0 {
  737|    449|                        Err((0..i, "An integer should not be empty").into())
  738|       |                    } else {
  739|  2.19k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  740|       |                    },
  741|       |                ))
  742|       |            } else {
  743|  1.17k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  744|       |            }
  745|       |        } else {
  746|       |            Some((
  747|  26.5k|                i,
  748|  26.5k|                if count_before == 0 {
  749|  12.4k|                    Err((0..i, "An integer should not be empty").into())
  750|       |                } else {
  751|  14.0k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  752|       |                },
  753|       |            ))
  754|       |        }
  755|  53.6k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  757|  46.1k|    fn recognize_escape(
  758|  46.1k|        data: &[u8],
  759|  46.1k|        position: usize,
  760|  46.1k|        with_echar: bool,
  761|  46.1k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  762|  46.1k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  763|  46.1k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  764|  46.1k|        match *data.get(1)? {
  765|  28.0k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  766|  26.9k|                Ok(c) => Some((5, Ok(c?))),
  767|  1.12k|                Err(e) => Some((5, Err(e))),
  768|       |            },
  769|  1.06k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  770|    651|                Ok(c) => Some((9, Ok(c?))),
  771|    415|                Err(e) => Some((9, Err(e))),
  772|       |            },
  773|    353|            b't' if with_echar => Some((1, Ok('\t'))),
  774|    203|            b'b' if with_echar => Some((1, Ok('\x08'))),
  775|    229|            b'n' if with_echar => Some((1, Ok('\n'))),
  776|    211|            b'r' if with_echar => Some((1, Ok('\r'))),
  777|    206|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  778|    195|            b'"' if with_echar => Some((1, Ok('"'))),
  779|    228|            b'\'' if with_echar => Some((1, Ok('\''))),
  780|  3.20k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  781|  9.80k|            c => Some((
  782|  9.80k|                1,
  783|  9.80k|                Err((
  784|  9.80k|                    position..position + 2,
  785|  9.80k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  786|  9.80k|                )
  787|  9.80k|                    .into()),
  788|  9.80k|            )), //TODO: read until end of string
  789|       |        }
  790|  46.1k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  792|  29.1k|    fn recognize_hex_char(
  793|  29.1k|        data: &[u8],
  794|  29.1k|        len: usize,
  795|  29.1k|        escape_char: char,
  796|  29.1k|        position: usize,
  797|  29.1k|    ) -> Result<Option<char>, TokenRecognizerError> {
  798|  29.1k|        if data.len() < len {
  799|  4.28k|            return Ok(None);
  800|  24.8k|        }
  801|  24.8k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  802|  24.1k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|       |            (
  804|       |                position..position + len + 2,
  805|       |                format!(
  806|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|       |                ),
  808|       |            )
  809|  24.1k|        })?;
  810|  23.5k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|       |            (
  812|       |                position..position + len +2,
  813|       |                format!(
  814|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|       |                ),
  816|       |            )
  817|  23.5k|        })?;
  818|  23.3k|        Ok(Some(c))
  819|  29.1k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  821|  1.63M|    fn recognize_unicode_char(
  822|  1.63M|        data: &[u8],
  823|  1.63M|        position: usize,
  824|  1.63M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  825|  1.63M|        let mut code_point: u32;
  826|  1.63M|        let bytes_needed: usize;
  827|  1.63M|        let mut lower_boundary = 0x80;
  828|  1.63M|        let mut upper_boundary = 0xBF;
  829|       |
  830|  1.63M|        let byte = *data.first()?;
  831|  1.47M|        match byte {
  832|  1.47M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  833|  78.9k|            0xC2..=0xDF => {
  834|  40.9k|                bytes_needed = 1;
  835|  40.9k|                code_point = u32::from(byte) & 0x1F;
  836|  40.9k|            }
  837|  38.0k|            0xE0..=0xEF => {
  838|  19.9k|                if byte == 0xE0 {
  839|  3.22k|                    lower_boundary = 0xA0;
  840|  16.7k|                }
  841|  19.9k|                if byte == 0xED {
  842|  1.62k|                    upper_boundary = 0x9F;
  843|  18.3k|                }
  844|  19.9k|                bytes_needed = 2;
  845|  19.9k|                code_point = u32::from(byte) & 0xF;
  846|       |            }
  847|  18.0k|            0xF0..=0xF4 => {
  848|  13.1k|                if byte == 0xF0 {
  849|    391|                    lower_boundary = 0x90;
  850|  12.7k|                }
  851|  13.1k|                if byte == 0xF4 {
  852|    273|                    upper_boundary = 0x8F;
  853|  12.8k|                }
  854|  13.1k|                bytes_needed = 3;
  855|  13.1k|                code_point = u32::from(byte) & 0x7;
  856|       |            }
  857|       |            _ => {
  858|  35.1k|                return Some(Err((
  859|  35.1k|                    position..=position,
  860|  35.1k|                    "Invalid UTF-8 character encoding",
  861|  35.1k|                )
  862|  35.1k|                    .into()))
  863|       |            }
  864|       |        }
  865|       |
  866|   101k|        for i in 1..=bytes_needed {
  867|   101k|            let byte = *data.get(i)?;
  868|  87.3k|            if byte < lower_boundary || upper_boundary < byte {
  869|  27.8k|                return Some(Err((
  870|  27.8k|                    position..=position + i,
  871|  27.8k|                    "Invalid UTF-8 character encoding",
  872|  27.8k|                )
  873|  27.8k|                    .into()));
  874|  59.4k|            }
  875|  59.4k|            lower_boundary = 0x80;
  876|  59.4k|            upper_boundary = 0xBF;
  877|  59.4k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  878|       |        }
  879|       |
  880|  31.6k|        Some(
  881|  31.6k|            char::from_u32(code_point)
  882|  31.6k|                .map(|c| (c, bytes_needed + 1))
  883|  31.6k|                .ok_or_else(|| {
  884|       |                    (
  885|       |                        position..=position + bytes_needed,
  886|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  887|       |                    )
  888|       |                        .into()
  889|  31.6k|                }),
  890|  31.6k|        )
  891|  1.63M|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  894|  1.24M|    fn is_possible_pn_chars_base(c: char) -> bool {
  895|  1.24M|        matches!(c,
  896|   724k|        'A'..='Z'
  897|   364k|        | 'a'..='z'
  898|  29.8k|        | '\u{00C0}'..='\u{00D6}'
  899|  29.8k|        | '\u{00D8}'..='\u{00F6}'
  900|  29.8k|        | '\u{00F8}'..='\u{02FF}'
  901|  27.0k|        | '\u{0370}'..='\u{037D}'
  902|  27.0k|        | '\u{037F}'..='\u{1FFF}'
  903|  15.4k|        | '\u{200C}'..='\u{200D}'
  904|  15.4k|        | '\u{2070}'..='\u{218F}'
  905|  15.4k|        | '\u{2C00}'..='\u{2FEF}'
  906|  15.4k|        | '\u{3001}'..='\u{D7FF}'
  907|  9.47k|        | '\u{F900}'..='\u{FDCF}'
  908|  9.47k|        | '\u{FDF0}'..='\u{FFFD}'
  909|  9.47k|        | '\u{10000}'..='\u{EFFFF}')
  910|  1.24M|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  913|   933k|    fn is_possible_pn_chars_u(c: char) -> bool {
  914|   933k|        Self::is_possible_pn_chars_base(c) || c == '_'
  915|   933k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  918|   851k|    fn is_possible_pn_chars(c: char) -> bool {
  919|   851k|        Self::is_possible_pn_chars_u(c)
  920|   292k|            || matches!(c,
  921|   213k|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  922|   851k|    }
_RNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  924|   467k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  925|   467k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  926|   467k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  927|   467k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  928|   467k|    }
_RNvNtCsibMRFqTCw42_5oxttl5lexer18resolve_local_name:
  931|  6.98k|pub fn resolve_local_name(
  932|  6.98k|    prefix: &str,
  933|  6.98k|    local: &str,
  934|  6.98k|    might_be_invalid_iri: bool,
  935|  6.98k|    prefixes: &HashMap<String, Iri<String>>,
  936|  6.98k|) -> Result<NamedNode, String> {
  937|  6.98k|    if let Some(start) = prefixes.get(prefix) {
  938|  4.63k|        let iri = format!("{start}{local}");
  939|  4.63k|        if might_be_invalid_iri || start.path().is_empty() {
  940|       |            // We validate again. We always validate if the local part might be the IRI authority.
  941|  3.77k|            if let Err(e) = Iri::parse(iri.as_str()) {
  942|    547|                return Err(format!(
  943|    547|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  944|    547|                ));
  945|  3.23k|            }
  946|    859|        }
  947|  4.08k|        Ok(NamedNode::new_unchecked(iri))
  948|       |    } else {
  949|  2.34k|        Err(format!("The prefix {prefix}: has not been declared"))
  950|       |    }
  951|  6.98k|}
_RNvNtCsibMRFqTCw42_5oxttl5lexer13str_from_utf8:
  953|   299k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  954|   299k|    str::from_utf8(data).map_err(|e| {
  955|       |        (
  956|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|       |            format!("Invalid UTF-8: {e}"),
  958|       |        )
  959|       |            .into()
  960|   299k|    })
  961|   299k|}
_RNvNtCsibMRFqTCw42_5oxttl5lexer16string_from_utf8:
  963|  18.5k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  964|  18.5k|    String::from_utf8(data).map_err(|e| {
  965|       |        (
  966|       |            range.start + e.utf8_error().valid_up_to()
  967|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|       |            format!("Invalid UTF-8: {e}"),
  969|       |        )
  970|       |            .into()
  971|  18.5k|    })
  972|  18.5k|}
_RNvXs2_NtCsibMRFqTCw42_5oxttl5lexerNtB5_7N3TokenNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqB7_:
   12|   237k|#[derive(Debug, PartialEq, Eq)]
_RNvXs8_NtCsibMRFqTCw42_5oxttl5lexerNtB5_11N3LexerModeNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqB7_:
   31|  73.0k|#[derive(Eq, PartialEq)]
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  5.33k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  21.4k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  21.4k|                prefix: pn_prefix,
  322|  21.4k|                local,
  323|  21.4k|                might_be_invalid_iri,
  324|  21.4k|            }),
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  7.38k|            result.and_then(|(name, _)| {
  338|  7.38k|                if name.is_empty() {
  339|  4.15k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  3.23k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  7.38k|            }),
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  577|  2.34k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  802|    582|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  803|    582|            (
  804|    582|                position..position + len + 2,
  805|    582|                format!(
  806|    582|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  807|    582|                ),
  808|    582|            )
  809|    582|        })?;
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  810|    194|        let c = char::from_u32(codepoint).ok_or_else(|| {
  811|    194|            (
  812|    194|                position..position + len +2,
  813|    194|                format!(
  814|    194|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  815|    194|                ),
  816|    194|            )
  817|    194|        })?;
_RNCNvMs_NtCsibMRFqTCw42_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  882|  31.6k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCsibMRFqTCw42_5oxttl5lexer13str_from_utf80B5_:
  954|  1.79k|    str::from_utf8(data).map_err(|e| {
  955|  1.79k|        (
  956|  1.79k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  957|  1.79k|            format!("Invalid UTF-8: {e}"),
  958|  1.79k|        )
  959|  1.79k|            .into()
  960|  1.79k|    })
_RNCNvNtCsibMRFqTCw42_5oxttl5lexer16string_from_utf80B5_:
  964|  2.27k|    String::from_utf8(data).map_err(|e| {
  965|  2.27k|        (
  966|  2.27k|            range.start + e.utf8_error().valid_up_to()
  967|  2.27k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  968|  2.27k|            format!("Invalid UTF-8: {e}"),
  969|  2.27k|        )
  970|  2.27k|            .into()
  971|  2.27k|    })

_RINvMsb_NtCsibMRFqTCw42_5oxttl2n3NtB6_8N3Parser13with_base_iriReECsiOoKLCLNKqP_2n3:
  233|  4.93k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  234|  4.93k|        self.base = Some(Iri::parse(base_iri.into())?);
  235|  4.93k|        Ok(self)
  236|  4.93k|    }
_RNvMsb_NtCsibMRFqTCw42_5oxttl2n3NtB5_8N3Parser3newCsiOoKLCLNKqP_2n3:
  217|  4.93k|    pub fn new() -> Self {
  218|  4.93k|        Self::default()
  219|  4.93k|    }
_RNvXsv_NtCsibMRFqTCw42_5oxttl2n3NtB5_8N3ParserNtNtCs3enrnThfs6H_4core7default7Default7defaultCsiOoKLCLNKqP_2n3:
  206|  4.93k|#[derive(Default)]
_RNvXs_NtCsibMRFqTCw42_5oxttl2n3NtB4_6N3TermINtNtCs3enrnThfs6H_4core7convert4FromNtNtCse77hlhKzJ8Y_5oxrdf10named_node9NamedNodeE4fromB6_:
   51|  5.08k|    fn from(node: NamedNode) -> Self {
   52|  5.08k|        Self::NamedNode(node)
   53|  5.08k|    }
_RNvXs0_NtCsibMRFqTCw42_5oxttl2n3NtB5_6N3TermINtNtCs3enrnThfs6H_4core7convert4FromNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   58|  9.64k|    fn from(node: NamedNodeRef<'_>) -> Self {
   59|  9.64k|        Self::NamedNode(node.into_owned())
   60|  9.64k|    }
_RNvXs1_NtCsibMRFqTCw42_5oxttl2n3NtB5_6N3TermINtNtCs3enrnThfs6H_4core7convert4FromNtNtCse77hlhKzJ8Y_5oxrdf10blank_node9BlankNodeE4fromB7_:
   65|  58.4k|    fn from(node: BlankNode) -> Self {
   66|  58.4k|        Self::BlankNode(node)
   67|  58.4k|    }
_RNvXs2_NtCsibMRFqTCw42_5oxttl2n3NtB5_6N3TermINtNtCs3enrnThfs6H_4core7convert4FromNtNtCse77hlhKzJ8Y_5oxrdf7literal7LiteralE4fromB7_:
   72|  15.2k|    fn from(literal: Literal) -> Self {
   73|  15.2k|        Self::Literal(literal)
   74|  15.2k|    }
_RNvXs8_NtCsibMRFqTCw42_5oxttl2n3NtB5_6N3TermINtNtCs3enrnThfs6H_4core7convert4FromNtNtCse77hlhKzJ8Y_5oxrdf8variable8VariableE4fromB7_:
  130|  2.02k|    fn from(variable: Variable) -> Self {
  131|  2.02k|        Self::Variable(variable)
  132|  2.02k|    }
_RNvMsb_NtCsibMRFqTCw42_5oxttl2n3NtB5_8N3Parser5parse:
  358|  4.93k|    pub fn parse(self) -> LowLevelN3Reader {
  359|  4.93k|        LowLevelN3Reader {
  360|  4.93k|            parser: N3Recognizer::new_parser(self.unchecked, self.base, self.prefixes),
  361|  4.93k|        }
  362|  4.93k|    }
_RNvMse_NtCsibMRFqTCw42_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  546|   603k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  547|   603k|        self.parser.extend_from_slice(other)
  548|   603k|    }
_RNvMse_NtCsibMRFqTCw42_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  553|  4.93k|    pub fn end(&mut self) {
  554|  4.93k|        self.parser.end()
  555|  4.93k|    }
_RNvMse_NtCsibMRFqTCw42_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  558|  4.93k|    pub fn is_end(&self) -> bool {
  559|  4.93k|        self.parser.is_end()
  560|  4.93k|    }
_RNvMse_NtCsibMRFqTCw42_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  566|   971k|    pub fn read_next(&mut self) -> Option<Result<N3Quad, SyntaxError>> {
  567|   971k|        self.parser.read_next()
  568|   971k|    }
_RNvXsf_NtCsibMRFqTCw42_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  620|   316k|    fn error_recovery_state(mut self) -> Self {
  621|   316k|        self.stack.clear();
  622|   316k|        self.terms.clear();
  623|   316k|        self.predicates.clear();
  624|   316k|        self.contexts.clear();
  625|   316k|        self
  626|   316k|    }
_RNvXsf_NtCsibMRFqTCw42_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  628|   374k|    fn recognize_next(
  629|   374k|        mut self,
  630|   374k|        token: N3Token<'_>,
  631|   374k|        context: &mut N3RecognizerContext,
  632|   374k|        results: &mut Vec<N3Quad>,
  633|   374k|        errors: &mut Vec<RuleRecognizerError>,
  634|   374k|    ) -> Self {
  635|   836k|        while let Some(rule) = self.stack.pop() {
  636|   619k|            match rule {
  637|       |                // [1] 	n3Doc 	::= 	( ( n3Statement ".") | sparqlDirective) *
  638|       |                // [2] 	n3Statement 	::= 	n3Directive | triples
  639|       |                // [3] 	n3Directive 	::= 	prefixID | base
  640|       |                // [4] 	sparqlDirective 	::= 	sparqlBase | sparqlPrefix
  641|       |                // [5] 	sparqlBase 	::= 	BASE IRIREF
  642|       |                // [6] 	sparqlPrefix 	::= 	PREFIX PNAME_NS IRIREF
  643|       |                // [7] 	prefixID 	::= 	"@prefix" PNAME_NS IRIREF
  644|       |                // [8] 	base 	::= 	"@base" IRIREF
  645|       |                N3State::N3Doc => {
  646|  45.5k|                    self.stack.push(N3State::N3Doc);
  647|  4.48k|                    match token {
  648|  4.88k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  649|    401|                            self.stack.push(N3State::BaseExpectIri);
  650|    401|                            return self;
  651|       |                        }
  652|  4.48k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  653|    103|                            self.stack.push(N3State::PrefixExpectPrefix);
  654|    103|                            return self;
  655|       |                        }
  656|  5.06k|                        N3Token::LangTag("prefix") => {
  657|  4.08k|                            self.stack.push(N3State::N3DocExpectDot);
  658|  4.08k|                            self.stack.push(N3State::PrefixExpectPrefix);
  659|  4.08k|                            return self;
  660|       |                        }
  661|    984|                        N3Token::LangTag("base") => {
  662|     34|                            self.stack.push(N3State::N3DocExpectDot);
  663|     34|                            self.stack.push(N3State::BaseExpectIri);
  664|     34|                            return self;
  665|       |                        }
  666|  40.8k|                        _ => {
  667|  40.8k|                            self.stack.push(N3State::N3DocExpectDot);
  668|  40.8k|                            self.stack.push(N3State::Triples);
  669|  40.8k|                        }
  670|       |                    }
  671|       |                }
  672|       |                N3State::N3DocExpectDot => {
  673|  5.46k|                    if token == N3Token::Punctuation(".") {
  674|  1.56k|                        return self;
  675|  3.89k|                    }
  676|  3.89k|                    errors.push("A dot is expected at the end of N3 statements".into());
  677|       |                }
  678|    458|                N3State::BaseExpectIri => return match token {
  679|    353|                    N3Token::IriRef(iri) => {
  680|    353|                        match Iri::parse_unchecked(iri) {
  681|    353|                            Ok(iri) => {
  682|    353|                                context.lexer_options.base_iri = Some(iri);
  683|    353|                                self
  684|       |                            }
  685|      0|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  686|       |                        }
  687|       |                    }
  688|    105|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  689|       |                },
  690|  3.76k|                N3State::PrefixExpectPrefix => return match token {
  691|  3.76k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  692|  3.60k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  693|  3.60k|                        self
  694|       |                    }
  695|       |                    _ => {
  696|    427|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  697|       |                    }
  698|       |                },
  699|  3.10k|                N3State::PrefixExpectIri { name } => return match token {
  700|  2.85k|                    N3Token::IriRef(iri) => {
  701|  2.85k|                        match Iri::parse_unchecked(iri) {
  702|  2.85k|                            Ok(iri) => {
  703|  2.85k|                                context.prefixes.insert(name, iri);
  704|  2.85k|                                self
  705|       |                            }
  706|      0|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  707|       |                        }
  708|       |                    }
  709|    253|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  710|       |                },
  711|       |                // [9] 	triples 	::= 	subject predicateObjectList?
  712|  72.4k|                N3State::Triples => {
  713|  72.4k|                    self.stack.push(N3State::TriplesMiddle);
  714|  72.4k|                    self.stack.push(N3State::Path);
  715|  72.4k|                }
  716|  11.1k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  717|  9.10k|                    self.stack.push(N3State::TriplesEnd);
  718|  9.10k|                    self.stack.push(N3State::PredicateObjectList);
  719|  9.10k|                },
  720|  3.57k|                N3State::TriplesEnd => {
  721|  3.57k|                    self.terms.pop();
  722|  3.57k|                }
  723|       |                // [10] 	predicateObjectList 	::= 	verb objectList ( ";" ( verb objectList) ? ) *
  724|  33.2k|                N3State::PredicateObjectList => {
  725|  33.2k|                    self.stack.push(N3State::PredicateObjectListEnd);
  726|  33.2k|                    self.stack.push(N3State::ObjectsList);
  727|  33.2k|                    self.stack.push(N3State::Verb);
  728|  33.2k|                }
  729|       |                N3State::PredicateObjectListEnd => {
  730|  5.07k|                    self.predicates.pop();
  731|  5.07k|                    if token == N3Token::Punctuation(";") {
  732|    693|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  733|    693|                        return self;
  734|  4.37k|                    }
  735|       |                }
  736|  3.01k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  737|  2.33k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  738|  2.33k|                    return self;
  739|    682|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  740|    229|                    self.stack.push(N3State::PredicateObjectListEnd);
  741|    229|                    self.stack.push(N3State::ObjectsList);
  742|    229|                    self.stack.push(N3State::Verb);
  743|    229|                },
  744|       |                // [11] 	objectList 	::= 	object ( "," object) *
  745|  12.7k|                N3State::ObjectsList => {
  746|  12.7k|                    self.stack.push(N3State::ObjectsListEnd);
  747|  12.7k|                    self.stack.push(N3State::Path);
  748|  12.7k|                }
  749|       |                N3State::ObjectsListEnd => {
  750|  5.25k|                    let object = self.terms.pop().unwrap();
  751|  5.25k|                    let subject = self.terms.last().unwrap().clone();
  752|  5.25k|                    results.push(match self.predicates.last().unwrap().clone() {
  753|  5.11k|                        Predicate::Regular(predicate) => self.quad(
  754|  5.11k|                            subject,
  755|  5.11k|                            predicate,
  756|  5.11k|                            object,
  757|  5.11k|                        ),
  758|    146|                        Predicate::Inverted(predicate) => self.quad(
  759|    146|                            object,
  760|    146|                            predicate,
  761|    146|                            subject,
  762|    146|                        )
  763|       |                    });
  764|  5.25k|                    if token == N3Token::Punctuation(",") {
  765|    187|                        self.stack.push(N3State::ObjectsListEnd);
  766|    187|                        self.stack.push(N3State::Path);
  767|    187|                        return self;
  768|  5.07k|                    }
  769|       |                }
  770|       |                // [12] 	verb 	::= 	predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
  771|       |                // [14] 	predicate 	::= 	expression | ( "<-" expression)
  772|  33.4k|                N3State::Verb => match token {
  773|  5.39k|                    N3Token::PlainKeyword("a") => {
  774|  3.94k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
  775|  3.94k|                        return self;
  776|       |                    }
  777|  1.44k|                    N3Token::PlainKeyword("has") => {
  778|     67|                        self.stack.push(N3State::AfterRegularVerb);
  779|     67|                        self.stack.push(N3State::Path);
  780|     67|                        return self;
  781|       |                    }
  782|  1.38k|                    N3Token::PlainKeyword("is") => {
  783|     18|                        self.stack.push(N3State::AfterVerbIs);
  784|     18|                        self.stack.push(N3State::Path);
  785|     18|                        return self;
  786|       |                    }
  787|  17.1k|                    N3Token::Punctuation("=") => {
  788|    337|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
  789|    337|                        return self;
  790|       |                    }
  791|  16.7k|                    N3Token::Punctuation("=>") => {
  792|     38|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  793|     38|                        return self;
  794|       |                    }
  795|  16.7k|                    N3Token::Punctuation("<=") => {
  796|     50|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  797|     50|                        return self;
  798|       |                    }
  799|  16.6k|                    N3Token::Punctuation("<-") => {
  800|    163|                        self.stack.push(N3State::AfterInvertedVerb);
  801|    163|                        self.stack.push(N3State::Path);
  802|    163|                        return self;
  803|       |                    }
  804|  28.8k|                    _ => {
  805|  28.8k|                        self.stack.push(N3State::AfterRegularVerb);
  806|  28.8k|                        self.stack.push(N3State::Path);
  807|  28.8k|                    }
  808|       |                }
  809|  9.04k|                N3State::AfterRegularVerb => {
  810|  9.04k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
  811|  9.04k|                }
  812|    146|                N3State::AfterInvertedVerb => {
  813|    146|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  814|    146|                }
  815|      4|                N3State::AfterVerbIs => return match token {
  816|      2|                    N3Token::PlainKeyword("of") => {
  817|      0|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  818|      0|                        self
  819|       |                    }
  820|       |                    _ => {
  821|      4|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
  822|       |                    }
  823|       |                },
  824|       |                // [13] 	subject 	::= 	expression
  825|       |                // [15] 	object 	::= 	expression
  826|       |                // [16] 	expression 	::= 	path
  827|       |                // [17] 	path 	::= 	pathItem ( ( "!" path) | ( "^" path) ) ?
  828|   127k|                N3State::Path => {
  829|   127k|                    self.stack.push(N3State::PathFollowUp);
  830|   127k|                    self.stack.push(N3State::PathItem);
  831|   127k|                }
  832|  28.3k|                N3State::PathFollowUp => match token {
  833|  16.7k|                    N3Token::Punctuation("!") => {
  834|    182|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
  835|    182|                        self.stack.push(N3State::PathItem);
  836|    182|                        return self;
  837|       |                    }
  838|  16.5k|                    N3Token::Punctuation("^") => {
  839|    232|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
  840|    232|                        self.stack.push(N3State::PathItem);
  841|    232|                        return self;
  842|       |                    }
  843|  27.9k|                    _ => ()
  844|       |                },
  845|    329|                N3State::PathAfterIndicator { is_inverse } => {
  846|    329|                    let predicate = self.terms.pop().unwrap();
  847|    329|                    let previous = self.terms.pop().unwrap();
  848|    329|                    let current = BlankNode::default();
  849|    329|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
  850|    329|                    self.terms.push(current.into());
  851|    329|                    self.stack.push(N3State::PathFollowUp);
  852|       |                }
  853|       |                // [18] 	pathItem 	::= 	iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
  854|       |                // [19] 	literal 	::= 	rdfLiteral | numericLiteral | BOOLEAN_LITERAL
  855|       |                // [20] 	blankNodePropertyList 	::= 	"[" predicateObjectList "]"
  856|       |                // [21] 	iriPropertyList 	::= 	IPLSTART iri predicateObjectList "]"
  857|       |                // [22] 	collection 	::= 	"(" object* ")"
  858|       |                // [23] 	formula 	::= 	"{" formulaContent? "}"
  859|       |                // [25] 	numericLiteral 	::= 	DOUBLE | DECIMAL | INTEGER
  860|       |                // [26] 	rdfLiteral 	::= 	STRING ( LANGTAG | ( "^^" iri) ) ?
  861|       |                // [27] 	iri 	::= 	IRIREF | prefixedName
  862|       |                // [28] 	prefixedName 	::= 	PNAME_LN | PNAME_NS
  863|       |                // [29] 	blankNode 	::= 	BLANK_NODE_LABEL | ANON
  864|       |                // [30] 	quickVar 	::= 	QUICK_VAR_NAME
  865|       |                N3State::PathItem => {
  866|   127k|                    return match token {
  867|    648|                        N3Token::IriRef(iri) => {
  868|    648|                            self.terms.push(NamedNode::new_unchecked(iri).into());
  869|    648|                            self
  870|       |                        }
  871|  6.74k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  872|  3.99k|                            Ok(t) => {
  873|  3.99k|                                self.terms.push(t.into());
  874|  3.99k|                                self
  875|       |                            }
  876|  2.74k|                            Err(e) =>  self.error(errors, e)
  877|       |                        }
  878|  3.57k|                        N3Token::BlankNodeLabel(bnode) => {
  879|  3.57k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
  880|  3.57k|                            self
  881|       |                        }
  882|  2.02k|                        N3Token::Variable(name) => {
  883|  2.02k|                            self.terms.push(Variable::new_unchecked(name).into());
  884|  2.02k|                            self
  885|       |                        }
  886|  91.1k|                        N3Token::Punctuation("[") => {
  887|  26.3k|                            self.stack.push(N3State::PropertyListMiddle);
  888|  26.3k|                            self
  889|       |                        }
  890|  64.7k|                        N3Token::Punctuation("(") => {
  891|  11.7k|                            self.stack.push(N3State::CollectionBeginning);
  892|  11.7k|                            self
  893|       |                        }
  894|  10.8k|                        N3Token::String(value) => {
  895|  10.8k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
  896|  10.8k|                            self
  897|       |                        }
  898|  3.44k|                        N3Token::Integer(v) => {
  899|  3.44k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  900|  3.44k|                            self
  901|       |                        }
  902|    556|                        N3Token::Decimal(v) => {
  903|    556|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  904|    556|                            self
  905|       |                        }
  906|    273|                        N3Token::Double(v) => {
  907|    273|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  908|    273|                            self
  909|       |                        }
  910|  7.13k|                        N3Token::PlainKeyword("true") => {
  911|    298|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  912|    298|                            self
  913|       |                        }
  914|  6.84k|                        N3Token::PlainKeyword("false") => {
  915|    866|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  916|    866|                            self
  917|       |                        }
  918|  52.9k|                        N3Token::Punctuation("{") => {
  919|  34.5k|                            self.contexts.push(BlankNode::default());
  920|  34.5k|                            self.stack.push(N3State::FormulaContent);
  921|  34.5k|                            self
  922|       |                        }
  923|       |                        _ =>
  924|  25.4k|                            self.error(errors, "TOKEN is not a valid RDF value")
  925|       |
  926|       |                    }
  927|       |                }
  928|  24.3k|                N3State::PropertyListMiddle => match token {
  929|  11.8k|                    N3Token::Punctuation("]") => {
  930|     99|                        self.terms.push(BlankNode::default().into());
  931|     99|                        return self;
  932|       |                    }
  933|  4.96k|                    N3Token::PlainKeyword("id") => {
  934|    118|                        self.stack.push(N3State::IriPropertyList);
  935|    118|                        return self;
  936|       |                    }
  937|  24.1k|                    _ => {
  938|  24.1k|                        self.terms.push(BlankNode::default().into());
  939|  24.1k|                        self.stack.push(N3State::PropertyListEnd);
  940|  24.1k|                        self.stack.push(N3State::PredicateObjectList);
  941|  24.1k|                    }
  942|       |                }
  943|  1.26k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
  944|     22|                    return self;
  945|  1.23k|                } else {
  946|  1.23k|                    errors.push("blank node property lists should end with a ']'".into());
  947|  1.23k|                }
  948|    116|                N3State::IriPropertyList => return match token {
  949|     20|                    N3Token::IriRef(id) => {
  950|     20|                        self.terms.push(NamedNode::new_unchecked(id).into());
  951|     20|                        self.stack.push(N3State::PropertyListEnd);
  952|     20|                        self.stack.push(N3State::PredicateObjectList);
  953|     20|                        self
  954|       |                    }
  955|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  956|      0|                        Ok(t) => {
  957|      0|                            self.terms.push(t.into());
  958|      0|                            self.stack.push(N3State::PropertyListEnd);
  959|      0|                            self.stack.push(N3State::PredicateObjectList);
  960|      0|                            self
  961|       |                        }
  962|      0|                        Err(e) => {
  963|      0|                            self.error(errors, e)
  964|       |                        }
  965|       |                    }
  966|       |                    _ => {
  967|     96|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
  968|       |                    }
  969|       |                },
  970|  11.4k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
  971|    294|                    self.terms.push(rdf::NIL.into());
  972|    294|                    return self;
  973|  11.1k|                } else {
  974|  11.1k|                    let root = BlankNode::default();
  975|  11.1k|                    self.terms.push(root.clone().into());
  976|  11.1k|                    self.terms.push(root.into());
  977|  11.1k|                    self.stack.push(N3State::CollectionPossibleEnd);
  978|  11.1k|                    self.stack.push(N3State::Path);
  979|  11.1k|                },
  980|       |                N3State::CollectionPossibleEnd => {
  981|  2.31k|                    let value = self.terms.pop().unwrap();
  982|  2.31k|                    let old = self.terms.pop().unwrap();
  983|  2.31k|                    results.push(self.quad(
  984|  2.31k|                        old.clone(),
  985|  2.31k|                        rdf::FIRST,
  986|  2.31k|                        value,
  987|  2.31k|                    ));
  988|  2.31k|                    if let N3Token::Punctuation(")") = token {
  989|    782|                        results.push(self.quad(
  990|    782|                            old,
  991|    782|                            rdf::REST,
  992|    782|                            rdf::NIL,
  993|    782|                        ));
  994|    782|                        return self;
  995|  1.52k|                    }
  996|  1.52k|                    let new = BlankNode::default();
  997|  1.52k|                    results.push(self.quad(
  998|  1.52k|                        old,
  999|  1.52k|                        rdf::REST,
 1000|  1.52k|                        new.clone(),
 1001|  1.52k|                    ));
 1002|  1.52k|                    self.terms.push(new.into());
 1003|  1.52k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1004|  1.52k|                    self.stack.push(N3State::Path);
 1005|       |                }
 1006|  10.6k|                N3State::LiteralPossibleSuffix { value } => {
 1007|  10.6k|                    match token {
 1008|    322|                        N3Token::LangTag(lang) => {
 1009|    322|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1010|    322|                            return self;
 1011|       |                        }
 1012|  1.77k|                        N3Token::Punctuation("^^") => {
 1013|  1.03k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1014|  1.03k|                            return self;
 1015|       |                        }
 1016|  9.25k|                        _ => {
 1017|  9.25k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1018|  9.25k|                        }
 1019|       |                    }
 1020|       |                }
 1021|    825|                N3State::LiteralExpectDatatype { value } => {
 1022|    825|                    match token {
 1023|    140|                        N3Token::IriRef(datatype) => {
 1024|    140|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1025|    140|                            return self;
 1026|       |                        }
 1027|    245|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1028|     95|                            Ok(datatype) => {
 1029|     95|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1030|     95|                                return self;
 1031|       |                            }
 1032|    150|                            Err(e) => {
 1033|    150|                                return self.error(errors, e);
 1034|       |                            }
 1035|       |                        }
 1036|    440|                        _ => {
 1037|    440|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1038|    440|                            self.stack.clear();
 1039|    440|                        }
 1040|       |                    }
 1041|       |                }
 1042|       |                // [24] 	formulaContent 	::= 	( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1043|       |                N3State::FormulaContent => {
 1044|    937|                    match token {
 1045|  32.9k|                        N3Token::Punctuation("}") => {
 1046|  3.90k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1047|  3.90k|                            return self;
 1048|       |                        }
 1049|    971|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1050|     34|                            self.stack.push(N3State::FormulaContent);
 1051|     34|                            self.stack.push(N3State::BaseExpectIri);
 1052|     34|                            return self;
 1053|       |                        }
 1054|    937|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1055|     16|                            self.stack.push(N3State::FormulaContent);
 1056|     16|                            self.stack.push(N3State::PrefixExpectPrefix);
 1057|     16|                            return self;
 1058|       |                        }
 1059|    101|                        N3Token::LangTag("prefix") => {
 1060|     43|                            self.stack.push(N3State::FormulaContentExpectDot);
 1061|     43|                            self.stack.push(N3State::PrefixExpectPrefix);
 1062|     43|                            return self;
 1063|       |                        }
 1064|     58|                        N3Token::LangTag("base") => {
 1065|      1|                            self.stack.push(N3State::FormulaContentExpectDot);
 1066|      1|                            self.stack.push(N3State::BaseExpectIri);
 1067|      1|                            return self;
 1068|       |                        }
 1069|  31.5k|                        _ => {
 1070|  31.5k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1071|  31.5k|                            self.stack.push(N3State::Triples);
 1072|  31.5k|                        }
 1073|       |                    }
 1074|       |                }
 1075|       |                N3State::FormulaContentExpectDot => {
 1076|  2.04k|                    match token {
 1077|  1.39k|                        N3Token::Punctuation("}") => {
 1078|    684|                            self.terms.push(self.contexts.pop().unwrap().into());
 1079|    684|                            return self;
 1080|       |                        }
 1081|    711|                        N3Token::Punctuation(".") => {
 1082|    192|                            self.stack.push(N3State::FormulaContent);
 1083|    192|                            return self;
 1084|       |                        }
 1085|  1.17k|                        _ => {
 1086|  1.17k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1087|  1.17k|                            self.stack.push(N3State::FormulaContent);
 1088|  1.17k|                        }
 1089|       |                    }
 1090|       |                }
 1091|       |            }
 1092|       |        }
 1093|       |        // Empty stack
 1094|   217k|        if token == N3Token::Punctuation(".") {
 1095|  43.6k|            self.stack.push(N3State::N3Doc);
 1096|  43.6k|            self
 1097|       |        } else {
 1098|   173k|            self
 1099|       |        }
 1100|   374k|    }
_RNvXsf_NtCsibMRFqTCw42_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1102|  4.93k|    fn recognize_end(
 1103|  4.93k|        self,
 1104|  4.93k|        _state: &mut N3RecognizerContext,
 1105|  4.93k|        _results: &mut Vec<Self::Output>,
 1106|  4.93k|        errors: &mut Vec<RuleRecognizerError>,
 1107|  4.93k|    ) {
 1108|  4.93k|        match &*self.stack {
 1109|  4.93k|            [] | [N3State::N3Doc] => (),
 1110|    426|            _ => errors.push("Unexpected end".into()), //TODO
 1111|       |        }
 1112|  4.93k|    }
_RNvXsf_NtCsibMRFqTCw42_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1114|  1.30M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1115|  1.30M|        &context.lexer_options
 1116|  1.30M|    }
_RNvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB5_12N3Recognizer10new_parser:
 1120|  4.93k|    pub fn new_parser(
 1121|  4.93k|        unchecked: bool,
 1122|  4.93k|        base_iri: Option<Iri<String>>,
 1123|  4.93k|        prefixes: HashMap<String, Iri<String>>,
 1124|  4.93k|    ) -> Parser<Self> {
 1125|  4.93k|        Parser::new(
 1126|  4.93k|            Lexer::new(
 1127|  4.93k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1128|  4.93k|                MIN_BUFFER_SIZE,
 1129|  4.93k|                MAX_BUFFER_SIZE,
 1130|  4.93k|                true,
 1131|  4.93k|                Some(b"#"),
 1132|  4.93k|            ),
 1133|  4.93k|            N3Recognizer {
 1134|  4.93k|                stack: vec![N3State::N3Doc],
 1135|  4.93k|                terms: Vec::new(),
 1136|  4.93k|                predicates: Vec::new(),
 1137|  4.93k|                contexts: Vec::new(),
 1138|  4.93k|            },
 1139|  4.93k|            N3RecognizerContext {
 1140|  4.93k|                lexer_options: N3LexerOptions { base_iri },
 1141|  4.93k|                prefixes,
 1142|  4.93k|            },
 1143|  4.93k|        )
 1144|  4.93k|    }
_RNvXsm_NtCsibMRFqTCw42_5oxttl2n3NtB5_6N3TermNtNtCs3enrnThfs6H_4core5clone5Clone5cloneB7_:
   25|  12.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsw_NtCsibMRFqTCw42_5oxttl2n3NtB5_9PredicateNtNtCs3enrnThfs6H_4core5clone5Clone5cloneB7_:
  597|  5.25k|#[derive(Clone)]
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCsbqtYJIZlK4w_5alloc6string6StringEB8_:
 1147|  2.89k|    fn error(
 1148|  2.89k|        mut self,
 1149|  2.89k|        errors: &mut Vec<RuleRecognizerError>,
 1150|  2.89k|        msg: impl Into<RuleRecognizerError>,
 1151|  2.89k|    ) -> Self {
 1152|  2.89k|        errors.push(msg.into());
 1153|  2.89k|        self.stack.clear();
 1154|  2.89k|        self
 1155|  2.89k|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1147|  26.3k|    fn error(
 1148|  26.3k|        mut self,
 1149|  26.3k|        errors: &mut Vec<RuleRecognizerError>,
 1150|  26.3k|        msg: impl Into<RuleRecognizerError>,
 1151|  26.3k|    ) -> Self {
 1152|  26.3k|        errors.push(msg.into());
 1153|  26.3k|        self.stack.clear();
 1154|  26.3k|        self
 1155|  26.3k|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1157|  5.25k|    fn quad(
 1158|  5.25k|        &self,
 1159|  5.25k|        subject: impl Into<N3Term>,
 1160|  5.25k|        predicate: impl Into<N3Term>,
 1161|  5.25k|        object: impl Into<N3Term>,
 1162|  5.25k|    ) -> N3Quad {
 1163|  5.25k|        N3Quad {
 1164|  5.25k|            subject: subject.into(),
 1165|  5.25k|            predicate: predicate.into(),
 1166|  5.25k|            object: object.into(),
 1167|  5.25k|            graph_name: self
 1168|  5.25k|                .contexts
 1169|  5.25k|                .last()
 1170|  5.25k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1171|  5.25k|        }
 1172|  5.25k|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCse77hlhKzJ8Y_5oxrdf10blank_node9BlankNodeEB8_:
 1157|    135|    fn quad(
 1158|    135|        &self,
 1159|    135|        subject: impl Into<N3Term>,
 1160|    135|        predicate: impl Into<N3Term>,
 1161|    135|        object: impl Into<N3Term>,
 1162|    135|    ) -> N3Quad {
 1163|    135|        N3Quad {
 1164|    135|            subject: subject.into(),
 1165|    135|            predicate: predicate.into(),
 1166|    135|            object: object.into(),
 1167|    135|            graph_name: self
 1168|    135|                .contexts
 1169|    135|                .last()
 1170|    135|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1171|    135|        }
 1172|    135|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1157|    782|    fn quad(
 1158|    782|        &self,
 1159|    782|        subject: impl Into<N3Term>,
 1160|    782|        predicate: impl Into<N3Term>,
 1161|    782|        object: impl Into<N3Term>,
 1162|    782|    ) -> N3Quad {
 1163|    782|        N3Quad {
 1164|    782|            subject: subject.into(),
 1165|    782|            predicate: predicate.into(),
 1166|    782|            object: object.into(),
 1167|    782|            graph_name: self
 1168|    782|                .contexts
 1169|    782|                .last()
 1170|    782|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1171|    782|        }
 1172|    782|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1157|  2.31k|    fn quad(
 1158|  2.31k|        &self,
 1159|  2.31k|        subject: impl Into<N3Term>,
 1160|  2.31k|        predicate: impl Into<N3Term>,
 1161|  2.31k|        object: impl Into<N3Term>,
 1162|  2.31k|    ) -> N3Quad {
 1163|  2.31k|        N3Quad {
 1164|  2.31k|            subject: subject.into(),
 1165|  2.31k|            predicate: predicate.into(),
 1166|  2.31k|            object: object.into(),
 1167|  2.31k|            graph_name: self
 1168|  2.31k|                .contexts
 1169|  2.31k|                .last()
 1170|  2.31k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1171|  2.31k|        }
 1172|  2.31k|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1157|  1.52k|    fn quad(
 1158|  1.52k|        &self,
 1159|  1.52k|        subject: impl Into<N3Term>,
 1160|  1.52k|        predicate: impl Into<N3Term>,
 1161|  1.52k|        object: impl Into<N3Term>,
 1162|  1.52k|    ) -> N3Quad {
 1163|  1.52k|        N3Quad {
 1164|  1.52k|            subject: subject.into(),
 1165|  1.52k|            predicate: predicate.into(),
 1166|  1.52k|            object: object.into(),
 1167|  1.52k|            graph_name: self
 1168|  1.52k|                .contexts
 1169|  1.52k|                .last()
 1170|  1.52k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1171|  1.52k|        }
 1172|  1.52k|    }
_RINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCse77hlhKzJ8Y_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1157|    194|    fn quad(
 1158|    194|        &self,
 1159|    194|        subject: impl Into<N3Term>,
 1160|    194|        predicate: impl Into<N3Term>,
 1161|    194|        object: impl Into<N3Term>,
 1162|    194|    ) -> N3Quad {
 1163|    194|        N3Quad {
 1164|    194|            subject: subject.into(),
 1165|    194|            predicate: predicate.into(),
 1166|    194|            object: object.into(),
 1167|    194|            graph_name: self
 1168|    194|                .contexts
 1169|    194|                .last()
 1170|    194|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1171|    194|        }
 1172|    194|    }
_RNCINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1170|  1.32k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCse77hlhKzJ8Y_5oxrdf10blank_node9BlankNodeE0Ba_:
 1170|     69|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1170|    151|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1170|    562|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCse77hlhKzJ8Y_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1170|    411|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsibMRFqTCw42_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCse77hlhKzJ8Y_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1170|    112|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RNvXNtNtCsibMRFqTCw42_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsbqtYJIZlK4w_5alloc6string6StringEE4fromB6_:
   31|   232k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   232k|        Self {
   33|   232k|            location,
   34|   232k|            message: message.into(),
   35|   232k|        }
   36|   232k|    }
_RNvXNtNtCsibMRFqTCw42_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|  94.4k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  94.4k|        Self {
   33|  94.4k|            location,
   34|  94.4k|            message: message.into(),
   35|  94.4k|        }
   36|  94.4k|    }
_RNvXs_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsbqtYJIZlK4w_5alloc6string6StringEE4fromB8_:
   41|  5.72k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  5.72k|        (*location.start()..*location.end() + 1, message).into()
   43|  5.72k|    }
_RNvXs_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  63.0k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  63.0k|        (*location.start()..*location.end() + 1, message).into()
   43|  63.0k|    }
_RNvXs0_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromTjNtNtCsbqtYJIZlK4w_5alloc6string6StringEE4fromB9_:
   47|  5.37k|    fn from((location, message): (usize, S)) -> Self {
   48|  5.37k|        (location..=location, message).into()
   49|  5.37k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  4.93k|    pub fn new(
   74|  4.93k|        parser: R,
   75|  4.93k|        min_buffer_size: usize,
   76|  4.93k|        max_buffer_size: usize,
   77|  4.93k|        is_line_jump_whitespace: bool,
   78|  4.93k|        line_comment_start: Option<&'static [u8]>,
   79|  4.93k|    ) -> Self {
   80|  4.93k|        Self {
   81|  4.93k|            parser,
   82|  4.93k|            data: Vec::new(),
   83|  4.93k|            position: Position {
   84|  4.93k|                line_start_buffer_offset: 0,
   85|  4.93k|                buffer_offset: 0,
   86|  4.93k|                global_offset: 0,
   87|  4.93k|                global_line: 0,
   88|  4.93k|            },
   89|  4.93k|            previous_position: Position {
   90|  4.93k|                line_start_buffer_offset: 0,
   91|  4.93k|                buffer_offset: 0,
   92|  4.93k|                global_offset: 0,
   93|  4.93k|                global_line: 0,
   94|  4.93k|            },
   95|  4.93k|            is_ending: false,
   96|  4.93k|            min_buffer_size,
   97|  4.93k|            max_buffer_size,
   98|  4.93k|            is_line_jump_whitespace,
   99|  4.93k|            line_comment_start,
  100|  4.93k|        }
  101|  4.93k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|   603k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|   603k|        self.shrink_data();
  105|   603k|        self.data.extend_from_slice(other);
  106|   603k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  4.93k|    pub fn end(&mut self) {
  110|  4.93k|        self.is_ending = true;
  111|  4.93k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  1.30M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  1.30M|        self.skip_whitespaces_and_comments()?;
  168|  1.29M|        self.previous_position = self.position;
  169|  1.29M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  1.29M|            &self.data[self.position.buffer_offset..],
  171|  1.29M|            self.is_ending,
  172|  1.29M|            options,
  173|  1.29M|        ) else {
  174|   607k|            return if self.is_ending {
  175|  11.3k|                if self.position.buffer_offset == self.data.len() {
  176|  9.87k|                    None // We have finished
  177|       |                } else {
  178|  1.48k|                    let (new_line_jumps, new_line_start) =
  179|  1.48k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  1.48k|                            &self.data[self.position.buffer_offset..],
  181|  1.48k|                        );
  182|  1.48k|                    if new_line_jumps > 0 {
  183|     82|                        self.position.line_start_buffer_offset =
  184|     82|                            self.position.buffer_offset + new_line_start;
  185|  1.40k|                    }
  186|  1.48k|                    self.position.global_offset +=
  187|  1.48k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  1.48k|                    self.position.buffer_offset = self.data.len();
  189|  1.48k|                    self.position.global_line += new_line_jumps;
  190|  1.48k|                    let new_position = TextPosition {
  191|  1.48k|                        line: self.position.global_line,
  192|  1.48k|                        column: Self::column_from_bytes(
  193|  1.48k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  1.48k|                        ),
  195|  1.48k|                        offset: self.position.global_offset,
  196|  1.48k|                    };
  197|  1.48k|                    let error = SyntaxError {
  198|  1.48k|                        location: new_position..new_position,
  199|  1.48k|                        message: "Unexpected end of file".into(),
  200|  1.48k|                    };
  201|  1.48k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  1.48k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|   596k|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|   690k|        let (new_line_jumps, new_line_start) =
  218|   690k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|   690k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|   690k|            );
  221|   690k|        if new_line_jumps > 0 {
  222|  1.12k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|   689k|        }
  224|   690k|        self.position.buffer_offset += consumed;
  225|   690k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|   690k|        self.position.global_line += new_line_jumps;
  227|   690k|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|   690k|        }))
  231|  1.30M|    }
_RNCNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|   315k|        Some(result.map_err(|e| SyntaxError {
  228|   315k|            location: self.location_from_buffer_offset_range(e.location),
  229|   315k|            message: e.message,
  230|   315k|        }))
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|   315k|    pub fn location_from_buffer_offset_range(
  234|   315k|        &self,
  235|   315k|        offset_range: Range<usize>,
  236|   315k|    ) -> Range<TextPosition> {
  237|   315k|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|   315k|        let (start_extra_line_jumps, start_line_start) =
  239|   315k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|   315k|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|   315k|            );
  242|   315k|        let start_line_start = if start_extra_line_jumps > 0 {
  243|    261|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|   315k|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|   315k|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|   315k|        let (end_extra_line_jumps, end_line_start) =
  249|   315k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|   315k|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|   315k|            );
  252|   315k|        let end_line_start = if end_extra_line_jumps > 0 {
  253|    663|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|   314k|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|   315k|        TextPosition {
  258|   315k|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|   315k|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|   315k|            offset: self.previous_position.global_offset
  261|   315k|                + u64::try_from(offset_range.start).unwrap(),
  262|   315k|        }..TextPosition {
  263|   315k|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|   315k|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|   315k|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|   315k|        }
  267|   315k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|  36.3k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|  36.3k|        TextPosition {
  271|  36.3k|            line: self.previous_position.global_line,
  272|  36.3k|            column: Self::column_from_bytes(
  273|  36.3k|                &self.data[self.previous_position.line_start_buffer_offset
  274|  36.3k|                    ..self.previous_position.buffer_offset],
  275|  36.3k|            ),
  276|  36.3k|            offset: self.previous_position.global_offset,
  277|  36.3k|        }..TextPosition {
  278|  36.3k|            line: self.position.global_line,
  279|  36.3k|            column: Self::column_from_bytes(
  280|  36.3k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|  36.3k|            ),
  282|  36.3k|            offset: self.position.global_offset,
  283|  36.3k|        }
  284|  36.3k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|  36.3k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|  36.3k|        String::from_utf8_lossy(
  288|  36.3k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|  36.3k|        )
  290|  36.3k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|   613k|    pub fn is_end(&self) -> bool {
  293|   613k|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|   613k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  1.30M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  1.30M|            self.skip_whitespaces()?;
  300|       |
  301|  1.30M|            let buf = &self.data[self.position.buffer_offset..];
  302|  1.30M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  1.30M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  6.74k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  1.71k|                        let mut end_position = line_comment_start.len() + end;
  307|  1.71k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  1.58k|                            if let Some(c) = buf.get(end_position + 1) {
  310|    140|                                if *c == b'\n' {
  311|      3|                                    end_position += 1;
  312|    137|                                }
  313|  1.44k|                            } else if !self.is_ending {
  314|  1.43k|                                return None; // We need to read more
  315|      9|                            }
  316|    133|                        }
  317|    282|                        let comment_size = end_position + 1;
  318|    282|                        self.position.buffer_offset += comment_size;
  319|    282|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|    282|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|    282|                        self.position.global_line += 1;
  322|    282|                        continue;
  323|  5.02k|                    }
  324|  5.02k|                    if self.is_ending {
  325|     92|                        self.position.buffer_offset = self.data.len(); // EOF
  326|     92|                        return Some(());
  327|  4.93k|                    }
  328|  4.93k|                    return None; // We need more data
  329|  1.29M|                }
  330|      0|            }
  331|  1.29M|            return Some(());
  332|       |        }
  333|  1.30M|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  1.30M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  1.30M|        if self.is_line_jump_whitespace {
  337|  1.30M|            let mut i = self.position.buffer_offset;
  338|  1.32M|            while let Some(c) = self.data.get(i) {
  339|  1.16M|                match c {
  340|  2.44k|                    b' ' | b'\t' => {
  341|  2.44k|                        self.position.buffer_offset += 1;
  342|  2.44k|                        self.position.global_offset += 1;
  343|  2.44k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  4.72k|                        let mut increment: u8 = 1;
  347|  4.72k|                        if let Some(c) = self.data.get(i + 1) {
  348|  3.90k|                            if *c == b'\n' {
  349|    140|                                increment += 1;
  350|    140|                                i += 1;
  351|  3.76k|                            }
  352|    826|                        } else if !self.is_ending {
  353|    800|                            return None; // We need to read more
  354|     26|                        }
  355|  3.92k|                        self.position.buffer_offset += usize::from(increment);
  356|  3.92k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  3.92k|                        self.position.global_offset += u64::from(increment);
  358|  3.92k|                        self.position.global_line += 1;
  359|       |                    }
  360|  11.9k|                    b'\n' => {
  361|  11.9k|                        self.position.buffer_offset += 1;
  362|  11.9k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|  11.9k|                        self.position.global_offset += 1;
  364|  11.9k|                        self.position.global_line += 1;
  365|  11.9k|                    }
  366|  1.14M|                    _ => return Some(()),
  367|       |                }
  368|  18.3k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   159k|        Some(())
  383|  1.30M|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|   603k|    fn shrink_data(&mut self) {
  386|   603k|        if self.position.line_start_buffer_offset > 0 {
  387|  9.35k|            self.data
  388|  9.35k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  9.35k|            self.data
  390|  9.35k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  9.35k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  9.35k|            self.position.line_start_buffer_offset = 0;
  393|  9.35k|            self.previous_position = self.position;
  394|   593k|        }
  395|   603k|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  1.32M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  1.32M|        let mut num_of_jumps = 0;
  399|  1.32M|        let mut last_jump_pos = 0;
  400|  1.32M|        let mut previous_cr = 0;
  401|  1.32M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  6.32k|            if bytes[pos] == b'\r' {
  403|    728|                previous_cr = pos;
  404|    728|                num_of_jumps += 1;
  405|    728|                last_jump_pos = pos + 1;
  406|    728|            } else {
  407|  5.59k|                if previous_cr < pos - 1 {
  408|  2.92k|                    // We count \r\n as a single line jump
  409|  2.92k|                    num_of_jumps += 1;
  410|  2.92k|                }
  411|  5.59k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  1.32M|        (num_of_jumps, last_jump_pos)
  415|  1.32M|    }
_RNvMs1_NtNtCsibMRFqTCw42_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  1.15M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  1.15M|        match str::from_utf8(bytes) {
  419|   584k|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|   572k|            Err(e) => {
  421|   572k|                if e.valid_up_to() == 0 {
  422|   121k|                    0
  423|       |                } else {
  424|   451k|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  1.15M|    }

_RNvXNtNtCsibMRFqTCw42_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromNtNtCsbqtYJIZlK4w_5alloc6string6StringE4fromB6_:
   39|  2.89k|    fn from(message: S) -> Self {
   40|  2.89k|        Self {
   41|  2.89k|            message: message.into(),
   42|  2.89k|        }
   43|  2.89k|    }
_RNvXNtNtCsibMRFqTCw42_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs3enrnThfs6H_4core7convert4FromReE4fromB6_:
   39|  33.4k|    fn from(message: S) -> Self {
   40|  33.4k|        Self {
   41|  33.4k|            message: message.into(),
   42|  33.4k|        }
   43|  33.4k|    }
_RNvMs_NtNtCsibMRFqTCw42_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3newB8_:
   56|  4.93k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  4.93k|        Self {
   58|  4.93k|            lexer,
   59|  4.93k|            state: Some(recognizer),
   60|  4.93k|            context,
   61|  4.93k|            results: vec![],
   62|  4.93k|            errors: vec![],
   63|  4.93k|        }
   64|  4.93k|    }
_RNvMs_NtNtCsibMRFqTCw42_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE17extend_from_sliceB8_:
   66|   603k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|   603k|        self.lexer.extend_from_slice(other)
   68|   603k|    }
_RNvMs_NtNtCsibMRFqTCw42_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3endB8_:
   71|  4.93k|    pub fn end(&mut self) {
   72|  4.93k|        self.lexer.end()
   73|  4.93k|    }
_RNvMs_NtNtCsibMRFqTCw42_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE6is_endB8_:
   76|  4.93k|    pub fn is_end(&self) -> bool {
   77|  4.93k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  4.93k|    }
_RNvMs_NtNtCsibMRFqTCw42_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE9read_nextB8_:
   80|   971k|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  1.35M|            if let Some(error) = self.errors.pop() {
   83|  36.3k|                return Some(Err(SyntaxError {
   84|  36.3k|                    location: self.lexer.last_token_location(),
   85|  36.3k|                    message: error
   86|  36.3k|                        .message
   87|  36.3k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|  36.3k|                }));
   89|  1.31M|            }
   90|  1.31M|            if let Some(result) = self.results.pop() {
   91|  10.2k|                return Some(Ok(result));
   92|  1.30M|            }
   93|  1.30M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|   691k|                match result {
   95|   374k|                    Ok(token) => {
   96|   374k|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|   374k|                        });
  104|   374k|                        continue;
  105|       |                    }
  106|   316k|                    Err(e) => {
  107|   316k|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|   316k|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|   613k|            }
  112|   613k|            if self.lexer.is_end() {
  113|  9.87k|                let Some(state) = self.state.take() else {
  114|  4.93k|                    return None;
  115|       |                };
  116|  4.93k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|   603k|                return None;
  119|       |            }
  120|       |        }
  121|   971k|    }
_RNCNvMs_NtNtCsibMRFqTCw42_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_2n312N3RecognizerE9read_next0Ba_:
   96|   374k|                        self.state = self.state.take().map(|state| {
   97|   374k|                            state.recognize_next(
   98|   374k|                                token,
   99|   374k|                                &mut self.context,
  100|   374k|                                &mut self.results,
  101|   374k|                                &mut self.errors,
  102|   374k|                            )
  103|   374k|                        });


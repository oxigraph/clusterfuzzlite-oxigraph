_RINvMNtCs1bpcFFYlEl0_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|  1.50k|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|  1.50k|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|  1.50k|        let mut val = self.0.load(Relaxed);
   37|  1.50k|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|  1.50k|        }
   41|  1.50k|        val
   42|  1.50k|    }
_RINvMs_NtCs1bpcFFYlEl0_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|  1.50k|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|  1.50k|        self.0.unsync_init(|| init() as usize) != 0
   55|  1.50k|    }
_RNCINvMs_NtCs1bpcFFYlEl0_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs1bpcFFYlEl0_9getrandom16getrandom_uninitCs5oKiaLr02aj_9rand_core:
  396|  1.50k|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  397|  1.50k|    if !dest.is_empty() {
  398|  1.50k|        imp::getrandom_inner(dest)?;
  399|      0|    }
  400|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  401|       |    // since it returned `Ok`.
  402|  1.50k|    Ok(unsafe { slice_assume_init_mut(dest) })
  403|  1.50k|}
_RNvCs1bpcFFYlEl0_9getrandom9getrandomCs5oKiaLr02aj_9rand_core:
  366|  1.50k|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  367|  1.50k|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  368|  1.50k|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  369|  1.50k|    // `dest`.
  370|  1.50k|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  371|  1.50k|    Ok(())
  372|  1.50k|}

_RNvNtCs1bpcFFYlEl0_9getrandom3imp15getrandom_inner:
    9|  1.50k|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|  1.50k|    // getrandom(2) was introduced in Linux 3.17
   11|  1.50k|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|  1.50k|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|  1.50k|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|  1.50k|}
_RNvNtCs1bpcFFYlEl0_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}

_RINvNtCs1bpcFFYlEl0_9getrandom4util19slice_as_uninit_muthECs5oKiaLr02aj_9rand_core:
   32|  1.50k|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|  1.50k|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|  1.50k|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|  1.50k|}
_RINvNtCs1bpcFFYlEl0_9getrandom4util21slice_assume_init_muthECs5oKiaLr02aj_9rand_core:
    8|  1.50k|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|  1.50k|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|  1.50k|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|  1.50k|}

_RINvNtCs1bpcFFYlEl0_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   55|  1.50k|pub fn sys_fill_exact(
   56|  1.50k|    mut buf: &mut [MaybeUninit<u8>],
   57|  1.50k|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   58|  1.50k|) -> Result<(), Error> {
   59|  3.00k|    while !buf.is_empty() {
   60|  1.50k|        let res = sys_fill(buf);
   61|  1.50k|        match res {
   62|  1.50k|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   63|       |            -1 => {
   64|      0|                let err = last_os_error();
   65|      0|                // We should try again if the call was interrupted.
   66|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   67|      0|                    return Err(err);
   68|      0|                }
   69|       |            }
   70|       |            // Negative return codes not equal to -1 should be impossible.
   71|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   72|       |            // should be an infinite stream of random bytes.
   73|      0|            _ => return Err(Error::UNEXPECTED),
   74|       |        }
   75|       |    }
   76|  1.50k|    Ok(())
   77|  1.50k|}
_RNvNtCs1bpcFFYlEl0_9getrandom9util_libc17getrandom_syscall:
  153|  1.50k|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  154|  1.50k|    unsafe {
  155|  1.50k|        libc::syscall(
  156|  1.50k|            libc::SYS_getrandom,
  157|  1.50k|            buf.as_mut_ptr() as *mut libc::c_void,
  158|  1.50k|            buf.len(),
  159|  1.50k|            0,
  160|  1.50k|        ) as libc::ssize_t
  161|  1.50k|    }
  162|  1.50k|}

rust_fuzzer_test_input:
  209|  73.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  73.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  73.6k|                }
  223|  73.6k|
  224|  73.6k|                __libfuzzer_sys_run(bytes);
  225|  73.6k|                0
  226|       |            }
_RNvNvCs6L0GYOrg4Xe_2n31__19___libfuzzer_sys_run:
  241|  73.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  73.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  73.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  73.6k|    });
   63|  73.6k|
   64|  73.6k|    match test_input {
   65|  73.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  73.6k|}
_RNCNvCsg3PyvMFQBNy_13libfuzzer_sys15test_input_wrap0B3_:
   59|  73.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  73.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  73.6k|        rust_fuzzer_test_input(data_slice)
   62|  73.6k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECsl9Ey8gUtMBe_5oxttl:
 1044|  27.8M|    pub(crate) unsafe fn next(
 1045|  27.8M|        &mut self,
 1046|  27.8M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  27.8M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  27.8M|        let found = find_raw(self.start, self.end)?;
 1057|   108k|        let result = found.distance(self.original_start);
 1058|   108k|        self.start = found.add(1);
 1059|   108k|        Some(result)
 1060|  27.8M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsl9Ey8gUtMBe_5oxttl:
 1125|  68.0k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  68.0k|    haystack: &[u8],
 1127|  68.0k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  68.0k|) -> Option<usize> {
 1129|  68.0k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  68.0k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  68.0k|    // a &[u8].
 1132|  68.0k|    let start = haystack.as_ptr();
 1133|  68.0k|    let end = start.add(haystack.len());
 1134|  68.0k|    let found = find_raw(start, end)?;
 1135|  20.5k|    Some(found.distance(start))
 1136|  68.0k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsl9Ey8gUtMBe_5oxttl:
 1125|  5.24M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  5.24M|    haystack: &[u8],
 1127|  5.24M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  5.24M|) -> Option<usize> {
 1129|  5.24M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  5.24M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  5.24M|    // a &[u8].
 1132|  5.24M|    let start = haystack.as_ptr();
 1133|  5.24M|    let end = start.add(haystack.len());
 1134|  5.24M|    let found = find_raw(start, end)?;
 1135|  1.81M|    Some(found.distance(start))
 1136|  5.24M|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  27.7M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  27.7M|        Iter {
 1029|  27.7M|            original_start: haystack.as_ptr(),
 1030|  27.7M|            start: haystack.as_ptr(),
 1031|  27.7M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  27.7M|            haystack: core::marker::PhantomData,
 1033|  27.7M|        }
 1034|  27.7M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|   139k|    pub(crate) fn needle1(&self) -> u8 {
  118|   139k|        self.s1
  119|   139k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  68.0k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  68.0k|        One { s1: needle, v1: V::splat(needle) }
  113|  68.0k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  68.0k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  68.0k|        One { s1: needle, v1: V::splat(needle) }
  113|  68.0k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  13.4k|    pub(crate) unsafe fn find_raw(
  144|  13.4k|        &self,
  145|  13.4k|        start: *const u8,
  146|  13.4k|        end: *const u8,
  147|  13.4k|    ) -> Option<*const u8> {
  148|  13.4k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  13.4k|        // need to move up to using a u64 for the masks used below. Currently
  150|  13.4k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  13.4k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  13.4k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  13.4k|        let topos = V::Mask::first_offset;
  155|  13.4k|        let len = end.distance(start);
  156|  13.4k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  13.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  3.75k|            return Some(cur);
  167|  9.64k|        }
  168|  9.64k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  9.64k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  9.64k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  9.64k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  9.64k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  13.8k|        while cur <= end.sub(V::BYTES) {
  213|  5.13k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  5.13k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    880|                return Some(cur);
  216|  4.25k|            }
  217|  4.25k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  8.76k|        if cur < end {
  224|  7.46k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  7.46k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  7.46k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  7.46k|            return self.search_chunk(cur, topos);
  228|  1.30k|        }
  229|  1.30k|        None
  230|  13.4k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  34.6k|    pub(crate) unsafe fn find_raw(
  144|  34.6k|        &self,
  145|  34.6k|        start: *const u8,
  146|  34.6k|        end: *const u8,
  147|  34.6k|    ) -> Option<*const u8> {
  148|  34.6k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  34.6k|        // need to move up to using a u64 for the masks used below. Currently
  150|  34.6k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  34.6k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  34.6k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  34.6k|        let topos = V::Mask::first_offset;
  155|  34.6k|        let len = end.distance(start);
  156|  34.6k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  34.6k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  6.19k|            return Some(cur);
  167|  28.4k|        }
  168|  28.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  28.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  28.4k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  28.4k|        if len >= Self::LOOP_SIZE {
  172|  4.70k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  2.11k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  2.11k|                let a = V::load_aligned(cur);
  176|  2.11k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  2.11k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  2.11k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  2.11k|                let eqa = self.v1.cmpeq(a);
  180|  2.11k|                let eqb = self.v1.cmpeq(b);
  181|  2.11k|                let eqc = self.v1.cmpeq(c);
  182|  2.11k|                let eqd = self.v1.cmpeq(d);
  183|  2.11k|                let or1 = eqa.or(eqb);
  184|  2.11k|                let or2 = eqc.or(eqd);
  185|  2.11k|                let or3 = or1.or(or2);
  186|  2.11k|                if or3.movemask_will_have_non_zero() {
  187|    777|                    let mask = eqa.movemask();
  188|    777|                    if mask.has_non_zero() {
  189|    120|                        return Some(cur.add(topos(mask)));
  190|    657|                    }
  191|    657|
  192|    657|                    let mask = eqb.movemask();
  193|    657|                    if mask.has_non_zero() {
  194|    302|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    355|                    }
  196|    355|
  197|    355|                    let mask = eqc.movemask();
  198|    355|                    if mask.has_non_zero() {
  199|    221|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    134|                    }
  201|    134|
  202|    134|                    let mask = eqd.movemask();
  203|    134|                    debug_assert!(mask.has_non_zero());
  204|    134|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  1.33k|                }
  206|  1.33k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  25.0k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  46.5k|        while cur <= end.sub(V::BYTES) {
  213|  20.3k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  20.3k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.48k|                return Some(cur);
  216|  18.8k|            }
  217|  18.8k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  26.1k|        if cur < end {
  224|  24.7k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  24.7k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  24.7k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  24.7k|            return self.search_chunk(cur, topos);
  228|  1.43k|        }
  229|  1.43k|        None
  230|  34.6k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  26.0k|    unsafe fn search_chunk(
  417|  26.0k|        &self,
  418|  26.0k|        cur: *const u8,
  419|  26.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  26.0k|    ) -> Option<*const u8> {
  421|  26.0k|        let chunk = V::load_unaligned(cur);
  422|  26.0k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  26.0k|        if mask.has_non_zero() {
  424|  4.71k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  21.2k|            None
  427|       |        }
  428|  26.0k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  79.7k|    unsafe fn search_chunk(
  417|  79.7k|        &self,
  418|  79.7k|        cur: *const u8,
  419|  79.7k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  79.7k|    ) -> Option<*const u8> {
  421|  79.7k|        let chunk = V::load_unaligned(cur);
  422|  79.7k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  79.7k|        if mask.has_non_zero() {
  424|  8.11k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  71.5k|            None
  427|       |        }
  428|  79.7k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  33.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  33.0M|        Two {
  452|  33.0M|            s1: needle1,
  453|  33.0M|            s2: needle2,
  454|  33.0M|            v1: V::splat(needle1),
  455|  33.0M|            v2: V::splat(needle2),
  456|  33.0M|        }
  457|  33.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  33.0M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  33.0M|        Two {
  452|  33.0M|            s1: needle1,
  453|  33.0M|            s2: needle2,
  454|  33.0M|            v1: V::splat(needle1),
  455|  33.0M|            v2: V::splat(needle2),
  456|  33.0M|        }
  457|  33.0M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  60.5M|    pub(crate) fn needle1(&self) -> u8 {
  462|  60.5M|        self.s1
  463|  60.5M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  59.7M|    pub(crate) fn needle2(&self) -> u8 {
  468|  59.7M|        self.s2
  469|  59.7M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  1.05M|    pub(crate) unsafe fn find_raw(
  494|  1.05M|        &self,
  495|  1.05M|        start: *const u8,
  496|  1.05M|        end: *const u8,
  497|  1.05M|    ) -> Option<*const u8> {
  498|  1.05M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.05M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.05M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.05M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.05M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.05M|        let topos = V::Mask::first_offset;
  505|  1.05M|        let len = end.distance(start);
  506|  1.05M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.05M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   348k|            return Some(cur);
  517|   701k|        }
  518|   701k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   701k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   701k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   701k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   701k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   947k|        while cur <= end.sub(V::BYTES) {
  551|   261k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   261k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  15.4k|                return Some(cur);
  554|   245k|            }
  555|   245k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   686k|        if cur < end {
  562|   644k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   644k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   644k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   644k|            return self.search_chunk(cur, topos);
  566|  41.7k|        }
  567|  41.7k|        None
  568|  1.05M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.29M|    pub(crate) unsafe fn find_raw(
  494|  1.29M|        &self,
  495|  1.29M|        start: *const u8,
  496|  1.29M|        end: *const u8,
  497|  1.29M|    ) -> Option<*const u8> {
  498|  1.29M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  1.29M|        // need to move up to using a u64 for the masks used below. Currently
  500|  1.29M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  1.29M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  1.29M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.29M|        let topos = V::Mask::first_offset;
  505|  1.29M|        let len = end.distance(start);
  506|  1.29M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.29M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   436k|            return Some(cur);
  517|   862k|        }
  518|   862k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   862k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|   862k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   862k|        if len >= Self::LOOP_SIZE {
  522|  3.73M|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  3.27M|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  3.27M|                let a = V::load_aligned(cur);
  526|  3.27M|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  3.27M|                let eqa1 = self.v1.cmpeq(a);
  528|  3.27M|                let eqb1 = self.v1.cmpeq(b);
  529|  3.27M|                let eqa2 = self.v2.cmpeq(a);
  530|  3.27M|                let eqb2 = self.v2.cmpeq(b);
  531|  3.27M|                let or1 = eqa1.or(eqb1);
  532|  3.27M|                let or2 = eqa2.or(eqb2);
  533|  3.27M|                let or3 = or1.or(or2);
  534|  3.27M|                if or3.movemask_will_have_non_zero() {
  535|  29.4k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  29.4k|                    if mask.has_non_zero() {
  537|  10.5k|                        return Some(cur.add(topos(mask)));
  538|  18.8k|                    }
  539|  18.8k|
  540|  18.8k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  18.8k|                    debug_assert!(mask.has_non_zero());
  542|  18.8k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  3.24M|                }
  544|  3.24M|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   370k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.19M|        while cur <= end.sub(V::BYTES) {
  551|   382k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|   382k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  24.1k|                return Some(cur);
  554|   358k|            }
  555|   358k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   808k|        if cur < end {
  562|   783k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   783k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|   783k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   783k|            return self.search_chunk(cur, topos);
  566|  24.6k|        }
  567|  24.6k|        None
  568|  1.29M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.95M|    unsafe fn search_chunk(
  671|  1.95M|        &self,
  672|  1.95M|        cur: *const u8,
  673|  1.95M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.95M|    ) -> Option<*const u8> {
  675|  1.95M|        let chunk = V::load_unaligned(cur);
  676|  1.95M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.95M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.95M|        let mask = eq1.or(eq2).movemask();
  679|  1.95M|        if mask.has_non_zero() {
  680|   402k|            let mask1 = eq1.movemask();
  681|   402k|            let mask2 = eq2.movemask();
  682|   402k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.55M|            None
  685|       |        }
  686|  1.95M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.46M|    unsafe fn search_chunk(
  671|  2.46M|        &self,
  672|  2.46M|        cur: *const u8,
  673|  2.46M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.46M|    ) -> Option<*const u8> {
  675|  2.46M|        let chunk = V::load_unaligned(cur);
  676|  2.46M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.46M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.46M|        let mask = eq1.or(eq2).movemask();
  679|  2.46M|        if mask.has_non_zero() {
  680|   532k|            let mask1 = eq1.movemask();
  681|   532k|            let mask2 = eq2.movemask();
  682|   532k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.93M|            None
  685|       |        }
  686|  2.46M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  18.7k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  18.7k|    start: *const u8,
 1150|  18.7k|    end: *const u8,
 1151|  18.7k|    confirm: F,
 1152|  18.7k|) -> Option<*const u8> {
 1153|  18.7k|    debug_assert!(start <= end);
 1154|  18.7k|    let mut ptr = start;
 1155|   151k|    while ptr < end {
 1156|   139k|        if confirm(*ptr) {
 1157|  6.97k|            return Some(ptr);
 1158|   132k|        }
 1159|   132k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  11.7k|    None
 1162|  18.7k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  25.7M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  25.7M|    start: *const u8,
 1150|  25.7M|    end: *const u8,
 1151|  25.7M|    confirm: F,
 1152|  25.7M|) -> Option<*const u8> {
 1153|  25.7M|    debug_assert!(start <= end);
 1154|  25.7M|    let mut ptr = start;
 1155|  85.3M|    while ptr < end {
 1156|  60.5M|        if confirm(*ptr) {
 1157|   955k|            return Some(ptr);
 1158|  59.6M|        }
 1159|  59.6M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  24.7M|    None
 1162|  25.7M|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  68.0k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  68.0k|        One {
   71|  68.0k|            sse2: generic::One::new(needle),
   72|  68.0k|            avx2: generic::One::new(needle),
   73|  68.0k|        }
   74|  68.0k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  68.0k|    pub unsafe fn find_raw(
  180|  68.0k|        &self,
  181|  68.0k|        start: *const u8,
  182|  68.0k|        end: *const u8,
  183|  68.0k|    ) -> Option<*const u8> {
  184|  68.0k|        if start >= end {
  185|  1.30k|            return None;
  186|  66.7k|        }
  187|  66.7k|        let len = end.distance(start);
  188|  66.7k|        if len < __m256i::BYTES {
  189|  32.1k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  18.7k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  18.7k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  13.4k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  34.6k|        }
  201|  34.6k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  34.6k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  34.6k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  34.6k|        // responsibility.
  205|  34.6k|        //
  206|  34.6k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  34.6k|        // means we'd have to annotate this routine with `target_feature`.
  208|  34.6k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  34.6k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  34.6k|        // The real problem is that a routine with a `target_feature`
  211|  34.6k|        // annotation generally can't be inlined into caller code unless
  212|  34.6k|        // the caller code has the same target feature annotations. Namely,
  213|  34.6k|        // the common case (at time of writing) is for calling code to not
  214|  34.6k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  34.6k|        // `target_feature` on this routine, it can be inlined which will
  216|  34.6k|        // handle some of the short-haystack cases above without touching the
  217|  34.6k|        // architecture specific code.
  218|  34.6k|        self.find_raw_avx2(start, end)
  219|  68.0k|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   139k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   139k|                    b == self.sse2.needle1()
  194|   139k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  13.4k|    unsafe fn find_raw_sse2(
  337|  13.4k|        &self,
  338|  13.4k|        start: *const u8,
  339|  13.4k|        end: *const u8,
  340|  13.4k|    ) -> Option<*const u8> {
  341|  13.4k|        self.sse2.find_raw(start, end)
  342|  13.4k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  34.6k|    unsafe fn find_raw_avx2(
  397|  34.6k|        &self,
  398|  34.6k|        start: *const u8,
  399|  34.6k|        end: *const u8,
  400|  34.6k|    ) -> Option<*const u8> {
  401|  34.6k|        self.avx2.find_raw(start, end)
  402|  34.6k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  33.0M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  33.0M|        Two {
  558|  33.0M|            sse2: generic::Two::new(needle1, needle2),
  559|  33.0M|            avx2: generic::Two::new(needle1, needle2),
  560|  33.0M|        }
  561|  33.0M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  33.0M|    pub unsafe fn find_raw(
  655|  33.0M|        &self,
  656|  33.0M|        start: *const u8,
  657|  33.0M|        end: *const u8,
  658|  33.0M|    ) -> Option<*const u8> {
  659|  33.0M|        if start >= end {
  660|  4.96M|            return None;
  661|  28.0M|        }
  662|  28.0M|        let len = end.distance(start);
  663|  28.0M|        if len < __m256i::BYTES {
  664|  26.7M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  25.7M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  25.7M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  1.05M|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.29M|        }
  676|  1.29M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.29M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.29M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.29M|        // responsibility.
  680|  1.29M|        //
  681|  1.29M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.29M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.29M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.29M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.29M|        // The real problem is that a routine with a `target_feature`
  686|  1.29M|        // annotation generally can't be inlined into caller code unless
  687|  1.29M|        // the caller code has the same target feature annotations. Namely,
  688|  1.29M|        // the common case (at time of writing) is for calling code to not
  689|  1.29M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.29M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.29M|        // handle some of the short-haystack cases above without touching the
  692|  1.29M|        // architecture specific code.
  693|  1.29M|        self.find_raw_avx2(start, end)
  694|  33.0M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  60.5M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  60.5M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  60.5M|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  1.05M|    unsafe fn find_raw_sse2(
  765|  1.05M|        &self,
  766|  1.05M|        start: *const u8,
  767|  1.05M|        end: *const u8,
  768|  1.05M|    ) -> Option<*const u8> {
  769|  1.05M|        self.sse2.find_raw(start, end)
  770|  1.05M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.29M|    unsafe fn find_raw_avx2(
  805|  1.29M|        &self,
  806|  1.29M|        start: *const u8,
  807|  1.29M|        end: *const u8,
  808|  1.29M|    ) -> Option<*const u8> {
  809|  1.29M|        self.avx2.find_raw(start, end)
  810|  1.29M|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  33.0M|pub(crate) fn memchr2_raw(
  221|  33.0M|    n1: u8,
  222|  33.0M|    n2: u8,
  223|  33.0M|    start: *const u8,
  224|  33.0M|    end: *const u8,
  225|  33.0M|) -> Option<*const u8> {
  226|  33.0M|    // SAFETY: We provide a valid function pointer type.
  227|  33.0M|    unsafe_ifunc!(
  228|  33.0M|        Two,
  229|  33.0M|        find_raw,
  230|  33.0M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  33.0M|        Option<*const u8>,
  232|  33.0M|        start,
  233|  33.0M|        end,
  234|  33.0M|        n1,
  235|  33.0M|        n2
  236|  33.0M|    )
  237|  33.0M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  68.0k|pub(crate) fn memchr_raw(
  175|  68.0k|    n1: u8,
  176|  68.0k|    start: *const u8,
  177|  68.0k|    end: *const u8,
  178|  68.0k|) -> Option<*const u8> {
  179|  68.0k|    // SAFETY: We provide a valid function pointer type.
  180|  68.0k|    unsafe_ifunc!(
  181|  68.0k|        One,
  182|  68.0k|        find_raw,
  183|  68.0k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  68.0k|        Option<*const u8>,
  185|  68.0k|        start,
  186|  68.0k|        end,
  187|  68.0k|        n1
  188|  68.0k|    )
  189|  68.0k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  68.0k|        unsafe fn find_avx2(
   79|  68.0k|            $($needle: u8),+,
   80|  68.0k|            $hay_start: *const u8,
   81|  68.0k|            $hay_end: *const u8,
   82|  68.0k|        ) -> $retty {
   83|  68.0k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  68.0k|            $memchrty::new_unchecked($($needle),+)
   85|  68.0k|                .$memchrfind($hay_start, $hay_end)
   86|  68.0k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  33.0M|        unsafe fn find_avx2(
   79|  33.0M|            $($needle: u8),+,
   80|  33.0M|            $hay_start: *const u8,
   81|  33.0M|            $hay_end: *const u8,
   82|  33.0M|        ) -> $retty {
   83|  33.0M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  33.0M|            $memchrty::new_unchecked($($needle),+)
   85|  33.0M|                .$memchrfind($hay_start, $hay_end)
   86|  33.0M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  33.9M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  33.9M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  33.9M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  33.9M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  1.60M|    fn as_usize(self) -> usize {
   27|  1.60M|        self as usize
   28|  1.60M|    }

_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCsl9Ey8gUtMBe_5oxttl:
  377|  27.7M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  27.7M|        Memchr2 {
  379|  27.7M|            needle1,
  380|  27.7M|            needle2,
  381|  27.7M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  27.7M|        }
  383|  27.7M|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCsl9Ey8gUtMBe_5oxttl:
  574|  33.0M|unsafe fn memchr2_raw(
  575|  33.0M|    needle1: u8,
  576|  33.0M|    needle2: u8,
  577|  33.0M|    start: *const u8,
  578|  33.0M|    end: *const u8,
  579|  33.0M|) -> Option<*const u8> {
  580|  33.0M|    #[cfg(target_arch = "x86_64")]
  581|  33.0M|    {
  582|  33.0M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  33.0M|    }
  584|  33.0M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  33.0M|    {
  586|  33.0M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  33.0M|    }
  588|  33.0M|    #[cfg(target_arch = "aarch64")]
  589|  33.0M|    {
  590|  33.0M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  33.0M|    }
  592|  33.0M|    #[cfg(not(any(
  593|  33.0M|        target_arch = "x86_64",
  594|  33.0M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  33.0M|        target_arch = "aarch64"
  596|  33.0M|    )))]
  597|  33.0M|    {
  598|  33.0M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  33.0M|            .find_raw(start, end)
  600|  33.0M|    }
  601|  33.0M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCsl9Ey8gUtMBe_5oxttl:
  232|  27.7M|pub fn memchr2_iter<'h>(
  233|  27.7M|    needle1: u8,
  234|  27.7M|    needle2: u8,
  235|  27.7M|    haystack: &'h [u8],
  236|  27.7M|) -> Memchr2<'h> {
  237|  27.7M|    Memchr2::new(needle1, needle2, haystack)
  238|  27.7M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCsl9Ey8gUtMBe_5oxttl:
   27|  68.0k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  68.0k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  68.0k|    // pointer between start and end.
   30|  68.0k|    unsafe {
   31|  68.0k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  68.0k|        })
   34|  68.0k|    }
   35|  68.0k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr7memchr2Csl9Ey8gUtMBe_5oxttl:
   92|  5.24M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  5.24M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  5.24M|    // pointer between start and end.
   95|  5.24M|    unsafe {
   96|  5.24M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  5.24M|        })
   99|  5.24M|    }
  100|  5.24M|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsl9Ey8gUtMBe_5oxttl:
  390|  27.8M|    fn next(&mut self) -> Option<usize> {
  391|  27.8M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  27.8M|        // pointers returns will fall within the start and end bounds, and this
  393|  27.8M|        // upholds the safety contract of `self.it.next`.
  394|  27.8M|        unsafe {
  395|  27.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  27.8M|        }
  397|  27.8M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr7memchr20Csl9Ey8gUtMBe_5oxttl:
   96|  5.24M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  5.24M|            memchr2_raw(needle1, needle2, start, end)
   98|  5.24M|        })
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Csl9Ey8gUtMBe_5oxttl:
  395|  27.8M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|  68.0k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  68.0k|            memchr_raw(needle, start, end)
   33|  68.0k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|  68.0k|unsafe fn memchr_raw(
  505|  68.0k|    needle: u8,
  506|  68.0k|    start: *const u8,
  507|  68.0k|    end: *const u8,
  508|  68.0k|) -> Option<*const u8> {
  509|  68.0k|    #[cfg(target_arch = "x86_64")]
  510|  68.0k|    {
  511|  68.0k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  68.0k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  68.0k|        // time. This function also handles using a fallback if neither AVX2
  514|  68.0k|        // nor SSE2 (unusual) are available.
  515|  68.0k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  68.0k|    }
  517|  68.0k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  68.0k|    {
  519|  68.0k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  68.0k|    }
  521|  68.0k|    #[cfg(target_arch = "aarch64")]
  522|  68.0k|    {
  523|  68.0k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  68.0k|    }
  525|  68.0k|    #[cfg(not(any(
  526|  68.0k|        target_arch = "x86_64",
  527|  68.0k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  68.0k|        target_arch = "aarch64"
  529|  68.0k|    )))]
  530|  68.0k|    {
  531|  68.0k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  68.0k|    }
  533|  68.0k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|   978k|    fn get_for_offset(self) -> u32 {
  127|   978k|        #[cfg(target_endian = "big")]
  128|   978k|        {
  129|   978k|            self.0.swap_bytes()
  130|   978k|        }
  131|   978k|        #[cfg(target_endian = "little")]
  132|   978k|        {
  133|   978k|            self.0
  134|   978k|        }
  135|   978k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|   978k|    fn first_offset(self) -> usize {
  172|   978k|        // We are dealing with little endian here (and if we aren't, we swap
  173|   978k|        // the bytes so we are in practice), where the most significant byte
  174|   978k|        // is at a higher address. That means the least significant bit that
  175|   978k|        // is set corresponds to the position of our first matching byte.
  176|   978k|        // That position corresponds to the number of zeros after the least
  177|   978k|        // significant bit.
  178|   978k|        self.get_for_offset().trailing_zeros() as usize
  179|   978k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  7.82M|    fn has_non_zero(self) -> bool {
  147|  7.82M|        self.0 != 0
  148|  7.82M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  1.98M|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  1.98M|            _mm_loadu_si128(data as *const __m128i)
  219|  1.98M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  2.78M|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  2.78M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  2.78M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  3.93M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  3.93M|            _mm_cmpeq_epi8(self, vector2)
  229|  3.93M|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  3.27M|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  3.27M|        self.movemask().has_non_zero()
   65|  3.27M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  2.54M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  2.54M|            _mm256_loadu_si256(data as *const __m256i)
  268|  2.54M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  6.98M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  6.98M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  6.98M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  18.0M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  18.0M|            _mm256_cmpeq_epi8(self, vector2)
  278|  18.0M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|   983k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|   983k|        SensibleMoveMask(self.0 | other.0)
  163|   983k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  66.1M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  66.1M|            _mm_set1_epi8(byte as i8)
  209|  66.1M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  1.95M|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  1.95M|            _mm_or_si128(self, vector2)
  239|  1.95M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  66.1M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  66.1M|            _mm256_set1_epi8(byte as i8)
  258|  66.1M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|  6.54M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|  6.54M|            _mm256_load_si256(data as *const __m256i)
  263|  6.54M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  12.2M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  12.2M|            _mm256_or_si256(self, vector2)
  288|  12.2M|        }

_RNvMs2_NtCsdRZZQNKn78z_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsg3PyvMFQBNy_13libfuzzer_sys:
   49|  73.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  73.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  73.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  73.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  73.6k|        // `SeqCst` operations on the slow path.
   54|  73.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  73.6k|    }

_RNvMs4_NtCsdRZZQNKn78z_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsg3PyvMFQBNy_13libfuzzer_sys:
  963|  73.6k|        pub fn get(&self) -> Option<&T> {
  964|  73.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  73.6k|                None
  969|       |            }
  970|  73.6k|        }

_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE10into_innerCsl9Ey8gUtMBe_5oxttl:
   62|   466k|    pub fn into_inner(self) -> T {
   63|   466k|        self.tag
   64|   466k|    }
_RNvMCsaOqqenhRLQf_10oxilangtagINtB2_11LanguageTagReE5parseCsl9Ey8gUtMBe_5oxttl:
   49|   563k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   563k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   466k|        Ok(Self { tag, positions })
   52|   563k|    }
_RINvCsaOqqenhRLQf_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs7Sgmv00SKa1_5oxrdf:
  632|   540k|fn parse_langtag(
  633|   540k|    input: &str,
  634|   540k|    output: &mut impl OutputBuffer,
  635|   540k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   540k|    #[derive(PartialEq, Eq)]
  637|   540k|    enum State {
  638|   540k|        Start,
  639|   540k|        AfterLanguage,
  640|   540k|        AfterExtLang,
  641|   540k|        AfterScript,
  642|   540k|        AfterRegion,
  643|   540k|        InExtension { expected: bool },
  644|   540k|        InPrivateUse { expected: bool },
  645|   540k|    }
  646|   540k|
  647|   540k|    let mut state = State::Start;
  648|   540k|    let mut language_end = 0;
  649|   540k|    let mut extlang_end = 0;
  650|   540k|    let mut script_end = 0;
  651|   540k|    let mut region_end = 0;
  652|   540k|    let mut variant_end = 0;
  653|   540k|    let mut extension_end = 0;
  654|   540k|    let mut extlangs_count = 0;
  655|   683k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   683k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|   683k|        }
  661|   683k|        if subtag.len() > 8 {
  662|  8.35k|            return Err(LanguageTagParseError {
  663|  8.35k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  8.35k|            });
  665|   674k|        }
  666|   674k|        if state == State::Start {
  667|       |            // Primary language
  668|   532k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  52.0k|                return Err(LanguageTagParseError {
  670|  52.0k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  52.0k|                });
  672|   480k|            }
  673|   480k|            language_end = end;
  674|   480k|            output.extend(to_lowercase(subtag));
  675|   480k|            if subtag.len() < 4 {
  676|   116k|                // extlangs are only allowed for short language tags
  677|   116k|                state = State::AfterLanguage;
  678|   364k|            } else {
  679|   364k|                state = State::AfterExtLang;
  680|   364k|            }
  681|   142k|        } else if let State::InPrivateUse { .. } = state {
  682|  11.8k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  11.8k|            }
  687|  11.8k|            output.push('-');
  688|  11.8k|            output.extend(to_lowercase(subtag));
  689|  11.8k|            state = State::InPrivateUse { expected: false };
  690|   130k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  16.9k|            if let State::InExtension { expected: true } = state {
  693|  6.12k|                return Err(LanguageTagParseError {
  694|  6.12k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  6.12k|                });
  696|  10.8k|            }
  697|  10.8k|            output.push('-');
  698|  10.8k|            output.push('x');
  699|  10.8k|            state = State::InPrivateUse { expected: true };
  700|   113k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  35.3k|            if let State::InExtension { expected: true } = state {
  703|  6.35k|                return Err(LanguageTagParseError {
  704|  6.35k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  6.35k|                });
  706|  29.0k|            }
  707|  29.0k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  29.0k|            output.push('-');
  709|  29.0k|            output.push(extension_tag);
  710|  29.0k|            state = State::InExtension { expected: true };
  711|  77.8k|        } else if let State::InExtension { .. } = state {
  712|  16.2k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  16.2k|            }
  717|  16.2k|            extension_end = end;
  718|  16.2k|            output.push('-');
  719|  16.2k|            output.extend(to_lowercase(subtag));
  720|  16.2k|            state = State::InExtension { expected: false };
  721|  61.5k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  16.1k|            extlangs_count += 1;
  723|  16.1k|            if extlangs_count > 3 {
  724|  1.95k|                return Err(LanguageTagParseError {
  725|  1.95k|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|  1.95k|                });
  727|  14.2k|            }
  728|  14.2k|            // valid extlangs
  729|  14.2k|            extlang_end = end;
  730|  14.2k|            output.push('-');
  731|  14.2k|            output.extend(to_lowercase(subtag));
  732|  45.3k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  29.5k|            && subtag.len() == 4
  734|  13.2k|            && is_alphabetic(subtag)
  735|  13.2k|        {
  736|  13.2k|            // Script
  737|  13.2k|            script_end = end;
  738|  13.2k|            output.push('-');
  739|  13.2k|            output.extend(to_uppercase_first(subtag));
  740|  13.2k|            state = State::AfterScript;
  741|  32.1k|        } else if (state == State::AfterLanguage
  742|  21.9k|            || state == State::AfterExtLang
  743|  15.8k|            || state == State::AfterScript)
  744|  26.6k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  15.9k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  10.7k|        {
  747|  10.7k|            // Region
  748|  10.7k|            region_end = end;
  749|  10.7k|            output.push('-');
  750|  10.7k|            output.extend(to_uppercase(subtag));
  751|  10.7k|            state = State::AfterRegion;
  752|  21.4k|        } else if (state == State::AfterLanguage
  753|  17.3k|            || state == State::AfterExtLang
  754|  15.3k|            || state == State::AfterScript
  755|  5.50k|            || state == State::AfterRegion)
  756|  21.4k|            && is_alphanumeric(subtag)
  757|  21.4k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  10.9k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  10.5k|        {
  760|  10.5k|            // Variant
  761|  10.5k|            variant_end = end;
  762|  10.5k|            output.push('-');
  763|  10.5k|            output.extend(to_lowercase(subtag));
  764|  10.5k|            state = State::AfterRegion;
  765|  10.5k|        } else {
  766|  10.9k|            return Err(LanguageTagParseError {
  767|  10.9k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  10.9k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   455k|    if let State::InExtension { expected: true } = state {
  774|  7.75k|        return Err(LanguageTagParseError {
  775|  7.75k|            kind: TagParseErrorKind::EmptyExtension,
  776|  7.75k|        });
  777|   447k|    }
  778|   447k|    if let State::InPrivateUse { expected: true } = state {
  779|  3.41k|        return Err(LanguageTagParseError {
  780|  3.41k|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|  3.41k|        });
  782|   443k|    }
  783|   443k|
  784|   443k|    //We make sure we have not skipped anyone
  785|   443k|    if extlang_end < language_end {
  786|   437k|        extlang_end = language_end;
  787|   437k|    }
  788|   443k|    if script_end < extlang_end {
  789|   436k|        script_end = extlang_end;
  790|   436k|    }
  791|   443k|    if region_end < script_end {
  792|   436k|        region_end = script_end;
  793|   436k|    }
  794|   443k|    if variant_end < region_end {
  795|   435k|        variant_end = region_end;
  796|   435k|    }
  797|   443k|    if extension_end < variant_end {
  798|   436k|        extension_end = variant_end;
  799|   436k|    }
  800|       |
  801|   443k|    Ok(TagElementsPositions {
  802|   443k|        language_end,
  803|   443k|        extlang_end,
  804|   443k|        script_end,
  805|   443k|        region_end,
  806|   443k|        variant_end,
  807|   443k|        extension_end,
  808|   443k|    })
  809|   540k|}
_RINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs7Sgmv00SKa1_5oxrdf:
  587|   563k|fn parse_language_tag(
  588|   563k|    input: &str,
  589|   563k|    output: &mut impl OutputBuffer,
  590|   563k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   563k|    if let Some(tag) = GRANDFATHEREDS
  593|   563k|        .iter()
  594|   563k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   563k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  22.5k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  22.5k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  22.5k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  22.5k|            Ok(TagElementsPositions {
  618|  22.5k|                language_end: input.len(),
  619|  22.5k|                extlang_end: input.len(),
  620|  22.5k|                script_end: input.len(),
  621|  22.5k|                region_end: input.len(),
  622|  22.5k|                variant_end: input.len(),
  623|  22.5k|                extension_end: input.len(),
  624|  22.5k|            })
  625|       |        }
  626|       |    } else {
  627|   540k|        parse_langtag(input, output)
  628|       |    }
  629|   563k|}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs7Sgmv00SKa1_5oxrdf:
  571|  22.5k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs7Sgmv00SKa1_5oxrdf:
  571|   533k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs7Sgmv00SKa1_5oxrdf:
  571|  10.7k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CsaOqqenhRLQf_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCscdEvteftVc2_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs7Sgmv00SKa1_5oxrdf:
  571|  13.2k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCsaOqqenhRLQf_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs7Sgmv00SKa1_5oxrdf:
  594|  14.6M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCsaOqqenhRLQf_10oxilangtag10is_numericCs7Sgmv00SKa1_5oxrdf:
  876|  10.2k|fn is_numeric(s: &str) -> bool {
  877|  10.2k|    s.chars().all(|x| x.is_ascii_digit())
  878|  10.2k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_lowercaseCs7Sgmv00SKa1_5oxrdf:
  903|   533k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   533k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   533k|}
_RNvCsaOqqenhRLQf_10oxilangtag12to_uppercaseCs7Sgmv00SKa1_5oxrdf:
  891|  10.7k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  10.7k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  10.7k|}
_RNvCsaOqqenhRLQf_10oxilangtag13is_alphabeticCs7Sgmv00SKa1_5oxrdf:
  871|   531k|fn is_alphabetic(s: &str) -> bool {
  872|   531k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   531k|}
_RNvCsaOqqenhRLQf_10oxilangtag15is_alphanumericCs7Sgmv00SKa1_5oxrdf:
  881|  84.9k|fn is_alphanumeric(s: &str) -> bool {
  882|  84.9k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  84.9k|}
_RNvCsaOqqenhRLQf_10oxilangtag18to_uppercase_firstCs7Sgmv00SKa1_5oxrdf:
  897|  13.2k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  13.2k|    let mut chars = s.chars();
  899|  13.2k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  13.2k|}
_RNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dashCs7Sgmv00SKa1_5oxrdf:
  886|  22.5k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  22.5k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  22.5k|}
_RNvMsv_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIterator3newCs7Sgmv00SKa1_5oxrdf:
  850|   540k|    fn new(input: &'a str) -> Self {
  851|   540k|        Self {
  852|   540k|            split: input.split('-'),
  853|   540k|            position: 0,
  854|   540k|        }
  855|   540k|    }
_RNvXsq_CsaOqqenhRLQf_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs7Sgmv00SKa1_5oxrdf:
  563|   156k|    fn push(&mut self, _: char) {}
_RNvXsw_CsaOqqenhRLQf_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs7Sgmv00SKa1_5oxrdf:
  862|  1.13M|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  1.13M|        let tag = self.split.next()?;
  864|   683k|        let tag_end = self.position + tag.len();
  865|   683k|        self.position = tag_end + 1;
  866|   683k|        Some((tag, tag_end))
  867|  1.13M|    }
_RNvXso_CsaOqqenhRLQf_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  490|  96.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  96.9k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  20.2k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|  3.41k|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  10.9k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  10.9k|                f,
  503|  10.9k|                "A subtag fails to parse, it does not match any other subtags"
  504|  10.9k|            ),
  505|  52.0k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  8.35k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|  1.95k|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  96.9k|    }
_RNCNvCsaOqqenhRLQf_10oxilangtag13is_alphabetic0B3_:
  872|  2.40M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCsaOqqenhRLQf_10oxilangtag10is_numeric0B3_:
  877|  10.2k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCsaOqqenhRLQf_10oxilangtag15is_alphanumeric0B3_:
  882|   209k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCsaOqqenhRLQf_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   298k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECsl9Ey8gUtMBe_5oxttl:
 1556|   403k|    fn read_url_codepoint_or_echar(
 1557|   403k|        &mut self,
 1558|   403k|        c: char,
 1559|   403k|        valid: impl Fn(char) -> bool,
 1560|   403k|    ) -> Result<(), IriParseError> {
 1561|   403k|        if UNCHECKED || valid(c) {
 1562|   403k|            self.output.push(c);
 1563|   403k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   403k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECsl9Ey8gUtMBe_5oxttl:
 1556|   164k|    fn read_url_codepoint_or_echar(
 1557|   164k|        &mut self,
 1558|   164k|        c: char,
 1559|   164k|        valid: impl Fn(char) -> bool,
 1560|   164k|    ) -> Result<(), IriParseError> {
 1561|   164k|        if UNCHECKED || valid(c) {
 1562|   164k|            self.output.push(c);
 1563|   164k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   164k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECsl9Ey8gUtMBe_5oxttl:
 1556|   183k|    fn read_url_codepoint_or_echar(
 1557|   183k|        &mut self,
 1558|   183k|        c: char,
 1559|   183k|        valid: impl Fn(char) -> bool,
 1560|   183k|    ) -> Result<(), IriParseError> {
 1561|   183k|        if UNCHECKED || valid(c) {
 1562|   183k|            self.output.push(c);
 1563|   183k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   183k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECsl9Ey8gUtMBe_5oxttl:
 1556|   948k|    fn read_url_codepoint_or_echar(
 1557|   948k|        &mut self,
 1558|   948k|        c: char,
 1559|   948k|        valid: impl Fn(char) -> bool,
 1560|   948k|    ) -> Result<(), IriParseError> {
 1561|   948k|        if UNCHECKED || valid(c) {
 1562|   948k|            self.output.push(c);
 1563|   948k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   948k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECsl9Ey8gUtMBe_5oxttl:
 1556|   808k|    fn read_url_codepoint_or_echar(
 1557|   808k|        &mut self,
 1558|   808k|        c: char,
 1559|   808k|        valid: impl Fn(char) -> bool,
 1560|   808k|    ) -> Result<(), IriParseError> {
 1561|   808k|        if UNCHECKED || valid(c) {
 1562|   808k|            self.output.push(c);
 1563|   808k|            Ok(())
 1564|      0|        } else if c == '%' {
 1565|      0|            self.read_echar()
 1566|       |        } else {
 1567|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   808k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_erroruECsl9Ey8gUtMBe_5oxttl:
 1590|   398k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|   398k|        Err(IriParseError { kind })
 1592|   398k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECsl9Ey8gUtMBe_5oxttl:
 1556|   531k|    fn read_url_codepoint_or_echar(
 1557|   531k|        &mut self,
 1558|   531k|        c: char,
 1559|   531k|        valid: impl Fn(char) -> bool,
 1560|   531k|    ) -> Result<(), IriParseError> {
 1561|   531k|        if UNCHECKED || valid(c) {
 1562|   492k|            self.output.push(c);
 1563|   492k|            Ok(())
 1564|  39.9k|        } else if c == '%' {
 1565|  12.8k|            self.read_echar()
 1566|       |        } else {
 1567|  27.1k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   531k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECsl9Ey8gUtMBe_5oxttl:
 1556|   367k|    fn read_url_codepoint_or_echar(
 1557|   367k|        &mut self,
 1558|   367k|        c: char,
 1559|   367k|        valid: impl Fn(char) -> bool,
 1560|   367k|    ) -> Result<(), IriParseError> {
 1561|   367k|        if UNCHECKED || valid(c) {
 1562|   296k|            self.output.push(c);
 1563|   296k|            Ok(())
 1564|  70.9k|        } else if c == '%' {
 1565|  48.6k|            self.read_echar()
 1566|       |        } else {
 1567|  22.2k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   367k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECsl9Ey8gUtMBe_5oxttl:
 1556|   606k|    fn read_url_codepoint_or_echar(
 1557|   606k|        &mut self,
 1558|   606k|        c: char,
 1559|   606k|        valid: impl Fn(char) -> bool,
 1560|   606k|    ) -> Result<(), IriParseError> {
 1561|   606k|        if UNCHECKED || valid(c) {
 1562|   517k|            self.output.push(c);
 1563|   517k|            Ok(())
 1564|  88.4k|        } else if c == '%' {
 1565|  43.1k|            self.read_echar()
 1566|       |        } else {
 1567|  45.3k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   606k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECsl9Ey8gUtMBe_5oxttl:
 1556|   263k|    fn read_url_codepoint_or_echar(
 1557|   263k|        &mut self,
 1558|   263k|        c: char,
 1559|   263k|        valid: impl Fn(char) -> bool,
 1560|   263k|    ) -> Result<(), IriParseError> {
 1561|   263k|        if UNCHECKED || valid(c) {
 1562|   246k|            self.output.push(c);
 1563|   246k|            Ok(())
 1564|  16.9k|        } else if c == '%' {
 1565|  9.57k|            self.read_echar()
 1566|       |        } else {
 1567|  7.32k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   263k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECsl9Ey8gUtMBe_5oxttl:
 1556|   573k|    fn read_url_codepoint_or_echar(
 1557|   573k|        &mut self,
 1558|   573k|        c: char,
 1559|   573k|        valid: impl Fn(char) -> bool,
 1560|   573k|    ) -> Result<(), IriParseError> {
 1561|   573k|        if UNCHECKED || valid(c) {
 1562|   483k|            self.output.push(c);
 1563|   483k|            Ok(())
 1564|  89.6k|        } else if c == '%' {
 1565|  24.3k|            self.read_echar()
 1566|       |        } else {
 1567|  65.2k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   573k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECsl9Ey8gUtMBe_5oxttl:
 1556|   102k|    fn read_url_codepoint_or_echar(
 1557|   102k|        &mut self,
 1558|   102k|        c: char,
 1559|   102k|        valid: impl Fn(char) -> bool,
 1560|   102k|    ) -> Result<(), IriParseError> {
 1561|   102k|        if UNCHECKED || valid(c) {
 1562|  87.2k|            self.output.push(c);
 1563|  87.2k|            Ok(())
 1564|  15.1k|        } else if c == '%' {
 1565|  10.1k|            self.read_echar()
 1566|       |        } else {
 1567|  5.00k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   102k|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_path0Csl9Ey8gUtMBe_5oxttl:
 1516|   531k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|   531k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   531k|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echar0Csl9Ey8gUtMBe_5oxttl:
 1574|   132k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echars_0Csl9Ey8gUtMBe_5oxttl:
 1575|  93.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_query0Csl9Ey8gUtMBe_5oxttl:
 1530|   367k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   367k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   367k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragment0Csl9Ey8gUtMBe_5oxttl:
 1541|   606k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|   606k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   606k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authority0Csl9Ey8gUtMBe_5oxttl:
 1364|   263k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|   263k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   263k|                    })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19parse_relative_path0Csl9Ey8gUtMBe_5oxttl:
 1323|   573k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCsl9Ey8gUtMBe_5oxttl:
   70|   245k|    pub fn parse_unchecked(iri: T) -> Self {
   71|   245k|        let positions =
   72|   245k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|   245k|        Self { iri, positions }
   74|   245k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCsl9Ey8gUtMBe_5oxttl:
  258|   326k|    pub fn path(&self) -> &str {
  259|   326k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|   326k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE6as_refCsl9Ey8gUtMBe_5oxttl:
  154|  1.14M|    pub fn as_ref(&self) -> IriRef<&str> {
  155|  1.14M|        IriRef {
  156|  1.14M|            iri: &self.iri,
  157|  1.14M|            positions: self.positions,
  158|  1.14M|        }
  159|  1.14M|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCsl9Ey8gUtMBe_5oxttl:
   89|  1.14M|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|  1.14M|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|  1.14M|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   749k|        Ok(IriRef {
   93|   749k|            iri: target_buffer,
   94|   749k|            positions,
   95|   749k|        })
   96|  1.14M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCsl9Ey8gUtMBe_5oxttl:
 1372|   196k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   196k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|  55.6k|            let start_position = self.input.position;
 1376|   320k|            while let Some(c) = self.input.next() {
 1377|   320k|                self.output.push(c);
 1378|   320k|                if c == ']' {
 1379|  55.6k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|  55.6k|                    if !UNCHECKED {
 1381|      0|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|      0|                            self.validate_ip_v_future(ip)?;
 1383|      0|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|      0|                        }
 1386|  55.6k|                    }
 1387|       |
 1388|  55.6k|                    let c = self.input.next();
 1389|  55.6k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  31.1k|                            self.output.push(':');
 1392|  31.1k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  24.5k|                            self.output_positions.authority_end = self.output.len();
 1396|  24.5k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|      0|                        Some(c) => {
 1399|      0|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|   264k|                }
 1408|       |            }
 1409|      0|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|   949k|            loop {
 1419|   949k|                let c = self.input.next();
 1420|   949k|                match c {
 1421|       |                    Some(':') => {
 1422|  47.3k|                        self.output.push(':');
 1423|  47.3k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  93.6k|                        self.output_positions.authority_end = self.output.len();
 1427|  93.6k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|   808k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   196k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCsl9Ey8gUtMBe_5oxttl:
 1485|   164k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   578k|        loop {
 1487|   578k|            let c = self.input.next();
 1488|   578k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   174k|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|   174k|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|   174k|                    } else if c == Some('/') {
 1498|  10.2k|                        self.output.push('/');
 1499|   164k|                    }
 1500|       |
 1501|   174k|                    if c == Some('?') {
 1502|  33.5k|                        self.output_positions.path_end = self.output.len();
 1503|  33.5k|                        self.output.push('?');
 1504|  33.5k|                        return self.parse_query();
 1505|   140k|                    } else if c == Some('#') {
 1506|  27.8k|                        self.output_positions.path_end = self.output.len();
 1507|  27.8k|                        self.output_positions.query_end = self.output.len();
 1508|  27.8k|                        self.output.push('#');
 1509|  27.8k|                        return self.parse_fragment();
 1510|   113k|                    } else if c.is_none() {
 1511|   102k|                        self.output_positions.path_end = self.output.len();
 1512|   102k|                        self.output_positions.query_end = self.output.len();
 1513|   102k|                        return Ok(());
 1514|  10.2k|                    }
 1515|       |                }
 1516|   403k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   403k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   164k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCsl9Ey8gUtMBe_5oxttl:
 1435|  78.4k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   177k|        loop {
 1437|   177k|            let c = self.input.next();
 1438|   177k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  78.4k|                    self.output_positions.authority_end = self.output.len();
 1441|  78.4k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  98.7k|                Some(c) => {
 1444|  98.7k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  98.7k|                        self.output.push(c)
 1446|       |                    } else {
 1447|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|  78.4k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCsl9Ey8gUtMBe_5oxttl:
 1523|  55.8k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   220k|        while let Some(c) = self.input.next() {
 1525|   202k|            if c == '#' {
 1526|  38.2k|                self.output_positions.query_end = self.output.len();
 1527|  38.2k|                self.output.push('#');
 1528|  38.2k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   164k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   164k|                })?
 1533|       |            }
 1534|       |        }
 1535|  17.6k|        self.output_positions.query_end = self.output.len();
 1536|  17.6k|        Ok(())
 1537|  55.8k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCsl9Ey8gUtMBe_5oxttl:
 1213|   245k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  1.04M|        loop {
 1215|  1.04M|            let c = self.input.next();
 1216|  1.04M|            match c {
 1217|  1.04M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   800k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   245k|                    self.output.push(':');
 1222|   245k|                    self.output_positions.scheme_end = self.output.len();
 1223|   245k|                    self.input_scheme_end = self.input.position;
 1224|   245k|                    return if self.input.starts_with('/') {
 1225|   207k|                        self.input.next();
 1226|   207k|                        self.output.push('/');
 1227|   207k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  37.4k|                        self.output_positions.authority_end = self.output.len();
 1230|  37.4k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   245k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCsl9Ey8gUtMBe_5oxttl:
 1539|   101k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   284k|        while let Some(c) = self.input.next() {
 1541|   183k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   183k|            })?;
 1544|       |        }
 1545|   101k|        Ok(())
 1546|   101k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCsl9Ey8gUtMBe_5oxttl:
 1346|   196k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  1.14M|        loop {
 1349|  1.14M|            let c = self.input.next();
 1350|  1.14M|            match c {
 1351|       |                Some('@') => {
 1352|  5.03k|                    self.output.push('@');
 1353|  5.03k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   191k|                    self.input = ParserInput {
 1357|   191k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   191k|                        position: self.input_scheme_end + 2,
 1359|   191k|                    };
 1360|   191k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   191k|                    return self.parse_host();
 1362|       |                }
 1363|   948k|                Some(c) => {
 1364|   948k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   948k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   196k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCsl9Ey8gUtMBe_5oxttl:
 1454|   196k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   196k|        match c {
 1456|       |            None => {
 1457|  23.5k|                self.output_positions.path_end = self.output.len();
 1458|  23.5k|                self.output_positions.query_end = self.output.len();
 1459|  23.5k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  22.3k|                self.output_positions.path_end = self.output.len();
 1463|  22.3k|                self.output.push('?');
 1464|  22.3k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  35.2k|                self.output_positions.path_end = self.output.len();
 1468|  35.2k|                self.output_positions.query_end = self.output.len();
 1469|  35.2k|                self.output.push('#');
 1470|  35.2k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|   115k|                self.output.push('/');
 1474|   115k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   196k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCsl9Ey8gUtMBe_5oxttl:
 1199|   245k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   245k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   245k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   245k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCsl9Ey8gUtMBe_5oxttl:
 1245|   207k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   207k|        if self.input.starts_with('/') {
 1247|   196k|            self.input.next();
 1248|   196k|            self.output.push('/');
 1249|   196k|            self.parse_authority()
 1250|       |        } else {
 1251|  11.2k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  11.2k|            self.parse_path()
 1253|       |        }
 1254|   207k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCsl9Ey8gUtMBe_5oxttl:
 1174|   245k|    fn parse(
 1175|   245k|        iri: &'a str,
 1176|   245k|        base: Option<IriRef<&'a str>>,
 1177|   245k|        output: &'a mut O,
 1178|   245k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   245k|        let mut parser = Self {
 1180|   245k|            iri,
 1181|   245k|            base,
 1182|   245k|            input: ParserInput {
 1183|   245k|                value: iri.chars(),
 1184|   245k|                position: 0,
 1185|   245k|            },
 1186|   245k|            output,
 1187|   245k|            output_positions: IriElementsPositions {
 1188|   245k|                scheme_end: 0,
 1189|   245k|                authority_end: 0,
 1190|   245k|                path_end: 0,
 1191|   245k|                query_end: 0,
 1192|   245k|            },
 1193|   245k|            input_scheme_end: 0,
 1194|   245k|        };
 1195|   245k|        parser.parse_scheme_start()?;
 1196|   245k|        Ok(parser.output_positions)
 1197|   245k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_hostCsl9Ey8gUtMBe_5oxttl:
 1372|   380k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   380k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|   239k|            let start_position = self.input.position;
 1376|  2.50M|            while let Some(c) = self.input.next() {
 1377|  2.49M|                self.output.push(c);
 1378|  2.49M|                if c == ']' {
 1379|   223k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|   223k|                    if !UNCHECKED {
 1381|   223k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|   103k|                            self.validate_ip_v_future(ip)?;
 1383|   120k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|  21.3k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|  99.1k|                        }
 1386|      0|                    }
 1387|       |
 1388|   108k|                    let c = self.input.next();
 1389|   108k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  59.5k|                            self.output.push(':');
 1392|  59.5k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  40.3k|                            self.output_positions.authority_end = self.output.len();
 1396|  40.3k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|  8.53k|                        Some(c) => {
 1399|  8.53k|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|  8.53k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  2.26M|                }
 1408|       |            }
 1409|  15.8k|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|  15.8k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|   235k|            loop {
 1419|   235k|                let c = self.input.next();
 1420|   235k|                match c {
 1421|       |                    Some(':') => {
 1422|  64.7k|                        self.output.push(':');
 1423|  64.7k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|  68.0k|                        self.output_positions.authority_end = self.output.len();
 1427|  68.0k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|   102k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   380k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_pathCsl9Ey8gUtMBe_5oxttl:
 1485|   339k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   910k|        loop {
 1487|   910k|            let c = self.input.next();
 1488|   910k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   378k|                    if self.output.as_str().ends_with("/..") {
 1491|  10.1k|                        self.remove_last_segment();
 1492|  10.1k|                        self.remove_last_segment();
 1493|  10.1k|                        self.output.push('/');
 1494|   368k|                    } else if self.output.as_str().ends_with("/.") {
 1495|  27.5k|                        self.remove_last_segment();
 1496|  27.5k|                        self.output.push('/');
 1497|   340k|                    } else if c == Some('/') {
 1498|  69.2k|                        self.output.push('/');
 1499|   271k|                    }
 1500|       |
 1501|   378k|                    if c == Some('?') {
 1502|  46.7k|                        self.output_positions.path_end = self.output.len();
 1503|  46.7k|                        self.output.push('?');
 1504|  46.7k|                        return self.parse_query();
 1505|   331k|                    } else if c == Some('#') {
 1506|  28.2k|                        self.output_positions.path_end = self.output.len();
 1507|  28.2k|                        self.output_positions.query_end = self.output.len();
 1508|  28.2k|                        self.output.push('#');
 1509|  28.2k|                        return self.parse_fragment();
 1510|   303k|                    } else if c.is_none() {
 1511|   226k|                        self.output_positions.path_end = self.output.len();
 1512|   226k|                        self.output_positions.query_end = self.output.len();
 1513|   226k|                        return Ok(());
 1514|  76.8k|                    }
 1515|       |                }
 1516|   531k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   531k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   339k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10parse_portCsl9Ey8gUtMBe_5oxttl:
 1435|   124k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   172k|        loop {
 1437|   172k|            let c = self.input.next();
 1438|   172k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|   109k|                    self.output_positions.authority_end = self.output.len();
 1441|   109k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  62.3k|                Some(c) => {
 1444|  62.3k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  47.8k|                        self.output.push(c)
 1446|       |                    } else {
 1447|  14.5k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|   124k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E10read_echarCsl9Ey8gUtMBe_5oxttl:
 1571|   148k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|   148k|        let c1 = self.input.next();
 1573|   148k|        let c2 = self.input.next();
 1574|   148k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  93.4k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  81.9k|            self.output.push('%');
 1578|  81.9k|            self.output.push(c1.unwrap());
 1579|  81.9k|            self.output.push(c2.unwrap());
 1580|  81.9k|            Ok(())
 1581|       |        } else {
 1582|  66.8k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  66.8k|                Some('%'),
 1584|  66.8k|                c1,
 1585|  66.8k|                c2,
 1586|  66.8k|            ]))
 1587|       |        }
 1588|   148k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E11parse_queryCsl9Ey8gUtMBe_5oxttl:
 1523|   177k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   508k|        while let Some(c) = self.input.next() {
 1525|   440k|            if c == '#' {
 1526|  72.8k|                self.output_positions.query_end = self.output.len();
 1527|  72.8k|                self.output.push('#');
 1528|  72.8k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   367k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   367k|                })?
 1533|       |            }
 1534|       |        }
 1535|  68.5k|        self.output_positions.query_end = self.output.len();
 1536|  68.5k|        Ok(())
 1537|   177k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E12parse_schemeCsl9Ey8gUtMBe_5oxttl:
 1213|   187k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   606k|        loop {
 1215|   606k|            let c = self.input.next();
 1216|   585k|            match c {
 1217|   585k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   419k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   114k|                    self.output.push(':');
 1222|   114k|                    self.output_positions.scheme_end = self.output.len();
 1223|   114k|                    self.input_scheme_end = self.input.position;
 1224|   114k|                    return if self.input.starts_with('/') {
 1225|  66.5k|                        self.input.next();
 1226|  66.5k|                        self.output.push('/');
 1227|  66.5k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  47.9k|                        self.output_positions.authority_end = self.output.len();
 1230|  47.9k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  72.5k|                    self.input = ParserInput {
 1235|  72.5k|                        value: self.iri.chars(),
 1236|  72.5k|                        position: 0,
 1237|  72.5k|                    }; // reset
 1238|  72.5k|                    self.output.clear();
 1239|  72.5k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   187k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_fragmentCsl9Ey8gUtMBe_5oxttl:
 1539|   297k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   838k|        while let Some(c) = self.input.next() {
 1541|   606k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   606k|            })?;
 1544|       |        }
 1545|   232k|        Ok(())
 1546|   297k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E14parse_relativeCsl9Ey8gUtMBe_5oxttl:
 1256|  1.02M|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|  1.02M|        if let Some(base) = self.base {
 1258|  1.02M|            match self.input.front() {
 1259|       |                None => {
 1260|   141k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|   141k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|   141k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|   141k|                    self.output_positions.path_end = base.positions.path_end;
 1264|   141k|                    self.output_positions.query_end = base.positions.query_end;
 1265|   141k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   404k|                    self.input.next();
 1269|   404k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  95.5k|                    self.input.next();
 1273|  95.5k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  95.5k|                    self.output.push('?');
 1275|  95.5k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  95.5k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  95.5k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  95.5k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|   128k|                    self.input.next();
 1282|   128k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|   128k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|   128k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|   128k|                    self.output_positions.path_end = base.positions.path_end;
 1286|   128k|                    self.output_positions.query_end = base.positions.query_end;
 1287|   128k|                    self.output.push('#');
 1288|   128k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|   257k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|   257k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|   257k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|   257k|                    self.output_positions.path_end = base.positions.path_end;
 1295|   257k|                    self.remove_last_segment();
 1296|   257k|                    if self.output.len() > base.positions.scheme_end {
 1297|   247k|                        // We have some path or authority, we keep a base '/'
 1298|   247k|                        self.output.push('/');
 1299|   247k|                    }
 1300|   257k|                    self.parse_relative_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_relative_path()
 1313|       |            }
 1314|       |        }
 1315|  1.02M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E15parse_authorityCsl9Ey8gUtMBe_5oxttl:
 1346|   389k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|   643k|        loop {
 1349|   643k|            let c = self.input.next();
 1350|   643k|            match c {
 1351|       |                Some('@') => {
 1352|  20.5k|                    self.output.push('@');
 1353|  20.5k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   359k|                    self.input = ParserInput {
 1357|   359k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   359k|                        position: self.input_scheme_end + 2,
 1359|   359k|                    };
 1360|   359k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   359k|                    return self.parse_host();
 1362|       |                }
 1363|   263k|                Some(c) => {
 1364|   263k|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|   263k|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   389k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E16parse_path_startCsl9Ey8gUtMBe_5oxttl:
 1454|   218k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   218k|        match c {
 1456|       |            None => {
 1457|  80.1k|                self.output_positions.path_end = self.output.len();
 1458|  80.1k|                self.output_positions.query_end = self.output.len();
 1459|  80.1k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  35.2k|                self.output_positions.path_end = self.output.len();
 1463|  35.2k|                self.output.push('?');
 1464|  35.2k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  67.8k|                self.output_positions.path_end = self.output.len();
 1468|  67.8k|                self.output_positions.query_end = self.output.len();
 1469|  67.8k|                self.output.push('#');
 1470|  67.8k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|  34.8k|                self.output.push('/');
 1474|  34.8k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   218k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E18parse_scheme_startCsl9Ey8gUtMBe_5oxttl:
 1199|  1.14M|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  1.14M|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  5.36k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  5.36k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  1.00M|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   955k|            _ => self.parse_relative(),
 1210|       |        }
 1211|  1.14M|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19parse_relative_pathCsl9Ey8gUtMBe_5oxttl:
 1317|   257k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1318|   748k|        while let Some(c) = self.input.front() {
 1319|   647k|            if matches!(c, '/' | '?' | '#') {
 1320|  74.3k|                break;
 1321|   573k|            }
 1322|   573k|            self.input.next();
 1323|   573k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1324|       |        }
 1325|   175k|        self.parse_path()
 1326|   257k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E19remove_last_segmentCsl9Ey8gUtMBe_5oxttl:
 1548|   305k|    fn remove_last_segment(&mut self) {
 1549|   305k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1550|   305k|            .rfind('/')
 1551|   305k|            .unwrap_or(0);
 1552|   305k|        self.output
 1553|   305k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1554|   305k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E20parse_relative_slashCsl9Ey8gUtMBe_5oxttl:
 1328|   404k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1329|   404k|        if self.input.starts_with('/') {
 1330|   344k|            self.input.next();
 1331|   344k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1332|   344k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1333|   344k|            self.output.push('/');
 1334|   344k|            self.output.push('/');
 1335|   344k|            self.parse_authority()
 1336|       |        } else {
 1337|  60.1k|            self.output
 1338|  60.1k|                .push_str(&base.iri[..base.positions.authority_end]);
 1339|  60.1k|            self.output.push('/');
 1340|  60.1k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1341|  60.1k|            self.output_positions.authority_end = base.positions.authority_end;
 1342|  60.1k|            self.parse_path()
 1343|       |        }
 1344|   404k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E20validate_ip_v_futureCsl9Ey8gUtMBe_5oxttl:
 1595|   103k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1596|   103k|        let mut chars = ip.chars();
 1597|       |
 1598|   103k|        let c = chars.next().ok_or(IriParseError {
 1599|   103k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1600|   103k|        })?;
 1601|   103k|        if !matches!(c, 'v' | 'V') {
 1602|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1603|   103k|        };
 1604|   103k|
 1605|   103k|        let mut with_a_version = false;
 1606|   277k|        for c in &mut chars {
 1607|   265k|            if c == '.' {
 1608|  49.8k|                break;
 1609|   215k|            } else if c.is_ascii_hexdigit() {
 1610|   174k|                with_a_version = true;
 1611|   174k|            } else {
 1612|  41.2k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1613|       |            }
 1614|       |        }
 1615|  62.0k|        if !with_a_version {
 1616|  31.3k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1617|  31.3k|                chars.next().unwrap_or(']'),
 1618|  31.3k|            ));
 1619|  30.7k|        }
 1620|  30.7k|
 1621|  30.7k|        if chars.as_str().is_empty() {
 1622|  4.37k|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1623|  26.3k|        };
 1624|   371k|        for c in chars {
 1625|   362k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1626|  17.1k|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1627|   345k|            }
 1628|       |        }
 1629|       |
 1630|  9.25k|        Ok(())
 1631|   103k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E23parse_path_or_authorityCsl9Ey8gUtMBe_5oxttl:
 1245|  66.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  66.5k|        if self.input.starts_with('/') {
 1247|  45.3k|            self.input.next();
 1248|  45.3k|            self.output.push('/');
 1249|  45.3k|            self.parse_authority()
 1250|       |        } else {
 1251|  21.2k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  21.2k|            self.parse_path()
 1253|       |        }
 1254|  66.5k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtNtCs3OstG5Tqy1X_5alloc6string6StringKb0_E5parseCsl9Ey8gUtMBe_5oxttl:
 1174|  1.14M|    fn parse(
 1175|  1.14M|        iri: &'a str,
 1176|  1.14M|        base: Option<IriRef<&'a str>>,
 1177|  1.14M|        output: &'a mut O,
 1178|  1.14M|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  1.14M|        let mut parser = Self {
 1180|  1.14M|            iri,
 1181|  1.14M|            base,
 1182|  1.14M|            input: ParserInput {
 1183|  1.14M|                value: iri.chars(),
 1184|  1.14M|                position: 0,
 1185|  1.14M|            },
 1186|  1.14M|            output,
 1187|  1.14M|            output_positions: IriElementsPositions {
 1188|  1.14M|                scheme_end: 0,
 1189|  1.14M|                authority_end: 0,
 1190|  1.14M|                path_end: 0,
 1191|  1.14M|                query_end: 0,
 1192|  1.14M|            },
 1193|  1.14M|            input_scheme_end: 0,
 1194|  1.14M|        };
 1195|  1.14M|        parser.parse_scheme_start()?;
 1196|   749k|        Ok(parser.output_positions)
 1197|  1.14M|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE15parse_uncheckedCsl9Ey8gUtMBe_5oxttl:
  567|   245k|    pub fn parse_unchecked(iri: T) -> Self {
  568|   245k|        Iri(IriRef::parse_unchecked(iri))
  569|   245k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE4pathCsl9Ey8gUtMBe_5oxttl:
  717|   326k|    pub fn path(&self) -> &str {
  718|   326k|        self.0.path()
  719|   326k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE7resolveCsl9Ey8gUtMBe_5oxttl:
  584|  1.14M|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|  1.14M|        Ok(Iri(self.0.resolve(iri)?))
  586|  1.14M|    }
_RNvXsL_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCsl9Ey8gUtMBe_5oxttl:
  896|   478k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|   478k|        self.0.fmt(f)
  898|   478k|    }
_RNvXsg_Cs8SDT0Q3242W_5oxiriINtB5_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringENtNtCscdEvteftVc2_4core3fmt7Display3fmtCsl9Ey8gUtMBe_5oxttl:
  417|   478k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|   478k|        self.iri.fmt(f)
  419|   478k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer3lenCsl9Ey8gUtMBe_5oxttl:
 1124|  1.68M|    fn len(&self) -> usize {
 1125|  1.68M|        self.len()
 1126|  1.68M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer4pushCsl9Ey8gUtMBe_5oxttl:
 1104|  7.31M|    fn push(&mut self, c: char) {
 1105|  7.31M|        self.push(c);
 1106|  7.31M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer5clearCsl9Ey8gUtMBe_5oxttl:
 1114|  72.5k|    fn clear(&mut self) {
 1115|  72.5k|        self.clear();
 1116|  72.5k|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer6as_strCsl9Ey8gUtMBe_5oxttl:
 1129|  1.05M|    fn as_str(&self) -> &str {
 1130|  1.05M|        self.as_str()
 1131|  1.05M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8push_strCsl9Ey8gUtMBe_5oxttl:
 1109|  1.02M|    fn push_str(&mut self, s: &str) {
 1110|  1.02M|        self.push_str(s);
 1111|  1.02M|    }
_RNvXsZ_Cs8SDT0Q3242W_5oxiriNtNtCs3OstG5Tqy1X_5alloc6string6StringNtB5_12OutputBuffer8truncateCsl9Ey8gUtMBe_5oxttl:
 1119|   665k|    fn truncate(&mut self, new_len: usize) {
 1120|   665k|        self.truncate(new_len);
 1121|   665k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCsl9Ey8gUtMBe_5oxttl:
 1156|  1.61M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.61M|        self.value.as_str().starts_with(c)
 1158|  1.61M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCsl9Ey8gUtMBe_5oxttl:
 1141|  13.6M|    fn next(&mut self) -> Option<char> {
 1142|  13.6M|        if let Some(head) = self.value.next() {
 1143|  12.6M|            self.position += head.len_utf8();
 1144|  12.6M|            Some(head)
 1145|       |        } else {
 1146|   973k|            None
 1147|       |        }
 1148|  13.6M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCsl9Ey8gUtMBe_5oxttl:
 1151|  3.16M|    fn front(&self) -> Option<char> {
 1152|  3.16M|        self.value.clone().next()
 1153|  3.16M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsl9Ey8gUtMBe_5oxttl:
 1092|   981k|    fn len(&self) -> usize {
 1093|   981k|        self.len
 1094|   981k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsl9Ey8gUtMBe_5oxttl:
 1072|  4.74M|    fn push(&mut self, c: char) {
 1073|  4.74M|        self.len += c.len_utf8();
 1074|  4.74M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsl9Ey8gUtMBe_5oxttl:
 1097|   348k|    fn as_str(&self) -> &str {
 1098|   348k|        ""
 1099|   348k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsl9Ey8gUtMBe_5oxttl:
 1087|   191k|    fn truncate(&mut self, new_len: usize) {
 1088|   191k|        self.len = new_len;
 1089|   191k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs7Sgmv00SKa1_5oxrdf:
 1590|  90.9k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1591|  90.9k|        Err(IriParseError { kind })
 1592|  90.9k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs7Sgmv00SKa1_5oxrdf:
 1556|   306k|    fn read_url_codepoint_or_echar(
 1557|   306k|        &mut self,
 1558|   306k|        c: char,
 1559|   306k|        valid: impl Fn(char) -> bool,
 1560|   306k|    ) -> Result<(), IriParseError> {
 1561|   306k|        if UNCHECKED || valid(c) {
 1562|   282k|            self.output.push(c);
 1563|   282k|            Ok(())
 1564|  24.2k|        } else if c == '%' {
 1565|  20.7k|            self.read_echar()
 1566|       |        } else {
 1567|  3.54k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   306k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs7Sgmv00SKa1_5oxrdf:
 1556|   418k|    fn read_url_codepoint_or_echar(
 1557|   418k|        &mut self,
 1558|   418k|        c: char,
 1559|   418k|        valid: impl Fn(char) -> bool,
 1560|   418k|    ) -> Result<(), IriParseError> {
 1561|   418k|        if UNCHECKED || valid(c) {
 1562|   394k|            self.output.push(c);
 1563|   394k|            Ok(())
 1564|  24.2k|        } else if c == '%' {
 1565|  20.8k|            self.read_echar()
 1566|       |        } else {
 1567|  3.47k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   418k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs7Sgmv00SKa1_5oxrdf:
 1556|   576k|    fn read_url_codepoint_or_echar(
 1557|   576k|        &mut self,
 1558|   576k|        c: char,
 1559|   576k|        valid: impl Fn(char) -> bool,
 1560|   576k|    ) -> Result<(), IriParseError> {
 1561|   576k|        if UNCHECKED || valid(c) {
 1562|   513k|            self.output.push(c);
 1563|   513k|            Ok(())
 1564|  62.6k|        } else if c == '%' {
 1565|  55.2k|            self.read_echar()
 1566|       |        } else {
 1567|  7.39k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|   576k|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs7Sgmv00SKa1_5oxrdf:
 1556|  1.74M|    fn read_url_codepoint_or_echar(
 1557|  1.74M|        &mut self,
 1558|  1.74M|        c: char,
 1559|  1.74M|        valid: impl Fn(char) -> bool,
 1560|  1.74M|    ) -> Result<(), IriParseError> {
 1561|  1.74M|        if UNCHECKED || valid(c) {
 1562|  1.72M|            self.output.push(c);
 1563|  1.72M|            Ok(())
 1564|  20.3k|        } else if c == '%' {
 1565|  17.9k|            self.read_echar()
 1566|       |        } else {
 1567|  2.43k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  1.74M|    }
_RINvMs11_Cs8SDT0Q3242W_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs7Sgmv00SKa1_5oxrdf:
 1556|  1.58M|    fn read_url_codepoint_or_echar(
 1557|  1.58M|        &mut self,
 1558|  1.58M|        c: char,
 1559|  1.58M|        valid: impl Fn(char) -> bool,
 1560|  1.58M|    ) -> Result<(), IriParseError> {
 1561|  1.58M|        if UNCHECKED || valid(c) {
 1562|  1.57M|            self.output.push(c);
 1563|  1.57M|            Ok(())
 1564|  13.2k|        } else if c == '%' {
 1565|  10.6k|            self.read_echar()
 1566|       |        } else {
 1567|  2.58k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1568|       |        }
 1569|  1.58M|    }
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs7Sgmv00SKa1_5oxrdf:
 1516|   306k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|   306k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   306k|                })?,
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs7Sgmv00SKa1_5oxrdf:
 1574|   110k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs7Sgmv00SKa1_5oxrdf:
 1575|  88.6k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs7Sgmv00SKa1_5oxrdf:
 1530|   418k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|   418k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   418k|                })?
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs7Sgmv00SKa1_5oxrdf:
 1541|   576k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|   576k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   576k|            })?;
_RNCNvMs11_Cs8SDT0Q3242W_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs7Sgmv00SKa1_5oxrdf:
 1364|  1.74M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|  1.74M|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  1.74M|                    })?;
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs7Sgmv00SKa1_5oxrdf:
  185|   749k|    pub fn into_inner(self) -> T {
  186|   749k|        self.iri
  187|   749k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCs7Sgmv00SKa1_5oxrdf:
  199|  73.6k|    pub fn is_absolute(&self) -> bool {
  200|  73.6k|        self.positions.scheme_end != 0
  201|  73.6k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs7Sgmv00SKa1_5oxrdf:
   58|  73.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  73.6k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  73.6k|        Ok(Self { iri, positions })
   61|  73.6k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefReE11is_absoluteCs7Sgmv00SKa1_5oxrdf:
  199|   326k|    pub fn is_absolute(&self) -> bool {
  200|   326k|        self.positions.scheme_end != 0
  201|   326k|    }
_RNvMCs8SDT0Q3242W_5oxiriINtB2_6IriRefReE5parseCs7Sgmv00SKa1_5oxrdf:
   58|   417k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   417k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   326k|        Ok(Self { iri, positions })
   61|   417k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs7Sgmv00SKa1_5oxrdf:
 1372|   423k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1373|   423k|        if self.input.starts_with('[') {
 1374|       |            // IP v6
 1375|   162k|            let start_position = self.input.position;
 1376|  3.15M|            while let Some(c) = self.input.next() {
 1377|  3.15M|                self.output.push(c);
 1378|  3.15M|                if c == ']' {
 1379|   162k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1380|   162k|                    if !UNCHECKED {
 1381|   162k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1382|  66.0k|                            self.validate_ip_v_future(ip)?;
 1383|  96.6k|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1384|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1385|  96.6k|                        }
 1386|      0|                    }
 1387|       |
 1388|   162k|                    let c = self.input.next();
 1389|   162k|                    return match c {
 1390|       |                        Some(':') => {
 1391|  63.2k|                            self.output.push(':');
 1392|  63.2k|                            self.parse_port()
 1393|       |                        }
 1394|       |                        None | Some('/') | Some('?') | Some('#') => {
 1395|  91.0k|                            self.output_positions.authority_end = self.output.len();
 1396|  91.0k|                            self.parse_path_start(c)
 1397|       |                        }
 1398|  8.40k|                        Some(c) => {
 1399|  8.40k|                            if UNCHECKED {
 1400|      0|                                self.output.push(c);
 1401|      0|                                continue;
 1402|       |                            } else {
 1403|  8.40k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1404|       |                            }
 1405|       |                        }
 1406|       |                    };
 1407|  2.99M|                }
 1408|       |            }
 1409|      0|            if UNCHECKED {
 1410|       |                // We consider it's valid even if it's not finished
 1411|      0|                self.output_positions.authority_end = self.output.len();
 1412|      0|                self.parse_path_start(None)
 1413|       |            } else {
 1414|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1415|       |            }
 1416|       |        } else {
 1417|       |            // Other host
 1418|  1.84M|            loop {
 1419|  1.84M|                let c = self.input.next();
 1420|  1.84M|                match c {
 1421|       |                    Some(':') => {
 1422|  50.7k|                        self.output.push(':');
 1423|  50.7k|                        return self.parse_port();
 1424|       |                    }
 1425|       |                    None | Some('/') | Some('?') | Some('#') => {
 1426|   203k|                        self.output_positions.authority_end = self.output.len();
 1427|   203k|                        return self.parse_path_start(c);
 1428|       |                    }
 1429|  1.58M|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1430|       |                }
 1431|       |            }
 1432|       |        }
 1433|   423k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs7Sgmv00SKa1_5oxrdf:
 1485|   204k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1486|   513k|        loop {
 1487|   513k|            let c = self.input.next();
 1488|   513k|            match c {
 1489|       |                None | Some('/') | Some('?') | Some('#') => {
 1490|   207k|                    if self.output.as_str().ends_with("/..") {
 1491|      0|                        self.remove_last_segment();
 1492|      0|                        self.remove_last_segment();
 1493|      0|                        self.output.push('/');
 1494|   207k|                    } else if self.output.as_str().ends_with("/.") {
 1495|      0|                        self.remove_last_segment();
 1496|      0|                        self.output.push('/');
 1497|   207k|                    } else if c == Some('/') {
 1498|  15.9k|                        self.output.push('/');
 1499|   191k|                    }
 1500|       |
 1501|   207k|                    if c == Some('?') {
 1502|  47.0k|                        self.output_positions.path_end = self.output.len();
 1503|  47.0k|                        self.output.push('?');
 1504|  47.0k|                        return self.parse_query();
 1505|   160k|                    } else if c == Some('#') {
 1506|  18.5k|                        self.output_positions.path_end = self.output.len();
 1507|  18.5k|                        self.output_positions.query_end = self.output.len();
 1508|  18.5k|                        self.output.push('#');
 1509|  18.5k|                        return self.parse_fragment();
 1510|   141k|                    } else if c.is_none() {
 1511|   125k|                        self.output_positions.path_end = self.output.len();
 1512|   125k|                        self.output_positions.query_end = self.output.len();
 1513|   125k|                        return Ok(());
 1514|  15.9k|                    }
 1515|       |                }
 1516|   306k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1517|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1518|   306k|                })?,
 1519|       |            }
 1520|       |        }
 1521|   204k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs7Sgmv00SKa1_5oxrdf:
 1435|   113k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1436|   143k|        loop {
 1437|   143k|            let c = self.input.next();
 1438|   143k|            match c {
 1439|       |                Some('/') | Some('?') | Some('#') | None => {
 1440|  91.4k|                    self.output_positions.authority_end = self.output.len();
 1441|  91.4k|                    return self.parse_path_start(c);
 1442|       |                }
 1443|  52.1k|                Some(c) => {
 1444|  52.1k|                    if UNCHECKED || c.is_ascii_digit() {
 1445|  29.5k|                        self.output.push(c)
 1446|       |                    } else {
 1447|  22.5k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1448|       |                    }
 1449|       |                }
 1450|       |            }
 1451|       |        }
 1452|   113k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs7Sgmv00SKa1_5oxrdf:
 1571|   125k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1572|   125k|        let c1 = self.input.next();
 1573|   125k|        let c2 = self.input.next();
 1574|   125k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1575|  91.9k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1576|       |        {
 1577|  84.8k|            self.output.push('%');
 1578|  84.8k|            self.output.push(c1.unwrap());
 1579|  84.8k|            self.output.push(c2.unwrap());
 1580|  84.8k|            Ok(())
 1581|       |        } else {
 1582|  40.5k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1583|  40.5k|                Some('%'),
 1584|  40.5k|                c1,
 1585|  40.5k|                c2,
 1586|  40.5k|            ]))
 1587|       |        }
 1588|   125k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs7Sgmv00SKa1_5oxrdf:
 1523|   108k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1524|   511k|        while let Some(c) = self.input.next() {
 1525|   451k|            if c == '#' {
 1526|  32.6k|                self.output_positions.query_end = self.output.len();
 1527|  32.6k|                self.output.push('#');
 1528|  32.6k|                return self.parse_fragment();
 1529|       |            } else {
 1530|   418k|                self.read_url_codepoint_or_echar(c, |c| {
 1531|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1532|   418k|                })?
 1533|       |            }
 1534|       |        }
 1535|  60.8k|        self.output_positions.query_end = self.output.len();
 1536|  60.8k|        Ok(())
 1537|   108k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs7Sgmv00SKa1_5oxrdf:
 1213|   491k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  2.61M|        loop {
 1215|  2.61M|            let c = self.input.next();
 1216|  2.61M|            match c {
 1217|  2.61M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  2.12M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   491k|                    self.output.push(':');
 1222|   491k|                    self.output_positions.scheme_end = self.output.len();
 1223|   491k|                    self.input_scheme_end = self.input.position;
 1224|   491k|                    return if self.input.starts_with('/') {
 1225|   446k|                        self.input.next();
 1226|   446k|                        self.output.push('/');
 1227|   446k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  44.8k|                        self.output_positions.authority_end = self.output.len();
 1230|  44.8k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   491k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs7Sgmv00SKa1_5oxrdf:
 1539|  95.0k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1540|   659k|        while let Some(c) = self.input.next() {
 1541|   576k|            self.read_url_codepoint_or_echar(c, |c| {
 1542|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1543|   576k|            })?;
 1544|       |        }
 1545|  83.1k|        Ok(())
 1546|  95.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs7Sgmv00SKa1_5oxrdf:
 1346|   436k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1347|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1348|  2.17M|        loop {
 1349|  2.17M|            let c = self.input.next();
 1350|  2.17M|            match c {
 1351|       |                Some('@') => {
 1352|  11.3k|                    self.output.push('@');
 1353|  11.3k|                    return self.parse_host();
 1354|       |                }
 1355|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1356|   412k|                    self.input = ParserInput {
 1357|   412k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1358|   412k|                        position: self.input_scheme_end + 2,
 1359|   412k|                    };
 1360|   412k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1361|   412k|                    return self.parse_host();
 1362|       |                }
 1363|  1.74M|                Some(c) => {
 1364|  1.74M|                    self.read_url_codepoint_or_echar(c, |c| {
 1365|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1366|  1.74M|                    })?;
 1367|       |                }
 1368|       |            }
 1369|       |        }
 1370|   436k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs7Sgmv00SKa1_5oxrdf:
 1454|   386k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1455|   386k|        match c {
 1456|       |            None => {
 1457|   130k|                self.output_positions.path_end = self.output.len();
 1458|   130k|                self.output_positions.query_end = self.output.len();
 1459|   130k|                Ok(())
 1460|       |            }
 1461|       |            Some('?') => {
 1462|  61.7k|                self.output_positions.path_end = self.output.len();
 1463|  61.7k|                self.output.push('?');
 1464|  61.7k|                self.parse_query()
 1465|       |            }
 1466|       |            Some('#') => {
 1467|  43.7k|                self.output_positions.path_end = self.output.len();
 1468|  43.7k|                self.output_positions.query_end = self.output.len();
 1469|  43.7k|                self.output.push('#');
 1470|  43.7k|                self.parse_fragment()
 1471|       |            }
 1472|       |            Some('/') => {
 1473|   149k|                self.output.push('/');
 1474|   149k|                self.parse_path()
 1475|       |            }
 1476|      0|            Some(c) => {
 1477|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1478|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1479|      0|                })?;
 1480|      0|                self.parse_path()
 1481|       |            }
 1482|       |        }
 1483|   386k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs7Sgmv00SKa1_5oxrdf:
 1199|   491k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   491k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   491k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   491k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCs7Sgmv00SKa1_5oxrdf:
 1595|  66.0k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1596|  66.0k|        let mut chars = ip.chars();
 1597|       |
 1598|  66.0k|        let c = chars.next().ok_or(IriParseError {
 1599|  66.0k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1600|  66.0k|        })?;
 1601|  66.0k|        if !matches!(c, 'v' | 'V') {
 1602|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1603|  66.0k|        };
 1604|  66.0k|
 1605|  66.0k|        let mut with_a_version = false;
 1606|   140k|        for c in &mut chars {
 1607|   140k|            if c == '.' {
 1608|  66.0k|                break;
 1609|  74.6k|            } else if c.is_ascii_hexdigit() {
 1610|  74.6k|                with_a_version = true;
 1611|  74.6k|            } else {
 1612|      0|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1613|       |            }
 1614|       |        }
 1615|  66.0k|        if !with_a_version {
 1616|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1617|      0|                chars.next().unwrap_or(']'),
 1618|      0|            ));
 1619|  66.0k|        }
 1620|  66.0k|
 1621|  66.0k|        if chars.as_str().is_empty() {
 1622|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1623|  66.0k|        };
 1624|  2.48M|        for c in chars {
 1625|  2.42M|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1626|      0|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1627|  2.42M|            }
 1628|       |        }
 1629|       |
 1630|  66.0k|        Ok(())
 1631|  66.0k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs7Sgmv00SKa1_5oxrdf:
 1245|   446k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   446k|        if self.input.starts_with('/') {
 1247|   436k|            self.input.next();
 1248|   436k|            self.output.push('/');
 1249|   436k|            self.parse_authority()
 1250|       |        } else {
 1251|  9.91k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  9.91k|            self.parse_path()
 1253|       |        }
 1254|   446k|    }
_RNvMs11_Cs8SDT0Q3242W_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs7Sgmv00SKa1_5oxrdf:
 1174|   491k|    fn parse(
 1175|   491k|        iri: &'a str,
 1176|   491k|        base: Option<IriRef<&'a str>>,
 1177|   491k|        output: &'a mut O,
 1178|   491k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   491k|        let mut parser = Self {
 1180|   491k|            iri,
 1181|   491k|            base,
 1182|   491k|            input: ParserInput {
 1183|   491k|                value: iri.chars(),
 1184|   491k|                position: 0,
 1185|   491k|            },
 1186|   491k|            output,
 1187|   491k|            output_positions: IriElementsPositions {
 1188|   491k|                scheme_end: 0,
 1189|   491k|                authority_end: 0,
 1190|   491k|                path_end: 0,
 1191|   491k|                query_end: 0,
 1192|   491k|            },
 1193|   491k|            input_scheme_end: 0,
 1194|   491k|        };
 1195|   491k|        parser.parse_scheme_start()?;
 1196|   400k|        Ok(parser.output_positions)
 1197|   491k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCs7Sgmv00SKa1_5oxrdf:
  665|   749k|    pub fn into_inner(self) -> T {
  666|   749k|        self.0.into_inner()
  667|   749k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCs7Sgmv00SKa1_5oxrdf:
  556|  73.6k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  73.6k|        IriRef::parse(iri)?.try_into()
  558|  73.6k|    }
_RNvMsp_Cs8SDT0Q3242W_5oxiriINtB5_3IriReE5parseCs7Sgmv00SKa1_5oxrdf:
  556|   417k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   417k|        IriRef::parse(iri)?.try_into()
  558|   417k|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs7Sgmv00SKa1_5oxrdf:
  968|  73.6k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  73.6k|        if iri.is_absolute() {
  970|  73.6k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  73.6k|    }
_RNvXsV_Cs8SDT0Q3242W_5oxiriINtB5_3IriReEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs7Sgmv00SKa1_5oxrdf:
  968|   326k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   326k|        if iri.is_absolute() {
  970|   326k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   326k|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput11starts_withCs7Sgmv00SKa1_5oxrdf:
 1156|  1.36M|    fn starts_with(&self, c: char) -> bool {
 1157|  1.36M|        self.value.as_str().starts_with(c)
 1158|  1.36M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput4nextCs7Sgmv00SKa1_5oxrdf:
 1141|  12.9M|    fn next(&mut self) -> Option<char> {
 1142|  12.9M|        if let Some(head) = self.value.next() {
 1143|  12.4M|            self.position += head.len_utf8();
 1144|  12.4M|            Some(head)
 1145|       |        } else {
 1146|   493k|            None
 1147|       |        }
 1148|  12.9M|    }
_RNvMs10_Cs8SDT0Q3242W_5oxiriNtB6_11ParserInput5frontCs7Sgmv00SKa1_5oxrdf:
 1151|   491k|    fn front(&self) -> Option<char> {
 1152|   491k|        self.value.clone().next()
 1153|   491k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs7Sgmv00SKa1_5oxrdf:
 1092|  1.77M|    fn len(&self) -> usize {
 1093|  1.77M|        self.len
 1094|  1.77M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs7Sgmv00SKa1_5oxrdf:
 1072|  11.9M|    fn push(&mut self, c: char) {
 1073|  11.9M|        self.len += c.len_utf8();
 1074|  11.9M|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs7Sgmv00SKa1_5oxrdf:
 1097|   414k|    fn as_str(&self) -> &str {
 1098|   414k|        ""
 1099|   414k|    }
_RNvXsY_Cs8SDT0Q3242W_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs7Sgmv00SKa1_5oxrdf:
 1087|   412k|    fn truncate(&mut self, new_len: usize) {
 1088|   412k|        self.len = new_len;
 1089|   412k|    }
_RNvXsW_Cs8SDT0Q3242W_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|   489k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   489k|        match &self.kind {
 1005|  5.36k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|   126k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|   126k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  21.3k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  37.0k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|   191k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|   191k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|   107k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|   107k|                f,
 1016|   107k|                "Invalid IRI percent encoding '{}'",
 1017|   107k|                cs.iter().flatten().cloned().collect::<String>()
 1018|   107k|            ),
 1019|       |        }
 1020|   489k|    }
_RNvCs8SDT0Q3242W_5oxiri28is_iunreserved_or_sub_delims:
 1634|  7.08M|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1635|  7.08M|    matches!(c,
 1636|  3.56M|        'a'..='z'
 1637|   665k|        | 'A'..='Z'
 1638|  2.23M|        | '0'..='9'
 1639|       |        | '!'
 1640|       |        | '$'
 1641|       |        | '&'
 1642|       |        | '\''
 1643|       |        | '('
 1644|       |        | ')'
 1645|       |        | '*'
 1646|       |        | '+'
 1647|       |        | ','
 1648|       |        | '-'
 1649|       |        | '.'
 1650|       |        | ';'
 1651|       |        | '='
 1652|       |        | '_'
 1653|       |        | '~'
 1654|   413k|        | '\u{A0}'..='\u{D7FF}'
 1655|   155k|        | '\u{F900}'..='\u{FDCF}'
 1656|   155k|        | '\u{FDF0}'..='\u{FFEF}'
 1657|   155k|        | '\u{10000}'..='\u{1FFFD}'
 1658|   155k|        | '\u{20000}'..='\u{2FFFD}'
 1659|   155k|        | '\u{30000}'..='\u{3FFFD}'
 1660|   155k|        | '\u{40000}'..='\u{4FFFD}'
 1661|   155k|        | '\u{50000}'..='\u{5FFFD}'
 1662|   155k|        | '\u{60000}'..='\u{6FFFD}'
 1663|   155k|        | '\u{70000}'..='\u{7FFFD}'
 1664|   155k|        | '\u{80000}'..='\u{8FFFD}'
 1665|   155k|        | '\u{90000}'..='\u{9FFFD}'
 1666|   155k|        | '\u{A0000}'..='\u{AFFFD}'
 1667|   155k|        | '\u{B0000}'..='\u{BFFFD}'
 1668|   155k|        | '\u{C0000}'..='\u{CFFFD}'
 1669|   154k|        | '\u{D0000}'..='\u{DFFFD}'
 1670|    178|        | '\u{E1000}'..='\u{EFFFD}'
 1671|       |    )
 1672|  7.08M|}
_RNvCs8SDT0Q3242W_5oxiri27is_unreserved_or_sub_delims:
 1674|  2.78M|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1675|  2.78M|    matches!(c,
 1676|   326k|        'a'..='z'
 1677|   227k|        | 'A'..='Z'
 1678|   166k|        | '0'..='9'
 1679|       |        | '!'
 1680|       |        | '$'
 1681|       |        | '&'
 1682|       |        | '\''
 1683|       |        | '('
 1684|       |        | ')'
 1685|       |        | '*'
 1686|       |        | '+'
 1687|       |        | ','
 1688|       |        | '-'
 1689|       |        | '.'
 1690|       |        | ';'
 1691|       |        | '='
 1692|       |        | '_'
 1693|       |        | '~'
 1694|       |    )
 1695|  2.78M|}

_RNvMNtCskvDGSdgrgYo_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCse6VyXqGER07_11rand_chacha:
   15|  52.7M|    pub fn new(xs: [W; 2]) -> Self {
   16|  52.7M|        x2(xs, PhantomData)
   17|  52.7M|    }
_RNvXsJ_NtCskvDGSdgrgYo_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCse6VyXqGER07_11rand_chacha:
   24|  18.4M|            fn $fn(self, rhs: Self) -> Self::Output {
   25|  18.4M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   26|  18.4M|            }
_RNvXsP_NtCskvDGSdgrgYo_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCse6VyXqGER07_11rand_chacha:
   34|  18.4M|            fn $fn_assign(&mut self, rhs: Self) {
   35|  18.4M|                (self.0[0]).$fn_assign(rhs.0[0]);
   36|  18.4M|                (self.0[1]).$fn_assign(rhs.0[1]);
   37|  18.4M|            }
_RNvXs_NtCskvDGSdgrgYo_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cse6VyXqGER07_11rand_chacha:
   44|  4.61M|        fn $fn(self) -> Self {
   45|  4.61M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  4.61M|        }
_RNvXs_NtCskvDGSdgrgYo_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cse6VyXqGER07_11rand_chacha:
   44|  4.61M|        fn $fn(self) -> Self {
   45|  4.61M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  4.61M|        }
_RNvXs_NtCskvDGSdgrgYo_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cse6VyXqGER07_11rand_chacha:
   44|  4.61M|        fn $fn(self) -> Self {
   45|  4.61M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  4.61M|        }
_RNvXs_NtCskvDGSdgrgYo_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cse6VyXqGER07_11rand_chacha:
   44|  4.61M|        fn $fn(self) -> Self {
   45|  4.61M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   46|  4.61M|        }
_RNvXsg_NtCskvDGSdgrgYo_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cse6VyXqGER07_11rand_chacha:
  210|  4.61M|    fn shuffle_lane_words1230(self) -> Self {
  211|  4.61M|        Self::new([
  212|  4.61M|            self.0[0].shuffle_lane_words1230(),
  213|  4.61M|            self.0[1].shuffle_lane_words1230(),
  214|  4.61M|        ])
  215|  4.61M|    }
_RNvXsg_NtCskvDGSdgrgYo_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cse6VyXqGER07_11rand_chacha:
  203|  4.61M|    fn shuffle_lane_words2301(self) -> Self {
  204|  4.61M|        Self::new([
  205|  4.61M|            self.0[0].shuffle_lane_words2301(),
  206|  4.61M|            self.0[1].shuffle_lane_words2301(),
  207|  4.61M|        ])
  208|  4.61M|    }
_RNvXsg_NtCskvDGSdgrgYo_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cse6VyXqGER07_11rand_chacha:
  217|  4.61M|    fn shuffle_lane_words3012(self) -> Self {
  218|  4.61M|        Self::new([
  219|  4.61M|            self.0[0].shuffle_lane_words3012(),
  220|  4.61M|            self.0[1].shuffle_lane_words3012(),
  221|  4.61M|        ])
  222|  4.61M|    }

_RINvYINtNtCskvDGSdgrgYo_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECse6VyXqGER07_11rand_chacha:
  259|  3.00k|    fn read_le<V>(self, input: &[u8]) -> V
  260|  3.00k|    where
  261|  3.00k|        V: StoreBytes,
  262|  3.00k|    {
  263|  3.00k|        unsafe { V::unsafe_read_le(input) }
  264|  3.00k|    }
_RINvYINtNtCskvDGSdgrgYo_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECse6VyXqGER07_11rand_chacha:
  251|   384k|    fn vec<V, A>(self, a: A) -> V
  252|   384k|    where
  253|   384k|        V: MultiLane<A>,
  254|   384k|    {
  255|   384k|        V::from_lanes(a)
  256|   384k|    }
_RINvYINtNtCskvDGSdgrgYo_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECse6VyXqGER07_11rand_chacha:
  246|  3.46M|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  3.46M|        unsafe { V::unpack(s) }
  248|  3.46M|    }
_RINvYINtNtCskvDGSdgrgYo_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECse6VyXqGER07_11rand_chacha:
  246|   384k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   384k|        unsafe { V::unpack(s) }
  248|   384k|    }

_RNvXNtCskvDGSdgrgYo_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCse6VyXqGER07_11rand_chacha:
   65|  1.50k|    unsafe fn instance() -> Self {
   66|  1.50k|        SseMachine(PhantomData)
   67|  1.50k|    }
_RNvXs_NtCskvDGSdgrgYo_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCse6VyXqGER07_11rand_chacha:
   93|   384k|    unsafe fn instance() -> Self {
   94|   384k|        Avx2Machine(PhantomData)
   95|   384k|    }
_RNvNtCse6VyXqGER07_11rand_chacha4guts11refill_wide:
  252|   384k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  253|   384k|            #[inline(always)]
  254|   384k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  255|   384k|            use std::arch::x86_64::*;
  256|   384k|            #[target_feature(enable = "avx2")]
  257|   384k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|   384k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|   384k|                _mm256_zeroupper();
  260|   384k|                ret
  261|   384k|            }
  262|   384k|            #[target_feature(enable = "avx")]
  263|   384k|            #[target_feature(enable = "sse4.1")]
  264|   384k|            #[target_feature(enable = "ssse3")]
  265|   384k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  266|   384k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  267|   384k|                _mm256_zeroupper();
  268|   384k|                ret
  269|   384k|            }
  270|   384k|            #[target_feature(enable = "sse4.1")]
  271|   384k|            #[target_feature(enable = "ssse3")]
  272|   384k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  273|   384k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  274|   384k|            }
  275|   384k|            #[target_feature(enable = "ssse3")]
  276|   384k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  277|   384k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  278|   384k|            }
  279|   384k|            #[target_feature(enable = "sse2")]
  280|   384k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  281|   384k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  282|   384k|            }
  283|   384k|            unsafe {
  284|   384k|                if is_x86_feature_detected!("avx2") {
  285|   384k|                    impl_avx2($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("avx") {
  287|      0|                    impl_avx($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("sse4.1") {
  289|      0|                    impl_sse41($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("ssse3") {
  291|      0|                    impl_ssse3($($arg),*)
  292|      0|                } else if is_x86_feature_detected!("sse2") {
  293|      0|                    impl_sse2($($arg),*)
  294|       |                } else {
  295|      0|                    unimplemented!()
  296|       |                }
  297|       |            }
  298|       |        }
_RNvNvNtCse6VyXqGER07_11rand_chacha4guts11refill_wide9impl_avx2:
  257|   384k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  258|   384k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  259|   384k|                _mm256_zeroupper();
  260|   384k|                ret
  261|   384k|            }
_RNvNtCse6VyXqGER07_11rand_chacha4guts11init_chacha:
  335|  1.50k|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  336|  1.50k|            #[inline(always)]
  337|  1.50k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  338|  1.50k|            use std::arch::x86_64::*;
  339|  1.50k|            #[target_feature(enable = "avx")]
  340|  1.50k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|  1.50k|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|  1.50k|            }
  343|  1.50k|            #[target_feature(enable = "sse2")]
  344|  1.50k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  345|  1.50k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  346|  1.50k|            }
  347|  1.50k|            unsafe {
  348|  1.50k|                if is_x86_feature_detected!("avx") {
  349|  1.50k|                    impl_avx($($arg),*)
  350|      0|                } else if is_x86_feature_detected!("sse2") {
  351|      0|                    impl_sse2($($arg),*)
  352|       |                } else {
  353|      0|                    unimplemented!()
  354|       |                }
  355|       |            }
  356|       |        }
_RNvNvNtCse6VyXqGER07_11rand_chacha4guts11init_chacha8impl_avx:
  340|  1.50k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  341|  1.50k|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  342|  1.50k|            }
_RNvXs2_NtCskvDGSdgrgYo_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromAmj4_E4from:
  132|  1.50k|    fn from(u32x4: [u32; 4]) -> Self {
  133|  1.50k|        vec128_storage { u32x4 }
  134|  1.50k|    }

_RNvMNtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCse6VyXqGER07_11rand_chacha:
 1398|   142M|        fn new(x: __m256i) -> Self {
 1399|   142M|            Self { x, ni: PhantomData }
 1400|   142M|        }
_RNvMsZ_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCse6VyXqGER07_11rand_chacha:
   66|  21.5M|            fn new(x: __m128i) -> Self {
   67|  21.5M|                $vec {
   68|  21.5M|                    x,
   69|  21.5M|                    s3: PhantomData,
   70|  21.5M|                    s4: PhantomData,
   71|  21.5M|                    ni: PhantomData,
   72|  21.5M|                }
   73|  21.5M|            }
_RNvXs0_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCse6VyXqGER07_11rand_chacha:
 1406|   769k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1407|   769k|            Self::new(p.avx)
 1408|   769k|        }
_RNvXs10_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCse6VyXqGER07_11rand_chacha:
   81|  3.00k|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   82|  3.00k|                assert_eq!(input.len(), 16);
   83|  3.00k|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   84|  3.00k|            }
_RNvXs10_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCse6VyXqGER07_11rand_chacha:
   91|  6.15M|            fn write_le(self, out: &mut [u8]) {
   92|  6.15M|                assert_eq!(out.len(), 16);
   93|  6.15M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   94|  6.15M|            }
_RNvXs20_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCse6VyXqGER07_11rand_chacha:
   19|  6.15M|            fn $fn(self, rhs: Self) -> Self::Output {
   20|  6.15M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   21|  6.15M|            }
_RNvXs2_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCse6VyXqGER07_11rand_chacha:
 1443|  3.07M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1444|  3.07M|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1445|  3.07M|        }
_RNvXs2_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCse6VyXqGER07_11rand_chacha:
 1434|  3.07M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1435|  3.07M|            unsafe {
 1436|  3.07M|                [
 1437|  3.07M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1438|  3.07M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1439|  3.07M|                ]
 1440|  3.07M|            }
 1441|  3.07M|        }
_RNvXs6_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCse6VyXqGER07_11rand_chacha:
  333|   384k|    fn from_lanes(xs: [u32; 4]) -> Self {
  334|   384k|        unsafe {
  335|   384k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  336|   384k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  337|   384k|            Self::new(x)
  338|   384k|        }
  339|   384k|    }
_RNvXs6_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCse6VyXqGER07_11rand_chacha:
  325|  1.53M|    fn to_lanes(self) -> [u32; 4] {
  326|  1.53M|        unsafe {
  327|  1.53M|            let x = _mm_cvtsi128_si64(self.x) as u64;
  328|  1.53M|            let y = _mm_extract_epi64(self.x, 1) as u64;
  329|  1.53M|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  330|  1.53M|        }
  331|  1.53M|    }
_RNvXs6_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cse6VyXqGER07_11rand_chacha:
 1474|  9.23M|            fn $name(self) -> Self {
 1475|  9.23M|                Self::new(unsafe {
 1476|  9.23M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  9.23M|                })
 1478|  9.23M|            }
_RNvXs6_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cse6VyXqGER07_11rand_chacha:
 1484|  9.23M|            fn $name(self) -> Self {
 1485|  9.23M|                Self::new(unsafe {
 1486|  9.23M|                    _mm256_or_si256(
 1487|  9.23M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  9.23M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  9.23M|                    )
 1490|  9.23M|                })
 1491|  9.23M|            }
_RNvXs6_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cse6VyXqGER07_11rand_chacha:
 1474|  9.23M|            fn $name(self) -> Self {
 1475|  9.23M|                Self::new(unsafe {
 1476|  9.23M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1477|  9.23M|                })
 1478|  9.23M|            }
_RNvXs6_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cse6VyXqGER07_11rand_chacha:
 1484|  9.23M|            fn $name(self) -> Self {
 1485|  9.23M|                Self::new(unsafe {
 1486|  9.23M|                    _mm256_or_si256(
 1487|  9.23M|                        _mm256_srli_epi32(self.x, $i as i32),
 1488|  9.23M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1489|  9.23M|                    )
 1490|  9.23M|                })
 1491|  9.23M|            }
_RNvXsX_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCse6VyXqGER07_11rand_chacha:
   54|  3.46M|            unsafe fn unpack(x: vec128_storage) -> Self {
   55|  3.46M|                Self::new(x.sse2)
   56|  3.46M|            }
_RNvXsc_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cse6VyXqGER07_11rand_chacha:
 1586|  9.23M|        fn shuffle_lane_words1230(self) -> Self {
 1587|  9.23M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1588|  9.23M|        }
_RNvXsc_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cse6VyXqGER07_11rand_chacha:
 1590|  9.23M|        fn shuffle_lane_words2301(self) -> Self {
 1591|  9.23M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1592|  9.23M|        }
_RNvXsc_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cse6VyXqGER07_11rand_chacha:
 1594|  9.23M|        fn shuffle_lane_words3012(self) -> Self {
 1595|  9.23M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1596|  9.23M|        }
_RNvXse_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCse6VyXqGER07_11rand_chacha:
 1606|   384k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1607|   384k|            Self::new([
 1608|   384k|                u32x4x2_avx2::unpack(p.avx[0]),
 1609|   384k|                u32x4x2_avx2::unpack(p.avx[1]),
 1610|   384k|            ])
 1611|   384k|        }
_RNvXsf_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCse6VyXqGER07_11rand_chacha:
 1621|  1.53M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1622|  1.53M|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1623|  1.53M|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1624|  1.53M|            Self::new([ab, cd])
 1625|  1.53M|        }
_RNvXsf_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCse6VyXqGER07_11rand_chacha:
 1615|  1.53M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1616|  1.53M|            let [a, b] = self.0[0].to_lanes();
 1617|  1.53M|            let [c, d] = self.0[1].to_lanes();
 1618|  1.53M|            [a, b, c, d]
 1619|  1.53M|        }
_RNvXsl_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCse6VyXqGER07_11rand_chacha:
  525|  5.38M|    fn insert(self, v: u32, i: u32) -> Self {
  526|  5.38M|        Self::new(unsafe {
  527|  5.38M|            match i {
  528|  2.69M|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  529|  2.69M|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  530|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  531|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  532|      0|                _ => unreachable!(),
  533|       |            }
  534|       |        })
  535|  5.38M|    }
_RNvXsl_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCse6VyXqGER07_11rand_chacha:
  521|  1.53M|    fn extract(self, i: u32) -> u32 {
  522|  1.53M|        self.to_lanes()[i as usize]
  523|  1.53M|    }
_RNvXst_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith9AddAssign10add_assignCse6VyXqGER07_11rand_chacha:
 1531|  36.9M|                fn $assign_fn(&mut self, rhs: Self) {
 1532|  36.9M|                    *self = self.$bin_fn(rhs);
 1533|  36.9M|                }
_RNvXsu_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops3bit6BitXor6bitxorCse6VyXqGER07_11rand_chacha:
 1547|  36.9M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  36.9M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  36.9M|                }
_RNvXsy_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCscdEvteftVc2_4core3ops5arith3Add3addCse6VyXqGER07_11rand_chacha:
 1547|  36.9M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1548|  36.9M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1549|  36.9M|                }
_RNvXsY_NtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCscdEvteftVc2_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCse6VyXqGER07_11rand_chacha:
   60|   387k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   61|   387k|                vec128_storage { sse2: x.x }
   62|   387k|            }
_RNvXsj_NtNtNtCskvDGSdgrgYo_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCscdEvteftVc2_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCse6VyXqGER07_11rand_chacha:
 1687|   384k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1688|   384k|            Self {
 1689|   384k|                avx: [
 1690|   384k|                    vec256_storage { avx: x.0[0].x },
 1691|   384k|                    vec256_storage { avx: x.0[1].x },
 1692|   384k|                ],
 1693|   384k|            }
 1694|   384k|        }

_RINvXs2_NtNtCsc6ys30LEjZl_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsl9Ey8gUtMBe_5oxttl:
   51|  6.15M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  6.15M|        // Use LE; we explicitly generate one value before the next.
   53|  6.15M|        let x = u128::from(rng.next_u64());
   54|  6.15M|        let y = u128::from(rng.next_u64());
   55|  6.15M|        (y << 64) | x
   56|  6.15M|    }

_RINvCsc6ys30LEjZl_4rand6randomoECsl9Ey8gUtMBe_5oxttl:
  183|  6.15M|pub fn random<T>() -> T
  184|  6.15M|where Standard: Distribution<T> {
  185|  6.15M|    thread_rng().gen()
  186|  6.15M|}

_RINvYNtNtNtCsc6ys30LEjZl_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsl9Ey8gUtMBe_5oxttl:
   93|  6.15M|    fn gen<T>(&mut self) -> T
   94|  6.15M|    where Standard: Distribution<T> {
   95|  6.15M|        Standard.sample(self)
   96|  6.15M|    }

_RNvXs_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngENtB24_7RngCore8next_u64Csl9Ey8gUtMBe_5oxttl:
  124|  12.3M|    fn next_u64(&mut self) -> u64 {
  125|  12.3M|        self.0.next_u64()
  126|  12.3M|    }
_RNvMNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|   384k|    fn generate(&mut self, results: &mut Self::Results) {
  174|   384k|        let global_fork_counter = fork::get_fork_counter();
  175|   384k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|  1.50k|            return self.reseed_and_generate(results, global_fork_counter);
  180|   383k|        }
  181|   383k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|   383k|        self.bytes_until_reseed -= num_bytes as i64;
  183|   383k|        self.inner.generate(results);
  184|   384k|    }
_RNvMs3_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE6reseedBb_:
  219|  1.50k|    fn reseed(&mut self) -> Result<(), Error> {
  220|  1.50k|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|  1.50k|        })
  224|  1.50k|    }
_RNCNvMs3_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE6reseed0Bd_:
  220|  1.50k|        R::from_rng(&mut self.reseeder).map(|result| {
  221|  1.50k|            self.bytes_until_reseed = self.threshold;
  222|  1.50k|            self.inner = result
  223|  1.50k|        })
_RNvMs3_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE9is_forkedBb_:
  226|   384k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|   384k|        // In theory, on 32-bit platforms, it is possible for
  228|   384k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|   384k|        //
  230|   384k|        // This check will detect a fork in the normal case where
  231|   384k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|   384k|        // between both is greater than `isize::MAX` (wrapped around).
  233|   384k|        //
  234|   384k|        // It will still fail to detect a fork if there have been more than
  235|   384k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|   384k|        // enough.
  237|   384k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|   384k|    }
_RNvMs3_NtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|  1.50k|    fn reseed_and_generate(
  242|  1.50k|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|  1.50k|    ) {
  244|  1.50k|        #![allow(clippy::if_same_then_else)] // false positive
  245|  1.50k|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|  1.50k|        } else {
  248|  1.50k|            trace!("Reseeding RNG (periodic reseed)");
  249|  1.50k|        }
  250|       |
  251|  1.50k|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|  1.50k|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|  1.50k|        }
  257|  1.50k|        self.fork_counter = global_fork_counter;
  258|  1.50k|
  259|  1.50k|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|  1.50k|        self.inner.generate(results);
  261|  1.50k|    }
_RNvNtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|   384k|    pub fn get_fork_counter() -> usize {
  308|   384k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|   384k|    }
_RNvNtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsc6ys30LEjZl_4rand4rngs6threadNtB4_9ThreadRngNtCs5oKiaLr02aj_9rand_core7RngCore8next_u64:
  109|  12.3M|    fn next_u64(&mut self) -> u64 {
  110|  12.3M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  12.3M|        // creates another mutable reference
  112|  12.3M|        let rng = unsafe { &mut *self.rng.get() };
  113|  12.3M|        rng.next_u64()
  114|  12.3M|    }
_RNvNtNtCsc6ys30LEjZl_4rand4rngs6thread10thread_rng:
   88|  6.15M|pub fn thread_rng() -> ThreadRng {
   89|  6.15M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  6.15M|    ThreadRng { rng }
   91|  6.15M|}
_RNCNvNtNtCsc6ys30LEjZl_4rand4rngs6thread10thread_rng0B7_:
   89|  6.15M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCse6VyXqGER07_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs5oKiaLr02aj_9rand_core5block12BlockRngCore8generateCsc6ys30LEjZl_4rand:
   89|   384k|            fn generate(&mut self, r: &mut Self::Results) {
   90|   384k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|   384k|                self.state.refill4($rounds, unsafe {
   92|   384k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|   384k|                });
   94|  24.6M|                for x in r.as_mut() {
   95|  24.6M|                    *x = x.to_le();
   96|  24.6M|                }
   97|   384k|            }
_RNvXsm_NtCse6VyXqGER07_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs5oKiaLr02aj_9rand_core11SeedableRng9from_seedCsc6ys30LEjZl_4rand:
  103|  1.50k|            fn from_seed(seed: Self::Seed) -> Self {
  104|  1.50k|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|  1.50k|            }
_RNvXs_NtCse6VyXqGER07_11rand_chacha6chachaINtB4_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsRefSmE6as_refB6_:
   46|  25.4M|    fn as_ref(&self) -> &[T] {
   47|  25.4M|        &self.0
   48|  25.4M|    }
_RNvXs0_NtCse6VyXqGER07_11rand_chacha6chachaINtB5_7Array64mEINtNtCscdEvteftVc2_4core7convert5AsMutSmE6as_mutB7_:
   51|   384k|    fn as_mut(&mut self) -> &mut [T] {
   52|   384k|        &mut self.0
   53|   384k|    }
_RNvXNtCse6VyXqGER07_11rand_chacha6chachaINtB2_7Array64mENtNtCscdEvteftVc2_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCse6VyXqGER07_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|  1.50k|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|  1.50k|        init_chacha(key, nonce)
   74|  1.50k|    }
_RNvMNtCse6VyXqGER07_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|   384k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|   384k|        refill_wide(self, drounds, out)
   86|   384k|    }
_RINvNtCse6VyXqGER07_11rand_chacha4guts5roundINtNtCskvDGSdgrgYo_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  4.61M|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  4.61M|    x.a += x.b;
   45|  4.61M|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  4.61M|    x.c += x.d;
   47|  4.61M|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  4.61M|    x.a += x.b;
   49|  4.61M|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  4.61M|    x.c += x.d;
   51|  4.61M|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  4.61M|    x
   53|  4.61M|}
_RINvNtCse6VyXqGER07_11rand_chacha4guts11diagonalizeINtNtCskvDGSdgrgYo_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  2.30M|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  2.30M|    x.b = x.b.shuffle_lane_words3012();
   58|  2.30M|    x.c = x.c.shuffle_lane_words2301();
   59|  2.30M|    x.d = x.d.shuffle_lane_words1230();
   60|  2.30M|    x
   61|  2.30M|}
_RINvNtCse6VyXqGER07_11rand_chacha4guts13undiagonalizeINtNtCskvDGSdgrgYo_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  2.30M|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  2.30M|    x.b = x.b.shuffle_lane_words1230();
   65|  2.30M|    x.c = x.c.shuffle_lane_words2301();
   66|  2.30M|    x.d = x.d.shuffle_lane_words3012();
   67|  2.30M|    x
   68|  2.30M|}
_RINvMNtCse6VyXqGER07_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCskvDGSdgrgYo_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   769k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   769k|        let d: M::u32x4 = m.unpack(self.d);
   79|   769k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   769k|    }
_RINvNtCse6VyXqGER07_11rand_chacha4guts16refill_wide_implINtNtCskvDGSdgrgYo_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|   384k|fn refill_wide_impl<Mach: Machine>(
  117|   384k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|   384k|) {
  119|   384k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|   384k|    let mut pos = state.pos64(m);
  121|   384k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|   384k|    pos = pos.wrapping_add(1);
  123|   384k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|   384k|    pos = pos.wrapping_add(1);
  125|   384k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|   384k|    pos = pos.wrapping_add(1);
  127|   384k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|   384k|
  129|   384k|    let b = m.unpack(state.b);
  130|   384k|    let c = m.unpack(state.c);
  131|   384k|    let mut x = State {
  132|   384k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|   384k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|   384k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|   384k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|   384k|    };
  137|  2.30M|    for _ in 0..drounds {
  138|  2.30M|        x = round(x);
  139|  2.30M|        x = undiagonalize(round(diagonalize(x)));
  140|  2.30M|    }
  141|   384k|    let mut pos = state.pos64(m);
  142|   384k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|   384k|    pos = pos.wrapping_add(1);
  144|   384k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|   384k|    pos = pos.wrapping_add(1);
  146|   384k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|   384k|    pos = pos.wrapping_add(1);
  148|   384k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|   384k|    pos = pos.wrapping_add(1);
  150|   384k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|   384k|
  152|   384k|    let (a, b, c, d) = (
  153|   384k|        x.a.to_lanes(),
  154|   384k|        x.b.to_lanes(),
  155|   384k|        x.c.to_lanes(),
  156|   384k|        x.d.to_lanes(),
  157|   384k|    );
  158|   384k|    let sb = m.unpack(state.b);
  159|   384k|    let sc = m.unpack(state.c);
  160|   384k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|   384k|    state.d = d4.into();
  162|   384k|    let mut words = out.chunks_exact_mut(16);
  163|  1.53M|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  1.53M|        (a + k).write_le(words.next().unwrap());
  165|  1.53M|        (b + sb).write_le(words.next().unwrap());
  166|  1.53M|        (c + sc).write_le(words.next().unwrap());
  167|  1.53M|        (d + sd).write_le(words.next().unwrap());
  168|  1.53M|    }
  169|   384k|}
_RNvNtCse6VyXqGER07_11rand_chacha4guts10read_u32le:
  229|  3.00k|fn read_u32le(xs: &[u8]) -> u32 {
  230|  3.00k|    assert_eq!(xs.len(), 4);
  231|  3.00k|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|  3.00k|}
_RINvNvNtCse6VyXqGER07_11rand_chacha4guts11refill_wide7fn_implINtNtCskvDGSdgrgYo_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|   384k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|   384k|        refill_wide_impl(m, state, drounds, out);
  174|   384k|    }
_RINvNvNtCse6VyXqGER07_11rand_chacha4guts11init_chacha7fn_implINtNtCskvDGSdgrgYo_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|  1.50k|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|  1.50k|        let ctr_nonce = [
  237|       |            0,
  238|  1.50k|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|  1.50k|                0
  242|       |            },
  243|  1.50k|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|  1.50k|            read_u32le(&nonce[nonce.len() - 4..]),
  245|  1.50k|        ];
  246|  1.50k|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|  1.50k|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|  1.50k|        ChaCha {
  249|  1.50k|            b: key0.into(),
  250|  1.50k|            c: key1.into(),
  251|  1.50k|            d: ctr_nonce.into(),
  252|  1.50k|        }

_RNCNvXs0_NtCs5oKiaLr02aj_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640Csl9Ey8gUtMBe_5oxttl:
  198|  12.3M|        let read_u64 = |results: &[u32], index| {
  199|  12.3M|            let data = &results[index..=index + 1];
  200|  12.3M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  12.3M|        };
_RNvXs0_NtCs5oKiaLr02aj_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64Csl9Ey8gUtMBe_5oxttl:
  197|  12.3M|    fn next_u64(&mut self) -> u64 {
  198|  12.3M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  12.3M|        let len = self.results.as_ref().len();
  204|  12.3M|
  205|  12.3M|        let index = self.index;
  206|  12.3M|        if index < len - 1 {
  207|  11.9M|            self.index += 2;
  208|  11.9M|            // Read an u64 from the current index
  209|  11.9M|            read_u64(self.results.as_ref(), index)
  210|   384k|        } else if index >= len {
  211|   384k|            self.generate_and_set(2);
  212|   384k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  12.3M|    }
_RNvMs_NtCs5oKiaLr02aj_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|   384k|    pub fn generate_and_set(&mut self, index: usize) {
  175|   384k|        assert!(index < self.results.as_ref().len());
  176|   384k|        self.core.generate(&mut self.results);
  177|   384k|        self.index = index;
  178|   384k|    }
_RNvMs_NtCs5oKiaLr02aj_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsc6ys30LEjZl_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtCs5oKiaLr02aj_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsc6ys30LEjZl_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCse6VyXqGER07_11rand_chacha6chacha12ChaCha12CoreNtCs5oKiaLr02aj_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsc6ys30LEjZl_4rand:
  390|  1.50k|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|  1.50k|        let mut seed = Self::Seed::default();
  392|  1.50k|        rng.try_fill_bytes(seed.as_mut())?;
  393|  1.50k|        Ok(Self::from_seed(seed))
  394|  1.50k|    }
_RNvXs_Cs5oKiaLr02aj_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsc6ys30LEjZl_4rand:
  441|  1.50k|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|  1.50k|        (**self).try_fill_bytes(dest)
  443|  1.50k|    }

_RNvXs_NtCs5oKiaLr02aj_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|  1.50k|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|  1.50k|        getrandom(dest)?;
   69|  1.50k|        Ok(())
   70|  1.50k|    }

_RNvNvNtNtCsc6ys30LEjZl_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsc6ys30LEjZl_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|  6.15M|            unsafe fn __getit(
   86|  6.15M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|  6.15M|            ) -> $crate::option::Option<&'static $t> {
   88|  6.15M|                #[thread_local]
   89|  6.15M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|  6.15M|                    $crate::thread::local_impl::Key::<$t>::new();
   91|  6.15M|
   92|  6.15M|                unsafe {
   93|  6.15M|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|  6.15M|                    })
  103|  6.15M|                }
  104|  6.15M|            }
_RNCNvNvNtNtCsc6ys30LEjZl_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNCNvNvCs6L0GYOrg4Xe_2n31__19___libfuzzer_sys_run0B5_:
   12|  50.9M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvMNtCs7Sgmv00SKa1_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsl9Ey8gUtMBe_5oxttl:
   62|  6.41k|    pub fn new_from_unique_id(id: u128) -> Self {
   63|  6.41k|        Self(BlankNodeContent::Anonymous {
   64|  6.41k|            id: id.to_ne_bytes(),
   65|  6.41k|            str: IdStr::new(id),
   66|  6.41k|        })
   67|  6.41k|    }
_RNvMs7_NtCs7Sgmv00SKa1_5oxrdf10blank_nodeNtB5_5IdStr3newCsl9Ey8gUtMBe_5oxttl:
  258|  6.16M|    fn new(id: u128) -> Self {
  259|  6.16M|        let mut str = [0; 32];
  260|  6.16M|        write!(&mut str[..], "{id:x}").unwrap();
  261|  6.16M|        Self(str)
  262|  6.16M|    }
_RNvMs7_NtCs7Sgmv00SKa1_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsl9Ey8gUtMBe_5oxttl:
  265|  6.15M|    fn as_str(&self) -> &str {
  266|  6.15M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  267|  6.15M|        str::from_utf8(&self.0[..len]).unwrap()
  268|  6.15M|    }
_RNvNtCs7Sgmv00SKa1_5oxrdf10blank_node13to_integer_idCsl9Ey8gUtMBe_5oxttl:
  331|  35.6k|fn to_integer_id(id: &str) -> Option<u128> {
  332|  35.6k|    let digits = id.as_bytes();
  333|  35.6k|    let mut value: u128 = 0;
  334|  35.6k|    if let None | Some(b'0') = digits.first() {
  335|  6.27k|        return None; // No empty string or leading zeros
  336|  29.3k|    }
  337|  80.4k|    for digit in digits {
  338|  73.9k|        value = value.checked_mul(16)?.checked_add(
  339|  73.0k|            match *digit {
  340|  71.8k|                b'0'..=b'9' => digit - b'0',
  341|  57.5k|                b'a'..=b'f' => digit - b'a' + 10,
  342|  21.9k|                _ => return None,
  343|       |            }
  344|  51.0k|            .into(),
  345|      0|        )?;
  346|       |    }
  347|  6.41k|    Some(value)
  348|  35.6k|}
_RNvXs0_NtCs7Sgmv00SKa1_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCscdEvteftVc2_4core7default7Default7defaultCsl9Ey8gUtMBe_5oxttl:
  109|  2.46M|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|  6.15M|        loop {
  112|  6.15M|            let id = random();
  113|  6.15M|            let str = IdStr::new(id);
  114|  6.15M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|  2.46M|                return Self(BlankNodeContent::Anonymous {
  116|  2.46M|                    id: id.to_ne_bytes(),
  117|  2.46M|                    str,
  118|  2.46M|                });
  119|  3.69M|            }
  120|       |        }
  121|  2.46M|    }
_RINvMNtCs7Sgmv00SKa1_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsl9Ey8gUtMBe_5oxttl:
   49|  35.6k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  35.6k|        let id = id.into();
   51|  35.6k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|  6.41k|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  29.2k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  35.6k|    }
_RNCNvMs7_NtCs7Sgmv00SKa1_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  266|   197M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCs7Sgmv00SKa1_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   47|  99.0k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  99.0k|        Self(LiteralContent::String(value.into()))
   49|  99.0k|    }
_RINvMNtCs7Sgmv00SKa1_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs3OstG5Tqy1X_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  25.6k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  25.6k|        let value = value.into();
   55|  25.6k|        let datatype = datatype.into();
   56|  25.6k|        Self(if datatype == xsd::STRING {
   57|  5.62k|            LiteralContent::String(value)
   58|       |        } else {
   59|  19.9k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  25.6k|    }
_RINvMNtCs7Sgmv00SKa1_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|   262k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|   262k|        let value = value.into();
   55|   262k|        let datatype = datatype.into();
   56|   262k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|   262k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|   262k|    }
_RINvMNtCs7Sgmv00SKa1_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringB1n_EB5_:
   85|  14.7k|    pub fn new_language_tagged_literal_unchecked(
   86|  14.7k|        value: impl Into<String>,
   87|  14.7k|        language: impl Into<String>,
   88|  14.7k|    ) -> Self {
   89|  14.7k|        Self(LiteralContent::LanguageTaggedString {
   90|  14.7k|            value: value.into(),
   91|  14.7k|            language: language.into(),
   92|  14.7k|        })
   93|  14.7k|    }

_RNvMs4_NtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsl9Ey8gUtMBe_5oxttl:
  138|   228k|    pub fn into_owned(self) -> NamedNode {
  139|   228k|        NamedNode::new_unchecked(self.iri)
  140|   228k|    }
_RINvMNtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|   484k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   484k|        Self { iri: iri.into() }
   41|   484k|    }
_RINvMNtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   509k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   509k|        Self { iri: iri.into() }
   41|   509k|    }
_RNvMNtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|   288k|    pub fn as_str(&self) -> &str {
   45|   288k|        self.iri.as_str()
   46|   288k|    }
_RNvMs4_NtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|   288k|    pub const fn as_str(self) -> &'a str {
  134|   288k|        self.iri
  135|   288k|    }
_RNvMs4_NtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|   262k|    pub fn into_owned(self) -> NamedNode {
  139|   262k|        NamedNode::new_unchecked(self.iri)
  140|   262k|    }
_RNvXs6_NtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|   262k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|   262k|        node.into_owned()
  154|   262k|    }
_RNvXs9_NtCs7Sgmv00SKa1_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCscdEvteftVc2_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|   288k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|   288k|        self.as_str() == other.as_str()
  175|   288k|    }

_RNvXs1g_NtCs7Sgmv00SKa1_5oxrdf6tripleNtB6_9GraphNameINtNtCscdEvteftVc2_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsl9Ey8gUtMBe_5oxttl:
 1000|  90.3k|    fn from(node: BlankNode) -> Self {
 1001|  90.3k|        Self::BlankNode(node)
 1002|  90.3k|    }

_RINvMNtCs7Sgmv00SKa1_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECsl9Ey8gUtMBe_5oxttl:
   35|  39.0k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  39.0k|        Self { name: name.into() }
   37|  39.0k|    }

_RNvXNtCsl9Ey8gUtMBe_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  28.8M|    fn recognize_next_token<'a>(
   56|  28.8M|        &mut self,
   57|  28.8M|        data: &'a [u8],
   58|  28.8M|        is_ending: bool,
   59|  28.8M|        options: &N3LexerOptions,
   60|  28.8M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  28.8M|        match *data.first()? {
   62|  5.17M|            b'<' => match *data.get(1)? {
   63|  16.9k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  99.5k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  99.5k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  33.8k|                        Some(if let Ok(result) = result {
   67|  13.6k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  20.2k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  65.6k|                    } else if is_ending {
   72|  3.67k|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  62.0k|                        None
   75|       |                    }
   76|       |                }
   77|   374k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|   374k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  65.4k|                        Some(if let Ok(result) = result {
   80|  9.82k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  55.6k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|   309k|                    } else if is_ending {
   85|  78.7k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|   230k|                        None
   88|       |                    }
   89|       |                }
   90|  4.05M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   427k|                if *data.get(1)? == b'>' {
   94|  41.3k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   293k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   246k|            b'_' => match data.get(1)? {
  100|   174k|                b':' => Self::recognize_blank_node_label(data),
  101|  52.1k|                c => Some((
  102|  52.1k|                    1,
  103|  52.1k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  52.1k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  85.3k|                if self.mode != N3LexerMode::NTriples
  108|  85.3k|                    && *data.get(1)? == b'"'
  109|  58.4k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  38.7k|                    self.recognize_long_string(data, b'"')
  112|       |                } else {
  113|  39.7k|                    self.recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   406k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   406k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  81.3k|                    self.recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   230k|                    self.recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|  2.03M|            b'@' => self.recognize_lang_tag(data),
  124|  2.24M|            b'.' => match data.get(1) {
  125|  1.49M|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|  1.86M|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   246k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|   113k|                if *data.get(1)? == b'^' {
  131|  65.4k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  40.7k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   214k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  84.5k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|  2.27M|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|   158k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   899k|                if *data.get(1)? == b'|' {
  142|  10.0k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   769k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   189k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|   138k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|   118k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  52.4k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  38.2k|                if *data.get(1)? == b'}' {
  153|  4.44k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  21.1k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|   425k|                if *data.get(1)? == b'>' {
  160|  20.8k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|   228k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  7.67M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   255k|            b'?' => self.recognize_variable(data, is_ending),
  167|  10.1M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  28.8M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  73.6k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  73.6k|        Self { mode, unchecked }
  175|  73.6k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  4.53M|    fn recognize_iri(
  178|  4.53M|        &self,
  179|  4.53M|        data: &[u8],
  180|  4.53M|        options: &N3LexerOptions,
  181|  4.53M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  4.53M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  4.53M|        let mut string = Vec::new();
  184|  4.53M|        let mut i = 1;
  185|       |        loop {
  186|  4.59M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|  1.32M|            string.extend_from_slice(&data[i..i + end]);
  188|  1.32M|            i += end;
  189|  1.32M|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  1.20M|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|   116k|                    let (additional, c) = self.recognize_escape(&data[i..], i, false)?;
  196|  96.2k|                    i += additional + 1;
  197|  96.2k|                    match c {
  198|  61.0k|                        Ok(c) => {
  199|  61.0k|                            let mut buf = [0; 4];
  200|  61.0k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  61.0k|                        }
  202|  35.1k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  4.53M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  1.20M|    fn parse_iri(
  211|  1.20M|        &self,
  212|  1.20M|        iri: Vec<u8>,
  213|  1.20M|        position: Range<usize>,
  214|  1.20M|        options: &N3LexerOptions,
  215|  1.20M|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  1.20M|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  1.14M|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|  1.14M|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|  1.14M|                    base_iri
  223|  1.14M|                        .resolve(&iri)
  224|  1.14M|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   749k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|  1.20M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  10.1M|    fn recognize_pname_or_keyword<'a>(
  238|  10.1M|        &self,
  239|  10.1M|        data: &'a [u8],
  240|  10.1M|        is_ending: bool,
  241|  10.1M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  10.1M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  10.1M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  10.1M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  10.1M|        let mut i = 0;
  246|       |        loop {
  247|  21.4M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  20.1M|                match r {
  249|  19.1M|                    Ok((c, consumed)) => {
  250|  19.1M|                        if c == ':' {
  251|  3.52M|                            i += consumed;
  252|  3.52M|                            break;
  253|  15.6M|                        } else if i == 0 {
  254|  6.81M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  3.31M|                                return Some((
  256|  3.31M|                                    consumed,
  257|  3.31M|                                    Err((
  258|  3.31M|                                        0..consumed,
  259|  3.31M|                                        format!(
  260|  3.31M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  3.31M|                                        ),
  262|  3.31M|                                    )
  263|  3.31M|                                        .into()),
  264|  3.31M|                                ));
  265|  3.49M|                            }
  266|  3.49M|                            i += consumed;
  267|  8.83M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  7.76M|                            i += consumed;
  269|  7.76M|                        } else {
  270|  1.26M|                            while data[..i].ends_with(b".") {
  271|   200k|                                i -= 1;
  272|   200k|                            }
  273|  1.06M|                            return Some((
  274|  1.06M|                                i,
  275|  1.06M|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|  1.06M|                            ));
  277|       |                        }
  278|       |                    }
  279|   953k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|  1.32M|            } else if is_ending {
  282|  11.6k|                while data[..i].ends_with(b".") {
  283|    910|                    i -= 1;
  284|    910|                }
  285|  10.7k|                return Some(if i == 0 {
  286|  1.88k|                    (
  287|  1.88k|                        1,
  288|  1.88k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.88k|                    )
  290|       |                } else {
  291|  8.88k|                    (
  292|  8.88k|                        i,
  293|  8.88k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  8.88k|                    )
  295|       |                });
  296|       |            } else {
  297|  1.31M|                return None;
  298|       |            }
  299|       |        }
  300|  3.52M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  3.52M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  3.52M|        if pn_prefix.ends_with('.') {
  305|  4.26k|            return Some((
  306|  4.26k|                i,
  307|  4.26k|                Err((
  308|  4.26k|                    0..i,
  309|  4.26k|                    format!(
  310|  4.26k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  4.26k|                )
  312|  4.26k|                    .into()),
  313|  4.26k|            ));
  314|  3.52M|        }
  315|       |
  316|  1.40M|        let (consumed, pn_local_result) =
  317|  3.52M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|  1.40M|        Some((
  319|  1.40M|            consumed + i,
  320|  1.40M|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|  1.40M|            }),
  325|  1.40M|        ))
  326|  10.1M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   255k|    fn recognize_variable<'a>(
  329|   255k|        &self,
  330|   255k|        data: &'a [u8],
  331|   255k|        is_ending: bool,
  332|   255k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   255k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|   125k|        Some((
  336|   125k|            consumed + 1,
  337|   125k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   125k|            }),
  344|   125k|        ))
  345|   255k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  3.77M|    fn recognize_optional_pn_local<'a>(
  348|  3.77M|        &self,
  349|  3.77M|        data: &'a [u8],
  350|  3.77M|        is_ending: bool,
  351|  3.77M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  3.77M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  3.77M|        let mut i = 0;
  354|  3.77M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  3.77M|        let mut position_that_is_already_in_buffer = 0;
  356|  3.77M|        let mut might_be_invalid_iri = false;
  357|  3.77M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  8.15M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  5.97M|                match r {
  361|  5.90M|                    Ok((c, consumed)) => {
  362|  5.90M|                        if c == '%' {
  363|  82.9k|                            i += 1;
  364|  82.9k|                            let a = char::from(*data.get(i)?);
  365|  62.2k|                            i += 1;
  366|  62.2k|                            let b = char::from(*data.get(i)?);
  367|  53.6k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  16.0k|                                return Some((i + 1, Err((
  369|  16.0k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  16.0k|                                ).into())));
  371|  37.5k|                            }
  372|  37.5k|                            i += 1;
  373|  37.5k|                            ends_with_unescaped_dot = 0;
  374|  5.82M|                        } else if c == '\\' {
  375|   536k|                            i += 1;
  376|   536k|                            let a = char::from(*data.get(i)?);
  377|   485k|                            if self.unchecked
  378|   385k|                                || matches!(
  379|   485k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|   100k|                            {
  396|   100k|                                // ok to escape
  397|   385k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   366k|                                // ok to escape but requires IRI validation
  399|   366k|                                might_be_invalid_iri = true;
  400|   366k|                            } else {
  401|  19.1k|                                return Some((i + 1, Err((
  402|  19.1k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  19.1k|                                ).into())));
  404|       |                            }
  405|   466k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   466k|                            // We add the missing bytes
  407|   466k|                            if i - position_that_is_already_in_buffer > 1 {
  408|   216k|                                buffer.push_str(
  409|   216k|                                    match str_from_utf8(
  410|   216k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   216k|                                        position_that_is_already_in_buffer..i - 1,
  412|   216k|                                    ) {
  413|   216k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   250k|                            }
  418|   466k|                            buffer.push(a);
  419|   466k|                            i += 1;
  420|   466k|                            position_that_is_already_in_buffer = i;
  421|   466k|                            ends_with_unescaped_dot = 0;
  422|  5.28M|                        } else if i == 0 {
  423|  2.11M|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   902k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|  1.20M|                            }
  427|  1.20M|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  1.20M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  1.20M|                                        || c == ':';
  431|      0|                            }
  432|  1.20M|                            i += consumed;
  433|  3.17M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  2.41M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  2.41M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  2.41M|                                        || c == ':';
  438|      0|                            }
  439|  2.41M|                            i += consumed;
  440|  2.41M|                            ends_with_unescaped_dot = 0;
  441|   762k|                        } else if c == '.' {
  442|   252k|                            i += consumed;
  443|   252k|                            ends_with_unescaped_dot += 1;
  444|   252k|                        } else {
  445|   510k|                            let buffer = if let Some(mut buffer) = buffer {
  446|   114k|                                buffer.push_str(
  447|   114k|                                    match str_from_utf8(
  448|   114k|                                        &data[position_that_is_already_in_buffer..i],
  449|   114k|                                        position_that_is_already_in_buffer..i,
  450|   114k|                                    ) {
  451|   114k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|   114k|                                for _ in 0..ends_with_unescaped_dot {
  457|  39.2k|                                    buffer.pop();
  458|  39.2k|                                }
  459|   114k|                                i -= ends_with_unescaped_dot;
  460|   114k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   396k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   396k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   396k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   396k|                                i -= ends_with_unescaped_dot;
  469|   396k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   510k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  71.7k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  2.17M|            } else if is_ending {
  477|  11.4k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  1.97k|                    while buffer.ends_with('.') {
  480|    650|                        buffer.pop();
  481|    650|                        i -= 1;
  482|    650|                    }
  483|  1.32k|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  10.0k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  10.0k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  10.6k|                    while let Some(d) = data.strip_suffix('.') {
  491|    576|                        data = d;
  492|    576|                        i -= 1;
  493|    576|                    }
  494|  10.0k|                    Cow::Borrowed(data)
  495|       |                };
  496|  11.4k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  2.16M|                return None;
  499|       |            }
  500|       |        }
  501|  3.77M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|   174k|    fn recognize_blank_node_label(
  504|   174k|        data: &[u8],
  505|   174k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|   174k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|   174k|        let mut i = 2;
  508|       |        loop {
  509|   525k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   425k|                Ok((c, consumed)) => {
  511|   425k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   358k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|   326k|                    {
  514|   326k|                        // Ok
  515|   326k|                    } else if i > 2 && c == '.' {
  516|  30.1k|                        if data[i - 1] == b'.' {
  517|  5.96k|                            i -= 1;
  518|  5.96k|                            return Some((
  519|  5.96k|                                i,
  520|  5.96k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  5.96k|                            ));
  522|  24.2k|                        }
  523|  68.6k|                    } else if i == 2 {
  524|  29.5k|                        return Some((
  525|  29.5k|                            i,
  526|  29.5k|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|  29.5k|                        ));
  528|  39.1k|                    } else if data[i - 1] == b'.' {
  529|  4.10k|                        i -= 1;
  530|  4.10k|                        return Some((
  531|  4.10k|                            i,
  532|  4.10k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  4.10k|                        ));
  534|       |                    } else {
  535|  35.0k|                        return Some((
  536|  35.0k|                            i,
  537|  35.0k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  35.0k|                        ));
  539|       |                    }
  540|   350k|                    i += consumed;
  541|       |                }
  542|  9.70k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|   174k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|  2.03M|    fn recognize_lang_tag<'a>(
  548|  2.03M|        &self,
  549|  2.03M|        data: &'a [u8],
  550|  2.03M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|  2.03M|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|  2.03M|        let mut is_last_block_empty = true;
  553|  10.5M|        for (i, c) in data[1..].iter().enumerate() {
  554|  10.5M|            if c.is_ascii_alphabetic() {
  555|  9.45M|                is_last_block_empty = false;
  556|  9.45M|            } else if i == 0 {
  557|   219k|                return Some((
  558|   219k|                    1,
  559|   219k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|   219k|                ));
  561|   872k|            } else if is_last_block_empty {
  562|  14.2k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   857k|            } else if *c == b'-' {
  564|   308k|                is_last_block_empty = true;
  565|   308k|            } else {
  566|   549k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|  1.25M|        None
  570|  2.03M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   563k|    fn parse_lang_tag<'a>(
  573|   563k|        &self,
  574|   563k|        lang_tag: &'a [u8],
  575|   563k|        position: Range<usize>,
  576|   563k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   563k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   563k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   563k|            LanguageTag::parse(lang_tag)
  582|   563k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   466k|                .into_inner()
  584|       |        }))
  585|   563k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   269k|    fn recognize_string(
  588|   269k|        &self,
  589|   269k|        data: &[u8],
  590|   269k|        delimiter: u8,
  591|   269k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  592|   269k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  593|   269k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  594|   269k|        let mut string = String::new();
  595|   269k|        let mut i = 1;
  596|       |        loop {
  597|   277k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  598|   248k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  599|   234k|                Ok(s) => string.push_str(s),
  600|  13.6k|                Err(e) => return Some((end, Err(e))),
  601|       |            };
  602|   234k|            i += end;
  603|   234k|            match data[i] {
  604|   234k|                c if c == delimiter => {
  605|   157k|                    return Some((i + 1, Ok(N3Token::String(string))));
  606|       |                }
  607|       |                b'\\' => {
  608|  77.4k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  609|  75.7k|                    i += additional + 1;
  610|  75.7k|                    match c {
  611|  7.69k|                        Ok(c) => {
  612|  7.69k|                            string.push(c);
  613|  7.69k|                        }
  614|  68.0k|                        Err(e) => {
  615|       |                            // We read until the end of string char
  616|  68.0k|                            let end = memchr(delimiter, &data[i..])?;
  617|  20.5k|                            return Some((i + end + 1, Err(e)));
  618|       |                        }
  619|       |                    }
  620|       |                }
  621|      0|                _ => unreachable!(),
  622|       |            }
  623|       |        }
  624|   269k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  626|   120k|    fn recognize_long_string(
  627|   120k|        &self,
  628|   120k|        data: &[u8],
  629|   120k|        delimiter: u8,
  630|   120k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  631|   120k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  632|   120k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  633|   120k|        let mut string = String::new();
  634|   120k|        let mut i = 3;
  635|       |        loop {
  636|   228k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  637|   203k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  638|   193k|                Ok(s) => string.push_str(s),
  639|  10.1k|                Err(e) => return Some((end, Err(e))),
  640|       |            };
  641|   193k|            i += end;
  642|   193k|            match data[i] {
  643|   193k|                c if c == delimiter => {
  644|   178k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  645|  69.6k|                        return Some((i + 3, Ok(N3Token::String(string))));
  646|   101k|                    }
  647|   101k|                    i += 1;
  648|   101k|                    string.push(char::from(delimiter));
  649|       |                }
  650|       |                b'\\' => {
  651|  14.2k|                    let (additional, c) = self.recognize_escape(&data[i..], i, true)?;
  652|  13.5k|                    i += additional + 1;
  653|  13.5k|                    match c {
  654|  6.99k|                        Ok(c) => {
  655|  6.99k|                            string.push(c);
  656|  6.99k|                        }
  657|  6.51k|                        Err(e) => return Some((i, Err(e))),
  658|       |                    }
  659|       |                }
  660|      0|                _ => unreachable!(),
  661|       |            }
  662|       |        }
  663|   120k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  665|  1.06M|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  666|  1.06M|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  667|  1.06M|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  668|  1.06M|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  669|  1.06M|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  670|  1.06M|        let mut i = 0;
  671|  1.06M|        let c = *data.first()?;
  672|  1.06M|        if matches!(c, b'+' | b'-') {
  673|   283k|            i += 1;
  674|   780k|        }
  675|       |        // We read the digits before .
  676|  1.06M|        let mut count_before: usize = 0;
  677|       |        loop {
  678|  1.87M|            let c = *data.get(i)?;
  679|  1.73M|            if c.is_ascii_digit() {
  680|   809k|                i += 1;
  681|   809k|                count_before += 1;
  682|   809k|            } else {
  683|   929k|                break;
  684|       |            }
  685|       |        }
  686|       |
  687|       |        // We read the digits after .
  688|       |        #[allow(clippy::if_then_some_else_none)]
  689|   929k|        let count_after = if *data.get(i)? == b'.' {
  690|   317k|            i += 1;
  691|   317k|
  692|   317k|            let mut count_after = 0;
  693|       |            loop {
  694|   476k|                let c = *data.get(i)?;
  695|   373k|                if c.is_ascii_digit() {
  696|   158k|                    i += 1;
  697|   158k|                    count_after += 1;
  698|   158k|                } else {
  699|   214k|                    break;
  700|   214k|                }
  701|   214k|            }
  702|   214k|            Some(count_after)
  703|       |        } else {
  704|   612k|            None
  705|       |        };
  706|       |
  707|       |        // End
  708|   827k|        let c = *data.get(i)?;
  709|   827k|        if matches!(c, b'e' | b'E') {
  710|   114k|            i += 1;
  711|       |
  712|   114k|            let c = *data.get(i)?;
  713|  92.4k|            if matches!(c, b'+' | b'-') {
  714|  4.46k|                i += 1;
  715|  87.9k|            }
  716|       |
  717|  92.4k|            let mut found = false;
  718|       |            loop {
  719|   187k|                let c = *data.get(i)?;
  720|   128k|                if c.is_ascii_digit() {
  721|  95.4k|                    i += 1;
  722|  95.4k|                    found = true;
  723|  95.4k|                } else {
  724|  32.9k|                    break;
  725|  32.9k|                }
  726|  32.9k|            }
  727|  32.9k|            Some((
  728|  32.9k|                i,
  729|  32.9k|                if !found {
  730|  14.6k|                    Err((0..i, "A double exponent cannot be empty").into())
  731|  18.2k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  732|  3.21k|                    Err((0..i, "A double should not be empty").into())
  733|       |                } else {
  734|  15.0k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  735|       |                },
  736|       |            ))
  737|   712k|        } else if let Some(count_after) = count_after {
  738|   148k|            if count_after == 0 {
  739|       |                // We do not consume the '.' after all
  740|  99.1k|                i -= 1;
  741|  99.1k|                Some((
  742|  99.1k|                    i,
  743|  99.1k|                    if count_before == 0 {
  744|  35.0k|                        Err((0..i, "An integer should not be empty").into())
  745|       |                    } else {
  746|  64.1k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  747|       |                    },
  748|       |                ))
  749|       |            } else {
  750|  49.6k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  751|       |            }
  752|       |        } else {
  753|       |            Some((
  754|   563k|                i,
  755|   563k|                if count_before == 0 {
  756|   104k|                    Err((0..i, "An integer should not be empty").into())
  757|       |                } else {
  758|   459k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  759|       |                },
  760|       |            ))
  761|       |        }
  762|  1.06M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  764|   208k|    fn recognize_escape(
  765|   208k|        &self,
  766|   208k|        data: &[u8],
  767|   208k|        position: usize,
  768|   208k|        with_echar: bool,
  769|   208k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  770|   208k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  771|   208k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  772|   208k|        match *data.get(1)? {
  773|  89.4k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  774|  77.8k|                Ok(c) => Some((5, Ok(c?))),
  775|  11.6k|                Err(e) => {
  776|  11.6k|                    if self.unchecked {
  777|      0|                        match Self::recognize_utf16_surrogate_pair(&data[2..], position) {
  778|      0|                            Ok(c) => Some((11, Ok(c?))),
  779|      0|                            Err(e) => Some((5, Err(e))),
  780|       |                        }
  781|       |                    } else {
  782|  11.6k|                        Some((5, Err(e)))
  783|       |                    }
  784|       |                }
  785|       |            },
  786|  3.58k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  787|    795|                Ok(c) => Some((9, Ok(c?))),
  788|  2.78k|                Err(e) => Some((9, Err(e))),
  789|       |            },
  790|    601|            b't' if with_echar => Some((1, Ok('\t'))),
  791|    717|            b'b' if with_echar => Some((1, Ok('\x08'))),
  792|    894|            b'n' if with_echar => Some((1, Ok('\n'))),
  793|    427|            b'r' if with_echar => Some((1, Ok('\r'))),
  794|  1.17k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  795|    211|            b'"' if with_echar => Some((1, Ok('"'))),
  796|    812|            b'\'' if with_echar => Some((1, Ok('\''))),
  797|  9.21k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  798|  95.3k|            c => Some((
  799|  95.3k|                1,
  800|  95.3k|                Err((
  801|  95.3k|                    position..position + 2,
  802|  95.3k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  803|  95.3k|                )
  804|  95.3k|                    .into()),
  805|  95.3k|            )), // TODO: read until end of string
  806|       |        }
  807|   208k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  809|  93.0k|    fn recognize_hex_char(
  810|  93.0k|        data: &[u8],
  811|  93.0k|        len: usize,
  812|  93.0k|        escape_char: char,
  813|  93.0k|        position: usize,
  814|  93.0k|    ) -> Result<Option<char>, TokenRecognizerError> {
  815|  93.0k|        if data.len() < len {
  816|  16.9k|            return Ok(None);
  817|  76.0k|        }
  818|  76.0k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  819|  66.1k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|       |            (
  821|       |                position..position + len + 2,
  822|       |                format!(
  823|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|       |                ),
  825|       |            )
  826|  66.1k|        })?;
  827|  62.0k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|       |            (
  829|       |                position..position + len +2,
  830|       |                format!(
  831|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|       |                ),
  833|       |            )
  834|  62.0k|        })?;
  835|  61.6k|        Ok(Some(c))
  836|  93.0k|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  913|  30.1M|    fn recognize_unicode_char(
  914|  30.1M|        data: &[u8],
  915|  30.1M|        position: usize,
  916|  30.1M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  917|  30.1M|        let mut code_point: u32;
  918|  30.1M|        let bytes_needed: usize;
  919|  30.1M|        let mut lower_boundary = 0x80;
  920|  30.1M|        let mut upper_boundary = 0xBF;
  921|       |
  922|  30.1M|        let byte = *data.first()?;
  923|  26.6M|        match byte {
  924|  26.6M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  925|  3.03M|            0xC2..=0xDF => {
  926|  2.57M|                bytes_needed = 1;
  927|  2.57M|                code_point = u32::from(byte) & 0x1F;
  928|  2.57M|            }
  929|   460k|            0xE0..=0xEF => {
  930|   191k|                if byte == 0xE0 {
  931|  21.6k|                    lower_boundary = 0xA0;
  932|   169k|                }
  933|   191k|                if byte == 0xED {
  934|  9.46k|                    upper_boundary = 0x9F;
  935|   181k|                }
  936|   191k|                bytes_needed = 2;
  937|   191k|                code_point = u32::from(byte) & 0xF;
  938|       |            }
  939|   268k|            0xF0..=0xF4 => {
  940|   122k|                if byte == 0xF0 {
  941|  2.96k|                    lower_boundary = 0x90;
  942|   119k|                }
  943|   122k|                if byte == 0xF4 {
  944|  3.40k|                    upper_boundary = 0x8F;
  945|   118k|                }
  946|   122k|                bytes_needed = 3;
  947|   122k|                code_point = u32::from(byte) & 0x7;
  948|       |            }
  949|       |            _ => {
  950|   709k|                return Some(Err((
  951|   709k|                    position..=position,
  952|   709k|                    "Invalid UTF-8 character encoding",
  953|   709k|                )
  954|   709k|                    .into()))
  955|       |            }
  956|       |        }
  957|       |
  958|  3.17M|        for i in 1..=bytes_needed {
  959|  3.17M|            let byte = *data.get(i)?;
  960|  3.08M|            if byte < lower_boundary || upper_boundary < byte {
  961|   325k|                return Some(Err((
  962|   325k|                    position..=position + i,
  963|   325k|                    "Invalid UTF-8 character encoding",
  964|   325k|                )
  965|   325k|                    .into()));
  966|  2.76M|            }
  967|  2.76M|            lower_boundary = 0x80;
  968|  2.76M|            upper_boundary = 0xBF;
  969|  2.76M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  970|       |        }
  971|       |
  972|  2.47M|        Some(
  973|  2.47M|            char::from_u32(code_point)
  974|  2.47M|                .map(|c| (c, bytes_needed + 1))
  975|  2.47M|                .ok_or_else(|| {
  976|       |                    (
  977|       |                        position..=position + bytes_needed,
  978|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  979|       |                    )
  980|       |                        .into()
  981|  2.47M|                }),
  982|  2.47M|        )
  983|  30.1M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  986|  21.3M|    fn is_possible_pn_chars_base(c: char) -> bool {
  987|  21.3M|        matches!(c,
  988|  12.7M|        'A'..='Z'
  989|  8.37M|        | 'a'..='z'
  990|  2.45M|        | '\u{00C0}'..='\u{00D6}'
  991|  2.45M|        | '\u{00D8}'..='\u{00F6}'
  992|  2.45M|        | '\u{00F8}'..='\u{02FF}'
  993|  1.83M|        | '\u{0370}'..='\u{037D}'
  994|  1.83M|        | '\u{037F}'..='\u{1FFF}'
  995|   163k|        | '\u{200C}'..='\u{200D}'
  996|   163k|        | '\u{2070}'..='\u{218F}'
  997|   163k|        | '\u{2C00}'..='\u{2FEF}'
  998|   163k|        | '\u{3001}'..='\u{D7FF}'
  999|  92.5k|        | '\u{F900}'..='\u{FDCF}'
 1000|  92.5k|        | '\u{FDF0}'..='\u{FFFD}'
 1001|  92.5k|        | '\u{10000}'..='\u{EFFFF}')
 1002|  21.3M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
 1005|  14.5M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
 1006|  14.5M|        Self::is_possible_pn_chars_base(c) || c == '_'
 1007|  14.5M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
 1010|  12.3M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
 1011|  12.3M|        Self::is_possible_pn_chars_u(c)
 1012|  4.22M|            || matches!(c,
 1013|  2.78M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
 1014|  12.3M|    }
_RNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
 1016|  3.62M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
 1017|  3.62M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
 1018|  3.62M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
 1019|  3.62M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
 1020|  3.62M|    }
_RNvNtCsl9Ey8gUtMBe_5oxttl5lexer18resolve_local_name:
 1023|   647k|pub fn resolve_local_name(
 1024|   647k|    prefix: &str,
 1025|   647k|    local: &str,
 1026|   647k|    might_be_invalid_iri: bool,
 1027|   647k|    prefixes: &HashMap<String, Iri<String>>,
 1028|   647k|) -> Result<NamedNode, String> {
 1029|   647k|    if let Some(start) = prefixes.get(prefix) {
 1030|   478k|        let iri = format!("{start}{local}");
 1031|   478k|        if might_be_invalid_iri || start.path().is_empty() {
 1032|       |            // We validate again. We always validate if the local part might be the IRI authority.
 1033|   417k|            if let Err(e) = Iri::parse(iri.as_str()) {
 1034|  90.9k|                return Err(format!(
 1035|  90.9k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
 1036|  90.9k|                ));
 1037|   326k|            }
 1038|  60.5k|        }
 1039|   387k|        Ok(NamedNode::new_unchecked(iri))
 1040|       |    } else {
 1041|   169k|        Err(format!("The prefix {prefix}: has not been declared"))
 1042|       |    }
 1043|   647k|}
_RNvNtCsl9Ey8gUtMBe_5oxttl5lexer13str_from_utf8:
 1045|  7.06M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
 1046|  7.06M|    str::from_utf8(data).map_err(|e| {
 1047|       |        (
 1048|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|       |            format!("Invalid UTF-8: {e}"),
 1050|       |        )
 1051|       |            .into()
 1052|  7.06M|    })
 1053|  7.06M|}
_RNvNtCsl9Ey8gUtMBe_5oxttl5lexer16string_from_utf8:
 1055|  1.20M|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
 1056|  1.20M|    String::from_utf8(data).map_err(|e| {
 1057|       |        (
 1058|       |            range.start + e.utf8_error().valid_up_to()
 1059|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|       |            format!("Invalid UTF-8: {e}"),
 1061|       |        )
 1062|       |            .into()
 1063|  1.20M|    })
 1064|  1.20M|}
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|   398k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|  1.31M|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|  1.31M|                prefix: pn_prefix,
  322|  1.31M|                local,
  323|  1.31M|                might_be_invalid_iri,
  324|  1.31M|            }),
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|   111k|            result.and_then(|(name, _)| {
  338|   111k|                if name.is_empty() {
  339|  48.2k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  63.6k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|   111k|            }),
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  96.9k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  819|  4.14k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  820|  4.14k|            (
  821|  4.14k|                position..position + len + 2,
  822|  4.14k|                format!(
  823|  4.14k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  824|  4.14k|                ),
  825|  4.14k|            )
  826|  4.14k|        })?;
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  827|    325|        let c = char::from_u32(codepoint).ok_or_else(|| {
  828|    325|            (
  829|    325|                position..position + len +2,
  830|    325|                format!(
  831|    325|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  832|    325|                ),
  833|    325|            )
  834|    325|        })?;
_RNCNvMs_NtCsl9Ey8gUtMBe_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  974|  2.47M|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCsl9Ey8gUtMBe_5oxttl5lexer13str_from_utf80B5_:
 1046|  33.7k|    str::from_utf8(data).map_err(|e| {
 1047|  33.7k|        (
 1048|  33.7k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
 1049|  33.7k|            format!("Invalid UTF-8: {e}"),
 1050|  33.7k|        )
 1051|  33.7k|            .into()
 1052|  33.7k|    })
_RNCNvNtCsl9Ey8gUtMBe_5oxttl5lexer16string_from_utf80B5_:
 1056|  57.6k|    String::from_utf8(data).map_err(|e| {
 1057|  57.6k|        (
 1058|  57.6k|            range.start + e.utf8_error().valid_up_to()
 1059|  57.6k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
 1060|  57.6k|            format!("Invalid UTF-8: {e}"),
 1061|  57.6k|        )
 1062|  57.6k|            .into()
 1063|  57.6k|    })

_RNvMsb_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_8N3Parser3newCs6L0GYOrg4Xe_2n3:
  220|  73.6k|    pub fn new() -> Self {
  221|  73.6k|        Self::default()
  222|  73.6k|    }
_RINvMsb_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_8N3Parser13with_base_iriReECs6L0GYOrg4Xe_2n3:
  236|  73.6k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  237|  73.6k|        self.base = Some(Iri::parse(base_iri.into())?);
  238|  73.6k|        Ok(self)
  239|  73.6k|    }
_RNvXs_NtCsl9Ey8gUtMBe_5oxttl2n3NtB4_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs7Sgmv00SKa1_5oxrdf10named_node9NamedNodeE4fromB6_:
   53|   476k|    fn from(node: NamedNode) -> Self {
   54|   476k|        Self::NamedNode(node)
   55|   476k|    }
_RNvXs0_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   60|   228k|    fn from(node: NamedNodeRef<'_>) -> Self {
   61|   228k|        Self::NamedNode(node.into_owned())
   62|   228k|    }
_RNvXs1_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs7Sgmv00SKa1_5oxrdf10blank_node9BlankNodeE4fromB7_:
   67|  2.19M|    fn from(node: BlankNode) -> Self {
   68|  2.19M|        Self::BlankNode(node)
   69|  2.19M|    }
_RNvXs2_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs7Sgmv00SKa1_5oxrdf7literal7LiteralE4fromB7_:
   74|   402k|    fn from(literal: Literal) -> Self {
   75|   402k|        Self::Literal(literal)
   76|   402k|    }
_RNvXs8_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_6N3TermINtNtCscdEvteftVc2_4core7convert4FromNtNtCs7Sgmv00SKa1_5oxrdf8variable8VariableE4fromB7_:
  132|  39.0k|    fn from(variable: Variable) -> Self {
  133|  39.0k|        Self::Variable(variable)
  134|  39.0k|    }
_RNvMsb_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_8N3Parser9low_level:
  401|  73.6k|    pub fn low_level(self) -> LowLevelN3Parser {
  402|  73.6k|        LowLevelN3Parser {
  403|  73.6k|            parser: N3Recognizer::new_parser(
  404|  73.6k|                Vec::new(),
  405|  73.6k|                false,
  406|  73.6k|                self.unchecked,
  407|  73.6k|                self.base,
  408|  73.6k|                self.prefixes,
  409|  73.6k|            ),
  410|  73.6k|        }
  411|  73.6k|    }
_RNvMsg_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_16LowLevelN3Parser17extend_from_slice:
  773|  12.0M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  774|  12.0M|        self.parser.extend_from_slice(other)
  775|  12.0M|    }
_RNvMsg_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_16LowLevelN3Parser3end:
  780|  73.6k|    pub fn end(&mut self) {
  781|  73.6k|        self.parser.end()
  782|  73.6k|    }
_RNvMsg_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_16LowLevelN3Parser6is_end:
  785|  73.6k|    pub fn is_end(&self) -> bool {
  786|  73.6k|        self.parser.is_end()
  787|  73.6k|    }
_RNvMsg_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_16LowLevelN3Parser10parse_next:
  793|  19.3M|    pub fn parse_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  794|  19.3M|        self.parser.parse_next()
  795|  19.3M|    }
_RNvXsh_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  879|  5.48M|    fn error_recovery_state(mut self) -> Self {
  880|  5.48M|        self.stack.clear();
  881|  5.48M|        self.terms.clear();
  882|  5.48M|        self.predicates.clear();
  883|  5.48M|        self.contexts.clear();
  884|  5.48M|        self
  885|  5.48M|    }
_RNvXsh_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  887|  11.5M|    fn recognize_next(
  888|  11.5M|        mut self,
  889|  11.5M|        token: TokenOrLineJump<N3Token<'_>>,
  890|  11.5M|        context: &mut N3RecognizerContext,
  891|  11.5M|        results: &mut Vec<N3Quad>,
  892|  11.5M|        errors: &mut Vec<RuleRecognizerError>,
  893|  11.5M|    ) -> Self {
  894|  11.5M|        let TokenOrLineJump::Token(token) = token else {
  895|   244k|            return self;
  896|       |        };
  897|  28.1M|        while let Some(rule) = self.stack.pop() {
  898|  22.6M|            match rule {
  899|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  900|       |                // [2]  n3Statement      ::=  n3Directive | triples
  901|       |                // [3]  n3Directive      ::=  prefixID | base
  902|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  903|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  904|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  905|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  906|       |                // [8]  base             ::=  "@base" IRIREF
  907|       |                N3State::N3Doc => {
  908|  1.68M|                    self.stack.push(N3State::N3Doc);
  909|   147k|                    match token {
  910|   225k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  911|  77.8k|                            self.stack.push(N3State::BaseExpectIri);
  912|  77.8k|                            return self;
  913|       |                        }
  914|   147k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  915|  2.81k|                            self.stack.push(N3State::PrefixExpectPrefix);
  916|  2.81k|                            return self;
  917|       |                        }
  918|   281k|                        N3Token::LangTag("prefix") => {
  919|   222k|                            self.stack.push(N3State::N3DocExpectDot);
  920|   222k|                            self.stack.push(N3State::PrefixExpectPrefix);
  921|   222k|                            return self;
  922|       |                        }
  923|  58.5k|                        N3Token::LangTag("base") => {
  924|  2.66k|                            self.stack.push(N3State::N3DocExpectDot);
  925|  2.66k|                            self.stack.push(N3State::BaseExpectIri);
  926|  2.66k|                            return self;
  927|       |                        }
  928|  1.37M|                        _ => {
  929|  1.37M|                            self.stack.push(N3State::N3DocExpectDot);
  930|  1.37M|                            self.stack.push(N3State::Triples);
  931|  1.37M|                        }
  932|       |                    }
  933|       |                }
  934|       |                N3State::N3DocExpectDot => {
  935|   248k|                    if token == N3Token::Punctuation(".") {
  936|   103k|                        return self;
  937|   144k|                    }
  938|   144k|                    errors.push("A dot is expected at the end of N3 statements".into());
  939|       |                }
  940|  90.9k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  941|  79.2k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  942|  79.2k|                                self
  943|       |                    } else {
  944|  11.6k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  945|       |                },
  946|   197k|                N3State::PrefixExpectPrefix => return match token {
  947|   197k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  948|   190k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  949|   190k|                        self
  950|       |                    }
  951|       |                    _ => {
  952|  26.3k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  953|       |                    }
  954|       |                },
  955|   173k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  956|   166k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  957|   166k|                    self
  958|  7.83k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  959|       |                },
  960|       |                // [9]  triples  ::=  subject predicateObjectList?
  961|  1.93M|                N3State::Triples => {
  962|  1.93M|                    self.stack.push(N3State::TriplesMiddle);
  963|  1.93M|                    self.stack.push(N3State::Path);
  964|  1.93M|                }
  965|   380k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  966|   247k|                    self.stack.push(N3State::TriplesEnd);
  967|   247k|                    self.stack.push(N3State::PredicateObjectList);
  968|   247k|                },
  969|  68.1k|                N3State::TriplesEnd => {
  970|  68.1k|                    self.terms.pop();
  971|  68.1k|                }
  972|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  973|  1.89M|                N3State::PredicateObjectList => {
  974|  1.89M|                    self.stack.push(N3State::PredicateObjectListEnd);
  975|  1.89M|                    self.stack.push(N3State::ObjectsList);
  976|  1.89M|                    self.stack.push(N3State::Verb);
  977|  1.89M|                }
  978|       |                N3State::PredicateObjectListEnd => {
  979|   196k|                    self.predicates.pop();
  980|   196k|                    if token == N3Token::Punctuation(";") {
  981|  26.3k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  982|  26.3k|                        return self;
  983|   170k|                    }
  984|       |                }
  985|  56.2k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  986|  30.2k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  987|  30.2k|                    return self;
  988|  25.9k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  989|  9.78k|                    self.stack.push(N3State::PredicateObjectListEnd);
  990|  9.78k|                    self.stack.push(N3State::ObjectsList);
  991|  9.78k|                    self.stack.push(N3State::Verb);
  992|  9.78k|                },
  993|       |                // [11]  objectList  ::=  object ( "," object) *
  994|   403k|                N3State::ObjectsList => {
  995|   403k|                    self.stack.push(N3State::ObjectsListEnd);
  996|   403k|                    self.stack.push(N3State::Path);
  997|   403k|                }
  998|       |                N3State::ObjectsListEnd => {
  999|   200k|                    let object = self.terms.pop().unwrap();
 1000|   200k|                    let subject = self.terms.last().unwrap().clone();
 1001|   200k|                    results.push(match self.predicates.last().unwrap().clone() {
 1002|   145k|                        Predicate::Regular(predicate) => self.quad(
 1003|   145k|                            subject,
 1004|   145k|                            predicate,
 1005|   145k|                            object,
 1006|   145k|                        ),
 1007|  55.2k|                        Predicate::Inverted(predicate) => self.quad(
 1008|  55.2k|                            object,
 1009|  55.2k|                            predicate,
 1010|  55.2k|                            subject,
 1011|  55.2k|                        )
 1012|       |                    });
 1013|   200k|                    if token == N3Token::Punctuation(",") {
 1014|  4.09k|                        self.stack.push(N3State::ObjectsListEnd);
 1015|  4.09k|                        self.stack.push(N3State::Path);
 1016|  4.09k|                        return self;
 1017|   196k|                    }
 1018|       |                }
 1019|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
 1020|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
 1021|  1.90M|                N3State::Verb => match token {
 1022|  80.4k|                    N3Token::PlainKeyword("a") => {
 1023|  31.4k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
 1024|  31.4k|                        return self;
 1025|       |                    }
 1026|  49.0k|                    N3Token::PlainKeyword("has") => {
 1027|  1.52k|                        self.stack.push(N3State::AfterRegularVerb);
 1028|  1.52k|                        self.stack.push(N3State::Path);
 1029|  1.52k|                        return self;
 1030|       |                    }
 1031|  47.4k|                    N3Token::PlainKeyword("is") => {
 1032|  8.97k|                        self.stack.push(N3State::AfterVerbIs);
 1033|  8.97k|                        self.stack.push(N3State::Path);
 1034|  8.97k|                        return self;
 1035|       |                    }
 1036|  1.40M|                    N3Token::Punctuation("=") => {
 1037|  6.14k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
 1038|  6.14k|                        return self;
 1039|       |                    }
 1040|  1.40M|                    N3Token::Punctuation("=>") => {
 1041|  10.9k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1042|  10.9k|                        return self;
 1043|       |                    }
 1044|  1.39M|                    N3Token::Punctuation("<=") => {
 1045|  1.21k|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
 1046|  1.21k|                        return self;
 1047|       |                    }
 1048|  1.39M|                    N3Token::Punctuation("<-") => {
 1049|  56.8k|                        self.stack.push(N3State::AfterInvertedVerb);
 1050|  56.8k|                        self.stack.push(N3State::Path);
 1051|  56.8k|                        return self;
 1052|       |                    }
 1053|  1.78M|                    _ => {
 1054|  1.78M|                        self.stack.push(N3State::AfterRegularVerb);
 1055|  1.78M|                        self.stack.push(N3State::Path);
 1056|  1.78M|                    }
 1057|       |                }
 1058|   301k|                N3State::AfterRegularVerb => {
 1059|   301k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
 1060|   301k|                }
 1061|  56.0k|                N3State::AfterInvertedVerb => {
 1062|  56.0k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1063|  56.0k|                }
 1064|  8.93k|                N3State::AfterVerbIs => return match token {
 1065|  7.00k|                    N3Token::PlainKeyword("of") => {
 1066|  3.53k|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
 1067|  3.53k|                        self
 1068|       |                    }
 1069|       |                    _ => {
 1070|  5.39k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
 1071|       |                    }
 1072|       |                },
 1073|       |                // [13]  subject     ::=  expression
 1074|       |                // [15]  object      ::=  expression
 1075|       |                // [16]  expression  ::=  path
 1076|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
 1077|  4.38M|                N3State::Path => {
 1078|  4.38M|                    self.stack.push(N3State::PathFollowUp);
 1079|  4.38M|                    self.stack.push(N3State::PathItem);
 1080|  4.38M|                }
 1081|  1.05M|                N3State::PathFollowUp => match token {
 1082|   760k|                    N3Token::Punctuation("!") => {
 1083|  8.63k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
 1084|  8.63k|                        self.stack.push(N3State::PathItem);
 1085|  8.63k|                        return self;
 1086|       |                    }
 1087|   752k|                    N3Token::Punctuation("^") => {
 1088|  19.9k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
 1089|  19.9k|                        self.stack.push(N3State::PathItem);
 1090|  19.9k|                        return self;
 1091|       |                    }
 1092|  1.02M|                    _ => ()
 1093|       |                },
 1094|  23.8k|                N3State::PathAfterIndicator { is_inverse } => {
 1095|  23.8k|                    let predicate = self.terms.pop().unwrap();
 1096|  23.8k|                    let previous = self.terms.pop().unwrap();
 1097|  23.8k|                    let current = BlankNode::default();
 1098|  23.8k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
 1099|  23.8k|                    self.terms.push(current.into());
 1100|  23.8k|                    self.stack.push(N3State::PathFollowUp);
 1101|       |                }
 1102|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
 1103|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
 1104|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
 1105|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
 1106|       |                // [22]  collection             ::=  "(" object* ")"
 1107|       |                // [23]  formula                ::=  "{" formulaContent? "}"
 1108|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
 1109|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
 1110|       |                // [27]  iri                    ::=  IRIREF | prefixedName
 1111|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
 1112|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
 1113|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
 1114|       |                N3State::PathItem => {
 1115|  4.40M|                    return match token {
 1116|  86.7k|                        N3Token::IriRef(iri) => {
 1117|  86.7k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
 1118|  86.7k|                            self
 1119|       |                        }
 1120|   598k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1121|   365k|                            Ok(t) => {
 1122|   365k|                                self.terms.push(t.into());
 1123|   365k|                                self
 1124|       |                            }
 1125|   233k|                            Err(e) =>  self.error(errors, e)
 1126|       |                        }
 1127|  35.6k|                        N3Token::BlankNodeLabel(bnode) => {
 1128|  35.6k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
 1129|  35.6k|                            self
 1130|       |                        }
 1131|  39.0k|                        N3Token::Variable(name) => {
 1132|  39.0k|                            self.terms.push(Variable::new_unchecked(name).into());
 1133|  39.0k|                            self
 1134|       |                        }
 1135|  2.91M|                        N3Token::Punctuation("[") => {
 1136|  1.72M|                            self.stack.push(N3State::PropertyListMiddle);
 1137|  1.72M|                            self
 1138|       |                        }
 1139|  1.18M|                        N3Token::Punctuation("(") => {
 1140|   142k|                            self.stack.push(N3State::CollectionBeginning);
 1141|   142k|                            self
 1142|       |                        }
 1143|   172k|                        N3Token::String(value) => {
 1144|   172k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
 1145|   172k|                            self
 1146|       |                        }
 1147|   213k|                        N3Token::Integer(v) => {
 1148|   213k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
 1149|   213k|                            self
 1150|       |                        }
 1151|  28.0k|                        N3Token::Decimal(v) => {
 1152|  28.0k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1153|  28.0k|                            self
 1154|       |                        }
 1155|  14.1k|                        N3Token::Double(v) => {
 1156|  14.1k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1157|  14.1k|                            self
 1158|       |                        }
 1159|   231k|                        N3Token::PlainKeyword("true") => {
 1160|  2.63k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1161|  2.63k|                            self
 1162|       |                        }
 1163|   228k|                        N3Token::PlainKeyword("false") => {
 1164|  4.06k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1165|  4.06k|                            self
 1166|       |                        }
 1167|  1.04M|                        N3Token::Punctuation("{") => {
 1168|   609k|                            self.contexts.push(BlankNode::default());
 1169|   609k|                            self.stack.push(N3State::FormulaContent);
 1170|   609k|                            self
 1171|       |                        }
 1172|       |                        _ =>
 1173|   739k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1174|       |
 1175|       |                    }
 1176|       |                }
 1177|  1.68M|                N3State::PropertyListMiddle => match token {
 1178|  1.26M|                    N3Token::Punctuation("]") => {
 1179|  7.03k|                        self.terms.push(BlankNode::default().into());
 1180|  7.03k|                        return self;
 1181|       |                    }
 1182|  99.0k|                    N3Token::PlainKeyword("id") => {
 1183|  34.1k|                        self.stack.push(N3State::IriPropertyList);
 1184|  34.1k|                        return self;
 1185|       |                    }
 1186|  1.64M|                    _ => {
 1187|  1.64M|                        self.terms.push(BlankNode::default().into());
 1188|  1.64M|                        self.stack.push(N3State::PropertyListEnd);
 1189|  1.64M|                        self.stack.push(N3State::PredicateObjectList);
 1190|  1.64M|                    }
 1191|       |                }
 1192|   118k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1193|  5.51k|                    return self;
 1194|   112k|                } else {
 1195|   112k|                    errors.push("blank node property lists should end with a ']'".into());
 1196|   112k|                }
 1197|  30.8k|                N3State::IriPropertyList => return match token {
 1198|  3.87k|                    N3Token::IriRef(id) => {
 1199|  3.87k|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1200|  3.87k|                        self.stack.push(N3State::PropertyListEnd);
 1201|  3.87k|                        self.stack.push(N3State::PredicateObjectList);
 1202|  3.87k|                        self
 1203|       |                    }
 1204|  21.6k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1205|  2.57k|                        Ok(t) => {
 1206|  2.57k|                            self.terms.push(t.into());
 1207|  2.57k|                            self.stack.push(N3State::PropertyListEnd);
 1208|  2.57k|                            self.stack.push(N3State::PredicateObjectList);
 1209|  2.57k|                            self
 1210|       |                        }
 1211|  19.1k|                        Err(e) => {
 1212|  19.1k|                            self.error(errors, e)
 1213|       |                        }
 1214|       |                    }
 1215|       |                    _ => {
 1216|  5.27k|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1217|       |                    }
 1218|       |                },
 1219|   138k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1220|  13.0k|                    self.terms.push(rdf::NIL.into());
 1221|  13.0k|                    return self;
 1222|   125k|                } else {
 1223|   125k|                    let root = BlankNode::default();
 1224|   125k|                    self.terms.push(root.clone().into());
 1225|   125k|                    self.terms.push(root.into());
 1226|   125k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1227|   125k|                    self.stack.push(N3State::Path);
 1228|   125k|                },
 1229|       |                N3State::CollectionPossibleEnd => {
 1230|  80.0k|                    let value = self.terms.pop().unwrap();
 1231|  80.0k|                    let old = self.terms.pop().unwrap();
 1232|  80.0k|                    results.push(self.quad(
 1233|  80.0k|                        old.clone(),
 1234|  80.0k|                        rdf::FIRST,
 1235|  80.0k|                        value,
 1236|  80.0k|                    ));
 1237|  80.0k|                    if let N3Token::Punctuation(")") = token {
 1238|  23.4k|                        results.push(self.quad(
 1239|  23.4k|                            old,
 1240|  23.4k|                            rdf::REST,
 1241|  23.4k|                            rdf::NIL,
 1242|  23.4k|                        ));
 1243|  23.4k|                        return self;
 1244|  56.5k|                    }
 1245|  56.5k|                    let new = BlankNode::default();
 1246|  56.5k|                    results.push(self.quad(
 1247|  56.5k|                        old,
 1248|  56.5k|                        rdf::REST,
 1249|  56.5k|                        new.clone(),
 1250|  56.5k|                    ));
 1251|  56.5k|                    self.terms.push(new.into());
 1252|  56.5k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1253|  56.5k|                    self.stack.push(N3State::Path);
 1254|       |                }
 1255|   163k|                N3State::LiteralPossibleSuffix { value } => {
 1256|   163k|                    match token {
 1257|  14.7k|                        N3Token::LangTag(lang) => {
 1258|  14.7k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1259|  14.7k|                            return self;
 1260|       |                        }
 1261|  71.5k|                        N3Token::Punctuation("^^") => {
 1262|  50.1k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1263|  50.1k|                            return self;
 1264|       |                        }
 1265|  99.0k|                        _ => {
 1266|  99.0k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1267|  99.0k|                        }
 1268|       |                    }
 1269|       |                }
 1270|  45.6k|                N3State::LiteralExpectDatatype { value } => {
 1271|  45.6k|                    match token {
 1272|  6.35k|                        N3Token::IriRef(datatype) => {
 1273|  6.35k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1274|  6.35k|                            return self;
 1275|       |                        }
 1276|  27.1k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1277|  19.2k|                            Ok(datatype) => {
 1278|  19.2k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1279|  19.2k|                                return self;
 1280|       |                            }
 1281|  7.86k|                            Err(e) => {
 1282|  7.86k|                                return self.error(errors, e);
 1283|       |                            }
 1284|       |                        }
 1285|  12.1k|                        _ => {
 1286|  12.1k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1287|  12.1k|                            self.stack.clear();
 1288|  12.1k|                        }
 1289|       |                    }
 1290|       |                }
 1291|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1292|       |                N3State::FormulaContent => {
 1293|  41.1k|                    match token {
 1294|   500k|                        N3Token::Punctuation("}") => {
 1295|  61.6k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1296|  61.6k|                            return self;
 1297|       |                        }
 1298|  50.3k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1299|  9.14k|                            self.stack.push(N3State::FormulaContent);
 1300|  9.14k|                            self.stack.push(N3State::BaseExpectIri);
 1301|  9.14k|                            return self;
 1302|       |                        }
 1303|  41.1k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1304|  2.21k|                            self.stack.push(N3State::FormulaContent);
 1305|  2.21k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1306|  2.21k|                            return self;
 1307|       |                        }
 1308|  29.1k|                        N3Token::LangTag("prefix") => {
 1309|  4.20k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1310|  4.20k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1311|  4.20k|                            return self;
 1312|       |                        }
 1313|  24.9k|                        N3Token::LangTag("base") => {
 1314|  4.67k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1315|  4.67k|                            self.stack.push(N3State::BaseExpectIri);
 1316|  4.67k|                            return self;
 1317|       |                        }
 1318|   559k|                        _ => {
 1319|   559k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1320|   559k|                            self.stack.push(N3State::Triples);
 1321|   559k|                        }
 1322|       |                    }
 1323|       |                }
 1324|       |                N3State::FormulaContentExpectDot => {
 1325|  68.7k|                    match token {
 1326|  63.8k|                        N3Token::Punctuation("}") => {
 1327|  33.9k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1328|  33.9k|                            return self;
 1329|       |                        }
 1330|  29.8k|                        N3Token::Punctuation(".") => {
 1331|  9.93k|                            self.stack.push(N3State::FormulaContent);
 1332|  9.93k|                            return self;
 1333|       |                        }
 1334|  24.8k|                        _ => {
 1335|  24.8k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1336|  24.8k|                            self.stack.push(N3State::FormulaContent);
 1337|  24.8k|                        }
 1338|       |                    }
 1339|       |                }
 1340|       |            }
 1341|       |        }
 1342|       |        // Empty stack
 1343|  5.44M|        if token == N3Token::Punctuation(".") {
 1344|  1.52M|            self.stack.push(N3State::N3Doc);
 1345|  1.52M|            self
 1346|       |        } else {
 1347|  3.91M|            self
 1348|       |        }
 1349|  11.5M|    }
_RNvXsh_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1351|  73.6k|    fn recognize_end(
 1352|  73.6k|        self,
 1353|  73.6k|        _state: &mut N3RecognizerContext,
 1354|  73.6k|        _results: &mut Vec<Self::Output>,
 1355|  73.6k|        errors: &mut Vec<RuleRecognizerError>,
 1356|  73.6k|    ) {
 1357|  73.6k|        match &*self.stack {
 1358|  73.6k|            [] | [N3State::N3Doc] => (),
 1359|  8.71k|            _ => errors.push("Unexpected end".into()), // TODO
 1360|       |        }
 1361|  73.6k|    }
_RNvXsh_NtCsl9Ey8gUtMBe_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1363|  29.1M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1364|  29.1M|        &context.lexer_options
 1365|  29.1M|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer10new_parserINtNtCs3OstG5Tqy1X_5alloc3vec3VechEEB8_:
 1369|  73.6k|    pub fn new_parser<B>(
 1370|  73.6k|        data: B,
 1371|  73.6k|        is_ending: bool,
 1372|  73.6k|        unchecked: bool,
 1373|  73.6k|        base_iri: Option<Iri<String>>,
 1374|  73.6k|        prefixes: HashMap<String, Iri<String>>,
 1375|  73.6k|    ) -> Parser<B, Self> {
 1376|  73.6k|        Parser::new(
 1377|  73.6k|            Lexer::new(
 1378|  73.6k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1379|  73.6k|                data,
 1380|  73.6k|                is_ending,
 1381|  73.6k|                MIN_BUFFER_SIZE,
 1382|  73.6k|                MAX_BUFFER_SIZE,
 1383|  73.6k|                Some(b"#"),
 1384|  73.6k|            ),
 1385|  73.6k|            Self {
 1386|  73.6k|                stack: vec![N3State::N3Doc],
 1387|  73.6k|                terms: Vec::new(),
 1388|  73.6k|                predicates: Vec::new(),
 1389|  73.6k|                contexts: Vec::new(),
 1390|  73.6k|            },
 1391|  73.6k|            N3RecognizerContext {
 1392|  73.6k|                lexer_options: N3LexerOptions { base_iri },
 1393|  73.6k|                prefixes,
 1394|  73.6k|            },
 1395|  73.6k|        )
 1396|  73.6k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
 1399|   260k|    fn error(
 1400|   260k|        mut self,
 1401|   260k|        errors: &mut Vec<RuleRecognizerError>,
 1402|   260k|        msg: impl Into<RuleRecognizerError>,
 1403|   260k|    ) -> Self {
 1404|   260k|        errors.push(msg.into());
 1405|   260k|        self.stack.clear();
 1406|   260k|        self
 1407|   260k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1399|   795k|    fn error(
 1400|   795k|        mut self,
 1401|   795k|        errors: &mut Vec<RuleRecognizerError>,
 1402|   795k|        msg: impl Into<RuleRecognizerError>,
 1403|   795k|    ) -> Self {
 1404|   795k|        errors.push(msg.into());
 1405|   795k|        self.stack.clear();
 1406|   795k|        self
 1407|   795k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1409|   200k|    fn quad(
 1410|   200k|        &self,
 1411|   200k|        subject: impl Into<N3Term>,
 1412|   200k|        predicate: impl Into<N3Term>,
 1413|   200k|        object: impl Into<N3Term>,
 1414|   200k|    ) -> N3Quad {
 1415|   200k|        N3Quad {
 1416|   200k|            subject: subject.into(),
 1417|   200k|            predicate: predicate.into(),
 1418|   200k|            object: object.into(),
 1419|   200k|            graph_name: self
 1420|   200k|                .contexts
 1421|   200k|                .last()
 1422|   200k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1423|   200k|        }
 1424|   200k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCs7Sgmv00SKa1_5oxrdf10blank_node9BlankNodeEB8_:
 1409|  7.91k|    fn quad(
 1410|  7.91k|        &self,
 1411|  7.91k|        subject: impl Into<N3Term>,
 1412|  7.91k|        predicate: impl Into<N3Term>,
 1413|  7.91k|        object: impl Into<N3Term>,
 1414|  7.91k|    ) -> N3Quad {
 1415|  7.91k|        N3Quad {
 1416|  7.91k|            subject: subject.into(),
 1417|  7.91k|            predicate: predicate.into(),
 1418|  7.91k|            object: object.into(),
 1419|  7.91k|            graph_name: self
 1420|  7.91k|                .contexts
 1421|  7.91k|                .last()
 1422|  7.91k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1423|  7.91k|        }
 1424|  7.91k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1409|  23.4k|    fn quad(
 1410|  23.4k|        &self,
 1411|  23.4k|        subject: impl Into<N3Term>,
 1412|  23.4k|        predicate: impl Into<N3Term>,
 1413|  23.4k|        object: impl Into<N3Term>,
 1414|  23.4k|    ) -> N3Quad {
 1415|  23.4k|        N3Quad {
 1416|  23.4k|            subject: subject.into(),
 1417|  23.4k|            predicate: predicate.into(),
 1418|  23.4k|            object: object.into(),
 1419|  23.4k|            graph_name: self
 1420|  23.4k|                .contexts
 1421|  23.4k|                .last()
 1422|  23.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1423|  23.4k|        }
 1424|  23.4k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1409|  80.0k|    fn quad(
 1410|  80.0k|        &self,
 1411|  80.0k|        subject: impl Into<N3Term>,
 1412|  80.0k|        predicate: impl Into<N3Term>,
 1413|  80.0k|        object: impl Into<N3Term>,
 1414|  80.0k|    ) -> N3Quad {
 1415|  80.0k|        N3Quad {
 1416|  80.0k|            subject: subject.into(),
 1417|  80.0k|            predicate: predicate.into(),
 1418|  80.0k|            object: object.into(),
 1419|  80.0k|            graph_name: self
 1420|  80.0k|                .contexts
 1421|  80.0k|                .last()
 1422|  80.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1423|  80.0k|        }
 1424|  80.0k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1409|  56.5k|    fn quad(
 1410|  56.5k|        &self,
 1411|  56.5k|        subject: impl Into<N3Term>,
 1412|  56.5k|        predicate: impl Into<N3Term>,
 1413|  56.5k|        object: impl Into<N3Term>,
 1414|  56.5k|    ) -> N3Quad {
 1415|  56.5k|        N3Quad {
 1416|  56.5k|            subject: subject.into(),
 1417|  56.5k|            predicate: predicate.into(),
 1418|  56.5k|            object: object.into(),
 1419|  56.5k|            graph_name: self
 1420|  56.5k|                .contexts
 1421|  56.5k|                .last()
 1422|  56.5k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1423|  56.5k|        }
 1424|  56.5k|    }
_RINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCs7Sgmv00SKa1_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1409|  15.9k|    fn quad(
 1410|  15.9k|        &self,
 1411|  15.9k|        subject: impl Into<N3Term>,
 1412|  15.9k|        predicate: impl Into<N3Term>,
 1413|  15.9k|        object: impl Into<N3Term>,
 1414|  15.9k|    ) -> N3Quad {
 1415|  15.9k|        N3Quad {
 1416|  15.9k|            subject: subject.into(),
 1417|  15.9k|            predicate: predicate.into(),
 1418|  15.9k|            object: object.into(),
 1419|  15.9k|            graph_name: self
 1420|  15.9k|                .contexts
 1421|  15.9k|                .last()
 1422|  15.9k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1423|  15.9k|        }
 1424|  15.9k|    }
_RNCINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1422|  27.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCs7Sgmv00SKa1_5oxrdf10blank_node9BlankNodeE0Ba_:
 1422|  2.32k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1422|  4.37k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1422|  29.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs7Sgmv00SKa1_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1422|  25.1k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsi_NtCsl9Ey8gUtMBe_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCs7Sgmv00SKa1_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1422|  1.59k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RINvMNtNtCsl9Ey8gUtMBe_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newNtNtCs3OstG5Tqy1X_5alloc6string6StringEB7_:
   22|  6.82M|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  6.82M|        Self {
   24|  6.82M|            location,
   25|  6.82M|            message: message.into(),
   26|  6.82M|        }
   27|  6.82M|    }
_RINvMNtNtCsl9Ey8gUtMBe_5oxttl7toolkit5errorNtB3_17TurtleSyntaxError3newReEB7_:
   22|  19.9k|    pub(crate) fn new(location: Range<TextPosition>, message: impl Into<String>) -> Self {
   23|  19.9k|        Self {
   24|  19.9k|            location,
   25|  19.9k|            message: message.into(),
   26|  19.9k|        }
   27|  19.9k|    }

_RNvXNtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB6_:
   37|  4.09M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  4.09M|        Self {
   39|  4.09M|            location,
   40|  4.09M|            message: message.into(),
   41|  4.09M|        }
   42|  4.09M|    }
_RNvXNtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   37|  1.49M|    fn from((location, message): (Range<usize>, S)) -> Self {
   38|  1.49M|        Self {
   39|  1.49M|            location,
   40|  1.49M|            message: message.into(),
   41|  1.49M|        }
   42|  1.49M|    }
_RNvXs_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB8_:
   47|  87.3k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|  87.3k|        (*location.start()..*location.end() + 1, message).into()
   49|  87.3k|    }
_RNvXs_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   47|  1.03M|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   48|  1.03M|        (*location.start()..*location.end() + 1, message).into()
   49|  1.03M|    }
_RNvXs0_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromTjNtNtCs3OstG5Tqy1X_5alloc6string6StringEE4fromB9_:
   53|  52.1k|    fn from((location, message): (usize, S)) -> Self {
   54|  52.1k|        (location..=location, message).into()
   55|  52.1k|    }
_RNvMs1_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3newB9_:
   78|  73.6k|    pub fn new(
   79|  73.6k|        parser: R,
   80|  73.6k|        data: B,
   81|  73.6k|        is_ending: bool,
   82|  73.6k|        min_buffer_size: usize,
   83|  73.6k|        max_buffer_size: usize,
   84|  73.6k|        line_comment_start: Option<&'static [u8]>,
   85|  73.6k|    ) -> Self {
   86|  73.6k|        Self {
   87|  73.6k|            parser,
   88|  73.6k|            data,
   89|  73.6k|            position: Position {
   90|  73.6k|                line_start_buffer_offset: 0,
   91|  73.6k|                buffer_offset: 0,
   92|  73.6k|                global_offset: 0,
   93|  73.6k|                global_line: 0,
   94|  73.6k|            },
   95|  73.6k|            previous_position: Position {
   96|  73.6k|                line_start_buffer_offset: 0,
   97|  73.6k|                buffer_offset: 0,
   98|  73.6k|                global_offset: 0,
   99|  73.6k|                global_line: 0,
  100|  73.6k|            },
  101|  73.6k|            is_ending,
  102|  73.6k|            min_buffer_size,
  103|  73.6k|            max_buffer_size,
  104|  73.6k|            line_comment_start,
  105|  73.6k|        }
  106|  73.6k|    }
_RNvMs2_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  110|  12.0M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  111|  12.0M|        self.shrink_data();
  112|  12.0M|        self.data.extend_from_slice(other);
  113|  12.0M|    }
_RNvMs2_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE3endB9_:
  116|  73.6k|    pub fn end(&mut self) {
  117|  73.6k|        self.is_ending = true;
  118|  73.6k|    }
_RNvMs2_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  172|  12.0M|    fn shrink_data(&mut self) {
  173|  12.0M|        if self.position.line_start_buffer_offset > 0 {
  174|   197k|            self.data
  175|   197k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  176|   197k|            self.data
  177|   197k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  178|   197k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  179|   197k|            self.position.line_start_buffer_offset = 0;
  180|   197k|            self.previous_position = self.position;
  181|  11.8M|        }
  182|  12.0M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE10parse_nextB9_:
  187|  29.1M|    pub fn parse_next(
  188|  29.1M|        &mut self,
  189|  29.1M|        options: &R::Options,
  190|  29.1M|    ) -> Option<Result<TokenOrLineJump<R::Token<'_>>, TurtleSyntaxError>> {
  191|  29.1M|        if self.skip_whitespaces_and_comments()? {
  192|   244k|            self.previous_position = self.position;
  193|   244k|            return Some(Ok(TokenOrLineJump::LineJump));
  194|  28.8M|        }
  195|  28.8M|        self.previous_position = self.position;
  196|  28.8M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  197|  28.8M|            &self.data[self.position.buffer_offset..],
  198|  28.8M|            self.is_ending,
  199|  28.8M|            options,
  200|  28.8M|        ) else {
  201|  12.0M|            return if self.is_ending {
  202|   167k|                if self.position.buffer_offset == self.data.len() {
  203|   147k|                    None // We have finished
  204|       |                } else {
  205|  19.9k|                    let (new_line_jumps, new_line_start) =
  206|  19.9k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  207|  19.9k|                            &self.data[self.position.buffer_offset..],
  208|  19.9k|                        );
  209|  19.9k|                    if new_line_jumps > 0 {
  210|    552|                        self.position.line_start_buffer_offset =
  211|    552|                            self.position.buffer_offset + new_line_start;
  212|  19.3k|                    }
  213|  19.9k|                    self.position.global_offset +=
  214|  19.9k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  215|  19.9k|                    self.position.buffer_offset = self.data.len();
  216|  19.9k|                    self.position.global_line += new_line_jumps;
  217|  19.9k|                    let error = TurtleSyntaxError::new(
  218|  19.9k|                        self.last_token_location(),
  219|  19.9k|                        "Unexpected end of file",
  220|  19.9k|                    );
  221|  19.9k|                    Some(Err(error))
  222|       |                }
  223|       |            } else {
  224|  11.8M|                None
  225|       |            };
  226|       |        };
  227|  16.7M|        debug_assert!(
  228|      0|            consumed > 0,
  229|      0|            "The lexer must consume at least one byte each time"
  230|       |        );
  231|  16.7M|        debug_assert!(
  232|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  233|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  234|      0|            self.data.len() - self.position.buffer_offset
  235|       |        );
  236|  16.7M|        let (new_line_jumps, new_line_start) =
  237|  16.7M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  238|  16.7M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  239|  16.7M|            );
  240|  16.7M|        if new_line_jumps > 0 {
  241|  21.3k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  242|  16.7M|        }
  243|  16.7M|        self.position.buffer_offset += consumed;
  244|  16.7M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  245|  16.7M|        self.position.global_line += new_line_jumps;
  246|  16.7M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|       |            TurtleSyntaxError::new(
  248|       |                self.location_from_buffer_offset_range(e.location),
  249|       |                e.message,
  250|       |            )
  251|  16.7M|        }))
  252|  29.1M|    }
_RNCNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB7_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_5lexer7N3LexerE10parse_next0Bb_:
  246|  5.46M|        Some(result.map(TokenOrLineJump::Token).map_err(|e| {
  247|  5.46M|            TurtleSyntaxError::new(
  248|  5.46M|                self.location_from_buffer_offset_range(e.location),
  249|  5.46M|                e.message,
  250|  5.46M|            )
  251|  5.46M|        }))
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  254|  5.46M|    pub fn location_from_buffer_offset_range(
  255|  5.46M|        &self,
  256|  5.46M|        offset_range: Range<usize>,
  257|  5.46M|    ) -> Range<TextPosition> {
  258|  5.46M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  259|  5.46M|        let (start_extra_line_jumps, start_line_start) =
  260|  5.46M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  261|  5.46M|                &self.data[self.previous_position.buffer_offset..start_offset],
  262|  5.46M|            );
  263|  5.46M|        let start_line_start = if start_extra_line_jumps > 0 {
  264|  7.47k|            start_line_start + self.previous_position.buffer_offset
  265|       |        } else {
  266|  5.45M|            self.previous_position.line_start_buffer_offset
  267|       |        };
  268|  5.46M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  269|  5.46M|        let (end_extra_line_jumps, end_line_start) =
  270|  5.46M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  271|  5.46M|                &self.data[self.previous_position.buffer_offset..end_offset],
  272|  5.46M|            );
  273|  5.46M|        let end_line_start = if end_extra_line_jumps > 0 {
  274|  22.8k|            end_line_start + self.previous_position.buffer_offset
  275|       |        } else {
  276|  5.43M|            self.previous_position.line_start_buffer_offset
  277|       |        };
  278|  5.46M|        TextPosition {
  279|  5.46M|            line: self.previous_position.global_line + start_extra_line_jumps,
  280|  5.46M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  281|  5.46M|            offset: self.previous_position.global_offset
  282|  5.46M|                + u64::try_from(offset_range.start).unwrap(),
  283|  5.46M|        }..TextPosition {
  284|  5.46M|            line: self.previous_position.global_line + end_extra_line_jumps,
  285|  5.46M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  286|  5.46M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  287|  5.46M|        }
  288|  5.46M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  290|  1.37M|    pub fn last_token_location(&self) -> Range<TextPosition> {
  291|  1.37M|        self.text_position_from_position(&self.previous_position)
  292|  1.37M|            ..self.text_position_from_position(&self.position)
  293|  1.37M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE27text_position_from_positionB9_:
  295|  2.75M|    fn text_position_from_position(&self, position: &Position) -> TextPosition {
  296|  2.75M|        TextPosition {
  297|  2.75M|            line: position.global_line,
  298|  2.75M|            column: Self::column_from_bytes(
  299|  2.75M|                &self.data[position.line_start_buffer_offset..position.buffer_offset],
  300|  2.75M|            ),
  301|  2.75M|            offset: position.global_offset,
  302|  2.75M|        }
  303|  2.75M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  305|  1.35M|    pub fn last_token_source(&self) -> Cow<'_, str> {
  306|  1.35M|        String::from_utf8_lossy(
  307|  1.35M|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  308|  1.35M|        )
  309|  1.35M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE6is_endB9_:
  311|  12.1M|    pub fn is_end(&self) -> bool {
  312|  12.1M|        self.is_ending && self.data.len() == self.position.buffer_offset
  313|  12.1M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  316|  29.1M|    fn skip_whitespaces_and_comments(&mut self) -> Option<bool> {
  317|  29.1M|        if self.skip_whitespaces()? {
  318|   228k|            return Some(true);
  319|  28.9M|        }
  320|  28.9M|
  321|  28.9M|        let buf = &self.data[self.position.buffer_offset..];
  322|  28.9M|        if let Some(line_comment_start) = self.line_comment_start {
  323|  28.9M|            if buf.starts_with(line_comment_start) {
  324|       |                // Comment
  325|   143k|                if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  326|  37.5k|                    let mut end_position = line_comment_start.len() + end;
  327|  37.5k|                    if buf.get(end_position).copied() == Some(b'\r') {
  328|       |                        // We look for \n for Windows line end style
  329|  29.8k|                        if let Some(c) = buf.get(end_position + 1) {
  330|  8.14k|                            if *c == b'\n' {
  331|      0|                                end_position += 1;
  332|  8.14k|                            }
  333|  21.7k|                        } else if !self.is_ending {
  334|  21.7k|                            return None; // We need to read more
  335|     15|                        }
  336|  7.70k|                    }
  337|  15.8k|                    let comment_size = end_position + 1;
  338|  15.8k|                    self.position.buffer_offset += comment_size;
  339|  15.8k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  340|  15.8k|                    self.position.global_offset += u64::try_from(comment_size).unwrap();
  341|  15.8k|                    self.position.global_line += 1;
  342|  15.8k|                    return Some(true);
  343|   105k|                }
  344|   105k|                if self.is_ending {
  345|  1.84k|                    self.position.buffer_offset = self.data.len(); // EOF
  346|  1.84k|                    return Some(false);
  347|   104k|                }
  348|   104k|                return None; // We need more data
  349|  28.8M|            }
  350|      0|        }
  351|  28.8M|        Some(false)
  352|  29.1M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  354|  29.1M|    fn skip_whitespaces(&mut self) -> Option<bool> {
  355|  29.1M|        let mut i = self.position.buffer_offset;
  356|  29.3M|        while let Some(c) = self.data.get(i) {
  357|  27.2M|            match c {
  358|   122k|                b' ' | b'\t' => {
  359|   122k|                    self.position.buffer_offset += 1;
  360|   122k|                    self.position.global_offset += 1;
  361|   122k|                }
  362|       |                b'\r' => {
  363|       |                    // We look for \n for Windows line end style
  364|  40.7k|                    let mut increment: u8 = 1;
  365|  40.7k|                    if let Some(c) = self.data.get(i + 1) {
  366|  34.6k|                        if *c == b'\n' {
  367|     59|                            increment += 1;
  368|  34.5k|                        }
  369|  6.14k|                    } else if !self.is_ending {
  370|  5.97k|                        return None; // We need to read more
  371|    167|                    }
  372|  34.7k|                    self.position.buffer_offset += usize::from(increment);
  373|  34.7k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  374|  34.7k|                    self.position.global_offset += u64::from(increment);
  375|  34.7k|                    self.position.global_line += 1;
  376|  34.7k|                    return Some(true);
  377|       |                }
  378|       |                b'\n' => {
  379|   193k|                    self.position.buffer_offset += 1;
  380|   193k|                    self.position.line_start_buffer_offset = self.position.buffer_offset;
  381|   193k|                    self.position.global_offset += 1;
  382|   193k|                    self.position.global_line += 1;
  383|   193k|                    return Some(true);
  384|       |                }
  385|  26.8M|                _ => return Some(false),
  386|       |            }
  387|   122k|            i += 1;
  388|       |            // TODO: SIMD
  389|       |        }
  390|  2.10M|        Some(false)
  391|  29.1M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  393|  27.7M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  394|  27.7M|        let mut num_of_jumps = 0;
  395|  27.7M|        let mut last_jump_pos = 0;
  396|  27.7M|        let mut previous_cr = 0;
  397|  27.7M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  398|   108k|            if bytes[pos] == b'\r' {
  399|  14.0k|                previous_cr = pos;
  400|  14.0k|                num_of_jumps += 1;
  401|  14.0k|                last_jump_pos = pos + 1;
  402|  14.0k|            } else {
  403|  93.9k|                if previous_cr < pos - 1 {
  404|  59.1k|                    // We count \r\n as a single line jump
  405|  59.1k|                    num_of_jumps += 1;
  406|  59.1k|                }
  407|  93.9k|                last_jump_pos = pos + 1;
  408|       |            }
  409|       |        }
  410|  27.7M|        (num_of_jumps, last_jump_pos)
  411|  27.7M|    }
_RNvMs3_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit5lexerINtB5_5LexerINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  413|  23.2M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  414|  23.2M|        match str::from_utf8(bytes) {
  415|  12.2M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  416|  10.9M|            Err(e) => {
  417|  10.9M|                if e.valid_up_to() == 0 {
  418|  1.40M|                    0
  419|       |                } else {
  420|  9.54M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  421|       |                }
  422|       |            }
  423|       |        }
  424|  23.2M|    }

_RNvXNtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs3OstG5Tqy1X_5alloc6string6StringE4fromB6_:
   40|   260k|    fn from(message: S) -> Self {
   41|   260k|        Self {
   42|   260k|            message: message.into(),
   43|   260k|        }
   44|   260k|    }
_RNvXNtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCscdEvteftVc2_4core7convert4FromReE4fromB6_:
   40|  1.09M|    fn from(message: S) -> Self {
   41|  1.09M|        Self {
   42|  1.09M|            message: message.into(),
   43|  1.09M|        }
   44|  1.09M|    }
_RNvMs_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserINtB4_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB8_2n312N3RecognizerE3newB8_:
   57|  73.6k|    pub fn new(lexer: Lexer<B, RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   58|  73.6k|        Self {
   59|  73.6k|            lexer,
   60|  73.6k|            state: Some(recognizer),
   61|  73.6k|            context,
   62|  73.6k|            results: vec![],
   63|  73.6k|            errors: vec![],
   64|  73.6k|        }
   65|  73.6k|    }
_RNvMs0_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE6is_endB9_:
   70|  73.6k|    pub fn is_end(&self) -> bool {
   71|  73.6k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   72|  73.6k|    }
_RNvMs0_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE10parse_nextB9_:
   74|  19.3M|    pub fn parse_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   75|       |        loop {
   76|  30.9M|            if let Some(error) = self.errors.pop() {
   77|  1.35M|                return Some(Err(TurtleSyntaxError::new(
   78|  1.35M|                    self.lexer.last_token_location(),
   79|  1.35M|                    error
   80|  1.35M|                        .message
   81|  1.35M|                        .replace("TOKEN", &self.lexer.last_token_source()),
   82|  1.35M|                )));
   83|  29.5M|            }
   84|  29.5M|            if let Some(result) = self.results.pop() {
   85|   384k|                return Some(Ok(result));
   86|  29.1M|            }
   87|  29.1M|            if let Some(result) = self.lexer.parse_next(RR::lexer_options(&self.context)) {
   88|  17.0M|                match result {
   89|  11.5M|                    Ok(token) => {
   90|  11.5M|                        self.state = self.state.take().map(|state| {
   91|       |                            state.recognize_next(
   92|       |                                token,
   93|       |                                &mut self.context,
   94|       |                                &mut self.results,
   95|       |                                &mut self.errors,
   96|       |                            )
   97|  11.5M|                        });
   98|  11.5M|                        continue;
   99|       |                    }
  100|  5.48M|                    Err(e) => {
  101|  5.48M|                        self.state = self.state.take().map(RR::error_recovery_state);
  102|  5.48M|                        return Some(Err(e));
  103|       |                    }
  104|       |                }
  105|  12.1M|            }
  106|  12.1M|            if self.lexer.is_end() {
  107|   147k|                self.state.take()?.recognize_end(
  108|  73.6k|                    &mut self.context,
  109|  73.6k|                    &mut self.results,
  110|  73.6k|                    &mut self.errors,
  111|  73.6k|                )
  112|       |            } else {
  113|  12.0M|                return None;
  114|       |            }
  115|       |        }
  116|  19.3M|    }
_RNCNvMs0_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserINtB7_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtBb_2n312N3RecognizerE10parse_next0Bb_:
   90|  11.5M|                        self.state = self.state.take().map(|state| {
   91|  11.5M|                            state.recognize_next(
   92|  11.5M|                                token,
   93|  11.5M|                                &mut self.context,
   94|  11.5M|                                &mut self.results,
   95|  11.5M|                                &mut self.errors,
   96|  11.5M|                            )
   97|  11.5M|                        });
_RNvMs1_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE3endB9_:
  121|  73.6k|    pub fn end(&mut self) {
  122|  73.6k|        self.lexer.end()
  123|  73.6k|    }
_RNvMs1_NtNtCsl9Ey8gUtMBe_5oxttl7toolkit6parserINtB5_6ParserINtNtCs3OstG5Tqy1X_5alloc3vec3VechENtNtB9_2n312N3RecognizerE17extend_from_sliceB9_:
  125|  12.0M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  126|  12.0M|        self.lexer.extend_from_slice(other)
  127|  12.0M|    }


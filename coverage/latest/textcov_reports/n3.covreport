_RNvCs9E59fdDAA2r_9getrandom16getrandom_uninitCslBq46CqsXHI_9rand_core:
  344|     26|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|     26|    if !dest.is_empty() {
  346|     26|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|     26|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|     26|}
_RNvCs9E59fdDAA2r_9getrandom9getrandomCslBq46CqsXHI_9rand_core:
  314|     26|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|     26|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|     26|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|     26|    // `dest`.
  318|     26|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|     26|    Ok(())
  320|     26|}

_RNvNtCs9E59fdDAA2r_9getrandom3imp9getrandom:
   42|     27|unsafe fn getrandom(
   43|     27|    buf: *mut libc::c_void,
   44|     27|    buflen: libc::size_t,
   45|     27|    flags: libc::c_uint,
   46|     27|) -> libc::ssize_t {
   47|     27|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|     27|}
_RNCNvNtCs9E59fdDAA2r_9getrandom3imp15getrandom_inner0B5_:
   21|     26|        sys_fill_exact(dest, |buf| unsafe {
   22|     26|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|     26|        })
_RNvNtCs9E59fdDAA2r_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCs9E59fdDAA2r_9getrandom3imp15getrandom_inner:
   17|     26|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|     26|    // getrandom(2) was introduced in Linux 3.17
   19|     26|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|     26|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|     26|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|     26|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|     26|}

_RINvNtCs9E59fdDAA2r_9getrandom4util21slice_assume_init_muthECslBq46CqsXHI_9rand_core:
   74|     26|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|     26|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|     26|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|     26|}
_RINvNtCs9E59fdDAA2r_9getrandom4util19slice_as_uninit_muthECslBq46CqsXHI_9rand_core:
   98|     26|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|     26|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|     26|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|     26|}
_RNCINvMs_NtCs9E59fdDAA2r_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCs9E59fdDAA2r_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|     26|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|     26|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|     26|        let mut val = self.0.load(Relaxed);
   49|     26|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|     25|        }
   53|     26|        val
   54|     26|    }
_RINvMs_NtCs9E59fdDAA2r_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|     26|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|     26|        self.0.unsync_init(|| init() as usize) != 0
   67|     26|    }

_RINvNtCs9E59fdDAA2r_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|     26|pub fn sys_fill_exact(
   68|     26|    mut buf: &mut [MaybeUninit<u8>],
   69|     26|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|     26|) -> Result<(), Error> {
   71|     52|    while !buf.is_empty() {
   72|     26|        let res = sys_fill(buf);
   73|     26|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|     26|        } else {
   80|     26|            // We don't check for EOF (ret = 0) as the data we are reading
   81|     26|            // should be an infinite stream of random bytes.
   82|     26|            let len = min(res as usize, buf.len());
   83|     26|            buf = &mut buf[len..];
   84|     26|        }
   85|       |    }
   86|     26|    Ok(())
   87|     26|}

rust_fuzzer_test_input:
  209|  3.79k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.79k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.79k|                }
  223|  3.79k|
  224|  3.79k|                __libfuzzer_sys_run(bytes);
  225|  3.79k|                0
  226|  3.79k|            }
_RNvNvCsjFDTFCBAFbr_2n31__19___libfuzzer_sys_run:
  241|  3.79k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  3.79k|            }
LLVMFuzzerTestOneInput:
   58|  3.79k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.79k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.79k|    });
   63|  3.79k|
   64|  3.79k|    match test_input {
   65|  3.79k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.79k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs697sg40YU7P_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.79k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.79k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.79k|        rust_fuzzer_test_input(data_slice)
   62|  3.79k|    });

_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECshegW5rJ1TR8_5oxttl:
 1125|  9.71k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  9.71k|    haystack: &[u8],
 1127|  9.71k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  9.71k|) -> Option<usize> {
 1129|  9.71k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  9.71k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  9.71k|    // a &[u8].
 1132|  9.71k|    let start = haystack.as_ptr();
 1133|  9.71k|    let end = start.add(haystack.len());
 1134|  9.71k|    let found = find_raw(start, end)?;
 1135|    235|    Some(found.distance(start))
 1136|  9.71k|}
_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECshegW5rJ1TR8_5oxttl:
 1125|   151k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   151k|    haystack: &[u8],
 1127|   151k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   151k|) -> Option<usize> {
 1129|   151k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   151k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   151k|    // a &[u8].
 1132|   151k|    let start = haystack.as_ptr();
 1133|   151k|    let end = start.add(haystack.len());
 1134|   151k|    let found = find_raw(start, end)?;
 1135|  69.2k|    Some(found.distance(start))
 1136|   151k|}
_RNvMs3_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  1.02M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  1.02M|        Iter {
 1029|  1.02M|            original_start: haystack.as_ptr(),
 1030|  1.02M|            start: haystack.as_ptr(),
 1031|  1.02M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  1.02M|            haystack: core::marker::PhantomData,
 1033|  1.02M|        }
 1034|  1.02M|    }
_RINvMs3_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0ECshegW5rJ1TR8_5oxttl:
 1044|  1.03M|    pub(crate) unsafe fn next(
 1045|  1.03M|        &mut self,
 1046|  1.03M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.03M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.03M|        let found = find_raw(self.start, self.end)?;
 1057|  6.95k|        let result = found.distance(self.original_start);
 1058|  6.95k|        self.start = found.add(1);
 1059|  6.95k|        Some(result)
 1060|  1.03M|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle1B8_:
  117|  22.3k|    pub(crate) fn needle1(&self) -> u8 {
  118|  22.3k|        self.s1
  119|  22.3k|    }
_RINvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  13.2k|    unsafe fn search_chunk(
  417|  13.2k|        &self,
  418|  13.2k|        cur: *const u8,
  419|  13.2k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  13.2k|    ) -> Option<*const u8> {
  421|  13.2k|        let chunk = V::load_unaligned(cur);
  422|  13.2k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  13.2k|        if mask.has_non_zero() {
  424|     91|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  13.1k|            None
  427|       |        }
  428|  13.2k|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  1.83k|    pub(crate) unsafe fn find_raw(
  144|  1.83k|        &self,
  145|  1.83k|        start: *const u8,
  146|  1.83k|        end: *const u8,
  147|  1.83k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.83k|        let topos = V::Mask::first_offset;
  155|  1.83k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.83k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     39|            return Some(cur);
  167|  1.79k|        }
  168|  1.79k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.79k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.79k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.79k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.58k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    807|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     18|                return Some(cur);
  216|    789|            }
  217|    789|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.77k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.55k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.55k|            return self.search_chunk(cur, topos);
  228|    216|        }
  229|    216|        None
  230|  1.83k|    }
_RINvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  60.3k|    unsafe fn search_chunk(
  671|  60.3k|        &self,
  672|  60.3k|        cur: *const u8,
  673|  60.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  60.3k|    ) -> Option<*const u8> {
  675|  60.3k|        let chunk = V::load_unaligned(cur);
  676|  60.3k|        let eq1 = self.v1.cmpeq(chunk);
  677|  60.3k|        let eq2 = self.v2.cmpeq(chunk);
  678|  60.3k|        let mask = eq1.or(eq2).movemask();
  679|  60.3k|        if mask.has_non_zero() {
  680|  12.5k|            let mask1 = eq1.movemask();
  681|  12.5k|            let mask2 = eq2.movemask();
  682|  12.5k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  47.8k|            None
  685|       |        }
  686|  60.3k|    }
_RINvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   136k|    unsafe fn search_chunk(
  671|   136k|        &self,
  672|   136k|        cur: *const u8,
  673|   136k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   136k|    ) -> Option<*const u8> {
  675|   136k|        let chunk = V::load_unaligned(cur);
  676|   136k|        let eq1 = self.v1.cmpeq(chunk);
  677|   136k|        let eq2 = self.v2.cmpeq(chunk);
  678|   136k|        let mask = eq1.or(eq2).movemask();
  679|   136k|        if mask.has_non_zero() {
  680|  32.1k|            let mask1 = eq1.movemask();
  681|  32.1k|            let mask2 = eq2.movemask();
  682|  32.1k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   104k|            None
  685|       |        }
  686|   136k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  1.40M|    pub(crate) fn needle1(&self) -> u8 {
  462|  1.40M|        self.s1
  463|  1.40M|    }
_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  3.13k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  3.13k|    start: *const u8,
 1150|  3.13k|    end: *const u8,
 1151|  3.13k|    confirm: F,
 1152|  3.13k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  3.13k|    let mut ptr = start;
 1155|  25.4k|    while ptr < end {
 1156|  22.3k|        if confirm(*ptr) {
 1157|     24|            return Some(ptr);
 1158|  22.2k|        }
 1159|  22.2k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.11k|    None
 1162|  3.13k|}
_RINvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  4.19k|    unsafe fn search_chunk(
  417|  4.19k|        &self,
  418|  4.19k|        cur: *const u8,
  419|  4.19k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  4.19k|    ) -> Option<*const u8> {
  421|  4.19k|        let chunk = V::load_unaligned(cur);
  422|  4.19k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  4.19k|        if mask.has_non_zero() {
  424|     63|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  4.13k|            None
  427|       |        }
  428|  4.19k|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE3newB8_:
  111|  9.71k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  9.71k|        One { s1: needle, v1: V::splat(needle) }
  113|  9.71k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  1.39M|    pub(crate) fn needle2(&self) -> u8 {
  468|  1.39M|        self.s2
  469|  1.39M|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE3newB8_:
  111|  9.71k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  9.71k|        One { s1: needle, v1: V::splat(needle) }
  113|  9.71k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  74.6k|    pub(crate) unsafe fn find_raw(
  494|  74.6k|        &self,
  495|  74.6k|        start: *const u8,
  496|  74.6k|        end: *const u8,
  497|  74.6k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  74.6k|        let topos = V::Mask::first_offset;
  505|  74.6k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  74.6k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  28.4k|            return Some(cur);
  517|  46.1k|        }
  518|  46.1k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  46.1k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  46.1k|        if len >= Self::LOOP_SIZE {
  522|   107k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  86.3k|                let a = V::load_aligned(cur);
  526|  86.3k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  86.3k|                let eqa1 = self.v1.cmpeq(a);
  528|  86.3k|                let eqb1 = self.v1.cmpeq(b);
  529|  86.3k|                let eqa2 = self.v2.cmpeq(a);
  530|  86.3k|                let eqb2 = self.v2.cmpeq(b);
  531|  86.3k|                let or1 = eqa1.or(eqb1);
  532|  86.3k|                let or2 = eqa2.or(eqb2);
  533|  86.3k|                let or3 = or1.or(or2);
  534|  86.3k|                if or3.movemask_will_have_non_zero() {
  535|  1.69k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  1.69k|                    if mask.has_non_zero() {
  537|    658|                        return Some(cur.add(topos(mask)));
  538|  1.03k|                    }
  539|  1.03k|
  540|  1.03k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  1.03k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  84.6k|                }
  544|  84.6k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  23.7k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  63.4k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  19.6k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    702|                return Some(cur);
  554|  18.9k|            }
  555|  18.9k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  43.7k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  42.4k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  42.4k|            return self.search_chunk(cur, topos);
  566|  1.34k|        }
  567|  1.34k|        None
  568|  74.6k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  32.6k|    pub(crate) unsafe fn find_raw(
  494|  32.6k|        &self,
  495|  32.6k|        start: *const u8,
  496|  32.6k|        end: *const u8,
  497|  32.6k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  32.6k|        let topos = V::Mask::first_offset;
  505|  32.6k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  32.6k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  10.9k|            return Some(cur);
  517|  21.7k|        }
  518|  21.7k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  21.7k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  21.7k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  21.7k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  28.9k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  7.66k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    399|                return Some(cur);
  554|  7.26k|            }
  555|  7.26k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  21.3k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  20.0k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  20.0k|            return self.search_chunk(cur, topos);
  566|  1.26k|        }
  567|  1.26k|        None
  568|  32.6k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE3newBa_:
  450|  1.18M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.18M|        Two {
  452|  1.18M|            s1: needle1,
  453|  1.18M|            s2: needle2,
  454|  1.18M|            v1: V::splat(needle1),
  455|  1.18M|            v2: V::splat(needle2),
  456|  1.18M|        }
  457|  1.18M|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  4.50k|    pub(crate) unsafe fn find_raw(
  144|  4.50k|        &self,
  145|  4.50k|        start: *const u8,
  146|  4.50k|        end: *const u8,
  147|  4.50k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  4.50k|        let topos = V::Mask::first_offset;
  155|  4.50k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  4.50k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     40|            return Some(cur);
  167|  4.46k|        }
  168|  4.46k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  4.46k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  4.46k|        if len >= Self::LOOP_SIZE {
  172|  1.85k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    833|                let a = V::load_aligned(cur);
  176|    833|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    833|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    833|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    833|                let eqa = self.v1.cmpeq(a);
  180|    833|                let eqb = self.v1.cmpeq(b);
  181|    833|                let eqc = self.v1.cmpeq(c);
  182|    833|                let eqd = self.v1.cmpeq(d);
  183|    833|                let or1 = eqa.or(eqb);
  184|    833|                let or2 = eqc.or(eqd);
  185|    833|                let or3 = or1.or(or2);
  186|    833|                if or3.movemask_will_have_non_zero() {
  187|     57|                    let mask = eqa.movemask();
  188|     57|                    if mask.has_non_zero() {
  189|      9|                        return Some(cur.add(topos(mask)));
  190|     48|                    }
  191|     48|
  192|     48|                    let mask = eqb.movemask();
  193|     48|                    if mask.has_non_zero() {
  194|     26|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     22|                    }
  196|     22|
  197|     22|                    let mask = eqc.movemask();
  198|     22|                    if mask.has_non_zero() {
  199|     11|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     11|                    }
  201|     11|
  202|     11|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     11|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    776|                }
  206|    776|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.38k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  8.93k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.55k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     32|                return Some(cur);
  216|  4.52k|            }
  217|  4.52k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.37k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  4.16k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  4.16k|            return self.search_chunk(cur, topos);
  228|    211|        }
  229|    211|        None
  230|  4.50k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE3newBa_:
  450|  1.18M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.18M|        Two {
  452|  1.18M|            s1: needle1,
  453|  1.18M|            s2: needle2,
  454|  1.18M|            v1: V::splat(needle1),
  455|  1.18M|            v2: V::splat(needle2),
  456|  1.18M|        }
  457|  1.18M|    }
_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   822k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   822k|    start: *const u8,
 1150|   822k|    end: *const u8,
 1151|   822k|    confirm: F,
 1152|   822k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|   822k|    let mut ptr = start;
 1155|  2.20M|    while ptr < end {
 1156|  1.40M|        if confirm(*ptr) {
 1157|  29.8k|            return Some(ptr);
 1158|  1.37M|        }
 1159|  1.37M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|   793k|    None
 1162|   822k|}

_RNCNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  22.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  22.3k|                    b == self.sse2.needle1()
  194|  22.3k|                })
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  4.50k|    unsafe fn find_raw_avx2(
  397|  4.50k|        &self,
  398|  4.50k|        start: *const u8,
  399|  4.50k|        end: *const u8,
  400|  4.50k|    ) -> Option<*const u8> {
  401|  4.50k|        self.avx2.find_raw(start, end)
  402|  4.50k|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.18M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.18M|        Two {
  558|  1.18M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.18M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.18M|        }
  561|  1.18M|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.18M|    pub unsafe fn find_raw(
  655|  1.18M|        &self,
  656|  1.18M|        start: *const u8,
  657|  1.18M|        end: *const u8,
  658|  1.18M|    ) -> Option<*const u8> {
  659|  1.18M|        if start >= end {
  660|   254k|            return None;
  661|   930k|        }
  662|   930k|        let len = end.distance(start);
  663|   930k|        if len < __m256i::BYTES {
  664|   855k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   822k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   822k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  32.6k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  74.6k|        }
  676|  74.6k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  74.6k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  74.6k|        // enough to run on the vector routine. Pointer validity is caller's
  679|  74.6k|        // responsibility.
  680|  74.6k|        //
  681|  74.6k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  74.6k|        // means we'd have to annotate this routine with `target_feature`.
  683|  74.6k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  74.6k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  74.6k|        // The real problem is that a routine with a `target_feature`
  686|  74.6k|        // annotation generally can't be inlined into caller code unless
  687|  74.6k|        // the caller code has the same target feature annotations. Namely,
  688|  74.6k|        // the common case (at time of writing) is for calling code to not
  689|  74.6k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  74.6k|        // `target_feature` on this routine, it can be inlined which will
  691|  74.6k|        // handle some of the short-haystack cases above without touching the
  692|  74.6k|        // architecture specific code.
  693|  74.6k|        self.find_raw_avx2(start, end)
  694|  1.18M|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  74.6k|    unsafe fn find_raw_avx2(
  805|  74.6k|        &self,
  806|  74.6k|        start: *const u8,
  807|  74.6k|        end: *const u8,
  808|  74.6k|    ) -> Option<*const u8> {
  809|  74.6k|        self.avx2.find_raw(start, end)
  810|  74.6k|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  9.71k|    pub unsafe fn find_raw(
  180|  9.71k|        &self,
  181|  9.71k|        start: *const u8,
  182|  9.71k|        end: *const u8,
  183|  9.71k|    ) -> Option<*const u8> {
  184|  9.71k|        if start >= end {
  185|    240|            return None;
  186|  9.47k|        }
  187|  9.47k|        let len = end.distance(start);
  188|  9.47k|        if len < __m256i::BYTES {
  189|  4.96k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  3.13k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  3.13k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  1.83k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  4.50k|        }
  201|  4.50k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  4.50k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  4.50k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  4.50k|        // responsibility.
  205|  4.50k|        //
  206|  4.50k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  4.50k|        // means we'd have to annotate this routine with `target_feature`.
  208|  4.50k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  4.50k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  4.50k|        // The real problem is that a routine with a `target_feature`
  211|  4.50k|        // annotation generally can't be inlined into caller code unless
  212|  4.50k|        // the caller code has the same target feature annotations. Namely,
  213|  4.50k|        // the common case (at time of writing) is for calling code to not
  214|  4.50k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  4.50k|        // `target_feature` on this routine, it can be inlined which will
  216|  4.50k|        // handle some of the short-haystack cases above without touching the
  217|  4.50k|        // architecture specific code.
  218|  4.50k|        self.find_raw_avx2(start, end)
  219|  9.71k|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  32.6k|    unsafe fn find_raw_sse2(
  765|  32.6k|        &self,
  766|  32.6k|        start: *const u8,
  767|  32.6k|        end: *const u8,
  768|  32.6k|    ) -> Option<*const u8> {
  769|  32.6k|        self.sse2.find_raw(start, end)
  770|  32.6k|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  1.83k|    unsafe fn find_raw_sse2(
  337|  1.83k|        &self,
  338|  1.83k|        start: *const u8,
  339|  1.83k|        end: *const u8,
  340|  1.83k|    ) -> Option<*const u8> {
  341|  1.83k|        self.sse2.find_raw(start, end)
  342|  1.83k|    }
_RNCNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  1.40M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  1.40M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  1.40M|                })
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  9.71k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  9.71k|        One {
   71|  9.71k|            sse2: generic::One::new(needle),
   72|  9.71k|            avx2: generic::One::new(needle),
   73|  9.71k|        }
   74|  9.71k|    }

_RNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.18M|pub(crate) fn memchr2_raw(
  221|  1.18M|    n1: u8,
  222|  1.18M|    n2: u8,
  223|  1.18M|    start: *const u8,
  224|  1.18M|    end: *const u8,
  225|  1.18M|) -> Option<*const u8> {
  226|  1.18M|    // SAFETY: We provide a valid function pointer type.
  227|  1.18M|    unsafe_ifunc!(
  228|  1.18M|        Two,
  229|  1.18M|        find_raw,
  230|  1.18M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.18M|        Option<*const u8>,
  232|  1.18M|        start,
  233|  1.18M|        end,
  234|  1.18M|        n1,
  235|  1.18M|        n2
  236|  1.18M|    )
  237|  1.18M|}
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  9.71k|        unsafe fn find_avx2(
   79|  9.71k|            $($needle: u8),+,
   80|  9.71k|            $hay_start: *const u8,
   81|  9.71k|            $hay_end: *const u8,
   82|  9.71k|        ) -> $retty {
   83|  9.71k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  9.71k|            $memchrty::new_unchecked($($needle),+)
   85|  9.71k|                .$memchrfind($hay_start, $hay_end)
   86|  9.71k|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.18M|        unsafe fn find_avx2(
   79|  1.18M|            $($needle: u8),+,
   80|  1.18M|            $hay_start: *const u8,
   81|  1.18M|            $hay_end: *const u8,
   82|  1.18M|        ) -> $retty {
   83|  1.18M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.18M|            $memchrty::new_unchecked($($needle),+)
   85|  1.18M|                .$memchrfind($hay_start, $hay_end)
   86|  1.18M|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr10memchr_raw:
  174|  9.71k|pub(crate) fn memchr_raw(
  175|  9.71k|    n1: u8,
  176|  9.71k|    start: *const u8,
  177|  9.71k|    end: *const u8,
  178|  9.71k|) -> Option<*const u8> {
  179|  9.71k|    // SAFETY: We provide a valid function pointer type.
  180|  9.71k|    unsafe_ifunc!(
  181|  9.71k|        One,
  182|  9.71k|        find_raw,
  183|  9.71k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  9.71k|        Option<*const u8>,
  185|  9.71k|        start,
  186|  9.71k|        end,
  187|  9.71k|        n1
  188|  9.71k|    )
  189|  9.71k|}

_RNvXNtCs6gOFuQHqvZ0_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  1.19M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  1.19M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  1.19M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  1.19M|    }
_RNvXNtCs6gOFuQHqvZ0_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  74.1k|    fn as_usize(self) -> usize {
   27|  74.1k|        self as usize
   28|  74.1k|    }

_RNvNtCs6gOFuQHqvZ0_6memchr6memchr7memchr2CshegW5rJ1TR8_5oxttl:
   92|   151k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   151k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   151k|    // pointer between start and end.
   95|   151k|    unsafe {
   96|   151k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   151k|        })
   99|   151k|    }
  100|   151k|}
_RNvXs3_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4nextCshegW5rJ1TR8_5oxttl:
  390|  1.03M|    fn next(&mut self) -> Option<usize> {
  391|  1.03M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  1.03M|        // pointers returns will fall within the start and end bounds, and this
  393|  1.03M|        // upholds the safety contract of `self.it.next`.
  394|  1.03M|        unsafe {
  395|  1.03M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  1.03M|        }
  397|  1.03M|    }
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr6memchrCshegW5rJ1TR8_5oxttl:
   27|  9.71k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  9.71k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  9.71k|    // pointer between start and end.
   30|  9.71k|    unsafe {
   31|  9.71k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  9.71k|        })
   34|  9.71k|    }
   35|  9.71k|}
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr12memchr2_iterCshegW5rJ1TR8_5oxttl:
  232|  1.02M|pub fn memchr2_iter<'h>(
  233|  1.02M|    needle1: u8,
  234|  1.02M|    needle2: u8,
  235|  1.02M|    haystack: &'h [u8],
  236|  1.02M|) -> Memchr2<'h> {
  237|  1.02M|    Memchr2::new(needle1, needle2, haystack)
  238|  1.02M|}
_RNvMs2_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr23newCshegW5rJ1TR8_5oxttl:
  377|  1.02M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  1.02M|        Memchr2 {
  379|  1.02M|            needle1,
  380|  1.02M|            needle2,
  381|  1.02M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  1.02M|        }
  383|  1.02M|    }
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr11memchr2_rawCshegW5rJ1TR8_5oxttl:
  574|  1.18M|unsafe fn memchr2_raw(
  575|  1.18M|    needle1: u8,
  576|  1.18M|    needle2: u8,
  577|  1.18M|    start: *const u8,
  578|  1.18M|    end: *const u8,
  579|  1.18M|) -> Option<*const u8> {
  580|  1.18M|    #[cfg(target_arch = "x86_64")]
  581|  1.18M|    {
  582|  1.18M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.18M|    }
  584|  1.18M|    #[cfg(target_arch = "wasm32")]
  585|  1.18M|    {
  586|  1.18M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.18M|    }
  588|  1.18M|    #[cfg(target_arch = "aarch64")]
  589|  1.18M|    {
  590|  1.18M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.18M|    }
  592|  1.18M|    #[cfg(not(any(
  593|  1.18M|        target_arch = "x86_64",
  594|  1.18M|        target_arch = "wasm32",
  595|  1.18M|        target_arch = "aarch64"
  596|  1.18M|    )))]
  597|  1.18M|    {
  598|  1.18M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.18M|            .find_raw(start, end)
  600|  1.18M|    }
  601|  1.18M|}
_RNCNvXs3_NtCs6gOFuQHqvZ0_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0CshegW5rJ1TR8_5oxttl:
  395|  1.03M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCs6gOFuQHqvZ0_6memchr6memchr7memchr20CshegW5rJ1TR8_5oxttl:
   96|   151k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   151k|            memchr2_raw(needle1, needle2, start, end)
   98|   151k|        })
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr10memchr_rawB3_:
  504|  9.71k|unsafe fn memchr_raw(
  505|  9.71k|    needle: u8,
  506|  9.71k|    start: *const u8,
  507|  9.71k|    end: *const u8,
  508|  9.71k|) -> Option<*const u8> {
  509|  9.71k|    #[cfg(target_arch = "x86_64")]
  510|  9.71k|    {
  511|  9.71k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  9.71k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  9.71k|        // time. This function also handles using a fallback if neither AVX2
  514|  9.71k|        // nor SSE2 (unusual) are available.
  515|  9.71k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  9.71k|    }
  517|  9.71k|    #[cfg(target_arch = "wasm32")]
  518|  9.71k|    {
  519|  9.71k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  9.71k|    }
  521|  9.71k|    #[cfg(target_arch = "aarch64")]
  522|  9.71k|    {
  523|  9.71k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  9.71k|    }
  525|  9.71k|    #[cfg(not(any(
  526|  9.71k|        target_arch = "x86_64",
  527|  9.71k|        target_arch = "wasm32",
  528|  9.71k|        target_arch = "aarch64"
  529|  9.71k|    )))]
  530|  9.71k|    {
  531|  9.71k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  9.71k|    }
  533|  9.71k|}
_RNCNvNtCs6gOFuQHqvZ0_6memchr6memchr6memchr0B5_:
   31|  9.71k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  9.71k|            memchr_raw(needle, start, end)
   33|  9.71k|        })

_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   124k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   124k|            _mm_cmpeq_epi8(self, vector2)
  232|   124k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  89.5k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  89.5k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  89.5k|        }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   303k|    fn has_non_zero(self) -> bool {
  149|   303k|        self.0 != 0
  150|   303k|    }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  64.5k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  64.5k|            _mm_loadu_si128(data as *const __m128i)
  222|  64.5k|        }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  46.5k|    fn first_offset(self) -> usize {
  174|  46.5k|        // We are dealing with little endian here (and if we aren't, we swap
  175|  46.5k|        // the bytes so we are in practice), where the most significant byte
  176|  46.5k|        // is at a higher address. That means the least significant bit that
  177|  46.5k|        // is set corresponds to the position of our first matching byte.
  178|  46.5k|        // That position corresponds to the number of zeros after the least
  179|  46.5k|        // significant bit.
  180|  46.5k|        self.get_for_offset().trailing_zeros() as usize
  181|  46.5k|    }
_RNvMNtCs6gOFuQHqvZ0_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  46.5k|    fn get_for_offset(self) -> u32 {
  129|  46.5k|        #[cfg(target_endian = "big")]
  130|  46.5k|        {
  131|  46.5k|            self.0.swap_bytes()
  132|  46.5k|        }
  133|  46.5k|        #[cfg(target_endian = "little")]
  134|  46.5k|        {
  135|  46.5k|            self.0
  136|  46.5k|        }
  137|  46.5k|    }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   307k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   307k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   307k|        }
_RNvYNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtNtCs6gOFuQHqvZ0_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  87.2k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  87.2k|        self.movemask().has_non_zero()
   67|  87.2k|    }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   635k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   635k|            _mm256_cmpeq_epi8(self, vector2)
  282|   635k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   149k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   149k|            _mm256_loadu_si256(data as *const __m256i)
  272|   149k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   176k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   176k|            _mm256_load_si256(data as *const __m256i)
  267|   176k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   398k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   398k|            _mm256_or_si256(self, vector2)
  292|   398k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  2.37M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  2.37M|            _mm_set1_epi8(byte as i8)
  212|  2.37M|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  60.3k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  60.3k|            _mm_or_si128(self, vector2)
  242|  60.3k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  2.37M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  2.37M|            _mm256_set1_epi8(byte as i8)
  262|  2.37M|        }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  47.3k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  47.3k|        SensibleMoveMask(self.0 | other.0)
  165|  47.3k|    }

_RNvMs2_NtCsaa29Szp9EWb_9once_cell3impINtB5_8OnceCellNtNtCs7mhW5aIIbP8_5alloc6string6StringE14is_initializedCs697sg40YU7P_13libfuzzer_sys:
   49|  3.79k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.79k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.79k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.79k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.79k|        // `SeqCst` operations on the slow path.
   54|  3.79k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.79k|    }

_RNvMs4_NtCsaa29Szp9EWb_9once_cell4syncINtB5_8OnceCellNtNtCs7mhW5aIIbP8_5alloc6string6StringE3getCs697sg40YU7P_13libfuzzer_sys:
  963|  3.79k|        pub fn get(&self) -> Option<&T> {
  964|  3.79k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.79k|                None
  969|       |            }
  970|  3.79k|        }

_RNvMCseyBZSnDs3ky_10oxilangtagINtB2_11LanguageTagReE10into_innerCshegW5rJ1TR8_5oxttl:
   54|  2.28k|    pub fn into_inner(self) -> T {
   55|  2.28k|        self.tag
   56|  2.28k|    }
_RNvMCseyBZSnDs3ky_10oxilangtagINtB2_11LanguageTagReE5parseCshegW5rJ1TR8_5oxttl:
   41|  3.75k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  3.75k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  2.28k|        Ok(Self { tag, positions })
   44|  3.75k|    }
_RNvXsE_CseyBZSnDs3ky_10oxilangtagNtB5_16VoidOutputBufferNtNtCs5I47Pk7y5NW_4core7default7Default7defaultCshegW5rJ1TR8_5oxttl:
  547|  3.75k|#[derive(Default)]
_RINvXsr_CseyBZSnDs3ky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs5I47Pk7y5NW_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsgvi62RmfmLq_5oxrdf:
  560|    304|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CseyBZSnDs3ky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs5I47Pk7y5NW_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsgvi62RmfmLq_5oxrdf:
  560|  3.78k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CseyBZSnDs3ky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs5I47Pk7y5NW_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsgvi62RmfmLq_5oxrdf:
  560|    225|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CseyBZSnDs3ky_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs5I47Pk7y5NW_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsgvi62RmfmLq_5oxrdf:
  560|    702|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCseyBZSnDs3ky_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Csgvi62RmfmLq_5oxrdf:
  583|  97.5k|        .find(|record| record.eq_ignore_ascii_case(input))
_RINvCseyBZSnDs3ky_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsgvi62RmfmLq_5oxrdf:
  621|  3.44k|fn parse_langtag(
  622|  3.44k|    input: &str,
  623|  3.44k|    output: &mut impl OutputBuffer,
  624|  3.44k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  3.44k|    #[derive(PartialEq, Eq)]
  626|  3.44k|    enum State {
  627|  3.44k|        Start,
  628|  3.44k|        AfterLanguage,
  629|  3.44k|        AfterExtLang,
  630|  3.44k|        AfterScript,
  631|  3.44k|        AfterRegion,
  632|  3.44k|        InExtension { expected: bool },
  633|  3.44k|        InPrivateUse { expected: bool },
  634|  3.44k|    }
  635|  3.44k|
  636|  3.44k|    let mut state = State::Start;
  637|  3.44k|    let mut language_end = 0;
  638|  3.44k|    let mut extlang_end = 0;
  639|  3.44k|    let mut script_end = 0;
  640|  3.44k|    let mut region_end = 0;
  641|  3.44k|    let mut variant_end = 0;
  642|  3.44k|    let mut extension_end = 0;
  643|  3.44k|    let mut extlangs_count = 0;
  644|  6.57k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  6.57k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  6.57k|        }
  650|  6.57k|        if subtag.len() > 8 {
  651|    307|            return Err(LanguageTagParseError {
  652|    307|                kind: TagParseErrorKind::SubtagTooLong,
  653|    307|            });
  654|  6.27k|        }
  655|  6.27k|        if state == State::Start {
  656|       |            // Primary language
  657|  3.16k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|    653|                return Err(LanguageTagParseError {
  659|    653|                    kind: TagParseErrorKind::InvalidLanguage,
  660|    653|                });
  661|  2.51k|            }
  662|  2.51k|            language_end = end;
  663|  2.51k|            output.extend(to_lowercase(subtag));
  664|  2.51k|            if subtag.len() < 4 {
  665|  1.93k|                // extlangs are only allowed for short language tags
  666|  1.93k|                state = State::AfterLanguage;
  667|  1.93k|            } else {
  668|    578|                state = State::AfterExtLang;
  669|    578|            }
  670|  3.10k|        } else if let State::InPrivateUse { .. } = state {
  671|    129|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|    129|            }
  676|    129|            output.push('-');
  677|    129|            output.extend(to_lowercase(subtag));
  678|    129|            state = State::InPrivateUse { expected: false };
  679|  2.97k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|    242|            if let State::InExtension { expected: true } = state {
  682|     93|                return Err(LanguageTagParseError {
  683|     93|                    kind: TagParseErrorKind::EmptyExtension,
  684|     93|                });
  685|    149|            }
  686|    149|            output.push('-');
  687|    149|            output.push('x');
  688|    149|            state = State::InPrivateUse { expected: true };
  689|  2.73k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|    508|            if let State::InExtension { expected: true } = state {
  692|    134|                return Err(LanguageTagParseError {
  693|    134|                    kind: TagParseErrorKind::EmptyExtension,
  694|    134|                });
  695|    374|            }
  696|    374|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|    374|            output.push('-');
  698|    374|            output.push(extension_tag);
  699|    374|            state = State::InExtension { expected: true };
  700|  2.22k|        } else if let State::InExtension { .. } = state {
  701|     90|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|     90|            }
  706|     90|            extension_end = end;
  707|     90|            output.push('-');
  708|     90|            output.extend(to_lowercase(subtag));
  709|     90|            state = State::InExtension { expected: false };
  710|  2.13k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|    244|            extlangs_count += 1;
  712|    244|            if extlangs_count > 3 {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|      0|                });
  716|    244|            }
  717|    244|            // valid extlangs
  718|    244|            extlang_end = end;
  719|    244|            output.push('-');
  720|    244|            output.extend(to_lowercase(subtag));
  721|  1.89k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  1.10k|            && subtag.len() == 4
  723|    702|            && is_alphabetic(subtag)
  724|    702|        {
  725|    702|            // Script
  726|    702|            script_end = end;
  727|    702|            output.push('-');
  728|    702|            output.extend(to_uppercase_first(subtag));
  729|    702|            state = State::AfterScript;
  730|  1.18k|        } else if (state == State::AfterLanguage
  731|    873|            || state == State::AfterExtLang
  732|    790|            || state == State::AfterScript)
  733|  1.01k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|    794|                || subtag.len() == 3 && is_numeric(subtag))
  735|    225|        {
  736|    225|            // Region
  737|    225|            region_end = end;
  738|    225|            output.push('-');
  739|    225|            output.extend(to_uppercase(subtag));
  740|    225|            state = State::AfterRegion;
  741|    964|        } else if (state == State::AfterLanguage
  742|    811|            || state == State::AfterExtLang
  743|    780|            || state == State::AfterScript
  744|    170|            || state == State::AfterRegion)
  745|    964|            && is_alphanumeric(subtag)
  746|    964|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    160|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|    804|        {
  749|    804|            // Variant
  750|    804|            variant_end = end;
  751|    804|            output.push('-');
  752|    804|            output.extend(to_lowercase(subtag));
  753|    804|            state = State::AfterRegion;
  754|    804|        } else {
  755|    160|            return Err(LanguageTagParseError {
  756|    160|                kind: TagParseErrorKind::InvalidSubtag,
  757|    160|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  2.10k|    if let State::InExtension { expected: true } = state {
  763|    100|        return Err(LanguageTagParseError {
  764|    100|            kind: TagParseErrorKind::EmptyExtension,
  765|    100|        });
  766|  2.00k|    }
  767|  2.00k|    if let State::InPrivateUse { expected: true } = state {
  768|     20|        return Err(LanguageTagParseError {
  769|     20|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|     20|        });
  771|  1.98k|    }
  772|  1.98k|
  773|  1.98k|    //We make sure we have not skipped anyone
  774|  1.98k|    if extlang_end < language_end {
  775|  1.73k|        extlang_end = language_end;
  776|  1.73k|    }
  777|  1.98k|    if script_end < extlang_end {
  778|  1.37k|        script_end = extlang_end;
  779|  1.37k|    }
  780|  1.98k|    if region_end < script_end {
  781|  1.82k|        region_end = script_end;
  782|  1.82k|    }
  783|  1.98k|    if variant_end < region_end {
  784|  1.23k|        variant_end = region_end;
  785|  1.23k|    }
  786|  1.98k|    if extension_end < variant_end {
  787|  1.93k|        extension_end = variant_end;
  788|  1.93k|    }
  789|       |
  790|  1.98k|    Ok(TagElementsPositions {
  791|  1.98k|        language_end,
  792|  1.98k|        extlang_end,
  793|  1.98k|        script_end,
  794|  1.98k|        region_end,
  795|  1.98k|        variant_end,
  796|  1.98k|        extension_end,
  797|  1.98k|    })
  798|  3.44k|}
_RINvCseyBZSnDs3ky_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsgvi62RmfmLq_5oxrdf:
  576|  3.75k|fn parse_language_tag(
  577|  3.75k|    input: &str,
  578|  3.75k|    output: &mut impl OutputBuffer,
  579|  3.75k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  3.75k|    if let Some(tag) = GRANDFATHEREDS
  582|  3.75k|        .iter()
  583|  3.75k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  3.75k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|    304|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|    304|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|    304|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|    304|            Ok(TagElementsPositions {
  607|    304|                language_end: input.len(),
  608|    304|                extlang_end: input.len(),
  609|    304|                script_end: input.len(),
  610|    304|                region_end: input.len(),
  611|    304|                variant_end: input.len(),
  612|    304|                extension_end: input.len(),
  613|    304|            })
  614|       |        }
  615|       |    } else {
  616|  3.44k|        parse_langtag(input, output)
  617|       |    }
  618|  3.75k|}
_RNvCseyBZSnDs3ky_10oxilangtag23is_alphanumeric_or_dashCsgvi62RmfmLq_5oxrdf:
  875|    304|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|    304|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|    304|}
_RNvXsw_CseyBZSnDs3ky_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4nextCsgvi62RmfmLq_5oxrdf:
  851|  8.67k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  8.67k|        let tag = self.split.next()?;
  853|  6.57k|        let tag_end = self.position + tag.len();
  854|  6.57k|        self.position = tag_end + 1;
  855|  6.57k|        Some((tag, tag_end))
  856|  8.67k|    }
_RNvCseyBZSnDs3ky_10oxilangtag12to_lowercaseCsgvi62RmfmLq_5oxrdf:
  892|  3.78k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  3.78k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  3.78k|}
_RNvCseyBZSnDs3ky_10oxilangtag10is_numericCsgvi62RmfmLq_5oxrdf:
  865|    153|fn is_numeric(s: &str) -> bool {
  866|    153|    s.chars().all(|x| x.is_ascii_digit())
  867|    153|}
_RNvCseyBZSnDs3ky_10oxilangtag12to_uppercaseCsgvi62RmfmLq_5oxrdf:
  880|    225|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|    225|    s.chars().map(|c| c.to_ascii_uppercase())
  882|    225|}
_RNvMsv_CseyBZSnDs3ky_10oxilangtagNtB5_14SubTagIterator3newCsgvi62RmfmLq_5oxrdf:
  839|  3.44k|    fn new(input: &'a str) -> Self {
  840|  3.44k|        Self {
  841|  3.44k|            split: input.split('-'),
  842|  3.44k|            position: 0,
  843|  3.44k|        }
  844|  3.44k|    }
_RNvXs_NvCseyBZSnDs3ky_10oxilangtag13parse_langtagNtB4_5StateNtNtCs5I47Pk7y5NW_4core3cmp9PartialEq2eqCsgvi62RmfmLq_5oxrdf:
  625|  16.7k|    #[derive(PartialEq, Eq)]
_RNvCseyBZSnDs3ky_10oxilangtag15is_alphanumericCsgvi62RmfmLq_5oxrdf:
  870|  1.69k|fn is_alphanumeric(s: &str) -> bool {
  871|  1.69k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  1.69k|}
_RNvCseyBZSnDs3ky_10oxilangtag18to_uppercase_firstCsgvi62RmfmLq_5oxrdf:
  886|    702|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|    702|    let mut chars = s.chars();
  888|    702|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|    702|}
_RNvXsq_CseyBZSnDs3ky_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgvi62RmfmLq_5oxrdf:
  552|  3.24k|    fn push(&mut self, _: char) {}
_RNvCseyBZSnDs3ky_10oxilangtag13is_alphabeticCsgvi62RmfmLq_5oxrdf:
  860|  4.49k|fn is_alphabetic(s: &str) -> bool {
  861|  4.49k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  4.49k|}
_RNCNvCseyBZSnDs3ky_10oxilangtag10is_numeric0B3_:
  866|    153|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCseyBZSnDs3ky_10oxilangtag15is_alphanumeric0B3_:
  871|  7.61k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_CseyBZSnDs3ky_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs5I47Pk7y5NW_4core3fmt7Display3fmt:
  482|  1.46k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  1.46k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|    327|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|     20|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    160|            TagParseErrorKind::InvalidSubtag => write!(
  494|    160|                f,
  495|    160|                "A subtag fails to parse, it does not match any other subtags"
  496|    160|            ),
  497|    653|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    307|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|      0|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  1.46k|    }
_RNCNvCseyBZSnDs3ky_10oxilangtag13is_alphabetic0B3_:
  861|  11.7k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCseyBZSnDs3ky_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  9.48k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE19remove_last_segmentCshegW5rJ1TR8_5oxttl:
 1401|  4.11k|    fn remove_last_segment(&mut self) {
 1402|  4.11k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1403|  4.11k|            .rfind('/')
 1404|  4.11k|            .unwrap_or(0);
 1405|  4.11k|        self.output
 1406|  4.11k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1407|  4.11k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE23parse_path_or_authorityCshegW5rJ1TR8_5oxttl:
 1141|    129|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|    129|        if self.input.starts_with('/') {
 1143|     62|            self.input.next();
 1144|     62|            self.output.push('/');
 1145|     62|            self.parse_authority()
 1146|       |        } else {
 1147|     67|            self.output_positions.authority_end = self.output.len() - 1;
 1148|     67|            self.parse_path()
 1149|       |        }
 1150|    129|    }
_RNvMCsbXhpHzO9t4N_5oxiriINtB2_6IriRefNtNtCs7mhW5aIIbP8_5alloc6string6StringE7resolveCshegW5rJ1TR8_5oxttl:
   71|  8.48k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   72|  8.48k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   73|  8.48k|        let positions = IriParser::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   74|  5.20k|        Ok(IriRef {
   75|  5.20k|            iri: target_buffer,
   76|  5.20k|            positions,
   77|  5.20k|        })
   78|  8.48k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE15parse_authorityCshegW5rJ1TR8_5oxttl:
 1231|  2.23k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  11.1k|        loop {
 1234|  11.1k|            let c = self.input.next();
 1235|  11.1k|            match c {
 1236|       |                Some('@') => {
 1237|    300|                    self.output.push('@');
 1238|    300|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  1.78k|                    self.input = ParserInput {
 1242|  1.78k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  1.78k|                        position: self.input_scheme_end + 2,
 1244|  1.78k|                    };
 1245|  1.78k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  1.78k|                    return self.parse_host();
 1247|       |                }
 1248|  9.08k|                Some(c) => {
 1249|  9.08k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  2.23k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE14parse_fragmentCshegW5rJ1TR8_5oxttl:
 1394|    637|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  6.41k|        while let Some(c) = self.input.next() {
 1396|  6.17k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|    244|        Ok(())
 1399|    637|    }
_RNvMCsbXhpHzO9t4N_5oxiriINtB2_6IriRefNtNtCs7mhW5aIIbP8_5alloc6string6StringE6as_refCshegW5rJ1TR8_5oxttl:
  101|  8.48k|    pub fn as_ref(&self) -> IriRef<&str> {
  102|  8.48k|        IriRef {
  103|  8.48k|            iri: &self.iri,
  104|  8.48k|            positions: self.positions,
  105|  8.48k|        }
  106|  8.48k|    }
_RINvMs11_CsbXhpHzO9t4N_5oxiriINtB7_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE11parse_erroruECshegW5rJ1TR8_5oxttl:
 1454|  3.28k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|  3.28k|        Err(IriParseError { kind })
 1456|  3.28k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE16parse_path_startCshegW5rJ1TR8_5oxttl:
 1315|  1.38k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  1.38k|        match c {
 1317|       |            None => {
 1318|    893|                self.output_positions.path_end = self.output.len();
 1319|    893|                self.output_positions.query_end = self.output.len();
 1320|    893|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    169|                self.output_positions.path_end = self.output.len();
 1324|    169|                self.output.push('?');
 1325|    169|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    176|                self.output_positions.path_end = self.output.len();
 1329|    176|                self.output_positions.query_end = self.output.len();
 1330|    176|                self.output.push('#');
 1331|    176|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|    144|                self.output.push('/');
 1335|    144|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  1.38k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE33read_url_query_codepoint_or_echarCshegW5rJ1TR8_5oxttl:
 1422|  11.6k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  11.6k|        if c == '%' {
 1424|     97|            self.read_echar()
 1425|  11.5k|        } else if is_url_query_code_point(c) {
 1426|  11.2k|            self.output.push(c);
 1427|  11.2k|            Ok(())
 1428|       |        } else {
 1429|    340|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  11.6k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE18parse_scheme_startCshegW5rJ1TR8_5oxttl:
 1101|  8.48k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  8.48k|        match self.input.front() {
 1103|     46|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  7.48k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|  6.59k|            _ => self.parse_relative(),
 1106|       |        }
 1107|  8.48k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE10parse_hostCshegW5rJ1TR8_5oxttl:
 1255|  2.08k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  2.08k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|    239|            let start_position = self.input.position;
 1259|  1.69k|            while let Some(c) = self.input.next() {
 1260|  1.51k|                self.output.push(c);
 1261|  1.51k|                if c == ']' {
 1262|     58|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|     58|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|     58|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  1.45k|                }
 1280|       |            }
 1281|    181|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  7.29k|            loop {
 1285|  7.29k|                let c = self.input.next();
 1286|  7.29k|                match c {
 1287|       |                    Some(':') => {
 1288|    674|                        self.output.push(':');
 1289|    674|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|    969|                        self.output_positions.authority_end = self.output.len();
 1293|    969|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  5.65k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  2.08k|    }
_RNCNvMs11_CsbXhpHzO9t4N_5oxiriINtB8_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE10read_echar0CshegW5rJ1TR8_5oxttl:
 1437|    583|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMsp_CsbXhpHzO9t4N_5oxiriINtB5_3IriNtNtCs7mhW5aIIbP8_5alloc6string6StringE7resolveCshegW5rJ1TR8_5oxttl:
  516|  8.48k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  517|  8.48k|        Ok(Iri(self.0.resolve(iri)?))
  518|  8.48k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE14parse_relativeCshegW5rJ1TR8_5oxttl:
 1152|  8.14k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|  8.14k|        if let Some(base) = self.base {
 1154|  8.14k|            match self.input.front() {
 1155|       |                None => {
 1156|    954|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|    954|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|    954|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|    954|                    self.output_positions.path_end = base.positions.path_end;
 1160|    954|                    self.output_positions.query_end = base.positions.query_end;
 1161|    954|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|  2.98k|                    self.input.next();
 1165|  2.98k|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|    327|                    self.input.next();
 1169|    327|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|    327|                    self.output.push('?');
 1171|    327|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|    327|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|    327|                    self.output_positions.path_end = base.positions.path_end;
 1174|    327|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|    218|                    self.input.next();
 1178|    218|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|    218|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|    218|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|    218|                    self.output_positions.path_end = base.positions.path_end;
 1182|    218|                    self.output_positions.query_end = base.positions.query_end;
 1183|    218|                    self.output.push('#');
 1184|    218|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|  3.66k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|  3.66k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|  3.66k|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|  3.66k|                    self.output_positions.path_end = base.positions.path_end;
 1191|  3.66k|                    self.remove_last_segment();
 1192|  3.66k|                    if self.output.len() > base.positions.scheme_end {
 1193|  3.66k|                        // We have some path or authority, we keep a base '/'
 1194|  3.66k|                        self.output.push('/');
 1195|  3.66k|                    }
 1196|  3.66k|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|      0|            self.output_positions.scheme_end = 0;
 1201|      0|            self.input_scheme_end = 0;
 1202|      0|            if self.input.starts_with('/') {
 1203|      0|                self.input.next();
 1204|      0|                self.output.push('/');
 1205|      0|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|      0|                self.output_positions.authority_end = 0;
 1208|      0|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|  8.14k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE20parse_relative_slashCshegW5rJ1TR8_5oxttl:
 1213|  2.98k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1214|  2.98k|        if self.input.starts_with('/') {
 1215|  2.17k|            self.input.next();
 1216|  2.17k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1217|  2.17k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1218|  2.17k|            self.output.push('/');
 1219|  2.17k|            self.output.push('/');
 1220|  2.17k|            self.parse_authority()
 1221|       |        } else {
 1222|    809|            self.output
 1223|    809|                .push_str(&base.iri[..base.positions.authority_end]);
 1224|    809|            self.output.push('/');
 1225|    809|            self.output_positions.scheme_end = base.positions.scheme_end;
 1226|    809|            self.output_positions.authority_end = base.positions.authority_end;
 1227|    809|            self.parse_path()
 1228|       |        }
 1229|  2.98k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE11parse_queryCshegW5rJ1TR8_5oxttl:
 1380|  1.02k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  12.2k|        while let Some(c) = self.input.next() {
 1382|  11.7k|            if c == '#' {
 1383|     39|                self.output_positions.query_end = self.output.len();
 1384|     39|                self.output.push('#');
 1385|     39|                return self.parse_fragment();
 1386|       |            } else {
 1387|  11.6k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    568|        self.output_positions.query_end = self.output.len();
 1391|    568|        Ok(())
 1392|  1.02k|    }
_RNCNvMs11_CsbXhpHzO9t4N_5oxiriINtB8_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE10read_echars_0CshegW5rJ1TR8_5oxttl:
 1438|    241|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE12parse_schemeCshegW5rJ1TR8_5oxttl:
 1109|  1.84k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  22.2k|        loop {
 1111|  22.2k|            let c = self.input.next();
 1112|  22.0k|            match c {
 1113|  22.0k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  20.4k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|    294|                    self.output.push(':');
 1118|    294|                    self.output_positions.scheme_end = self.output.len();
 1119|    294|                    self.input_scheme_end = self.input.position;
 1120|    294|                    return if self.input.starts_with('/') {
 1121|    129|                        self.input.next();
 1122|    129|                        self.output.push('/');
 1123|    129|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|    165|                        self.output_positions.authority_end = self.output.len();
 1126|    165|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|  1.55k|                    self.input = ParserInput {
 1131|  1.55k|                        value: self.iri.chars(),
 1132|  1.55k|                        position: 0,
 1133|  1.55k|                    }; // reset
 1134|  1.55k|                    self.output.clear();
 1135|  1.55k|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  1.84k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE10parse_portCshegW5rJ1TR8_5oxttl:
 1301|    674|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|    937|        loop {
 1303|    937|            let c = self.input.next();
 1304|    770|            match c {
 1305|    770|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|    413|                    self.output_positions.authority_end = self.output.len();
 1308|    413|                    return self.parse_path_start(c);
 1309|       |                }
 1310|    261|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|    674|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE27read_url_codepoint_or_echarCshegW5rJ1TR8_5oxttl:
 1410|  59.4k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  59.4k|        if c == '%' {
 1412|    649|            self.read_echar()
 1413|  58.8k|        } else if is_url_code_point(c) {
 1414|  56.9k|            self.output.push(c);
 1415|  56.9k|            Ok(())
 1416|       |        } else {
 1417|  1.85k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  59.4k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE10parse_pathCshegW5rJ1TR8_5oxttl:
 1344|  4.85k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  42.4k|        loop {
 1346|  42.4k|            let c = self.input.next();
 1347|  42.4k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  3.87k|                    if self.output.as_str().ends_with("/..") {
 1350|     40|                        self.remove_last_segment();
 1351|     40|                        self.remove_last_segment();
 1352|     40|                        self.output.push('/');
 1353|  3.83k|                    } else if self.output.as_str().ends_with("/.") {
 1354|    366|                        self.remove_last_segment();
 1355|    366|                        self.output.push('/');
 1356|  3.46k|                    } else if c == Some('/') {
 1357|    590|                        self.output.push('/');
 1358|  2.87k|                    }
 1359|       |
 1360|  3.87k|                    if c == Some('?') {
 1361|    530|                        self.output_positions.path_end = self.output.len();
 1362|    530|                        self.output.push('?');
 1363|    530|                        return self.parse_query();
 1364|  3.34k|                    } else if c == Some('#') {
 1365|    204|                        self.output_positions.path_end = self.output.len();
 1366|    204|                        self.output_positions.query_end = self.output.len();
 1367|    204|                        self.output.push('#');
 1368|    204|                        return self.parse_fragment();
 1369|  3.14k|                    } else if c == None {
 1370|  2.55k|                        self.output_positions.path_end = self.output.len();
 1371|  2.55k|                        self.output_positions.query_end = self.output.len();
 1372|  2.55k|                        return Ok(());
 1373|    591|                    }
 1374|       |                }
 1375|  38.5k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  4.85k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE10read_echarCshegW5rJ1TR8_5oxttl:
 1434|    746|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|    746|        let c1 = self.input.next();
 1436|    746|        let c2 = self.input.next();
 1437|    746|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|    241|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|    203|            self.output.push('%');
 1441|    203|            self.output.push(c1.unwrap());
 1442|    203|            self.output.push(c2.unwrap());
 1443|    203|            Ok(())
 1444|       |        } else {
 1445|    543|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|    543|                Some('%'),
 1447|    543|                c1,
 1448|    543|                c2,
 1449|    543|            ]))
 1450|       |        }
 1451|    746|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtNtCs7mhW5aIIbP8_5alloc6string6StringE5parseCshegW5rJ1TR8_5oxttl:
 1076|  8.48k|    fn parse(
 1077|  8.48k|        iri: &'a str,
 1078|  8.48k|        base: Option<IriRef<&'a str>>,
 1079|  8.48k|        output: &'a mut O,
 1080|  8.48k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  8.48k|        let mut parser = Self {
 1082|  8.48k|            iri,
 1083|  8.48k|            base,
 1084|  8.48k|            input: ParserInput {
 1085|  8.48k|                value: iri.chars(),
 1086|  8.48k|                position: 0,
 1087|  8.48k|            },
 1088|  8.48k|            output,
 1089|  8.48k|            output_positions: IriElementsPositions {
 1090|  8.48k|                scheme_end: 0,
 1091|  8.48k|                authority_end: 0,
 1092|  8.48k|                path_end: 0,
 1093|  8.48k|                query_end: 0,
 1094|  8.48k|            },
 1095|  8.48k|            input_scheme_end: 0,
 1096|  8.48k|        };
 1097|  8.48k|        parser.parse_scheme_start()?;
 1098|  5.20k|        Ok(parser.output_positions)
 1099|  8.48k|    }
_RNvXsZ_CsbXhpHzO9t4N_5oxiriNtNtCs7mhW5aIIbP8_5alloc6string6StringNtB5_12OutputBuffer8push_strCshegW5rJ1TR8_5oxttl:
 1012|  8.14k|    fn push_str(&mut self, s: &str) {
 1013|  8.14k|        self.push_str(s);
 1014|  8.14k|    }
_RNvXsZ_CsbXhpHzO9t4N_5oxiriNtNtCs7mhW5aIIbP8_5alloc6string6StringNtB5_12OutputBuffer8truncateCshegW5rJ1TR8_5oxttl:
 1022|  5.89k|    fn truncate(&mut self, new_len: usize) {
 1023|  5.89k|        self.truncate(new_len);
 1024|  5.89k|    }
_RNvXsZ_CsbXhpHzO9t4N_5oxiriNtNtCs7mhW5aIIbP8_5alloc6string6StringNtB5_12OutputBuffer3lenCshegW5rJ1TR8_5oxttl:
 1027|  14.5k|    fn len(&self) -> usize {
 1028|  14.5k|        self.len()
 1029|  14.5k|    }
_RNvXsZ_CsbXhpHzO9t4N_5oxiriNtNtCs7mhW5aIIbP8_5alloc6string6StringNtB5_12OutputBuffer6as_strCshegW5rJ1TR8_5oxttl:
 1032|  11.8k|    fn as_str(&self) -> &str {
 1033|  11.8k|        self.as_str()
 1034|  11.8k|    }
_RNvXsZ_CsbXhpHzO9t4N_5oxiriNtNtCs7mhW5aIIbP8_5alloc6string6StringNtB5_12OutputBuffer4pushCshegW5rJ1TR8_5oxttl:
 1007|   104k|    fn push(&mut self, c: char) {
 1008|   104k|        self.push(c);
 1009|   104k|    }
_RNvXsZ_CsbXhpHzO9t4N_5oxiriNtNtCs7mhW5aIIbP8_5alloc6string6StringNtB5_12OutputBuffer5clearCshegW5rJ1TR8_5oxttl:
 1017|  1.55k|    fn clear(&mut self) {
 1018|  1.55k|        self.clear();
 1019|  1.55k|    }
_RNvMs10_CsbXhpHzO9t4N_5oxiriNtB6_11ParserInput4nextCshegW5rJ1TR8_5oxttl:
 1043|   111k|    fn next(&mut self) -> Option<char> {
 1044|   111k|        if let Some(head) = self.value.next() {
 1045|   105k|            self.position += head.len_utf8();
 1046|   105k|            Some(head)
 1047|       |        } else {
 1048|  6.06k|            None
 1049|       |        }
 1050|   111k|    }
_RNvMs10_CsbXhpHzO9t4N_5oxiriNtB6_11ParserInput11starts_withCshegW5rJ1TR8_5oxttl:
 1058|  5.49k|    fn starts_with(&self, c: char) -> bool {
 1059|  5.49k|        self.value.as_str().starts_with(c)
 1060|  5.49k|    }
_RNvMs10_CsbXhpHzO9t4N_5oxiriNtB6_11ParserInput5frontCshegW5rJ1TR8_5oxttl:
 1053|  16.6k|    fn front(&self) -> Option<char> {
 1054|  16.6k|        self.value.clone().next()
 1055|  16.6k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsgvi62RmfmLq_5oxrdf:
 1410|  83.4k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  83.4k|        if c == '%' {
 1412|      0|            self.read_echar()
 1413|  83.4k|        } else if is_url_code_point(c) {
 1414|  83.4k|            self.output.push(c);
 1415|  83.4k|            Ok(())
 1416|       |        } else {
 1417|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  83.4k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsgvi62RmfmLq_5oxrdf:
 1076|  3.79k|    fn parse(
 1077|  3.79k|        iri: &'a str,
 1078|  3.79k|        base: Option<IriRef<&'a str>>,
 1079|  3.79k|        output: &'a mut O,
 1080|  3.79k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  3.79k|        let mut parser = Self {
 1082|  3.79k|            iri,
 1083|  3.79k|            base,
 1084|  3.79k|            input: ParserInput {
 1085|  3.79k|                value: iri.chars(),
 1086|  3.79k|                position: 0,
 1087|  3.79k|            },
 1088|  3.79k|            output,
 1089|  3.79k|            output_positions: IriElementsPositions {
 1090|  3.79k|                scheme_end: 0,
 1091|  3.79k|                authority_end: 0,
 1092|  3.79k|                path_end: 0,
 1093|  3.79k|                query_end: 0,
 1094|  3.79k|            },
 1095|  3.79k|            input_scheme_end: 0,
 1096|  3.79k|        };
 1097|  3.79k|        parser.parse_scheme_start()?;
 1098|  3.79k|        Ok(parser.output_positions)
 1099|  3.79k|    }
_RNvXsV_CsbXhpHzO9t4N_5oxiriINtB5_3IriNtNtCs7mhW5aIIbP8_5alloc6string6StringEINtNtCs5I47Pk7y5NW_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsgvi62RmfmLq_5oxrdf:
  871|  3.79k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  3.79k|        if iri.is_absolute() {
  873|  3.79k|            Ok(Self(iri))
  874|       |        } else {
  875|      0|            Err(IriParseError {
  876|      0|                kind: IriParseErrorKind::NoScheme,
  877|      0|            })
  878|       |        }
  879|  3.79k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsgvi62RmfmLq_5oxrdf:
 1141|  3.79k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  3.79k|        if self.input.starts_with('/') {
 1143|  3.79k|            self.input.next();
 1144|  3.79k|            self.output.push('/');
 1145|  3.79k|            self.parse_authority()
 1146|       |        } else {
 1147|      0|            self.output_positions.authority_end = self.output.len() - 1;
 1148|      0|            self.parse_path()
 1149|       |        }
 1150|  3.79k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsgvi62RmfmLq_5oxrdf:
 1231|  3.79k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  45.5k|        loop {
 1234|  45.5k|            let c = self.input.next();
 1235|  45.5k|            match c {
 1236|       |                Some('@') => {
 1237|      0|                    self.output.push('@');
 1238|      0|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  3.79k|                    self.input = ParserInput {
 1242|  3.79k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  3.79k|                        position: self.input_scheme_end + 2,
 1244|  3.79k|                    };
 1245|  3.79k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  3.79k|                    return self.parse_host();
 1247|       |                }
 1248|  41.7k|                Some(c) => {
 1249|  41.7k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  3.79k|    }
_RNvMsp_CsbXhpHzO9t4N_5oxiriINtB5_3IriNtNtCs7mhW5aIIbP8_5alloc6string6StringE5parseCsgvi62RmfmLq_5oxrdf:
  501|  3.79k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|  3.79k|        IriRef::parse(iri)?.try_into()
  503|  3.79k|    }
_RNvMCsbXhpHzO9t4N_5oxiriINtB2_6IriRefNtNtCs7mhW5aIIbP8_5alloc6string6StringE5parseCsgvi62RmfmLq_5oxrdf:
   55|  3.79k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  3.79k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  3.79k|        Ok(Self { iri, positions })
   58|  3.79k|    }
_RNvMCsbXhpHzO9t4N_5oxiriINtB2_6IriRefNtNtCs7mhW5aIIbP8_5alloc6string6StringE11is_absoluteCsgvi62RmfmLq_5oxrdf:
  146|  3.79k|    pub fn is_absolute(&self) -> bool {
  147|  3.79k|        self.positions.scheme_end != 0
  148|  3.79k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsgvi62RmfmLq_5oxrdf:
 1315|  3.79k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  3.79k|        match c {
 1317|       |            None => {
 1318|      0|                self.output_positions.path_end = self.output.len();
 1319|      0|                self.output_positions.query_end = self.output.len();
 1320|      0|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|      0|                self.output_positions.path_end = self.output.len();
 1324|      0|                self.output.push('?');
 1325|      0|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|      0|                self.output_positions.path_end = self.output.len();
 1329|      0|                self.output_positions.query_end = self.output.len();
 1330|      0|                self.output.push('#');
 1331|      0|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|  3.79k|                self.output.push('/');
 1335|  3.79k|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  3.79k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsgvi62RmfmLq_5oxrdf:
 1109|  3.79k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  18.9k|        loop {
 1111|  18.9k|            let c = self.input.next();
 1112|  18.9k|            match c {
 1113|  18.9k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  15.1k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  3.79k|                    self.output.push(':');
 1118|  3.79k|                    self.output_positions.scheme_end = self.output.len();
 1119|  3.79k|                    self.input_scheme_end = self.input.position;
 1120|  3.79k|                    return if self.input.starts_with('/') {
 1121|  3.79k|                        self.input.next();
 1122|  3.79k|                        self.output.push('/');
 1123|  3.79k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|      0|                        self.output_positions.authority_end = self.output.len();
 1126|      0|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|      0|                    self.input = ParserInput {
 1131|      0|                        value: self.iri.chars(),
 1132|      0|                        position: 0,
 1133|      0|                    }; // reset
 1134|      0|                    self.output.clear();
 1135|      0|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  3.79k|    }
_RNvMsp_CsbXhpHzO9t4N_5oxiriINtB5_3IriNtNtCs7mhW5aIIbP8_5alloc6string6StringE10into_innerCsgvi62RmfmLq_5oxrdf:
  568|    182|    pub fn into_inner(self) -> T {
  569|    182|        self.0.into_inner()
  570|    182|    }
_RNvMCsbXhpHzO9t4N_5oxiriINtB2_6IriRefNtNtCs7mhW5aIIbP8_5alloc6string6StringE10into_innerCsgvi62RmfmLq_5oxrdf:
  132|    182|    pub fn into_inner(self) -> T {
  133|    182|        self.iri
  134|    182|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsgvi62RmfmLq_5oxrdf:
 1344|  3.79k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  3.79k|        loop {
 1346|  3.79k|            let c = self.input.next();
 1347|  3.79k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  3.79k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  3.79k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  3.79k|                    } else if c == Some('/') {
 1357|      0|                        self.output.push('/');
 1358|  3.79k|                    }
 1359|       |
 1360|  3.79k|                    if c == Some('?') {
 1361|      0|                        self.output_positions.path_end = self.output.len();
 1362|      0|                        self.output.push('?');
 1363|      0|                        return self.parse_query();
 1364|  3.79k|                    } else if c == Some('#') {
 1365|      0|                        self.output_positions.path_end = self.output.len();
 1366|      0|                        self.output_positions.query_end = self.output.len();
 1367|      0|                        self.output.push('#');
 1368|      0|                        return self.parse_fragment();
 1369|  3.79k|                    } else if c == None {
 1370|  3.79k|                        self.output_positions.path_end = self.output.len();
 1371|  3.79k|                        self.output_positions.query_end = self.output.len();
 1372|  3.79k|                        return Ok(());
 1373|      0|                    }
 1374|       |                }
 1375|      0|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  3.79k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsgvi62RmfmLq_5oxrdf:
 1101|  3.79k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  3.79k|        match self.input.front() {
 1103|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  3.79k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|      0|            _ => self.parse_relative(),
 1106|       |        }
 1107|  3.79k|    }
_RNvMs11_CsbXhpHzO9t4N_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsgvi62RmfmLq_5oxrdf:
 1255|  3.79k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  3.79k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|      0|            let start_position = self.input.position;
 1259|      0|            while let Some(c) = self.input.next() {
 1260|      0|                self.output.push(c);
 1261|      0|                if c == ']' {
 1262|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      0|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      0|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|      0|                }
 1280|       |            }
 1281|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  45.5k|            loop {
 1285|  45.5k|                let c = self.input.next();
 1286|  45.5k|                match c {
 1287|       |                    Some(':') => {
 1288|      0|                        self.output.push(':');
 1289|      0|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  3.79k|                        self.output_positions.authority_end = self.output.len();
 1293|  3.79k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  41.7k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  3.79k|    }
_RNvMs10_CsbXhpHzO9t4N_5oxiriNtB6_11ParserInput5frontCsgvi62RmfmLq_5oxrdf:
 1053|  3.79k|    fn front(&self) -> Option<char> {
 1054|  3.79k|        self.value.clone().next()
 1055|  3.79k|    }
_RNvMs10_CsbXhpHzO9t4N_5oxiriNtB6_11ParserInput11starts_withCsgvi62RmfmLq_5oxrdf:
 1058|  11.3k|    fn starts_with(&self, c: char) -> bool {
 1059|  11.3k|        self.value.as_str().starts_with(c)
 1060|  11.3k|    }
_RNvXs1b_CsbXhpHzO9t4N_5oxiriNtB6_16VoidOutputBufferNtNtCs5I47Pk7y5NW_4core7default7Default7defaultCsgvi62RmfmLq_5oxrdf:
  968|  3.79k|#[derive(Default)]
_RNvXsY_CsbXhpHzO9t4N_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsgvi62RmfmLq_5oxrdf:
  990|  3.79k|    fn truncate(&mut self, new_len: usize) {
  991|  3.79k|        self.len = new_len;
  992|  3.79k|    }
_RNvXsY_CsbXhpHzO9t4N_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsgvi62RmfmLq_5oxrdf:
  995|  15.1k|    fn len(&self) -> usize {
  996|  15.1k|        self.len
  997|  15.1k|    }
_RNvXsY_CsbXhpHzO9t4N_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsgvi62RmfmLq_5oxrdf:
 1000|  7.58k|    fn as_str(&self) -> &str {
 1001|  7.58k|        ""
 1002|  7.58k|    }
_RNvXsY_CsbXhpHzO9t4N_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgvi62RmfmLq_5oxrdf:
  975|   113k|    fn push(&mut self, c: char) {
  976|   113k|        self.len += c.len_utf8();
  977|   113k|    }
_RNvMs10_CsbXhpHzO9t4N_5oxiriNtB6_11ParserInput4nextCsgvi62RmfmLq_5oxrdf:
 1043|   121k|    fn next(&mut self) -> Option<char> {
 1044|   121k|        if let Some(head) = self.value.next() {
 1045|   117k|            self.position += head.len_utf8();
 1046|   117k|            Some(head)
 1047|       |        } else {
 1048|  3.79k|            None
 1049|       |        }
 1050|   121k|    }
_RNvCsbXhpHzO9t4N_5oxiri17is_url_code_point:
 1459|   153k|fn is_url_code_point(c: char) -> bool {
 1460|   153k|    matches!(c,
 1461|   101k|        'a'..='z'
 1462|  11.8k|        | 'A'..='Z'
 1463|  23.7k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  2.51k|        | '\u{A0}'..='\u{D7FF}'
 1484|      1|        | '\u{F900}'..='\u{FDCF}'
 1485|      1|        | '\u{FDF0}'..='\u{FFEF}'
 1486|      0|        | '\u{10000}'..='\u{1FFFD}'
 1487|      0|        | '\u{20000}'..='\u{2FFFD}'
 1488|      0|        | '\u{30000}'..='\u{3FFFD}'
 1489|      0|        | '\u{40000}'..='\u{4FFFD}'
 1490|      0|        | '\u{50000}'..='\u{5FFFD}'
 1491|      0|        | '\u{60000}'..='\u{6FFFD}'
 1492|      0|        | '\u{70000}'..='\u{7FFFD}'
 1493|      0|        | '\u{80000}'..='\u{8FFFD}'
 1494|      0|        | '\u{90000}'..='\u{9FFFD}'
 1495|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1496|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1497|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1498|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1499|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|   153k|}
_RNvXsW_CsbXhpHzO9t4N_5oxiriNtB5_13IriParseErrorNtNtCs5I47Pk7y5NW_4core3fmt7Display3fmt:
  906|  3.28k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  3.28k|        match &self.kind {
  908|     46|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|    181|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|    181|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|     58|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|    261|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|  2.19k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|  2.19k|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|    543|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|    543|                f,
  919|    543|                "Invalid IRI percent encoding '{}'",
  920|    543|                cs.iter().flatten().cloned().collect::<String>()
  921|    543|            ),
  922|       |        }
  923|  3.28k|    }
_RNvCsbXhpHzO9t4N_5oxiri23is_url_query_code_point:
 1503|  11.5k|fn is_url_query_code_point(c: char) -> bool {
 1504|  11.5k|    is_url_code_point(c)
 1505|    364|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  11.5k|}

_RNvXsM_NtCslq3S75jT8dU_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs5I47Pk7y5NW_4core3ops5arith9AddAssign10add_assignCs8iILUDUIFot_11rand_chacha:
   32|   308k|            fn $fn_assign(&mut self, rhs: Self) {
   33|   308k|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|   308k|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|   308k|            }
_RNvXs_NtCslq3S75jT8dU_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs8iILUDUIFot_11rand_chacha:
   42|  77.0k|        fn $fn(self) -> Self {
   43|  77.0k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  77.0k|        }
_RNvXs_NtCslq3S75jT8dU_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs8iILUDUIFot_11rand_chacha:
   42|  77.0k|        fn $fn(self) -> Self {
   43|  77.0k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  77.0k|        }
_RNvMNtCslq3S75jT8dU_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs8iILUDUIFot_11rand_chacha:
   13|   879k|    pub fn new(xs: [W; 2]) -> Self {
   14|   879k|        x2(xs, PhantomData)
   15|   879k|    }
_RNvXsg_NtCslq3S75jT8dU_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs8iILUDUIFot_11rand_chacha:
  201|  77.0k|    fn shuffle_lane_words2301(self) -> Self {
  202|  77.0k|        Self::new([
  203|  77.0k|            self.0[0].shuffle_lane_words2301(),
  204|  77.0k|            self.0[1].shuffle_lane_words2301(),
  205|  77.0k|        ])
  206|  77.0k|    }
_RNvXsg_NtCslq3S75jT8dU_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs8iILUDUIFot_11rand_chacha:
  215|  77.0k|    fn shuffle_lane_words3012(self) -> Self {
  216|  77.0k|        Self::new([
  217|  77.0k|            self.0[0].shuffle_lane_words3012(),
  218|  77.0k|            self.0[1].shuffle_lane_words3012(),
  219|  77.0k|        ])
  220|  77.0k|    }
_RNvXsg_NtCslq3S75jT8dU_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs8iILUDUIFot_11rand_chacha:
  208|  77.0k|    fn shuffle_lane_words1230(self) -> Self {
  209|  77.0k|        Self::new([
  210|  77.0k|            self.0[0].shuffle_lane_words1230(),
  211|  77.0k|            self.0[1].shuffle_lane_words1230(),
  212|  77.0k|        ])
  213|  77.0k|    }
_RNvXs_NtCslq3S75jT8dU_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs8iILUDUIFot_11rand_chacha:
   42|  77.0k|        fn $fn(self) -> Self {
   43|  77.0k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  77.0k|        }
_RNvXs_NtCslq3S75jT8dU_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs8iILUDUIFot_11rand_chacha:
   42|  77.0k|        fn $fn(self) -> Self {
   43|  77.0k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  77.0k|        }
_RNvXsG_NtCslq3S75jT8dU_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs5I47Pk7y5NW_4core3ops3bit6BitXor6bitxorCs8iILUDUIFot_11rand_chacha:
   22|   308k|            fn $fn(self, rhs: Self) -> Self::Output {
   23|   308k|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|   308k|            }

_RINvYINtNtCslq3S75jT8dU_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs8iILUDUIFot_11rand_chacha:
  246|  57.8k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  57.8k|        unsafe { V::unpack(s) }
  248|  57.8k|    }
_RINvYINtNtCslq3S75jT8dU_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs8iILUDUIFot_11rand_chacha:
  259|     52|    fn read_le<V>(self, input: &[u8]) -> V
  260|     52|    where
  261|     52|        V: StoreBytes,
  262|     52|    {
  263|     52|        unsafe { V::unsafe_read_le(input) }
  264|     52|    }
_RINvYINtNtCslq3S75jT8dU_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs8iILUDUIFot_11rand_chacha:
  246|  6.42k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  6.42k|        unsafe { V::unpack(s) }
  248|  6.42k|    }
_RINvYINtNtCslq3S75jT8dU_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs8iILUDUIFot_11rand_chacha:
  251|  6.42k|    fn vec<V, A>(self, a: A) -> V
  252|  6.42k|    where
  253|  6.42k|        V: MultiLane<A>,
  254|  6.42k|    {
  255|  6.42k|        V::from_lanes(a)
  256|  6.42k|    }

_RNvXNtCslq3S75jT8dU_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs8iILUDUIFot_11rand_chacha:
   64|     26|    unsafe fn instance() -> Self {
   65|     26|        SseMachine(PhantomData)
   66|     26|    }
_RNvNtCs8iILUDUIFot_11rand_chacha4guts11refill_wide:
  250|  6.42k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  6.42k|            #[inline(always)]
  252|  6.42k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  6.42k|            use std::arch::x86_64::*;
  254|  6.42k|            #[target_feature(enable = "avx2")]
  255|  6.42k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  6.42k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  6.42k|                _mm256_zeroupper();
  258|  6.42k|                ret
  259|  6.42k|            }
  260|  6.42k|            #[target_feature(enable = "avx")]
  261|  6.42k|            #[target_feature(enable = "sse4.1")]
  262|  6.42k|            #[target_feature(enable = "ssse3")]
  263|  6.42k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  6.42k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  6.42k|                _mm256_zeroupper();
  266|  6.42k|                ret
  267|  6.42k|            }
  268|  6.42k|            #[target_feature(enable = "sse4.1")]
  269|  6.42k|            #[target_feature(enable = "ssse3")]
  270|  6.42k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  6.42k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  6.42k|            }
  273|  6.42k|            #[target_feature(enable = "ssse3")]
  274|  6.42k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  6.42k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  6.42k|            }
  277|  6.42k|            #[target_feature(enable = "sse2")]
  278|  6.42k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  6.42k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  6.42k|            }
  281|  6.42k|            unsafe {
  282|  6.42k|                if is_x86_feature_detected!("avx2") {
  283|  6.42k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  6.42k|        }
_RNvNvNtCs8iILUDUIFot_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  6.42k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  6.42k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  6.42k|                _mm256_zeroupper();
  258|  6.42k|                ret
  259|  6.42k|            }
_RNvXs_NtCslq3S75jT8dU_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs8iILUDUIFot_11rand_chacha:
   92|  6.42k|    unsafe fn instance() -> Self {
   93|  6.42k|        Avx2Machine(PhantomData)
   94|  6.42k|    }
_RNvNvNtCs8iILUDUIFot_11rand_chacha4guts11init_chacha8impl_avx:
  338|     26|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     26|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     26|            }
_RNvNtCs8iILUDUIFot_11rand_chacha4guts11init_chacha:
  333|     26|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|     26|            #[inline(always)]
  335|     26|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|     26|            use std::arch::x86_64::*;
  337|     26|            #[target_feature(enable = "avx")]
  338|     26|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     26|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     26|            }
  341|     26|            #[target_feature(enable = "sse2")]
  342|     26|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|     26|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|     26|            }
  345|     26|            unsafe {
  346|     26|                if is_x86_feature_detected!("avx") {
  347|     26|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|     26|        }
_RNvXs2_NtCslq3S75jT8dU_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs5I47Pk7y5NW_4core7convert4FromAmj4_E4from:
  130|     26|    fn from(u32x4: [u32; 4]) -> Self {
  131|     26|        vec128_storage { u32x4 }
  132|     26|    }

_RNvXsv_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs5I47Pk7y5NW_4core3ops5arith3Add3addCs8iILUDUIFot_11rand_chacha:
 1543|   616k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   616k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   616k|                }
_RNvXs10_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs8iILUDUIFot_11rand_chacha:
   79|     52|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|     52|                assert_eq!(input.len(), 16);
   81|     52|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|     52|            }
_RNvXs6_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs8iILUDUIFot_11rand_chacha:
  331|  6.42k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  6.42k|        unsafe {
  333|  6.42k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  6.42k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  6.42k|            Self::new(x)
  336|  6.42k|        }
  337|  6.42k|    }
_RNvXsf_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs8iILUDUIFot_11rand_chacha:
 1611|  25.6k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  25.6k|            let [a, b] = self.0[0].to_lanes();
 1613|  25.6k|            let [c, d] = self.0[1].to_lanes();
 1614|  25.6k|            [a, b, c, d]
 1615|  25.6k|        }
_RNvXsl_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs8iILUDUIFot_11rand_chacha:
  523|  89.9k|    fn insert(self, v: u32, i: u32) -> Self {
  524|  89.9k|        Self::new(unsafe {
  525|  89.9k|            match i {
  526|  44.9k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  44.9k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  89.9k|    }
_RNvXs6_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs8iILUDUIFot_11rand_chacha:
 1470|   154k|            fn $name(self) -> Self {
 1471|   154k|                Self::new(unsafe {
 1472|   154k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   154k|                })
 1474|   154k|            }
_RNvXsc_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs8iILUDUIFot_11rand_chacha:
 1590|   154k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   154k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   154k|        }
_RNvXsq_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs5I47Pk7y5NW_4core3ops5arith9AddAssign10add_assignCs8iILUDUIFot_11rand_chacha:
 1527|   616k|                fn $assign_fn(&mut self, rhs: Self) {
 1528|   616k|                    *self = self.$bin_fn(rhs);
 1529|   616k|                }
_RNvMsZ_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs8iILUDUIFot_11rand_chacha:
   64|   359k|            fn new(x: __m128i) -> Self {
   65|   359k|                $vec {
   66|   359k|                    x,
   67|   359k|                    s3: PhantomData,
   68|   359k|                    s4: PhantomData,
   69|   359k|                    ni: PhantomData,
   70|   359k|                }
   71|   359k|            }
_RNvXsX_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs8iILUDUIFot_11rand_chacha:
   52|  57.8k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  57.8k|                Self::new(x.sse2)
   54|  57.8k|            }
_RNvXs0_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs8iILUDUIFot_11rand_chacha:
 1402|  12.8k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  12.8k|            Self::new(p.avx)
 1404|  12.8k|        }
_RNvXs2_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs8iILUDUIFot_11rand_chacha:
 1439|  51.3k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  51.3k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  51.3k|        }
_RNvXsr_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs5I47Pk7y5NW_4core3ops3bit6BitXor6bitxorCs8iILUDUIFot_11rand_chacha:
 1543|   616k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   616k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   616k|                }
_RNvXse_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs8iILUDUIFot_11rand_chacha:
 1602|  6.42k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  6.42k|            Self::new([
 1604|  6.42k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  6.42k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  6.42k|            ])
 1607|  6.42k|        }
_RNvXs10_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs8iILUDUIFot_11rand_chacha:
   89|   102k|            fn write_le(self, out: &mut [u8]) {
   90|   102k|                assert_eq!(out.len(), 16);
   91|   102k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   102k|            }
_RNvXs2_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs8iILUDUIFot_11rand_chacha:
 1430|  51.3k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  51.3k|            unsafe {
 1432|  51.3k|                [
 1433|  51.3k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  51.3k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  51.3k|                ]
 1436|  51.3k|            }
 1437|  51.3k|        }
_RNvXs6_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs8iILUDUIFot_11rand_chacha:
 1480|   154k|            fn $name(self) -> Self {
 1481|   154k|                Self::new(unsafe {
 1482|   154k|                    _mm256_or_si256(
 1483|   154k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   154k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   154k|                    )
 1486|   154k|                })
 1487|   154k|            }
_RNvXs1R_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs5I47Pk7y5NW_4core3ops5arith3Add3addCs8iILUDUIFot_11rand_chacha:
   18|   102k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   102k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   102k|            }
_RNvXs6_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs8iILUDUIFot_11rand_chacha:
  323|  25.6k|    fn to_lanes(self) -> [u32; 4] {
  324|  25.6k|        unsafe {
  325|  25.6k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  25.6k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  25.6k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  25.6k|        }
  329|  25.6k|    }
_RNvXs6_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs8iILUDUIFot_11rand_chacha:
 1480|   154k|            fn $name(self) -> Self {
 1481|   154k|                Self::new(unsafe {
 1482|   154k|                    _mm256_or_si256(
 1483|   154k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   154k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   154k|                    )
 1486|   154k|                })
 1487|   154k|            }
_RNvXsc_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs8iILUDUIFot_11rand_chacha:
 1582|   154k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   154k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   154k|        }
_RNvXsl_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs8iILUDUIFot_11rand_chacha:
  519|  25.6k|    fn extract(self, i: u32) -> u32 {
  520|  25.6k|        self.to_lanes()[i as usize]
  521|  25.6k|    }
_RNvXsf_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs8iILUDUIFot_11rand_chacha:
 1617|  25.6k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  25.6k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  25.6k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  25.6k|            Self::new([ab, cd])
 1621|  25.6k|        }
_RNvMNtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs8iILUDUIFot_11rand_chacha:
 1394|  2.37M|        fn new(x: __m256i) -> Self {
 1395|  2.37M|            Self { x, ni: PhantomData }
 1396|  2.37M|        }
_RNvXs6_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs8iILUDUIFot_11rand_chacha:
 1470|   154k|            fn $name(self) -> Self {
 1471|   154k|                Self::new(unsafe {
 1472|   154k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   154k|                })
 1474|   154k|            }
_RNvXsc_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs8iILUDUIFot_11rand_chacha:
 1586|   154k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   154k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   154k|        }
_RNvXsY_NtNtCslq3S75jT8dU_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs5I47Pk7y5NW_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs8iILUDUIFot_11rand_chacha:
   58|  6.47k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  6.47k|                vec128_storage { sse2: x.x }
   60|  6.47k|            }
_RNvXsj_NtNtNtCslq3S75jT8dU_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs5I47Pk7y5NW_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs8iILUDUIFot_11rand_chacha:
 1683|  6.42k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  6.42k|            Self {
 1685|  6.42k|                avx: [
 1686|  6.42k|                    vec256_storage { avx: x.0[0].x },
 1687|  6.42k|                    vec256_storage { avx: x.0[1].x },
 1688|  6.42k|                ],
 1689|  6.42k|            }
 1690|  6.42k|        }

_RINvXs2_NtNtCskPfP93nBOjG_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECshegW5rJ1TR8_5oxttl:
   51|   102k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   102k|        // Use LE; we explicitly generate one value before the next.
   53|   102k|        let x = u128::from(rng.next_u64());
   54|   102k|        let y = u128::from(rng.next_u64());
   55|   102k|        (y << 64) | x
   56|   102k|    }

_RINvCskPfP93nBOjG_4rand6randomoECshegW5rJ1TR8_5oxttl:
  183|   102k|pub fn random<T>() -> T
  184|   102k|where Standard: Distribution<T> {
  185|   102k|    thread_rng().gen()
  186|   102k|}

_RINvYNtNtNtCskPfP93nBOjG_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECshegW5rJ1TR8_5oxttl:
   93|   102k|    fn gen<T>(&mut self) -> T
   94|   102k|    where Standard: Distribution<T> {
   95|   102k|        Standard.sample(self)
   96|   102k|    }

_RNvXs_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngENtB24_7RngCore8next_u64CshegW5rJ1TR8_5oxttl:
  124|   205k|    fn next_u64(&mut self) -> u64 {
  125|   205k|        self.0.next_u64()
  126|   205k|    }
_RNCNvMs3_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngE6reseed0Bd_:
  220|     25|        R::from_rng(&mut self.reseeder).map(|result| {
  221|     25|            self.bytes_until_reseed = self.threshold;
  222|     25|            self.inner = result
  223|     25|        })
_RNvXs2_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  6.42k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  6.42k|        let global_fork_counter = fork::get_fork_counter();
  175|  6.42k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|     25|            return self.reseed_and_generate(results, global_fork_counter);
  180|  6.39k|        }
  181|  6.39k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  6.39k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  6.39k|        self.inner.generate(results);
  184|  6.42k|    }
_RNvMNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvMs3_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvNtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  6.42k|    pub fn get_fork_counter() -> usize {
  308|  6.42k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  6.42k|    }
_RNvMs3_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|     25|    fn reseed_and_generate(
  242|     25|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|     25|    ) {
  244|     25|        #![allow(clippy::if_same_then_else)] // false positive
  245|     25|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|     25|        } else {
  248|     25|            trace!("Reseeding RNG (periodic reseed)");
  249|     25|        }
  250|       |
  251|     25|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|     25|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|     25|        }
  257|     25|        self.fork_counter = global_fork_counter;
  258|     25|
  259|     25|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|     25|        self.inner.generate(results);
  261|     25|    }
_RNCNvNtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvMs3_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngE6reseedBb_:
  219|     25|    fn reseed(&mut self) -> Result<(), Error> {
  220|     25|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|     25|        })
  224|     25|    }
_RNvMs3_NtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core2os5OsRngE9is_forkedBb_:
  226|  6.42k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  6.42k|        // In theory, on 32-bit platforms, it is possible for
  228|  6.42k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  6.42k|        //
  230|  6.42k|        // This check will detect a fork in the normal case where
  231|  6.42k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  6.42k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  6.42k|        //
  234|  6.42k|        // It will still fail to detect a fork if there have been more than
  235|  6.42k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  6.42k|        // enough.
  237|  6.42k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  6.42k|    }

_RNvXs_NtNtCskPfP93nBOjG_4rand4rngs6threadNtB4_9ThreadRngNtCslBq46CqsXHI_9rand_core7RngCore8next_u64:
  109|   205k|    fn next_u64(&mut self) -> u64 {
  110|   205k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   205k|        // creates another mutable reference
  112|   205k|        let rng = unsafe { &mut *self.rng.get() };
  113|   205k|        rng.next_u64()
  114|   205k|    }
_RNCNvNtNtCskPfP93nBOjG_4rand4rngs6thread10thread_rng0B7_:
   89|   102k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCskPfP93nBOjG_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCskPfP93nBOjG_4rand4rngs6thread10thread_rng:
   88|   102k|pub fn thread_rng() -> ThreadRng {
   89|   102k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   102k|    ThreadRng { rng }
   91|   102k|}

_RNvXsm_NtCs8iILUDUIFot_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCslBq46CqsXHI_9rand_core5block12BlockRngCore8generateCskPfP93nBOjG_4rand:
   89|  6.42k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  6.42k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  6.42k|                self.state.refill4($rounds, unsafe {
   92|  6.42k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  6.42k|                });
   94|   411k|                for x in r.as_mut() {
   95|   411k|                    *x = x.to_le();
   96|   411k|                }
   97|  6.42k|            }
_RNvXsn_NtCs8iILUDUIFot_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCslBq46CqsXHI_9rand_core11SeedableRng9from_seedCskPfP93nBOjG_4rand:
  103|     26|            fn from_seed(seed: Self::Seed) -> Self {
  104|     26|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|     26|            }
_RNvXs_NtCs8iILUDUIFot_11rand_chacha6chachaINtB4_7Array64mEINtNtCs5I47Pk7y5NW_4core7convert5AsRefSmE6as_refB6_:
   46|   423k|    fn as_ref(&self) -> &[T] {
   47|   423k|        &self.0
   48|   423k|    }
_RNvXs0_NtCs8iILUDUIFot_11rand_chacha6chachaINtB5_7Array64mEINtNtCs5I47Pk7y5NW_4core7convert5AsMutSmE6as_mutB7_:
   51|  6.42k|    fn as_mut(&mut self) -> &mut [T] {
   52|  6.42k|        &mut self.0
   53|  6.42k|    }
_RNvXNtCs8iILUDUIFot_11rand_chacha6chachaINtB2_7Array64mENtNtCs5I47Pk7y5NW_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs8iILUDUIFot_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|     26|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|     26|        init_chacha(key, nonce)
   74|     26|    }
_RNvMNtCs8iILUDUIFot_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  6.42k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  6.42k|        refill_wide(self, drounds, out)
   86|  6.42k|    }
_RINvNtCs8iILUDUIFot_11rand_chacha4guts16refill_wide_implINtNtCslq3S75jT8dU_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  6.42k|fn refill_wide_impl<Mach: Machine>(
  117|  6.42k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  6.42k|) {
  119|  6.42k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  6.42k|    let mut pos = state.pos64(m);
  121|  6.42k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  6.42k|    pos = pos.wrapping_add(1);
  123|  6.42k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  6.42k|    pos = pos.wrapping_add(1);
  125|  6.42k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  6.42k|    pos = pos.wrapping_add(1);
  127|  6.42k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  6.42k|
  129|  6.42k|    let b = m.unpack(state.b);
  130|  6.42k|    let c = m.unpack(state.c);
  131|  6.42k|    let mut x = State {
  132|  6.42k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  6.42k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  6.42k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  6.42k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  6.42k|    };
  137|  38.5k|    for _ in 0..drounds {
  138|  38.5k|        x = round(x);
  139|  38.5k|        x = undiagonalize(round(diagonalize(x)));
  140|  38.5k|    }
  141|  6.42k|    let mut pos = state.pos64(m);
  142|  6.42k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  6.42k|    pos = pos.wrapping_add(1);
  144|  6.42k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  6.42k|    pos = pos.wrapping_add(1);
  146|  6.42k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  6.42k|    pos = pos.wrapping_add(1);
  148|  6.42k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  6.42k|    pos = pos.wrapping_add(1);
  150|  6.42k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  6.42k|
  152|  6.42k|    let (a, b, c, d) = (
  153|  6.42k|        x.a.to_lanes(),
  154|  6.42k|        x.b.to_lanes(),
  155|  6.42k|        x.c.to_lanes(),
  156|  6.42k|        x.d.to_lanes(),
  157|  6.42k|    );
  158|  6.42k|    let sb = m.unpack(state.b);
  159|  6.42k|    let sc = m.unpack(state.c);
  160|  6.42k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  6.42k|    state.d = d4.into();
  162|  6.42k|    let mut words = out.chunks_exact_mut(16);
  163|  25.6k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  25.6k|        (a + k).write_le(words.next().unwrap());
  165|  25.6k|        (b + sb).write_le(words.next().unwrap());
  166|  25.6k|        (c + sc).write_le(words.next().unwrap());
  167|  25.6k|        (d + sd).write_le(words.next().unwrap());
  168|  25.6k|    }
  169|  6.42k|}
_RNvNtCs8iILUDUIFot_11rand_chacha4guts10read_u32le:
  229|     52|fn read_u32le(xs: &[u8]) -> u32 {
  230|     52|    assert_eq!(xs.len(), 4);
  231|     52|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|     52|}
_RINvMNtCs8iILUDUIFot_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCslq3S75jT8dU_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  12.8k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  12.8k|        let d: M::u32x4 = m.unpack(self.d);
   79|  12.8k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  12.8k|    }
_RINvNtCs8iILUDUIFot_11rand_chacha4guts11diagonalizeINtNtCslq3S75jT8dU_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  38.5k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  38.5k|    x.b = x.b.shuffle_lane_words3012();
   58|  38.5k|    x.c = x.c.shuffle_lane_words2301();
   59|  38.5k|    x.d = x.d.shuffle_lane_words1230();
   60|  38.5k|    x
   61|  38.5k|}
_RINvNvNtCs8iILUDUIFot_11rand_chacha4guts11refill_wide7fn_implINtNtCslq3S75jT8dU_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  6.42k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  6.42k|        refill_wide_impl(m, state, drounds, out);
  174|  6.42k|    }
_RINvNtCs8iILUDUIFot_11rand_chacha4guts13undiagonalizeINtNtCslq3S75jT8dU_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  38.5k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  38.5k|    x.b = x.b.shuffle_lane_words1230();
   65|  38.5k|    x.c = x.c.shuffle_lane_words2301();
   66|  38.5k|    x.d = x.d.shuffle_lane_words3012();
   67|  38.5k|    x
   68|  38.5k|}
_RINvNvNtCs8iILUDUIFot_11rand_chacha4guts11init_chacha7fn_implINtNtCslq3S75jT8dU_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|     26|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|     26|        let ctr_nonce = [
  237|       |            0,
  238|     26|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|     26|                0
  242|       |            },
  243|     26|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|     26|            read_u32le(&nonce[nonce.len() - 4..]),
  245|     26|        ];
  246|     26|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|     26|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|     26|        ChaCha {
  249|     26|            b: key0.into(),
  250|     26|            c: key1.into(),
  251|     26|            d: ctr_nonce.into(),
  252|     26|        }
_RINvNtCs8iILUDUIFot_11rand_chacha4guts5roundINtNtCslq3S75jT8dU_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  77.0k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  77.0k|    x.a += x.b;
   45|  77.0k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  77.0k|    x.c += x.d;
   47|  77.0k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  77.0k|    x.a += x.b;
   49|  77.0k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  77.0k|    x.c += x.d;
   51|  77.0k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  77.0k|    x
   53|  77.0k|}

_RNCNvXs0_NtCslBq46CqsXHI_9rand_core5blockINtB7_8BlockRngINtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CshegW5rJ1TR8_5oxttl:
  198|   205k|        let read_u64 = |results: &[u32], index| {
  199|   205k|            let data = &results[index..=index + 1];
  200|   205k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   205k|        };
_RNvXs0_NtCslBq46CqsXHI_9rand_core5blockINtB5_8BlockRngINtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CshegW5rJ1TR8_5oxttl:
  197|   205k|    fn next_u64(&mut self) -> u64 {
  198|   205k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   205k|        let len = self.results.as_ref().len();
  204|   205k|
  205|   205k|        let index = self.index;
  206|   205k|        if index < len - 1 {
  207|   199k|            self.index += 2;
  208|   199k|            // Read an u64 from the current index
  209|   199k|            read_u64(self.results.as_ref(), index)
  210|  6.42k|        } else if index >= len {
  211|  6.42k|            self.generate_and_set(2);
  212|  6.42k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   205k|    }
_RNvMs_NtCslBq46CqsXHI_9rand_core5blockINtB4_8BlockRngINtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  6.42k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  6.42k|        assert!(index < self.results.as_ref().len());
  176|  6.42k|        self.core.generate(&mut self.results);
  177|  6.42k|        self.index = index;
  178|  6.42k|    }
_RNvMs_NtCslBq46CqsXHI_9rand_core5blockINtB4_8BlockRngINtNtNtNtCskPfP93nBOjG_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtCslBq46CqsXHI_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECskPfP93nBOjG_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs8iILUDUIFot_11rand_chacha6chacha12ChaCha12CoreNtCslBq46CqsXHI_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECskPfP93nBOjG_4rand:
  390|     25|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|     25|        let mut seed = Self::Seed::default();
  392|     25|        rng.try_fill_bytes(seed.as_mut())?;
  393|     25|        Ok(Self::from_seed(seed))
  394|     25|    }
_RNvXs_CslBq46CqsXHI_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCskPfP93nBOjG_4rand:
  441|     25|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|     25|        (**self).try_fill_bytes(dest)
  443|     25|    }

_RNvXs_NtCslBq46CqsXHI_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|     26|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|     26|        getrandom(dest)?;
   69|     26|        Ok(())
   70|     26|    }

_RNvNvNtNtCskPfP93nBOjG_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|   102k|            unsafe fn __getit(
   84|   102k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|   102k|            ) -> $crate::option::Option<&'static $t> {
   86|   102k|                #[thread_local]
   87|   102k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|   102k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|   102k|
   90|   102k|                unsafe {
   91|   102k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|   102k|                    })
  101|   102k|                }
  102|   102k|            }
_RNvNvNtNtCskPfP93nBOjG_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCsjFDTFCBAFbr_2n31__19___libfuzzer_sys_run0B5_:
   12|  1.34M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvXsm_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
   27|  23.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB5_5IdStr6as_strCshegW5rJ1TR8_5oxttl:
  266|   102k|    fn as_str(&self) -> &str {
  267|   102k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  268|   102k|        str::from_utf8(&self.0[..len]).unwrap()
  269|   102k|    }
_RNvXsf_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
   24|  23.0k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsJ_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
  254|  23.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvNtCsgvi62RmfmLq_5oxrdf10blank_node13to_integer_idCshegW5rJ1TR8_5oxttl:
  332|  1.03k|fn to_integer_id(id: &str) -> Option<u128> {
  333|  1.03k|    let digits = id.as_bytes();
  334|  1.03k|    let mut value: u128 = 0;
  335|  1.03k|    if let None | Some(b'0') = digits.first() {
  336|    457|        return None; // No empty string or leading zeros
  337|    573|    }
  338|  1.73k|    for digit in digits {
  339|  1.34k|        value = value.checked_mul(16)?.checked_add(
  340|  1.32k|            match *digit {
  341|  1.21k|                b'0'..=b'9' => digit - b'0',
  342|    683|                b'a'..=b'f' => digit - b'a' + 10,
  343|    167|                _ => return None,
  344|       |            }
  345|  1.15k|            .into(),
  346|      0|        )?;
  347|       |    }
  348|    388|    Some(value)
  349|  1.03k|}
_RNvMNtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCshegW5rJ1TR8_5oxttl:
   66|    388|    pub fn new_from_unique_id(id: u128) -> Self {
   67|    388|        Self(BlankNodeContent::Anonymous {
   68|    388|            id,
   69|    388|            str: IdStr::new(id),
   70|    388|        })
   71|    388|    }
_RNvMs7_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB5_5IdStr3newCshegW5rJ1TR8_5oxttl:
  259|   103k|    fn new(id: u128) -> Self {
  260|   103k|        let mut str = [0; 32];
  261|   103k|        write!(&mut str[..], "{id:x}").unwrap();
  262|   103k|        Self(str)
  263|   103k|    }
_RNvXs0_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs5I47Pk7y5NW_4core7default7Default7defaultCshegW5rJ1TR8_5oxttl:
  113|  41.1k|    fn default() -> Self {
  114|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  115|   102k|        loop {
  116|   102k|            let id = random();
  117|   102k|            let str = IdStr::new(id);
  118|   102k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  119|  41.1k|                return Self(BlankNodeContent::Anonymous { id, str });
  120|  61.5k|            }
  121|       |        }
  122|  41.1k|    }
_RINvMNtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECshegW5rJ1TR8_5oxttl:
   53|  1.03k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   54|  1.03k|        let id = id.into();
   55|  1.03k|        if let Some(numerical_id) = to_integer_id(&id) {
   56|    388|            Self::new_from_unique_id(numerical_id)
   57|       |        } else {
   58|    642|            Self(BlankNodeContent::Named(id))
   59|       |        }
   60|  1.03k|    }
_RNCNvMs7_NtCsgvi62RmfmLq_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  267|  3.28M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCsgvi62RmfmLq_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs7mhW5aIIbP8_5alloc6string6StringINtCsbXhpHzO9t4N_5oxiri3IriB13_EECshegW5rJ1TR8_5oxttl:
   56|      2|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|      2|        let value = value.into();
   58|      2|        let datatype = datatype.into();
   59|      2|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|      2|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|      2|    }
_RNvXsF_NtCsgvi62RmfmLq_5oxrdf7literalNtB5_7LiteralNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
   37|  3.99k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsgvi62RmfmLq_5oxrdf7literalNtB5_14LiteralContentNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
   40|  3.99k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsgvi62RmfmLq_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   56|  2.41k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   57|  2.41k|        let value = value.into();
   58|  2.41k|        let datatype = datatype.into();
   59|  2.41k|        Self(if datatype == xsd::STRING {
   60|      0|            LiteralContent::String(value)
   61|       |        } else {
   62|  2.41k|            LiteralContent::TypedLiteral { value, datatype }
   63|       |        })
   64|  2.41k|    }
_RINvMNtCsgvi62RmfmLq_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs7mhW5aIIbP8_5alloc6string6StringB1n_EB5_:
   88|    145|    pub fn new_language_tagged_literal_unchecked(
   89|    145|        value: impl Into<String>,
   90|    145|        language: impl Into<String>,
   91|    145|    ) -> Self {
   92|    145|        Self(LiteralContent::LanguageTaggedString {
   93|    145|            value: value.into(),
   94|    145|            language: language.into(),
   95|    145|        })
   96|    145|    }
_RINvMNtCsgvi62RmfmLq_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs7mhW5aIIbP8_5alloc6string6StringEB5_:
   50|  7.11k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   51|  7.11k|        Self(LiteralContent::String(value.into()))
   52|  7.11k|    }

_RNvMs4_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCshegW5rJ1TR8_5oxttl:
  133|      2|    pub const fn as_str(self) -> &'a str {
  134|      2|        self.iri
  135|      2|    }
_RNvMNtCsgvi62RmfmLq_5oxrdf10named_nodeNtB2_9NamedNode6as_strCshegW5rJ1TR8_5oxttl:
   44|      2|    pub fn as_str(&self) -> &str {
   45|      2|        self.iri.as_str()
   46|      2|    }
_RNvMs4_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCshegW5rJ1TR8_5oxttl:
  138|  4.43k|    pub fn into_owned(self) -> NamedNode {
  139|  4.43k|        NamedNode::new_unchecked(self.iri)
  140|  4.43k|    }
_RNvXs9_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs5I47Pk7y5NW_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqCshegW5rJ1TR8_5oxttl:
  173|      2|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|      2|        self.as_str() == other.as_str()
  175|      2|    }
_RNvXsp_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
   17|    380|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsg_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs5I47Pk7y5NW_4core7convert4FromINtCsbXhpHzO9t4N_5oxiri3IriNtNtCs7mhW5aIIbP8_5alloc6string6StringEE4fromCshegW5rJ1TR8_5oxttl:
  222|    182|    fn from(iri: Iri<String>) -> Self {
  223|    182|        Self {
  224|    182|            iri: iri.into_inner(),
  225|    182|        }
  226|    182|    }
_RINvMNtCsgvi62RmfmLq_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  6.96k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  6.96k|        Self { iri: iri.into() }
   41|  6.96k|    }
_RNvXs9_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs5I47Pk7y5NW_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  2.41k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  2.41k|        self.as_str() == other.as_str()
  175|  2.41k|    }
_RNvXs6_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs5I47Pk7y5NW_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  2.41k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  2.41k|        node.into_owned()
  154|  2.41k|    }
_RNvMs4_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  2.41k|    pub const fn as_str(self) -> &'a str {
  134|  2.41k|        self.iri
  135|  2.41k|    }
_RNvMNtCsgvi62RmfmLq_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  2.41k|    pub fn as_str(&self) -> &str {
   45|  2.41k|        self.iri.as_str()
   46|  2.41k|    }
_RNvMs4_NtCsgvi62RmfmLq_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  2.41k|    pub fn into_owned(self) -> NamedNode {
  139|  2.41k|        NamedNode::new_unchecked(self.iri)
  140|  2.41k|    }

_RNvXs1c_NtCsgvi62RmfmLq_5oxrdf6tripleNtB6_9GraphNameINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCshegW5rJ1TR8_5oxttl:
  913|  1.77k|    fn from(node: BlankNode) -> Self {
  914|  1.77k|        Self::BlankNode(node)
  915|  1.77k|    }

_RNvXsh_NtCsgvi62RmfmLq_5oxrdf8variableNtB5_8VariableNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneCshegW5rJ1TR8_5oxttl:
   17|  3.06k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsgvi62RmfmLq_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCs7mhW5aIIbP8_5alloc6borrow3CoweEECshegW5rJ1TR8_5oxttl:
   39|  3.87k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  3.87k|        Self { name: name.into() }
   41|  3.87k|    }

_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer9parse_iris_0B8_:
  223|  3.28k|        .map_err(|e| (position, e.to_string()))?;
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  856|  1.87k|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  309|  4.23k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|  4.23k|                prefix: pn_prefix,
  311|  4.23k|                local,
  312|  4.23k|                might_be_invalid_iri,
  313|  4.23k|            }),
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  776|    696|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|    696|            (
  778|    696|                position..position + len + 2,
  779|    696|                format!(
  780|    696|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|    696|                ),
  782|    696|            )
  783|    696|        })?;
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  212|  1.14k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|  1.14k|            (
  214|  1.14k|                position.clone(),
  215|  1.14k|                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|  1.14k|            )
  217|  1.14k|        })?;
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  551|  1.46k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  784|    268|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|    268|            (
  786|    268|                position..position + len +2,
  787|    268|                format!(
  788|    268|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|    268|                ),
  790|    268|            )
  791|    268|        })?;
_RNCNvNtCshegW5rJ1TR8_5oxttl5lexer13str_from_utf80B5_:
  928|  1.35k|    str::from_utf8(data).map_err(|e| {
  929|  1.35k|        (
  930|  1.35k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|  1.35k|            format!("Invalid UTF-8: {e}"),
  932|  1.35k|        )
  933|  1.35k|            .into()
  934|  1.35k|    })
_RNCNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  325|  12.9k|            result.and_then(|(name, _)| {
  326|  12.9k|                if name.is_empty() {
  327|  7.69k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|  5.27k|                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  12.9k|            }),
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  556|  20.9k|    fn recognize_string(
  557|  20.9k|        data: &[u8],
  558|  20.9k|        delimiter: u8,
  559|  20.9k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  560|  20.9k|        // [22] 	STRING_LITERAL_QUOTE 	::= 	'"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  561|  20.9k|        // [23] 	STRING_LITERAL_SINGLE_QUOTE 	::= 	"'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  562|  20.9k|        let mut string = String::new();
  563|  20.9k|        let mut i = 1;
  564|       |        loop {
  565|  24.6k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  566|  17.6k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  567|  17.3k|                Ok(s) => string.push_str(s),
  568|    298|                Err(e) => return Some((end, Err(e))),
  569|       |            };
  570|  17.3k|            i += end;
  571|  17.3k|            match data[i] {
  572|  17.3k|                c if c == delimiter => {
  573|  2.17k|                    return Some((i + 1, Ok(N3Token::String(string))));
  574|       |                }
  575|       |                b'\\' => {
  576|  15.1k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  577|  13.4k|                    i += additional + 1;
  578|  13.4k|                    match c {
  579|  3.75k|                        Ok(c) => {
  580|  3.75k|                            string.push(c);
  581|  3.75k|                        }
  582|  9.71k|                        Err(e) => {
  583|       |                            // We read until the end of string char
  584|  9.71k|                            let end = memchr(delimiter, &data[i..])?;
  585|    235|                            return Some((i + end + 1, Err(e)));
  586|       |                        }
  587|       |                    }
  588|       |                }
  589|      0|                _ => unreachable!(),
  590|       |            }
  591|       |        }
  592|  20.9k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  892|   641k|    fn is_possible_pn_chars(c: char) -> bool {
  893|   641k|        Self::is_possible_pn_chars_u(c)
  894|   103k|            || matches!(c,
  895|  49.7k|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  896|   641k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  477|  8.04k|    fn recognize_blank_node_label(
  478|  8.04k|        data: &[u8],
  479|  8.04k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  480|  8.04k|        // [141s] 	BLANK_NODE_LABEL 	::= 	'_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  481|  8.04k|        let mut i = 2;
  482|       |        loop {
  483|  28.3k|            match Self::recognize_unicode_char(&data[i..], i)? {
  484|  21.5k|                Ok((c, consumed)) => {
  485|  21.5k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  486|  16.7k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  487|  16.4k|                    {
  488|  16.4k|                        // Ok
  489|  16.4k|                    } else if i > 2 && c == '.' {
  490|  3.93k|                        if data[i - 1] == b'.' {
  491|     35|                            i -= 1;
  492|     35|                            return Some((
  493|     35|                                i,
  494|     35|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  495|     35|                            ));
  496|  3.89k|                        }
  497|  1.11k|                    } else if i == 0 {
  498|      0|                        return Some((
  499|      0|                            i,
  500|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  501|      0|                        ));
  502|  1.11k|                    } else if data[i - 1] == b'.' {
  503|    329|                        i -= 1;
  504|    329|                        return Some((
  505|    329|                            i,
  506|    329|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  507|    329|                        ));
  508|       |                    } else {
  509|    783|                        return Some((
  510|    783|                            i,
  511|    783|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  512|    783|                        ));
  513|       |                    }
  514|  20.3k|                    i += consumed;
  515|       |                }
  516|    126|                Err(e) => return Some((e.location.end, Err(e))),
  517|       |            }
  518|       |        }
  519|  8.04k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  632|  44.6k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  633|  44.6k|        // [19] 	INTEGER 	::= 	[+-]? [0-9]+
  634|  44.6k|        // [20] 	DECIMAL 	::= 	[+-]? [0-9]* '.' [0-9]+
  635|  44.6k|        // [21] 	DOUBLE 	::= 	[+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  636|  44.6k|        // [154s] 	EXPONENT 	::= 	[eE] [+-]? [0-9]+
  637|  44.6k|        let mut i = 0;
  638|  44.6k|        let c = *data.first()?;
  639|  44.6k|        if matches!(c, b'+' | b'-') {
  640|  17.3k|            i += 1;
  641|  27.3k|        }
  642|       |        // We read the digits before .
  643|  44.6k|        let mut count_before: usize = 0;
  644|       |        loop {
  645|  93.5k|            let c = *data.get(i)?;
  646|  80.2k|            if c.is_ascii_digit() {
  647|  48.8k|                i += 1;
  648|  48.8k|                count_before += 1;
  649|  48.8k|            } else {
  650|  31.3k|                break;
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // We read the digits after .
  655|       |        #[allow(clippy::if_then_some_else_none)]
  656|  31.3k|        let count_after = if *data.get(i)? == b'.' {
  657|  5.27k|            i += 1;
  658|  5.27k|
  659|  5.27k|            let mut count_after = 0;
  660|       |            loop {
  661|  16.0k|                let c = *data.get(i)?;
  662|  12.7k|                if c.is_ascii_digit() {
  663|  10.7k|                    i += 1;
  664|  10.7k|                    count_after += 1;
  665|  10.7k|                } else {
  666|  2.01k|                    break;
  667|  2.01k|                }
  668|  2.01k|            }
  669|  2.01k|            Some(count_after)
  670|       |        } else {
  671|  26.1k|            None
  672|       |        };
  673|       |
  674|       |        // End
  675|  28.1k|        let c = *data.get(i)?;
  676|  28.1k|        if matches!(c, b'e' | b'E') {
  677|  4.87k|            i += 1;
  678|       |
  679|  4.87k|            let c = *data.get(i)?;
  680|  2.89k|            if matches!(c, b'+' | b'-') {
  681|    806|                i += 1;
  682|  2.09k|            }
  683|       |
  684|  2.89k|            let mut found = false;
  685|       |            loop {
  686|  5.82k|                let c = *data.get(i)?;
  687|  3.52k|                if c.is_ascii_digit() {
  688|  2.92k|                    i += 1;
  689|  2.92k|                    found = true;
  690|  2.92k|                } else {
  691|    607|                    break;
  692|    607|                }
  693|    607|            }
  694|    607|            Some((
  695|    607|                i,
  696|    607|                if !found {
  697|    399|                    Err((0..i, "A double exponent cannot be empty").into())
  698|    208|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  699|     35|                    Err((0..i, "A double should not be empty").into())
  700|       |                } else {
  701|    173|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  702|       |                },
  703|       |            ))
  704|  23.2k|        } else if let Some(count_after) = count_after {
  705|  1.46k|            if count_after == 0 {
  706|       |                // We do not consume the '.' after all
  707|    635|                i -= 1;
  708|    635|                Some((
  709|    635|                    i,
  710|    635|                    if count_before == 0 {
  711|    162|                        Err((0..i, "An integer should not be empty").into())
  712|       |                    } else {
  713|    473|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  714|       |                    },
  715|       |                ))
  716|       |            } else {
  717|    833|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  718|       |            }
  719|       |        } else {
  720|       |            Some((
  721|  21.7k|                i,
  722|  21.7k|                if count_before == 0 {
  723|  12.7k|                    Err((0..i, "An integer should not be empty").into())
  724|       |                } else {
  725|  9.07k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  726|       |                },
  727|       |            ))
  728|       |        }
  729|  44.6k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  176|  77.9k|    fn recognize_iri(
  177|  77.9k|        data: &[u8],
  178|  77.9k|        options: &N3LexerOptions,
  179|  77.9k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  180|  77.9k|        // [18] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  181|  77.9k|        let mut string = Vec::new();
  182|  77.9k|        let mut i = 1;
  183|       |        loop {
  184|  79.6k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  185|  17.5k|            string.extend_from_slice(&data[i..i + end]);
  186|  17.5k|            i += end;
  187|  17.5k|            match data[i] {
  188|       |                b'>' => {
  189|  9.63k|                    return Some((i + 1, Self::parse_iri(string, 0..=i, options)));
  190|       |                }
  191|       |                b'\\' => {
  192|  7.88k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  193|  2.25k|                    i += additional + 1;
  194|  2.25k|                    match c {
  195|  1.76k|                        Ok(c) => {
  196|  1.76k|                            let mut buf = [0; 4];
  197|  1.76k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  198|  1.76k|                        }
  199|    494|                        Err(e) => return Some((i, Err(e))),
  200|       |                    }
  201|       |                }
  202|      0|                _ => unreachable!(),
  203|       |            }
  204|       |        }
  205|  77.9k|    }
_RNvNtCshegW5rJ1TR8_5oxttl5lexer18resolve_local_name:
  905|    919|pub fn resolve_local_name(
  906|    919|    prefix: &str,
  907|    919|    local: &str,
  908|    919|    might_be_invalid_iri: bool,
  909|    919|    prefixes: &HashMap<String, Iri<String>>,
  910|    919|) -> Result<NamedNode, String> {
  911|    919|    if let Some(start) = prefixes.get(prefix) {
  912|      0|        let iri = format!("{start}{local}");
  913|      0|        if might_be_invalid_iri || start.path().is_empty() {
  914|       |            // We validate again. We always validate if the local part might be the IRI authority.
  915|      0|            if let Err(e) = Iri::parse(iri.as_str()) {
  916|      0|                return Err(format!(
  917|      0|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  918|      0|                ));
  919|      0|            }
  920|      0|        }
  921|      0|        Ok(NamedNode::new_unchecked(iri))
  922|       |    } else {
  923|    919|        Err(format!("The prefix {prefix}: has not been declared"))
  924|       |    }
  925|    919|}
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  545|  3.75k|    fn parse_lang_tag(
  546|  3.75k|        lang_tag: &[u8],
  547|  3.75k|        position: Range<usize>,
  548|  3.75k|    ) -> Result<N3Token<'_>, TokenRecognizerError> {
  549|  3.75k|        Ok(N3Token::LangTag(
  550|  3.75k|            LanguageTag::parse(str_from_utf8(lang_tag, position.clone())?)
  551|  3.75k|                .map_err(|e| (position.clone(), e.to_string()))?
  552|  2.28k|                .into_inner(),
  553|       |        ))
  554|  3.75k|    }
_RNvXNtCshegW5rJ1TR8_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   54|   821k|    fn recognize_next_token<'a>(
   55|   821k|        &mut self,
   56|   821k|        data: &'a [u8],
   57|   821k|        is_ending: bool,
   58|   821k|        options: &N3LexerOptions,
   59|   821k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   60|   821k|        match *data.first()? {
   61|  80.6k|            b'<' => match *data.get(1)? {
   62|  1.10k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   63|  9.15k|                b'=' if self.mode == N3LexerMode::N3 => {
   64|  9.15k|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   65|  1.13k|                        Some(if let Ok(result) = result {
   66|    564|                            (consumed, Ok(result))
   67|       |                        } else {
   68|    571|                            (2, Ok(N3Token::Punctuation("<=")))
   69|       |                        })
   70|  8.02k|                    } else if is_ending {
   71|    129|                        Some((2, Ok(N3Token::Punctuation("<="))))
   72|       |                    } else {
   73|  7.89k|                        None
   74|       |                    }
   75|       |                }
   76|  5.89k|                b'-' if self.mode == N3LexerMode::N3 => {
   77|  5.89k|                    if let Some((consumed, result)) = Self::recognize_iri(data, options) {
   78|    251|                        Some(if let Ok(result) = result {
   79|     39|                            (consumed, Ok(result))
   80|       |                        } else {
   81|    212|                            (2, Ok(N3Token::Punctuation("<-")))
   82|       |                        })
   83|  5.63k|                    } else if is_ending {
   84|    321|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   85|       |                    } else {
   86|  5.31k|                        None
   87|       |                    }
   88|       |                }
   89|  62.8k|                _ => Self::recognize_iri(data, options),
   90|       |            },
   91|       |            b'>' => {
   92|  15.6k|                if *data.get(1)? == b'>' {
   93|  6.86k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   94|       |                } else {
   95|  5.12k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   96|       |                }
   97|       |            }
   98|  16.2k|            b'_' => match data.get(1)? {
   99|  8.04k|                b':' => Self::recognize_blank_node_label(data),
  100|  7.14k|                c => Some((
  101|  7.14k|                    1,
  102|  7.14k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  103|  7.14k|                )),
  104|       |            },
  105|       |            b'"' => {
  106|  11.7k|                if self.mode != N3LexerMode::NTriples
  107|  11.7k|                    && *data.get(1)? == b'"'
  108|  9.62k|                    && *data.get(2)? == b'"'
  109|       |                {
  110|  7.99k|                    Self::recognize_long_string(data, b'"')
  111|       |                } else {
  112|  2.20k|                    Self::recognize_string(data, b'"')
  113|       |                }
  114|       |            }
  115|  32.6k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  116|  32.6k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  117|  12.3k|                    Self::recognize_long_string(data, b'\'')
  118|       |                } else {
  119|  18.7k|                    Self::recognize_string(data, b'\'')
  120|       |                }
  121|       |            }
  122|  33.4k|            b'@' => Self::recognize_lang_tag(data),
  123|  40.3k|            b'.' => match data.get(1) {
  124|  11.0k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  125|  30.0k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  126|  8.40k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  127|       |            },
  128|       |            b'^' => {
  129|  4.55k|                if *data.get(1)? == b'^' {
  130|  3.29k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  131|       |                } else {
  132|    947|                    Some((1, Ok(N3Token::Punctuation("^"))))
  133|       |                }
  134|       |            }
  135|  23.4k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  136|  2.13k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  137|  25.3k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  138|  6.64k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  139|       |            b'{' => {
  140|  23.5k|                if *data.get(1)? == b'|' {
  141|     75|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  142|       |                } else {
  143|  21.1k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  144|       |                }
  145|       |            }
  146|  8.66k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  147|  4.44k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  148|  5.41k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  149|  3.55k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  150|       |            b'|' => {
  151|  1.96k|                if *data.get(1)? == b'}' {
  152|     68|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  153|       |                } else {
  154|  1.55k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  155|       |                }
  156|       |            }
  157|       |            b'=' => {
  158|  7.86k|                if *data.get(1)? == b'>' {
  159|    365|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  160|       |                } else {
  161|  6.66k|                    Some((1, Ok(N3Token::Punctuation("="))))
  162|       |                }
  163|       |            }
  164|   179k|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  165|  28.2k|            b'?' => Self::recognize_variable(data, is_ending),
  166|   298k|            _ => Self::recognize_pname_or_keyword(data, is_ending),
  167|       |        }
  168|   821k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  207|  9.63k|    fn parse_iri(
  208|  9.63k|        iri: Vec<u8>,
  209|  9.63k|        position: RangeInclusive<usize>,
  210|  9.63k|        options: &N3LexerOptions,
  211|  9.63k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  212|  9.63k|        let iri = String::from_utf8(iri).map_err(|e| {
  213|       |            (
  214|       |                position.clone(),
  215|       |                format!("The IRI contains invalid UTF-8 characters: {e}"),
  216|       |            )
  217|  9.63k|        })?;
  218|  8.48k|        let iri = if let Some(base_iri) = options.base_iri.as_ref() {
  219|  8.48k|            base_iri.resolve(&iri)
  220|       |        } else {
  221|      0|            Iri::parse(iri)
  222|       |        }
  223|  8.48k|        .map_err(|e| (position, e.to_string()))?;
  224|  5.20k|        Ok(N3Token::IriRef(iri))
  225|  9.63k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  766|  7.27k|    fn recognize_hex_char(
  767|  7.27k|        data: &[u8],
  768|  7.27k|        len: usize,
  769|  7.27k|        escape_char: char,
  770|  7.27k|        position: usize,
  771|  7.27k|    ) -> Result<Option<char>, TokenRecognizerError> {
  772|  7.27k|        if data.len() < len {
  773|  3.74k|            return Ok(None);
  774|  3.53k|        }
  775|  3.53k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  776|  3.03k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  777|       |            (
  778|       |                position..position + len + 2,
  779|       |                format!(
  780|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  781|       |                ),
  782|       |            )
  783|  3.03k|        })?;
  784|  2.33k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  785|       |            (
  786|       |                position..position + len +2,
  787|       |                format!(
  788|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  789|       |                ),
  790|       |            )
  791|  2.33k|        })?;
  792|  2.06k|        Ok(Some(c))
  793|  7.27k|    }
_RNvXs8_NtCshegW5rJ1TR8_5oxttl5lexerNtB5_11N3LexerModeNtNtCs5I47Pk7y5NW_4core3cmp9PartialEq2eqB7_:
   31|  59.3k|#[derive(Eq, PartialEq)]
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  887|   679k|    fn is_possible_pn_chars_u(c: char) -> bool {
  888|   679k|        Self::is_possible_pn_chars_base(c) || c == '_'
  889|   679k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  335|  47.3k|    fn recognize_optional_pn_local(
  336|  47.3k|        data: &[u8],
  337|  47.3k|        is_ending: bool,
  338|  47.3k|    ) -> Option<(usize, Result<(Cow<'_, str>, bool), TokenRecognizerError>)> {
  339|  47.3k|        // [168s] 	PN_LOCAL 	::= 	(PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  340|  47.3k|        let mut i = 0;
  341|  47.3k|        let mut buffer = None; // Buffer if there are some escaped characters
  342|  47.3k|        let mut position_that_is_already_in_buffer = 0;
  343|  47.3k|        let mut might_be_invalid_iri = false;
  344|       |        loop {
  345|   272k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  346|   245k|                match r {
  347|   244k|                    Ok((c, consumed)) => {
  348|   244k|                        if c == '%' {
  349|  2.10k|                            i += 1;
  350|  2.10k|                            let a = char::from(*data.get(i)?);
  351|  1.17k|                            i += 1;
  352|  1.17k|                            let b = char::from(*data.get(i)?);
  353|    694|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  354|    155|                                return Some((i + 1, Err((
  355|    155|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  356|    155|                                ).into())));
  357|    539|                            }
  358|    539|                            i += 1;
  359|   242k|                        } else if c == '\\' {
  360|  8.09k|                            i += 1;
  361|  8.09k|                            let a = char::from(*data.get(i)?);
  362|  1.26k|                            if matches!(
  363|  7.05k|                                a,
  364|       |                                '_' | '~'
  365|       |                                    | '.'
  366|       |                                    | '-'
  367|       |                                    | '!'
  368|       |                                    | '$'
  369|       |                                    | '&'
  370|       |                                    | '\''
  371|       |                                    | '('
  372|       |                                    | ')'
  373|       |                                    | '*'
  374|       |                                    | '+'
  375|       |                                    | ','
  376|       |                                    | ';'
  377|       |                                    | '='
  378|  5.78k|                            ) {
  379|  5.78k|                                // ok to escape
  380|  5.78k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  381|  1.21k|                                // ok to escape but requires IRI validation
  382|  1.21k|                                might_be_invalid_iri = true;
  383|  1.21k|                            } else {
  384|     54|                                return Some((i + 1, Err((
  385|     54|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  386|     54|                                ).into())));
  387|       |                            }
  388|  6.99k|                            let buffer = buffer.get_or_insert_with(String::new);
  389|  6.99k|                            // We add the missing bytes
  390|  6.99k|                            if i - position_that_is_already_in_buffer > 1 {
  391|  4.83k|                                buffer.push_str(
  392|  4.83k|                                    match str_from_utf8(
  393|  4.83k|                                        &data[position_that_is_already_in_buffer..i - 1],
  394|  4.83k|                                        position_that_is_already_in_buffer..i - 1,
  395|  4.83k|                                    ) {
  396|  4.83k|                                        Ok(data) => data,
  397|      0|                                        Err(e) => return Some((i, Err(e))),
  398|       |                                    },
  399|       |                                )
  400|  2.16k|                            }
  401|  6.99k|                            buffer.push(a);
  402|  6.99k|                            i += 1;
  403|  6.99k|                            position_that_is_already_in_buffer = i;
  404|   234k|                        } else if i == 0 {
  405|  32.2k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  406|       |                            {
  407|  8.82k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  408|  23.4k|                            }
  409|  23.4k|                            might_be_invalid_iri |=
  410|  23.4k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  411|  23.4k|                            i += consumed;
  412|   202k|                        } else if Self::is_possible_pn_chars(c) || c == ':' || c == '.' {
  413|       |                            might_be_invalid_iri |=
  414|   193k|                                Self::is_possible_pn_chars_base_but_not_valid_iri(c) || c == ':';
  415|   193k|                            i += consumed;
  416|       |                        } else {
  417|  8.18k|                            let buffer = if let Some(mut buffer) = buffer {
  418|    619|                                buffer.push_str(
  419|    619|                                    match str_from_utf8(
  420|    619|                                        &data[position_that_is_already_in_buffer..i],
  421|    619|                                        position_that_is_already_in_buffer..i,
  422|    619|                                    ) {
  423|    619|                                        Ok(data) => data,
  424|      0|                                        Err(e) => return Some((i, Err(e))),
  425|       |                                    },
  426|       |                                );
  427|       |                                // We do not include the last dot
  428|  1.44k|                                while buffer.ends_with('.') {
  429|    830|                                    buffer.pop();
  430|    830|                                    i -= 1;
  431|    830|                                }
  432|    619|                                Cow::Owned(buffer)
  433|       |                            } else {
  434|  7.56k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  435|  7.56k|                                    Ok(data) => data,
  436|      0|                                    Err(e) => return Some((i, Err(e))),
  437|       |                                };
  438|       |                                // We do not include the last dot
  439|  8.87k|                                while let Some(d) = data.strip_suffix('.') {
  440|  1.31k|                                    data = d;
  441|  1.31k|                                    i -= 1;
  442|  1.31k|                                }
  443|  7.56k|                                Cow::Borrowed(data)
  444|       |                            };
  445|  8.18k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  446|       |                        }
  447|       |                    }
  448|  1.13k|                    Err(e) => return Some((e.location.end, Err(e))),
  449|       |                }
  450|  26.5k|            } else if is_ending {
  451|    196|                let buffer = if let Some(mut buffer) = buffer {
  452|       |                    // We do not include the last dot
  453|    141|                    while buffer.ends_with('.') {
  454|     90|                        buffer.pop();
  455|     90|                        i -= 1;
  456|     90|                    }
  457|     51|                    Cow::Owned(buffer)
  458|       |                } else {
  459|    145|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  460|    145|                        Ok(data) => data,
  461|      0|                        Err(e) => return Some((i, Err(e))),
  462|       |                    };
  463|       |                    // We do not include the last dot
  464|    243|                    while let Some(d) = data.strip_suffix('.') {
  465|     98|                        data = d;
  466|     98|                        i -= 1;
  467|     98|                    }
  468|    145|                    Cow::Borrowed(data)
  469|       |                };
  470|    196|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |            } else {
  472|  26.3k|                return None;
  473|       |            }
  474|       |        }
  475|  47.3k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  594|  20.3k|    fn recognize_long_string(
  595|  20.3k|        data: &[u8],
  596|  20.3k|        delimiter: u8,
  597|  20.3k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  598|  20.3k|        // [24] 	STRING_LITERAL_LONG_SINGLE_QUOTE 	::= 	"'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  599|  20.3k|        // [25] 	STRING_LITERAL_LONG_QUOTE 	::= 	'"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  600|  20.3k|        let mut string = String::new();
  601|  20.3k|        let mut i = 3;
  602|       |        loop {
  603|  39.7k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  604|  32.1k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  605|  31.5k|                Ok(s) => string.push_str(s),
  606|    550|                Err(e) => return Some((end, Err(e))),
  607|       |            };
  608|  31.5k|            i += end;
  609|  31.5k|            match data[i] {
  610|  31.5k|                c if c == delimiter => {
  611|  25.2k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  612|  9.37k|                        return Some((i + 3, Ok(N3Token::String(string))));
  613|  13.4k|                    }
  614|  13.4k|                    i += 1;
  615|  13.4k|                    string.push(char::from(delimiter));
  616|       |                }
  617|       |                b'\\' => {
  618|  6.33k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  619|  6.02k|                    i += additional + 1;
  620|  6.02k|                    match c {
  621|  5.88k|                        Ok(c) => {
  622|  5.88k|                            string.push(c);
  623|  5.88k|                        }
  624|    140|                        Err(e) => return Some((i, Err(e))),
  625|       |                    }
  626|       |                }
  627|      0|                _ => unreachable!(),
  628|       |            }
  629|       |        }
  630|  20.3k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer3new:
  172|  3.79k|    pub fn new(mode: N3LexerMode) -> Self {
  173|  3.79k|        Self { mode }
  174|  3.79k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  227|   298k|    fn recognize_pname_or_keyword(
  228|   298k|        data: &[u8],
  229|   298k|        is_ending: bool,
  230|   298k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  231|   298k|        // [139s] 	PNAME_NS 	::= 	PN_PREFIX? ':'
  232|   298k|        // [140s] 	PNAME_LN 	::= 	PNAME_NS PN_LOCAL
  233|   298k|
  234|   298k|        // [167s] 	PN_PREFIX 	::= 	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  235|   298k|        let mut i = 0;
  236|       |        loop {
  237|   767k|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  238|   720k|                match r {
  239|   662k|                    Ok((c, consumed)) => {
  240|   662k|                        if c == ':' {
  241|  19.2k|                            i += consumed;
  242|  19.2k|                            break;
  243|   642k|                        } else if i == 0 {
  244|   219k|                            if !Self::is_possible_pn_chars_base(c) {
  245|   153k|                                return Some((
  246|   153k|                                    consumed,
  247|   153k|                                    Err((
  248|   153k|                                        0..consumed,
  249|   153k|                                        format!(
  250|   153k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  251|   153k|                                        ),
  252|   153k|                                    )
  253|   153k|                                        .into()),
  254|   153k|                                ));
  255|  65.6k|                            }
  256|  65.6k|                            i += consumed;
  257|   423k|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  258|   403k|                            i += consumed;
  259|   403k|                        } else {
  260|  24.3k|                            while data[..i].ends_with(b".") {
  261|  4.10k|                                i -= 1;
  262|  4.10k|                            }
  263|  20.2k|                            return Some((
  264|  20.2k|                                i,
  265|  20.2k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  266|  20.2k|                            ));
  267|       |                        }
  268|       |                    }
  269|  58.5k|                    Err(e) => return Some((e.location.end, Err(e))),
  270|       |                }
  271|  46.9k|            } else if is_ending {
  272|    826|                while data[..i].ends_with(b".") {
  273|    140|                    i -= 1;
  274|    140|                }
  275|    686|                return Some(if i == 0 {
  276|    310|                    (
  277|    310|                        1,
  278|    310|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  279|    310|                    )
  280|       |                } else {
  281|    376|                    (
  282|    376|                        i,
  283|    376|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  284|    376|                    )
  285|       |                });
  286|       |            } else {
  287|  46.3k|                return None;
  288|       |            }
  289|       |        }
  290|  19.2k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  291|  19.2k|            Ok(pn_prefix) => pn_prefix,
  292|      0|            Err(e) => return Some((i, Err(e))),
  293|       |        };
  294|  19.2k|        if pn_prefix.ends_with('.') {
  295|    189|            return Some((
  296|    189|                i,
  297|    189|                Err((
  298|    189|                    0..i,
  299|    189|                    format!(
  300|    189|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  301|    189|                )
  302|    189|                    .into()),
  303|    189|            ));
  304|  19.0k|        }
  305|       |
  306|  19.0k|        let (consumed, pn_local_result) = Self::recognize_optional_pn_local(&data[i..], is_ending)?;
  307|  4.94k|        Some((
  308|  4.94k|            consumed + i,
  309|  4.94k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  310|       |                prefix: pn_prefix,
  311|       |                local,
  312|       |                might_be_invalid_iri,
  313|  4.94k|            }),
  314|  4.94k|        ))
  315|   298k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  521|  33.4k|    fn recognize_lang_tag(
  522|  33.4k|        data: &[u8],
  523|  33.4k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  524|  33.4k|        // [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  525|  33.4k|        let mut is_last_block_empty = true;
  526|  86.8k|        for (i, c) in data[1..].iter().enumerate() {
  527|  86.8k|            if c.is_ascii_alphabetic() {
  528|  56.2k|                is_last_block_empty = false;
  529|  56.2k|            } else if i == 0 {
  530|  19.4k|                return Some((
  531|  19.4k|                    1,
  532|  19.4k|                    Err((1..2, "A language code should always start with a letter").into()),
  533|  19.4k|                ));
  534|  11.1k|            } else if is_last_block_empty {
  535|    174|                return Some((i, Self::parse_lang_tag(&data[1..i], 1..i - 1)));
  536|  10.9k|            } else if *c == b'-' {
  537|  7.39k|                is_last_block_empty = true;
  538|  7.39k|            } else {
  539|  3.57k|                return Some((i + 1, Self::parse_lang_tag(&data[1..=i], 1..i)));
  540|       |            }
  541|       |        }
  542|  10.3k|        None
  543|  33.4k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  731|  29.3k|    fn recognize_escape(
  732|  29.3k|        data: &[u8],
  733|  29.3k|        position: usize,
  734|  29.3k|        with_echar: bool,
  735|  29.3k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  736|  29.3k|        // [26] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  737|  29.3k|        // [159s] 	ECHAR 	::= 	'\' [tbnrf"'\]
  738|  29.3k|        match *data.get(1)? {
  739|  6.48k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  740|  5.55k|                Ok(c) => Some((5, Ok(c?))),
  741|    927|                Err(e) => Some((5, Err(e))),
  742|       |            },
  743|    788|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  744|    248|                Ok(c) => Some((9, Ok(c?))),
  745|    540|                Err(e) => Some((9, Err(e))),
  746|       |            },
  747|    455|            b't' if with_echar => Some((1, Ok('\t'))),
  748|    328|            b'b' if with_echar => Some((1, Ok('\x08'))),
  749|    345|            b'n' if with_echar => Some((1, Ok('\n'))),
  750|    355|            b'r' if with_echar => Some((1, Ok('\r'))),
  751|    298|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  752|    247|            b'"' if with_echar => Some((1, Ok('"'))),
  753|    272|            b'\'' if with_echar => Some((1, Ok('\''))),
  754|  7.03k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  755|  8.87k|            c => Some((
  756|  8.87k|                1,
  757|  8.87k|                Err((
  758|  8.87k|                    position..position + 2,
  759|  8.87k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  760|  8.87k|                )
  761|  8.87k|                    .into()),
  762|  8.87k|            )), //TODO: read until end of string
  763|       |        }
  764|  29.3k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  795|  1.06M|    fn recognize_unicode_char(
  796|  1.06M|        data: &[u8],
  797|  1.06M|        position: usize,
  798|  1.06M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  799|  1.06M|        let mut code_point: u32;
  800|  1.06M|        let bytes_needed: usize;
  801|  1.06M|        let mut lower_boundary = 0x80;
  802|  1.06M|        let mut upper_boundary = 0xBF;
  803|       |
  804|  1.06M|        let byte = *data.first()?;
  805|  1.00M|        match byte {
  806|  1.00M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  807|  50.8k|            0xC2..=0xDF => {
  808|  25.4k|                bytes_needed = 1;
  809|  25.4k|                code_point = u32::from(byte) & 0x1F;
  810|  25.4k|            }
  811|  25.3k|            0xE0..=0xEF => {
  812|  17.2k|                if byte == 0xE0 {
  813|  3.92k|                    lower_boundary = 0xA0;
  814|  13.3k|                }
  815|  17.2k|                if byte == 0xED {
  816|  5.10k|                    upper_boundary = 0x9F;
  817|  12.1k|                }
  818|  17.2k|                bytes_needed = 2;
  819|  17.2k|                code_point = u32::from(byte) & 0xF;
  820|       |            }
  821|  8.15k|            0xF0..=0xF4 => {
  822|  3.46k|                if byte == 0xF0 {
  823|    686|                    lower_boundary = 0x90;
  824|  2.77k|                }
  825|  3.46k|                if byte == 0xF4 {
  826|    326|                    upper_boundary = 0x8F;
  827|  3.13k|                }
  828|  3.46k|                bytes_needed = 3;
  829|  3.46k|                code_point = u32::from(byte) & 0x7;
  830|       |            }
  831|       |            _ => {
  832|  28.9k|                return Some(Err((
  833|  28.9k|                    position..=position,
  834|  28.9k|                    "Invalid UTF-8 character encoding",
  835|  28.9k|                )
  836|  28.9k|                    .into()))
  837|       |            }
  838|       |        }
  839|       |
  840|  49.2k|        for i in 1..=bytes_needed {
  841|  49.2k|            let byte = *data.get(i)?;
  842|  35.8k|            if byte < lower_boundary || upper_boundary < byte {
  843|  30.8k|                return Some(Err((
  844|  30.8k|                    position..=position + i,
  845|  30.8k|                    "Invalid UTF-8 character encoding",
  846|  30.8k|                )
  847|  30.8k|                    .into()));
  848|  4.95k|            }
  849|  4.95k|            lower_boundary = 0x80;
  850|  4.95k|            upper_boundary = 0xBF;
  851|  4.95k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  852|       |        }
  853|       |
  854|  1.87k|        Some(
  855|  1.87k|            char::from_u32(code_point)
  856|  1.87k|                .map(|c| (c, bytes_needed + 1))
  857|  1.87k|                .ok_or_else(|| {
  858|       |                    (
  859|       |                        position..=position + bytes_needed,
  860|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  861|       |                    )
  862|       |                        .into()
  863|  1.87k|                }),
  864|  1.87k|        )
  865|  1.06M|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  317|  28.2k|    fn recognize_variable(
  318|  28.2k|        data: &[u8],
  319|  28.2k|        is_ending: bool,
  320|  28.2k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  321|       |        // [36] 	QUICK_VAR_NAME 	::= 	"?" PN_LOCAL
  322|  28.2k|        let (consumed, result) = Self::recognize_optional_pn_local(&data[1..], is_ending)?;
  323|  13.6k|        Some((
  324|  13.6k|            consumed + 1,
  325|  13.6k|            result.and_then(|(name, _)| {
  326|       |                if name.is_empty() {
  327|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  328|       |                } else {
  329|       |                    Ok(N3Token::Variable(name))
  330|       |                }
  331|  13.6k|            }),
  332|  13.6k|        ))
  333|  28.2k|    }
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  898|   217k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  899|   217k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  900|   217k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  901|   217k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  902|   217k|    }
_RNvNtCshegW5rJ1TR8_5oxttl5lexer13str_from_utf8:
  927|   121k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  928|   121k|    str::from_utf8(data).map_err(|e| {
  929|       |        (
  930|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  931|       |            format!("Invalid UTF-8: {e}"),
  932|       |        )
  933|       |            .into()
  934|   121k|    })
  935|   121k|}
_RNvXs2_NtCshegW5rJ1TR8_5oxttl5lexerNtB5_7N3TokenNtNtCs5I47Pk7y5NW_4core3cmp9PartialEq2eqB7_:
   12|   158k|#[derive(Debug, PartialEq, Eq)]
_RNvMs_NtCshegW5rJ1TR8_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  868|   898k|    fn is_possible_pn_chars_base(c: char) -> bool {
  869|   898k|        matches!(c,
  870|   630k|        'A'..='Z'
  871|   190k|        | 'a'..='z'
  872|  1.68k|        | '\u{00C0}'..='\u{00D6}'
  873|  1.68k|        | '\u{00D8}'..='\u{00F6}'
  874|  1.68k|        | '\u{00F8}'..='\u{02FF}'
  875|  1.53k|        | '\u{0370}'..='\u{037D}'
  876|  1.51k|        | '\u{037F}'..='\u{1FFF}'
  877|    485|        | '\u{200C}'..='\u{200D}'
  878|    485|        | '\u{2070}'..='\u{218F}'
  879|    485|        | '\u{2C00}'..='\u{2FEF}'
  880|    485|        | '\u{3001}'..='\u{D7FF}'
  881|     63|        | '\u{F900}'..='\u{FDCF}'
  882|     63|        | '\u{FDF0}'..='\u{FFFD}'
  883|     62|        | '\u{10000}'..='\u{EFFFF}')
  884|   898k|    }

_RNvXsv_NtCshegW5rJ1TR8_5oxttl2n3NtB5_8N3ParserNtNtCs5I47Pk7y5NW_4core7default7Default7defaultCsjFDTFCBAFbr_2n3:
  206|  3.79k|#[derive(Default)]
_RNvMsb_NtCshegW5rJ1TR8_5oxttl2n3NtB5_8N3Parser3newCsjFDTFCBAFbr_2n3:
  216|  3.79k|    pub fn new() -> Self {
  217|  3.79k|        Self::default()
  218|  3.79k|    }
_RINvMsb_NtCshegW5rJ1TR8_5oxttl2n3NtB6_8N3Parser13with_base_iriReECsjFDTFCBAFbr_2n3:
  221|  3.79k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  222|  3.79k|        self.base = Some(Iri::parse(base_iri.into())?);
  223|  3.79k|        Ok(self)
  224|  3.79k|    }
_RNvXs_NtCshegW5rJ1TR8_5oxttl2n3NtB4_6N3TermINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCsgvi62RmfmLq_5oxrdf10named_node9NamedNodeE4fromB6_:
   51|    295|    fn from(node: NamedNode) -> Self {
   52|    295|        Self::NamedNode(node)
   53|    295|    }
_RNvXs0_NtCshegW5rJ1TR8_5oxttl2n3NtB5_6N3TermINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   58|  4.43k|    fn from(node: NamedNodeRef<'_>) -> Self {
   59|  4.43k|        Self::NamedNode(node.into_owned())
   60|  4.43k|    }
_RNvXs2_NtCshegW5rJ1TR8_5oxttl2n3NtB5_6N3TermINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCsgvi62RmfmLq_5oxrdf7literal7LiteralE4fromB7_:
   72|  9.67k|    fn from(literal: Literal) -> Self {
   73|  9.67k|        Self::Literal(literal)
   74|  9.67k|    }
_RNvXsf_NtCshegW5rJ1TR8_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  616|   482k|    fn recognize_next(
  617|   482k|        mut self,
  618|   482k|        token: N3Token<'_>,
  619|   482k|        context: &mut N3RecognizerContext,
  620|   482k|        results: &mut Vec<N3Quad>,
  621|   482k|        errors: &mut Vec<RuleRecognizerError>,
  622|   482k|    ) -> Self {
  623|   482k|        if let Some(rule) = self.stack.pop() {
  624|   341k|            match rule {
  625|       |                // [1] 	n3Doc 	::= 	( ( n3Statement ".") | sparqlDirective) *
  626|       |                // [2] 	n3Statement 	::= 	n3Directive | triples
  627|       |                // [3] 	n3Directive 	::= 	prefixID | base
  628|       |                // [4] 	sparqlDirective 	::= 	sparqlBase | sparqlPrefix
  629|       |                // [5] 	sparqlBase 	::= 	BASE IRIREF
  630|       |                // [6] 	sparqlPrefix 	::= 	PREFIX PNAME_NS IRIREF
  631|       |                // [7] 	prefixID 	::= 	"@prefix" PNAME_NS IRIREF
  632|       |                // [8] 	base 	::= 	"@base" IRIREF
  633|       |                N3State::N3Doc => {
  634|  20.2k|                    self.stack.push(N3State::N3Doc);
  635|  1.69k|                    match token {
  636|  1.73k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  637|     46|                            self.stack.push(N3State::BaseExpectIri);
  638|     46|                            self
  639|       |                        }
  640|  1.69k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  641|     70|                            self.stack.push(N3State::PrefixExpectPrefix);
  642|     70|                            self
  643|       |                        }
  644|    789|                        N3Token::LangTag("prefix") => {
  645|     40|                            self.stack.push(N3State::N3DocExpectDot);
  646|     40|                            self.stack.push(N3State::PrefixExpectPrefix);
  647|     40|                            self
  648|       |                        }
  649|    749|                        N3Token::LangTag("base") => {
  650|      1|                            self.stack.push(N3State::N3DocExpectDot);
  651|      1|                            self.stack.push(N3State::BaseExpectIri);
  652|      1|                            self
  653|       |                        }
  654|       |                        _ => {
  655|  20.0k|                            self.stack.push(N3State::N3DocExpectDot);
  656|  20.0k|                            self.stack.push(N3State::Triples);
  657|  20.0k|                            self.recognize_next(token, context, results, errors)
  658|       |                        }
  659|       |                    }
  660|       |                },
  661|       |                N3State::N3DocExpectDot => {
  662|  1.93k|                    if token == N3Token::Punctuation(".") {
  663|    510|                        self
  664|       |                    } else  {
  665|  1.42k|                        errors.push("A dot is expected at the end of N3 statements".into());
  666|  1.42k|                        self.recognize_next(token, context, results, errors)
  667|       |                    }
  668|       |                },
  669|     46|                N3State::BaseExpectIri => match token {
  670|      1|                    N3Token::IriRef(iri) => {
  671|      1|                        context.lexer_options.base_iri = Some(iri);
  672|      1|                        self
  673|       |                    }
  674|     45|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  675|       |                },
  676|      0|                N3State::PrefixExpectPrefix => match token {
  677|      0|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  678|      0|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  679|      0|                        self
  680|       |                    }
  681|       |                    _ => {
  682|     72|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  683|       |                    }
  684|       |                },
  685|      0|                N3State::PrefixExpectIri { name } => match token {
  686|      0|                    N3Token::IriRef(iri) => {
  687|      0|                        context.prefixes.insert(name, iri);
  688|      0|                        self
  689|       |                    }
  690|      0|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  691|       |                },
  692|       |                // [9] 	triples 	::= 	subject predicateObjectList?
  693|       |                N3State::Triples => {
  694|  33.7k|                    self.stack.push(N3State::TriplesMiddle);
  695|  33.7k|                    self.stack.push(N3State::Path);
  696|  33.7k|                    self.recognize_next(token, context, results, errors)
  697|       |                },
  698|  6.31k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {
  699|  1.79k|                    self.recognize_next(token, context, results, errors)
  700|       |                } else {
  701|  4.51k|                    self.stack.push(N3State::TriplesEnd);
  702|  4.51k|                    self.stack.push(N3State::PredicateObjectList);
  703|  4.51k|                    self.recognize_next(token, context, results, errors)
  704|       |                },
  705|       |                N3State::TriplesEnd => {
  706|  2.23k|                    self.terms.pop();
  707|  2.23k|                    self.recognize_next(token, context, results, errors)
  708|       |                },
  709|       |                // [10] 	predicateObjectList 	::= 	verb objectList ( ";" ( verb objectList) ? ) *
  710|       |                N3State::PredicateObjectList => {
  711|  15.3k|                    self.stack.push(N3State::PredicateObjectListEnd);
  712|  15.3k|                    self.stack.push(N3State::ObjectsList);
  713|  15.3k|                    self.stack.push(N3State::Verb);
  714|  15.3k|                    self.recognize_next(token, context, results, errors)
  715|       |                },
  716|       |                N3State::PredicateObjectListEnd => {
  717|  5.63k|                    self.predicates.pop();
  718|  5.63k|                    if token == N3Token::Punctuation(";") {
  719|    136|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  720|    136|                        self
  721|       |                    } else {
  722|  5.49k|                        self.recognize_next(token, context, results, errors)
  723|       |                    }
  724|       |                },
  725|  1.31k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  726|  1.18k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  727|  1.18k|                    self
  728|    128|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {
  729|     12|                    self.recognize_next(token, context, results, errors)
  730|       |                } else {
  731|    116|                    self.stack.push(N3State::PredicateObjectListEnd);
  732|    116|                    self.stack.push(N3State::ObjectsList);
  733|    116|                    self.stack.push(N3State::Verb);
  734|    116|                    self.recognize_next(token, context, results, errors)
  735|       |                },
  736|       |                // [11] 	objectList 	::= 	object ( "," object) *
  737|       |                N3State::ObjectsList => {
  738|  7.48k|                    self.stack.push(N3State::ObjectsListEnd);
  739|  7.48k|                    self.stack.push(N3State::Path);
  740|  7.48k|                    self.recognize_next(token, context, results, errors)
  741|       |                }
  742|       |                N3State::ObjectsListEnd => {
  743|  5.64k|                    let object = self.terms.pop().unwrap();
  744|  5.64k|                    let subject = self.terms.last().unwrap().clone();
  745|  5.64k|                    results.push(match self.predicates.last().unwrap().clone() {
  746|  5.55k|                        Predicate::Regular(predicate) => self.quad(
  747|  5.55k|                            subject,
  748|  5.55k|                            predicate,
  749|  5.55k|                            object,
  750|  5.55k|                        ),
  751|     93|                        Predicate::Inverted(predicate) => self.quad(
  752|     93|                            object,
  753|     93|                            predicate,
  754|     93|                            subject,
  755|     93|                        )
  756|       |                    });
  757|  5.64k|                    if token == N3Token::Punctuation(",") {
  758|     10|                        self.stack.push(N3State::ObjectsListEnd);
  759|     10|                        self.stack.push(N3State::Path);
  760|     10|                        self
  761|       |                    } else {
  762|  5.63k|                        self.recognize_next(token, context, results, errors)
  763|       |                    }
  764|       |                },
  765|       |                // [12] 	verb 	::= 	predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
  766|       |                // [14] 	predicate 	::= 	expression | ( "<-" expression)
  767|  15.4k|                N3State::Verb => match token {
  768|  1.04k|                    N3Token::PlainKeyword("a") => {
  769|    362|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
  770|    362|                        self
  771|       |                    }
  772|    686|                    N3Token::PlainKeyword("has") => {
  773|     10|                        self.stack.push(N3State::AfterRegularVerb);
  774|     10|                        self.stack.push(N3State::Path);
  775|     10|                        self
  776|       |                    }
  777|    676|                    N3Token::PlainKeyword("is") => {
  778|      7|                        self.stack.push(N3State::AfterVerbIs);
  779|      7|                        self.stack.push(N3State::Path);
  780|      7|                        self
  781|       |                    }
  782|  7.45k|                    N3Token::Punctuation("=") => {
  783|     82|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
  784|     82|                        self
  785|       |                    }
  786|  7.36k|                    N3Token::Punctuation("=>") => {
  787|     13|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  788|     13|                        self
  789|       |                    }
  790|  7.35k|                    N3Token::Punctuation("<=") => {
  791|     20|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  792|     20|                        self
  793|       |                    }
  794|  7.33k|                    N3Token::Punctuation("<-") => {
  795|    109|                        self.stack.push(N3State::AfterInvertedVerb);
  796|    109|                        self.stack.push(N3State::Path);
  797|    109|                        self
  798|       |                    }
  799|       |                   _ => {
  800|  14.8k|                        self.stack.push(N3State::AfterRegularVerb);
  801|  14.8k|                        self.stack.push(N3State::Path);
  802|  14.8k|                        self.recognize_next(token, context, results, errors)
  803|       |                    }
  804|       |                }
  805|       |                N3State::AfterRegularVerb => {
  806|  6.97k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
  807|  6.97k|                    self.recognize_next(token, context, results, errors)
  808|       |                }
  809|       |                N3State::AfterInvertedVerb => {
  810|    102|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  811|    102|                    self.recognize_next(token, context, results, errors)
  812|       |                }
  813|      4|                N3State::AfterVerbIs => match token {
  814|      3|                    N3Token::PlainKeyword("of") => {
  815|      0|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  816|      0|                        self
  817|       |                    },
  818|       |                    _ => {
  819|      4|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
  820|       |                    }
  821|       |                }
  822|       |                // [13] 	subject 	::= 	expression
  823|       |                // [15] 	object 	::= 	expression
  824|       |                // [16] 	expression 	::= 	path
  825|       |                // [17] 	path 	::= 	pathItem ( ( "!" path) | ( "^" path) ) ?
  826|       |                N3State::Path => {
  827|  71.3k|                    self.stack.push(N3State::PathFollowUp);
  828|  71.3k|                    self.stack.push(N3State::PathItem);
  829|  71.3k|                    self.recognize_next(token, context, results, errors)
  830|       |                }
  831|  21.0k|                N3State::PathFollowUp => match token {
  832|  12.5k|                    N3Token::Punctuation("!") => {
  833|     38|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
  834|     38|                        self.stack.push(N3State::PathItem);
  835|     38|                        self
  836|       |                    }
  837|  12.4k|                    N3Token::Punctuation("^") => {
  838|    149|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
  839|    149|                        self.stack.push(N3State::PathItem);
  840|    149|                        self
  841|       |                    }
  842|  20.8k|                   _ => self.recognize_next(token, context, results, errors)
  843|       |                },
  844|    176|                N3State::PathAfterIndicator { is_inverse } => {
  845|    176|                    let predicate = self.terms.pop().unwrap();
  846|    176|                    let previous = self.terms.pop().unwrap();
  847|    176|                    let current = BlankNode::default();
  848|    176|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone())});
  849|    176|                    self.terms.push(current.into());
  850|    176|                    self.stack.push(N3State::PathFollowUp);
  851|    176|                    self.recognize_next(token, context, results, errors)
  852|       |                },
  853|       |                // [18] 	pathItem 	::= 	iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
  854|       |                // [19] 	literal 	::= 	rdfLiteral | numericLiteral | BOOLEAN_LITERAL
  855|       |                // [20] 	blankNodePropertyList 	::= 	"[" predicateObjectList "]"
  856|       |                // [21] 	iriPropertyList 	::= 	IPLSTART iri predicateObjectList "]"
  857|       |                // [22] 	collection 	::= 	"(" object* ")"
  858|       |                // [23] 	formula 	::= 	"{" formulaContent? "}"
  859|       |                // [25] 	numericLiteral 	::= 	DOUBLE | DECIMAL | INTEGER
  860|       |                // [26] 	rdfLiteral 	::= 	STRING ( LANGTAG | ( "^^" iri) ) ?
  861|       |                // [27] 	iri 	::= 	IRIREF | prefixedName
  862|       |                // [28] 	prefixedName 	::= 	PNAME_LN | PNAME_NS
  863|       |                // [29] 	blankNode 	::= 	BLANK_NODE_LABEL | ANON
  864|       |                // [30] 	quickVar 	::= 	QUICK_VAR_NAME
  865|       |                N3State::PathItem => {
  866|  71.5k|                    match token {
  867|    180|                        N3Token::IriRef(iri) => {
  868|    180|                            self.terms.push(NamedNode::from(iri).into());
  869|    180|                            self
  870|       |                        }
  871|    919|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  872|      0|                            Ok(t) => {
  873|      0|                                self.terms.push(t.into());
  874|      0|                                self
  875|       |                            },
  876|    919|                            Err(e) => self.error(errors, e)
  877|       |                        }
  878|  1.03k|                        N3Token::BlankNodeLabel(bnode) => {
  879|  1.03k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
  880|  1.03k|                            self
  881|       |                        }
  882|  3.87k|                        N3Token::Variable(name) => {
  883|  3.87k|                            self.terms.push(Variable::new_unchecked(name).into());
  884|  3.87k|                            self
  885|       |                        }
  886|  52.1k|                        N3Token::Punctuation("[") => {
  887|  11.3k|                            self.stack.push(N3State::PropertyListMiddle);
  888|  11.3k|                            self
  889|       |                        }
  890|  40.8k|                        N3Token::Punctuation("(") => {
  891|  14.0k|                            self.stack.push(N3State::CollectionBeginning);
  892|  14.0k|                            self
  893|       |                        }
  894|  7.46k|                        N3Token::String(value) => {
  895|  7.46k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
  896|  7.46k|                            self
  897|       |                        }
  898|  2.07k|                        N3Token::Integer(v) => {
  899|  2.07k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  900|  2.07k|                            self
  901|       |                        }
  902|    210|                        N3Token::Decimal(v) => {
  903|    210|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
  904|    210|                            self
  905|       |                        }
  906|     19|                        N3Token::Double(v) => {
  907|     19|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
  908|     19|                            self
  909|       |                        }
  910|  2.82k|                        N3Token::PlainKeyword("true") => {
  911|     35|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
  912|     35|                            self
  913|       |                        }
  914|  2.78k|                        N3Token::PlainKeyword("false") => {
  915|     81|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
  916|     81|                            self
  917|       |                        }
  918|  26.7k|                        N3Token::Punctuation("{") => {
  919|  14.9k|                            self.contexts.push(BlankNode::default());
  920|  14.9k|                            self.stack.push(N3State::FormulaContent);
  921|  14.9k|                            self
  922|       |                        }
  923|  15.3k|                       _ => self.error(errors, "TOKEN is not a valid RDF value")
  924|       |                    }
  925|       |                }
  926|  11.0k|                N3State::PropertyListMiddle => match token {
  927|  5.53k|                    N3Token::Punctuation("]") => {
  928|    147|                        self.terms.push(BlankNode::default().into());
  929|    147|                        self
  930|       |                    },
  931|    648|                    N3Token::PlainKeyword("id") => {
  932|     67|                        self.stack.push(N3State::IriPropertyList);
  933|     67|                        self
  934|       |                    },
  935|       |                   _ => {
  936|  10.8k|                        self.terms.push(BlankNode::default().into());
  937|  10.8k|                        self.stack.push(N3State::PropertyListEnd);
  938|  10.8k|                        self.stack.push(N3State::PredicateObjectList);
  939|  10.8k|                        self.recognize_next(token, context, results, errors)
  940|       |                    }
  941|       |                }
  942|  3.28k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
  943|     18|                    self
  944|       |                } else {
  945|  3.26k|                    errors.push("blank node property lists should end with a ']'".into());
  946|  3.26k|                    self.recognize_next(token, context, results, errors)
  947|       |                }
  948|     66|                N3State::IriPropertyList => match token {
  949|      0|                    N3Token::IriRef(id) => {
  950|      0|                        self.terms.push(NamedNode::from(id).into());
  951|      0|                        self.stack.push(N3State::PropertyListEnd);
  952|      0|                        self.stack.push(N3State::PredicateObjectList);
  953|      0|                        self
  954|       |                    }
  955|      0|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  956|      0|                        Ok(t) => {
  957|      0|                            self.terms.push(t.into());
  958|      0|                            self.stack.push(N3State::PropertyListEnd);
  959|      0|                            self.stack.push(N3State::PredicateObjectList);
  960|      0|                            self
  961|       |                        },
  962|      0|                        Err(e) => self.error(errors, e)
  963|       |                    }
  964|       |                    _ => {
  965|     66|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
  966|       |                    }
  967|       |                }
  968|  13.7k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
  969|    148|                    self.terms.push(rdf::NIL.into());
  970|    148|                    self
  971|       |                } else {
  972|  13.5k|                    let root = BlankNode::default();
  973|  13.5k|                    self.terms.push(root.clone().into());
  974|  13.5k|                    self.terms.push(root.into());
  975|  13.5k|                    self.stack.push(N3State::CollectionPossibleEnd);
  976|  13.5k|                    self.stack.push(N3State::Path);
  977|  13.5k|                    self.recognize_next(token, context, results, errors)
  978|       |                },
  979|       |                N3State::CollectionPossibleEnd => {
  980|  1.81k|                    let value = self.terms.pop().unwrap();
  981|  1.81k|                    let old = self.terms.pop().unwrap();
  982|  1.81k|                    results.push(self.quad(
  983|  1.81k|                        old.clone(),
  984|  1.81k|                        rdf::FIRST,
  985|  1.81k|                        value,
  986|  1.81k|                    ));
  987|  1.81k|                    if let N3Token::Punctuation(")") = token {
  988|    291|                        results.push(self.quad(
  989|    291|                            old,
  990|    291|                            rdf::REST,
  991|    291|                            rdf::NIL
  992|    291|                        ));
  993|    291|                        self
  994|       |                    } else {
  995|  1.52k|                        let new = BlankNode::default();
  996|  1.52k|                        results.push(self.quad(
  997|  1.52k|                            old,
  998|  1.52k|                            rdf::REST,
  999|  1.52k|                            new.clone()
 1000|  1.52k|                        ));
 1001|  1.52k|                        self.terms.push(new.into());
 1002|  1.52k|                        self.stack.push(N3State::CollectionPossibleEnd);
 1003|  1.52k|                        self.stack.push(N3State::Path);
 1004|  1.52k|                        self.recognize_next(token, context, results, errors)
 1005|       |                    }
 1006|       |                }
 1007|  7.26k|                N3State::LiteralPossibleSuffix { value } => {
 1008|  7.26k|                    match token {
 1009|    145|                        N3Token::LangTag(lang) => {
 1010|    145|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1011|    145|                            self
 1012|       |                        },
 1013|    409|                        N3Token::Punctuation("^^") => {
 1014|      8|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1015|      8|                            self
 1016|       |                        }
 1017|       |                       _ => {
 1018|  7.11k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1019|  7.11k|                            self.recognize_next(token, context, results, errors)
 1020|       |                        }
 1021|       |                    }
 1022|       |                }
 1023|      4|                N3State::LiteralExpectDatatype { value } => {
 1024|      4|                    match token {
 1025|      2|                        N3Token::IriRef(datatype) => {
 1026|      2|                            self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1027|      2|                            self
 1028|       |                        },
 1029|      0|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1030|      0|                            Ok(datatype) =>{
 1031|      0|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1032|      0|                                self
 1033|       |                            },
 1034|      0|                            Err(e) => self.error(errors, e)
 1035|       |                        }
 1036|       |                       _ => {
 1037|      2|                            self.error(errors, "Expecting a datatype IRI after '^^, found TOKEN").recognize_next(token, context, results, errors)
 1038|       |                        }
 1039|       |                    }
 1040|       |                }
 1041|       |                // [24] 	formulaContent 	::= 	( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1042|       |                N3State::FormulaContent => {
 1043|    163|                    match token {
 1044|  14.6k|                        N3Token::Punctuation("}") => {
 1045|  2.04k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1046|  2.04k|                            self
 1047|       |                        }
 1048|    164|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1049|      1|                            self.stack.push(N3State::FormulaContent);
 1050|      1|                            self.stack.push(N3State::BaseExpectIri);
 1051|      1|                            self
 1052|       |                        }
 1053|    163|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1054|      2|                            self.stack.push(N3State::FormulaContent);
 1055|      2|                            self.stack.push(N3State::PrefixExpectPrefix);
 1056|      2|                            self
 1057|       |                        }
 1058|      6|                        N3Token::LangTag("prefix") => {
 1059|      0|                            self.stack.push(N3State::FormulaContentExpectDot);
 1060|      0|                            self.stack.push(N3State::PrefixExpectPrefix);
 1061|      0|                            self
 1062|       |                        }
 1063|      6|                        N3Token::LangTag("base") => {
 1064|      1|                            self.stack.push(N3State::FormulaContentExpectDot);
 1065|      1|                            self.stack.push(N3State::BaseExpectIri);
 1066|      1|                            self
 1067|       |                        }
 1068|       |                       _ => {
 1069|  13.6k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1070|  13.6k|                            self.stack.push(N3State::Triples);
 1071|  13.6k|                            self.recognize_next(token, context, results, errors)
 1072|       |                        }
 1073|       |                    }
 1074|       |                }
 1075|       |                N3State::FormulaContentExpectDot => {
 1076|  2.08k|                    match token {
 1077|  1.54k|                        N3Token::Punctuation("}") => {
 1078|  1.18k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1079|  1.18k|                            self
 1080|       |                        }
 1081|    354|                        N3Token::Punctuation(".") => {
 1082|     54|                            self.stack.push(N3State::FormulaContent);
 1083|     54|                            self
 1084|       |                        }
 1085|       |                       _ => {
 1086|    849|                            errors.push("A dot is expected at the end of N3 statements".into());
 1087|    849|                            self.stack.push(N3State::FormulaContent);
 1088|    849|                            self.recognize_next(token, context, results, errors)
 1089|       |                        }
 1090|       |                    }
 1091|       |                }
 1092|       |            }
 1093|   140k|        } else if token == N3Token::Punctuation(".") {
 1094|  19.3k|            self.stack.push(N3State::N3Doc);
 1095|  19.3k|            self
 1096|       |        } else {
 1097|   120k|            self
 1098|       |        }
 1099|   482k|    }
_RNvMse_NtCshegW5rJ1TR8_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  546|  3.79k|    pub fn is_end(&self) -> bool {
  547|  3.79k|        self.parser.is_end()
  548|  3.79k|    }
_RNvMsb_NtCshegW5rJ1TR8_5oxttl2n3NtB5_8N3Parser5parse:
  346|  3.79k|    pub fn parse(self) -> LowLevelN3Reader {
  347|  3.79k|        LowLevelN3Reader {
  348|  3.79k|            parser: N3Recognizer::new_parser(self.base, self.prefixes),
  349|  3.79k|        }
  350|  3.79k|    }
_RNvXsf_NtCshegW5rJ1TR8_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1113|   829k|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1114|   829k|        &context.lexer_options
 1115|   829k|    }
_RNvMse_NtCshegW5rJ1TR8_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  534|   333k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  535|   333k|        self.parser.extend_from_slice(other)
  536|   333k|    }
_RNvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB5_12N3Recognizer10new_parser:
 1119|  3.79k|    pub fn new_parser(
 1120|  3.79k|        base_iri: Option<Iri<String>>,
 1121|  3.79k|        prefixes: HashMap<String, Iri<String>>,
 1122|  3.79k|    ) -> Parser<Self> {
 1123|  3.79k|        Parser::new(
 1124|  3.79k|            Lexer::new(
 1125|  3.79k|                N3Lexer::new(N3LexerMode::N3),
 1126|  3.79k|                MIN_BUFFER_SIZE,
 1127|  3.79k|                MAX_BUFFER_SIZE,
 1128|  3.79k|                true,
 1129|  3.79k|                Some(b"#"),
 1130|  3.79k|            ),
 1131|  3.79k|            N3Recognizer {
 1132|  3.79k|                stack: vec![N3State::N3Doc],
 1133|  3.79k|                terms: Vec::new(),
 1134|  3.79k|                predicates: Vec::new(),
 1135|  3.79k|                contexts: Vec::new(),
 1136|  3.79k|            },
 1137|  3.79k|            N3RecognizerContext {
 1138|  3.79k|                lexer_options: N3LexerOptions { base_iri },
 1139|  3.79k|                prefixes,
 1140|  3.79k|            },
 1141|  3.79k|        )
 1142|  3.79k|    }
_RNvXsw_NtCshegW5rJ1TR8_5oxttl2n3NtB5_9PredicateNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneB7_:
  585|  5.64k|#[derive(Clone)]
_RNvXsf_NtCshegW5rJ1TR8_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  608|   269k|    fn error_recovery_state(mut self) -> Self {
  609|   269k|        self.stack.clear();
  610|   269k|        self.terms.clear();
  611|   269k|        self.predicates.clear();
  612|   269k|        self.contexts.clear();
  613|   269k|        self
  614|   269k|    }
_RNvMse_NtCshegW5rJ1TR8_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  541|  3.79k|    pub fn end(&mut self) {
  542|  3.79k|        self.parser.end()
  543|  3.79k|    }
_RNvXs8_NtCshegW5rJ1TR8_5oxttl2n3NtB5_6N3TermINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCsgvi62RmfmLq_5oxrdf8variable8VariableE4fromB7_:
  130|  3.87k|    fn from(variable: Variable) -> Self {
  131|  3.87k|        Self::Variable(variable)
  132|  3.87k|    }
_RNvMse_NtCshegW5rJ1TR8_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  554|   638k|    pub fn read_next(&mut self) -> Option<Result<N3Quad, SyntaxError>> {
  555|   638k|        self.parser.read_next()
  556|   638k|    }
_RNvXsf_NtCshegW5rJ1TR8_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1101|  3.79k|    fn recognize_end(
 1102|  3.79k|        self,
 1103|  3.79k|        _state: &mut N3RecognizerContext,
 1104|  3.79k|        _results: &mut Vec<Self::Output>,
 1105|  3.79k|        errors: &mut Vec<RuleRecognizerError>,
 1106|  3.79k|    ) {
 1107|  3.79k|        match &*self.stack {
 1108|  3.79k|            [] | [N3State::N3Doc] => (),
 1109|    201|            _ => errors.push("Unexpected end".into()), //TODO
 1110|       |        }
 1111|  3.79k|    }
_RNvXsm_NtCshegW5rJ1TR8_5oxttl2n3NtB5_6N3TermNtNtCs5I47Pk7y5NW_4core5clone5Clone5cloneB7_:
   25|  13.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1_NtCshegW5rJ1TR8_5oxttl2n3NtB5_6N3TermINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCsgvi62RmfmLq_5oxrdf10blank_node9BlankNodeE4fromB7_:
   65|  45.7k|    fn from(node: BlankNode) -> Self {
   66|  45.7k|        Self::BlankNode(node)
   67|  45.7k|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCsgvi62RmfmLq_5oxrdf10blank_node9BlankNodeEB8_:
 1155|     28|    fn quad(
 1156|     28|        &self,
 1157|     28|        subject: impl Into<N3Term>,
 1158|     28|        predicate: impl Into<N3Term>,
 1159|     28|        object: impl Into<N3Term>,
 1160|     28|    ) -> N3Quad {
 1161|     28|        N3Quad {
 1162|     28|            subject: subject.into(),
 1163|     28|            predicate: predicate.into(),
 1164|     28|            object: object.into(),
 1165|     28|            graph_name: self
 1166|     28|                .contexts
 1167|     28|                .last()
 1168|     28|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1169|     28|        }
 1170|     28|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1155|    291|    fn quad(
 1156|    291|        &self,
 1157|    291|        subject: impl Into<N3Term>,
 1158|    291|        predicate: impl Into<N3Term>,
 1159|    291|        object: impl Into<N3Term>,
 1160|    291|    ) -> N3Quad {
 1161|    291|        N3Quad {
 1162|    291|            subject: subject.into(),
 1163|    291|            predicate: predicate.into(),
 1164|    291|            object: object.into(),
 1165|    291|            graph_name: self
 1166|    291|                .contexts
 1167|    291|                .last()
 1168|    291|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1169|    291|        }
 1170|    291|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1155|  1.81k|    fn quad(
 1156|  1.81k|        &self,
 1157|  1.81k|        subject: impl Into<N3Term>,
 1158|  1.81k|        predicate: impl Into<N3Term>,
 1159|  1.81k|        object: impl Into<N3Term>,
 1160|  1.81k|    ) -> N3Quad {
 1161|  1.81k|        N3Quad {
 1162|  1.81k|            subject: subject.into(),
 1163|  1.81k|            predicate: predicate.into(),
 1164|  1.81k|            object: object.into(),
 1165|  1.81k|            graph_name: self
 1166|  1.81k|                .contexts
 1167|  1.81k|                .last()
 1168|  1.81k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1169|  1.81k|        }
 1170|  1.81k|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1155|  1.52k|    fn quad(
 1156|  1.52k|        &self,
 1157|  1.52k|        subject: impl Into<N3Term>,
 1158|  1.52k|        predicate: impl Into<N3Term>,
 1159|  1.52k|        object: impl Into<N3Term>,
 1160|  1.52k|    ) -> N3Quad {
 1161|  1.52k|        N3Quad {
 1162|  1.52k|            subject: subject.into(),
 1163|  1.52k|            predicate: predicate.into(),
 1164|  1.52k|            object: object.into(),
 1165|  1.52k|            graph_name: self
 1166|  1.52k|                .contexts
 1167|  1.52k|                .last()
 1168|  1.52k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1169|  1.52k|        }
 1170|  1.52k|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCsgvi62RmfmLq_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1155|    148|    fn quad(
 1156|    148|        &self,
 1157|    148|        subject: impl Into<N3Term>,
 1158|    148|        predicate: impl Into<N3Term>,
 1159|    148|        object: impl Into<N3Term>,
 1160|    148|    ) -> N3Quad {
 1161|    148|        N3Quad {
 1162|    148|            subject: subject.into(),
 1163|    148|            predicate: predicate.into(),
 1164|    148|            object: object.into(),
 1165|    148|            graph_name: self
 1166|    148|                .contexts
 1167|    148|                .last()
 1168|    148|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1169|    148|        }
 1170|    148|    }
_RNCINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCsgvi62RmfmLq_5oxrdf10blank_node9BlankNodeE0Ba_:
 1168|     13|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCs7mhW5aIIbP8_5alloc6string6StringEB8_:
 1145|    919|    fn error(
 1146|    919|        mut self,
 1147|    919|        errors: &mut Vec<RuleRecognizerError>,
 1148|    919|        msg: impl Into<RuleRecognizerError>,
 1149|    919|    ) -> Self {
 1150|    919|        errors.push(msg.into());
 1151|    919|        self.stack.clear();
 1152|    919|        self
 1153|    919|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1145|  15.4k|    fn error(
 1146|  15.4k|        mut self,
 1147|  15.4k|        errors: &mut Vec<RuleRecognizerError>,
 1148|  15.4k|        msg: impl Into<RuleRecognizerError>,
 1149|  15.4k|    ) -> Self {
 1150|  15.4k|        errors.push(msg.into());
 1151|  15.4k|        self.stack.clear();
 1152|  15.4k|        self
 1153|  15.4k|    }
_RINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1155|  5.64k|    fn quad(
 1156|  5.64k|        &self,
 1157|  5.64k|        subject: impl Into<N3Term>,
 1158|  5.64k|        predicate: impl Into<N3Term>,
 1159|  5.64k|        object: impl Into<N3Term>,
 1160|  5.64k|    ) -> N3Quad {
 1161|  5.64k|        N3Quad {
 1162|  5.64k|            subject: subject.into(),
 1163|  5.64k|            predicate: predicate.into(),
 1164|  5.64k|            object: object.into(),
 1165|  5.64k|            graph_name: self
 1166|  5.64k|                .contexts
 1167|  5.64k|                .last()
 1168|  5.64k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1169|  5.64k|        }
 1170|  5.64k|    }
_RNCINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1168|     54|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1168|    903|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1168|    381|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsgvi62RmfmLq_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1168|    327|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCshegW5rJ1TR8_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCsgvi62RmfmLq_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1168|     99|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RNvXs_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|  59.7k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  59.7k|        (*location.start()..*location.end() + 1, message).into()
   43|  59.7k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  1.02M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  1.02M|        let mut num_of_jumps = 0;
  399|  1.02M|        let mut last_jump_pos = 0;
  400|  1.02M|        let mut previous_cr = 0;
  401|  1.02M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  6.95k|            if bytes[pos] == b'\r' {
  403|    591|                previous_cr = pos;
  404|    591|                num_of_jumps += 1;
  405|    591|                last_jump_pos = pos + 1;
  406|    591|            } else {
  407|  6.36k|                if previous_cr < pos - 1 {
  408|  3.63k|                    // We count \r\n as a single line jump
  409|  3.63k|                    num_of_jumps += 1;
  410|  3.63k|                }
  411|  6.36k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  1.02M|        (num_of_jumps, last_jump_pos)
  415|  1.02M|    }
_RNvXNtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs7mhW5aIIbP8_5alloc6string6StringEE4fromB6_:
   31|   178k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   178k|        Self {
   33|   178k|            location,
   34|   178k|            message: message.into(),
   35|   178k|        }
   36|   178k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|   829k|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|   829k|        self.skip_whitespaces_and_comments()?;
  168|   821k|        self.previous_position = self.position;
  169|   821k|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|   821k|            &self.data[self.position.buffer_offset..],
  171|   821k|            self.is_ending,
  172|   821k|            options,
  173|   821k|        ) else {
  174|   333k|            return if self.is_ending {
  175|  8.70k|                if self.position.buffer_offset == self.data.len() {
  176|  7.58k|                    None // We have finished
  177|       |                } else {
  178|  1.12k|                    let (new_line_jumps, new_line_start) =
  179|  1.12k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  1.12k|                            &self.data[self.position.buffer_offset..],
  181|  1.12k|                        );
  182|  1.12k|                    if new_line_jumps > 0 {
  183|    143|                        self.position.line_start_buffer_offset =
  184|    143|                            self.position.buffer_offset + new_line_start;
  185|    978|                    }
  186|  1.12k|                    self.position.global_offset +=
  187|  1.12k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  1.12k|                    self.position.buffer_offset = self.data.len();
  189|  1.12k|                    self.position.global_line += new_line_jumps;
  190|  1.12k|                    let new_position = TextPosition {
  191|  1.12k|                        line: self.position.global_line,
  192|  1.12k|                        column: Self::column_from_bytes(
  193|  1.12k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  1.12k|                        ),
  195|  1.12k|                        offset: self.position.global_offset,
  196|  1.12k|                    };
  197|  1.12k|                    let error = SyntaxError {
  198|  1.12k|                        location: new_position..new_position,
  199|  1.12k|                        message: "Unexpected end of file".into(),
  200|  1.12k|                    };
  201|  1.12k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  1.12k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|   324k|                None
  206|       |            };
  207|       |        };
  208|       |        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|       |        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|   487k|        let (new_line_jumps, new_line_start) =
  218|   487k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|   487k|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|   487k|            );
  221|   487k|        if new_line_jumps > 0 {
  222|    991|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|   486k|        }
  224|   487k|        self.position.buffer_offset += consumed;
  225|   487k|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|   487k|        self.position.global_line += new_line_jumps;
  227|   487k|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|   487k|        }))
  231|   829k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|   829k|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|   829k|            self.skip_whitespaces()?;
  300|       |
  301|   828k|            let buf = &self.data[self.position.buffer_offset..];
  302|   828k|            if let Some(line_comment_start) = self.line_comment_start {
  303|   828k|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  7.59k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  1.97k|                        let mut end_position = line_comment_start.len() + end;
  307|  1.97k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  1.72k|                            if let Some(c) = buf.get(end_position + 1) {
  310|    146|                                if *c == b'\n' {
  311|      2|                                    end_position += 1;
  312|    144|                                }
  313|  1.57k|                            } else if !self.is_ending {
  314|  1.57k|                                return None; // We need to read more
  315|      4|                            }
  316|    249|                        }
  317|    399|                        let comment_size = end_position + 1;
  318|    399|                        self.position.buffer_offset += comment_size;
  319|    399|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|    399|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|    399|                        self.position.global_line += 1;
  322|    399|                        continue;
  323|  5.62k|                    }
  324|  5.62k|                    if self.is_ending {
  325|     86|                        self.position.buffer_offset = self.data.len(); // EOF
  326|     86|                        return Some(());
  327|  5.53k|                    }
  328|  5.53k|                    return None; // We need more data
  329|   821k|                }
  330|      0|            }
  331|   821k|            return Some(());
  332|       |        }
  333|   829k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|   829k|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|   829k|        if self.is_line_jump_whitespace {
  337|   829k|            let mut i = self.position.buffer_offset;
  338|   858k|            while let Some(c) = self.data.get(i) {
  339|   754k|                match c {
  340|  3.19k|                    b' ' | b'\t' => {
  341|  3.19k|                        self.position.buffer_offset += 1;
  342|  3.19k|                        self.position.global_offset += 1;
  343|  3.19k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  7.51k|                        let mut increment: u8 = 1;
  347|  7.51k|                        if let Some(c) = self.data.get(i + 1) {
  348|  6.32k|                            if *c == b'\n' {
  349|    144|                                increment += 1;
  350|    144|                                i += 1;
  351|  6.18k|                            }
  352|  1.18k|                        } else if !self.is_ending {
  353|  1.16k|                            return None; // We need to read more
  354|     19|                        }
  355|  6.34k|                        self.position.buffer_offset += usize::from(increment);
  356|  6.34k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  6.34k|                        self.position.global_offset += u64::from(increment);
  358|  6.34k|                        self.position.global_line += 1;
  359|       |                    }
  360|  18.6k|                    b'\n' => {
  361|  18.6k|                        self.position.buffer_offset += 1;
  362|  18.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|  18.6k|                        self.position.global_offset += 1;
  364|  18.6k|                        self.position.global_line += 1;
  365|  18.6k|                    }
  366|   725k|                    _ => return Some(()),
  367|       |                }
  368|  28.1k|                i += 1;
  369|       |                //TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                //TODO: SIMD
  380|       |            }
  381|       |        }
  382|   103k|        Some(())
  383|   829k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|   268k|    pub fn location_from_buffer_offset_range(
  234|   268k|        &self,
  235|   268k|        offset_range: Range<usize>,
  236|   268k|    ) -> Range<TextPosition> {
  237|   268k|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|   268k|        let (start_extra_line_jumps, start_line_start) =
  239|   268k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|   268k|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|   268k|            );
  242|   268k|        let start_line_start = if start_extra_line_jumps > 0 {
  243|    299|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|   268k|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|   268k|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|   268k|        let (end_extra_line_jumps, end_line_start) =
  249|   268k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|   268k|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|   268k|            );
  252|   268k|        let end_line_start = if end_extra_line_jumps > 0 {
  253|    677|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|   267k|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|   268k|        TextPosition {
  258|   268k|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|   268k|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|   268k|            offset: self.previous_position.global_offset
  261|   268k|                + u64::try_from(offset_range.start).unwrap(),
  262|   268k|        }..TextPosition {
  263|   268k|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|   268k|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|   268k|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|   268k|        }
  267|   268k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|   333k|    fn shrink_data(&mut self) {
  386|   333k|        if self.position.line_start_buffer_offset > 0 {
  387|  11.4k|            self.data
  388|  11.4k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  11.4k|            self.data
  390|  11.4k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  11.4k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  11.4k|            self.position.line_start_buffer_offset = 0;
  393|  11.4k|            self.previous_position = self.position;
  394|   321k|        }
  395|   333k|    }
_RNvXs_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs7mhW5aIIbP8_5alloc6string6StringEE4fromB8_:
   41|  11.7k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  11.7k|        (*location.start()..*location.end() + 1, message).into()
   43|  11.7k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  3.79k|    pub fn end(&mut self) {
  110|  3.79k|        self.is_ending = true;
  111|  3.79k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|  22.1k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|  22.1k|        String::from_utf8_lossy(
  288|  22.1k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|  22.1k|        )
  290|  22.1k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|   938k|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|   938k|        match str::from_utf8(bytes) {
  419|   463k|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|   474k|            Err(e) => {
  421|   474k|                if e.valid_up_to() == 0 {
  422|   118k|                    0
  423|       |                } else {
  424|   355k|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|   938k|    }
_RNvXNtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   100k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   100k|        Self {
   33|   100k|            location,
   34|   100k|            message: message.into(),
   35|   100k|        }
   36|   100k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|   340k|    pub fn is_end(&self) -> bool {
  293|   340k|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|   340k|    }
_RNCNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|   268k|        Some(result.map_err(|e| SyntaxError {
  228|   268k|            location: self.location_from_buffer_offset_range(e.location),
  229|   268k|            message: e.message,
  230|   268k|        }))
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  3.79k|    pub fn new(
   74|  3.79k|        parser: R,
   75|  3.79k|        min_buffer_size: usize,
   76|  3.79k|        max_buffer_size: usize,
   77|  3.79k|        is_line_jump_whitespace: bool,
   78|  3.79k|        line_comment_start: Option<&'static [u8]>,
   79|  3.79k|    ) -> Self {
   80|  3.79k|        Self {
   81|  3.79k|            parser,
   82|  3.79k|            data: Vec::new(),
   83|  3.79k|            position: Position {
   84|  3.79k|                line_start_buffer_offset: 0,
   85|  3.79k|                buffer_offset: 0,
   86|  3.79k|                global_offset: 0,
   87|  3.79k|                global_line: 0,
   88|  3.79k|            },
   89|  3.79k|            previous_position: Position {
   90|  3.79k|                line_start_buffer_offset: 0,
   91|  3.79k|                buffer_offset: 0,
   92|  3.79k|                global_offset: 0,
   93|  3.79k|                global_line: 0,
   94|  3.79k|            },
   95|  3.79k|            is_ending: false,
   96|  3.79k|            min_buffer_size,
   97|  3.79k|            max_buffer_size,
   98|  3.79k|            is_line_jump_whitespace,
   99|  3.79k|            line_comment_start,
  100|  3.79k|        }
  101|  3.79k|    }
_RNvXs0_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromTjNtNtCs7mhW5aIIbP8_5alloc6string6StringEE4fromB9_:
   47|  7.14k|    fn from((location, message): (usize, S)) -> Self {
   48|  7.14k|        (location..=location, message).into()
   49|  7.14k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|   333k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|   333k|        self.shrink_data();
  105|   333k|        self.data.extend_from_slice(other);
  106|   333k|    }
_RNvMs1_NtNtCshegW5rJ1TR8_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|  22.1k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|  22.1k|        TextPosition {
  271|  22.1k|            line: self.previous_position.global_line,
  272|  22.1k|            column: Self::column_from_bytes(
  273|  22.1k|                &self.data[self.previous_position.line_start_buffer_offset
  274|  22.1k|                    ..self.previous_position.buffer_offset],
  275|  22.1k|            ),
  276|  22.1k|            offset: self.previous_position.global_offset,
  277|  22.1k|        }..TextPosition {
  278|  22.1k|            line: self.position.global_line,
  279|  22.1k|            column: Self::column_from_bytes(
  280|  22.1k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|  22.1k|            ),
  282|  22.1k|            offset: self.position.global_offset,
  283|  22.1k|        }
  284|  22.1k|    }

_RNvMs_NtNtCshegW5rJ1TR8_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE9read_nextB8_:
   80|   638k|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|   861k|            if let Some(error) = self.errors.pop() {
   83|  22.1k|                return Some(Err(SyntaxError {
   84|  22.1k|                    location: self.lexer.last_token_location(),
   85|  22.1k|                    message: error
   86|  22.1k|                        .message
   87|  22.1k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|  22.1k|                }));
   89|   838k|            }
   90|   838k|            if let Some(result) = self.results.pop() {
   91|  9.45k|                return Some(Ok(result));
   92|   829k|            }
   93|   829k|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|   488k|                match result {
   95|   218k|                    Ok(token) => {
   96|   218k|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|   218k|                        });
  104|   218k|                        continue;
  105|       |                    }
  106|   269k|                    Err(e) => {
  107|   269k|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|   269k|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|   340k|            }
  112|   340k|            if self.lexer.is_end() {
  113|  7.58k|                let Some(state) = self.state.take() else {
  114|  3.79k|                    return None;
  115|       |                };
  116|  3.79k|                state.recognize_end(&mut self.context, &mut self.results, &mut self.errors)
  117|       |            } else {
  118|   333k|                return None;
  119|       |            }
  120|       |        }
  121|   638k|    }
_RNvXNtNtCshegW5rJ1TR8_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCs7mhW5aIIbP8_5alloc6string6StringE4fromB6_:
   39|    919|    fn from(message: S) -> Self {
   40|    919|        Self {
   41|    919|            message: message.into(),
   42|    919|        }
   43|    919|    }
_RNvMs_NtNtCshegW5rJ1TR8_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE17extend_from_sliceB8_:
   66|   333k|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|   333k|        self.lexer.extend_from_slice(other)
   68|   333k|    }
_RNCNvMs_NtNtCshegW5rJ1TR8_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_2n312N3RecognizerE9read_next0Ba_:
   96|   218k|                        self.state = self.state.take().map(|state| {
   97|   218k|                            state.recognize_next(
   98|   218k|                                token,
   99|   218k|                                &mut self.context,
  100|   218k|                                &mut self.results,
  101|   218k|                                &mut self.errors,
  102|   218k|                            )
  103|   218k|                        });
_RNvMs_NtNtCshegW5rJ1TR8_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE6is_endB8_:
   76|  3.79k|    pub fn is_end(&self) -> bool {
   77|  3.79k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  3.79k|    }
_RNvMs_NtNtCshegW5rJ1TR8_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3newB8_:
   56|  3.79k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  3.79k|        Self {
   58|  3.79k|            lexer,
   59|  3.79k|            state: Some(recognizer),
   60|  3.79k|            context,
   61|  3.79k|            results: vec![],
   62|  3.79k|            errors: vec![],
   63|  3.79k|        }
   64|  3.79k|    }
_RNvXNtNtCshegW5rJ1TR8_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs5I47Pk7y5NW_4core7convert4FromReE4fromB6_:
   39|  21.2k|    fn from(message: S) -> Self {
   40|  21.2k|        Self {
   41|  21.2k|            message: message.into(),
   42|  21.2k|        }
   43|  21.2k|    }
_RNvMs_NtNtCshegW5rJ1TR8_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3endB8_:
   71|  3.79k|    pub fn end(&mut self) {
   72|  3.79k|        self.lexer.end()
   73|  3.79k|    }


_RNCINvMs_NtCs3IdWJf403OL_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCs3IdWJf403OL_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    704|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    704|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    704|        let mut val = self.0.load(Relaxed);
   37|    704|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    703|        }
   41|    704|        val
   42|    704|    }
_RINvMs_NtCs3IdWJf403OL_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    704|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    704|        self.0.unsync_init(|| init() as usize) != 0
   55|    704|    }

_RNvCs3IdWJf403OL_9getrandom16getrandom_uninitCs59ZXsH8airK_9rand_core:
  345|    704|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    704|    if !dest.is_empty() {
  347|    704|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    704|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    704|}
_RNvCs3IdWJf403OL_9getrandom9getrandomCs59ZXsH8airK_9rand_core:
  315|    704|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    704|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    704|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    704|    // `dest`.
  319|    704|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    704|    Ok(())
  321|    704|}

_RNvNtCs3IdWJf403OL_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNCNvNtCs3IdWJf403OL_9getrandom3imp15getrandom_inner0B5_:
   13|    704|        sys_fill_exact(dest, |buf| unsafe {
   14|    704|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    704|        })
_RNvNtCs3IdWJf403OL_9getrandom3imp9getrandom:
   34|    705|unsafe fn getrandom(
   35|    705|    buf: *mut libc::c_void,
   36|    705|    buflen: libc::size_t,
   37|    705|    flags: libc::c_uint,
   38|    705|) -> libc::ssize_t {
   39|    705|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    705|}
_RNvNtCs3IdWJf403OL_9getrandom3imp15getrandom_inner:
    9|    704|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    704|    // getrandom(2) was introduced in Linux 3.17
   11|    704|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    704|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    704|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    704|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    704|}

_RINvNtCs3IdWJf403OL_9getrandom4util19slice_as_uninit_muthECs59ZXsH8airK_9rand_core:
   32|    704|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    704|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    704|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    704|}
_RINvNtCs3IdWJf403OL_9getrandom4util21slice_assume_init_muthECs59ZXsH8airK_9rand_core:
    8|    704|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    704|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    704|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    704|}

_RINvNtCs3IdWJf403OL_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    704|pub fn sys_fill_exact(
   60|    704|    mut buf: &mut [MaybeUninit<u8>],
   61|    704|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    704|) -> Result<(), Error> {
   63|  1.40k|    while !buf.is_empty() {
   64|    704|        let res = sys_fill(buf);
   65|    704|        match res {
   66|    704|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    704|    Ok(())
   81|    704|}

rust_fuzzer_test_input:
  209|  34.3k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  34.3k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  34.3k|                }
  223|  34.3k|
  224|  34.3k|                __libfuzzer_sys_run(bytes);
  225|  34.3k|                0
  226|  34.3k|            }
_RNvNvCs96HrlsBBTql_2n31__19___libfuzzer_sys_run:
  241|  34.3k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|  34.3k|            }
LLVMFuzzerTestOneInput:
   58|  34.3k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  34.3k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  34.3k|    });
   63|  34.3k|
   64|  34.3k|    match test_input {
   65|  34.3k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  34.3k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs2cfBPjnRYZ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  34.3k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  34.3k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  34.3k|        rust_fuzzer_test_input(data_slice)
   62|  34.3k|    });

_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECsgLOhukngm62_5oxttl:
 1125|  2.12M|pub(crate) unsafe fn search_slice_with_raw(
 1126|  2.12M|    haystack: &[u8],
 1127|  2.12M|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  2.12M|) -> Option<usize> {
 1129|  2.12M|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  2.12M|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  2.12M|    // a &[u8].
 1132|  2.12M|    let start = haystack.as_ptr();
 1133|  2.12M|    let end = start.add(haystack.len());
 1134|  2.12M|    let found = find_raw(start, end)?;
 1135|   852k|    Some(found.distance(start))
 1136|  2.12M|}
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsgLOhukngm62_5oxttl:
 1044|  15.3M|    pub(crate) unsafe fn next(
 1045|  15.3M|        &mut self,
 1046|  15.3M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  15.3M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  15.3M|        let found = find_raw(self.start, self.end)?;
 1057|  60.9k|        let result = found.distance(self.original_start);
 1058|  60.9k|        self.start = found.add(1);
 1059|  60.9k|        Some(result)
 1060|  15.3M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsgLOhukngm62_5oxttl:
 1125|  69.7k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  69.7k|    haystack: &[u8],
 1127|  69.7k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  69.7k|) -> Option<usize> {
 1129|  69.7k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  69.7k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  69.7k|    // a &[u8].
 1132|  69.7k|    let start = haystack.as_ptr();
 1133|  69.7k|    let end = start.add(haystack.len());
 1134|  69.7k|    let found = find_raw(start, end)?;
 1135|  5.66k|    Some(found.distance(start))
 1136|  69.7k|}
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  15.3M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  15.3M|        Iter {
 1029|  15.3M|            original_start: haystack.as_ptr(),
 1030|  15.3M|            start: haystack.as_ptr(),
 1031|  15.3M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  15.3M|            haystack: core::marker::PhantomData,
 1033|  15.3M|        }
 1034|  15.3M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|   170k|    pub(crate) fn needle1(&self) -> u8 {
  118|   170k|        self.s1
  119|   170k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  70.8k|    unsafe fn search_chunk(
  417|  70.8k|        &self,
  418|  70.8k|        cur: *const u8,
  419|  70.8k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  70.8k|    ) -> Option<*const u8> {
  421|  70.8k|        let chunk = V::load_unaligned(cur);
  422|  70.8k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  70.8k|        if mask.has_non_zero() {
  424|  2.59k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  68.2k|            None
  427|       |        }
  428|  70.8k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  12.5k|    pub(crate) unsafe fn find_raw(
  144|  12.5k|        &self,
  145|  12.5k|        start: *const u8,
  146|  12.5k|        end: *const u8,
  147|  12.5k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  12.5k|        let topos = V::Mask::first_offset;
  155|  12.5k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  12.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    876|            return Some(cur);
  167|  11.6k|        }
  168|  11.6k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  11.6k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  11.6k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  11.6k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  15.4k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.23k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    445|                return Some(cur);
  216|  3.78k|            }
  217|  3.78k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  11.2k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  9.79k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  9.79k|            return self.search_chunk(cur, topos);
  228|  1.41k|        }
  229|  1.41k|        None
  230|  12.5k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  69.7k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  69.7k|        One { s1: needle, v1: V::splat(needle) }
  113|  69.7k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   382k|    pub(crate) unsafe fn find_raw(
  494|   382k|        &self,
  495|   382k|        start: *const u8,
  496|   382k|        end: *const u8,
  497|   382k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   382k|        let topos = V::Mask::first_offset;
  505|   382k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   382k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   187k|            return Some(cur);
  517|   195k|        }
  518|   195k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   195k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   195k|        if len >= Self::LOOP_SIZE {
  522|   696k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|   589k|                let a = V::load_aligned(cur);
  526|   589k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|   589k|                let eqa1 = self.v1.cmpeq(a);
  528|   589k|                let eqb1 = self.v1.cmpeq(b);
  529|   589k|                let eqa2 = self.v2.cmpeq(a);
  530|   589k|                let eqb2 = self.v2.cmpeq(b);
  531|   589k|                let or1 = eqa1.or(eqb1);
  532|   589k|                let or2 = eqa2.or(eqb2);
  533|   589k|                let or3 = or1.or(or2);
  534|   589k|                if or3.movemask_will_have_non_zero() {
  535|  5.35k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  5.35k|                    if mask.has_non_zero() {
  537|  2.35k|                        return Some(cur.add(topos(mask)));
  538|  3.00k|                    }
  539|  3.00k|
  540|  3.00k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  3.00k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|   584k|                }
  544|   584k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  82.7k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   266k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  81.7k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  4.56k|                return Some(cur);
  554|  77.1k|            }
  555|  77.1k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   185k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   179k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   179k|            return self.search_chunk(cur, topos);
  566|  5.39k|        }
  567|  5.39k|        None
  568|   382k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  28.3M|    pub(crate) fn needle1(&self) -> u8 {
  462|  28.3M|        self.s1
  463|  28.3M|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  17.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.5M|        Two {
  452|  17.5M|            s1: needle1,
  453|  17.5M|            s2: needle2,
  454|  17.5M|            v1: V::splat(needle1),
  455|  17.5M|            v2: V::splat(needle2),
  456|  17.5M|        }
  457|  17.5M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  26.8k|    pub(crate) unsafe fn find_raw(
  144|  26.8k|        &self,
  145|  26.8k|        start: *const u8,
  146|  26.8k|        end: *const u8,
  147|  26.8k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  26.8k|        let topos = V::Mask::first_offset;
  155|  26.8k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  26.8k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.30k|            return Some(cur);
  167|  25.5k|        }
  168|  25.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  25.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  25.5k|        if len >= Self::LOOP_SIZE {
  172|  13.9k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  9.12k|                let a = V::load_aligned(cur);
  176|  9.12k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  9.12k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  9.12k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  9.12k|                let eqa = self.v1.cmpeq(a);
  180|  9.12k|                let eqb = self.v1.cmpeq(b);
  181|  9.12k|                let eqc = self.v1.cmpeq(c);
  182|  9.12k|                let eqd = self.v1.cmpeq(d);
  183|  9.12k|                let or1 = eqa.or(eqb);
  184|  9.12k|                let or2 = eqc.or(eqd);
  185|  9.12k|                let or3 = or1.or(or2);
  186|  9.12k|                if or3.movemask_will_have_non_zero() {
  187|    485|                    let mask = eqa.movemask();
  188|    485|                    if mask.has_non_zero() {
  189|    108|                        return Some(cur.add(topos(mask)));
  190|    377|                    }
  191|    377|
  192|    377|                    let mask = eqb.movemask();
  193|    377|                    if mask.has_non_zero() {
  194|    126|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    251|                    }
  196|    251|
  197|    251|                    let mask = eqc.movemask();
  198|    251|                    if mask.has_non_zero() {
  199|    151|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    100|                    }
  201|    100|
  202|    100|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|    100|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  8.64k|                }
  206|  8.64k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  20.3k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  44.6k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  20.4k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    926|                return Some(cur);
  216|  19.5k|            }
  217|  19.5k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  24.1k|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  23.5k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  23.5k|            return self.search_chunk(cur, topos);
  228|    654|        }
  229|    654|        None
  230|  26.8k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  26.5k|    unsafe fn search_chunk(
  417|  26.5k|        &self,
  418|  26.5k|        cur: *const u8,
  419|  26.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  26.5k|    ) -> Option<*const u8> {
  421|  26.5k|        let chunk = V::load_unaligned(cur);
  422|  26.5k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  26.5k|        if mask.has_non_zero() {
  424|  1.35k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  25.2k|            None
  427|       |        }
  428|  26.5k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   700k|    unsafe fn search_chunk(
  671|   700k|        &self,
  672|   700k|        cur: *const u8,
  673|   700k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   700k|    ) -> Option<*const u8> {
  675|   700k|        let chunk = V::load_unaligned(cur);
  676|   700k|        let eq1 = self.v1.cmpeq(chunk);
  677|   700k|        let eq2 = self.v2.cmpeq(chunk);
  678|   700k|        let mask = eq1.or(eq2).movemask();
  679|   700k|        if mask.has_non_zero() {
  680|   182k|            let mask1 = eq1.movemask();
  681|   182k|            let mask2 = eq2.movemask();
  682|   182k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   518k|            None
  685|       |        }
  686|   700k|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  69.7k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  69.7k|        One { s1: needle, v1: V::splat(needle) }
  113|  69.7k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  27.9M|    pub(crate) fn needle2(&self) -> u8 {
  468|  27.9M|        self.s2
  469|  27.9M|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   643k|    unsafe fn search_chunk(
  671|   643k|        &self,
  672|   643k|        cur: *const u8,
  673|   643k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   643k|    ) -> Option<*const u8> {
  675|   643k|        let chunk = V::load_unaligned(cur);
  676|   643k|        let eq1 = self.v1.cmpeq(chunk);
  677|   643k|        let eq2 = self.v2.cmpeq(chunk);
  678|   643k|        let mask = eq1.or(eq2).movemask();
  679|   643k|        if mask.has_non_zero() {
  680|   219k|            let mask1 = eq1.movemask();
  681|   219k|            let mask2 = eq2.movemask();
  682|   219k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   424k|            None
  685|       |        }
  686|   643k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   395k|    pub(crate) unsafe fn find_raw(
  494|   395k|        &self,
  495|   395k|        start: *const u8,
  496|   395k|        end: *const u8,
  497|   395k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   395k|        let topos = V::Mask::first_offset;
  505|   395k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   395k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   149k|            return Some(cur);
  517|   246k|        }
  518|   246k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|   246k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|   246k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|   246k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|   319k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  81.2k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  8.07k|                return Some(cur);
  554|  73.1k|            }
  555|  73.1k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|   238k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|   224k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|   224k|            return self.search_chunk(cur, topos);
  566|  13.6k|        }
  567|  13.6k|        None
  568|   395k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  29.2k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  29.2k|    start: *const u8,
 1150|  29.2k|    end: *const u8,
 1151|  29.2k|    confirm: F,
 1152|  29.2k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  29.2k|    let mut ptr = start;
 1155|   198k|    while ptr < end {
 1156|   170k|        if confirm(*ptr) {
 1157|  1.22k|            return Some(ptr);
 1158|   169k|        }
 1159|   169k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  27.9k|    None
 1162|  29.2k|}
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  17.5M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  17.5M|        Two {
  452|  17.5M|            s1: needle1,
  453|  17.5M|            s2: needle2,
  454|  17.5M|            v1: V::splat(needle1),
  455|  17.5M|            v2: V::splat(needle2),
  456|  17.5M|        }
  457|  17.5M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  13.6M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  13.6M|    start: *const u8,
 1150|  13.6M|    end: *const u8,
 1151|  13.6M|    confirm: F,
 1152|  13.6M|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  13.6M|    let mut ptr = start;
 1155|  41.4M|    while ptr < end {
 1156|  28.3M|        if confirm(*ptr) {
 1157|   505k|            return Some(ptr);
 1158|  27.8M|        }
 1159|  27.8M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  13.1M|    None
 1162|  13.6M|}

_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  26.8k|    unsafe fn find_raw_avx2(
  397|  26.8k|        &self,
  398|  26.8k|        start: *const u8,
  399|  26.8k|        end: *const u8,
  400|  26.8k|    ) -> Option<*const u8> {
  401|  26.8k|        self.avx2.find_raw(start, end)
  402|  26.8k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  17.5M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  17.5M|        Two {
  558|  17.5M|            sse2: generic::Two::new(needle1, needle2),
  559|  17.5M|            avx2: generic::Two::new(needle1, needle2),
  560|  17.5M|        }
  561|  17.5M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  17.5M|    pub unsafe fn find_raw(
  655|  17.5M|        &self,
  656|  17.5M|        start: *const u8,
  657|  17.5M|        end: *const u8,
  658|  17.5M|    ) -> Option<*const u8> {
  659|  17.5M|        if start >= end {
  660|  3.10M|            return None;
  661|  14.4M|        }
  662|  14.4M|        let len = end.distance(start);
  663|  14.4M|        if len < __m256i::BYTES {
  664|  14.0M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  13.6M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  13.6M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   395k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   382k|        }
  676|   382k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   382k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   382k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   382k|        // responsibility.
  680|   382k|        //
  681|   382k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   382k|        // means we'd have to annotate this routine with `target_feature`.
  683|   382k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   382k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   382k|        // The real problem is that a routine with a `target_feature`
  686|   382k|        // annotation generally can't be inlined into caller code unless
  687|   382k|        // the caller code has the same target feature annotations. Namely,
  688|   382k|        // the common case (at time of writing) is for calling code to not
  689|   382k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   382k|        // `target_feature` on this routine, it can be inlined which will
  691|   382k|        // handle some of the short-haystack cases above without touching the
  692|   382k|        // architecture specific code.
  693|   382k|        self.find_raw_avx2(start, end)
  694|  17.5M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   382k|    unsafe fn find_raw_avx2(
  805|   382k|        &self,
  806|   382k|        start: *const u8,
  807|   382k|        end: *const u8,
  808|   382k|    ) -> Option<*const u8> {
  809|   382k|        self.avx2.find_raw(start, end)
  810|   382k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  69.7k|    pub unsafe fn find_raw(
  180|  69.7k|        &self,
  181|  69.7k|        start: *const u8,
  182|  69.7k|        end: *const u8,
  183|  69.7k|    ) -> Option<*const u8> {
  184|  69.7k|        if start >= end {
  185|  1.13k|            return None;
  186|  68.6k|        }
  187|  68.6k|        let len = end.distance(start);
  188|  68.6k|        if len < __m256i::BYTES {
  189|  41.7k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  29.2k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  29.2k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  12.5k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  26.8k|        }
  201|  26.8k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  26.8k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  26.8k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  26.8k|        // responsibility.
  205|  26.8k|        //
  206|  26.8k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  26.8k|        // means we'd have to annotate this routine with `target_feature`.
  208|  26.8k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  26.8k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  26.8k|        // The real problem is that a routine with a `target_feature`
  211|  26.8k|        // annotation generally can't be inlined into caller code unless
  212|  26.8k|        // the caller code has the same target feature annotations. Namely,
  213|  26.8k|        // the common case (at time of writing) is for calling code to not
  214|  26.8k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  26.8k|        // `target_feature` on this routine, it can be inlined which will
  216|  26.8k|        // handle some of the short-haystack cases above without touching the
  217|  26.8k|        // architecture specific code.
  218|  26.8k|        self.find_raw_avx2(start, end)
  219|  69.7k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   395k|    unsafe fn find_raw_sse2(
  765|   395k|        &self,
  766|   395k|        start: *const u8,
  767|   395k|        end: *const u8,
  768|   395k|    ) -> Option<*const u8> {
  769|   395k|        self.sse2.find_raw(start, end)
  770|   395k|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  28.3M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  28.3M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  28.3M|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  12.5k|    unsafe fn find_raw_sse2(
  337|  12.5k|        &self,
  338|  12.5k|        start: *const u8,
  339|  12.5k|        end: *const u8,
  340|  12.5k|    ) -> Option<*const u8> {
  341|  12.5k|        self.sse2.find_raw(start, end)
  342|  12.5k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  69.7k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  69.7k|        One {
   71|  69.7k|            sse2: generic::One::new(needle),
   72|  69.7k|            avx2: generic::One::new(needle),
   73|  69.7k|        }
   74|  69.7k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   170k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   170k|                    b == self.sse2.needle1()
  194|   170k|                })

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  17.5M|pub(crate) fn memchr2_raw(
  221|  17.5M|    n1: u8,
  222|  17.5M|    n2: u8,
  223|  17.5M|    start: *const u8,
  224|  17.5M|    end: *const u8,
  225|  17.5M|) -> Option<*const u8> {
  226|  17.5M|    // SAFETY: We provide a valid function pointer type.
  227|  17.5M|    unsafe_ifunc!(
  228|  17.5M|        Two,
  229|  17.5M|        find_raw,
  230|  17.5M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  17.5M|        Option<*const u8>,
  232|  17.5M|        start,
  233|  17.5M|        end,
  234|  17.5M|        n1,
  235|  17.5M|        n2
  236|  17.5M|    )
  237|  17.5M|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|  69.7k|pub(crate) fn memchr_raw(
  175|  69.7k|    n1: u8,
  176|  69.7k|    start: *const u8,
  177|  69.7k|    end: *const u8,
  178|  69.7k|) -> Option<*const u8> {
  179|  69.7k|    // SAFETY: We provide a valid function pointer type.
  180|  69.7k|    unsafe_ifunc!(
  181|  69.7k|        One,
  182|  69.7k|        find_raw,
  183|  69.7k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  69.7k|        Option<*const u8>,
  185|  69.7k|        start,
  186|  69.7k|        end,
  187|  69.7k|        n1
  188|  69.7k|    )
  189|  69.7k|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  17.5M|        unsafe fn find_avx2(
   79|  17.5M|            $($needle: u8),+,
   80|  17.5M|            $hay_start: *const u8,
   81|  17.5M|            $hay_end: *const u8,
   82|  17.5M|        ) -> $retty {
   83|  17.5M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  17.5M|            $memchrty::new_unchecked($($needle),+)
   85|  17.5M|                .$memchrfind($hay_start, $hay_end)
   86|  17.5M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  69.7k|        unsafe fn find_avx2(
   79|  69.7k|            $($needle: u8),+,
   80|  69.7k|            $hay_start: *const u8,
   81|  69.7k|            $hay_end: *const u8,
   82|  69.7k|        ) -> $retty {
   83|  69.7k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  69.7k|            $memchrty::new_unchecked($($needle),+)
   85|  69.7k|                .$memchrfind($hay_start, $hay_end)
   86|  69.7k|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  16.6M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  16.6M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  16.6M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  16.6M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   478k|    fn as_usize(self) -> usize {
   27|   478k|        self as usize
   28|   478k|    }

_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCsgLOhukngm62_5oxttl:
  377|  15.3M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  15.3M|        Memchr2 {
  379|  15.3M|            needle1,
  380|  15.3M|            needle2,
  381|  15.3M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  15.3M|        }
  383|  15.3M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCsgLOhukngm62_5oxttl:
  574|  17.5M|unsafe fn memchr2_raw(
  575|  17.5M|    needle1: u8,
  576|  17.5M|    needle2: u8,
  577|  17.5M|    start: *const u8,
  578|  17.5M|    end: *const u8,
  579|  17.5M|) -> Option<*const u8> {
  580|  17.5M|    #[cfg(target_arch = "x86_64")]
  581|  17.5M|    {
  582|  17.5M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  17.5M|    }
  584|  17.5M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  17.5M|    {
  586|  17.5M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  17.5M|    }
  588|  17.5M|    #[cfg(target_arch = "aarch64")]
  589|  17.5M|    {
  590|  17.5M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  17.5M|    }
  592|  17.5M|    #[cfg(not(any(
  593|  17.5M|        target_arch = "x86_64",
  594|  17.5M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  17.5M|        target_arch = "aarch64"
  596|  17.5M|    )))]
  597|  17.5M|    {
  598|  17.5M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  17.5M|            .find_raw(start, end)
  600|  17.5M|    }
  601|  17.5M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCsgLOhukngm62_5oxttl:
  232|  15.3M|pub fn memchr2_iter<'h>(
  233|  15.3M|    needle1: u8,
  234|  15.3M|    needle2: u8,
  235|  15.3M|    haystack: &'h [u8],
  236|  15.3M|) -> Memchr2<'h> {
  237|  15.3M|    Memchr2::new(needle1, needle2, haystack)
  238|  15.3M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCsgLOhukngm62_5oxttl:
   27|  69.7k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  69.7k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  69.7k|    // pointer between start and end.
   30|  69.7k|    unsafe {
   31|  69.7k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  69.7k|        })
   34|  69.7k|    }
   35|  69.7k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr7memchr2CsgLOhukngm62_5oxttl:
   92|  2.12M|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|  2.12M|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|  2.12M|    // pointer between start and end.
   95|  2.12M|    unsafe {
   96|  2.12M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|  2.12M|        })
   99|  2.12M|    }
  100|  2.12M|}
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsgLOhukngm62_5oxttl:
  390|  15.3M|    fn next(&mut self) -> Option<usize> {
  391|  15.3M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  15.3M|        // pointers returns will fall within the start and end bounds, and this
  393|  15.3M|        // upholds the safety contract of `self.it.next`.
  394|  15.3M|        unsafe {
  395|  15.3M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  15.3M|        }
  397|  15.3M|    }
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr7memchr20CsgLOhukngm62_5oxttl:
   96|  2.12M|        generic::search_slice_with_raw(haystack, |start, end| {
   97|  2.12M|            memchr2_raw(needle1, needle2, start, end)
   98|  2.12M|        })
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsgLOhukngm62_5oxttl:
  395|  15.3M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|  69.7k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  69.7k|            memchr_raw(needle, start, end)
   33|  69.7k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|  69.7k|unsafe fn memchr_raw(
  505|  69.7k|    needle: u8,
  506|  69.7k|    start: *const u8,
  507|  69.7k|    end: *const u8,
  508|  69.7k|) -> Option<*const u8> {
  509|  69.7k|    #[cfg(target_arch = "x86_64")]
  510|  69.7k|    {
  511|  69.7k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  69.7k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  69.7k|        // time. This function also handles using a fallback if neither AVX2
  514|  69.7k|        // nor SSE2 (unusual) are available.
  515|  69.7k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  69.7k|    }
  517|  69.7k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  69.7k|    {
  519|  69.7k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  69.7k|    }
  521|  69.7k|    #[cfg(target_arch = "aarch64")]
  522|  69.7k|    {
  523|  69.7k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  69.7k|    }
  525|  69.7k|    #[cfg(not(any(
  526|  69.7k|        target_arch = "x86_64",
  527|  69.7k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  69.7k|        target_arch = "aarch64"
  529|  69.7k|    )))]
  530|  69.7k|    {
  531|  69.7k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  69.7k|    }
  533|  69.7k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   727k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   727k|            _mm_loadu_si128(data as *const __m128i)
  222|   727k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   411k|    fn first_offset(self) -> usize {
  174|   411k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   411k|        // the bytes so we are in practice), where the most significant byte
  176|   411k|        // is at a higher address. That means the least significant bit that
  177|   411k|        // is set corresponds to the position of our first matching byte.
  178|   411k|        // That position corresponds to the number of zeros after the least
  179|   411k|        // significant bit.
  180|   411k|        self.get_for_offset().trailing_zeros() as usize
  181|   411k|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   411k|    fn get_for_offset(self) -> u32 {
  129|   411k|        #[cfg(target_endian = "big")]
  130|   411k|        {
  131|   411k|            self.0.swap_bytes()
  132|   411k|        }
  133|   411k|        #[cfg(target_endian = "little")]
  134|   411k|        {
  135|   411k|            self.0
  136|   411k|        }
  137|   411k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  1.42M|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  1.42M|            _mm_cmpeq_epi8(self, vector2)
  232|  1.42M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  1.09M|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  1.09M|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  1.09M|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  2.04M|    fn has_non_zero(self) -> bool {
  149|  2.04M|        self.0 != 0
  150|  2.04M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  1.77M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  1.77M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  1.77M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|   598k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|   598k|        self.movemask().has_non_zero()
   67|   598k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   714k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   714k|            _mm256_loadu_si256(data as *const __m256i)
  272|   714k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  3.75M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  3.75M|            _mm256_cmpeq_epi8(self, vector2)
  282|  3.75M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  35.1M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  35.1M|            _mm_set1_epi8(byte as i8)
  212|  35.1M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   700k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   700k|            _mm_or_si128(self, vector2)
  242|   700k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   410k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   410k|        SensibleMoveMask(self.0 | other.0)
  165|   410k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  1.21M|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  1.21M|            _mm256_load_si256(data as *const __m256i)
  267|  1.21M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  35.1M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  35.1M|            _mm256_set1_epi8(byte as i8)
  262|  35.1M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  2.44M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  2.44M|            _mm256_or_si256(self, vector2)
  292|  2.44M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCs2cfBPjnRYZ_13libfuzzer_sys:
   49|  34.3k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  34.3k|        // An `Acquire` load is enough because that makes all the initialization
   51|  34.3k|        // operations visible to us, and, this being a fast path, weaker
   52|  34.3k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  34.3k|        // `SeqCst` operations on the slow path.
   54|  34.3k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  34.3k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCs2cfBPjnRYZ_13libfuzzer_sys:
  963|  34.3k|        pub fn get(&self) -> Option<&T> {
  964|  34.3k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  34.3k|                None
  969|       |            }
  970|  34.3k|        }

_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE5parseCsgLOhukngm62_5oxttl:
   49|   216k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|   216k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|   183k|        Ok(Self { tag, positions })
   52|   216k|    }
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagReE10into_innerCsgLOhukngm62_5oxttl:
   62|   183k|    pub fn into_inner(self) -> T {
   63|   183k|        self.tag
   64|   183k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgLOhukngm62_5oxttl:
  558|   216k|#[derive(Default)]
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECsaAh6yFmIely_5oxrdf:
  571|   214k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECsaAh6yFmIely_5oxrdf:
  571|  9.40k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECsaAh6yFmIely_5oxrdf:
  632|   209k|fn parse_langtag(
  633|   209k|    input: &str,
  634|   209k|    output: &mut impl OutputBuffer,
  635|   209k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|   209k|    #[derive(PartialEq, Eq)]
  637|   209k|    enum State {
  638|   209k|        Start,
  639|   209k|        AfterLanguage,
  640|   209k|        AfterExtLang,
  641|   209k|        AfterScript,
  642|   209k|        AfterRegion,
  643|   209k|        InExtension { expected: bool },
  644|   209k|        InPrivateUse { expected: bool },
  645|   209k|    }
  646|   209k|
  647|   209k|    let mut state = State::Start;
  648|   209k|    let mut language_end = 0;
  649|   209k|    let mut extlang_end = 0;
  650|   209k|    let mut script_end = 0;
  651|   209k|    let mut region_end = 0;
  652|   209k|    let mut variant_end = 0;
  653|   209k|    let mut extension_end = 0;
  654|   209k|    let mut extlangs_count = 0;
  655|   273k|    for (subtag, end) in SubTagIterator::new(input) {
  656|   273k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|   273k|        }
  661|   273k|        if subtag.len() > 8 {
  662|  3.49k|            return Err(LanguageTagParseError {
  663|  3.49k|                kind: TagParseErrorKind::SubtagTooLong,
  664|  3.49k|            });
  665|   270k|        }
  666|   270k|        if state == State::Start {
  667|       |            // Primary language
  668|   206k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|  16.7k|                return Err(LanguageTagParseError {
  670|  16.7k|                    kind: TagParseErrorKind::InvalidLanguage,
  671|  16.7k|                });
  672|   189k|            }
  673|   189k|            language_end = end;
  674|   189k|            output.extend(to_lowercase(subtag));
  675|   189k|            if subtag.len() < 4 {
  676|  46.6k|                // extlangs are only allowed for short language tags
  677|  46.6k|                state = State::AfterLanguage;
  678|   143k|            } else {
  679|   143k|                state = State::AfterExtLang;
  680|   143k|            }
  681|  63.8k|        } else if let State::InPrivateUse { .. } = state {
  682|  3.18k|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|  3.18k|            }
  687|  3.18k|            output.push('-');
  688|  3.18k|            output.extend(to_lowercase(subtag));
  689|  3.18k|            state = State::InPrivateUse { expected: false };
  690|  60.7k|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|  5.51k|            if let State::InExtension { expected: true } = state {
  693|  2.10k|                return Err(LanguageTagParseError {
  694|  2.10k|                    kind: TagParseErrorKind::EmptyExtension,
  695|  2.10k|                });
  696|  3.41k|            }
  697|  3.41k|            output.push('-');
  698|  3.41k|            output.push('x');
  699|  3.41k|            state = State::InPrivateUse { expected: true };
  700|  55.1k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|  13.1k|            if let State::InExtension { expected: true } = state {
  703|  2.69k|                return Err(LanguageTagParseError {
  704|  2.69k|                    kind: TagParseErrorKind::EmptyExtension,
  705|  2.69k|                });
  706|  10.4k|            }
  707|  10.4k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|  10.4k|            output.push('-');
  709|  10.4k|            output.push(extension_tag);
  710|  10.4k|            state = State::InExtension { expected: true };
  711|  42.0k|        } else if let State::InExtension { .. } = state {
  712|  6.68k|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|  6.68k|            }
  717|  6.68k|            extension_end = end;
  718|  6.68k|            output.push('-');
  719|  6.68k|            output.extend(to_lowercase(subtag));
  720|  6.68k|            state = State::InExtension { expected: false };
  721|  35.3k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|  7.04k|            extlangs_count += 1;
  723|  7.04k|            if extlangs_count > 3 {
  724|    677|                return Err(LanguageTagParseError {
  725|    677|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|    677|                });
  727|  6.36k|            }
  728|  6.36k|            // valid extlangs
  729|  6.36k|            extlang_end = end;
  730|  6.36k|            output.push('-');
  731|  6.36k|            output.extend(to_lowercase(subtag));
  732|  28.3k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|  17.6k|            && subtag.len() == 4
  734|  6.04k|            && is_alphabetic(subtag)
  735|  6.04k|        {
  736|  6.04k|            // Script
  737|  6.04k|            script_end = end;
  738|  6.04k|            output.push('-');
  739|  6.04k|            output.extend(to_uppercase_first(subtag));
  740|  6.04k|            state = State::AfterScript;
  741|  22.2k|        } else if (state == State::AfterLanguage
  742|  13.4k|            || state == State::AfterExtLang
  743|  10.6k|            || state == State::AfterScript)
  744|  15.9k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|  6.50k|                || subtag.len() == 3 && is_numeric(subtag))
  746|  9.40k|        {
  747|  9.40k|            // Region
  748|  9.40k|            region_end = end;
  749|  9.40k|            output.push('-');
  750|  9.40k|            output.extend(to_uppercase(subtag));
  751|  9.40k|            state = State::AfterRegion;
  752|  12.8k|        } else if (state == State::AfterLanguage
  753|  10.8k|            || state == State::AfterExtLang
  754|  10.5k|            || state == State::AfterScript
  755|  6.34k|            || state == State::AfterRegion)
  756|  12.8k|            && is_alphanumeric(subtag)
  757|  12.8k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|  4.36k|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|  8.48k|        {
  760|  8.48k|            // Variant
  761|  8.48k|            variant_end = end;
  762|  8.48k|            output.push('-');
  763|  8.48k|            output.extend(to_lowercase(subtag));
  764|  8.48k|            state = State::AfterRegion;
  765|  8.48k|        } else {
  766|  4.36k|            return Err(LanguageTagParseError {
  767|  4.36k|                kind: TagParseErrorKind::InvalidSubtag,
  768|  4.36k|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|   179k|    if let State::InExtension { expected: true } = state {
  774|  2.24k|        return Err(LanguageTagParseError {
  775|  2.24k|            kind: TagParseErrorKind::EmptyExtension,
  776|  2.24k|        });
  777|   177k|    }
  778|   177k|    if let State::InPrivateUse { expected: true } = state {
  779|    973|        return Err(LanguageTagParseError {
  780|    973|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|    973|        });
  782|   176k|    }
  783|   176k|
  784|   176k|    //We make sure we have not skipped anyone
  785|   176k|    if extlang_end < language_end {
  786|   172k|        extlang_end = language_end;
  787|   172k|    }
  788|   176k|    if script_end < extlang_end {
  789|   172k|        script_end = extlang_end;
  790|   172k|    }
  791|   176k|    if region_end < script_end {
  792|   170k|        region_end = script_end;
  793|   170k|    }
  794|   176k|    if variant_end < region_end {
  795|   169k|        variant_end = region_end;
  796|   169k|    }
  797|   176k|    if extension_end < variant_end {
  798|   173k|        extension_end = variant_end;
  799|   173k|    }
  800|       |
  801|   176k|    Ok(TagElementsPositions {
  802|   176k|        language_end,
  803|   176k|        extlang_end,
  804|   176k|        script_end,
  805|   176k|        region_end,
  806|   176k|        variant_end,
  807|   176k|        extension_end,
  808|   176k|    })
  809|   209k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECsaAh6yFmIely_5oxrdf:
  571|  6.04k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECsaAh6yFmIely_5oxrdf:
  587|   216k|fn parse_language_tag(
  588|   216k|    input: &str,
  589|   216k|    output: &mut impl OutputBuffer,
  590|   216k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|   216k|    if let Some(tag) = GRANDFATHEREDS
  593|   216k|        .iter()
  594|   216k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|   216k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|  6.61k|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|  6.61k|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|  6.61k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|  6.61k|            Ok(TagElementsPositions {
  618|  6.61k|                language_end: input.len(),
  619|  6.61k|                extlang_end: input.len(),
  620|  6.61k|                script_end: input.len(),
  621|  6.61k|                region_end: input.len(),
  622|  6.61k|                variant_end: input.len(),
  623|  6.61k|                extension_end: input.len(),
  624|  6.61k|            })
  625|       |        }
  626|       |    } else {
  627|   209k|        parse_langtag(input, output)
  628|       |    }
  629|   216k|}
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECsaAh6yFmIely_5oxrdf:
  571|  6.61k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CsaAh6yFmIely_5oxrdf:
  594|  5.63M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCs87w0kKV82sz_10oxilangtag12to_uppercaseCsaAh6yFmIely_5oxrdf:
  891|  9.40k|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  892|  9.40k|    s.chars().map(|c| c.to_ascii_uppercase())
  893|  9.40k|}
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsaAh6yFmIely_5oxrdf:
  636|   435k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag15is_alphanumericCsaAh6yFmIely_5oxrdf:
  881|  35.8k|fn is_alphanumeric(s: &str) -> bool {
  882|  35.8k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  883|  35.8k|}
_RNvCs87w0kKV82sz_10oxilangtag18to_uppercase_firstCsaAh6yFmIely_5oxrdf:
  897|  6.04k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  898|  6.04k|    let mut chars = s.chars();
  899|  6.04k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  900|  6.04k|}
_RNvXsq_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsaAh6yFmIely_5oxrdf:
  563|  67.9k|    fn push(&mut self, _: char) {}
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCsaAh6yFmIely_5oxrdf:
  871|   220k|fn is_alphabetic(s: &str) -> bool {
  872|   220k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|   220k|}
_RNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dashCsaAh6yFmIely_5oxrdf:
  886|  6.61k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  887|  6.61k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  888|  6.61k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCsaAh6yFmIely_5oxrdf:
  903|   214k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|   214k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|   214k|}
_RNvCs87w0kKV82sz_10oxilangtag10is_numericCsaAh6yFmIely_5oxrdf:
  876|  3.26k|fn is_numeric(s: &str) -> bool {
  877|  3.26k|    s.chars().all(|x| x.is_ascii_digit())
  878|  3.26k|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsaAh6yFmIely_5oxrdf:
  862|   453k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|   453k|        let tag = self.split.next()?;
  864|   273k|        let tag_end = self.position + tag.len();
  865|   273k|        self.position = tag_end + 1;
  866|   273k|        Some((tag, tag_end))
  867|   453k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCsaAh6yFmIely_5oxrdf:
  850|   209k|    fn new(input: &'a str) -> Self {
  851|   209k|        Self {
  852|   209k|            split: input.split('-'),
  853|   209k|            position: 0,
  854|   209k|        }
  855|   209k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag10is_numeric0B3_:
  877|  3.26k|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCs87w0kKV82sz_10oxilangtag15is_alphanumeric0B3_:
  882|   107k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNvXso_Cs87w0kKV82sz_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  490|  33.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  491|  33.3k|        match self.kind {
  492|       |            TagParseErrorKind::EmptyExtension => {
  493|  7.04k|                write!(f, "If an extension subtag is present, it must not be empty")
  494|       |            }
  495|       |            TagParseErrorKind::EmptyPrivateUse => {
  496|    973|                write!(f, "If the `x` subtag is present, it must not be empty")
  497|       |            }
  498|       |            TagParseErrorKind::ForbiddenChar => {
  499|      0|                write!(f, "The langtag contains a char not allowed")
  500|       |            }
  501|  4.36k|            TagParseErrorKind::InvalidSubtag => write!(
  502|  4.36k|                f,
  503|  4.36k|                "A subtag fails to parse, it does not match any other subtags"
  504|  4.36k|            ),
  505|  16.7k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  506|       |            TagParseErrorKind::SubtagTooLong => {
  507|  3.49k|                write!(f, "A subtag may be eight characters in length at maximum")
  508|       |            }
  509|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  510|       |            TagParseErrorKind::TooManyExtlangs => {
  511|    677|                write!(f, "At maximum three extlangs are allowed")
  512|       |            }
  513|       |        }
  514|  33.3k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  1.00M|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCs87w0kKV82sz_10oxilangtag23is_alphanumeric_or_dash0B3_:
  887|   141k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer4pushCsgLOhukngm62_5oxttl:
 1104|  2.35M|    fn push(&mut self, c: char) {
 1105|  2.35M|        self.push(c);
 1106|  2.35M|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer5clearCsgLOhukngm62_5oxttl:
 1114|  39.2k|    fn clear(&mut self) {
 1115|  39.2k|        self.clear();
 1116|  39.2k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8push_strCsgLOhukngm62_5oxttl:
 1109|   363k|    fn push_str(&mut self, s: &str) {
 1110|   363k|        self.push_str(s);
 1111|   363k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer8truncateCsgLOhukngm62_5oxttl:
 1119|   242k|    fn truncate(&mut self, new_len: usize) {
 1120|   242k|        self.truncate(new_len);
 1121|   242k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer3lenCsgLOhukngm62_5oxttl:
 1124|   741k|    fn len(&self) -> usize {
 1125|   741k|        self.len()
 1126|   741k|    }
_RNvXsZ_CsbOXESBDtkxG_5oxiriNtNtCsjOdcKtOMjJI_5alloc6string6StringNtB5_12OutputBuffer6as_strCsgLOhukngm62_5oxttl:
 1129|   516k|    fn as_str(&self) -> &str {
 1130|   516k|        self.as_str()
 1131|   516k|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsgLOhukngm62_5oxttl:
 1629|   185k|fn is_url_query_code_point(c: char) -> bool {
 1630|   185k|    is_url_code_point(c)
 1631|  22.4k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   185k|}
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsgLOhukngm62_5oxttl:
 1092|   423k|    fn len(&self) -> usize {
 1093|   423k|        self.len
 1094|   423k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsgLOhukngm62_5oxttl:
 1087|  83.8k|    fn truncate(&mut self, new_len: usize) {
 1088|  83.8k|        self.len = new_len;
 1089|  83.8k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgLOhukngm62_5oxttl:
 1065|   105k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsgLOhukngm62_5oxttl:
 1072|  2.27M|    fn push(&mut self, c: char) {
 1073|  2.27M|        self.len += c.len_utf8();
 1074|  2.27M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsgLOhukngm62_5oxttl:
 1097|   154k|    fn as_str(&self) -> &str {
 1098|   154k|        ""
 1099|   154k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsgLOhukngm62_5oxttl:
 1141|  5.22M|    fn next(&mut self) -> Option<char> {
 1142|  5.22M|        if let Some(head) = self.value.next() {
 1143|  4.80M|            self.position += head.len_utf8();
 1144|  4.80M|            Some(head)
 1145|       |        } else {
 1146|   419k|            None
 1147|       |        }
 1148|  5.22M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsgLOhukngm62_5oxttl:
 1151|   891k|    fn front(&self) -> Option<char> {
 1152|   891k|        self.value.clone().next()
 1153|   891k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsgLOhukngm62_5oxttl:
 1156|   611k|    fn starts_with(&self, c: char) -> bool {
 1157|   611k|        self.value.as_str().starts_with(c)
 1158|   611k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsgLOhukngm62_5oxttl:
 1584|  1.22M|fn is_url_code_point(c: char) -> bool {
 1585|  1.22M|    matches!(c,
 1586|   398k|        'a'..='z'
 1587|   224k|        | 'A'..='Z'
 1588|   563k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   135k|        | '\u{A0}'..='\u{D7FF}'
 1609|  41.5k|        | '\u{F900}'..='\u{FDCF}'
 1610|  41.5k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  41.5k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  41.5k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  41.5k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  41.5k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  41.5k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  41.5k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  41.5k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  41.5k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  41.5k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  41.5k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  41.5k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  41.5k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  41.5k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     32|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  1.22M|}
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_queryCsgLOhukngm62_5oxttl:
 1504|  61.2k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   235k|        while let Some(c) = self.input.next() {
 1506|   205k|            if c == '#' {
 1507|  19.7k|                self.output_positions.query_end = self.output.len();
 1508|  19.7k|                self.output.push('#');
 1509|  19.7k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   185k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  30.2k|        self.output_positions.query_end = self.output.len();
 1515|  30.2k|        Ok(())
 1516|  61.2k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCsgLOhukngm62_5oxttl:
   70|   105k|    pub fn parse_unchecked(iri: T) -> Self {
   71|   105k|        let positions =
   72|   105k|            IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default()).unwrap();
   73|   105k|        Self { iri, positions }
   74|   105k|    }
_RNvXsg_CsbOXESBDtkxG_5oxiriINtB5_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  417|   240k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  418|   240k|        self.iri.fmt(f)
  419|   240k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1534|  1.04M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.04M|        if UNCHECKED || is_url_code_point(c) {
 1536|   985k|            self.output.push(c);
 1537|   985k|            Ok(())
 1538|  58.3k|        } else if c == '%' {
 1539|  20.5k|            self.read_echar()
 1540|       |        } else {
 1541|  37.7k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.04M|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCsgLOhukngm62_5oxttl:
  717|   141k|    pub fn path(&self) -> &str {
  718|   141k|        self.0.path()
  719|   141k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCsgLOhukngm62_5oxttl:
 1245|  90.5k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  90.5k|        if self.input.starts_with('/') {
 1247|  84.6k|            self.input.next();
 1248|  84.6k|            self.output.push('/');
 1249|  84.6k|            self.parse_authority()
 1250|       |        } else {
 1251|  5.82k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  5.82k|            self.parse_path()
 1253|       |        }
 1254|  90.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCsgLOhukngm62_5oxttl:
 1439|  84.6k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  84.6k|        match c {
 1441|       |            None => {
 1442|  23.3k|                self.output_positions.path_end = self.output.len();
 1443|  23.3k|                self.output_positions.query_end = self.output.len();
 1444|  23.3k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  8.02k|                self.output_positions.path_end = self.output.len();
 1448|  8.02k|                self.output.push('?');
 1449|  8.02k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  4.69k|                self.output_positions.path_end = self.output.len();
 1453|  4.69k|                self.output_positions.query_end = self.output.len();
 1454|  4.69k|                self.output.push('#');
 1455|  4.69k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  48.6k|                self.output.push('/');
 1459|  48.6k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  84.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E23parse_path_or_authorityCsgLOhukngm62_5oxttl:
 1245|  31.2k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  31.2k|        if self.input.starts_with('/') {
 1247|  15.7k|            self.input.next();
 1248|  15.7k|            self.output.push('/');
 1249|  15.7k|            self.parse_authority()
 1250|       |        } else {
 1251|  15.5k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  15.5k|            self.parse_path()
 1253|       |        }
 1254|  31.2k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E16parse_path_startCsgLOhukngm62_5oxttl:
 1439|  80.5k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  80.5k|        match c {
 1441|       |            None => {
 1442|  38.6k|                self.output_positions.path_end = self.output.len();
 1443|  38.6k|                self.output_positions.query_end = self.output.len();
 1444|  38.6k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  15.7k|                self.output_positions.path_end = self.output.len();
 1448|  15.7k|                self.output.push('?');
 1449|  15.7k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  13.5k|                self.output_positions.path_end = self.output.len();
 1453|  13.5k|                self.output_positions.query_end = self.output.len();
 1454|  13.5k|                self.output.push('#');
 1455|  13.5k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  12.6k|                self.output.push('/');
 1459|  12.6k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  80.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCsgLOhukngm62_5oxttl:
 1359|  84.6k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  84.6k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  11.1k|            let start_position = self.input.position;
 1363|  44.8k|            while let Some(c) = self.input.next() {
 1364|  44.8k|                self.output.push(c);
 1365|  44.8k|                if c == ']' {
 1366|  11.1k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  11.1k|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|  11.1k|                    }
 1372|       |
 1373|  11.1k|                    let c = self.input.next();
 1374|  11.1k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  2.92k|                            self.output.push(':');
 1377|  2.92k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  8.27k|                            self.output_positions.authority_end = self.output.len();
 1381|  8.27k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  33.6k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   596k|            loop {
 1404|   596k|                let c = self.input.next();
 1405|   596k|                match c {
 1406|       |                    Some(':') => {
 1407|  17.6k|                        self.output.push(':');
 1408|  17.6k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  55.8k|                        self.output_positions.authority_end = self.output.len();
 1412|  55.8k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   523k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  84.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E5parseCsgLOhukngm62_5oxttl:
 1174|   422k|    fn parse(
 1175|   422k|        iri: &'a str,
 1176|   422k|        base: Option<IriRef<&'a str>>,
 1177|   422k|        output: &'a mut O,
 1178|   422k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   422k|        let mut parser = Self {
 1180|   422k|            iri,
 1181|   422k|            base,
 1182|   422k|            input: ParserInput {
 1183|   422k|                value: iri.chars(),
 1184|   422k|                position: 0,
 1185|   422k|            },
 1186|   422k|            output,
 1187|   422k|            output_positions: IriElementsPositions {
 1188|   422k|                scheme_end: 0,
 1189|   422k|                authority_end: 0,
 1190|   422k|                path_end: 0,
 1191|   422k|                query_end: 0,
 1192|   422k|            },
 1193|   422k|            input_scheme_end: 0,
 1194|   422k|        };
 1195|   422k|        parser.parse_scheme_start()?;
 1196|   322k|        Ok(parser.output_positions)
 1197|   422k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E15parse_authorityCsgLOhukngm62_5oxttl:
 1335|   121k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   304k|        loop {
 1338|   304k|            let c = self.input.next();
 1339|   304k|            match c {
 1340|       |                Some('@') => {
 1341|  5.13k|                    self.output.push('@');
 1342|  5.13k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   110k|                    self.input = ParserInput {
 1346|   110k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   110k|                        position: self.input_scheme_end + 2,
 1348|   110k|                    };
 1349|   110k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   110k|                    return self.parse_host();
 1351|       |                }
 1352|   189k|                Some(c) => {
 1353|   189k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   121k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_fragmentCsgLOhukngm62_5oxttl:
 1518|  64.1k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   217k|        while let Some(c) = self.input.next() {
 1520|   169k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  48.3k|        Ok(())
 1523|  64.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1546|  78.7k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  78.7k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  78.7k|            self.output.push(c);
 1549|  78.7k|            Ok(())
 1550|      0|        } else if c == '%' {
 1551|      0|            self.read_echar()
 1552|       |        } else {
 1553|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  78.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCsgLOhukngm62_5oxttl:
 1174|   105k|    fn parse(
 1175|   105k|        iri: &'a str,
 1176|   105k|        base: Option<IriRef<&'a str>>,
 1177|   105k|        output: &'a mut O,
 1178|   105k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   105k|        let mut parser = Self {
 1180|   105k|            iri,
 1181|   105k|            base,
 1182|   105k|            input: ParserInput {
 1183|   105k|                value: iri.chars(),
 1184|   105k|                position: 0,
 1185|   105k|            },
 1186|   105k|            output,
 1187|   105k|            output_positions: IriElementsPositions {
 1188|   105k|                scheme_end: 0,
 1189|   105k|                authority_end: 0,
 1190|   105k|                path_end: 0,
 1191|   105k|                query_end: 0,
 1192|   105k|            },
 1193|   105k|            input_scheme_end: 0,
 1194|   105k|        };
 1195|   105k|        parser.parse_scheme_start()?;
 1196|   105k|        Ok(parser.output_positions)
 1197|   105k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1546|   185k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   185k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   164k|            self.output.push(c);
 1549|   164k|            Ok(())
 1550|  21.0k|        } else if c == '%' {
 1551|  14.6k|            self.read_echar()
 1552|       |        } else {
 1553|  6.40k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   185k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE4pathCsgLOhukngm62_5oxttl:
  258|   141k|    pub fn path(&self) -> &str {
  259|   141k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  260|   141k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE6as_refCsgLOhukngm62_5oxttl:
  154|   422k|    pub fn as_ref(&self) -> IriRef<&str> {
  155|   422k|        IriRef {
  156|   422k|            iri: &self.iri,
  157|   422k|            positions: self.positions,
  158|   422k|        }
  159|   422k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCsgLOhukngm62_5oxttl:
 1504|  21.1k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  99.8k|        while let Some(c) = self.input.next() {
 1506|  88.5k|            if c == '#' {
 1507|  9.85k|                self.output_positions.query_end = self.output.len();
 1508|  9.85k|                self.output.push('#');
 1509|  9.85k|                return self.parse_fragment();
 1510|       |            } else {
 1511|  78.7k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  11.2k|        self.output_positions.query_end = self.output.len();
 1515|  11.2k|        Ok(())
 1516|  21.1k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCsgLOhukngm62_5oxttl:
   89|   422k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|   422k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|   422k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|   322k|        Ok(IriRef {
   93|   322k|            iri: target_buffer,
   94|   322k|            positions,
   95|   322k|        })
   96|   422k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCsgLOhukngm62_5oxttl:
 1534|  1.36M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.36M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.36M|            self.output.push(c);
 1537|  1.36M|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.36M|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE7resolveCsgLOhukngm62_5oxttl:
  584|   422k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  585|   422k|        Ok(Iri(self.0.resolve(iri)?))
  586|   422k|    }
_RNvXsL_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsgLOhukngm62_5oxttl:
  896|   240k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  897|   240k|        self.0.fmt(f)
  898|   240k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCsgLOhukngm62_5oxttl:
 1199|   105k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   105k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   105k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   105k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E11parse_erroruECsgLOhukngm62_5oxttl:
 1578|  99.8k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  99.8k|        Err(IriParseError { kind })
 1580|  99.8k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E18parse_scheme_startCsgLOhukngm62_5oxttl:
 1199|   422k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   422k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|  3.29k|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|  3.29k|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   332k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|   323k|            _ => self.parse_relative(),
 1210|       |        }
 1211|   422k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_hostCsgLOhukngm62_5oxttl:
 1359|   115k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   115k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  52.4k|            let start_position = self.input.position;
 1363|   264k|            while let Some(c) = self.input.next() {
 1364|   250k|                self.output.push(c);
 1365|   250k|                if c == ']' {
 1366|  38.8k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  38.8k|                    if !UNCHECKED {
 1368|  38.8k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|  4.85k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  33.9k|                        }
 1371|      0|                    }
 1372|       |
 1373|  33.9k|                    let c = self.input.next();
 1374|  33.9k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  13.9k|                            self.output.push(':');
 1377|  13.9k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  12.8k|                            self.output_positions.authority_end = self.output.len();
 1381|  12.8k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  7.10k|                        Some(c) => {
 1384|  7.10k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  7.10k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   211k|                }
 1393|       |            }
 1394|  13.5k|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|  13.5k|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   180k|            loop {
 1404|   180k|                let c = self.input.next();
 1405|   180k|                match c {
 1406|       |                    Some(':') => {
 1407|  22.4k|                        self.output.push(':');
 1408|  22.4k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  38.4k|                        self.output_positions.authority_end = self.output.len();
 1412|  38.4k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   119k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   115k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E19remove_last_segmentCsgLOhukngm62_5oxttl:
 1525|   132k|    fn remove_last_segment(&mut self) {
 1526|   132k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1527|   132k|            .rfind('/')
 1528|   132k|            .unwrap_or(0);
 1529|   132k|        self.output
 1530|   132k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1531|   132k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echar0CsgLOhukngm62_5oxttl:
 1561|  31.5k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCsgLOhukngm62_5oxttl:
 1518|  17.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   105k|        while let Some(c) = self.input.next() {
 1520|  87.7k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  17.3k|        Ok(())
 1523|  17.3k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echars_0CsgLOhukngm62_5oxttl:
 1562|  18.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCsgLOhukngm62_5oxttl:
 1335|  84.6k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   652k|        loop {
 1338|   652k|            let c = self.input.next();
 1339|   652k|            match c {
 1340|       |                Some('@') => {
 1341|    859|                    self.output.push('@');
 1342|    859|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  83.8k|                    self.input = ParserInput {
 1346|  83.8k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  83.8k|                        position: self.input_scheme_end + 2,
 1348|  83.8k|                    };
 1349|  83.8k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  83.8k|                    return self.parse_host();
 1351|       |                }
 1352|   568k|                Some(c) => {
 1353|   568k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  84.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E14parse_relativeCsgLOhukngm62_5oxttl:
 1256|   363k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|   363k|        if let Some(base) = self.base {
 1258|   363k|            match self.input.front() {
 1259|       |                None => {
 1260|  87.1k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|  87.1k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|  87.1k|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|  87.1k|                    self.output_positions.path_end = base.positions.path_end;
 1264|  87.1k|                    self.output_positions.query_end = base.positions.query_end;
 1265|  87.1k|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|   127k|                    self.input.next();
 1269|   127k|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|  26.0k|                    self.input.next();
 1273|  26.0k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|  26.0k|                    self.output.push('?');
 1275|  26.0k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|  26.0k|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|  26.0k|                    self.output_positions.path_end = base.positions.path_end;
 1278|  26.0k|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|  15.6k|                    self.input.next();
 1282|  15.6k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|  15.6k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|  15.6k|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|  15.6k|                    self.output_positions.path_end = base.positions.path_end;
 1286|  15.6k|                    self.output_positions.query_end = base.positions.query_end;
 1287|  15.6k|                    self.output.push('#');
 1288|  15.6k|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|   106k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|   106k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|   106k|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|   106k|                    self.output_positions.path_end = base.positions.path_end;
 1295|   106k|                    self.remove_last_segment();
 1296|   106k|                    if self.output.len() > base.positions.scheme_end {
 1297|   101k|                        // We have some path or authority, we keep a base '/'
 1298|   101k|                        self.output.push('/');
 1299|   101k|                    }
 1300|   106k|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|      0|            self.output_positions.scheme_end = 0;
 1305|      0|            self.input_scheme_end = 0;
 1306|      0|            if self.input.starts_with('/') {
 1307|      0|                self.input.next();
 1308|      0|                self.output.push('/');
 1309|      0|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|      0|                self.output_positions.authority_end = 0;
 1312|      0|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|   363k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_pathCsgLOhukngm62_5oxttl:
 1468|   181k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   761k|        loop {
 1470|   761k|            let c = self.input.next();
 1471|   761k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   194k|                    if self.output.as_str().ends_with("/..") {
 1474|  4.07k|                        self.remove_last_segment();
 1475|  4.07k|                        self.remove_last_segment();
 1476|  4.07k|                        self.output.push('/');
 1477|   190k|                    } else if self.output.as_str().ends_with("/.") {
 1478|  17.2k|                        self.remove_last_segment();
 1479|  17.2k|                        self.output.push('/');
 1480|   172k|                    } else if c == Some('/') {
 1481|  31.1k|                        self.output.push('/');
 1482|   141k|                    }
 1483|       |
 1484|   194k|                    if c == Some('?') {
 1485|  19.5k|                        self.output_positions.path_end = self.output.len();
 1486|  19.5k|                        self.output.push('?');
 1487|  19.5k|                        return self.parse_query();
 1488|   174k|                    } else if c == Some('#') {
 1489|  15.2k|                        self.output_positions.path_end = self.output.len();
 1490|  15.2k|                        self.output_positions.query_end = self.output.len();
 1491|  15.2k|                        self.output.push('#');
 1492|  15.2k|                        return self.parse_fragment();
 1493|   159k|                    } else if c.is_none() {
 1494|   118k|                        self.output_positions.path_end = self.output.len();
 1495|   118k|                        self.output_positions.query_end = self.output.len();
 1496|   118k|                        return Ok(());
 1497|  40.9k|                    }
 1498|       |                }
 1499|   566k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|   181k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10read_echarCsgLOhukngm62_5oxttl:
 1558|  35.2k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  35.2k|        let c1 = self.input.next();
 1560|  35.2k|        let c2 = self.input.next();
 1561|  35.2k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  18.3k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  15.5k|            self.output.push('%');
 1565|  15.5k|            self.output.push(c1.unwrap());
 1566|  15.5k|            self.output.push(c2.unwrap());
 1567|  15.5k|            Ok(())
 1568|       |        } else {
 1569|  19.7k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  19.7k|                Some('%'),
 1571|  19.7k|                c1,
 1572|  19.7k|                c2,
 1573|  19.7k|            ]))
 1574|       |        }
 1575|  35.2k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE15parse_uncheckedCsgLOhukngm62_5oxttl:
  567|   105k|    pub fn parse_unchecked(iri: T) -> Self {
  568|   105k|        Iri(IriRef::parse_unchecked(iri))
  569|   105k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E12parse_schemeCsgLOhukngm62_5oxttl:
 1213|  95.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   328k|        loop {
 1215|   328k|            let c = self.input.next();
 1216|   317k|            match c {
 1217|   317k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   232k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  56.4k|                    self.output.push(':');
 1222|  56.4k|                    self.output_positions.scheme_end = self.output.len();
 1223|  56.4k|                    self.input_scheme_end = self.input.position;
 1224|  56.4k|                    return if self.input.starts_with('/') {
 1225|  31.2k|                        self.input.next();
 1226|  31.2k|                        self.output.push('/');
 1227|  31.2k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  25.2k|                        self.output_positions.authority_end = self.output.len();
 1230|  25.2k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|  39.2k|                    self.input = ParserInput {
 1235|  39.2k|                        value: self.iri.chars(),
 1236|  39.2k|                        position: 0,
 1237|  39.2k|                    }; // reset
 1238|  39.2k|                    self.output.clear();
 1239|  39.2k|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  95.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E10parse_portCsgLOhukngm62_5oxttl:
 1420|  36.3k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  44.1k|        loop {
 1422|  44.1k|            let c = self.input.next();
 1423|  44.1k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  29.1k|                    self.output_positions.authority_end = self.output.len();
 1426|  29.1k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  14.9k|                Some(c) => {
 1429|  14.9k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  7.75k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  7.18k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  36.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCsgLOhukngm62_5oxttl:
 1468|  69.7k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   262k|        loop {
 1470|   262k|            let c = self.input.next();
 1471|   262k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  77.0k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  77.0k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  77.0k|                    } else if c == Some('/') {
 1481|  7.30k|                        self.output.push('/');
 1482|  69.7k|                    }
 1483|       |
 1484|  77.0k|                    if c == Some('?') {
 1485|  13.1k|                        self.output_positions.path_end = self.output.len();
 1486|  13.1k|                        self.output.push('?');
 1487|  13.1k|                        return self.parse_query();
 1488|  63.9k|                    } else if c == Some('#') {
 1489|  2.77k|                        self.output_positions.path_end = self.output.len();
 1490|  2.77k|                        self.output_positions.query_end = self.output.len();
 1491|  2.77k|                        self.output.push('#');
 1492|  2.77k|                        return self.parse_fragment();
 1493|  61.1k|                    } else if c.is_none() {
 1494|  53.8k|                        self.output_positions.path_end = self.output.len();
 1495|  53.8k|                        self.output_positions.query_end = self.output.len();
 1496|  53.8k|                        return Ok(());
 1497|  7.30k|                    }
 1498|       |                }
 1499|   185k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  69.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCsgLOhukngm62_5oxttl:
 1213|   105k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   464k|        loop {
 1215|   464k|            let c = self.input.next();
 1216|   464k|            match c {
 1217|   464k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   358k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   105k|                    self.output.push(':');
 1222|   105k|                    self.output_positions.scheme_end = self.output.len();
 1223|   105k|                    self.input_scheme_end = self.input.position;
 1224|   105k|                    return if self.input.starts_with('/') {
 1225|  90.5k|                        self.input.next();
 1226|  90.5k|                        self.output.push('/');
 1227|  90.5k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  15.2k|                        self.output_positions.authority_end = self.output.len();
 1230|  15.2k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   105k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCsgLOhukngm62_5oxttl:
 1420|  20.6k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  50.3k|        loop {
 1422|  50.3k|            let c = self.input.next();
 1423|  50.3k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  20.6k|                    self.output_positions.authority_end = self.output.len();
 1426|  20.6k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  29.7k|                Some(c) => {
 1429|  29.7k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  29.7k|                        self.output.push(c)
 1431|       |                    } else {
 1432|      0|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  20.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtNtCsjOdcKtOMjJI_5alloc6string6StringKb0_E20parse_relative_slashCsgLOhukngm62_5oxttl:
 1317|   127k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1318|   127k|        if self.input.starts_with('/') {
 1319|   105k|            self.input.next();
 1320|   105k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1321|   105k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1322|   105k|            self.output.push('/');
 1323|   105k|            self.output.push('/');
 1324|   105k|            self.parse_authority()
 1325|       |        } else {
 1326|  21.4k|            self.output
 1327|  21.4k|                .push_str(&base.iri[..base.positions.authority_end]);
 1328|  21.4k|            self.output.push('/');
 1329|  21.4k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1330|  21.4k|            self.output_positions.authority_end = base.positions.authority_end;
 1331|  21.4k|            self.parse_path()
 1332|       |        }
 1333|   127k|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCsaAh6yFmIely_5oxrdf:
 1156|   711k|    fn starts_with(&self, c: char) -> bool {
 1157|   711k|        self.value.as_str().starts_with(c)
 1158|   711k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsaAh6yFmIely_5oxrdf:
 1065|   259k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsaAh6yFmIely_5oxrdf:
 1092|   867k|    fn len(&self) -> usize {
 1093|   867k|        self.len
 1094|   867k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsaAh6yFmIely_5oxrdf:
 1072|  5.46M|    fn push(&mut self, c: char) {
 1073|  5.46M|        self.len += c.len_utf8();
 1074|  5.46M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsaAh6yFmIely_5oxrdf:
 1097|   210k|    fn as_str(&self) -> &str {
 1098|   210k|        ""
 1099|   210k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsaAh6yFmIely_5oxrdf:
 1087|   205k|    fn truncate(&mut self, new_len: usize) {
 1088|   205k|        self.len = new_len;
 1089|   205k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCsaAh6yFmIely_5oxrdf:
 1584|  3.05M|fn is_url_code_point(c: char) -> bool {
 1585|  3.05M|    matches!(c,
 1586|  1.72M|        'a'..='z'
 1587|   282k|        | 'A'..='Z'
 1588|   850k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   205k|        | '\u{A0}'..='\u{D7FF}'
 1609|  66.4k|        | '\u{F900}'..='\u{FDCF}'
 1610|  66.4k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  66.4k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  66.4k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  66.4k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  66.4k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  66.4k|        | '\u{50000}'..='\u{5FFFD}'
 1616|  66.4k|        | '\u{60000}'..='\u{6FFFD}'
 1617|  66.4k|        | '\u{70000}'..='\u{7FFFD}'
 1618|  66.4k|        | '\u{80000}'..='\u{8FFFD}'
 1619|  66.4k|        | '\u{90000}'..='\u{9FFFD}'
 1620|  66.4k|        | '\u{A0000}'..='\u{AFFFD}'
 1621|  66.4k|        | '\u{B0000}'..='\u{BFFFD}'
 1622|  66.4k|        | '\u{C0000}'..='\u{CFFFD}'
 1623|  66.4k|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     23|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  3.05M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCsaAh6yFmIely_5oxrdf:
 1141|  6.01M|    fn next(&mut self) -> Option<char> {
 1142|  6.01M|        if let Some(head) = self.value.next() {
 1143|  5.75M|            self.position += head.len_utf8();
 1144|  5.75M|            Some(head)
 1145|       |        } else {
 1146|   260k|            None
 1147|       |        }
 1148|  6.01M|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCsaAh6yFmIely_5oxrdf:
 1629|   365k|fn is_url_query_code_point(c: char) -> bool {
 1630|   365k|    is_url_code_point(c)
 1631|  28.7k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   365k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCsaAh6yFmIely_5oxrdf:
 1151|   259k|    fn front(&self) -> Option<char> {
 1152|   259k|        self.value.clone().next()
 1153|   259k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsaAh6yFmIely_5oxrdf:
 1578|  78.1k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|  78.1k|        Err(IriParseError { kind })
 1580|  78.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsaAh6yFmIely_5oxrdf:
 1468|  98.6k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   385k|        loop {
 1470|   385k|            let c = self.input.next();
 1471|   385k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|   105k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|   105k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|   105k|                    } else if c == Some('/') {
 1481|  13.9k|                        self.output.push('/');
 1482|  91.1k|                    }
 1483|       |
 1484|   105k|                    if c == Some('?') {
 1485|  23.2k|                        self.output_positions.path_end = self.output.len();
 1486|  23.2k|                        self.output.push('?');
 1487|  23.2k|                        return self.parse_query();
 1488|  81.7k|                    } else if c == Some('#') {
 1489|  7.04k|                        self.output_positions.path_end = self.output.len();
 1490|  7.04k|                        self.output_positions.query_end = self.output.len();
 1491|  7.04k|                        self.output.push('#');
 1492|  7.04k|                        return self.parse_fragment();
 1493|  74.7k|                    } else if c.is_none() {
 1494|  60.8k|                        self.output_positions.path_end = self.output.len();
 1495|  60.8k|                        self.output_positions.query_end = self.output.len();
 1496|  60.8k|                        return Ok(());
 1497|  13.9k|                    }
 1498|       |                }
 1499|   280k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  98.6k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsaAh6yFmIely_5oxrdf:
  185|   322k|    pub fn into_inner(self) -> T {
  186|   322k|        self.iri
  187|   322k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsaAh6yFmIely_5oxrdf:
 1561|  47.4k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsaAh6yFmIely_5oxrdf:
   58|  34.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  34.3k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  34.3k|        Ok(Self { iri, positions })
   61|  34.3k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE5parseCsaAh6yFmIely_5oxrdf:
   58|   225k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|   225k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|   147k|        Ok(Self { iri, positions })
   61|   225k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCsaAh6yFmIely_5oxrdf:
  556|  34.3k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  34.3k|        IriRef::parse(iri)?.try_into()
  558|  34.3k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriReE5parseCsaAh6yFmIely_5oxrdf:
  556|   225k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|   225k|        IriRef::parse(iri)?.try_into()
  558|   225k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefReE11is_absoluteCsaAh6yFmIely_5oxrdf:
  199|   147k|    pub fn is_absolute(&self) -> bool {
  200|   147k|        self.positions.scheme_end != 0
  201|   147k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCsaAh6yFmIely_5oxrdf:
  199|  34.3k|    pub fn is_absolute(&self) -> bool {
  200|  34.3k|        self.positions.scheme_end != 0
  201|  34.3k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsaAh6yFmIely_5oxrdf:
 1562|  21.2k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsaAh6yFmIely_5oxrdf:
 1245|   236k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|   236k|        if self.input.starts_with('/') {
 1247|   233k|            self.input.next();
 1248|   233k|            self.output.push('/');
 1249|   233k|            self.parse_authority()
 1250|       |        } else {
 1251|  2.50k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  2.50k|            self.parse_path()
 1253|       |        }
 1254|   236k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsaAh6yFmIely_5oxrdf:
 1439|   188k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|   188k|        match c {
 1441|       |            None => {
 1442|  46.2k|                self.output_positions.path_end = self.output.len();
 1443|  46.2k|                self.output_positions.query_end = self.output.len();
 1444|  46.2k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|  46.1k|                self.output_positions.path_end = self.output.len();
 1448|  46.1k|                self.output.push('?');
 1449|  46.1k|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  23.3k|                self.output_positions.path_end = self.output.len();
 1453|  23.3k|                self.output_positions.query_end = self.output.len();
 1454|  23.3k|                self.output.push('#');
 1455|  23.3k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  72.6k|                self.output.push('/');
 1459|  72.6k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|   188k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsaAh6yFmIely_5oxrdf:
 1558|  59.3k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  59.3k|        let c1 = self.input.next();
 1560|  59.3k|        let c2 = self.input.next();
 1561|  59.3k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  23.1k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  16.6k|            self.output.push('%');
 1565|  16.6k|            self.output.push(c1.unwrap());
 1566|  16.6k|            self.output.push(c2.unwrap());
 1567|  16.6k|            Ok(())
 1568|       |        } else {
 1569|  42.6k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|  42.6k|                Some('%'),
 1571|  42.6k|                c1,
 1572|  42.6k|                c2,
 1573|  42.6k|            ]))
 1574|       |        }
 1575|  59.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsaAh6yFmIely_5oxrdf:
 1174|   259k|    fn parse(
 1175|   259k|        iri: &'a str,
 1176|   259k|        base: Option<IriRef<&'a str>>,
 1177|   259k|        output: &'a mut O,
 1178|   259k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|   259k|        let mut parser = Self {
 1180|   259k|            iri,
 1181|   259k|            base,
 1182|   259k|            input: ParserInput {
 1183|   259k|                value: iri.chars(),
 1184|   259k|                position: 0,
 1185|   259k|            },
 1186|   259k|            output,
 1187|   259k|            output_positions: IriElementsPositions {
 1188|   259k|                scheme_end: 0,
 1189|   259k|                authority_end: 0,
 1190|   259k|                path_end: 0,
 1191|   259k|                query_end: 0,
 1192|   259k|            },
 1193|   259k|            input_scheme_end: 0,
 1194|   259k|        };
 1195|   259k|        parser.parse_scheme_start()?;
 1196|   181k|        Ok(parser.output_positions)
 1197|   259k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsaAh6yFmIely_5oxrdf:
 1335|   233k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  1.35M|        loop {
 1338|  1.35M|            let c = self.input.next();
 1339|  1.35M|            match c {
 1340|       |                Some('@') => {
 1341|  9.89k|                    self.output.push('@');
 1342|  9.89k|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|   205k|                    self.input = ParserInput {
 1346|   205k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|   205k|                        position: self.input_scheme_end + 2,
 1348|   205k|                    };
 1349|   205k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|   205k|                    return self.parse_host();
 1351|       |                }
 1352|  1.13M|                Some(c) => {
 1353|  1.13M|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|   233k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsaAh6yFmIely_5oxrdf:
 1518|  45.3k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   359k|        while let Some(c) = self.input.next() {
 1520|   318k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  40.8k|        Ok(())
 1523|  45.3k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsaAh6yFmIely_5oxrdf:
  968|  34.3k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  34.3k|        if iri.is_absolute() {
  970|  34.3k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  34.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsaAh6yFmIely_5oxrdf:
 1213|   259k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  1.52M|        loop {
 1215|  1.52M|            let c = self.input.next();
 1216|  1.52M|            match c {
 1217|  1.52M|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  1.26M|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|   259k|                    self.output.push(':');
 1222|   259k|                    self.output_positions.scheme_end = self.output.len();
 1223|   259k|                    self.input_scheme_end = self.input.position;
 1224|   259k|                    return if self.input.starts_with('/') {
 1225|   236k|                        self.input.next();
 1226|   236k|                        self.output.push('/');
 1227|   236k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  23.4k|                        self.output_positions.authority_end = self.output.len();
 1230|  23.4k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|   259k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsaAh6yFmIely_5oxrdf:
 1420|  67.5k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  83.0k|        loop {
 1422|  83.0k|            let c = self.input.next();
 1423|  83.0k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  49.2k|                    self.output_positions.authority_end = self.output.len();
 1426|  49.2k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|  33.8k|                Some(c) => {
 1429|  33.8k|                    if UNCHECKED || c.is_ascii_digit() {
 1430|  15.4k|                        self.output.push(c)
 1431|       |                    } else {
 1432|  18.3k|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  67.5k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsaAh6yFmIely_5oxrdf:
 1534|  2.68M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  2.68M|        if UNCHECKED || is_url_code_point(c) {
 1536|  2.64M|            self.output.push(c);
 1537|  2.64M|            Ok(())
 1538|  46.3k|        } else if c == '%' {
 1539|  40.1k|            self.read_echar()
 1540|       |        } else {
 1541|  6.18k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  2.68M|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriReEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsaAh6yFmIely_5oxrdf:
  968|   147k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|   147k|        if iri.is_absolute() {
  970|   147k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|   147k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCsaAh6yFmIely_5oxrdf:
  665|   322k|    pub fn into_inner(self) -> T {
  666|   322k|        self.0.into_inner()
  667|   322k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsaAh6yFmIely_5oxrdf:
 1546|   365k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   365k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   340k|            self.output.push(c);
 1549|   340k|            Ok(())
 1550|  24.6k|        } else if c == '%' {
 1551|  19.1k|            self.read_echar()
 1552|       |        } else {
 1553|  5.54k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   365k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsaAh6yFmIely_5oxrdf:
 1504|  69.4k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   414k|        while let Some(c) = self.input.next() {
 1506|   380k|            if c == '#' {
 1507|  14.9k|                self.output_positions.query_end = self.output.len();
 1508|  14.9k|                self.output.push('#');
 1509|  14.9k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   365k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  33.8k|        self.output_positions.query_end = self.output.len();
 1515|  33.8k|        Ok(())
 1516|  69.4k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsaAh6yFmIely_5oxrdf:
 1199|   259k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|   259k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|   259k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|   259k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsaAh6yFmIely_5oxrdf:
 1359|   214k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|   214k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|  35.2k|            let start_position = self.input.position;
 1363|   142k|            while let Some(c) = self.input.next() {
 1364|   142k|                self.output.push(c);
 1365|   142k|                if c == ']' {
 1366|  35.2k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|  35.2k|                    if !UNCHECKED {
 1368|  35.2k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|  35.2k|                        }
 1371|      0|                    }
 1372|       |
 1373|  35.2k|                    let c = self.input.next();
 1374|  35.2k|                    return match c {
 1375|       |                        Some(':') => {
 1376|  16.7k|                            self.output.push(':');
 1377|  16.7k|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|  13.1k|                            self.output_positions.authority_end = self.output.len();
 1381|  13.1k|                            self.parse_path_start(c)
 1382|       |                        }
 1383|  5.41k|                        Some(c) => {
 1384|  5.41k|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|  5.41k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|   107k|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  1.12M|            loop {
 1404|  1.12M|                let c = self.input.next();
 1405|  1.12M|                match c {
 1406|       |                    Some(':') => {
 1407|  50.8k|                        self.output.push(':');
 1408|  50.8k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|   126k|                        self.output_positions.authority_end = self.output.len();
 1412|   126k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   952k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|   214k|    }
_RNvXsW_CsbOXESBDtkxG_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1003|   178k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|   178k|        match &self.kind {
 1005|  3.29k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|  26.1k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|  26.1k|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|  4.85k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|  25.5k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|  55.8k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|  55.8k|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|  62.3k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|  62.3k|                f,
 1016|  62.3k|                "Invalid IRI percent encoding '{}'",
 1017|  62.3k|                cs.iter().flatten().cloned().collect::<String>()
 1018|  62.3k|            ),
 1019|       |        }
 1020|   178k|    }

_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs7Qy2jXn7BB4_11rand_chacha:
  208|  2.16M|    fn shuffle_lane_words1230(self) -> Self {
  209|  2.16M|        Self::new([
  210|  2.16M|            self.0[0].shuffle_lane_words1230(),
  211|  2.16M|            self.0[1].shuffle_lane_words1230(),
  212|  2.16M|        ])
  213|  2.16M|    }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs7Qy2jXn7BB4_11rand_chacha:
   22|  8.64M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  8.64M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  8.64M|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs7Qy2jXn7BB4_11rand_chacha:
  201|  2.16M|    fn shuffle_lane_words2301(self) -> Self {
  202|  2.16M|        Self::new([
  203|  2.16M|            self.0[0].shuffle_lane_words2301(),
  204|  2.16M|            self.0[1].shuffle_lane_words2301(),
  205|  2.16M|        ])
  206|  2.16M|    }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs7Qy2jXn7BB4_11rand_chacha:
  215|  2.16M|    fn shuffle_lane_words3012(self) -> Self {
  216|  2.16M|        Self::new([
  217|  2.16M|            self.0[0].shuffle_lane_words3012(),
  218|  2.16M|            self.0[1].shuffle_lane_words3012(),
  219|  2.16M|        ])
  220|  2.16M|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs7Qy2jXn7BB4_11rand_chacha:
   42|  2.16M|        fn $fn(self) -> Self {
   43|  2.16M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.16M|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs7Qy2jXn7BB4_11rand_chacha:
   42|  2.16M|        fn $fn(self) -> Self {
   43|  2.16M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.16M|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs7Qy2jXn7BB4_11rand_chacha:
   42|  2.16M|        fn $fn(self) -> Self {
   43|  2.16M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.16M|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs7Qy2jXn7BB4_11rand_chacha:
   42|  2.16M|        fn $fn(self) -> Self {
   43|  2.16M|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  2.16M|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs7Qy2jXn7BB4_11rand_chacha:
   13|  24.6M|    pub fn new(xs: [W; 2]) -> Self {
   14|  24.6M|        x2(xs, PhantomData)
   15|  24.6M|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs7Qy2jXn7BB4_11rand_chacha:
   32|  8.64M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  8.64M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  8.64M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  8.64M|            }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs7Qy2jXn7BB4_11rand_chacha:
  246|  1.62M|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  1.62M|        unsafe { V::unpack(s) }
  248|  1.62M|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs7Qy2jXn7BB4_11rand_chacha:
  246|   180k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   180k|        unsafe { V::unpack(s) }
  248|   180k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs7Qy2jXn7BB4_11rand_chacha:
  251|   180k|    fn vec<V, A>(self, a: A) -> V
  252|   180k|    where
  253|   180k|        V: MultiLane<A>,
  254|   180k|    {
  255|   180k|        V::from_lanes(a)
  256|   180k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs7Qy2jXn7BB4_11rand_chacha:
  259|  1.40k|    fn read_le<V>(self, input: &[u8]) -> V
  260|  1.40k|    where
  261|  1.40k|        V: StoreBytes,
  262|  1.40k|    {
  263|  1.40k|        unsafe { V::unsafe_read_le(input) }
  264|  1.40k|    }

_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha:
  333|    704|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    704|            #[inline(always)]
  335|    704|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    704|            use std::arch::x86_64::*;
  337|    704|            #[target_feature(enable = "avx")]
  338|    704|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    704|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    704|            }
  341|    704|            #[target_feature(enable = "sse2")]
  342|    704|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    704|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    704|            }
  345|    704|            unsafe {
  346|    704|                if is_x86_feature_detected!("avx") {
  347|    704|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|    704|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs7Qy2jXn7BB4_11rand_chacha:
   92|   180k|    unsafe fn instance() -> Self {
   93|   180k|        Avx2Machine(PhantomData)
   94|   180k|    }
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide:
  250|   180k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|   180k|            #[inline(always)]
  252|   180k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|   180k|            use std::arch::x86_64::*;
  254|   180k|            #[target_feature(enable = "avx2")]
  255|   180k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   180k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   180k|                _mm256_zeroupper();
  258|   180k|                ret
  259|   180k|            }
  260|   180k|            #[target_feature(enable = "avx")]
  261|   180k|            #[target_feature(enable = "sse4.1")]
  262|   180k|            #[target_feature(enable = "ssse3")]
  263|   180k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|   180k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|   180k|                _mm256_zeroupper();
  266|   180k|                ret
  267|   180k|            }
  268|   180k|            #[target_feature(enable = "sse4.1")]
  269|   180k|            #[target_feature(enable = "ssse3")]
  270|   180k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|   180k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|   180k|            }
  273|   180k|            #[target_feature(enable = "ssse3")]
  274|   180k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|   180k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|   180k|            }
  277|   180k|            #[target_feature(enable = "sse2")]
  278|   180k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|   180k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|   180k|            }
  281|   180k|            unsafe {
  282|   180k|                if is_x86_feature_detected!("avx2") {
  283|   180k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|   180k|        }
_RNvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide9impl_avx2:
  255|   180k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|   180k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|   180k|                _mm256_zeroupper();
  258|   180k|                ret
  259|   180k|            }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs7Qy2jXn7BB4_11rand_chacha:
   64|    704|    unsafe fn instance() -> Self {
   65|    704|        SseMachine(PhantomData)
   66|    704|    }
_RNvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha8impl_avx:
  338|    704|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    704|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    704|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|    704|    fn from(u32x4: [u32; 4]) -> Self {
  131|    704|        vec128_storage { u32x4 }
  132|    704|    }

_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs7Qy2jXn7BB4_11rand_chacha:
 1543|  17.2M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  17.2M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  17.2M|                }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs7Qy2jXn7BB4_11rand_chacha:
  519|   720k|    fn extract(self, i: u32) -> u32 {
  520|   720k|        self.to_lanes()[i as usize]
  521|   720k|    }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
   52|  1.62M|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  1.62M|                Self::new(x.sse2)
   54|  1.62M|            }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs7Qy2jXn7BB4_11rand_chacha:
 1527|  17.2M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  17.2M|                    *self = self.$bin_fn(rhs);
 1529|  17.2M|                }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
  323|   720k|    fn to_lanes(self) -> [u32; 4] {
  324|   720k|        unsafe {
  325|   720k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   720k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   720k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   720k|        }
  329|   720k|    }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1430|  1.44M|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  1.44M|            unsafe {
 1432|  1.44M|                [
 1433|  1.44M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  1.44M|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  1.44M|                ]
 1436|  1.44M|            }
 1437|  1.44M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs7Qy2jXn7BB4_11rand_chacha:
 1480|  4.32M|            fn $name(self) -> Self {
 1481|  4.32M|                Self::new(unsafe {
 1482|  4.32M|                    _mm256_or_si256(
 1483|  4.32M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  4.32M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  4.32M|                    )
 1486|  4.32M|                })
 1487|  4.32M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs7Qy2jXn7BB4_11rand_chacha:
 1470|  4.32M|            fn $name(self) -> Self {
 1471|  4.32M|                Self::new(unsafe {
 1472|  4.32M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  4.32M|                })
 1474|  4.32M|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs7Qy2jXn7BB4_11rand_chacha:
 1480|  4.32M|            fn $name(self) -> Self {
 1481|  4.32M|                Self::new(unsafe {
 1482|  4.32M|                    _mm256_or_si256(
 1483|  4.32M|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  4.32M|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  4.32M|                    )
 1486|  4.32M|                })
 1487|  4.32M|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs7Qy2jXn7BB4_11rand_chacha:
 1582|  4.32M|        fn shuffle_lane_words1230(self) -> Self {
 1583|  4.32M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  4.32M|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
 1602|   180k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|   180k|            Self::new([
 1604|   180k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|   180k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|   180k|            ])
 1607|   180k|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1617|   720k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   720k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   720k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   720k|            Self::new([ab, cd])
 1621|   720k|        }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs7Qy2jXn7BB4_11rand_chacha:
 1394|  66.6M|        fn new(x: __m256i) -> Self {
 1395|  66.6M|            Self { x, ni: PhantomData }
 1396|  66.6M|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs7Qy2jXn7BB4_11rand_chacha:
  523|  2.52M|    fn insert(self, v: u32, i: u32) -> Self {
  524|  2.52M|        Self::new(unsafe {
  525|  2.52M|            match i {
  526|  1.26M|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  1.26M|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  2.52M|    }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
  331|   180k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|   180k|        unsafe {
  333|   180k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|   180k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|   180k|            Self::new(x)
  336|   180k|        }
  337|   180k|    }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs7Qy2jXn7BB4_11rand_chacha:
   64|  10.0M|            fn new(x: __m128i) -> Self {
   65|  10.0M|                $vec {
   66|  10.0M|                    x,
   67|  10.0M|                    s3: PhantomData,
   68|  10.0M|                    s4: PhantomData,
   69|  10.0M|                    ni: PhantomData,
   70|  10.0M|                }
   71|  10.0M|            }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1611|   720k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   720k|            let [a, b] = self.0[0].to_lanes();
 1613|   720k|            let [c, d] = self.0[1].to_lanes();
 1614|   720k|            [a, b, c, d]
 1615|   720k|        }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs7Qy2jXn7BB4_11rand_chacha:
 1402|   360k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|   360k|            Self::new(p.avx)
 1404|   360k|        }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs7Qy2jXn7BB4_11rand_chacha:
   89|  2.88M|            fn write_le(self, out: &mut [u8]) {
   90|  2.88M|                assert_eq!(out.len(), 16);
   91|  2.88M|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  2.88M|            }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs7Qy2jXn7BB4_11rand_chacha:
 1439|  1.44M|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  1.44M|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  1.44M|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs7Qy2jXn7BB4_11rand_chacha:
 1590|  4.32M|        fn shuffle_lane_words3012(self) -> Self {
 1591|  4.32M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  4.32M|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs7Qy2jXn7BB4_11rand_chacha:
 1470|  4.32M|            fn $name(self) -> Self {
 1471|  4.32M|                Self::new(unsafe {
 1472|  4.32M|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  4.32M|                })
 1474|  4.32M|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs7Qy2jXn7BB4_11rand_chacha:
 1586|  4.32M|        fn shuffle_lane_words2301(self) -> Self {
 1587|  4.32M|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  4.32M|        }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs7Qy2jXn7BB4_11rand_chacha:
   79|  1.40k|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|  1.40k|                assert_eq!(input.len(), 16);
   81|  1.40k|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|  1.40k|            }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs7Qy2jXn7BB4_11rand_chacha:
   18|  2.88M|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  2.88M|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  2.88M|            }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs7Qy2jXn7BB4_11rand_chacha:
 1543|  17.2M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  17.2M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  17.2M|                }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs7Qy2jXn7BB4_11rand_chacha:
 1683|   180k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|   180k|            Self {
 1685|   180k|                avx: [
 1686|   180k|                    vec256_storage { avx: x.0[0].x },
 1687|   180k|                    vec256_storage { avx: x.0[1].x },
 1688|   180k|                ],
 1689|   180k|            }
 1690|   180k|        }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs7Qy2jXn7BB4_11rand_chacha:
   58|   181k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|   181k|                vec128_storage { sse2: x.x }
   60|   181k|            }

_RINvXs2_NtNtCs55N2eBX4uiz_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsgLOhukngm62_5oxttl:
   51|  2.88M|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  2.88M|        // Use LE; we explicitly generate one value before the next.
   53|  2.88M|        let x = u128::from(rng.next_u64());
   54|  2.88M|        let y = u128::from(rng.next_u64());
   55|  2.88M|        (y << 64) | x
   56|  2.88M|    }

_RINvCs55N2eBX4uiz_4rand6randomoECsgLOhukngm62_5oxttl:
  183|  2.88M|pub fn random<T>() -> T
  184|  2.88M|where Standard: Distribution<T> {
  185|  2.88M|    thread_rng().gen()
  186|  2.88M|}

_RINvYNtNtNtCs55N2eBX4uiz_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsgLOhukngm62_5oxttl:
   93|  2.88M|    fn gen<T>(&mut self) -> T
   94|  2.88M|    where Standard: Distribution<T> {
   95|  2.88M|        Standard.sample(self)
   96|  2.88M|    }

_RNvXs_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngENtB24_7RngCore8next_u64CsgLOhukngm62_5oxttl:
  124|  5.76M|    fn next_u64(&mut self) -> u64 {
  125|  5.76M|        self.0.next_u64()
  126|  5.76M|    }
_RNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|   180k|    pub fn get_fork_counter() -> usize {
  308|   180k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|   180k|    }
_RNCNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvNtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE9is_forkedBb_:
  226|   180k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|   180k|        // In theory, on 32-bit platforms, it is possible for
  228|   180k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|   180k|        //
  230|   180k|        // This check will detect a fork in the normal case where
  231|   180k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|   180k|        // between both is greater than `isize::MAX` (wrapped around).
  233|   180k|        //
  234|   180k|        // It will still fail to detect a fork if there have been more than
  235|   180k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|   180k|        // enough.
  237|   180k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|   180k|    }
_RNvMNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    703|    fn reseed_and_generate(
  242|    703|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    703|    ) {
  244|    703|        #![allow(clippy::if_same_then_else)] // false positive
  245|    703|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    703|        } else {
  248|    703|            trace!("Reseeding RNG (periodic reseed)");
  249|    703|        }
  250|       |
  251|    703|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    703|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    703|        }
  257|    703|        self.fork_counter = global_fork_counter;
  258|    703|
  259|    703|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    703|        self.inner.generate(results);
  261|    703|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNCNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE6reseed0Bd_:
  220|    703|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    703|            self.bytes_until_reseed = self.threshold;
  222|    703|            self.inner = result
  223|    703|        })
_RNvXs2_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|   180k|    fn generate(&mut self, results: &mut Self::Results) {
  174|   180k|        let global_fork_counter = fork::get_fork_counter();
  175|   180k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    703|            return self.reseed_and_generate(results, global_fork_counter);
  180|   179k|        }
  181|   179k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|   179k|        self.bytes_until_reseed -= num_bytes as i64;
  183|   179k|        self.inner.generate(results);
  184|   180k|    }
_RNvMs3_NtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core2os5OsRngE6reseedBb_:
  219|    703|    fn reseed(&mut self) -> Result<(), Error> {
  220|    703|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    703|        })
  224|    703|    }

_RNvXs_NtNtCs55N2eBX4uiz_4rand4rngs6threadNtB4_9ThreadRngNtCs59ZXsH8airK_9rand_core7RngCore8next_u64:
  109|  5.76M|    fn next_u64(&mut self) -> u64 {
  110|  5.76M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  5.76M|        // creates another mutable reference
  112|  5.76M|        let rng = unsafe { &mut *self.rng.get() };
  113|  5.76M|        rng.next_u64()
  114|  5.76M|    }
_RNCNvNtNtCs55N2eBX4uiz_4rand4rngs6thread10thread_rng0B7_:
   89|  2.88M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNvNtNtCs55N2eBX4uiz_4rand4rngs6thread10thread_rng:
   88|  2.88M|pub fn thread_rng() -> ThreadRng {
   89|  2.88M|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  2.88M|    ThreadRng { rng }
   91|  2.88M|}
_RNCNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCs7Qy2jXn7BB4_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCs59ZXsH8airK_9rand_core5block12BlockRngCore8generateCs55N2eBX4uiz_4rand:
   89|   180k|            fn generate(&mut self, r: &mut Self::Results) {
   90|   180k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|   180k|                self.state.refill4($rounds, unsafe {
   92|   180k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|   180k|                });
   94|  11.5M|                for x in r.as_mut() {
   95|  11.5M|                    *x = x.to_le();
   96|  11.5M|                }
   97|   180k|            }
_RNvXsn_NtCs7Qy2jXn7BB4_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng9from_seedCs55N2eBX4uiz_4rand:
  103|    704|            fn from_seed(seed: Self::Seed) -> Self {
  104|    704|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    704|            }
_RNvXs_NtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|  11.8M|    fn as_ref(&self) -> &[T] {
   47|  11.8M|        &self.0
   48|  11.8M|    }
_RNvXs0_NtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|   180k|    fn as_mut(&mut self) -> &mut [T] {
   52|   180k|        &mut self.0
   53|   180k|    }
_RNvXNtCs7Qy2jXn7BB4_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|   180k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|   180k|        refill_wide(self, drounds, out)
   86|   180k|    }
_RNvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    704|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    704|        init_chacha(key, nonce)
   74|    704|    }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  1.08M|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  1.08M|    x.b = x.b.shuffle_lane_words3012();
   58|  1.08M|    x.c = x.c.shuffle_lane_words2301();
   59|  1.08M|    x.d = x.d.shuffle_lane_words1230();
   60|  1.08M|    x
   61|  1.08M|}
_RINvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    704|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    704|        let ctr_nonce = [
  237|       |            0,
  238|    704|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    704|                0
  242|       |            },
  243|    704|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    704|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    704|        ];
  246|    704|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    704|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    704|        ChaCha {
  249|    704|            b: key0.into(),
  250|    704|            c: key1.into(),
  251|    704|            d: ctr_nonce.into(),
  252|    704|        }
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  2.16M|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  2.16M|    x.a += x.b;
   45|  2.16M|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  2.16M|    x.c += x.d;
   47|  2.16M|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  2.16M|    x.a += x.b;
   49|  2.16M|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  2.16M|    x.c += x.d;
   51|  2.16M|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  2.16M|    x
   53|  2.16M|}
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  1.08M|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  1.08M|    x.b = x.b.shuffle_lane_words1230();
   65|  1.08M|    x.c = x.c.shuffle_lane_words2301();
   66|  1.08M|    x.d = x.d.shuffle_lane_words3012();
   67|  1.08M|    x
   68|  1.08M|}
_RINvMNtCs7Qy2jXn7BB4_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|   360k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|   360k|        let d: M::u32x4 = m.unpack(self.d);
   79|   360k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|   360k|    }
_RINvNvNtCs7Qy2jXn7BB4_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|   180k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|   180k|        refill_wide_impl(m, state, drounds, out);
  174|   180k|    }
_RNvNtCs7Qy2jXn7BB4_11rand_chacha4guts10read_u32le:
  229|  1.40k|fn read_u32le(xs: &[u8]) -> u32 {
  230|  1.40k|    assert_eq!(xs.len(), 4);
  231|  1.40k|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|  1.40k|}
_RINvNtCs7Qy2jXn7BB4_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|   180k|fn refill_wide_impl<Mach: Machine>(
  117|   180k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|   180k|) {
  119|   180k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|   180k|    let mut pos = state.pos64(m);
  121|   180k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|   180k|    pos = pos.wrapping_add(1);
  123|   180k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|   180k|    pos = pos.wrapping_add(1);
  125|   180k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|   180k|    pos = pos.wrapping_add(1);
  127|   180k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|   180k|
  129|   180k|    let b = m.unpack(state.b);
  130|   180k|    let c = m.unpack(state.c);
  131|   180k|    let mut x = State {
  132|   180k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|   180k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|   180k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|   180k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|   180k|    };
  137|  1.08M|    for _ in 0..drounds {
  138|  1.08M|        x = round(x);
  139|  1.08M|        x = undiagonalize(round(diagonalize(x)));
  140|  1.08M|    }
  141|   180k|    let mut pos = state.pos64(m);
  142|   180k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|   180k|    pos = pos.wrapping_add(1);
  144|   180k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|   180k|    pos = pos.wrapping_add(1);
  146|   180k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|   180k|    pos = pos.wrapping_add(1);
  148|   180k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|   180k|    pos = pos.wrapping_add(1);
  150|   180k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|   180k|
  152|   180k|    let (a, b, c, d) = (
  153|   180k|        x.a.to_lanes(),
  154|   180k|        x.b.to_lanes(),
  155|   180k|        x.c.to_lanes(),
  156|   180k|        x.d.to_lanes(),
  157|   180k|    );
  158|   180k|    let sb = m.unpack(state.b);
  159|   180k|    let sc = m.unpack(state.c);
  160|   180k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|   180k|    state.d = d4.into();
  162|   180k|    let mut words = out.chunks_exact_mut(16);
  163|   720k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   720k|        (a + k).write_le(words.next().unwrap());
  165|   720k|        (b + sb).write_le(words.next().unwrap());
  166|   720k|        (c + sc).write_le(words.next().unwrap());
  167|   720k|        (d + sd).write_le(words.next().unwrap());
  168|   720k|    }
  169|   180k|}

_RNCNvXs0_NtCs59ZXsH8airK_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CsgLOhukngm62_5oxttl:
  198|  5.76M|        let read_u64 = |results: &[u32], index| {
  199|  5.76M|            let data = &results[index..=index + 1];
  200|  5.76M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  5.76M|        };
_RNvXs0_NtCs59ZXsH8airK_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CsgLOhukngm62_5oxttl:
  197|  5.76M|    fn next_u64(&mut self) -> u64 {
  198|  5.76M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  5.76M|        let len = self.results.as_ref().len();
  204|  5.76M|
  205|  5.76M|        let index = self.index;
  206|  5.76M|        if index < len - 1 {
  207|  5.58M|            self.index += 2;
  208|  5.58M|            // Read an u64 from the current index
  209|  5.58M|            read_u64(self.results.as_ref(), index)
  210|   180k|        } else if index >= len {
  211|   180k|            self.generate_and_set(2);
  212|   180k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  5.76M|    }
_RNvMs_NtCs59ZXsH8airK_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|   180k|    pub fn generate_and_set(&mut self, index: usize) {
  175|   180k|        assert!(index < self.results.as_ref().len());
  176|   180k|        self.core.generate(&mut self.results);
  177|   180k|        self.index = index;
  178|   180k|    }
_RNvMs_NtCs59ZXsH8airK_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs55N2eBX4uiz_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECs55N2eBX4uiz_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RNvXs_Cs59ZXsH8airK_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs55N2eBX4uiz_4rand:
  441|    703|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    703|        (**self).try_fill_bytes(dest)
  443|    703|    }
_RINvYNtNtCs7Qy2jXn7BB4_11rand_chacha6chacha12ChaCha12CoreNtCs59ZXsH8airK_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECs55N2eBX4uiz_4rand:
  390|    703|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    703|        let mut seed = Self::Seed::default();
  392|    703|        rng.try_fill_bytes(seed.as_mut())?;
  393|    703|        Ok(Self::from_seed(seed))
  394|    703|    }

_RNvXs_NtCs59ZXsH8airK_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    704|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    704|        getrandom(dest)?;
   69|    704|        Ok(())
   70|    704|    }

_RNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  2.88M|            unsafe fn __getit(
   84|  2.88M|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  2.88M|            ) -> $crate::option::Option<&'static $t> {
   86|  2.88M|                #[thread_local]
   87|  2.88M|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  2.88M|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  2.88M|
   90|  2.88M|                unsafe {
   91|  2.88M|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  2.88M|                    })
  101|  2.88M|                }
  102|  2.88M|            }
_RNvNvNtNtCs55N2eBX4uiz_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCs96HrlsBBTql_2n31__19___libfuzzer_sys_run0B5_:
   12|  25.0M|    for chunk in data.split(|c| *c == 0xFF) {

_RINvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECsgLOhukngm62_5oxttl:
   48|  27.3k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   49|  27.3k|        let id = id.into();
   50|  27.3k|        if let Some(numerical_id) = to_integer_id(&id) {
   51|  3.26k|            Self::new_from_unique_id(numerical_id)
   52|       |        } else {
   53|  24.1k|            Self(BlankNodeContent::Named(id))
   54|       |        }
   55|  27.3k|    }
_RNvXsk_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   22|   244k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsgLOhukngm62_5oxttl:
  261|  2.88M|    fn as_str(&self) -> &str {
  262|  2.88M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  2.88M|        str::from_utf8(&self.0[..len]).unwrap()
  264|  2.88M|    }
_RNvXsH_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
  249|   238k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   19|   244k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvNtCsaAh6yFmIely_5oxrdf10blank_node13to_integer_idCsgLOhukngm62_5oxttl:
  327|  27.3k|fn to_integer_id(id: &str) -> Option<u128> {
  328|  27.3k|    let digits = id.as_bytes();
  329|  27.3k|    let mut value: u128 = 0;
  330|  27.3k|    if let None | Some(b'0') = digits.first() {
  331|  20.7k|        return None; // No empty string or leading zeros
  332|  6.61k|    }
  333|  35.5k|    for digit in digits {
  334|  32.2k|        value = value.checked_mul(16)?.checked_add(
  335|  31.6k|            match *digit {
  336|  31.2k|                b'0'..=b'9' => digit - b'0',
  337|  27.6k|                b'a'..=b'f' => digit - b'a' + 10,
  338|  2.76k|                _ => return None,
  339|       |            }
  340|  28.8k|            .into(),
  341|      0|        )?;
  342|       |    }
  343|  3.26k|    Some(value)
  344|  27.3k|}
_RNvMNtCsaAh6yFmIely_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCsgLOhukngm62_5oxttl:
   61|  3.26k|    pub fn new_from_unique_id(id: u128) -> Self {
   62|  3.26k|        Self(BlankNodeContent::Anonymous {
   63|  3.26k|            id,
   64|  3.26k|            str: IdStr::new(id),
   65|  3.26k|        })
   66|  3.26k|    }
_RNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_5IdStr3newCsgLOhukngm62_5oxttl:
  254|  2.88M|    fn new(id: u128) -> Self {
  255|  2.88M|        let mut str = [0; 32];
  256|  2.88M|        write!(&mut str[..], "{id:x}").unwrap();
  257|  2.88M|        Self(str)
  258|  2.88M|    }
_RNvXs0_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsgLOhukngm62_5oxttl:
  108|  1.15M|    fn default() -> Self {
  109|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  110|  2.88M|        loop {
  111|  2.88M|            let id = random();
  112|  2.88M|            let str = IdStr::new(id);
  113|  2.88M|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  114|  1.15M|                return Self(BlankNodeContent::Anonymous { id, str });
  115|  1.72M|            }
  116|       |        }
  117|  1.15M|    }
_RNCNvMs7_NtCsaAh6yFmIely_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  92.1M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RNvXsF_NtCsaAh6yFmIely_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   34|  42.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsM_NtCsaAh6yFmIely_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   37|  42.4k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  86.9k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  86.9k|        let value = value.into();
   55|  86.9k|        let datatype = datatype.into();
   56|  86.9k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  86.9k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  86.9k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  5.21k|    pub fn new_language_tagged_literal_unchecked(
   86|  5.21k|        value: impl Into<String>,
   87|  5.21k|        language: impl Into<String>,
   88|  5.21k|    ) -> Self {
   89|  5.21k|        Self(LiteralContent::LanguageTaggedString {
   90|  5.21k|            value: value.into(),
   91|  5.21k|            language: language.into(),
   92|  5.21k|        })
   93|  5.21k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|  6.54k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  6.54k|        let value = value.into();
   55|  6.54k|        let datatype = datatype.into();
   56|  6.54k|        Self(if datatype == xsd::STRING {
   57|  1.13k|            LiteralContent::String(value)
   58|       |        } else {
   59|  5.41k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  6.54k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|  50.4k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|  50.4k|        Self(LiteralContent::String(value.into()))
   49|  50.4k|    }

_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsgLOhukngm62_5oxttl:
  138|   101k|    pub fn into_owned(self) -> NamedNode {
  139|   101k|        NamedNode::new_unchecked(self.iri)
  140|   101k|    }
_RNvXsp_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   17|  30.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|   199k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   199k|        Self { iri: iri.into() }
   41|   199k|    }
_RINvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|   217k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|   217k|        Self { iri: iri.into() }
   41|   217k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  93.4k|    pub const fn as_str(self) -> &'a str {
  134|  93.4k|        self.iri
  135|  93.4k|    }
_RNvMs4_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  86.9k|    pub fn into_owned(self) -> NamedNode {
  139|  86.9k|        NamedNode::new_unchecked(self.iri)
  140|  86.9k|    }
_RNvXs9_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  93.4k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  93.4k|        self.as_str() == other.as_str()
  175|  93.4k|    }
_RNvMNtCsaAh6yFmIely_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  93.4k|    pub fn as_str(&self) -> &str {
   45|  93.4k|        self.iri.as_str()
   46|  93.4k|    }
_RNvXs6_NtCsaAh6yFmIely_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  86.9k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  86.9k|        node.into_owned()
  154|  86.9k|    }

_RNvXs1g_NtCsaAh6yFmIely_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCsgLOhukngm62_5oxttl:
  997|  39.7k|    fn from(node: BlankNode) -> Self {
  998|  39.7k|        Self::BlankNode(node)
  999|  39.7k|    }

_RNvXsf_NtCsaAh6yFmIely_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsgLOhukngm62_5oxttl:
   13|  8.86k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCsaAh6yFmIely_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsgLOhukngm62_5oxttl:
   35|  15.3k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  15.3k|        Self { name: name.into() }
   37|  15.3k|    }

_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  34.3k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  34.3k|        Self { mode, unchecked }
  175|  34.3k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  237|  6.40M|    fn recognize_pname_or_keyword<'a>(
  238|  6.40M|        &self,
  239|  6.40M|        data: &'a [u8],
  240|  6.40M|        is_ending: bool,
  241|  6.40M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  242|  6.40M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  243|  6.40M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  244|  6.40M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  245|  6.40M|        let mut i = 0;
  246|       |        loop {
  247|  12.3M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  248|  11.6M|                match r {
  249|  11.0M|                    Ok((c, consumed)) => {
  250|  11.0M|                        if c == ':' {
  251|  2.41M|                            i += consumed;
  252|  2.41M|                            break;
  253|  8.60M|                        } else if i == 0 {
  254|  3.83M|                            if !Self::is_possible_pn_chars_base(c) {
  255|  2.11M|                                return Some((
  256|  2.11M|                                    consumed,
  257|  2.11M|                                    Err((
  258|  2.11M|                                        0..consumed,
  259|  2.11M|                                        format!(
  260|  2.11M|                                            "'{c}' is not allowed at the beginning of a prefix name"
  261|  2.11M|                                        ),
  262|  2.11M|                                    )
  263|  2.11M|                                        .into()),
  264|  2.11M|                                ));
  265|  1.71M|                            }
  266|  1.71M|                            i += consumed;
  267|  4.77M|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  268|  4.22M|                            i += consumed;
  269|  4.22M|                        } else {
  270|   672k|                            while data[..i].ends_with(b".") {
  271|   122k|                                i -= 1;
  272|   122k|                            }
  273|   550k|                            return Some((
  274|   550k|                                i,
  275|   550k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  276|   550k|                            ));
  277|       |                        }
  278|       |                    }
  279|   632k|                    Err(e) => return Some((e.location.end, Err(e))),
  280|       |                }
  281|   686k|            } else if is_ending {
  282|  6.37k|                while data[..i].ends_with(b".") {
  283|    495|                    i -= 1;
  284|    495|                }
  285|  5.87k|                return Some(if i == 0 {
  286|  1.36k|                    (
  287|  1.36k|                        1,
  288|  1.36k|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  289|  1.36k|                    )
  290|       |                } else {
  291|  4.51k|                    (
  292|  4.51k|                        i,
  293|  4.51k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  294|  4.51k|                    )
  295|       |                });
  296|       |            } else {
  297|   680k|                return None;
  298|       |            }
  299|       |        }
  300|  2.41M|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  301|  2.41M|            Ok(pn_prefix) => pn_prefix,
  302|      0|            Err(e) => return Some((i, Err(e))),
  303|       |        };
  304|  2.41M|        if pn_prefix.ends_with('.') {
  305|  2.32k|            return Some((
  306|  2.32k|                i,
  307|  2.32k|                Err((
  308|  2.32k|                    0..i,
  309|  2.32k|                    format!(
  310|  2.32k|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  311|  2.32k|                )
  312|  2.32k|                    .into()),
  313|  2.32k|            ));
  314|  2.41M|        }
  315|       |
  316|   635k|        let (consumed, pn_local_result) =
  317|  2.41M|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  318|   635k|        Some((
  319|   635k|            consumed + i,
  320|   635k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|       |                prefix: pn_prefix,
  322|       |                local,
  323|       |                might_be_invalid_iri,
  324|   635k|            }),
  325|   635k|        ))
  326|  6.40M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  347|  2.58M|    fn recognize_optional_pn_local<'a>(
  348|  2.58M|        &self,
  349|  2.58M|        data: &'a [u8],
  350|  2.58M|        is_ending: bool,
  351|  2.58M|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  352|  2.58M|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  353|  2.58M|        let mut i = 0;
  354|  2.58M|        let mut buffer = None; // Buffer if there are some escaped characters
  355|  2.58M|        let mut position_that_is_already_in_buffer = 0;
  356|  2.58M|        let mut might_be_invalid_iri = false;
  357|  2.58M|        let mut ends_with_unescaped_dot = 0;
  358|       |        loop {
  359|  6.81M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  360|  5.00M|                match r {
  361|  4.95M|                    Ok((c, consumed)) => {
  362|  4.95M|                        if c == '%' {
  363|  41.3k|                            i += 1;
  364|  41.3k|                            let a = char::from(*data.get(i)?);
  365|  21.7k|                            i += 1;
  366|  21.7k|                            let b = char::from(*data.get(i)?);
  367|  15.7k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  368|  5.61k|                                return Some((i + 1, Err((
  369|  5.61k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  370|  5.61k|                                ).into())));
  371|  10.1k|                            }
  372|  10.1k|                            i += 1;
  373|  10.1k|                            ends_with_unescaped_dot = 0;
  374|  4.91M|                        } else if c == '\\' {
  375|   603k|                            i += 1;
  376|   603k|                            let a = char::from(*data.get(i)?);
  377|   571k|                            if self.unchecked
  378|   495k|                                || matches!(
  379|   571k|                                    a,
  380|       |                                    '_' | '~'
  381|       |                                        | '.'
  382|       |                                        | '-'
  383|       |                                        | '!'
  384|       |                                        | '$'
  385|       |                                        | '&'
  386|       |                                        | '\''
  387|       |                                        | '('
  388|       |                                        | ')'
  389|       |                                        | '*'
  390|       |                                        | '+'
  391|       |                                        | ','
  392|       |                                        | ';'
  393|       |                                        | '='
  394|       |                                )
  395|  76.4k|                            {
  396|  76.4k|                                // ok to escape
  397|   495k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  398|   488k|                                // ok to escape but requires IRI validation
  399|   488k|                                might_be_invalid_iri = true;
  400|   488k|                            } else {
  401|  6.33k|                                return Some((i + 1, Err((
  402|  6.33k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  403|  6.33k|                                ).into())));
  404|       |                            }
  405|   565k|                            let buffer = buffer.get_or_insert_with(String::new);
  406|   565k|                            // We add the missing bytes
  407|   565k|                            if i - position_that_is_already_in_buffer > 1 {
  408|   278k|                                buffer.push_str(
  409|   278k|                                    match str_from_utf8(
  410|   278k|                                        &data[position_that_is_already_in_buffer..i - 1],
  411|   278k|                                        position_that_is_already_in_buffer..i - 1,
  412|   278k|                                    ) {
  413|   278k|                                        Ok(data) => data,
  414|      0|                                        Err(e) => return Some((i, Err(e))),
  415|       |                                    },
  416|       |                                )
  417|   286k|                            }
  418|   565k|                            buffer.push(a);
  419|   565k|                            i += 1;
  420|   565k|                            position_that_is_already_in_buffer = i;
  421|   565k|                            ends_with_unescaped_dot = 0;
  422|  4.31M|                        } else if i == 0 {
  423|  1.36M|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  424|       |                            {
  425|   332k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  426|  1.03M|                            }
  427|  1.03M|                            if !self.unchecked {
  428|       |                                might_be_invalid_iri |=
  429|  1.03M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  430|  1.03M|                                        || c == ':';
  431|      0|                            }
  432|  1.03M|                            i += consumed;
  433|  2.94M|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  434|  2.41M|                            if !self.unchecked {
  435|       |                                might_be_invalid_iri |=
  436|  2.41M|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  437|  2.41M|                                        || c == ':';
  438|      0|                            }
  439|  2.41M|                            i += consumed;
  440|  2.41M|                            ends_with_unescaped_dot = 0;
  441|   537k|                        } else if c == '.' {
  442|   213k|                            i += consumed;
  443|   213k|                            ends_with_unescaped_dot += 1;
  444|   213k|                        } else {
  445|   324k|                            let buffer = if let Some(mut buffer) = buffer {
  446|  72.4k|                                buffer.push_str(
  447|  72.4k|                                    match str_from_utf8(
  448|  72.4k|                                        &data[position_that_is_already_in_buffer..i],
  449|  72.4k|                                        position_that_is_already_in_buffer..i,
  450|  72.4k|                                    ) {
  451|  72.4k|                                        Ok(data) => data,
  452|      0|                                        Err(e) => return Some((i, Err(e))),
  453|       |                                    },
  454|       |                                );
  455|       |                                // We do not include the last dots
  456|  72.4k|                                for _ in 0..ends_with_unescaped_dot {
  457|  25.1k|                                    buffer.pop();
  458|  25.1k|                                }
  459|  72.4k|                                i -= ends_with_unescaped_dot;
  460|  72.4k|                                Cow::Owned(buffer)
  461|       |                            } else {
  462|   252k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  463|   252k|                                    Ok(data) => data,
  464|      0|                                    Err(e) => return Some((i, Err(e))),
  465|       |                                };
  466|       |                                // We do not include the last dots
  467|   252k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  468|   252k|                                i -= ends_with_unescaped_dot;
  469|   252k|                                Cow::Borrowed(data)
  470|       |                            };
  471|   324k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  472|       |                        }
  473|       |                    }
  474|  50.2k|                    Err(e) => return Some((e.location.end, Err(e))),
  475|       |                }
  476|  1.80M|            } else if is_ending {
  477|  4.78k|                let buffer = if let Some(mut buffer) = buffer {
  478|       |                    // We do not include the last dot
  479|  1.49k|                    while buffer.ends_with('.') {
  480|    669|                        buffer.pop();
  481|    669|                        i -= 1;
  482|    669|                    }
  483|    824|                    Cow::Owned(buffer)
  484|       |                } else {
  485|  3.96k|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  486|  3.96k|                        Ok(data) => data,
  487|      0|                        Err(e) => return Some((i, Err(e))),
  488|       |                    };
  489|       |                    // We do not include the last dot
  490|  4.86k|                    while let Some(d) = data.strip_suffix('.') {
  491|    907|                        data = d;
  492|    907|                        i -= 1;
  493|    907|                    }
  494|  3.96k|                    Cow::Borrowed(data)
  495|       |                };
  496|  4.78k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  497|       |            } else {
  498|  1.80M|                return None;
  499|       |            }
  500|       |        }
  501|  2.58M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  663|   599k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  664|   599k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  665|   599k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  666|   599k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  667|   599k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  668|   599k|        let mut i = 0;
  669|   599k|        let c = *data.first()?;
  670|   599k|        if matches!(c, b'+' | b'-') {
  671|   119k|            i += 1;
  672|   480k|        }
  673|       |        // We read the digits before .
  674|   599k|        let mut count_before: usize = 0;
  675|       |        loop {
  676|  1.09M|            let c = *data.get(i)?;
  677|  1.00M|            if c.is_ascii_digit() {
  678|   494k|                i += 1;
  679|   494k|                count_before += 1;
  680|   494k|            } else {
  681|   508k|                break;
  682|       |            }
  683|       |        }
  684|       |
  685|       |        // We read the digits after .
  686|       |        #[allow(clippy::if_then_some_else_none)]
  687|   508k|        let count_after = if *data.get(i)? == b'.' {
  688|   208k|            i += 1;
  689|   208k|
  690|   208k|            let mut count_after = 0;
  691|       |            loop {
  692|   296k|                let c = *data.get(i)?;
  693|   211k|                if c.is_ascii_digit() {
  694|  88.2k|                    i += 1;
  695|  88.2k|                    count_after += 1;
  696|  88.2k|                } else {
  697|   123k|                    break;
  698|   123k|                }
  699|   123k|            }
  700|   123k|            Some(count_after)
  701|       |        } else {
  702|   299k|            None
  703|       |        };
  704|       |
  705|       |        // End
  706|   423k|        let c = *data.get(i)?;
  707|   423k|        if matches!(c, b'e' | b'E') {
  708|  78.1k|            i += 1;
  709|       |
  710|  78.1k|            let c = *data.get(i)?;
  711|  62.1k|            if matches!(c, b'+' | b'-') {
  712|  3.41k|                i += 1;
  713|  58.7k|            }
  714|       |
  715|  62.1k|            let mut found = false;
  716|       |            loop {
  717|   111k|                let c = *data.get(i)?;
  718|  72.8k|                if c.is_ascii_digit() {
  719|  49.7k|                    i += 1;
  720|  49.7k|                    found = true;
  721|  49.7k|                } else {
  722|  23.0k|                    break;
  723|  23.0k|                }
  724|  23.0k|            }
  725|  23.0k|            Some((
  726|  23.0k|                i,
  727|  23.0k|                if !found {
  728|  14.3k|                    Err((0..i, "A double exponent cannot be empty").into())
  729|  8.65k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  730|    934|                    Err((0..i, "A double should not be empty").into())
  731|       |                } else {
  732|  7.72k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  733|       |                },
  734|       |            ))
  735|   345k|        } else if let Some(count_after) = count_after {
  736|  81.6k|            if count_after == 0 {
  737|       |                // We do not consume the '.' after all
  738|  58.3k|                i -= 1;
  739|  58.3k|                Some((
  740|  58.3k|                    i,
  741|  58.3k|                    if count_before == 0 {
  742|  5.74k|                        Err((0..i, "An integer should not be empty").into())
  743|       |                    } else {
  744|  52.6k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  745|       |                    },
  746|       |                ))
  747|       |            } else {
  748|  23.3k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  749|       |            }
  750|       |        } else {
  751|       |            Some((
  752|   263k|                i,
  753|   263k|                if count_before == 0 {
  754|  70.6k|                    Err((0..i, "An integer should not be empty").into())
  755|       |                } else {
  756|   192k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  757|       |                },
  758|       |            ))
  759|       |        }
  760|   599k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  797|  49.6k|    fn recognize_hex_char(
  798|  49.6k|        data: &[u8],
  799|  49.6k|        len: usize,
  800|  49.6k|        escape_char: char,
  801|  49.6k|        position: usize,
  802|  49.6k|    ) -> Result<Option<char>, TokenRecognizerError> {
  803|  49.6k|        if data.len() < len {
  804|  17.9k|            return Ok(None);
  805|  31.6k|        }
  806|  31.6k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  807|  27.1k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|       |            (
  809|       |                position..position + len + 2,
  810|       |                format!(
  811|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|       |                ),
  813|       |            )
  814|  27.1k|        })?;
  815|  25.9k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|       |            (
  817|       |                position..position + len +2,
  818|       |                format!(
  819|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|       |                ),
  821|       |            )
  822|  25.9k|        })?;
  823|  25.6k|        Ok(Some(c))
  824|  49.6k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  899|  13.0M|    fn is_possible_pn_chars_base(c: char) -> bool {
  900|  13.0M|        matches!(c,
  901|  7.51M|        'A'..='Z'
  902|  4.64M|        | 'a'..='z'
  903|  1.44M|        | '\u{00C0}'..='\u{00D6}'
  904|  1.44M|        | '\u{00D8}'..='\u{00F6}'
  905|  1.44M|        | '\u{00F8}'..='\u{02FF}'
  906|  1.16M|        | '\u{0370}'..='\u{037D}'
  907|  1.16M|        | '\u{037F}'..='\u{1FFF}'
  908|   293k|        | '\u{200C}'..='\u{200D}'
  909|   293k|        | '\u{2070}'..='\u{218F}'
  910|   293k|        | '\u{2C00}'..='\u{2FEF}'
  911|   293k|        | '\u{3001}'..='\u{D7FF}'
  912|   109k|        | '\u{F900}'..='\u{FDCF}'
  913|   109k|        | '\u{FDF0}'..='\u{FFFD}'
  914|   109k|        | '\u{10000}'..='\u{EFFFF}')
  915|  13.0M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  503|  95.5k|    fn recognize_blank_node_label(
  504|  95.5k|        data: &[u8],
  505|  95.5k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  506|  95.5k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  507|  95.5k|        let mut i = 2;
  508|       |        loop {
  509|   214k|            match Self::recognize_unicode_char(&data[i..], i)? {
  510|   151k|                Ok((c, consumed)) => {
  511|   151k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  512|   129k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  513|   108k|                    {
  514|   108k|                        // Ok
  515|   108k|                    } else if i > 2 && c == '.' {
  516|  14.5k|                        if data[i - 1] == b'.' {
  517|  3.57k|                            i -= 1;
  518|  3.57k|                            return Some((
  519|  3.57k|                                i,
  520|  3.57k|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  521|  3.57k|                            ));
  522|  11.0k|                        }
  523|  29.1k|                    } else if i == 0 {
  524|      0|                        return Some((
  525|      0|                            i,
  526|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  527|      0|                        ));
  528|  29.1k|                    } else if data[i - 1] == b'.' {
  529|  1.59k|                        i -= 1;
  530|  1.59k|                        return Some((
  531|  1.59k|                            i,
  532|  1.59k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  533|  1.59k|                        ));
  534|       |                    } else {
  535|  27.5k|                        return Some((
  536|  27.5k|                            i,
  537|  27.5k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  538|  27.5k|                        ));
  539|       |                    }
  540|   119k|                    i += consumed;
  541|       |                }
  542|  5.79k|                Err(e) => return Some((e.location.end, Err(e))),
  543|       |            }
  544|       |        }
  545|  95.5k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  587|   172k|    fn recognize_string(
  588|   172k|        data: &[u8],
  589|   172k|        delimiter: u8,
  590|   172k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  591|   172k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  592|   172k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  593|   172k|        let mut string = String::new();
  594|   172k|        let mut i = 1;
  595|       |        loop {
  596|   180k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  597|   158k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  598|   152k|                Ok(s) => string.push_str(s),
  599|  6.10k|                Err(e) => return Some((end, Err(e))),
  600|       |            };
  601|   152k|            i += end;
  602|   152k|            match data[i] {
  603|   152k|                c if c == delimiter => {
  604|  73.1k|                    return Some((i + 1, Ok(N3Token::String(string))));
  605|       |                }
  606|       |                b'\\' => {
  607|  79.6k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  608|  78.2k|                    i += additional + 1;
  609|  78.2k|                    match c {
  610|  8.46k|                        Ok(c) => {
  611|  8.46k|                            string.push(c);
  612|  8.46k|                        }
  613|  69.7k|                        Err(e) => {
  614|       |                            // We read until the end of string char
  615|  69.7k|                            let end = memchr(delimiter, &data[i..])?;
  616|  5.66k|                            return Some((i + end + 1, Err(e)));
  617|       |                        }
  618|       |                    }
  619|       |                }
  620|      0|                _ => unreachable!(),
  621|       |            }
  622|       |        }
  623|   172k|    }
_RNvNtCsgLOhukngm62_5oxttl5lexer18resolve_local_name:
  936|   298k|pub fn resolve_local_name(
  937|   298k|    prefix: &str,
  938|   298k|    local: &str,
  939|   298k|    might_be_invalid_iri: bool,
  940|   298k|    prefixes: &HashMap<String, Iri<String>>,
  941|   298k|) -> Result<NamedNode, String> {
  942|   298k|    if let Some(start) = prefixes.get(prefix) {
  943|   240k|        let iri = format!("{start}{local}");
  944|   240k|        if might_be_invalid_iri || start.path().is_empty() {
  945|       |            // We validate again. We always validate if the local part might be the IRI authority.
  946|   225k|            if let Err(e) = Iri::parse(iri.as_str()) {
  947|  78.1k|                return Err(format!(
  948|  78.1k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  949|  78.1k|                ));
  950|   147k|            }
  951|  15.0k|        }
  952|   162k|        Ok(NamedNode::new_unchecked(iri))
  953|       |    } else {
  954|  58.1k|        Err(format!("The prefix {prefix}: has not been declared"))
  955|       |    }
  956|   298k|}
_RNvXs2_NtCsgLOhukngm62_5oxttl5lexerNtB5_7N3TokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   12|  3.00M|#[derive(Debug, PartialEq, Eq)]
_RNvNtCsgLOhukngm62_5oxttl5lexer16string_from_utf8:
  968|   441k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  969|   441k|    String::from_utf8(data).map_err(|e| {
  970|       |        (
  971|       |            range.start + e.utf8_error().valid_up_to()
  972|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|       |            format!("Invalid UTF-8: {e}"),
  974|       |        )
  975|       |            .into()
  976|   441k|    })
  977|   441k|}
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  625|  83.6k|    fn recognize_long_string(
  626|  83.6k|        data: &[u8],
  627|  83.6k|        delimiter: u8,
  628|  83.6k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  629|  83.6k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  630|  83.6k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  631|  83.6k|        let mut string = String::new();
  632|  83.6k|        let mut i = 3;
  633|       |        loop {
  634|   150k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  635|   128k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  636|   122k|                Ok(s) => string.push_str(s),
  637|  6.16k|                Err(e) => return Some((end, Err(e))),
  638|       |            };
  639|   122k|            i += end;
  640|   122k|            match data[i] {
  641|   122k|                c if c == delimiter => {
  642|   109k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  643|  44.1k|                        return Some((i + 3, Ok(N3Token::String(string))));
  644|  58.0k|                    }
  645|  58.0k|                    i += 1;
  646|  58.0k|                    string.push(char::from(delimiter));
  647|       |                }
  648|       |                b'\\' => {
  649|  13.0k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  650|  11.7k|                    i += additional + 1;
  651|  11.7k|                    match c {
  652|  8.44k|                        Ok(c) => {
  653|  8.44k|                            string.push(c);
  654|  8.44k|                        }
  655|  3.32k|                        Err(e) => return Some((i, Err(e))),
  656|       |                    }
  657|       |                }
  658|      0|                _ => unreachable!(),
  659|       |            }
  660|       |        }
  661|  83.6k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  826|  19.3M|    fn recognize_unicode_char(
  827|  19.3M|        data: &[u8],
  828|  19.3M|        position: usize,
  829|  19.3M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  830|  19.3M|        let mut code_point: u32;
  831|  19.3M|        let bytes_needed: usize;
  832|  19.3M|        let mut lower_boundary = 0x80;
  833|  19.3M|        let mut upper_boundary = 0xBF;
  834|       |
  835|  19.3M|        let byte = *data.first()?;
  836|  16.9M|        match byte {
  837|  16.9M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  838|  1.91M|            0xC2..=0xDF => {
  839|  1.42M|                bytes_needed = 1;
  840|  1.42M|                code_point = u32::from(byte) & 0x1F;
  841|  1.42M|            }
  842|   490k|            0xE0..=0xEF => {
  843|   286k|                if byte == 0xE0 {
  844|  19.5k|                    lower_boundary = 0xA0;
  845|   267k|                }
  846|   286k|                if byte == 0xED {
  847|  9.29k|                    upper_boundary = 0x9F;
  848|   277k|                }
  849|   286k|                bytes_needed = 2;
  850|   286k|                code_point = u32::from(byte) & 0xF;
  851|       |            }
  852|   203k|            0xF0..=0xF4 => {
  853|   145k|                if byte == 0xF0 {
  854|  1.28k|                    lower_boundary = 0x90;
  855|   144k|                }
  856|   145k|                if byte == 0xF4 {
  857|  2.75k|                    upper_boundary = 0x8F;
  858|   143k|                }
  859|   145k|                bytes_needed = 3;
  860|   145k|                code_point = u32::from(byte) & 0x7;
  861|       |            }
  862|       |            _ => {
  863|   433k|                return Some(Err((
  864|   433k|                    position..=position,
  865|   433k|                    "Invalid UTF-8 character encoding",
  866|   433k|                )
  867|   433k|                    .into()))
  868|       |            }
  869|       |        }
  870|       |
  871|  2.29M|        for i in 1..=bytes_needed {
  872|  2.29M|            let byte = *data.get(i)?;
  873|  2.20M|            if byte < lower_boundary || upper_boundary < byte {
  874|   254k|                return Some(Err((
  875|   254k|                    position..=position + i,
  876|   254k|                    "Invalid UTF-8 character encoding",
  877|   254k|                )
  878|   254k|                    .into()));
  879|  1.95M|            }
  880|  1.95M|            lower_boundary = 0x80;
  881|  1.95M|            upper_boundary = 0xBF;
  882|  1.95M|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  883|       |        }
  884|       |
  885|  1.52M|        Some(
  886|  1.52M|            char::from_u32(code_point)
  887|  1.52M|                .map(|c| (c, bytes_needed + 1))
  888|  1.52M|                .ok_or_else(|| {
  889|       |                    (
  890|       |                        position..=position + bytes_needed,
  891|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  892|       |                    )
  893|       |                        .into()
  894|  1.52M|                }),
  895|  1.52M|        )
  896|  19.3M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  929|  3.44M|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  930|  3.44M|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  931|  3.44M|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  932|  3.44M|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  933|  3.44M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  572|   216k|    fn parse_lang_tag<'a>(
  573|   216k|        &self,
  574|   216k|        lang_tag: &'a [u8],
  575|   216k|        position: Range<usize>,
  576|   216k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  577|   216k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  578|   216k|        Ok(N3Token::LangTag(if self.unchecked {
  579|      0|            lang_tag
  580|       |        } else {
  581|   216k|            LanguageTag::parse(lang_tag)
  582|   216k|                .map_err(|e| (position.clone(), e.to_string()))?
  583|   183k|                .into_inner()
  584|       |        }))
  585|   216k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|  1.68M|    fn recognize_iri(
  178|  1.68M|        &self,
  179|  1.68M|        data: &[u8],
  180|  1.68M|        options: &N3LexerOptions,
  181|  1.68M|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|  1.68M|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|  1.68M|        let mut string = Vec::new();
  184|  1.68M|        let mut i = 1;
  185|       |        loop {
  186|  1.70M|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   511k|            string.extend_from_slice(&data[i..i + end]);
  188|   511k|            i += end;
  189|   511k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|   441k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  69.6k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  46.4k|                    i += additional + 1;
  197|  46.4k|                    match c {
  198|  24.8k|                        Ok(c) => {
  199|  24.8k|                            let mut buf = [0; 4];
  200|  24.8k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  24.8k|                        }
  202|  21.6k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|  1.68M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  762|   162k|    fn recognize_escape(
  763|   162k|        data: &[u8],
  764|   162k|        position: usize,
  765|   162k|        with_echar: bool,
  766|   162k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  767|   162k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  768|   162k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  769|   162k|        match *data.get(1)? {
  770|  47.5k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  771|  42.6k|                Ok(c) => Some((5, Ok(c?))),
  772|  4.93k|                Err(e) => Some((5, Err(e))),
  773|       |            },
  774|  2.03k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  775|    900|                Ok(c) => Some((9, Ok(c?))),
  776|  1.13k|                Err(e) => Some((9, Err(e))),
  777|       |            },
  778|    205|            b't' if with_echar => Some((1, Ok('\t'))),
  779|    220|            b'b' if with_echar => Some((1, Ok('\x08'))),
  780|    330|            b'n' if with_echar => Some((1, Ok('\n'))),
  781|  1.29k|            b'r' if with_echar => Some((1, Ok('\r'))),
  782|  3.25k|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  783|    195|            b'"' if with_echar => Some((1, Ok('"'))),
  784|  1.70k|            b'\'' if with_echar => Some((1, Ok('\''))),
  785|  8.90k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  786|  88.6k|            c => Some((
  787|  88.6k|                1,
  788|  88.6k|                Err((
  789|  88.6k|                    position..position + 2,
  790|  88.6k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  791|  88.6k|                )
  792|  88.6k|                    .into()),
  793|  88.6k|            )), // TODO: read until end of string
  794|       |        }
  795|   162k|    }
_RNvNtCsgLOhukngm62_5oxttl5lexer13str_from_utf8:
  958|  4.42M|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  959|  4.42M|    str::from_utf8(data).map_err(|e| {
  960|       |        (
  961|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|       |            format!("Invalid UTF-8: {e}"),
  963|       |        )
  964|       |            .into()
  965|  4.42M|    })
  966|  4.42M|}
_RNvXNtCsgLOhukngm62_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  15.8M|    fn recognize_next_token<'a>(
   56|  15.8M|        &mut self,
   57|  15.8M|        data: &'a [u8],
   58|  15.8M|        is_ending: bool,
   59|  15.8M|        options: &N3LexerOptions,
   60|  15.8M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  15.8M|        match *data.first()? {
   62|  2.16M|            b'<' => match *data.get(1)? {
   63|  10.0k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  47.5k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  47.5k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  9.45k|                        Some(if let Ok(result) = result {
   67|  2.51k|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  6.94k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  38.1k|                    } else if is_ending {
   72|    694|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  37.4k|                        None
   75|       |                    }
   76|       |                }
   77|   100k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|   100k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  24.5k|                        Some(if let Ok(result) = result {
   80|  5.61k|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  18.9k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|  75.5k|                    } else if is_ending {
   85|  6.58k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|  68.9k|                        None
   88|       |                    }
   89|       |                }
   90|  1.53M|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|   262k|                if *data.get(1)? == b'>' {
   94|  25.3k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|   146k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|   163k|            b'_' => match data.get(1)? {
  100|  95.5k|                b':' => Self::recognize_blank_node_label(data),
  101|  49.1k|                c => Some((
  102|  49.1k|                    1,
  103|  49.1k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  49.1k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  59.9k|                if self.mode != N3LexerMode::NTriples
  108|  59.9k|                    && *data.get(1)? == b'"'
  109|  39.1k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  28.0k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  26.9k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|   248k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|   248k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  55.5k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|   145k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   859k|            b'@' => self.recognize_lang_tag(data),
  124|  1.18M|            b'.' => match data.get(1) {
  125|   744k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   928k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|   184k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  51.9k|                if *data.get(1)? == b'^' {
  131|  34.7k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  14.4k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|   141k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  37.3k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|   704k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  74.7k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   870k|                if *data.get(1)? == b'|' {
  142|  5.22k|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   790k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|   170k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  68.2k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  62.6k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  48.4k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  15.5k|                if *data.get(1)? == b'}' {
  153|  2.09k|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  8.82k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  70.6k|                if *data.get(1)? == b'>' {
  160|  8.60k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  36.3k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|  4.77M|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|   167k|            b'?' => self.recognize_variable(data, is_ending),
  167|  6.40M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  15.8M|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|   441k|    fn parse_iri(
  211|   441k|        &self,
  212|   441k|        iri: Vec<u8>,
  213|   441k|        position: Range<usize>,
  214|   441k|        options: &N3LexerOptions,
  215|   441k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|   441k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|   422k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|   422k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|   422k|                    base_iri
  223|   422k|                        .resolve(&iri)
  224|   422k|                        .map_err(|e| (position, e.to_string()))?
  225|       |                }
  226|   322k|                .into_inner()
  227|      0|            } else if self.unchecked {
  228|      0|                iri
  229|       |            } else {
  230|      0|                Iri::parse(iri)
  231|      0|                    .map_err(|e| (position, e.to_string()))?
  232|      0|                    .into_inner()
  233|       |            },
  234|       |        ))
  235|   441k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  328|   167k|    fn recognize_variable<'a>(
  329|   167k|        &self,
  330|   167k|        data: &'a [u8],
  331|   167k|        is_ending: bool,
  332|   167k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  333|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  334|   167k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  335|  88.8k|        Some((
  336|  88.8k|            consumed + 1,
  337|  88.8k|            result.and_then(|(name, _)| {
  338|       |                if name.is_empty() {
  339|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|       |                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  88.8k|            }),
  344|  88.8k|        ))
  345|   167k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  547|   859k|    fn recognize_lang_tag<'a>(
  548|   859k|        &self,
  549|   859k|        data: &'a [u8],
  550|   859k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  551|   859k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  552|   859k|        let mut is_last_block_empty = true;
  553|  4.61M|        for (i, c) in data[1..].iter().enumerate() {
  554|  4.61M|            if c.is_ascii_alphabetic() {
  555|  4.16M|                is_last_block_empty = false;
  556|  4.16M|            } else if i == 0 {
  557|   107k|                return Some((
  558|   107k|                    1,
  559|   107k|                    Err((1..2, "A language code should always start with a letter").into()),
  560|   107k|                ));
  561|   341k|            } else if is_last_block_empty {
  562|  4.07k|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  563|   337k|            } else if *c == b'-' {
  564|   125k|                is_last_block_empty = true;
  565|   125k|            } else {
  566|   212k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  567|       |            }
  568|       |        }
  569|   535k|        None
  570|   859k|    }
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  918|  9.23M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  919|  9.23M|        Self::is_possible_pn_chars_base(c) || c == '_'
  920|  9.23M|    }
_RNvXs8_NtCsgLOhukngm62_5oxttl5lexerNtB5_11N3LexerModeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   31|   455k|#[derive(Eq, PartialEq)]
_RNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  923|  7.83M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  924|  7.83M|        Self::is_possible_pn_chars_u(c)
  925|  2.80M|            || matches!(c,
  926|  1.82M|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  927|  7.83M|    }
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  337|  80.0k|            result.and_then(|(name, _)| {
  338|  80.0k|                if name.is_empty() {
  339|  47.3k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  340|       |                } else {
  341|  32.7k|                    Ok(N3Token::Variable(name))
  342|       |                }
  343|  80.0k|            }),
_RNCNvNtCsgLOhukngm62_5oxttl5lexer16string_from_utf80B5_:
  969|  19.0k|    String::from_utf8(data).map_err(|e| {
  970|  19.0k|        (
  971|  19.0k|            range.start + e.utf8_error().valid_up_to()
  972|  19.0k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  973|  19.0k|            format!("Invalid UTF-8: {e}"),
  974|  19.0k|        )
  975|  19.0k|            .into()
  976|  19.0k|    })
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  582|  33.3k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  807|  1.23k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  808|  1.23k|            (
  809|  1.23k|                position..position + len + 2,
  810|  1.23k|                format!(
  811|  1.23k|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  812|  1.23k|                ),
  813|  1.23k|            )
  814|  1.23k|        })?;
_RNCNvNtCsgLOhukngm62_5oxttl5lexer13str_from_utf80B5_:
  959|  16.7k|    str::from_utf8(data).map_err(|e| {
  960|  16.7k|        (
  961|  16.7k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  962|  16.7k|            format!("Invalid UTF-8: {e}"),
  963|  16.7k|        )
  964|  16.7k|            .into()
  965|  16.7k|    })
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  99.8k|                        .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  887|  1.52M|                .map(|c| (c, bytes_needed + 1))
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  815|    322|        let c = char::from_u32(codepoint).ok_or_else(|| {
  816|    322|            (
  817|    322|                position..position + len +2,
  818|    322|                format!(
  819|    322|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  820|    322|                ),
  821|    322|            )
  822|    322|        })?;
_RNCNvMs_NtCsgLOhukngm62_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  320|   581k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  321|   581k|                prefix: pn_prefix,
  322|   581k|                local,
  323|   581k|                might_be_invalid_iri,
  324|   581k|            }),

_RINvMsb_NtCsgLOhukngm62_5oxttl2n3NtB6_8N3Parser13with_base_iriReECs96HrlsBBTql_2n3:
  235|  34.3k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  236|  34.3k|        self.base = Some(Iri::parse(base_iri.into())?);
  237|  34.3k|        Ok(self)
  238|  34.3k|    }
_RNvMsb_NtCsgLOhukngm62_5oxttl2n3NtB5_8N3Parser3newCs96HrlsBBTql_2n3:
  219|  34.3k|    pub fn new() -> Self {
  220|  34.3k|        Self::default()
  221|  34.3k|    }
_RNvXsw_NtCsgLOhukngm62_5oxttl2n3NtB5_8N3ParserNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs96HrlsBBTql_2n3:
  208|  34.3k|#[derive(Default)]
_RNvMse_NtCsgLOhukngm62_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  636|  34.3k|    pub fn is_end(&self) -> bool {
  637|  34.3k|        self.parser.is_end()
  638|  34.3k|    }
_RNvXsn_NtCsgLOhukngm62_5oxttl2n3NtB5_6N3TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   26|   166k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsf_NtCsgLOhukngm62_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  738|  5.45M|    fn recognize_next(
  739|  5.45M|        mut self,
  740|  5.45M|        token: N3Token<'_>,
  741|  5.45M|        context: &mut N3RecognizerContext,
  742|  5.45M|        results: &mut Vec<N3Quad>,
  743|  5.45M|        errors: &mut Vec<RuleRecognizerError>,
  744|  5.45M|    ) -> Self {
  745|  12.8M|        while let Some(rule) = self.stack.pop() {
  746|  10.1M|            match rule {
  747|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  748|       |                // [2]  n3Statement      ::=  n3Directive | triples
  749|       |                // [3]  n3Directive      ::=  prefixID | base
  750|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  751|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  752|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  753|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  754|       |                // [8]  base             ::=  "@base" IRIREF
  755|       |                N3State::N3Doc => {
  756|   810k|                    self.stack.push(N3State::N3Doc);
  757|  71.7k|                    match token {
  758|  93.6k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  759|  21.9k|                            self.stack.push(N3State::BaseExpectIri);
  760|  21.9k|                            return self;
  761|       |                        }
  762|  71.7k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  763|  2.23k|                            self.stack.push(N3State::PrefixExpectPrefix);
  764|  2.23k|                            return self;
  765|       |                        }
  766|   143k|                        N3Token::LangTag("prefix") => {
  767|   114k|                            self.stack.push(N3State::N3DocExpectDot);
  768|   114k|                            self.stack.push(N3State::PrefixExpectPrefix);
  769|   114k|                            return self;
  770|       |                        }
  771|  28.9k|                        N3Token::LangTag("base") => {
  772|    988|                            self.stack.push(N3State::N3DocExpectDot);
  773|    988|                            self.stack.push(N3State::BaseExpectIri);
  774|    988|                            return self;
  775|       |                        }
  776|   671k|                        _ => {
  777|   671k|                            self.stack.push(N3State::N3DocExpectDot);
  778|   671k|                            self.stack.push(N3State::Triples);
  779|   671k|                        }
  780|       |                    }
  781|       |                }
  782|       |                N3State::N3DocExpectDot => {
  783|  99.3k|                    if token == N3Token::Punctuation(".") {
  784|  23.6k|                        return self;
  785|  75.6k|                    }
  786|  75.6k|                    errors.push("A dot is expected at the end of N3 statements".into());
  787|       |                }
  788|  24.3k|                N3State::BaseExpectIri => return if let N3Token::IriRef(iri) = token {
  789|  19.3k|                                context.lexer_options.base_iri = Some(Iri::parse_unchecked(iri));
  790|  19.3k|                                self
  791|       |                    } else {
  792|  4.98k|                    self.error(errors, "The BASE keyword should be followed by an IRI")
  793|       |                },
  794|   103k|                N3State::PrefixExpectPrefix => return match token {
  795|   103k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  796|  98.2k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  797|  98.2k|                        self
  798|       |                    }
  799|       |                    _ => {
  800|  14.4k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  801|       |                    }
  802|       |                },
  803|  89.2k|                N3State::PrefixExpectIri { name } => return if let N3Token::IriRef(iri) = token {
  804|  86.4k|                    context.prefixes.insert(name, Iri::parse_unchecked(iri));
  805|  86.4k|                    self
  806|  2.76k|                } else { self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI")
  807|       |                },
  808|       |                // [9]  triples  ::=  subject predicateObjectList?
  809|  1.25M|                N3State::Triples => {
  810|  1.25M|                    self.stack.push(N3State::TriplesMiddle);
  811|  1.25M|                    self.stack.push(N3State::Path);
  812|  1.25M|                }
  813|   191k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  814|   152k|                    self.stack.push(N3State::TriplesEnd);
  815|   152k|                    self.stack.push(N3State::PredicateObjectList);
  816|   152k|                },
  817|  44.3k|                N3State::TriplesEnd => {
  818|  44.3k|                    self.terms.pop();
  819|  44.3k|                }
  820|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  821|   539k|                N3State::PredicateObjectList => {
  822|   539k|                    self.stack.push(N3State::PredicateObjectListEnd);
  823|   539k|                    self.stack.push(N3State::ObjectsList);
  824|   539k|                    self.stack.push(N3State::Verb);
  825|   539k|                }
  826|       |                N3State::PredicateObjectListEnd => {
  827|  65.2k|                    self.predicates.pop();
  828|  65.2k|                    if token == N3Token::Punctuation(";") {
  829|  11.3k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  830|  11.3k|                        return self;
  831|  53.8k|                    }
  832|       |                }
  833|  24.2k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  834|  13.0k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  835|  13.0k|                    return self;
  836|  11.2k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  837|  3.89k|                    self.stack.push(N3State::PredicateObjectListEnd);
  838|  3.89k|                    self.stack.push(N3State::ObjectsList);
  839|  3.89k|                    self.stack.push(N3State::Verb);
  840|  3.89k|                },
  841|       |                // [11]  objectList  ::=  object ( "," object) *
  842|   183k|                N3State::ObjectsList => {
  843|   183k|                    self.stack.push(N3State::ObjectsListEnd);
  844|   183k|                    self.stack.push(N3State::Path);
  845|   183k|                }
  846|       |                N3State::ObjectsListEnd => {
  847|  69.0k|                    let object = self.terms.pop().unwrap();
  848|  69.0k|                    let subject = self.terms.last().unwrap().clone();
  849|  69.0k|                    results.push(match self.predicates.last().unwrap().clone() {
  850|  65.8k|                        Predicate::Regular(predicate) => self.quad(
  851|  65.8k|                            subject,
  852|  65.8k|                            predicate,
  853|  65.8k|                            object,
  854|  65.8k|                        ),
  855|  3.26k|                        Predicate::Inverted(predicate) => self.quad(
  856|  3.26k|                            object,
  857|  3.26k|                            predicate,
  858|  3.26k|                            subject,
  859|  3.26k|                        )
  860|       |                    });
  861|  69.0k|                    if token == N3Token::Punctuation(",") {
  862|  3.85k|                        self.stack.push(N3State::ObjectsListEnd);
  863|  3.85k|                        self.stack.push(N3State::Path);
  864|  3.85k|                        return self;
  865|  65.2k|                    }
  866|       |                }
  867|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
  868|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
  869|   543k|                N3State::Verb => match token {
  870|  43.9k|                    N3Token::PlainKeyword("a") => {
  871|  27.7k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
  872|  27.7k|                        return self;
  873|       |                    }
  874|  16.2k|                    N3Token::PlainKeyword("has") => {
  875|    768|                        self.stack.push(N3State::AfterRegularVerb);
  876|    768|                        self.stack.push(N3State::Path);
  877|    768|                        return self;
  878|       |                    }
  879|  15.5k|                    N3Token::PlainKeyword("is") => {
  880|  3.68k|                        self.stack.push(N3State::AfterVerbIs);
  881|  3.68k|                        self.stack.push(N3State::Path);
  882|  3.68k|                        return self;
  883|       |                    }
  884|   262k|                    N3Token::Punctuation("=") => {
  885|  5.89k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
  886|  5.89k|                        return self;
  887|       |                    }
  888|   256k|                    N3Token::Punctuation("=>") => {
  889|  4.17k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  890|  4.17k|                        return self;
  891|       |                    }
  892|   252k|                    N3Token::Punctuation("<=") => {
  893|    580|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  894|    580|                        return self;
  895|       |                    }
  896|   252k|                    N3Token::Punctuation("<-") => {
  897|  3.15k|                        self.stack.push(N3State::AfterInvertedVerb);
  898|  3.15k|                        self.stack.push(N3State::Path);
  899|  3.15k|                        return self;
  900|       |                    }
  901|   497k|                    _ => {
  902|   497k|                        self.stack.push(N3State::AfterRegularVerb);
  903|   497k|                        self.stack.push(N3State::Path);
  904|   497k|                    }
  905|       |                }
  906|   144k|                N3State::AfterRegularVerb => {
  907|   144k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
  908|   144k|                }
  909|  3.06k|                N3State::AfterInvertedVerb => {
  910|  3.06k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  911|  3.06k|                }
  912|  3.66k|                N3State::AfterVerbIs => return match token {
  913|  2.63k|                    N3Token::PlainKeyword("of") => {
  914|    751|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  915|    751|                        self
  916|       |                    }
  917|       |                    _ => {
  918|  2.91k|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
  919|       |                    }
  920|       |                },
  921|       |                // [13]  subject     ::=  expression
  922|       |                // [15]  object      ::=  expression
  923|       |                // [16]  expression  ::=  path
  924|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
  925|  2.04M|                N3State::Path => {
  926|  2.04M|                    self.stack.push(N3State::PathFollowUp);
  927|  2.04M|                    self.stack.push(N3State::PathItem);
  928|  2.04M|                }
  929|   448k|                N3State::PathFollowUp => match token {
  930|   317k|                    N3Token::Punctuation("!") => {
  931|  4.36k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
  932|  4.36k|                        self.stack.push(N3State::PathItem);
  933|  4.36k|                        return self;
  934|       |                    }
  935|   313k|                    N3Token::Punctuation("^") => {
  936|  3.79k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
  937|  3.79k|                        self.stack.push(N3State::PathItem);
  938|  3.79k|                        return self;
  939|       |                    }
  940|   440k|                    _ => ()
  941|       |                },
  942|  6.43k|                N3State::PathAfterIndicator { is_inverse } => {
  943|  6.43k|                    let predicate = self.terms.pop().unwrap();
  944|  6.43k|                    let previous = self.terms.pop().unwrap();
  945|  6.43k|                    let current = BlankNode::default();
  946|  6.43k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
  947|  6.43k|                    self.terms.push(current.into());
  948|  6.43k|                    self.stack.push(N3State::PathFollowUp);
  949|       |                }
  950|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
  951|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
  952|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
  953|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
  954|       |                // [22]  collection             ::=  "(" object* ")"
  955|       |                // [23]  formula                ::=  "{" formulaContent? "}"
  956|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
  957|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
  958|       |                // [27]  iri                    ::=  IRIREF | prefixedName
  959|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
  960|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
  961|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
  962|       |                N3State::PathItem => {
  963|  2.04M|                    return match token {
  964|  50.8k|                        N3Token::IriRef(iri) => {
  965|  50.8k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
  966|  50.8k|                            self
  967|       |                        }
  968|   286k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  969|   158k|                            Ok(t) => {
  970|   158k|                                self.terms.push(t.into());
  971|   158k|                                self
  972|       |                            }
  973|   128k|                            Err(e) =>  self.error(errors, e)
  974|       |                        }
  975|  27.3k|                        N3Token::BlankNodeLabel(bnode) => {
  976|  27.3k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
  977|  27.3k|                            self
  978|       |                        }
  979|  15.3k|                        N3Token::Variable(name) => {
  980|  15.3k|                            self.terms.push(Variable::new_unchecked(name).into());
  981|  15.3k|                            self
  982|       |                        }
  983|  1.36M|                        N3Token::Punctuation("[") => {
  984|   415k|                            self.stack.push(N3State::PropertyListMiddle);
  985|   415k|                            self
  986|       |                        }
  987|   949k|                        N3Token::Punctuation("(") => {
  988|  89.2k|                            self.stack.push(N3State::CollectionBeginning);
  989|  89.2k|                            self
  990|       |                        }
  991|  82.9k|                        N3Token::String(value) => {
  992|  82.9k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
  993|  82.9k|                            self
  994|       |                        }
  995|  61.8k|                        N3Token::Integer(v) => {
  996|  61.8k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
  997|  61.8k|                            self
  998|       |                        }
  999|  14.1k|                        N3Token::Decimal(v) => {
 1000|  14.1k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1001|  14.1k|                            self
 1002|       |                        }
 1003|  7.20k|                        N3Token::Double(v) => {
 1004|  7.20k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1005|  7.20k|                            self
 1006|       |                        }
 1007|   104k|                        N3Token::PlainKeyword("true") => {
 1008|  1.47k|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1009|  1.47k|                            self
 1010|       |                        }
 1011|   102k|                        N3Token::PlainKeyword("false") => {
 1012|  2.25k|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1013|  2.25k|                            self
 1014|       |                        }
 1015|   859k|                        N3Token::Punctuation("{") => {
 1016|   656k|                            self.contexts.push(BlankNode::default());
 1017|   656k|                            self.stack.push(N3State::FormulaContent);
 1018|   656k|                            self
 1019|       |                        }
 1020|       |                        _ =>
 1021|   336k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1022|       |
 1023|       |                    }
 1024|       |                }
 1025|   394k|                N3State::PropertyListMiddle => match token {
 1026|   167k|                    N3Token::Punctuation("]") => {
 1027|  3.43k|                        self.terms.push(BlankNode::default().into());
 1028|  3.43k|                        return self;
 1029|       |                    }
 1030|  43.5k|                    N3Token::PlainKeyword("id") => {
 1031|  5.73k|                        self.stack.push(N3State::IriPropertyList);
 1032|  5.73k|                        return self;
 1033|       |                    }
 1034|   385k|                    _ => {
 1035|   385k|                        self.terms.push(BlankNode::default().into());
 1036|   385k|                        self.stack.push(N3State::PropertyListEnd);
 1037|   385k|                        self.stack.push(N3State::PredicateObjectList);
 1038|   385k|                    }
 1039|       |                }
 1040|  16.9k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1041|  1.48k|                    return self;
 1042|  15.4k|                } else {
 1043|  15.4k|                    errors.push("blank node property lists should end with a ']'".into());
 1044|  15.4k|                }
 1045|  5.18k|                N3State::IriPropertyList => return match token {
 1046|  1.10k|                    N3Token::IriRef(id) => {
 1047|  1.10k|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1048|  1.10k|                        self.stack.push(N3State::PropertyListEnd);
 1049|  1.10k|                        self.stack.push(N3State::PredicateObjectList);
 1050|  1.10k|                        self
 1051|       |                    }
 1052|  3.11k|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1053|    597|                        Ok(t) => {
 1054|    597|                            self.terms.push(t.into());
 1055|    597|                            self.stack.push(N3State::PropertyListEnd);
 1056|    597|                            self.stack.push(N3State::PredicateObjectList);
 1057|    597|                            self
 1058|       |                        }
 1059|  2.51k|                        Err(e) => {
 1060|  2.51k|                            self.error(errors, e)
 1061|       |                        }
 1062|       |                    }
 1063|       |                    _ => {
 1064|    964|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1065|       |                    }
 1066|       |                },
 1067|  87.6k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1068|  5.95k|                    self.terms.push(rdf::NIL.into());
 1069|  5.95k|                    return self;
 1070|  81.6k|                } else {
 1071|  81.6k|                    let root = BlankNode::default();
 1072|  81.6k|                    self.terms.push(root.clone().into());
 1073|  81.6k|                    self.terms.push(root.into());
 1074|  81.6k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1075|  81.6k|                    self.stack.push(N3State::Path);
 1076|  81.6k|                },
 1077|       |                N3State::CollectionPossibleEnd => {
 1078|  28.4k|                    let value = self.terms.pop().unwrap();
 1079|  28.4k|                    let old = self.terms.pop().unwrap();
 1080|  28.4k|                    results.push(self.quad(
 1081|  28.4k|                        old.clone(),
 1082|  28.4k|                        rdf::FIRST,
 1083|  28.4k|                        value,
 1084|  28.4k|                    ));
 1085|  28.4k|                    if let N3Token::Punctuation(")") = token {
 1086|  11.2k|                        results.push(self.quad(
 1087|  11.2k|                            old,
 1088|  11.2k|                            rdf::REST,
 1089|  11.2k|                            rdf::NIL,
 1090|  11.2k|                        ));
 1091|  11.2k|                        return self;
 1092|  17.1k|                    }
 1093|  17.1k|                    let new = BlankNode::default();
 1094|  17.1k|                    results.push(self.quad(
 1095|  17.1k|                        old,
 1096|  17.1k|                        rdf::REST,
 1097|  17.1k|                        new.clone(),
 1098|  17.1k|                    ));
 1099|  17.1k|                    self.terms.push(new.into());
 1100|  17.1k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1101|  17.1k|                    self.stack.push(N3State::Path);
 1102|       |                }
 1103|  78.9k|                N3State::LiteralPossibleSuffix { value } => {
 1104|  78.9k|                    match token {
 1105|  5.21k|                        N3Token::LangTag(lang) => {
 1106|  5.21k|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1107|  5.21k|                            return self;
 1108|       |                        }
 1109|  32.9k|                        N3Token::Punctuation("^^") => {
 1110|  23.2k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1111|  23.2k|                            return self;
 1112|       |                        }
 1113|  50.4k|                        _ => {
 1114|  50.4k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1115|  50.4k|                        }
 1116|       |                    }
 1117|       |                }
 1118|  21.3k|                N3State::LiteralExpectDatatype { value } => {
 1119|  21.3k|                    match token {
 1120|  2.97k|                        N3Token::IriRef(datatype) => {
 1121|  2.97k|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1122|  2.97k|                            return self;
 1123|       |                        }
 1124|  8.99k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1125|  3.57k|                            Ok(datatype) => {
 1126|  3.57k|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1127|  3.57k|                                return self;
 1128|       |                            }
 1129|  5.42k|                            Err(e) => {
 1130|  5.42k|                                return self.error(errors, e);
 1131|       |                            }
 1132|       |                        }
 1133|  9.42k|                        _ => {
 1134|  9.42k|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1135|  9.42k|                            self.stack.clear();
 1136|  9.42k|                        }
 1137|       |                    }
 1138|       |                }
 1139|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1140|       |                N3State::FormulaContent => {
 1141|  19.4k|                    match token {
 1142|   627k|                        N3Token::Punctuation("}") => {
 1143|  97.3k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1144|  97.3k|                            return self;
 1145|       |                        }
 1146|  21.7k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1147|  2.27k|                            self.stack.push(N3State::FormulaContent);
 1148|  2.27k|                            self.stack.push(N3State::BaseExpectIri);
 1149|  2.27k|                            return self;
 1150|       |                        }
 1151|  19.4k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1152|  1.08k|                            self.stack.push(N3State::FormulaContent);
 1153|  1.08k|                            self.stack.push(N3State::PrefixExpectPrefix);
 1154|  1.08k|                            return self;
 1155|       |                        }
 1156|  5.97k|                        N3Token::LangTag("prefix") => {
 1157|    960|                            self.stack.push(N3State::FormulaContentExpectDot);
 1158|    960|                            self.stack.push(N3State::PrefixExpectPrefix);
 1159|    960|                            return self;
 1160|       |                        }
 1161|  5.01k|                        N3Token::LangTag("base") => {
 1162|    656|                            self.stack.push(N3State::FormulaContentExpectDot);
 1163|    656|                            self.stack.push(N3State::BaseExpectIri);
 1164|    656|                            return self;
 1165|       |                        }
 1166|   581k|                        _ => {
 1167|   581k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1168|   581k|                            self.stack.push(N3State::Triples);
 1169|   581k|                        }
 1170|       |                    }
 1171|       |                }
 1172|       |                N3State::FormulaContentExpectDot => {
 1173|  46.9k|                    match token {
 1174|  44.5k|                        N3Token::Punctuation("}") => {
 1175|  16.2k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1176|  16.2k|                            return self;
 1177|       |                        }
 1178|  28.2k|                        N3Token::Punctuation(".") => {
 1179|  6.64k|                            self.stack.push(N3State::FormulaContent);
 1180|  6.64k|                            return self;
 1181|       |                        }
 1182|  24.0k|                        _ => {
 1183|  24.0k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1184|  24.0k|                            self.stack.push(N3State::FormulaContent);
 1185|  24.0k|                        }
 1186|       |                    }
 1187|       |                }
 1188|       |            }
 1189|       |        }
 1190|       |        // Empty stack
 1191|  2.73M|        if token == N3Token::Punctuation(".") {
 1192|   779k|            self.stack.push(N3State::N3Doc);
 1193|   779k|            self
 1194|       |        } else {
 1195|  1.95M|            self
 1196|       |        }
 1197|  5.45M|    }
_RNvMse_NtCsgLOhukngm62_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  644|  11.1M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, TurtleSyntaxError>> {
  645|  11.1M|        self.parser.read_next()
  646|  11.1M|    }
_RNvXs_NtCsgLOhukngm62_5oxttl2n3NtB4_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaAh6yFmIely_5oxrdf10named_node9NamedNodeE4fromB6_:
   52|   221k|    fn from(node: NamedNode) -> Self {
   53|   221k|        Self::NamedNode(node)
   54|   221k|    }
_RNvXs2_NtCsgLOhukngm62_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaAh6yFmIely_5oxrdf7literal7LiteralE4fromB7_:
   73|   149k|    fn from(literal: Literal) -> Self {
   74|   149k|        Self::Literal(literal)
   75|   149k|    }
_RNvXs8_NtCsgLOhukngm62_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaAh6yFmIely_5oxrdf8variable8VariableE4fromB7_:
  131|  15.3k|    fn from(variable: Variable) -> Self {
  132|  15.3k|        Self::Variable(variable)
  133|  15.3k|    }
_RNvMse_NtCsgLOhukngm62_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  631|  34.3k|    pub fn end(&mut self) {
  632|  34.3k|        self.parser.end()
  633|  34.3k|    }
_RNvMsb_NtCsgLOhukngm62_5oxttl2n3NtB5_8N3Parser5parse:
  365|  34.3k|    pub fn parse(self) -> LowLevelN3Reader {
  366|  34.3k|        LowLevelN3Reader {
  367|  34.3k|            parser: N3Recognizer::new_parser(self.unchecked, self.base, self.prefixes),
  368|  34.3k|        }
  369|  34.3k|    }
_RNvXs1_NtCsgLOhukngm62_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaAh6yFmIely_5oxrdf10blank_node9BlankNodeE4fromB7_:
   66|   740k|    fn from(node: BlankNode) -> Self {
   67|   740k|        Self::BlankNode(node)
   68|   740k|    }
_RNvXsf_NtCsgLOhukngm62_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1211|  15.8M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1212|  15.8M|        &context.lexer_options
 1213|  15.8M|    }
_RNvMsg_NtCsgLOhukngm62_5oxttl2n3NtB5_12N3Recognizer10new_parser:
 1217|  34.3k|    pub fn new_parser(
 1218|  34.3k|        unchecked: bool,
 1219|  34.3k|        base_iri: Option<Iri<String>>,
 1220|  34.3k|        prefixes: HashMap<String, Iri<String>>,
 1221|  34.3k|    ) -> Parser<Self> {
 1222|  34.3k|        Parser::new(
 1223|  34.3k|            Lexer::new(
 1224|  34.3k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1225|  34.3k|                MIN_BUFFER_SIZE,
 1226|  34.3k|                MAX_BUFFER_SIZE,
 1227|  34.3k|                true,
 1228|  34.3k|                Some(b"#"),
 1229|  34.3k|            ),
 1230|  34.3k|            Self {
 1231|  34.3k|                stack: vec![N3State::N3Doc],
 1232|  34.3k|                terms: Vec::new(),
 1233|  34.3k|                predicates: Vec::new(),
 1234|  34.3k|                contexts: Vec::new(),
 1235|  34.3k|            },
 1236|  34.3k|            N3RecognizerContext {
 1237|  34.3k|                lexer_options: N3LexerOptions { base_iri },
 1238|  34.3k|                prefixes,
 1239|  34.3k|            },
 1240|  34.3k|        )
 1241|  34.3k|    }
_RNvXs0_NtCsgLOhukngm62_5oxttl2n3NtB5_6N3TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   59|   101k|    fn from(node: NamedNodeRef<'_>) -> Self {
   60|   101k|        Self::NamedNode(node.into_owned())
   61|   101k|    }
_RNvXsf_NtCsgLOhukngm62_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1199|  34.3k|    fn recognize_end(
 1200|  34.3k|        self,
 1201|  34.3k|        _state: &mut N3RecognizerContext,
 1202|  34.3k|        _results: &mut Vec<Self::Output>,
 1203|  34.3k|        errors: &mut Vec<RuleRecognizerError>,
 1204|  34.3k|    ) {
 1205|  34.3k|        match &*self.stack {
 1206|  34.3k|            [] | [N3State::N3Doc] => (),
 1207|  3.58k|            _ => errors.push("Unexpected end".into()), // TODO
 1208|       |        }
 1209|  34.3k|    }
_RNvXsx_NtCsgLOhukngm62_5oxttl2n3NtB5_9PredicateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  707|  69.0k|#[derive(Clone)]
_RNvMse_NtCsgLOhukngm62_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  624|  7.07M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  625|  7.07M|        self.parser.extend_from_slice(other)
  626|  7.07M|    }
_RNvXsf_NtCsgLOhukngm62_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  730|  3.29M|    fn error_recovery_state(mut self) -> Self {
  731|  3.29M|        self.stack.clear();
  732|  3.29M|        self.terms.clear();
  733|  3.29M|        self.predicates.clear();
  734|  3.29M|        self.contexts.clear();
  735|  3.29M|        self
  736|  3.29M|    }
_RNCINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1267|    529|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1267|  27.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1267|  5.80k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1267|  5.27k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCsaAh6yFmIely_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1267|    549|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCsaAh6yFmIely_5oxrdf10blank_node9BlankNodeEB8_:
 1254|  3.91k|    fn quad(
 1255|  3.91k|        &self,
 1256|  3.91k|        subject: impl Into<N3Term>,
 1257|  3.91k|        predicate: impl Into<N3Term>,
 1258|  3.91k|        object: impl Into<N3Term>,
 1259|  3.91k|    ) -> N3Quad {
 1260|  3.91k|        N3Quad {
 1261|  3.91k|            subject: subject.into(),
 1262|  3.91k|            predicate: predicate.into(),
 1263|  3.91k|            object: object.into(),
 1264|  3.91k|            graph_name: self
 1265|  3.91k|                .contexts
 1266|  3.91k|                .last()
 1267|  3.91k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  3.91k|        }
 1269|  3.91k|    }
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
 1244|   136k|    fn error(
 1245|   136k|        mut self,
 1246|   136k|        errors: &mut Vec<RuleRecognizerError>,
 1247|   136k|        msg: impl Into<RuleRecognizerError>,
 1248|   136k|    ) -> Self {
 1249|   136k|        errors.push(msg.into());
 1250|   136k|        self.stack.clear();
 1251|   136k|        self
 1252|   136k|    }
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1244|   362k|    fn error(
 1245|   362k|        mut self,
 1246|   362k|        errors: &mut Vec<RuleRecognizerError>,
 1247|   362k|        msg: impl Into<RuleRecognizerError>,
 1248|   362k|    ) -> Self {
 1249|   362k|        errors.push(msg.into());
 1250|   362k|        self.stack.clear();
 1251|   362k|        self
 1252|   362k|    }
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1254|  11.2k|    fn quad(
 1255|  11.2k|        &self,
 1256|  11.2k|        subject: impl Into<N3Term>,
 1257|  11.2k|        predicate: impl Into<N3Term>,
 1258|  11.2k|        object: impl Into<N3Term>,
 1259|  11.2k|    ) -> N3Quad {
 1260|  11.2k|        N3Quad {
 1261|  11.2k|            subject: subject.into(),
 1262|  11.2k|            predicate: predicate.into(),
 1263|  11.2k|            object: object.into(),
 1264|  11.2k|            graph_name: self
 1265|  11.2k|                .contexts
 1266|  11.2k|                .last()
 1267|  11.2k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  11.2k|        }
 1269|  11.2k|    }
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1254|  28.4k|    fn quad(
 1255|  28.4k|        &self,
 1256|  28.4k|        subject: impl Into<N3Term>,
 1257|  28.4k|        predicate: impl Into<N3Term>,
 1258|  28.4k|        object: impl Into<N3Term>,
 1259|  28.4k|    ) -> N3Quad {
 1260|  28.4k|        N3Quad {
 1261|  28.4k|            subject: subject.into(),
 1262|  28.4k|            predicate: predicate.into(),
 1263|  28.4k|            object: object.into(),
 1264|  28.4k|            graph_name: self
 1265|  28.4k|                .contexts
 1266|  28.4k|                .last()
 1267|  28.4k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  28.4k|        }
 1269|  28.4k|    }
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCsaAh6yFmIely_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1254|  17.1k|    fn quad(
 1255|  17.1k|        &self,
 1256|  17.1k|        subject: impl Into<N3Term>,
 1257|  17.1k|        predicate: impl Into<N3Term>,
 1258|  17.1k|        object: impl Into<N3Term>,
 1259|  17.1k|    ) -> N3Quad {
 1260|  17.1k|        N3Quad {
 1261|  17.1k|            subject: subject.into(),
 1262|  17.1k|            predicate: predicate.into(),
 1263|  17.1k|            object: object.into(),
 1264|  17.1k|            graph_name: self
 1265|  17.1k|                .contexts
 1266|  17.1k|                .last()
 1267|  17.1k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  17.1k|        }
 1269|  17.1k|    }
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCsaAh6yFmIely_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1254|  2.52k|    fn quad(
 1255|  2.52k|        &self,
 1256|  2.52k|        subject: impl Into<N3Term>,
 1257|  2.52k|        predicate: impl Into<N3Term>,
 1258|  2.52k|        object: impl Into<N3Term>,
 1259|  2.52k|    ) -> N3Quad {
 1260|  2.52k|        N3Quad {
 1261|  2.52k|            subject: subject.into(),
 1262|  2.52k|            predicate: predicate.into(),
 1263|  2.52k|            object: object.into(),
 1264|  2.52k|            graph_name: self
 1265|  2.52k|                .contexts
 1266|  2.52k|                .last()
 1267|  2.52k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  2.52k|        }
 1269|  2.52k|    }
_RNCINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCsaAh6yFmIely_5oxrdf10blank_node9BlankNodeE0Ba_:
 1267|    585|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RINvMsg_NtCsgLOhukngm62_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1254|  69.0k|    fn quad(
 1255|  69.0k|        &self,
 1256|  69.0k|        subject: impl Into<N3Term>,
 1257|  69.0k|        predicate: impl Into<N3Term>,
 1258|  69.0k|        object: impl Into<N3Term>,
 1259|  69.0k|    ) -> N3Quad {
 1260|  69.0k|        N3Quad {
 1261|  69.0k|            subject: subject.into(),
 1262|  69.0k|            predicate: predicate.into(),
 1263|  69.0k|            object: object.into(),
 1264|  69.0k|            graph_name: self
 1265|  69.0k|                .contexts
 1266|  69.0k|                .last()
 1267|  69.0k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1268|  69.0k|        }
 1269|  69.0k|    }

_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  34.3k|    pub fn new(
   74|  34.3k|        parser: R,
   75|  34.3k|        min_buffer_size: usize,
   76|  34.3k|        max_buffer_size: usize,
   77|  34.3k|        is_line_jump_whitespace: bool,
   78|  34.3k|        line_comment_start: Option<&'static [u8]>,
   79|  34.3k|    ) -> Self {
   80|  34.3k|        Self {
   81|  34.3k|            parser,
   82|  34.3k|            data: Vec::new(),
   83|  34.3k|            position: Position {
   84|  34.3k|                line_start_buffer_offset: 0,
   85|  34.3k|                buffer_offset: 0,
   86|  34.3k|                global_offset: 0,
   87|  34.3k|                global_line: 0,
   88|  34.3k|            },
   89|  34.3k|            previous_position: Position {
   90|  34.3k|                line_start_buffer_offset: 0,
   91|  34.3k|                buffer_offset: 0,
   92|  34.3k|                global_offset: 0,
   93|  34.3k|                global_line: 0,
   94|  34.3k|            },
   95|  34.3k|            is_ending: false,
   96|  34.3k|            min_buffer_size,
   97|  34.3k|            max_buffer_size,
   98|  34.3k|            is_line_jump_whitespace,
   99|  34.3k|            line_comment_start,
  100|  34.3k|        }
  101|  34.3k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  236|  3.28M|    pub fn location_from_buffer_offset_range(
  237|  3.28M|        &self,
  238|  3.28M|        offset_range: Range<usize>,
  239|  3.28M|    ) -> Range<TextPosition> {
  240|  3.28M|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  241|  3.28M|        let (start_extra_line_jumps, start_line_start) =
  242|  3.28M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  243|  3.28M|                &self.data[self.previous_position.buffer_offset..start_offset],
  244|  3.28M|            );
  245|  3.28M|        let start_line_start = if start_extra_line_jumps > 0 {
  246|  2.89k|            start_line_start + self.previous_position.buffer_offset
  247|       |        } else {
  248|  3.28M|            self.previous_position.line_start_buffer_offset
  249|       |        };
  250|  3.28M|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  251|  3.28M|        let (end_extra_line_jumps, end_line_start) =
  252|  3.28M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  253|  3.28M|                &self.data[self.previous_position.buffer_offset..end_offset],
  254|  3.28M|            );
  255|  3.28M|        let end_line_start = if end_extra_line_jumps > 0 {
  256|  10.3k|            end_line_start + self.previous_position.buffer_offset
  257|       |        } else {
  258|  3.27M|            self.previous_position.line_start_buffer_offset
  259|       |        };
  260|  3.28M|        TextPosition {
  261|  3.28M|            line: self.previous_position.global_line + start_extra_line_jumps,
  262|  3.28M|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  263|  3.28M|            offset: self.previous_position.global_offset
  264|  3.28M|                + u64::try_from(offset_range.start).unwrap(),
  265|  3.28M|        }..TextPosition {
  266|  3.28M|            line: self.previous_position.global_line + end_extra_line_jumps,
  267|  3.28M|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  268|  3.28M|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  269|  3.28M|        }
  270|  3.28M|    }
_RNCNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  230|  3.28M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|  3.28M|            location: self.location_from_buffer_offset_range(e.location),
  232|  3.28M|            message: e.message,
  233|  3.28M|        }))
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  272|   627k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  273|   627k|        TextPosition {
  274|   627k|            line: self.previous_position.global_line,
  275|   627k|            column: Self::column_from_bytes(
  276|   627k|                &self.data[self.previous_position.line_start_buffer_offset
  277|   627k|                    ..self.previous_position.buffer_offset],
  278|   627k|            ),
  279|   627k|            offset: self.previous_position.global_offset,
  280|   627k|        }..TextPosition {
  281|   627k|            line: self.position.global_line,
  282|   627k|            column: Self::column_from_bytes(
  283|   627k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  284|   627k|            ),
  285|   627k|            offset: self.position.global_offset,
  286|   627k|        }
  287|   627k|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB6_:
   31|  2.44M|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|  2.44M|        Self {
   33|  2.44M|            location,
   34|  2.44M|            message: message.into(),
   35|  2.44M|        }
   36|  2.44M|    }
_RNvXs0_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTjNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB9_:
   47|  49.1k|    fn from((location, message): (usize, S)) -> Self {
   48|  49.1k|        (location..=location, message).into()
   49|  49.1k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  388|  7.07M|    fn shrink_data(&mut self) {
  389|  7.07M|        if self.position.line_start_buffer_offset > 0 {
  390|   102k|            self.data
  391|   102k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  392|   102k|            self.data
  393|   102k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  394|   102k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  395|   102k|            self.position.line_start_buffer_offset = 0;
  396|   102k|            self.previous_position = self.position;
  397|  6.96M|        }
  398|  7.07M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  400|  15.3M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  401|  15.3M|        let mut num_of_jumps = 0;
  402|  15.3M|        let mut last_jump_pos = 0;
  403|  15.3M|        let mut previous_cr = 0;
  404|  15.3M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  405|  60.9k|            if bytes[pos] == b'\r' {
  406|  8.35k|                previous_cr = pos;
  407|  8.35k|                num_of_jumps += 1;
  408|  8.35k|                last_jump_pos = pos + 1;
  409|  8.35k|            } else {
  410|  52.6k|                if previous_cr < pos - 1 {
  411|  24.4k|                    // We count \r\n as a single line jump
  412|  24.4k|                    num_of_jumps += 1;
  413|  28.1k|                }
  414|  52.6k|                last_jump_pos = pos + 1;
  415|       |            }
  416|       |        }
  417|  15.3M|        (num_of_jumps, last_jump_pos)
  418|  15.3M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  420|  13.7M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  421|  13.7M|        match str::from_utf8(bytes) {
  422|  6.95M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  423|  6.76M|            Err(e) => {
  424|  6.76M|                if e.valid_up_to() == 0 {
  425|   884k|                    0
  426|       |                } else {
  427|  5.88M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  428|       |                }
  429|       |            }
  430|       |        }
  431|  13.7M|    }
_RNvXs_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   688k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   688k|        (*location.start()..*location.end() + 1, message).into()
   43|   688k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  338|  15.9M|    fn skip_whitespaces(&mut self) -> Option<()> {
  339|  15.9M|        if self.is_line_jump_whitespace {
  340|  15.9M|            let mut i = self.position.buffer_offset;
  341|  16.0M|            while let Some(c) = self.data.get(i) {
  342|  14.6M|                match c {
  343|  66.2k|                    b' ' | b'\t' => {
  344|  66.2k|                        self.position.buffer_offset += 1;
  345|  66.2k|                        self.position.global_offset += 1;
  346|  66.2k|                    }
  347|       |                    b'\r' => {
  348|       |                        // We look for \n for Windows line end style
  349|  37.0k|                        let mut increment: u8 = 1;
  350|  37.0k|                        if let Some(c) = self.data.get(i + 1) {
  351|  23.4k|                            if *c == b'\n' {
  352|    201|                                increment += 1;
  353|    201|                                i += 1;
  354|  23.2k|                            }
  355|  13.6k|                        } else if !self.is_ending {
  356|  13.4k|                            return None; // We need to read more
  357|    152|                        }
  358|  23.6k|                        self.position.buffer_offset += usize::from(increment);
  359|  23.6k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  360|  23.6k|                        self.position.global_offset += u64::from(increment);
  361|  23.6k|                        self.position.global_line += 1;
  362|       |                    }
  363|  82.4k|                    b'\n' => {
  364|  82.4k|                        self.position.buffer_offset += 1;
  365|  82.4k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  366|  82.4k|                        self.position.global_offset += 1;
  367|  82.4k|                        self.position.global_line += 1;
  368|  82.4k|                    }
  369|  14.4M|                    _ => return Some(()),
  370|       |                }
  371|   172k|                i += 1;
  372|       |                // TODO: SIMD
  373|       |            }
  374|       |        } else {
  375|      0|            for c in &self.data[self.position.buffer_offset..] {
  376|      0|                if matches!(c, b' ' | b'\t') {
  377|      0|                    self.position.buffer_offset += 1;
  378|      0|                    self.position.global_offset += 1;
  379|      0|                } else {
  380|      0|                    return Some(());
  381|       |                }
  382|       |                // TODO: SIMD
  383|       |            }
  384|       |        }
  385|  1.44M|        Some(())
  386|  15.9M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  7.07M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  7.07M|        self.shrink_data();
  105|  7.07M|        self.data.extend_from_slice(other);
  106|  7.07M|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   935k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   935k|        Self {
   33|   935k|            location,
   34|   935k|            message: message.into(),
   35|   935k|        }
   36|   935k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  34.3k|    pub fn end(&mut self) {
  110|  34.3k|        self.is_ending = true;
  111|  34.3k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  289|   627k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  290|   627k|        String::from_utf8_lossy(
  291|   627k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  292|   627k|        )
  293|   627k|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  295|  7.13M|    pub fn is_end(&self) -> bool {
  296|  7.13M|        self.is_ending && self.data.len() == self.position.buffer_offset
  297|  7.13M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  15.8M|    pub fn read_next(
  167|  15.8M|        &mut self,
  168|  15.8M|        options: &R::Options,
  169|  15.8M|    ) -> Option<Result<R::Token<'_>, TurtleSyntaxError>> {
  170|  15.8M|        self.skip_whitespaces_and_comments()?;
  171|  15.8M|        self.previous_position = self.position;
  172|  15.8M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  173|  15.8M|            &self.data[self.position.buffer_offset..],
  174|  15.8M|            self.is_ending,
  175|  15.8M|            options,
  176|  15.8M|        ) else {
  177|  7.06M|            return if self.is_ending {
  178|  78.3k|                if self.position.buffer_offset == self.data.len() {
  179|  68.6k|                    None // We have finished
  180|       |                } else {
  181|  9.72k|                    let (new_line_jumps, new_line_start) =
  182|  9.72k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  183|  9.72k|                            &self.data[self.position.buffer_offset..],
  184|  9.72k|                        );
  185|  9.72k|                    if new_line_jumps > 0 {
  186|    262|                        self.position.line_start_buffer_offset =
  187|    262|                            self.position.buffer_offset + new_line_start;
  188|  9.46k|                    }
  189|  9.72k|                    self.position.global_offset +=
  190|  9.72k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  191|  9.72k|                    self.position.buffer_offset = self.data.len();
  192|  9.72k|                    self.position.global_line += new_line_jumps;
  193|  9.72k|                    let new_position = TextPosition {
  194|  9.72k|                        line: self.position.global_line,
  195|  9.72k|                        column: Self::column_from_bytes(
  196|  9.72k|                            &self.data[self.position.line_start_buffer_offset..],
  197|  9.72k|                        ),
  198|  9.72k|                        offset: self.position.global_offset,
  199|  9.72k|                    };
  200|  9.72k|                    let error = TurtleSyntaxError {
  201|  9.72k|                        location: new_position..new_position,
  202|  9.72k|                        message: "Unexpected end of file".into(),
  203|  9.72k|                    };
  204|  9.72k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  205|  9.72k|                    Some(Err(error))
  206|       |                }
  207|       |            } else {
  208|  6.98M|                None
  209|       |            };
  210|       |        };
  211|       |        debug_assert!(
  212|      0|            consumed > 0,
  213|      0|            "The lexer must consume at least one byte each time"
  214|       |        );
  215|       |        debug_assert!(
  216|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  217|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  218|      0|            self.data.len() - self.position.buffer_offset
  219|       |        );
  220|  8.74M|        let (new_line_jumps, new_line_start) =
  221|  8.74M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  222|  8.74M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  223|  8.74M|            );
  224|  8.74M|        if new_line_jumps > 0 {
  225|  10.7k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  226|  8.73M|        }
  227|  8.74M|        self.position.buffer_offset += consumed;
  228|  8.74M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  229|  8.74M|        self.position.global_line += new_line_jumps;
  230|  8.74M|        Some(result.map_err(|e| TurtleSyntaxError {
  231|       |            location: self.location_from_buffer_offset_range(e.location),
  232|       |            message: e.message,
  233|  8.74M|        }))
  234|  15.8M|    }
_RNvMs1_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  300|  15.8M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  301|       |        loop {
  302|  15.9M|            self.skip_whitespaces()?;
  303|       |
  304|  15.9M|            let buf = &self.data[self.position.buffer_offset..];
  305|  15.9M|            if let Some(line_comment_start) = self.line_comment_start {
  306|  15.9M|                if buf.starts_with(line_comment_start) {
  307|       |                    // Comment
  308|  92.0k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  309|  53.3k|                        let mut end_position = line_comment_start.len() + end;
  310|  53.3k|                        if buf.get(end_position).copied() == Some(b'\r') {
  311|       |                            // We look for \n for Windows line end style
  312|  49.6k|                            if let Some(c) = buf.get(end_position + 1) {
  313|  17.5k|                                if *c == b'\n' {
  314|      0|                                    end_position += 1;
  315|  17.5k|                                }
  316|  32.1k|                            } else if !self.is_ending {
  317|  32.1k|                                return None; // We need to read more
  318|     15|                            }
  319|  3.65k|                        }
  320|  21.2k|                        let comment_size = end_position + 1;
  321|  21.2k|                        self.position.buffer_offset += comment_size;
  322|  21.2k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  323|  21.2k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  324|  21.2k|                        self.position.global_line += 1;
  325|  21.2k|                        continue;
  326|  38.7k|                    }
  327|  38.7k|                    if self.is_ending {
  328|    553|                        self.position.buffer_offset = self.data.len(); // EOF
  329|    553|                        return Some(());
  330|  38.1k|                    }
  331|  38.1k|                    return None; // We need more data
  332|  15.8M|                }
  333|      0|            }
  334|  15.8M|            return Some(());
  335|       |        }
  336|  15.8M|    }
_RNvXs_NtNtCsgLOhukngm62_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromB8_:
   41|  61.0k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  61.0k|        (*location.start()..*location.end() + 1, message).into()
   43|  61.0k|    }

_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3newB8_:
   56|  34.3k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  34.3k|        Self {
   58|  34.3k|            lexer,
   59|  34.3k|            state: Some(recognizer),
   60|  34.3k|            context,
   61|  34.3k|            results: vec![],
   62|  34.3k|            errors: vec![],
   63|  34.3k|        }
   64|  34.3k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE17extend_from_sliceB8_:
   66|  7.07M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  7.07M|        self.lexer.extend_from_slice(other)
   68|  7.07M|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromReE4fromB6_:
   39|   491k|    fn from(message: S) -> Self {
   40|   491k|        Self {
   41|   491k|            message: message.into(),
   42|   491k|        }
   43|   491k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3endB8_:
   71|  34.3k|    pub fn end(&mut self) {
   72|  34.3k|        self.lexer.end()
   73|  34.3k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE6is_endB8_:
   76|  34.3k|    pub fn is_end(&self) -> bool {
   77|  34.3k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  34.3k|    }
_RNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE9read_nextB8_:
   80|  11.1M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, TurtleSyntaxError>> {
   81|       |        loop {
   82|  16.6M|            if let Some(error) = self.errors.pop() {
   83|   627k|                return Some(Err(TurtleSyntaxError {
   84|   627k|                    location: self.lexer.last_token_location(),
   85|   627k|                    message: error
   86|   627k|                        .message
   87|   627k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   627k|                }));
   89|  16.0M|            }
   90|  16.0M|            if let Some(result) = self.results.pop() {
   91|   132k|                return Some(Ok(result));
   92|  15.8M|            }
   93|  15.8M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  8.75M|                match result {
   95|  5.45M|                    Ok(token) => {
   96|  5.45M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  5.45M|                        });
  104|  5.45M|                        continue;
  105|       |                    }
  106|  3.29M|                    Err(e) => {
  107|  3.29M|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|  3.29M|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  7.13M|            }
  112|  7.13M|            if self.lexer.is_end() {
  113|  68.6k|                self.state.take()?.recognize_end(
  114|  34.3k|                    &mut self.context,
  115|  34.3k|                    &mut self.results,
  116|  34.3k|                    &mut self.errors,
  117|  34.3k|                )
  118|       |            } else {
  119|  7.07M|                return None;
  120|       |            }
  121|       |        }
  122|  11.1M|    }
_RNvXNtNtCsgLOhukngm62_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsjOdcKtOMjJI_5alloc6string6StringE4fromB6_:
   39|   136k|    fn from(message: S) -> Self {
   40|   136k|        Self {
   41|   136k|            message: message.into(),
   42|   136k|        }
   43|   136k|    }
_RNCNvMs_NtNtCsgLOhukngm62_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_2n312N3RecognizerE9read_next0Ba_:
   96|  5.45M|                        self.state = self.state.take().map(|state| {
   97|  5.45M|                            state.recognize_next(
   98|  5.45M|                                token,
   99|  5.45M|                                &mut self.context,
  100|  5.45M|                                &mut self.results,
  101|  5.45M|                                &mut self.errors,
  102|  5.45M|                            )
  103|  5.45M|                        });


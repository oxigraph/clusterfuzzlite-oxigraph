_RINvMNtCs3FiEWhjgm6A_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|    125|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|    125|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|    125|        let mut val = self.0.load(Relaxed);
   37|    125|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|    124|        }
   41|    125|        val
   42|    125|    }
_RINvMs_NtCs3FiEWhjgm6A_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|    125|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|    125|        self.0.unsync_init(|| init() as usize) != 0
   55|    125|    }
_RNCINvMs_NtCs3FiEWhjgm6A_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0

_RNvCs3FiEWhjgm6A_9getrandom16getrandom_uninitCslvYPMEMaoR_9rand_core:
  345|    125|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  346|    125|    if !dest.is_empty() {
  347|    125|        imp::getrandom_inner(dest)?;
  348|      0|    }
  349|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  350|       |    // since it returned `Ok`.
  351|    125|    Ok(unsafe { slice_assume_init_mut(dest) })
  352|    125|}
_RNvCs3FiEWhjgm6A_9getrandom9getrandomCslvYPMEMaoR_9rand_core:
  315|    125|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  316|    125|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  317|    125|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  318|    125|    // `dest`.
  319|    125|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  320|    125|    Ok(())
  321|    125|}

_RNvNtCs3FiEWhjgm6A_9getrandom3imp15getrandom_inner:
    9|    125|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|    125|    // getrandom(2) was introduced in Linux 3.17
   11|    125|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|    125|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|    125|        sys_fill_exact(dest, |buf| unsafe {
   14|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    125|        })
   16|       |    } else {
   17|      0|        use_file::getrandom_inner(dest)
   18|       |    }
   19|    125|}
_RNCNvNtCs3FiEWhjgm6A_9getrandom3imp15getrandom_inner0B5_:
   13|    125|        sys_fill_exact(dest, |buf| unsafe {
   14|    125|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   15|    125|        })
_RNvNtCs3FiEWhjgm6A_9getrandom3imp22is_getrandom_available:
   21|      1|fn is_getrandom_available() -> bool {
   22|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   23|      1|    if res < 0 {
   24|      0|        match last_os_error().raw_os_error() {
   25|      0|            Some(libc::ENOSYS) => false, // No kernel support
   26|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   27|      0|            _ => true,
   28|       |        }
   29|       |    } else {
   30|      1|        true
   31|       |    }
   32|      1|}
_RNvNtCs3FiEWhjgm6A_9getrandom3imp9getrandom:
   34|    126|unsafe fn getrandom(
   35|    126|    buf: *mut libc::c_void,
   36|    126|    buflen: libc::size_t,
   37|    126|    flags: libc::c_uint,
   38|    126|) -> libc::ssize_t {
   39|    126|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   40|    126|}

_RINvNtCs3FiEWhjgm6A_9getrandom4util19slice_as_uninit_muthECslvYPMEMaoR_9rand_core:
   32|    125|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|    125|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|    125|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|    125|}
_RINvNtCs3FiEWhjgm6A_9getrandom4util21slice_assume_init_muthECslvYPMEMaoR_9rand_core:
    8|    125|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|    125|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|    125|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|    125|}

_RINvNtCs3FiEWhjgm6A_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   59|    125|pub fn sys_fill_exact(
   60|    125|    mut buf: &mut [MaybeUninit<u8>],
   61|    125|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|    125|) -> Result<(), Error> {
   63|    250|    while !buf.is_empty() {
   64|    125|        let res = sys_fill(buf);
   65|    125|        match res {
   66|    125|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|    125|    Ok(())
   81|    125|}

rust_fuzzer_test_input:
  209|  9.59k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  9.59k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  9.59k|                }
  223|  9.59k|
  224|  9.59k|                __libfuzzer_sys_run(bytes);
  225|  9.59k|                0
  226|       |            }
_RNvNvCs5jEkc0fApSJ_2n31__19___libfuzzer_sys_run:
  241|  9.59k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|       |            }
LLVMFuzzerTestOneInput:
   58|  9.59k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  9.59k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  9.59k|    });
   63|  9.59k|
   64|  9.59k|    match test_input {
   65|  9.59k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  9.59k|}
_RNCNvCs4FJq8jLh9xR_13libfuzzer_sys15test_input_wrap0B3_:
   59|  9.59k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  9.59k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  9.59k|        rust_fuzzer_test_input(data_slice)
   62|  9.59k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4next0ECseXCYVcIQZ7o_5oxttl:
 1044|  3.64M|    pub(crate) unsafe fn next(
 1045|  3.64M|        &mut self,
 1046|  3.64M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  3.64M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  3.64M|        let found = find_raw(self.start, self.end)?;
 1057|  17.0k|        let result = found.distance(self.original_start);
 1058|  17.0k|        self.start = found.add(1);
 1059|  17.0k|        Some(result)
 1060|  3.64M|    }
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECseXCYVcIQZ7o_5oxttl:
 1125|  14.2k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  14.2k|    haystack: &[u8],
 1127|  14.2k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  14.2k|) -> Option<usize> {
 1129|  14.2k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  14.2k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  14.2k|    // a &[u8].
 1132|  14.2k|    let start = haystack.as_ptr();
 1133|  14.2k|    let end = start.add(haystack.len());
 1134|  14.2k|    let found = find_raw(start, end)?;
 1135|    702|    Some(found.distance(start))
 1136|  14.2k|}
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr7memchr20ECseXCYVcIQZ7o_5oxttl:
 1125|   443k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   443k|    haystack: &[u8],
 1127|   443k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   443k|) -> Option<usize> {
 1129|   443k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   443k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   443k|    // a &[u8].
 1132|   443k|    let start = haystack.as_ptr();
 1133|   443k|    let end = start.add(haystack.len());
 1134|   443k|    let found = find_raw(start, end)?;
 1135|   188k|    Some(found.distance(start))
 1136|   443k|}
_RNvMs3_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  3.62M|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  3.62M|        Iter {
 1029|  3.62M|            original_start: haystack.as_ptr(),
 1030|  3.62M|            start: haystack.as_ptr(),
 1031|  3.62M|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  3.62M|            haystack: core::marker::PhantomData,
 1033|  3.62M|        }
 1034|  3.62M|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE7needle1B8_:
  117|  38.4k|    pub(crate) fn needle1(&self) -> u8 {
  118|  38.4k|        self.s1
  119|  38.4k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE3newB8_:
  111|  14.2k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  14.2k|        One { s1: needle, v1: V::splat(needle) }
  113|  14.2k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE3newB8_:
  111|  14.2k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  14.2k|        One { s1: needle, v1: V::splat(needle) }
  113|  14.2k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  1.46k|    pub(crate) unsafe fn find_raw(
  144|  1.46k|        &self,
  145|  1.46k|        start: *const u8,
  146|  1.46k|        end: *const u8,
  147|  1.46k|    ) -> Option<*const u8> {
  148|  1.46k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  1.46k|        // need to move up to using a u64 for the masks used below. Currently
  150|  1.46k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  1.46k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  1.46k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.46k|        let topos = V::Mask::first_offset;
  155|  1.46k|        let len = end.distance(start);
  156|  1.46k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.46k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|     90|            return Some(cur);
  167|  1.37k|        }
  168|  1.37k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.37k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  1.37k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.37k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.37k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.14k|        while cur <= end.sub(V::BYTES) {
  213|    826|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    826|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     58|                return Some(cur);
  216|    768|            }
  217|    768|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.31k|        if cur < end {
  224|  1.05k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.05k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.05k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.05k|            return self.search_chunk(cur, topos);
  228|    265|        }
  229|    265|        None
  230|  1.46k|    }
_RNvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  4.83k|    pub(crate) unsafe fn find_raw(
  144|  4.83k|        &self,
  145|  4.83k|        start: *const u8,
  146|  4.83k|        end: *const u8,
  147|  4.83k|    ) -> Option<*const u8> {
  148|  4.83k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  4.83k|        // need to move up to using a u64 for the masks used below. Currently
  150|  4.83k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  4.83k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  4.83k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  4.83k|        let topos = V::Mask::first_offset;
  155|  4.83k|        let len = end.distance(start);
  156|  4.83k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  4.83k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    109|            return Some(cur);
  167|  4.72k|        }
  168|  4.72k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  4.72k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  4.72k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  4.72k|        if len >= Self::LOOP_SIZE {
  172|  1.89k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|    857|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    857|                let a = V::load_aligned(cur);
  176|    857|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    857|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    857|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    857|                let eqa = self.v1.cmpeq(a);
  180|    857|                let eqb = self.v1.cmpeq(b);
  181|    857|                let eqc = self.v1.cmpeq(c);
  182|    857|                let eqd = self.v1.cmpeq(d);
  183|    857|                let or1 = eqa.or(eqb);
  184|    857|                let or2 = eqc.or(eqd);
  185|    857|                let or3 = or1.or(or2);
  186|    857|                if or3.movemask_will_have_non_zero() {
  187|     82|                    let mask = eqa.movemask();
  188|     82|                    if mask.has_non_zero() {
  189|     17|                        return Some(cur.add(topos(mask)));
  190|     65|                    }
  191|     65|
  192|     65|                    let mask = eqb.movemask();
  193|     65|                    if mask.has_non_zero() {
  194|     33|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|     32|                    }
  196|     32|
  197|     32|                    let mask = eqc.movemask();
  198|     32|                    if mask.has_non_zero() {
  199|     25|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      7|                    }
  201|      7|
  202|      7|                    let mask = eqd.movemask();
  203|      7|                    debug_assert!(mask.has_non_zero());
  204|      7|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    775|                }
  206|    775|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  3.60k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  8.19k|        while cur <= end.sub(V::BYTES) {
  213|  3.67k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.67k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    119|                return Some(cur);
  216|  3.55k|            }
  217|  3.55k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  4.52k|        if cur < end {
  224|  4.33k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  4.33k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  4.33k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  4.33k|            return self.search_chunk(cur, topos);
  228|    185|        }
  229|    185|        None
  230|  4.83k|    }
_RINvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  3.34k|    unsafe fn search_chunk(
  417|  3.34k|        &self,
  418|  3.34k|        cur: *const u8,
  419|  3.34k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  3.34k|    ) -> Option<*const u8> {
  421|  3.34k|        let chunk = V::load_unaligned(cur);
  422|  3.34k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  3.34k|        if mask.has_non_zero() {
  424|    157|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  3.19k|            None
  427|       |        }
  428|  3.34k|    }
_RINvMNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  12.8k|    unsafe fn search_chunk(
  417|  12.8k|        &self,
  418|  12.8k|        cur: *const u8,
  419|  12.8k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  12.8k|    ) -> Option<*const u8> {
  421|  12.8k|        let chunk = V::load_unaligned(cur);
  422|  12.8k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  12.8k|        if mask.has_non_zero() {
  424|    277|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  12.5k|            None
  427|       |        }
  428|  12.8k|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE3newBa_:
  450|  4.08M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  4.08M|        Two {
  452|  4.08M|            s1: needle1,
  453|  4.08M|            s2: needle2,
  454|  4.08M|            v1: V::splat(needle1),
  455|  4.08M|            v2: V::splat(needle2),
  456|  4.08M|        }
  457|  4.08M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE3newBa_:
  450|  4.08M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  4.08M|        Two {
  452|  4.08M|            s1: needle1,
  453|  4.08M|            s2: needle2,
  454|  4.08M|            v1: V::splat(needle1),
  455|  4.08M|            v2: V::splat(needle2),
  456|  4.08M|        }
  457|  4.08M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  5.98M|    pub(crate) fn needle1(&self) -> u8 {
  462|  5.98M|        self.s1
  463|  5.98M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  5.91M|    pub(crate) fn needle2(&self) -> u8 {
  468|  5.91M|        self.s2
  469|  5.91M|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  83.5k|    pub(crate) unsafe fn find_raw(
  494|  83.5k|        &self,
  495|  83.5k|        start: *const u8,
  496|  83.5k|        end: *const u8,
  497|  83.5k|    ) -> Option<*const u8> {
  498|  83.5k|        // If we want to support vectors bigger than 256 bits, we probably
  499|  83.5k|        // need to move up to using a u64 for the masks used below. Currently
  500|  83.5k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  83.5k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  83.5k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  83.5k|        let topos = V::Mask::first_offset;
  505|  83.5k|        let len = end.distance(start);
  506|  83.5k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  83.5k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  31.6k|            return Some(cur);
  517|  51.8k|        }
  518|  51.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  51.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  51.8k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  51.8k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  51.8k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  68.5k|        while cur <= end.sub(V::BYTES) {
  551|  17.9k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  17.9k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.29k|                return Some(cur);
  554|  16.6k|            }
  555|  16.6k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  50.5k|        if cur < end {
  562|  47.4k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  47.4k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  47.4k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  47.4k|            return self.search_chunk(cur, topos);
  566|  3.09k|        }
  567|  3.09k|        None
  568|  83.5k|    }
_RNvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   116k|    pub(crate) unsafe fn find_raw(
  494|   116k|        &self,
  495|   116k|        start: *const u8,
  496|   116k|        end: *const u8,
  497|   116k|    ) -> Option<*const u8> {
  498|   116k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   116k|        // need to move up to using a u64 for the masks used below. Currently
  500|   116k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   116k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   116k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   116k|        let topos = V::Mask::first_offset;
  505|   116k|        let len = end.distance(start);
  506|   116k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   116k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  58.2k|            return Some(cur);
  517|  58.2k|        }
  518|  58.2k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  58.2k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  58.2k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  58.2k|        if len >= Self::LOOP_SIZE {
  522|   107k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  80.4k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  80.4k|                let a = V::load_aligned(cur);
  526|  80.4k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  80.4k|                let eqa1 = self.v1.cmpeq(a);
  528|  80.4k|                let eqb1 = self.v1.cmpeq(b);
  529|  80.4k|                let eqa2 = self.v2.cmpeq(a);
  530|  80.4k|                let eqb2 = self.v2.cmpeq(b);
  531|  80.4k|                let or1 = eqa1.or(eqb1);
  532|  80.4k|                let or2 = eqa2.or(eqb2);
  533|  80.4k|                let or3 = or1.or(or2);
  534|  80.4k|                if or3.movemask_will_have_non_zero() {
  535|  2.30k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  2.30k|                    if mask.has_non_zero() {
  537|    497|                        return Some(cur.add(topos(mask)));
  538|  1.81k|                    }
  539|  1.81k|
  540|  1.81k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  1.81k|                    debug_assert!(mask.has_non_zero());
  542|  1.81k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  78.1k|                }
  544|  78.1k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  29.0k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  78.1k|        while cur <= end.sub(V::BYTES) {
  551|  24.5k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  24.5k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  2.29k|                return Some(cur);
  554|  22.2k|            }
  555|  22.2k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  53.6k|        if cur < end {
  562|  51.9k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  51.9k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  51.9k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  51.9k|            return self.search_chunk(cur, topos);
  566|  1.68k|        }
  567|  1.68k|        None
  568|   116k|    }
_RINvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   148k|    unsafe fn search_chunk(
  671|   148k|        &self,
  672|   148k|        cur: *const u8,
  673|   148k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   148k|    ) -> Option<*const u8> {
  675|   148k|        let chunk = V::load_unaligned(cur);
  676|   148k|        let eq1 = self.v1.cmpeq(chunk);
  677|   148k|        let eq2 = self.v2.cmpeq(chunk);
  678|   148k|        let mask = eq1.or(eq2).movemask();
  679|   148k|        if mask.has_non_zero() {
  680|  37.3k|            let mask1 = eq1.movemask();
  681|  37.3k|            let mask2 = eq2.movemask();
  682|  37.3k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   111k|            None
  685|       |        }
  686|   148k|    }
_RINvMs_NtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   192k|    unsafe fn search_chunk(
  671|   192k|        &self,
  672|   192k|        cur: *const u8,
  673|   192k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   192k|    ) -> Option<*const u8> {
  675|   192k|        let chunk = V::load_unaligned(cur);
  676|   192k|        let eq1 = self.v1.cmpeq(chunk);
  677|   192k|        let eq2 = self.v2.cmpeq(chunk);
  678|   192k|        let mask = eq1.or(eq2).movemask();
  679|   192k|        if mask.has_non_zero() {
  680|  67.3k|            let mask1 = eq1.movemask();
  681|  67.3k|            let mask2 = eq2.movemask();
  682|  67.3k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|   125k|            None
  685|       |        }
  686|   192k|    }
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  7.09k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  7.09k|    start: *const u8,
 1150|  7.09k|    end: *const u8,
 1151|  7.09k|    confirm: F,
 1152|  7.09k|) -> Option<*const u8> {
 1153|  7.09k|    debug_assert!(start <= end);
 1154|  7.09k|    let mut ptr = start;
 1155|  45.3k|    while ptr < end {
 1156|  38.4k|        if confirm(*ptr) {
 1157|    186|            return Some(ptr);
 1158|  38.2k|        }
 1159|  38.2k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  6.91k|    None
 1162|  7.09k|}
_RINvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  3.11M|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  3.11M|    start: *const u8,
 1150|  3.11M|    end: *const u8,
 1151|  3.11M|    confirm: F,
 1152|  3.11M|) -> Option<*const u8> {
 1153|  3.11M|    debug_assert!(start <= end);
 1154|  3.11M|    let mut ptr = start;
 1155|  9.00M|    while ptr < end {
 1156|  5.98M|        if confirm(*ptr) {
 1157|  98.9k|            return Some(ptr);
 1158|  5.88M|        }
 1159|  5.88M|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  3.01M|    None
 1162|  3.11M|}

_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  14.2k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  14.2k|        One {
   71|  14.2k|            sse2: generic::One::new(needle),
   72|  14.2k|            avx2: generic::One::new(needle),
   73|  14.2k|        }
   74|  14.2k|    }
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  14.2k|    pub unsafe fn find_raw(
  180|  14.2k|        &self,
  181|  14.2k|        start: *const u8,
  182|  14.2k|        end: *const u8,
  183|  14.2k|    ) -> Option<*const u8> {
  184|  14.2k|        if start >= end {
  185|    872|            return None;
  186|  13.3k|        }
  187|  13.3k|        let len = end.distance(start);
  188|  13.3k|        if len < __m256i::BYTES {
  189|  8.56k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  7.09k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  7.09k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  1.46k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  4.83k|        }
  201|  4.83k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  4.83k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  4.83k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  4.83k|        // responsibility.
  205|  4.83k|        //
  206|  4.83k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  4.83k|        // means we'd have to annotate this routine with `target_feature`.
  208|  4.83k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  4.83k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  4.83k|        // The real problem is that a routine with a `target_feature`
  211|  4.83k|        // annotation generally can't be inlined into caller code unless
  212|  4.83k|        // the caller code has the same target feature annotations. Namely,
  213|  4.83k|        // the common case (at time of writing) is for calling code to not
  214|  4.83k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  4.83k|        // `target_feature` on this routine, it can be inlined which will
  216|  4.83k|        // handle some of the short-haystack cases above without touching the
  217|  4.83k|        // architecture specific code.
  218|  4.83k|        self.find_raw_avx2(start, end)
  219|  14.2k|    }
_RNCNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  38.4k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  38.4k|                    b == self.sse2.needle1()
  194|  38.4k|                })
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  1.46k|    unsafe fn find_raw_sse2(
  337|  1.46k|        &self,
  338|  1.46k|        start: *const u8,
  339|  1.46k|        end: *const u8,
  340|  1.46k|    ) -> Option<*const u8> {
  341|  1.46k|        self.sse2.find_raw(start, end)
  342|  1.46k|    }
_RNvMNtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  4.83k|    unsafe fn find_raw_avx2(
  397|  4.83k|        &self,
  398|  4.83k|        start: *const u8,
  399|  4.83k|        end: *const u8,
  400|  4.83k|    ) -> Option<*const u8> {
  401|  4.83k|        self.avx2.find_raw(start, end)
  402|  4.83k|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  4.08M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  4.08M|        Two {
  558|  4.08M|            sse2: generic::Two::new(needle1, needle2),
  559|  4.08M|            avx2: generic::Two::new(needle1, needle2),
  560|  4.08M|        }
  561|  4.08M|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  4.08M|    pub unsafe fn find_raw(
  655|  4.08M|        &self,
  656|  4.08M|        start: *const u8,
  657|  4.08M|        end: *const u8,
  658|  4.08M|    ) -> Option<*const u8> {
  659|  4.08M|        if start >= end {
  660|   770k|            return None;
  661|  3.31M|        }
  662|  3.31M|        let len = end.distance(start);
  663|  3.31M|        if len < __m256i::BYTES {
  664|  3.20M|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  3.11M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  3.11M|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  83.5k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   116k|        }
  676|   116k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   116k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   116k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   116k|        // responsibility.
  680|   116k|        //
  681|   116k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   116k|        // means we'd have to annotate this routine with `target_feature`.
  683|   116k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   116k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   116k|        // The real problem is that a routine with a `target_feature`
  686|   116k|        // annotation generally can't be inlined into caller code unless
  687|   116k|        // the caller code has the same target feature annotations. Namely,
  688|   116k|        // the common case (at time of writing) is for calling code to not
  689|   116k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   116k|        // `target_feature` on this routine, it can be inlined which will
  691|   116k|        // handle some of the short-haystack cases above without touching the
  692|   116k|        // architecture specific code.
  693|   116k|        self.find_raw_avx2(start, end)
  694|  4.08M|    }
_RNCNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  5.98M|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  5.98M|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  5.98M|                })
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  83.5k|    unsafe fn find_raw_sse2(
  765|  83.5k|        &self,
  766|  83.5k|        start: *const u8,
  767|  83.5k|        end: *const u8,
  768|  83.5k|    ) -> Option<*const u8> {
  769|  83.5k|        self.sse2.find_raw(start, end)
  770|  83.5k|    }
_RNvMs2_NtNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   116k|    unsafe fn find_raw_avx2(
  805|   116k|        &self,
  806|   116k|        start: *const u8,
  807|   116k|        end: *const u8,
  808|   116k|    ) -> Option<*const u8> {
  809|   116k|        self.avx2.find_raw(start, end)
  810|   116k|    }

_RNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  4.08M|pub(crate) fn memchr2_raw(
  221|  4.08M|    n1: u8,
  222|  4.08M|    n2: u8,
  223|  4.08M|    start: *const u8,
  224|  4.08M|    end: *const u8,
  225|  4.08M|) -> Option<*const u8> {
  226|  4.08M|    // SAFETY: We provide a valid function pointer type.
  227|  4.08M|    unsafe_ifunc!(
  228|  4.08M|        Two,
  229|  4.08M|        find_raw,
  230|  4.08M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  4.08M|        Option<*const u8>,
  232|  4.08M|        start,
  233|  4.08M|        end,
  234|  4.08M|        n1,
  235|  4.08M|        n2
  236|  4.08M|    )
  237|  4.08M|}
_RNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr10memchr_raw:
  174|  14.2k|pub(crate) fn memchr_raw(
  175|  14.2k|    n1: u8,
  176|  14.2k|    start: *const u8,
  177|  14.2k|    end: *const u8,
  178|  14.2k|) -> Option<*const u8> {
  179|  14.2k|    // SAFETY: We provide a valid function pointer type.
  180|  14.2k|    unsafe_ifunc!(
  181|  14.2k|        One,
  182|  14.2k|        find_raw,
  183|  14.2k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  14.2k|        Option<*const u8>,
  185|  14.2k|        start,
  186|  14.2k|        end,
  187|  14.2k|        n1
  188|  14.2k|    )
  189|  14.2k|}
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  14.2k|        unsafe fn find_avx2(
   79|  14.2k|            $($needle: u8),+,
   80|  14.2k|            $hay_start: *const u8,
   81|  14.2k|            $hay_end: *const u8,
   82|  14.2k|        ) -> $retty {
   83|  14.2k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  14.2k|            $memchrty::new_unchecked($($needle),+)
   85|  14.2k|                .$memchrfind($hay_start, $hay_end)
   86|  14.2k|        }
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  4.08M|        unsafe fn find_avx2(
   79|  4.08M|            $($needle: u8),+,
   80|  4.08M|            $hay_start: *const u8,
   81|  4.08M|            $hay_end: *const u8,
   82|  4.08M|        ) -> $retty {
   83|  4.08M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  4.08M|            $memchrty::new_unchecked($($needle),+)
   85|  4.08M|                .$memchrfind($hay_start, $hay_end)
   86|  4.08M|        }
_RNvNvNtNtNtCsbTjOP5Lz3oJ_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsbTjOP5Lz3oJ_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  3.84M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  3.84M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  3.84M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  3.84M|    }
_RNvXNtCsbTjOP5Lz3oJ_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   116k|    fn as_usize(self) -> usize {
   27|   116k|        self as usize
   28|   116k|    }

_RNvMs2_NtCsbTjOP5Lz3oJ_6memchr6memchrNtB5_7Memchr23newCseXCYVcIQZ7o_5oxttl:
  377|  3.62M|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  3.62M|        Memchr2 {
  379|  3.62M|            needle1,
  380|  3.62M|            needle2,
  381|  3.62M|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  3.62M|        }
  383|  3.62M|    }
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr11memchr2_rawCseXCYVcIQZ7o_5oxttl:
  574|  4.08M|unsafe fn memchr2_raw(
  575|  4.08M|    needle1: u8,
  576|  4.08M|    needle2: u8,
  577|  4.08M|    start: *const u8,
  578|  4.08M|    end: *const u8,
  579|  4.08M|) -> Option<*const u8> {
  580|  4.08M|    #[cfg(target_arch = "x86_64")]
  581|  4.08M|    {
  582|  4.08M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  4.08M|    }
  584|  4.08M|    #[cfg(target_arch = "wasm32")]
  585|  4.08M|    {
  586|  4.08M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  4.08M|    }
  588|  4.08M|    #[cfg(target_arch = "aarch64")]
  589|  4.08M|    {
  590|  4.08M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  4.08M|    }
  592|  4.08M|    #[cfg(not(any(
  593|  4.08M|        target_arch = "x86_64",
  594|  4.08M|        target_arch = "wasm32",
  595|  4.08M|        target_arch = "aarch64"
  596|  4.08M|    )))]
  597|  4.08M|    {
  598|  4.08M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  4.08M|            .find_raw(start, end)
  600|  4.08M|    }
  601|  4.08M|}
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr12memchr2_iterCseXCYVcIQZ7o_5oxttl:
  232|  3.62M|pub fn memchr2_iter<'h>(
  233|  3.62M|    needle1: u8,
  234|  3.62M|    needle2: u8,
  235|  3.62M|    haystack: &'h [u8],
  236|  3.62M|) -> Memchr2<'h> {
  237|  3.62M|    Memchr2::new(needle1, needle2, haystack)
  238|  3.62M|}
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr6memchrCseXCYVcIQZ7o_5oxttl:
   27|  14.2k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  14.2k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  14.2k|    // pointer between start and end.
   30|  14.2k|    unsafe {
   31|  14.2k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  14.2k|        })
   34|  14.2k|    }
   35|  14.2k|}
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr7memchr2CseXCYVcIQZ7o_5oxttl:
   92|   443k|pub fn memchr2(needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize> {
   93|   443k|    // SAFETY: memchr2_raw, when a match is found, always returns a valid
   94|   443k|    // pointer between start and end.
   95|   443k|    unsafe {
   96|   443k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|       |            memchr2_raw(needle1, needle2, start, end)
   98|   443k|        })
   99|   443k|    }
  100|   443k|}
_RNvXs3_NtCsbTjOP5Lz3oJ_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCseXCYVcIQZ7o_5oxttl:
  390|  3.64M|    fn next(&mut self) -> Option<usize> {
  391|  3.64M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  3.64M|        // pointers returns will fall within the start and end bounds, and this
  393|  3.64M|        // upholds the safety contract of `self.it.next`.
  394|  3.64M|        unsafe {
  395|  3.64M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  3.64M|        }
  397|  3.64M|    }
_RNCNvNtCsbTjOP5Lz3oJ_6memchr6memchr7memchr20CseXCYVcIQZ7o_5oxttl:
   96|   443k|        generic::search_slice_with_raw(haystack, |start, end| {
   97|   443k|            memchr2_raw(needle1, needle2, start, end)
   98|   443k|        })
_RNCNvXs3_NtCsbTjOP5Lz3oJ_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4next0CseXCYVcIQZ7o_5oxttl:
  395|  3.64M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvNtCsbTjOP5Lz3oJ_6memchr6memchr6memchr0B5_:
   31|  14.2k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  14.2k|            memchr_raw(needle, start, end)
   33|  14.2k|        })
_RNvNtCsbTjOP5Lz3oJ_6memchr6memchr10memchr_rawB3_:
  504|  14.2k|unsafe fn memchr_raw(
  505|  14.2k|    needle: u8,
  506|  14.2k|    start: *const u8,
  507|  14.2k|    end: *const u8,
  508|  14.2k|) -> Option<*const u8> {
  509|  14.2k|    #[cfg(target_arch = "x86_64")]
  510|  14.2k|    {
  511|  14.2k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  14.2k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  14.2k|        // time. This function also handles using a fallback if neither AVX2
  514|  14.2k|        // nor SSE2 (unusual) are available.
  515|  14.2k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  14.2k|    }
  517|  14.2k|    #[cfg(target_arch = "wasm32")]
  518|  14.2k|    {
  519|  14.2k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  14.2k|    }
  521|  14.2k|    #[cfg(target_arch = "aarch64")]
  522|  14.2k|    {
  523|  14.2k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  14.2k|    }
  525|  14.2k|    #[cfg(not(any(
  526|  14.2k|        target_arch = "x86_64",
  527|  14.2k|        target_arch = "wasm32",
  528|  14.2k|        target_arch = "aarch64"
  529|  14.2k|    )))]
  530|  14.2k|    {
  531|  14.2k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  14.2k|    }
  533|  14.2k|}

_RNvYNtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtNtCsbTjOP5Lz3oJ_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  81.2k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  81.2k|        self.movemask().has_non_zero()
   67|  81.2k|    }
_RNvMNtCsbTjOP5Lz3oJ_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   107k|    fn get_for_offset(self) -> u32 {
  129|   107k|        #[cfg(target_endian = "big")]
  130|   107k|        {
  131|   107k|            self.0.swap_bytes()
  132|   107k|        }
  133|   107k|        #[cfg(target_endian = "little")]
  134|   107k|        {
  135|   107k|            self.0
  136|   107k|        }
  137|   107k|    }
_RNvXs_NtCsbTjOP5Lz3oJ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   441k|    fn has_non_zero(self) -> bool {
  149|   441k|        self.0 != 0
  150|   441k|    }
_RNvXs_NtCsbTjOP5Lz3oJ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   107k|    fn first_offset(self) -> usize {
  174|   107k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   107k|        // the bytes so we are in practice), where the most significant byte
  176|   107k|        // is at a higher address. That means the least significant bit that
  177|   107k|        // is set corresponds to the position of our first matching byte.
  178|   107k|        // That position corresponds to the number of zeros after the least
  179|   107k|        // significant bit.
  180|   107k|        self.get_for_offset().trailing_zeros() as usize
  181|   107k|    }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|   152k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|   152k|            _mm_loadu_si128(data as *const __m128i)
  222|   152k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   227k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   227k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   227k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   301k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   301k|            _mm_cmpeq_epi8(self, vector2)
  232|   301k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|   430k|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|   430k|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|   430k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   205k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   205k|            _mm256_loadu_si256(data as *const __m256i)
  272|   205k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|   723k|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|   723k|            _mm256_cmpeq_epi8(self, vector2)
  282|   723k|        }
_RNvXs_NtCsbTjOP5Lz3oJ_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   108k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   108k|        SensibleMoveMask(self.0 | other.0)
  165|   108k|    }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  8.19M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  8.19M|            _mm_set1_epi8(byte as i8)
  212|  8.19M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86sse2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|   148k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|   148k|            _mm_or_si128(self, vector2)
  242|   148k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  8.19M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  8.19M|            _mm256_set1_epi8(byte as i8)
  262|  8.19M|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|   164k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|   164k|            _mm256_load_si256(data as *const __m256i)
  267|   164k|        }
_RNvXNtNtCsbTjOP5Lz3oJ_6memchr6vector7x86avx2NtNtNtCs433v4DNuM1R_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   436k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   436k|            _mm256_or_si256(self, vector2)
  292|   436k|        }

_RNvMs2_NtCsbAittVSyoF6_9once_cell3impINtB5_8OnceCellNtNtCs80BIJ2NAVqC_5alloc6string6StringE14is_initializedCs4FJq8jLh9xR_13libfuzzer_sys:
   49|  9.59k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  9.59k|        // An `Acquire` load is enough because that makes all the initialization
   51|  9.59k|        // operations visible to us, and, this being a fast path, weaker
   52|  9.59k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  9.59k|        // `SeqCst` operations on the slow path.
   54|  9.59k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  9.59k|    }

_RNvMs4_NtCsbAittVSyoF6_9once_cell4syncINtB5_8OnceCellNtNtCs80BIJ2NAVqC_5alloc6string6StringE3getCs4FJq8jLh9xR_13libfuzzer_sys:
  963|  9.59k|        pub fn get(&self) -> Option<&T> {
  964|  9.59k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  9.59k|                None
  969|       |            }
  970|  9.59k|        }

_RNvMCscDOLRwgDEvg_10oxilangtagINtB2_11LanguageTagReE10into_innerCseXCYVcIQZ7o_5oxttl:
   54|  30.7k|    pub fn into_inner(self) -> T {
   55|  30.7k|        self.tag
   56|  30.7k|    }
_RNvMCscDOLRwgDEvg_10oxilangtagINtB2_11LanguageTagReE5parseCseXCYVcIQZ7o_5oxttl:
   41|  38.8k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   42|  38.8k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   43|  30.7k|        Ok(Self { tag, positions })
   44|  38.8k|    }
_RINvCscDOLRwgDEvg_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs2NsVQwDzFGg_5oxrdf:
  621|  37.4k|fn parse_langtag(
  622|  37.4k|    input: &str,
  623|  37.4k|    output: &mut impl OutputBuffer,
  624|  37.4k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  625|  37.4k|    #[derive(PartialEq, Eq)]
  626|  37.4k|    enum State {
  627|  37.4k|        Start,
  628|  37.4k|        AfterLanguage,
  629|  37.4k|        AfterExtLang,
  630|  37.4k|        AfterScript,
  631|  37.4k|        AfterRegion,
  632|  37.4k|        InExtension { expected: bool },
  633|  37.4k|        InPrivateUse { expected: bool },
  634|  37.4k|    }
  635|  37.4k|
  636|  37.4k|    let mut state = State::Start;
  637|  37.4k|    let mut language_end = 0;
  638|  37.4k|    let mut extlang_end = 0;
  639|  37.4k|    let mut script_end = 0;
  640|  37.4k|    let mut region_end = 0;
  641|  37.4k|    let mut variant_end = 0;
  642|  37.4k|    let mut extension_end = 0;
  643|  37.4k|    let mut extlangs_count = 0;
  644|  50.7k|    for (subtag, end) in SubTagIterator::new(input) {
  645|  50.7k|        if subtag.is_empty() {
  646|      0|            return Err(LanguageTagParseError {
  647|      0|                kind: TagParseErrorKind::EmptySubtag,
  648|      0|            });
  649|  50.7k|        }
  650|  50.7k|        if subtag.len() > 8 {
  651|    472|            return Err(LanguageTagParseError {
  652|    472|                kind: TagParseErrorKind::SubtagTooLong,
  653|    472|            });
  654|  50.2k|        }
  655|  50.2k|        if state == State::Start {
  656|       |            // Primary language
  657|  36.9k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  658|  4.50k|                return Err(LanguageTagParseError {
  659|  4.50k|                    kind: TagParseErrorKind::InvalidLanguage,
  660|  4.50k|                });
  661|  32.4k|            }
  662|  32.4k|            language_end = end;
  663|  32.4k|            output.extend(to_lowercase(subtag));
  664|  32.4k|            if subtag.len() < 4 {
  665|  9.75k|                // extlangs are only allowed for short language tags
  666|  9.75k|                state = State::AfterLanguage;
  667|  22.6k|            } else {
  668|  22.6k|                state = State::AfterExtLang;
  669|  22.6k|            }
  670|  13.3k|        } else if let State::InPrivateUse { .. } = state {
  671|  1.05k|            if !is_alphanumeric(subtag) {
  672|      0|                return Err(LanguageTagParseError {
  673|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  674|      0|                });
  675|  1.05k|            }
  676|  1.05k|            output.push('-');
  677|  1.05k|            output.extend(to_lowercase(subtag));
  678|  1.05k|            state = State::InPrivateUse { expected: false };
  679|  12.2k|        } else if subtag == "x" || subtag == "X" {
  680|       |            // We make sure extension is found
  681|  1.98k|            if let State::InExtension { expected: true } = state {
  682|    928|                return Err(LanguageTagParseError {
  683|    928|                    kind: TagParseErrorKind::EmptyExtension,
  684|    928|                });
  685|  1.05k|            }
  686|  1.05k|            output.push('-');
  687|  1.05k|            output.push('x');
  688|  1.05k|            state = State::InPrivateUse { expected: true };
  689|  10.2k|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  690|       |            // We make sure extension is found
  691|  3.20k|            if let State::InExtension { expected: true } = state {
  692|    727|                return Err(LanguageTagParseError {
  693|    727|                    kind: TagParseErrorKind::EmptyExtension,
  694|    727|                });
  695|  2.47k|            }
  696|  2.47k|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  697|  2.47k|            output.push('-');
  698|  2.47k|            output.push(extension_tag);
  699|  2.47k|            state = State::InExtension { expected: true };
  700|  7.06k|        } else if let State::InExtension { .. } = state {
  701|    816|            if !is_alphanumeric(subtag) {
  702|      0|                return Err(LanguageTagParseError {
  703|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  704|      0|                });
  705|    816|            }
  706|    816|            extension_end = end;
  707|    816|            output.push('-');
  708|    816|            output.extend(to_lowercase(subtag));
  709|    816|            state = State::InExtension { expected: false };
  710|  6.24k|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  711|  1.71k|            extlangs_count += 1;
  712|  1.71k|            if extlangs_count > 3 {
  713|    262|                return Err(LanguageTagParseError {
  714|    262|                    kind: TagParseErrorKind::TooManyExtlangs,
  715|    262|                });
  716|  1.44k|            }
  717|  1.44k|            // valid extlangs
  718|  1.44k|            extlang_end = end;
  719|  1.44k|            output.push('-');
  720|  1.44k|            output.extend(to_lowercase(subtag));
  721|  4.53k|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  722|  2.79k|            && subtag.len() == 4
  723|  1.41k|            && is_alphabetic(subtag)
  724|  1.41k|        {
  725|  1.41k|            // Script
  726|  1.41k|            script_end = end;
  727|  1.41k|            output.push('-');
  728|  1.41k|            output.extend(to_uppercase_first(subtag));
  729|  1.41k|            state = State::AfterScript;
  730|  3.11k|        } else if (state == State::AfterLanguage
  731|  1.96k|            || state == State::AfterExtLang
  732|  1.74k|            || state == State::AfterScript)
  733|  2.39k|            && (subtag.len() == 2 && is_alphabetic(subtag)
  734|  1.40k|                || subtag.len() == 3 && is_numeric(subtag))
  735|    992|        {
  736|    992|            // Region
  737|    992|            region_end = end;
  738|    992|            output.push('-');
  739|    992|            output.extend(to_uppercase(subtag));
  740|    992|            state = State::AfterRegion;
  741|  2.12k|        } else if (state == State::AfterLanguage
  742|  1.77k|            || state == State::AfterExtLang
  743|  1.69k|            || state == State::AfterScript
  744|    720|            || state == State::AfterRegion)
  745|  2.12k|            && is_alphanumeric(subtag)
  746|  2.12k|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  747|    686|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  748|  1.43k|        {
  749|  1.43k|            // Variant
  750|  1.43k|            variant_end = end;
  751|  1.43k|            output.push('-');
  752|  1.43k|            output.extend(to_lowercase(subtag));
  753|  1.43k|            state = State::AfterRegion;
  754|  1.43k|        } else {
  755|    686|            return Err(LanguageTagParseError {
  756|    686|                kind: TagParseErrorKind::InvalidSubtag,
  757|    686|            });
  758|       |        }
  759|       |    }
  760|       |
  761|       |    //We make sure we are in a correct final state
  762|  29.8k|    if let State::InExtension { expected: true } = state {
  763|    403|        return Err(LanguageTagParseError {
  764|    403|            kind: TagParseErrorKind::EmptyExtension,
  765|    403|        });
  766|  29.4k|    }
  767|  29.4k|    if let State::InPrivateUse { expected: true } = state {
  768|    200|        return Err(LanguageTagParseError {
  769|    200|            kind: TagParseErrorKind::EmptyPrivateUse,
  770|    200|        });
  771|  29.2k|    }
  772|  29.2k|
  773|  29.2k|    //We make sure we have not skipped anyone
  774|  29.2k|    if extlang_end < language_end {
  775|  28.5k|        extlang_end = language_end;
  776|  28.5k|    }
  777|  29.2k|    if script_end < extlang_end {
  778|  28.0k|        script_end = extlang_end;
  779|  28.0k|    }
  780|  29.2k|    if region_end < script_end {
  781|  28.6k|        region_end = script_end;
  782|  28.6k|    }
  783|  29.2k|    if variant_end < region_end {
  784|  27.9k|        variant_end = region_end;
  785|  27.9k|    }
  786|  29.2k|    if extension_end < variant_end {
  787|  28.8k|        extension_end = variant_end;
  788|  28.8k|    }
  789|       |
  790|  29.2k|    Ok(TagElementsPositions {
  791|  29.2k|        language_end,
  792|  29.2k|        extlang_end,
  793|  29.2k|        script_end,
  794|  29.2k|        region_end,
  795|  29.2k|        variant_end,
  796|  29.2k|        extension_end,
  797|  29.2k|    })
  798|  37.4k|}
_RINvCscDOLRwgDEvg_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs2NsVQwDzFGg_5oxrdf:
  576|  38.8k|fn parse_language_tag(
  577|  38.8k|    input: &str,
  578|  38.8k|    output: &mut impl OutputBuffer,
  579|  38.8k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  580|       |    //grandfathered tags
  581|  38.8k|    if let Some(tag) = GRANDFATHEREDS
  582|  38.8k|        .iter()
  583|  38.8k|        .find(|record| record.eq_ignore_ascii_case(input))
  584|       |    {
  585|      0|        output.push_str(tag);
  586|      0|        Ok(TagElementsPositions {
  587|      0|            language_end: tag.len(),
  588|      0|            extlang_end: tag.len(),
  589|      0|            script_end: tag.len(),
  590|      0|            region_end: tag.len(),
  591|      0|            variant_end: tag.len(),
  592|      0|            extension_end: tag.len(),
  593|      0|        })
  594|  38.8k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  595|       |        // private use
  596|  1.49k|        if !is_alphanumeric_or_dash(input) {
  597|      0|            Err(LanguageTagParseError {
  598|      0|                kind: TagParseErrorKind::ForbiddenChar,
  599|      0|            })
  600|  1.49k|        } else if input.len() == 2 {
  601|      0|            Err(LanguageTagParseError {
  602|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  603|      0|            })
  604|       |        } else {
  605|  1.49k|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  606|  1.49k|            Ok(TagElementsPositions {
  607|  1.49k|                language_end: input.len(),
  608|  1.49k|                extlang_end: input.len(),
  609|  1.49k|                script_end: input.len(),
  610|  1.49k|                region_end: input.len(),
  611|  1.49k|                variant_end: input.len(),
  612|  1.49k|                extension_end: input.len(),
  613|  1.49k|            })
  614|       |        }
  615|       |    } else {
  616|  37.4k|        parse_langtag(input, output)
  617|       |    }
  618|  38.8k|}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCINvB6_18parse_language_tagBw_Es_0EECs2NsVQwDzFGg_5oxrdf:
  560|  1.49k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs2NsVQwDzFGg_5oxrdf:
  560|  37.1k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_uppercase0EECs2NsVQwDzFGg_5oxrdf:
  560|    992|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvXsr_CscDOLRwgDEvg_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs433v4DNuM1R_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters5chain5ChainINtNtNtB10_7sources4once4OncecEINtNtB20_3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_18to_uppercase_first0EEECs2NsVQwDzFGg_5oxrdf:
  560|  1.41k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RNCINvCscDOLRwgDEvg_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs2NsVQwDzFGg_5oxrdf:
  583|  1.01M|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvCscDOLRwgDEvg_10oxilangtag10is_numericCs2NsVQwDzFGg_5oxrdf:
  865|    567|fn is_numeric(s: &str) -> bool {
  866|    567|    s.chars().all(|x| x.is_ascii_digit())
  867|    567|}
_RNvCscDOLRwgDEvg_10oxilangtag12to_lowercaseCs2NsVQwDzFGg_5oxrdf:
  892|  37.1k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  893|  37.1k|    s.chars().map(|c| c.to_ascii_lowercase())
  894|  37.1k|}
_RNvCscDOLRwgDEvg_10oxilangtag12to_uppercaseCs2NsVQwDzFGg_5oxrdf:
  880|    992|fn to_uppercase(s: &str) -> impl Iterator<Item = char> + '_ {
  881|    992|    s.chars().map(|c| c.to_ascii_uppercase())
  882|    992|}
_RNvCscDOLRwgDEvg_10oxilangtag13is_alphabeticCs2NsVQwDzFGg_5oxrdf:
  860|  37.9k|fn is_alphabetic(s: &str) -> bool {
  861|  37.9k|    s.chars().all(|x| x.is_ascii_alphabetic())
  862|  37.9k|}
_RNvCscDOLRwgDEvg_10oxilangtag15is_alphanumericCs2NsVQwDzFGg_5oxrdf:
  870|  7.19k|fn is_alphanumeric(s: &str) -> bool {
  871|  7.19k|    s.chars().all(|x| x.is_ascii_alphanumeric())
  872|  7.19k|}
_RNvCscDOLRwgDEvg_10oxilangtag18to_uppercase_firstCs2NsVQwDzFGg_5oxrdf:
  886|  1.41k|fn to_uppercase_first(s: &str) -> impl Iterator<Item = char> + '_ {
  887|  1.41k|    let mut chars = s.chars();
  888|  1.41k|    once(chars.next().unwrap().to_ascii_uppercase()).chain(chars.map(|c| c.to_ascii_lowercase()))
  889|  1.41k|}
_RNvCscDOLRwgDEvg_10oxilangtag23is_alphanumeric_or_dashCs2NsVQwDzFGg_5oxrdf:
  875|  1.49k|fn is_alphanumeric_or_dash(s: &str) -> bool {
  876|  1.49k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')
  877|  1.49k|}
_RNvMsv_CscDOLRwgDEvg_10oxilangtagNtB5_14SubTagIterator3newCs2NsVQwDzFGg_5oxrdf:
  839|  37.4k|    fn new(input: &'a str) -> Self {
  840|  37.4k|        Self {
  841|  37.4k|            split: input.split('-'),
  842|  37.4k|            position: 0,
  843|  37.4k|        }
  844|  37.4k|    }
_RNvXsq_CscDOLRwgDEvg_10oxilangtagNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2NsVQwDzFGg_5oxrdf:
  552|  14.2k|    fn push(&mut self, _: char) {}
_RNvXsw_CscDOLRwgDEvg_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs433v4DNuM1R_4core4iter6traits8iterator8Iterator4nextCs2NsVQwDzFGg_5oxrdf:
  851|  80.5k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  852|  80.5k|        let tag = self.split.next()?;
  853|  50.7k|        let tag_end = self.position + tag.len();
  854|  50.7k|        self.position = tag_end + 1;
  855|  50.7k|        Some((tag, tag_end))
  856|  80.5k|    }
_RNvXso_CscDOLRwgDEvg_10oxilangtagNtB5_21LanguageTagParseErrorNtNtCs433v4DNuM1R_4core3fmt7Display3fmt:
  482|  8.18k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  483|  8.18k|        match self.kind {
  484|       |            TagParseErrorKind::EmptyExtension => {
  485|  2.05k|                write!(f, "If an extension subtag is present, it must not be empty")
  486|       |            }
  487|       |            TagParseErrorKind::EmptyPrivateUse => {
  488|    200|                write!(f, "If the `x` subtag is present, it must not be empty")
  489|       |            }
  490|       |            TagParseErrorKind::ForbiddenChar => {
  491|      0|                write!(f, "The langtag contains a char not allowed")
  492|       |            }
  493|    686|            TagParseErrorKind::InvalidSubtag => write!(
  494|    686|                f,
  495|    686|                "A subtag fails to parse, it does not match any other subtags"
  496|    686|            ),
  497|  4.50k|            TagParseErrorKind::InvalidLanguage => write!(f, "The given language subtag is invalid"),
  498|       |            TagParseErrorKind::SubtagTooLong => {
  499|    472|                write!(f, "A subtag may be eight characters in length at maximum")
  500|       |            }
  501|      0|            TagParseErrorKind::EmptySubtag => write!(f, "A subtag should not be empty"),
  502|       |            TagParseErrorKind::TooManyExtlangs => {
  503|    262|                write!(f, "At maximum three extlangs are allowed")
  504|       |            }
  505|       |        }
  506|  8.18k|    }
_RNCNvCscDOLRwgDEvg_10oxilangtag13is_alphabetic0B3_:
  861|   166k|    s.chars().all(|x| x.is_ascii_alphabetic())
_RNCNvCscDOLRwgDEvg_10oxilangtag10is_numeric0B3_:
  866|    567|    s.chars().all(|x| x.is_ascii_digit())
_RNCNvCscDOLRwgDEvg_10oxilangtag15is_alphanumeric0B3_:
  871|  19.4k|    s.chars().all(|x| x.is_ascii_alphanumeric())
_RNCNvCscDOLRwgDEvg_10oxilangtag23is_alphanumeric_or_dash0B3_:
  876|  34.1k|    s.chars().all(|x| x.is_ascii_alphanumeric() || x == '-')

_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer3lenCseXCYVcIQZ7o_5oxttl:
 1137|   118k|    fn len(&self) -> usize {
 1138|   118k|        self.len()
 1139|   118k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer4pushCseXCYVcIQZ7o_5oxttl:
 1117|   410k|    fn push(&mut self, c: char) {
 1118|   410k|        self.push(c);
 1119|   410k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer5clearCseXCYVcIQZ7o_5oxttl:
 1127|  5.20k|    fn clear(&mut self) {
 1128|  5.20k|        self.clear();
 1129|  5.20k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer6as_strCseXCYVcIQZ7o_5oxttl:
 1142|  77.7k|    fn as_str(&self) -> &str {
 1143|  77.7k|        self.as_str()
 1144|  77.7k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer8push_strCseXCYVcIQZ7o_5oxttl:
 1122|  65.1k|    fn push_str(&mut self, s: &str) {
 1123|  65.1k|        self.push_str(s);
 1124|  65.1k|    }
_RNvXsZ_CslEbQcIb7A5U_5oxiriNtNtCs80BIJ2NAVqC_5alloc6string6StringNtB5_12OutputBuffer8truncateCseXCYVcIQZ7o_5oxttl:
 1132|  42.0k|    fn truncate(&mut self, new_len: usize) {
 1133|  42.0k|        self.truncate(new_len);
 1134|  42.0k|    }
_RINvMs11_CslEbQcIb7A5U_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb1_E11parse_erroruECseXCYVcIQZ7o_5oxttl:
 1567|  1.23k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  1.23k|        Err(IriParseError { kind })
 1569|  1.23k|    }
_RINvMs11_CslEbQcIb7A5U_5oxiriINtB7_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E11parse_erroruECseXCYVcIQZ7o_5oxttl:
 1567|  19.3k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  19.3k|        Err(IriParseError { kind })
 1569|  19.3k|    }
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10read_echar0CseXCYVcIQZ7o_5oxttl:
 1550|  3.84k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10read_echars_0CseXCYVcIQZ7o_5oxttl:
 1551|  1.52k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE15parse_uncheckedCseXCYVcIQZ7o_5oxttl:
   71|  16.5k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
   72|  16.5k|        let positions = IriParser::<_, true>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   73|  15.3k|        Ok(Self { iri, positions })
   74|  16.5k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE4pathCseXCYVcIQZ7o_5oxttl:
  264|  16.3k|    pub fn path(&self) -> &str {
  265|  16.3k|        &self.iri[self.positions.authority_end..self.positions.path_end]
  266|  16.3k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE6as_refCseXCYVcIQZ7o_5oxttl:
  160|  72.7k|    pub fn as_ref(&self) -> IriRef<&str> {
  161|  72.7k|        IriRef {
  162|  72.7k|            iri: &self.iri,
  163|  72.7k|            positions: self.positions,
  164|  72.7k|        }
  165|  72.7k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE7resolveCseXCYVcIQZ7o_5oxttl:
   89|  72.7k|    pub fn resolve(&self, iri: &str) -> Result<IriRef<String>, IriParseError> {
   90|  72.7k|        let mut target_buffer = String::with_capacity(self.iri.len() + iri.len());
   91|  72.7k|        let positions = IriParser::<_, false>::parse(iri, Some(self.as_ref()), &mut target_buffer)?;
   92|  53.3k|        Ok(IriRef {
   93|  53.3k|            iri: target_buffer,
   94|  53.3k|            positions,
   95|  53.3k|        })
   96|  72.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_hostCseXCYVcIQZ7o_5oxttl:
 1366|  12.2k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  12.2k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  3.54k|            let start_position = self.input.position;
 1370|  14.1k|            while let Some(c) = self.input.next() {
 1371|  14.1k|                self.output.push(c);
 1372|  14.1k|                if c == ']' {
 1373|  3.54k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  3.54k|                    if !UNCHECKED {
 1375|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|  3.54k|                    }
 1379|       |
 1380|  3.54k|                    let c = self.input.next();
 1381|  3.54k|                    return match c {
 1382|       |                        Some(':') => {
 1383|    255|                            self.output.push(':');
 1384|    255|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|  3.29k|                            self.output_positions.authority_end = self.output.len();
 1388|  3.29k|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  10.6k|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  58.6k|            loop {
 1398|  58.6k|                let c = self.input.next();
 1399|  58.6k|                match c {
 1400|       |                    Some(':') => {
 1401|  2.26k|                        self.output.push(':');
 1402|  2.26k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  6.40k|                        self.output_positions.authority_end = self.output.len();
 1406|  6.40k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  49.9k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  12.2k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_pathCseXCYVcIQZ7o_5oxttl:
 1457|  9.45k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  39.9k|        loop {
 1459|  39.9k|            let c = self.input.next();
 1460|  39.9k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  11.4k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  11.4k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  11.4k|                    } else if c == Some('/') {
 1470|  1.97k|                        self.output.push('/');
 1471|  9.45k|                    }
 1472|       |
 1473|  11.4k|                    if c == Some('?') {
 1474|  1.17k|                        self.output_positions.path_end = self.output.len();
 1475|  1.17k|                        self.output.push('?');
 1476|  1.17k|                        return self.parse_query();
 1477|  10.2k|                    } else if c == Some('#') {
 1478|    631|                        self.output_positions.path_end = self.output.len();
 1479|    631|                        self.output_positions.query_end = self.output.len();
 1480|    631|                        self.output.push('#');
 1481|    631|                        return self.parse_fragment();
 1482|  9.62k|                    } else if c.is_none() {
 1483|  7.64k|                        self.output_positions.path_end = self.output.len();
 1484|  7.64k|                        self.output_positions.query_end = self.output.len();
 1485|  7.64k|                        return Ok(());
 1486|  1.97k|                    }
 1487|       |                }
 1488|  28.5k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  9.45k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E10parse_portCseXCYVcIQZ7o_5oxttl:
 1414|  2.51k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  3.45k|        loop {
 1416|  3.45k|            let c = self.input.next();
 1417|  3.08k|            match c {
 1418|  3.08k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  1.28k|                    self.output_positions.authority_end = self.output.len();
 1421|  1.28k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|  1.23k|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  2.51k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E11parse_queryCseXCYVcIQZ7o_5oxttl:
 1493|  2.10k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  11.4k|        while let Some(c) = self.input.next() {
 1495|  9.65k|            if c == '#' {
 1496|    300|                self.output_positions.query_end = self.output.len();
 1497|    300|                self.output.push('#');
 1498|    300|                return self.parse_fragment();
 1499|       |            } else {
 1500|  9.35k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  1.80k|        self.output_positions.query_end = self.output.len();
 1504|  1.80k|        Ok(())
 1505|  2.10k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E12parse_schemeCseXCYVcIQZ7o_5oxttl:
 1220|  16.5k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  71.0k|        loop {
 1222|  71.0k|            let c = self.input.next();
 1223|  71.0k|            match c {
 1224|  71.0k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  54.5k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  16.5k|                    self.output.push(':');
 1229|  16.5k|                    self.output_positions.scheme_end = self.output.len();
 1230|  16.5k|                    self.input_scheme_end = self.input.position;
 1231|  16.5k|                    return if self.input.starts_with('/') {
 1232|  12.4k|                        self.input.next();
 1233|  12.4k|                        self.output.push('/');
 1234|  12.4k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  4.05k|                        self.output_positions.authority_end = self.output.len();
 1237|  4.05k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  16.5k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E14parse_fragmentCseXCYVcIQZ7o_5oxttl:
 1507|  2.33k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  12.8k|        while let Some(c) = self.input.next() {
 1509|  10.5k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  2.33k|        Ok(())
 1512|  2.33k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E15parse_authorityCseXCYVcIQZ7o_5oxttl:
 1342|  12.2k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  66.4k|        loop {
 1345|  66.4k|            let c = self.input.next();
 1346|  66.4k|            match c {
 1347|       |                Some('@') => {
 1348|    322|                    self.output.push('@');
 1349|    322|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  11.8k|                    self.input = ParserInput {
 1353|  11.8k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  11.8k|                        position: self.input_scheme_end + 2,
 1355|  11.8k|                    };
 1356|  11.8k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  11.8k|                    return self.parse_host();
 1358|       |                }
 1359|  54.1k|                Some(c) => {
 1360|  54.1k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  12.2k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E16parse_path_startCseXCYVcIQZ7o_5oxttl:
 1428|  10.9k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  10.9k|        match c {
 1430|       |            None => {
 1431|  3.53k|                self.output_positions.path_end = self.output.len();
 1432|  3.53k|                self.output_positions.query_end = self.output.len();
 1433|  3.53k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|    927|                self.output_positions.path_end = self.output.len();
 1437|    927|                self.output.push('?');
 1438|    927|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|  1.40k|                self.output_positions.path_end = self.output.len();
 1442|  1.40k|                self.output_positions.query_end = self.output.len();
 1443|  1.40k|                self.output.push('#');
 1444|  1.40k|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  5.11k|                self.output.push('/');
 1448|  5.11k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  10.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E18parse_scheme_startCseXCYVcIQZ7o_5oxttl:
 1212|  16.5k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  16.5k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  16.5k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  16.5k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E23parse_path_or_authorityCseXCYVcIQZ7o_5oxttl:
 1252|  12.4k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  12.4k|        if self.input.starts_with('/') {
 1254|  12.2k|            self.input.next();
 1255|  12.2k|            self.output.push('/');
 1256|  12.2k|            self.parse_authority()
 1257|       |        } else {
 1258|    276|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    276|            self.parse_path()
 1260|       |        }
 1261|  12.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E27read_url_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1523|   143k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   143k|        if UNCHECKED || is_url_code_point(c) {
 1525|   143k|            self.output.push(c);
 1526|   143k|            Ok(())
 1527|      0|        } else if c == '%' {
 1528|      0|            self.read_echar()
 1529|       |        } else {
 1530|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   143k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E33read_url_query_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1535|  9.35k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  9.35k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  9.35k|            self.output.push(c);
 1538|  9.35k|            Ok(())
 1539|      0|        } else if c == '%' {
 1540|      0|            self.read_echar()
 1541|       |        } else {
 1542|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  9.35k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb1_E5parseCseXCYVcIQZ7o_5oxttl:
 1187|  16.5k|    fn parse(
 1188|  16.5k|        iri: &'a str,
 1189|  16.5k|        base: Option<IriRef<&'a str>>,
 1190|  16.5k|        output: &'a mut O,
 1191|  16.5k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  16.5k|        let mut parser = Self {
 1193|  16.5k|            iri,
 1194|  16.5k|            base,
 1195|  16.5k|            input: ParserInput {
 1196|  16.5k|                value: iri.chars(),
 1197|  16.5k|                position: 0,
 1198|  16.5k|            },
 1199|  16.5k|            output,
 1200|  16.5k|            output_positions: IriElementsPositions {
 1201|  16.5k|                scheme_end: 0,
 1202|  16.5k|                authority_end: 0,
 1203|  16.5k|                path_end: 0,
 1204|  16.5k|                query_end: 0,
 1205|  16.5k|            },
 1206|  16.5k|            input_scheme_end: 0,
 1207|  16.5k|        };
 1208|  16.5k|        parser.parse_scheme_start()?;
 1209|  15.3k|        Ok(parser.output_positions)
 1210|  16.5k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10parse_hostCseXCYVcIQZ7o_5oxttl:
 1366|  23.3k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  23.3k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  12.5k|            let start_position = self.input.position;
 1370|  54.0k|            while let Some(c) = self.input.next() {
 1371|  53.4k|                self.output.push(c);
 1372|  53.4k|                if c == ']' {
 1373|  11.9k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  11.9k|                    if !UNCHECKED {
 1375|  11.9k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|  2.67k|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|  9.26k|                        }
 1378|      0|                    }
 1379|       |
 1380|  9.26k|                    let c = self.input.next();
 1381|  9.26k|                    return match c {
 1382|       |                        Some(':') => {
 1383|  1.06k|                            self.output.push(':');
 1384|  1.06k|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|  5.78k|                            self.output_positions.authority_end = self.output.len();
 1388|  5.78k|                            self.parse_path_start(c)
 1389|       |                        }
 1390|  2.40k|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  41.5k|                }
 1393|       |            }
 1394|    591|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  27.2k|            loop {
 1398|  27.2k|                let c = self.input.next();
 1399|  27.2k|                match c {
 1400|       |                    Some(':') => {
 1401|  4.18k|                        self.output.push(':');
 1402|  4.18k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  6.16k|                        self.output_positions.authority_end = self.output.len();
 1406|  6.16k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  16.9k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  23.3k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10parse_pathCseXCYVcIQZ7o_5oxttl:
 1457|  28.4k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|   133k|        loop {
 1459|   133k|            let c = self.input.next();
 1460|   133k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  28.9k|                    if self.output.as_str().ends_with("/..") {
 1463|    243|                        self.remove_last_segment();
 1464|    243|                        self.remove_last_segment();
 1465|    243|                        self.output.push('/');
 1466|  28.7k|                    } else if self.output.as_str().ends_with("/.") {
 1467|  2.98k|                        self.remove_last_segment();
 1468|  2.98k|                        self.output.push('/');
 1469|  25.7k|                    } else if c == Some('/') {
 1470|  5.76k|                        self.output.push('/');
 1471|  19.9k|                    }
 1472|       |
 1473|  28.9k|                    if c == Some('?') {
 1474|  3.02k|                        self.output_positions.path_end = self.output.len();
 1475|  3.02k|                        self.output.push('?');
 1476|  3.02k|                        return self.parse_query();
 1477|  25.9k|                    } else if c == Some('#') {
 1478|  1.84k|                        self.output_positions.path_end = self.output.len();
 1479|  1.84k|                        self.output_positions.query_end = self.output.len();
 1480|  1.84k|                        self.output.push('#');
 1481|  1.84k|                        return self.parse_fragment();
 1482|  24.0k|                    } else if c.is_none() {
 1483|  16.9k|                        self.output_positions.path_end = self.output.len();
 1484|  16.9k|                        self.output_positions.query_end = self.output.len();
 1485|  16.9k|                        return Ok(());
 1486|  7.17k|                    }
 1487|       |                }
 1488|   104k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  28.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10parse_portCseXCYVcIQZ7o_5oxttl:
 1414|  5.24k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  7.01k|        loop {
 1416|  7.01k|            let c = self.input.next();
 1417|  5.08k|            match c {
 1418|  5.08k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  4.47k|                    self.output_positions.authority_end = self.output.len();
 1421|  4.47k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|    774|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  5.24k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E10read_echarCseXCYVcIQZ7o_5oxttl:
 1547|  4.19k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  4.19k|        let c1 = self.input.next();
 1549|  4.19k|        let c2 = self.input.next();
 1550|  4.19k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  1.52k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.29k|            self.output.push('%');
 1554|  1.29k|            self.output.push(c1.unwrap());
 1555|  1.29k|            self.output.push(c2.unwrap());
 1556|  1.29k|            Ok(())
 1557|       |        } else {
 1558|  2.89k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  2.89k|                Some('%'),
 1560|  2.89k|                c1,
 1561|  2.89k|                c2,
 1562|  2.89k|            ]))
 1563|       |        }
 1564|  4.19k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E11parse_queryCseXCYVcIQZ7o_5oxttl:
 1493|  8.09k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  34.2k|        while let Some(c) = self.input.next() {
 1495|  28.8k|            if c == '#' {
 1496|    740|                self.output_positions.query_end = self.output.len();
 1497|    740|                self.output.push('#');
 1498|    740|                return self.parse_fragment();
 1499|       |            } else {
 1500|  28.0k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  5.41k|        self.output_positions.query_end = self.output.len();
 1504|  5.41k|        Ok(())
 1505|  8.09k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E12parse_schemeCseXCYVcIQZ7o_5oxttl:
 1220|  12.4k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  54.2k|        loop {
 1222|  54.2k|            let c = self.input.next();
 1223|  53.1k|            match c {
 1224|  53.1k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  41.7k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  7.25k|                    self.output.push(':');
 1229|  7.25k|                    self.output_positions.scheme_end = self.output.len();
 1230|  7.25k|                    self.input_scheme_end = self.input.position;
 1231|  7.25k|                    return if self.input.starts_with('/') {
 1232|  1.59k|                        self.input.next();
 1233|  1.59k|                        self.output.push('/');
 1234|  1.59k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  5.66k|                        self.output_positions.authority_end = self.output.len();
 1237|  5.66k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|  5.20k|                    self.input = ParserInput {
 1242|  5.20k|                        value: self.iri.chars(),
 1243|  5.20k|                        position: 0,
 1244|  5.20k|                    }; // reset
 1245|  5.20k|                    self.output.clear();
 1246|  5.20k|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  12.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E14parse_fragmentCseXCYVcIQZ7o_5oxttl:
 1507|  7.82k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  39.7k|        while let Some(c) = self.input.next() {
 1509|  33.7k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  6.00k|        Ok(())
 1512|  7.82k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E14parse_relativeCseXCYVcIQZ7o_5oxttl:
 1263|  65.1k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|  65.1k|        if let Some(base) = self.base {
 1265|  65.1k|            match self.input.front() {
 1266|       |                None => {
 1267|  16.6k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|  16.6k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|  16.6k|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|  16.6k|                    self.output_positions.path_end = base.positions.path_end;
 1271|  16.6k|                    self.output_positions.query_end = base.positions.query_end;
 1272|  16.6k|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|  27.3k|                    self.input.next();
 1276|  27.3k|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|  2.36k|                    self.input.next();
 1280|  2.36k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|  2.36k|                    self.output.push('?');
 1282|  2.36k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|  2.36k|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|  2.36k|                    self.output_positions.path_end = base.positions.path_end;
 1285|  2.36k|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|  2.21k|                    self.input.next();
 1289|  2.21k|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|  2.21k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|  2.21k|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|  2.21k|                    self.output_positions.path_end = base.positions.path_end;
 1293|  2.21k|                    self.output_positions.query_end = base.positions.query_end;
 1294|  2.21k|                    self.output.push('#');
 1295|  2.21k|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|  16.6k|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|  16.6k|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|  16.6k|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|  16.6k|                    self.output_positions.path_end = base.positions.path_end;
 1302|  16.6k|                    self.remove_last_segment();
 1303|  16.6k|                    if self.output.len() > base.positions.scheme_end {
 1304|  15.0k|                        // We have some path or authority, we keep a base '/'
 1305|  15.0k|                        self.output.push('/');
 1306|  15.0k|                    }
 1307|  16.6k|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|      0|            self.output_positions.scheme_end = 0;
 1312|      0|            self.input_scheme_end = 0;
 1313|      0|            if self.input.starts_with('/') {
 1314|      0|                self.input.next();
 1315|      0|                self.output.push('/');
 1316|      0|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|      0|                self.output_positions.authority_end = 0;
 1319|      0|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|  65.1k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E15parse_authorityCseXCYVcIQZ7o_5oxttl:
 1342|  25.0k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  53.3k|        loop {
 1345|  53.3k|            let c = self.input.next();
 1346|  53.3k|            match c {
 1347|       |                Some('@') => {
 1348|  1.35k|                    self.output.push('@');
 1349|  1.35k|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  22.0k|                    self.input = ParserInput {
 1353|  22.0k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  22.0k|                        position: self.input_scheme_end + 2,
 1355|  22.0k|                    };
 1356|  22.0k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  22.0k|                    return self.parse_host();
 1358|       |                }
 1359|  29.9k|                Some(c) => {
 1360|  29.9k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  25.0k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E16parse_path_startCseXCYVcIQZ7o_5oxttl:
 1428|  16.4k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  16.4k|        match c {
 1430|       |            None => {
 1431|  8.44k|                self.output_positions.path_end = self.output.len();
 1432|  8.44k|                self.output_positions.query_end = self.output.len();
 1433|  8.44k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  2.70k|                self.output_positions.path_end = self.output.len();
 1437|  2.70k|                self.output.push('?');
 1438|  2.70k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|  3.02k|                self.output_positions.path_end = self.output.len();
 1442|  3.02k|                self.output_positions.query_end = self.output.len();
 1443|  3.02k|                self.output.push('#');
 1444|  3.02k|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  2.26k|                self.output.push('/');
 1448|  2.26k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  16.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E18parse_scheme_startCseXCYVcIQZ7o_5oxttl:
 1212|  72.7k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  72.7k|        match self.input.front() {
 1214|    324|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  55.8k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|  59.9k|            _ => self.parse_relative(),
 1217|       |        }
 1218|  72.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E19remove_last_segmentCseXCYVcIQZ7o_5oxttl:
 1514|  20.0k|    fn remove_last_segment(&mut self) {
 1515|  20.0k|        let last_slash_position = self.output.as_str()[self.output_positions.authority_end..]
 1516|  20.0k|            .rfind('/')
 1517|  20.0k|            .unwrap_or(0);
 1518|  20.0k|        self.output
 1519|  20.0k|            .truncate(last_slash_position + self.output_positions.authority_end)
 1520|  20.0k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E20parse_relative_slashCseXCYVcIQZ7o_5oxttl:
 1324|  27.3k|    fn parse_relative_slash(&mut self, base: &IriRef<&'a str>) -> Result<(), IriParseError> {
 1325|  27.3k|        if self.input.starts_with('/') {
 1326|  23.9k|            self.input.next();
 1327|  23.9k|            self.output.push_str(&base.iri[..base.positions.scheme_end]);
 1328|  23.9k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1329|  23.9k|            self.output.push('/');
 1330|  23.9k|            self.output.push('/');
 1331|  23.9k|            self.parse_authority()
 1332|       |        } else {
 1333|  3.37k|            self.output
 1334|  3.37k|                .push_str(&base.iri[..base.positions.authority_end]);
 1335|  3.37k|            self.output.push('/');
 1336|  3.37k|            self.output_positions.scheme_end = base.positions.scheme_end;
 1337|  3.37k|            self.output_positions.authority_end = base.positions.authority_end;
 1338|  3.37k|            self.parse_path()
 1339|       |        }
 1340|  27.3k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E23parse_path_or_authorityCseXCYVcIQZ7o_5oxttl:
 1252|  1.59k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  1.59k|        if self.input.starts_with('/') {
 1254|  1.08k|            self.input.next();
 1255|  1.08k|            self.output.push('/');
 1256|  1.08k|            self.parse_authority()
 1257|       |        } else {
 1258|    518|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    518|            self.parse_path()
 1260|       |        }
 1261|  1.59k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E27read_url_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1523|   185k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   185k|        if UNCHECKED || is_url_code_point(c) {
 1525|   173k|            self.output.push(c);
 1526|   173k|            Ok(())
 1527|  11.7k|        } else if c == '%' {
 1528|  3.68k|            self.read_echar()
 1529|       |        } else {
 1530|  8.05k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   185k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E33read_url_query_codepoint_or_echarCseXCYVcIQZ7o_5oxttl:
 1535|  28.0k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  28.0k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  25.9k|            self.output.push(c);
 1538|  25.9k|            Ok(())
 1539|  2.16k|        } else if c == '%' {
 1540|    513|            self.read_echar()
 1541|       |        } else {
 1542|  1.65k|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  28.0k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtNtCs80BIJ2NAVqC_5alloc6string6StringKb0_E5parseCseXCYVcIQZ7o_5oxttl:
 1187|  72.7k|    fn parse(
 1188|  72.7k|        iri: &'a str,
 1189|  72.7k|        base: Option<IriRef<&'a str>>,
 1190|  72.7k|        output: &'a mut O,
 1191|  72.7k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  72.7k|        let mut parser = Self {
 1193|  72.7k|            iri,
 1194|  72.7k|            base,
 1195|  72.7k|            input: ParserInput {
 1196|  72.7k|                value: iri.chars(),
 1197|  72.7k|                position: 0,
 1198|  72.7k|            },
 1199|  72.7k|            output,
 1200|  72.7k|            output_positions: IriElementsPositions {
 1201|  72.7k|                scheme_end: 0,
 1202|  72.7k|                authority_end: 0,
 1203|  72.7k|                path_end: 0,
 1204|  72.7k|                query_end: 0,
 1205|  72.7k|            },
 1206|  72.7k|            input_scheme_end: 0,
 1207|  72.7k|        };
 1208|  72.7k|        parser.parse_scheme_start()?;
 1209|  53.3k|        Ok(parser.output_positions)
 1210|  72.7k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE15parse_uncheckedCseXCYVcIQZ7o_5oxttl:
  574|  16.5k|    pub fn parse_unchecked(iri: T) -> Result<Self, IriParseError> {
  575|  16.5k|        IriRef::parse_unchecked(iri)?.try_into()
  576|  16.5k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE4pathCseXCYVcIQZ7o_5oxttl:
  730|  16.3k|    pub fn path(&self) -> &str {
  731|  16.3k|        self.0.path()
  732|  16.3k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE7resolveCseXCYVcIQZ7o_5oxttl:
  591|  72.7k|    pub fn resolve(&self, iri: &str) -> Result<Iri<String>, IriParseError> {
  592|  72.7k|        Ok(Iri(self.0.resolve(iri)?))
  593|  72.7k|    }
_RNvXsL_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringENtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  909|  28.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  910|  28.5k|        self.0.fmt(f)
  911|  28.5k|    }
_RNvXsg_CslEbQcIb7A5U_5oxiriINtB5_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringENtNtCs433v4DNuM1R_4core3fmt7Display3fmtCseXCYVcIQZ7o_5oxttl:
  423|  28.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  424|  28.5k|        self.iri.fmt(f)
  425|  28.5k|    }
_RNvCslEbQcIb7A5U_5oxiri17is_url_code_pointCseXCYVcIQZ7o_5oxttl:
 1573|   213k|fn is_url_code_point(c: char) -> bool {
 1574|   213k|    matches!(c,
 1575|  62.9k|        'a'..='z'
 1576|  35.7k|        | 'A'..='Z'
 1577|  92.7k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  16.7k|        | '\u{A0}'..='\u{D7FF}'
 1598|  5.15k|        | '\u{F900}'..='\u{FDCF}'
 1599|  5.15k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  5.14k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  5.14k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  5.14k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  5.14k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  5.14k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  5.14k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  5.14k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  5.14k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  5.14k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  5.14k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  5.14k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  5.14k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|  5.14k|        | '\u{D0000}'..='\u{DFFFD}'
 1613|     14|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   213k|}
_RNvCslEbQcIb7A5U_5oxiri23is_url_query_code_pointCseXCYVcIQZ7o_5oxttl:
 1618|  28.0k|fn is_url_query_code_point(c: char) -> bool {
 1619|  28.0k|    is_url_code_point(c)
 1620|  2.26k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  28.0k|}
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput11starts_withCseXCYVcIQZ7o_5oxttl:
 1169|   100k|    fn starts_with(&self, c: char) -> bool {
 1170|   100k|        self.value.as_str().starts_with(c)
 1171|   100k|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput4nextCseXCYVcIQZ7o_5oxttl:
 1154|   785k|    fn next(&mut self) -> Option<char> {
 1155|   785k|        if let Some(head) = self.value.next() {
 1156|   723k|            self.position += head.len_utf8();
 1157|   723k|            Some(head)
 1158|       |        } else {
 1159|  62.0k|            None
 1160|       |        }
 1161|   785k|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput5frontCseXCYVcIQZ7o_5oxttl:
 1164|   154k|    fn front(&self) -> Option<char> {
 1165|   154k|        self.value.clone().next()
 1166|   154k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCseXCYVcIQZ7o_5oxttl:
 1105|  62.5k|    fn len(&self) -> usize {
 1106|  62.5k|        self.len
 1107|  62.5k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCseXCYVcIQZ7o_5oxttl:
 1085|   277k|    fn push(&mut self, c: char) {
 1086|   277k|        self.len += c.len_utf8();
 1087|   277k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCseXCYVcIQZ7o_5oxttl:
 1110|  22.8k|    fn as_str(&self) -> &str {
 1111|  22.8k|        ""
 1112|  22.8k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCseXCYVcIQZ7o_5oxttl:
 1100|  11.8k|    fn truncate(&mut self, new_len: usize) {
 1101|  11.8k|        self.len = new_len;
 1102|  11.8k|    }
_RINvMs11_CslEbQcIb7A5U_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs2NsVQwDzFGg_5oxrdf:
 1567|  6.48k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|  6.48k|        Err(IriParseError { kind })
 1569|  6.48k|    }
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs2NsVQwDzFGg_5oxrdf:
 1550|  3.53k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CslEbQcIb7A5U_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs2NsVQwDzFGg_5oxrdf:
 1551|  2.00k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE10into_innerCs2NsVQwDzFGg_5oxrdf:
  191|  53.3k|    pub fn into_inner(self) -> T {
  192|  53.3k|        self.iri
  193|  53.3k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE11is_absoluteCs2NsVQwDzFGg_5oxrdf:
  205|  24.9k|    pub fn is_absolute(&self) -> bool {
  206|  24.9k|        self.positions.scheme_end != 0
  207|  24.9k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefNtNtCs80BIJ2NAVqC_5alloc6string6StringE5parseCs2NsVQwDzFGg_5oxrdf:
   58|  9.59k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  9.59k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  9.59k|        Ok(Self { iri, positions })
   61|  9.59k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefReE11is_absoluteCs2NsVQwDzFGg_5oxrdf:
  205|  19.7k|    pub fn is_absolute(&self) -> bool {
  206|  19.7k|        self.positions.scheme_end != 0
  207|  19.7k|    }
_RNvMCslEbQcIb7A5U_5oxiriINtB2_6IriRefReE5parseCs2NsVQwDzFGg_5oxrdf:
   58|  26.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  26.2k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  19.7k|        Ok(Self { iri, positions })
   61|  26.2k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs2NsVQwDzFGg_5oxrdf:
 1366|  29.9k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  29.9k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|  4.84k|            let start_position = self.input.position;
 1370|  19.3k|            while let Some(c) = self.input.next() {
 1371|  19.3k|                self.output.push(c);
 1372|  19.3k|                if c == ']' {
 1373|  4.84k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|  4.84k|                    if !UNCHECKED {
 1375|  4.84k|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|  4.84k|                        }
 1378|      0|                    }
 1379|       |
 1380|  4.84k|                    let c = self.input.next();
 1381|  4.84k|                    return match c {
 1382|       |                        Some(':') => {
 1383|    928|                            self.output.push(':');
 1384|    928|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|  2.35k|                            self.output_positions.authority_end = self.output.len();
 1388|  2.35k|                            self.parse_path_start(c)
 1389|       |                        }
 1390|  1.55k|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  14.5k|                }
 1393|       |            }
 1394|      0|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|   200k|            loop {
 1398|   200k|                let c = self.input.next();
 1399|   200k|                match c {
 1400|       |                    Some(':') => {
 1401|  6.20k|                        self.output.push(':');
 1402|  6.20k|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|  18.5k|                        self.output_positions.authority_end = self.output.len();
 1406|  18.5k|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|   176k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  29.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs2NsVQwDzFGg_5oxrdf:
 1457|  18.9k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  77.4k|        loop {
 1459|  77.4k|            let c = self.input.next();
 1460|  77.4k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  20.5k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  20.5k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  20.5k|                    } else if c == Some('/') {
 1470|  2.33k|                        self.output.push('/');
 1471|  18.2k|                    }
 1472|       |
 1473|  20.5k|                    if c == Some('?') {
 1474|  1.67k|                        self.output_positions.path_end = self.output.len();
 1475|  1.67k|                        self.output.push('?');
 1476|  1.67k|                        return self.parse_query();
 1477|  18.8k|                    } else if c == Some('#') {
 1478|    493|                        self.output_positions.path_end = self.output.len();
 1479|    493|                        self.output_positions.query_end = self.output.len();
 1480|    493|                        self.output.push('#');
 1481|    493|                        return self.parse_fragment();
 1482|  18.3k|                    } else if c.is_none() {
 1483|  16.0k|                        self.output_positions.path_end = self.output.len();
 1484|  16.0k|                        self.output_positions.query_end = self.output.len();
 1485|  16.0k|                        return Ok(());
 1486|  2.33k|                    }
 1487|       |                }
 1488|  56.9k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  18.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs2NsVQwDzFGg_5oxrdf:
 1414|  7.13k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  9.20k|        loop {
 1416|  9.20k|            let c = self.input.next();
 1417|  6.81k|            match c {
 1418|  6.81k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|  5.69k|                    self.output_positions.authority_end = self.output.len();
 1421|  5.69k|                    return self.parse_path_start(c);
 1422|       |                }
 1423|  1.43k|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|  7.13k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs2NsVQwDzFGg_5oxrdf:
 1547|  4.12k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  4.12k|        let c1 = self.input.next();
 1549|  4.12k|        let c2 = self.input.next();
 1550|  4.12k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  2.02k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.77k|            self.output.push('%');
 1554|  1.77k|            self.output.push(c1.unwrap());
 1555|  1.77k|            self.output.push(c2.unwrap());
 1556|  1.77k|            Ok(())
 1557|       |        } else {
 1558|  2.35k|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|  2.35k|                Some('%'),
 1560|  2.35k|                c1,
 1561|  2.35k|                c2,
 1562|  2.35k|            ]))
 1563|       |        }
 1564|  4.12k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs2NsVQwDzFGg_5oxrdf:
 1493|  6.01k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  40.7k|        while let Some(c) = self.input.next() {
 1495|  36.3k|            if c == '#' {
 1496|    400|                self.output_positions.query_end = self.output.len();
 1497|    400|                self.output.push('#');
 1498|    400|                return self.parse_fragment();
 1499|       |            } else {
 1500|  35.9k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|  4.41k|        self.output_positions.query_end = self.output.len();
 1504|  4.41k|        Ok(())
 1505|  6.01k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs2NsVQwDzFGg_5oxrdf:
 1220|  35.7k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|   179k|        loop {
 1222|   179k|            let c = self.input.next();
 1223|   179k|            match c {
 1224|   179k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|   143k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  35.7k|                    self.output.push(':');
 1229|  35.7k|                    self.output_positions.scheme_end = self.output.len();
 1230|  35.7k|                    self.input_scheme_end = self.input.position;
 1231|  35.7k|                    return if self.input.starts_with('/') {
 1232|  31.4k|                        self.input.next();
 1233|  31.4k|                        self.output.push('/');
 1234|  31.4k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  4.30k|                        self.output_positions.authority_end = self.output.len();
 1237|  4.30k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|      0|                    self.input = ParserInput {
 1242|      0|                        value: self.iri.chars(),
 1243|      0|                        position: 0,
 1244|      0|                    }; // reset
 1245|      0|                    self.output.clear();
 1246|      0|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  35.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs2NsVQwDzFGg_5oxrdf:
 1507|  3.23k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  23.1k|        while let Some(c) = self.input.next() {
 1509|  20.5k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|  2.62k|        Ok(())
 1512|  3.23k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs2NsVQwDzFGg_5oxrdf:
 1342|  30.4k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|   216k|        loop {
 1345|   216k|            let c = self.input.next();
 1346|   216k|            match c {
 1347|       |                Some('@') => {
 1348|  1.32k|                    self.output.push('@');
 1349|  1.32k|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  28.6k|                    self.input = ParserInput {
 1353|  28.6k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  28.6k|                        position: self.input_scheme_end + 2,
 1355|  28.6k|                    };
 1356|  28.6k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  28.6k|                    return self.parse_host();
 1358|       |                }
 1359|   186k|                Some(c) => {
 1360|   186k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  30.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs2NsVQwDzFGg_5oxrdf:
 1428|  26.5k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  26.5k|        match c {
 1430|       |            None => {
 1431|  6.23k|                self.output_positions.path_end = self.output.len();
 1432|  6.23k|                self.output_positions.query_end = self.output.len();
 1433|  6.23k|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|  4.34k|                self.output_positions.path_end = self.output.len();
 1437|  4.34k|                self.output.push('?');
 1438|  4.34k|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|  2.34k|                self.output_positions.path_end = self.output.len();
 1442|  2.34k|                self.output_positions.query_end = self.output.len();
 1443|  2.34k|                self.output.push('#');
 1444|  2.34k|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|  13.6k|                self.output.push('/');
 1448|  13.6k|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  26.5k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs2NsVQwDzFGg_5oxrdf:
 1212|  35.7k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  35.7k|        match self.input.front() {
 1214|      0|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  35.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|      0|            _ => self.parse_relative(),
 1217|       |        }
 1218|  35.7k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs2NsVQwDzFGg_5oxrdf:
 1252|  31.4k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  31.4k|        if self.input.starts_with('/') {
 1254|  30.4k|            self.input.next();
 1255|  30.4k|            self.output.push('/');
 1256|  30.4k|            self.parse_authority()
 1257|       |        } else {
 1258|  1.01k|            self.output_positions.authority_end = self.output.len() - 1;
 1259|  1.01k|            self.parse_path()
 1260|       |        }
 1261|  31.4k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs2NsVQwDzFGg_5oxrdf:
 1523|   440k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|   440k|        if UNCHECKED || is_url_code_point(c) {
 1525|   437k|            self.output.push(c);
 1526|   437k|            Ok(())
 1527|  3.49k|        } else if c == '%' {
 1528|  2.53k|            self.read_echar()
 1529|       |        } else {
 1530|    961|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|   440k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs2NsVQwDzFGg_5oxrdf:
 1535|  35.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  35.9k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  34.1k|            self.output.push(c);
 1538|  34.1k|            Ok(())
 1539|  1.77k|        } else if c == '%' {
 1540|  1.59k|            self.read_echar()
 1541|       |        } else {
 1542|    179|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  35.9k|    }
_RNvMs11_CslEbQcIb7A5U_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs2NsVQwDzFGg_5oxrdf:
 1187|  35.7k|    fn parse(
 1188|  35.7k|        iri: &'a str,
 1189|  35.7k|        base: Option<IriRef<&'a str>>,
 1190|  35.7k|        output: &'a mut O,
 1191|  35.7k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  35.7k|        let mut parser = Self {
 1193|  35.7k|            iri,
 1194|  35.7k|            base,
 1195|  35.7k|            input: ParserInput {
 1196|  35.7k|                value: iri.chars(),
 1197|  35.7k|                position: 0,
 1198|  35.7k|            },
 1199|  35.7k|            output,
 1200|  35.7k|            output_positions: IriElementsPositions {
 1201|  35.7k|                scheme_end: 0,
 1202|  35.7k|                authority_end: 0,
 1203|  35.7k|                path_end: 0,
 1204|  35.7k|                query_end: 0,
 1205|  35.7k|            },
 1206|  35.7k|            input_scheme_end: 0,
 1207|  35.7k|        };
 1208|  35.7k|        parser.parse_scheme_start()?;
 1209|  29.3k|        Ok(parser.output_positions)
 1210|  35.7k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE10into_innerCs2NsVQwDzFGg_5oxrdf:
  678|  53.3k|    pub fn into_inner(self) -> T {
  679|  53.3k|        self.0.into_inner()
  680|  53.3k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringE5parseCs2NsVQwDzFGg_5oxrdf:
  562|  9.59k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  9.59k|        IriRef::parse(iri)?.try_into()
  564|  9.59k|    }
_RNvMsp_CslEbQcIb7A5U_5oxiriINtB5_3IriReE5parseCs2NsVQwDzFGg_5oxrdf:
  562|  26.2k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  26.2k|        IriRef::parse(iri)?.try_into()
  564|  26.2k|    }
_RNvXsV_CslEbQcIb7A5U_5oxiriINtB5_3IriNtNtCs80BIJ2NAVqC_5alloc6string6StringEINtNtCs433v4DNuM1R_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2NsVQwDzFGg_5oxrdf:
  981|  24.9k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  24.9k|        if iri.is_absolute() {
  983|  24.9k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  24.9k|    }
_RNvXsV_CslEbQcIb7A5U_5oxiriINtB5_3IriReEINtNtCs433v4DNuM1R_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2NsVQwDzFGg_5oxrdf:
  981|  19.7k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  19.7k|        if iri.is_absolute() {
  983|  19.7k|            Ok(Self(iri))
  984|       |        } else {
  985|      0|            Err(IriParseError {
  986|      0|                kind: IriParseErrorKind::NoScheme,
  987|      0|            })
  988|       |        }
  989|  19.7k|    }
_RNvCslEbQcIb7A5U_5oxiri17is_url_code_pointCs2NsVQwDzFGg_5oxrdf:
 1573|   476k|fn is_url_code_point(c: char) -> bool {
 1574|   476k|    matches!(c,
 1575|   319k|        'a'..='z'
 1576|  29.3k|        | 'A'..='Z'
 1577|   100k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  18.0k|        | '\u{A0}'..='\u{D7FF}'
 1598|  4.27k|        | '\u{F900}'..='\u{FDCF}'
 1599|  4.27k|        | '\u{FDF0}'..='\u{FFEF}'
 1600|  4.27k|        | '\u{10000}'..='\u{1FFFD}'
 1601|  4.27k|        | '\u{20000}'..='\u{2FFFD}'
 1602|  4.27k|        | '\u{30000}'..='\u{3FFFD}'
 1603|  4.27k|        | '\u{40000}'..='\u{4FFFD}'
 1604|  4.27k|        | '\u{50000}'..='\u{5FFFD}'
 1605|  4.27k|        | '\u{60000}'..='\u{6FFFD}'
 1606|  4.27k|        | '\u{70000}'..='\u{7FFFD}'
 1607|  4.27k|        | '\u{80000}'..='\u{8FFFD}'
 1608|  4.27k|        | '\u{90000}'..='\u{9FFFD}'
 1609|  4.26k|        | '\u{A0000}'..='\u{AFFFD}'
 1610|  4.26k|        | '\u{B0000}'..='\u{BFFFD}'
 1611|  4.26k|        | '\u{C0000}'..='\u{CFFFD}'
 1612|  4.26k|        | '\u{D0000}'..='\u{DFFFD}'
 1613|      6|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|   476k|}
_RNvCslEbQcIb7A5U_5oxiri23is_url_query_code_pointCs2NsVQwDzFGg_5oxrdf:
 1618|  35.9k|fn is_url_query_code_point(c: char) -> bool {
 1619|  35.9k|    is_url_code_point(c)
 1620|  2.05k|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  35.9k|}
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput11starts_withCs2NsVQwDzFGg_5oxrdf:
 1169|  97.2k|    fn starts_with(&self, c: char) -> bool {
 1170|  97.2k|        self.value.as_str().starts_with(c)
 1171|  97.2k|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput4nextCs2NsVQwDzFGg_5oxrdf:
 1154|   841k|    fn next(&mut self) -> Option<char> {
 1155|   841k|        if let Some(head) = self.value.next() {
 1156|   805k|            self.position += head.len_utf8();
 1157|   805k|            Some(head)
 1158|       |        } else {
 1159|  36.3k|            None
 1160|       |        }
 1161|   841k|    }
_RNvMs10_CslEbQcIb7A5U_5oxiriNtB6_11ParserInput5frontCs2NsVQwDzFGg_5oxrdf:
 1164|  35.7k|    fn front(&self) -> Option<char> {
 1165|  35.7k|        self.value.clone().next()
 1166|  35.7k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2NsVQwDzFGg_5oxrdf:
 1105|   128k|    fn len(&self) -> usize {
 1106|   128k|        self.len
 1107|   128k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2NsVQwDzFGg_5oxrdf:
 1085|   772k|    fn push(&mut self, c: char) {
 1086|   772k|        self.len += c.len_utf8();
 1087|   772k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2NsVQwDzFGg_5oxrdf:
 1110|  41.0k|    fn as_str(&self) -> &str {
 1111|  41.0k|        ""
 1112|  41.0k|    }
_RNvXsY_CslEbQcIb7A5U_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2NsVQwDzFGg_5oxrdf:
 1100|  28.6k|    fn truncate(&mut self, new_len: usize) {
 1101|  28.6k|        self.len = new_len;
 1102|  28.6k|    }
_RNvXsW_CslEbQcIb7A5U_5oxiriNtB5_13IriParseErrorNtNtCs433v4DNuM1R_4core3fmt7Display3fmt:
 1016|  27.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|  27.0k|        match &self.kind {
 1018|    324|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|  4.55k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|  4.55k|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|  2.67k|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|  3.44k|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|  10.8k|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|  10.8k|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|  5.25k|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|  5.25k|                f,
 1029|  5.25k|                "Invalid IRI percent encoding '{}'",
 1030|  5.25k|                cs.iter().flatten().cloned().collect::<String>()
 1031|  5.25k|            ),
 1032|       |        }
 1033|  27.0k|    }

_RNvMNtCslBKszH9vZoh_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs55XwGWYaZj9_11rand_chacha:
   13|  4.36M|    pub fn new(xs: [W; 2]) -> Self {
   14|  4.36M|        x2(xs, PhantomData)
   15|  4.36M|    }
_RNvXsG_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs433v4DNuM1R_4core3ops3bit6BitXor6bitxorCs55XwGWYaZj9_11rand_chacha:
   22|  1.53M|            fn $fn(self, rhs: Self) -> Self::Output {
   23|  1.53M|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|  1.53M|            }
_RNvXsM_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs433v4DNuM1R_4core3ops5arith9AddAssign10add_assignCs55XwGWYaZj9_11rand_chacha:
   32|  1.53M|            fn $fn_assign(&mut self, rhs: Self) {
   33|  1.53M|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|  1.53M|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|  1.53M|            }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs55XwGWYaZj9_11rand_chacha:
   42|   382k|        fn $fn(self) -> Self {
   43|   382k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   382k|        }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs55XwGWYaZj9_11rand_chacha:
   42|   382k|        fn $fn(self) -> Self {
   43|   382k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   382k|        }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs55XwGWYaZj9_11rand_chacha:
   42|   382k|        fn $fn(self) -> Self {
   43|   382k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   382k|        }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs55XwGWYaZj9_11rand_chacha:
   42|   382k|        fn $fn(self) -> Self {
   43|   382k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|   382k|        }
_RNvXsg_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs55XwGWYaZj9_11rand_chacha:
  208|   382k|    fn shuffle_lane_words1230(self) -> Self {
  209|   382k|        Self::new([
  210|   382k|            self.0[0].shuffle_lane_words1230(),
  211|   382k|            self.0[1].shuffle_lane_words1230(),
  212|   382k|        ])
  213|   382k|    }
_RNvXsg_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs55XwGWYaZj9_11rand_chacha:
  201|   382k|    fn shuffle_lane_words2301(self) -> Self {
  202|   382k|        Self::new([
  203|   382k|            self.0[0].shuffle_lane_words2301(),
  204|   382k|            self.0[1].shuffle_lane_words2301(),
  205|   382k|        ])
  206|   382k|    }
_RNvXsg_NtCslBKszH9vZoh_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs55XwGWYaZj9_11rand_chacha:
  215|   382k|    fn shuffle_lane_words3012(self) -> Self {
  216|   382k|        Self::new([
  217|   382k|            self.0[0].shuffle_lane_words3012(),
  218|   382k|            self.0[1].shuffle_lane_words3012(),
  219|   382k|        ])
  220|   382k|    }

_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs55XwGWYaZj9_11rand_chacha:
  259|    250|    fn read_le<V>(self, input: &[u8]) -> V
  260|    250|    where
  261|    250|        V: StoreBytes,
  262|    250|    {
  263|    250|        unsafe { V::unsafe_read_le(input) }
  264|    250|    }
_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs55XwGWYaZj9_11rand_chacha:
  251|  31.8k|    fn vec<V, A>(self, a: A) -> V
  252|  31.8k|    where
  253|  31.8k|        V: MultiLane<A>,
  254|  31.8k|    {
  255|  31.8k|        V::from_lanes(a)
  256|  31.8k|    }
_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs55XwGWYaZj9_11rand_chacha:
  246|   286k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|   286k|        unsafe { V::unpack(s) }
  248|   286k|    }
_RINvYINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs55XwGWYaZj9_11rand_chacha:
  246|  31.8k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  31.8k|        unsafe { V::unpack(s) }
  248|  31.8k|    }

_RNvXNtCslBKszH9vZoh_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs55XwGWYaZj9_11rand_chacha:
   64|    125|    unsafe fn instance() -> Self {
   65|    125|        SseMachine(PhantomData)
   66|    125|    }
_RNvXs_NtCslBKszH9vZoh_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs55XwGWYaZj9_11rand_chacha:
   92|  31.8k|    unsafe fn instance() -> Self {
   93|  31.8k|        Avx2Machine(PhantomData)
   94|  31.8k|    }
_RNvNtCs55XwGWYaZj9_11rand_chacha4guts11refill_wide:
  250|  31.8k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  31.8k|            #[inline(always)]
  252|  31.8k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  31.8k|            use std::arch::x86_64::*;
  254|  31.8k|            #[target_feature(enable = "avx2")]
  255|  31.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  31.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  31.8k|                _mm256_zeroupper();
  258|  31.8k|                ret
  259|  31.8k|            }
  260|  31.8k|            #[target_feature(enable = "avx")]
  261|  31.8k|            #[target_feature(enable = "sse4.1")]
  262|  31.8k|            #[target_feature(enable = "ssse3")]
  263|  31.8k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  31.8k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  31.8k|                _mm256_zeroupper();
  266|  31.8k|                ret
  267|  31.8k|            }
  268|  31.8k|            #[target_feature(enable = "sse4.1")]
  269|  31.8k|            #[target_feature(enable = "ssse3")]
  270|  31.8k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  31.8k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  31.8k|            }
  273|  31.8k|            #[target_feature(enable = "ssse3")]
  274|  31.8k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  31.8k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  31.8k|            }
  277|  31.8k|            #[target_feature(enable = "sse2")]
  278|  31.8k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  31.8k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  31.8k|            }
  281|  31.8k|            unsafe {
  282|  31.8k|                if is_x86_feature_detected!("avx2") {
  283|  31.8k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|       |        }
_RNvNvNtCs55XwGWYaZj9_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  31.8k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  31.8k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  31.8k|                _mm256_zeroupper();
  258|  31.8k|                ret
  259|  31.8k|            }
_RNvNtCs55XwGWYaZj9_11rand_chacha4guts11init_chacha:
  333|    125|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|    125|            #[inline(always)]
  335|    125|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|    125|            use std::arch::x86_64::*;
  337|    125|            #[target_feature(enable = "avx")]
  338|    125|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    125|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    125|            }
  341|    125|            #[target_feature(enable = "sse2")]
  342|    125|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|    125|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|    125|            }
  345|    125|            unsafe {
  346|    125|                if is_x86_feature_detected!("avx") {
  347|    125|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|       |        }
_RNvNvNtCs55XwGWYaZj9_11rand_chacha4guts11init_chacha8impl_avx:
  338|    125|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|    125|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|    125|            }
_RNvXs2_NtCslBKszH9vZoh_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs433v4DNuM1R_4core7convert4FromAmj4_E4from:
  130|    125|    fn from(u32x4: [u32; 4]) -> Self {
  131|    125|        vec128_storage { u32x4 }
  132|    125|    }

_RNvMNtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs55XwGWYaZj9_11rand_chacha:
 1394|  11.7M|        fn new(x: __m256i) -> Self {
 1395|  11.7M|            Self { x, ni: PhantomData }
 1396|  11.7M|        }
_RNvMsZ_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs55XwGWYaZj9_11rand_chacha:
   64|  1.78M|            fn new(x: __m128i) -> Self {
   65|  1.78M|                $vec {
   66|  1.78M|                    x,
   67|  1.78M|                    s3: PhantomData,
   68|  1.78M|                    s4: PhantomData,
   69|  1.78M|                    ni: PhantomData,
   70|  1.78M|                }
   71|  1.78M|            }
_RNvXs0_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs55XwGWYaZj9_11rand_chacha:
 1402|  63.7k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  63.7k|            Self::new(p.avx)
 1404|  63.7k|        }
_RNvXs10_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs55XwGWYaZj9_11rand_chacha:
   79|    250|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|    250|                assert_eq!(input.len(), 16);
   81|    250|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|    250|            }
_RNvXs10_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs55XwGWYaZj9_11rand_chacha:
   89|   510k|            fn write_le(self, out: &mut [u8]) {
   90|   510k|                assert_eq!(out.len(), 16);
   91|   510k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|   510k|            }
_RNvXs1R_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs433v4DNuM1R_4core3ops5arith3Add3addCs55XwGWYaZj9_11rand_chacha:
   18|   510k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|   510k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|   510k|            }
_RNvXs2_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs55XwGWYaZj9_11rand_chacha:
 1439|   255k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|   255k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|   255k|        }
_RNvXs2_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs55XwGWYaZj9_11rand_chacha:
 1430|   255k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|   255k|            unsafe {
 1432|   255k|                [
 1433|   255k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|   255k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|   255k|                ]
 1436|   255k|            }
 1437|   255k|        }
_RNvXs6_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs55XwGWYaZj9_11rand_chacha:
  331|  31.8k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  31.8k|        unsafe {
  333|  31.8k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  31.8k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  31.8k|            Self::new(x)
  336|  31.8k|        }
  337|  31.8k|    }
_RNvXs6_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs55XwGWYaZj9_11rand_chacha:
  323|   127k|    fn to_lanes(self) -> [u32; 4] {
  324|   127k|        unsafe {
  325|   127k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|   127k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|   127k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|   127k|        }
  329|   127k|    }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs55XwGWYaZj9_11rand_chacha:
 1470|   765k|            fn $name(self) -> Self {
 1471|   765k|                Self::new(unsafe {
 1472|   765k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   765k|                })
 1474|   765k|            }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs55XwGWYaZj9_11rand_chacha:
 1480|   765k|            fn $name(self) -> Self {
 1481|   765k|                Self::new(unsafe {
 1482|   765k|                    _mm256_or_si256(
 1483|   765k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   765k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   765k|                    )
 1486|   765k|                })
 1487|   765k|            }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs55XwGWYaZj9_11rand_chacha:
 1470|   765k|            fn $name(self) -> Self {
 1471|   765k|                Self::new(unsafe {
 1472|   765k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   765k|                })
 1474|   765k|            }
_RNvXs6_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs55XwGWYaZj9_11rand_chacha:
 1480|   765k|            fn $name(self) -> Self {
 1481|   765k|                Self::new(unsafe {
 1482|   765k|                    _mm256_or_si256(
 1483|   765k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   765k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   765k|                    )
 1486|   765k|                })
 1487|   765k|            }
_RNvXsX_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs55XwGWYaZj9_11rand_chacha:
   52|   286k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|   286k|                Self::new(x.sse2)
   54|   286k|            }
_RNvXsc_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs55XwGWYaZj9_11rand_chacha:
 1582|   765k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   765k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   765k|        }
_RNvXsc_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs55XwGWYaZj9_11rand_chacha:
 1586|   765k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   765k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   765k|        }
_RNvXsc_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs55XwGWYaZj9_11rand_chacha:
 1590|   765k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   765k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   765k|        }
_RNvXse_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs55XwGWYaZj9_11rand_chacha:
 1602|  31.8k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  31.8k|            Self::new([
 1604|  31.8k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  31.8k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  31.8k|            ])
 1607|  31.8k|        }
_RNvXsf_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs55XwGWYaZj9_11rand_chacha:
 1617|   127k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|   127k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|   127k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|   127k|            Self::new([ab, cd])
 1621|   127k|        }
_RNvXsf_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs55XwGWYaZj9_11rand_chacha:
 1611|   127k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|   127k|            let [a, b] = self.0[0].to_lanes();
 1613|   127k|            let [c, d] = self.0[1].to_lanes();
 1614|   127k|            [a, b, c, d]
 1615|   127k|        }
_RNvXsl_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs55XwGWYaZj9_11rand_chacha:
  523|   446k|    fn insert(self, v: u32, i: u32) -> Self {
  524|   446k|        Self::new(unsafe {
  525|   446k|            match i {
  526|   223k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|   223k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|   446k|    }
_RNvXsl_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs55XwGWYaZj9_11rand_chacha:
  519|   127k|    fn extract(self, i: u32) -> u32 {
  520|   127k|        self.to_lanes()[i as usize]
  521|   127k|    }
_RNvXsq_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs433v4DNuM1R_4core3ops5arith9AddAssign10add_assignCs55XwGWYaZj9_11rand_chacha:
 1527|  3.06M|                fn $assign_fn(&mut self, rhs: Self) {
 1528|  3.06M|                    *self = self.$bin_fn(rhs);
 1529|  3.06M|                }
_RNvXsr_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs433v4DNuM1R_4core3ops3bit6BitXor6bitxorCs55XwGWYaZj9_11rand_chacha:
 1543|  3.06M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.06M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.06M|                }
_RNvXsv_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs433v4DNuM1R_4core3ops5arith3Add3addCs55XwGWYaZj9_11rand_chacha:
 1543|  3.06M|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|  3.06M|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|  3.06M|                }
_RNvXsY_NtNtCslBKszH9vZoh_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs433v4DNuM1R_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs55XwGWYaZj9_11rand_chacha:
   58|  32.1k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  32.1k|                vec128_storage { sse2: x.x }
   60|  32.1k|            }
_RNvXsj_NtNtNtCslBKszH9vZoh_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs433v4DNuM1R_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs55XwGWYaZj9_11rand_chacha:
 1683|  31.8k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  31.8k|            Self {
 1685|  31.8k|                avx: [
 1686|  31.8k|                    vec256_storage { avx: x.0[0].x },
 1687|  31.8k|                    vec256_storage { avx: x.0[1].x },
 1688|  31.8k|                ],
 1689|  31.8k|            }
 1690|  31.8k|        }

_RINvXs2_NtNtCsbnstcjMfjGb_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECseXCYVcIQZ7o_5oxttl:
   51|   510k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|   510k|        // Use LE; we explicitly generate one value before the next.
   53|   510k|        let x = u128::from(rng.next_u64());
   54|   510k|        let y = u128::from(rng.next_u64());
   55|   510k|        (y << 64) | x
   56|   510k|    }

_RINvCsbnstcjMfjGb_4rand6randomoECseXCYVcIQZ7o_5oxttl:
  183|   510k|pub fn random<T>() -> T
  184|   510k|where Standard: Distribution<T> {
  185|   510k|    thread_rng().gen()
  186|   510k|}

_RINvYNtNtNtCsbnstcjMfjGb_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECseXCYVcIQZ7o_5oxttl:
   93|   510k|    fn gen<T>(&mut self) -> T
   94|   510k|    where Standard: Distribution<T> {
   95|   510k|        Standard.sample(self)
   96|   510k|    }

_RNvXs_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngENtB24_7RngCore8next_u64CseXCYVcIQZ7o_5oxttl:
  124|  1.02M|    fn next_u64(&mut self) -> u64 {
  125|  1.02M|        self.0.next_u64()
  126|  1.02M|    }
_RNvMNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }
_RNvXs2_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  31.8k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  31.8k|        let global_fork_counter = fork::get_fork_counter();
  175|  31.8k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|    124|            return self.reseed_and_generate(results, global_fork_counter);
  180|  31.7k|        }
  181|  31.7k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  31.7k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  31.7k|        self.inner.generate(results);
  184|  31.8k|    }
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE6reseedBb_:
  219|    124|    fn reseed(&mut self) -> Result<(), Error> {
  220|    124|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|    124|        })
  224|    124|    }
_RNCNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE6reseed0Bd_:
  220|    124|        R::from_rng(&mut self.reseeder).map(|result| {
  221|    124|            self.bytes_until_reseed = self.threshold;
  222|    124|            self.inner = result
  223|    124|        })
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE9is_forkedBb_:
  226|  31.8k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  31.8k|        // In theory, on 32-bit platforms, it is possible for
  228|  31.8k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  31.8k|        //
  230|  31.8k|        // This check will detect a fork in the normal case where
  231|  31.8k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  31.8k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  31.8k|        //
  234|  31.8k|        // It will still fail to detect a fork if there have been more than
  235|  31.8k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  31.8k|        // enough.
  237|  31.8k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  31.8k|    }
_RNvMs3_NtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|    124|    fn reseed_and_generate(
  242|    124|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|    124|    ) {
  244|    124|        #![allow(clippy::if_same_then_else)] // false positive
  245|    124|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|    124|        } else {
  248|    124|            trace!("Reseeding RNG (periodic reseed)");
  249|    124|        }
  250|       |
  251|    124|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|    124|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|    124|        }
  257|    124|        self.fork_counter = global_fork_counter;
  258|    124|
  259|    124|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|    124|        self.inner.generate(results);
  261|    124|    }
_RNvNtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  31.8k|    pub fn get_fork_counter() -> usize {
  308|  31.8k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  31.8k|    }
_RNvNtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvNtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });

_RNvXs_NtNtCsbnstcjMfjGb_4rand4rngs6threadNtB4_9ThreadRngNtCslvYPMEMaoR_9rand_core7RngCore8next_u64:
  109|  1.02M|    fn next_u64(&mut self) -> u64 {
  110|  1.02M|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|  1.02M|        // creates another mutable reference
  112|  1.02M|        let rng = unsafe { &mut *self.rng.get() };
  113|  1.02M|        rng.next_u64()
  114|  1.02M|    }
_RNvNtNtCsbnstcjMfjGb_4rand4rngs6thread10thread_rng:
   88|   510k|pub fn thread_rng() -> ThreadRng {
   89|   510k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|   510k|    ThreadRng { rng }
   91|   510k|}
_RNCNvNtNtCsbnstcjMfjGb_4rand4rngs6thread10thread_rng0B7_:
   89|   510k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());

_RNvXsl_NtCs55XwGWYaZj9_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCslvYPMEMaoR_9rand_core5block12BlockRngCore8generateCsbnstcjMfjGb_4rand:
   89|  31.8k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  31.8k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  31.8k|                self.state.refill4($rounds, unsafe {
   92|  31.8k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  31.8k|                });
   94|  2.04M|                for x in r.as_mut() {
   95|  2.04M|                    *x = x.to_le();
   96|  2.04M|                }
   97|  31.8k|            }
_RNvXsm_NtCs55XwGWYaZj9_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCslvYPMEMaoR_9rand_core11SeedableRng9from_seedCsbnstcjMfjGb_4rand:
  103|    125|            fn from_seed(seed: Self::Seed) -> Self {
  104|    125|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|    125|            }
_RNvXs_NtCs55XwGWYaZj9_11rand_chacha6chachaINtB4_7Array64mEINtNtCs433v4DNuM1R_4core7convert5AsRefSmE6as_refB6_:
   46|  2.10M|    fn as_ref(&self) -> &[T] {
   47|  2.10M|        &self.0
   48|  2.10M|    }
_RNvXs0_NtCs55XwGWYaZj9_11rand_chacha6chachaINtB5_7Array64mEINtNtCs433v4DNuM1R_4core7convert5AsMutSmE6as_mutB7_:
   51|  31.8k|    fn as_mut(&mut self) -> &mut [T] {
   52|  31.8k|        &mut self.0
   53|  31.8k|    }
_RNvXNtCs55XwGWYaZj9_11rand_chacha6chachaINtB2_7Array64mENtNtCs433v4DNuM1R_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs55XwGWYaZj9_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|    125|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|    125|        init_chacha(key, nonce)
   74|    125|    }
_RNvMNtCs55XwGWYaZj9_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  31.8k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  31.8k|        refill_wide(self, drounds, out)
   86|  31.8k|    }
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts5roundINtNtCslBKszH9vZoh_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|   382k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|   382k|    x.a += x.b;
   45|   382k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|   382k|    x.c += x.d;
   47|   382k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|   382k|    x.a += x.b;
   49|   382k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|   382k|    x.c += x.d;
   51|   382k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|   382k|    x
   53|   382k|}
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts11diagonalizeINtNtCslBKszH9vZoh_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|   191k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|   191k|    x.b = x.b.shuffle_lane_words3012();
   58|   191k|    x.c = x.c.shuffle_lane_words2301();
   59|   191k|    x.d = x.d.shuffle_lane_words1230();
   60|   191k|    x
   61|   191k|}
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts13undiagonalizeINtNtCslBKszH9vZoh_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|   191k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|   191k|    x.b = x.b.shuffle_lane_words1230();
   65|   191k|    x.c = x.c.shuffle_lane_words2301();
   66|   191k|    x.d = x.d.shuffle_lane_words3012();
   67|   191k|    x
   68|   191k|}
_RINvMNtCs55XwGWYaZj9_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  63.7k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  63.7k|        let d: M::u32x4 = m.unpack(self.d);
   79|  63.7k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  63.7k|    }
_RINvNtCs55XwGWYaZj9_11rand_chacha4guts16refill_wide_implINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  31.8k|fn refill_wide_impl<Mach: Machine>(
  117|  31.8k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  31.8k|) {
  119|  31.8k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  31.8k|    let mut pos = state.pos64(m);
  121|  31.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  31.8k|    pos = pos.wrapping_add(1);
  123|  31.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  31.8k|    pos = pos.wrapping_add(1);
  125|  31.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  31.8k|    pos = pos.wrapping_add(1);
  127|  31.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  31.8k|
  129|  31.8k|    let b = m.unpack(state.b);
  130|  31.8k|    let c = m.unpack(state.c);
  131|  31.8k|    let mut x = State {
  132|  31.8k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  31.8k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  31.8k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  31.8k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  31.8k|    };
  137|   191k|    for _ in 0..drounds {
  138|   191k|        x = round(x);
  139|   191k|        x = undiagonalize(round(diagonalize(x)));
  140|   191k|    }
  141|  31.8k|    let mut pos = state.pos64(m);
  142|  31.8k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  31.8k|    pos = pos.wrapping_add(1);
  144|  31.8k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  31.8k|    pos = pos.wrapping_add(1);
  146|  31.8k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  31.8k|    pos = pos.wrapping_add(1);
  148|  31.8k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  31.8k|    pos = pos.wrapping_add(1);
  150|  31.8k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  31.8k|
  152|  31.8k|    let (a, b, c, d) = (
  153|  31.8k|        x.a.to_lanes(),
  154|  31.8k|        x.b.to_lanes(),
  155|  31.8k|        x.c.to_lanes(),
  156|  31.8k|        x.d.to_lanes(),
  157|  31.8k|    );
  158|  31.8k|    let sb = m.unpack(state.b);
  159|  31.8k|    let sc = m.unpack(state.c);
  160|  31.8k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  31.8k|    state.d = d4.into();
  162|  31.8k|    let mut words = out.chunks_exact_mut(16);
  163|   127k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|   127k|        (a + k).write_le(words.next().unwrap());
  165|   127k|        (b + sb).write_le(words.next().unwrap());
  166|   127k|        (c + sc).write_le(words.next().unwrap());
  167|   127k|        (d + sd).write_le(words.next().unwrap());
  168|   127k|    }
  169|  31.8k|}
_RNvNtCs55XwGWYaZj9_11rand_chacha4guts10read_u32le:
  229|    250|fn read_u32le(xs: &[u8]) -> u32 {
  230|    250|    assert_eq!(xs.len(), 4);
  231|    250|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|    250|}
_RINvNvNtCs55XwGWYaZj9_11rand_chacha4guts11refill_wide7fn_implINtNtCslBKszH9vZoh_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  31.8k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  31.8k|        refill_wide_impl(m, state, drounds, out);
  174|  31.8k|    }
_RINvNvNtCs55XwGWYaZj9_11rand_chacha4guts11init_chacha7fn_implINtNtCslBKszH9vZoh_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|    125|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|    125|        let ctr_nonce = [
  237|       |            0,
  238|    125|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|    125|                0
  242|       |            },
  243|    125|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|    125|            read_u32le(&nonce[nonce.len() - 4..]),
  245|    125|        ];
  246|    125|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|    125|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|    125|        ChaCha {
  249|    125|            b: key0.into(),
  250|    125|            c: key1.into(),
  251|    125|            d: ctr_nonce.into(),
  252|    125|        }

_RNCNvXs0_NtCslvYPMEMaoR_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CseXCYVcIQZ7o_5oxttl:
  198|  1.02M|        let read_u64 = |results: &[u32], index| {
  199|  1.02M|            let data = &results[index..=index + 1];
  200|  1.02M|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|  1.02M|        };
_RNvXs0_NtCslvYPMEMaoR_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CseXCYVcIQZ7o_5oxttl:
  197|  1.02M|    fn next_u64(&mut self) -> u64 {
  198|  1.02M|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|  1.02M|        let len = self.results.as_ref().len();
  204|  1.02M|
  205|  1.02M|        let index = self.index;
  206|  1.02M|        if index < len - 1 {
  207|   988k|            self.index += 2;
  208|   988k|            // Read an u64 from the current index
  209|   988k|            read_u64(self.results.as_ref(), index)
  210|  31.8k|        } else if index >= len {
  211|  31.8k|            self.generate_and_set(2);
  212|  31.8k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|  1.02M|    }
_RNvMs_NtCslvYPMEMaoR_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBX_:
  174|  31.8k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  31.8k|        assert!(index < self.results.as_ref().len());
  176|  31.8k|        self.core.generate(&mut self.results);
  177|  31.8k|        self.index = index;
  178|  31.8k|    }
_RNvMs_NtCslvYPMEMaoR_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsbnstcjMfjGb_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBX_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtCslvYPMEMaoR_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsbnstcjMfjGb_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RINvYNtNtCs55XwGWYaZj9_11rand_chacha6chacha12ChaCha12CoreNtCslvYPMEMaoR_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsbnstcjMfjGb_4rand:
  390|    124|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|    124|        let mut seed = Self::Seed::default();
  392|    124|        rng.try_fill_bytes(seed.as_mut())?;
  393|    124|        Ok(Self::from_seed(seed))
  394|    124|    }
_RNvXs_CslvYPMEMaoR_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsbnstcjMfjGb_4rand:
  441|    124|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|    124|        (**self).try_fill_bytes(dest)
  443|    124|    }

_RNvXs_NtCslvYPMEMaoR_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|    125|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|    125|        getrandom(dest)?;
   69|    125|        Ok(())
   70|    125|    }

_RNvNvNtNtCsbnstcjMfjGb_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   82|      1|            fn __init() -> $t { $init }
_RNvNvNtNtCsbnstcjMfjGb_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   85|   510k|            unsafe fn __getit(
   86|   510k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   87|   510k|            ) -> $crate::option::Option<&'static $t> {
   88|   510k|                #[thread_local]
   89|   510k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   90|   510k|                    $crate::thread::local_impl::Key::<$t>::new();
   91|   510k|
   92|   510k|                unsafe {
   93|   510k|                    __KEY.get(move || {
   94|       |                        if let $crate::option::Option::Some(init) = init {
   95|       |                            if let $crate::option::Option::Some(value) = init.take() {
   96|       |                                return value;
   97|       |                            } else if $crate::cfg!(debug_assertions) {
   98|       |                                $crate::unreachable!("missing default value");
   99|       |                            }
  100|       |                        }
  101|       |                        __init()
  102|   510k|                    })
  103|   510k|                }
  104|   510k|            }
_RNCNvNvNtNtCsbnstcjMfjGb_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   93|      1|                    __KEY.get(move || {
   94|      1|                        if let $crate::option::Option::Some(init) = init {
   95|      0|                            if let $crate::option::Option::Some(value) = init.take() {
   96|      0|                                return value;
   97|      0|                            } else if $crate::cfg!(debug_assertions) {
   98|      0|                                $crate::unreachable!("missing default value");
   99|      0|                            }
  100|      1|                        }
  101|      1|                        __init()
  102|       |                    })

_RNCNvNvCs5jEkc0fApSJ_2n31__19___libfuzzer_sys_run0B5_:
   12|  5.17M|    for chunk in data.split(|c| *c == 0xFF) {

_RNvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB2_9BlankNode18new_from_unique_idCseXCYVcIQZ7o_5oxttl:
   62|    745|    pub fn new_from_unique_id(id: u128) -> Self {
   63|    745|        Self(BlankNodeContent::Anonymous {
   64|    745|            id,
   65|    745|            str: IdStr::new(id),
   66|    745|        })
   67|    745|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr3newCseXCYVcIQZ7o_5oxttl:
  255|   510k|    fn new(id: u128) -> Self {
  256|   510k|        let mut str = [0; 32];
  257|   510k|        write!(&mut str[..], "{id:x}").unwrap();
  258|   510k|        Self(str)
  259|   510k|    }
_RNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_5IdStr6as_strCseXCYVcIQZ7o_5oxttl:
  262|   510k|    fn as_str(&self) -> &str {
  263|   510k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  264|   510k|        str::from_utf8(&self.0[..len]).unwrap()
  265|   510k|    }
_RNvNtCs2NsVQwDzFGg_5oxrdf10blank_node13to_integer_idCseXCYVcIQZ7o_5oxttl:
  328|  6.44k|fn to_integer_id(id: &str) -> Option<u128> {
  329|  6.44k|    let digits = id.as_bytes();
  330|  6.44k|    let mut value: u128 = 0;
  331|  6.44k|    if let None | Some(b'0') = digits.first() {
  332|  4.99k|        return None; // No empty string or leading zeros
  333|  1.45k|    }
  334|  7.74k|    for digit in digits {
  335|  6.99k|        value = value.checked_mul(16)?.checked_add(
  336|  6.89k|            match *digit {
  337|  6.79k|                b'0'..=b'9' => digit - b'0',
  338|  5.67k|                b'a'..=b'f' => digit - b'a' + 10,
  339|    608|                _ => return None,
  340|       |            }
  341|  6.28k|            .into(),
  342|      0|        )?;
  343|       |    }
  344|    745|    Some(value)
  345|  6.44k|}
_RNvXs0_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs433v4DNuM1R_4core7default7Default7defaultCseXCYVcIQZ7o_5oxttl:
  109|   204k|    fn default() -> Self {
  110|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  111|   510k|        loop {
  112|   510k|            let id = random();
  113|   510k|            let str = IdStr::new(id);
  114|   510k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  115|   204k|                return Self(BlankNodeContent::Anonymous { id, str });
  116|   306k|            }
  117|       |        }
  118|   204k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB3_9BlankNode13new_uncheckedReECseXCYVcIQZ7o_5oxttl:
   49|  6.44k|    pub fn new_unchecked(id: impl Into<String>) -> Self {
   50|  6.44k|        let id = id.into();
   51|  6.44k|        if let Some(numerical_id) = to_integer_id(&id) {
   52|    745|            Self::new_from_unique_id(numerical_id)
   53|       |        } else {
   54|  5.70k|            Self(BlankNodeContent::Named(id))
   55|       |        }
   56|  6.44k|    }
_RNCNvMs7_NtCs2NsVQwDzFGg_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  263|  16.3M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCs80BIJ2NAVqC_5alloc6string6StringEB5_:
   49|  13.2k|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   50|  13.2k|        Self(LiteralContent::String(value.into()))
   51|  13.2k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCs80BIJ2NAVqC_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   55|  1.26k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  1.26k|        let value = value.into();
   57|  1.26k|        let datatype = datatype.into();
   58|  1.26k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  1.26k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  1.26k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   55|  16.3k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   56|  16.3k|        let value = value.into();
   57|  16.3k|        let datatype = datatype.into();
   58|  16.3k|        Self(if datatype == xsd::STRING {
   59|      0|            LiteralContent::String(value)
   60|       |        } else {
   61|  16.3k|            LiteralContent::TypedLiteral { value, datatype }
   62|       |        })
   63|  16.3k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCs80BIJ2NAVqC_5alloc6string6StringB1n_EB5_:
   87|    928|    pub fn new_language_tagged_literal_unchecked(
   88|    928|        value: impl Into<String>,
   89|    928|        language: impl Into<String>,
   90|    928|    ) -> Self {
   91|    928|        Self(LiteralContent::LanguageTaggedString {
   92|    928|            value: value.into(),
   93|    928|            language: language.into(),
   94|    928|        })
   95|    928|    }

_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCseXCYVcIQZ7o_5oxttl:
  138|  28.6k|    pub fn into_owned(self) -> NamedNode {
  139|  28.6k|        NamedNode::new_unchecked(self.iri)
  140|  28.6k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs80BIJ2NAVqC_5alloc6string6StringEB5_:
   39|  30.1k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  30.1k|        Self { iri: iri.into() }
   41|  30.1k|    }
_RINvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  46.6k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  46.6k|        Self { iri: iri.into() }
   41|  46.6k|    }
_RNvMNtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  17.5k|    pub fn as_str(&self) -> &str {
   45|  17.5k|        self.iri.as_str()
   46|  17.5k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  17.5k|    pub const fn as_str(self) -> &'a str {
  134|  17.5k|        self.iri
  135|  17.5k|    }
_RNvMs4_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  16.3k|    pub fn into_owned(self) -> NamedNode {
  139|  16.3k|        NamedNode::new_unchecked(self.iri)
  140|  16.3k|    }
_RNvXs6_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs433v4DNuM1R_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  16.3k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  16.3k|        node.into_owned()
  154|  16.3k|    }
_RNvXs9_NtCs2NsVQwDzFGg_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs433v4DNuM1R_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  17.5k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  17.5k|        self.as_str() == other.as_str()
  175|  17.5k|    }

_RNvXs1c_NtCs2NsVQwDzFGg_5oxrdf6tripleNtB6_9GraphNameINtNtCs433v4DNuM1R_4core7convert4FromNtNtB8_10blank_node9BlankNodeE4fromCseXCYVcIQZ7o_5oxttl:
  915|  6.43k|    fn from(node: BlankNode) -> Self {
  916|  6.43k|        Self::BlankNode(node)
  917|  6.43k|    }

_RINvMNtCs2NsVQwDzFGg_5oxrdf8variableNtB3_8Variable13new_uncheckedINtNtCs80BIJ2NAVqC_5alloc6borrow3CoweEECseXCYVcIQZ7o_5oxttl:
   36|  5.84k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   37|  5.84k|        Self { name: name.into() }
   38|  5.84k|    }

_RNvXNtCseXCYVcIQZ7o_5oxttl5lexerNtB2_7N3LexerNtNtNtB4_7toolkit5lexer15TokenRecognizer20recognize_next_token:
   55|  3.36M|    fn recognize_next_token<'a>(
   56|  3.36M|        &mut self,
   57|  3.36M|        data: &'a [u8],
   58|  3.36M|        is_ending: bool,
   59|  3.36M|        options: &N3LexerOptions,
   60|  3.36M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
   61|  3.36M|        match *data.first()? {
   62|   408k|            b'<' => match *data.get(1)? {
   63|  2.59k|                b'<' => Some((2, Ok(N3Token::Punctuation("<<")))),
   64|  14.3k|                b'=' if self.mode == N3LexerMode::N3 => {
   65|  14.3k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   66|  2.45k|                        Some(if let Ok(result) = result {
   67|    584|                            (consumed, Ok(result))
   68|       |                        } else {
   69|  1.86k|                            (2, Ok(N3Token::Punctuation("<=")))
   70|       |                        })
   71|  11.8k|                    } else if is_ending {
   72|    218|                        Some((2, Ok(N3Token::Punctuation("<="))))
   73|       |                    } else {
   74|  11.6k|                        None
   75|       |                    }
   76|       |                }
   77|  19.6k|                b'-' if self.mode == N3LexerMode::N3 => {
   78|  19.6k|                    if let Some((consumed, result)) = self.recognize_iri(data, options) {
   79|  4.87k|                        Some(if let Ok(result) = result {
   80|    542|                            (consumed, Ok(result))
   81|       |                        } else {
   82|  4.33k|                            (2, Ok(N3Token::Punctuation("<-")))
   83|       |                        })
   84|  14.7k|                    } else if is_ending {
   85|  1.33k|                        Some((2, Ok(N3Token::Punctuation("<-"))))
   86|       |                    } else {
   87|  13.4k|                        None
   88|       |                    }
   89|       |                }
   90|   291k|                _ => self.recognize_iri(data, options),
   91|       |            },
   92|       |            b'>' => {
   93|  58.2k|                if *data.get(1)? == b'>' {
   94|  10.0k|                    Some((2, Ok(N3Token::Punctuation(">>"))))
   95|       |                } else {
   96|  29.0k|                    Some((1, Ok(N3Token::Punctuation(">"))))
   97|       |                }
   98|       |            }
   99|  41.7k|            b'_' => match data.get(1)? {
  100|  29.8k|                b':' => Self::recognize_blank_node_label(data),
  101|  8.53k|                c => Some((
  102|  8.53k|                    1,
  103|  8.53k|                    Err((0, format!("Unexpected character '{}'", char::from(*c))).into()),
  104|  8.53k|                )),
  105|       |            },
  106|       |            b'"' => {
  107|  17.6k|                if self.mode != N3LexerMode::NTriples
  108|  17.6k|                    && *data.get(1)? == b'"'
  109|  13.8k|                    && *data.get(2)? == b'"'
  110|       |                {
  111|  10.2k|                    Self::recognize_long_string(data, b'"')
  112|       |                } else {
  113|  5.07k|                    Self::recognize_string(data, b'"')
  114|       |                }
  115|       |            }
  116|  52.3k|            b'\'' if self.mode != N3LexerMode::NTriples => {
  117|  52.3k|                if *data.get(1)? == b'\'' && *data.get(2)? == b'\'' {
  118|  15.2k|                    Self::recognize_long_string(data, b'\'')
  119|       |                } else {
  120|  29.0k|                    Self::recognize_string(data, b'\'')
  121|       |                }
  122|       |            }
  123|   189k|            b'@' => self.recognize_lang_tag(data),
  124|   263k|            b'.' => match data.get(1) {
  125|   134k|                Some(b'0'..=b'9') => Self::recognize_number(data),
  126|   208k|                Some(_) => Some((1, Ok(N3Token::Punctuation(".")))),
  127|  40.3k|                None => is_ending.then_some((1, Ok(N3Token::Punctuation(".")))),
  128|       |            },
  129|       |            b'^' => {
  130|  11.0k|                if *data.get(1)? == b'^' {
  131|  6.63k|                    Some((2, Ok(N3Token::Punctuation("^^"))))
  132|       |                } else {
  133|  3.51k|                    Some((1, Ok(N3Token::Punctuation("^"))))
  134|       |                }
  135|       |            }
  136|  54.0k|            b'(' => Some((1, Ok(N3Token::Punctuation("(")))),
  137|  11.5k|            b')' => Some((1, Ok(N3Token::Punctuation(")")))),
  138|   115k|            b'[' => Some((1, Ok(N3Token::Punctuation("[")))),
  139|  20.6k|            b']' => Some((1, Ok(N3Token::Punctuation("]")))),
  140|       |            b'{' => {
  141|   161k|                if *data.get(1)? == b'|' {
  142|    342|                    Some((2, Ok(N3Token::Punctuation("{|"))))
  143|       |                } else {
  144|   143k|                    Some((1, Ok(N3Token::Punctuation("{"))))
  145|       |                }
  146|       |            }
  147|  26.4k|            b'}' => Some((1, Ok(N3Token::Punctuation("}")))),
  148|  16.8k|            b',' => Some((1, Ok(N3Token::Punctuation(",")))),
  149|  16.4k|            b';' => Some((1, Ok(N3Token::Punctuation(";")))),
  150|  14.9k|            b'!' => Some((1, Ok(N3Token::Punctuation("!")))),
  151|       |            b'|' => {
  152|  4.78k|                if *data.get(1)? == b'}' {
  153|    236|                    Some((2, Ok(N3Token::Punctuation("|}"))))
  154|       |                } else {
  155|  3.07k|                    Some((1, Ok(N3Token::Punctuation("|"))))
  156|       |                }
  157|       |            }
  158|       |            b'=' => {
  159|  15.5k|                if *data.get(1)? == b'>' {
  160|  1.15k|                    Some((2, Ok(N3Token::Punctuation("=>"))))
  161|       |                } else {
  162|  9.51k|                    Some((1, Ok(N3Token::Punctuation("="))))
  163|       |                }
  164|       |            }
  165|   940k|            b'0'..=b'9' | b'+' | b'-' => Self::recognize_number(data),
  166|  42.4k|            b'?' => self.recognize_variable(data, is_ending),
  167|  1.36M|            _ => self.recognize_pname_or_keyword(data, is_ending),
  168|       |        }
  169|  3.36M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer3new:
  173|  9.59k|    pub fn new(mode: N3LexerMode, unchecked: bool) -> Self {
  174|  9.59k|        Self { mode, unchecked }
  175|  9.59k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer13recognize_iri:
  177|   325k|    fn recognize_iri(
  178|   325k|        &self,
  179|   325k|        data: &[u8],
  180|   325k|        options: &N3LexerOptions,
  181|   325k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  182|   325k|        // [18] IRIREF  ::=  '<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
  183|   325k|        let mut string = Vec::new();
  184|   325k|        let mut i = 1;
  185|       |        loop {
  186|   351k|            let end = memchr2(b'>', b'\\', &data[i..])?;
  187|   115k|            string.extend_from_slice(&data[i..i + end]);
  188|   115k|            i += end;
  189|   115k|            match data[i] {
  190|       |                b'>' => {
  191|       |                    #[allow(clippy::range_plus_one)]
  192|  78.0k|                    return Some((i + 1, self.parse_iri(string, 0..i + 1, options)));
  193|       |                }
  194|       |                b'\\' => {
  195|  37.2k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, false)?;
  196|  30.8k|                    i += additional + 1;
  197|  30.8k|                    match c {
  198|  26.6k|                        Ok(c) => {
  199|  26.6k|                            let mut buf = [0; 4];
  200|  26.6k|                            string.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  201|  26.6k|                        }
  202|  4.13k|                        Err(e) => return Some((i, Err(e))),
  203|       |                    }
  204|       |                }
  205|      0|                _ => unreachable!(),
  206|       |            }
  207|       |        }
  208|   325k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer9parse_iri:
  210|  78.0k|    fn parse_iri(
  211|  78.0k|        &self,
  212|  78.0k|        iri: Vec<u8>,
  213|  78.0k|        position: Range<usize>,
  214|  78.0k|        options: &N3LexerOptions,
  215|  78.0k|    ) -> Result<N3Token<'static>, TokenRecognizerError> {
  216|  78.0k|        let iri = string_from_utf8(iri, position.clone())?;
  217|       |        Ok(N3Token::IriRef(
  218|  72.7k|            if let Some(base_iri) = options.base_iri.as_ref() {
  219|  72.7k|                if self.unchecked {
  220|      0|                    base_iri.resolve_unchecked(&iri)
  221|       |                } else {
  222|  72.7k|                    base_iri.resolve(&iri)
  223|       |                }
  224|  72.7k|                .map_err(|e| (position, e.to_string()))?
  225|  53.3k|                .into_inner()
  226|      0|            } else if self.unchecked {
  227|      0|                iri
  228|       |            } else {
  229|      0|                Iri::parse(iri)
  230|      0|                    .map_err(|e| (position, e.to_string()))?
  231|      0|                    .into_inner()
  232|       |            },
  233|       |        ))
  234|  78.0k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer26recognize_pname_or_keyword:
  236|  1.36M|    fn recognize_pname_or_keyword<'a>(
  237|  1.36M|        &self,
  238|  1.36M|        data: &'a [u8],
  239|  1.36M|        is_ending: bool,
  240|  1.36M|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  241|  1.36M|        // [139s]  PNAME_NS   ::=  PN_PREFIX? ':'
  242|  1.36M|        // [140s]  PNAME_LN   ::=  PNAME_NS PN_LOCAL
  243|  1.36M|        // [167s]  PN_PREFIX  ::=  PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
  244|  1.36M|        let mut i = 0;
  245|       |        loop {
  246|  2.43M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  247|  2.28M|                match r {
  248|  2.10M|                    Ok((c, consumed)) => {
  249|  2.10M|                        if c == ':' {
  250|   379k|                            i += consumed;
  251|   379k|                            break;
  252|  1.72M|                        } else if i == 0 {
  253|   879k|                            if !Self::is_possible_pn_chars_base(c) {
  254|   527k|                                return Some((
  255|   527k|                                    consumed,
  256|   527k|                                    Err((
  257|   527k|                                        0..consumed,
  258|   527k|                                        format!(
  259|   527k|                                            "'{c}' is not allowed at the beginning of a prefix name"
  260|   527k|                                        ),
  261|   527k|                                    )
  262|   527k|                                        .into()),
  263|   527k|                                ));
  264|   351k|                            }
  265|   351k|                            i += consumed;
  266|   847k|                        } else if Self::is_possible_pn_chars(c) || c == '.' {
  267|   717k|                            i += consumed;
  268|   717k|                        } else {
  269|   168k|                            while data[..i].ends_with(b".") {
  270|  38.1k|                                i -= 1;
  271|  38.1k|                            }
  272|   130k|                            return Some((
  273|   130k|                                i,
  274|   130k|                                str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  275|   130k|                            ));
  276|       |                        }
  277|       |                    }
  278|   178k|                    Err(e) => return Some((e.location.end, Err(e))),
  279|       |                }
  280|   149k|            } else if is_ending {
  281|  1.95k|                while data[..i].ends_with(b".") {
  282|    438|                    i -= 1;
  283|    438|                }
  284|  1.52k|                return Some(if i == 0 {
  285|    375|                    (
  286|    375|                        1,
  287|    375|                        Err((0..1, format!("Unexpected byte {}", data[0])).into()),
  288|    375|                    )
  289|       |                } else {
  290|  1.14k|                    (
  291|  1.14k|                        i,
  292|  1.14k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::PlainKeyword),
  293|  1.14k|                    )
  294|       |                });
  295|       |            } else {
  296|   147k|                return None;
  297|       |            }
  298|       |        }
  299|   379k|        let pn_prefix = match str_from_utf8(&data[..i - 1], 0..i - 1) {
  300|   379k|            Ok(pn_prefix) => pn_prefix,
  301|      0|            Err(e) => return Some((i, Err(e))),
  302|       |        };
  303|   379k|        if pn_prefix.ends_with('.') {
  304|    458|            return Some((
  305|    458|                i,
  306|    458|                Err((
  307|    458|                    0..i,
  308|    458|                    format!(
  309|    458|                        "'{pn_prefix}' is not a valid prefix: prefixes are not allowed to end with '.'"),
  310|    458|                )
  311|    458|                    .into()),
  312|    458|            ));
  313|   378k|        }
  314|       |
  315|  95.9k|        let (consumed, pn_local_result) =
  316|   378k|            self.recognize_optional_pn_local(&data[i..], is_ending)?;
  317|  95.9k|        Some((
  318|  95.9k|            consumed + i,
  319|  95.9k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|       |                prefix: pn_prefix,
  321|       |                local,
  322|       |                might_be_invalid_iri,
  323|  95.9k|            }),
  324|  95.9k|        ))
  325|  1.36M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer18recognize_variable:
  327|  42.4k|    fn recognize_variable<'a>(
  328|  42.4k|        &self,
  329|  42.4k|        data: &'a [u8],
  330|  42.4k|        is_ending: bool,
  331|  42.4k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  332|       |        // [36]  QUICK_VAR_NAME  ::=  "?" PN_LOCAL
  333|  42.4k|        let (consumed, result) = self.recognize_optional_pn_local(&data[1..], is_ending)?;
  334|  17.6k|        Some((
  335|  17.6k|            consumed + 1,
  336|  17.6k|            result.and_then(|(name, _)| {
  337|       |                if name.is_empty() {
  338|       |                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|       |                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  17.6k|            }),
  343|  17.6k|        ))
  344|  42.4k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer27recognize_optional_pn_local:
  346|   421k|    fn recognize_optional_pn_local<'a>(
  347|   421k|        &self,
  348|   421k|        data: &'a [u8],
  349|   421k|        is_ending: bool,
  350|   421k|    ) -> Option<(usize, Result<(Cow<'a, str>, bool), TokenRecognizerError>)> {
  351|   421k|        // [168s]  PN_LOCAL  ::=  (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
  352|   421k|        let mut i = 0;
  353|   421k|        let mut buffer = None; // Buffer if there are some escaped characters
  354|   421k|        let mut position_that_is_already_in_buffer = 0;
  355|   421k|        let mut might_be_invalid_iri = false;
  356|   421k|        let mut ends_with_unescaped_dot = 0;
  357|       |        loop {
  358|  1.11M|            if let Some(r) = Self::recognize_unicode_char(&data[i..], i) {
  359|   820k|                match r {
  360|   813k|                    Ok((c, consumed)) => {
  361|   813k|                        if c == '%' {
  362|  13.5k|                            i += 1;
  363|  13.5k|                            let a = char::from(*data.get(i)?);
  364|  6.87k|                            i += 1;
  365|  6.87k|                            let b = char::from(*data.get(i)?);
  366|  4.07k|                            if !a.is_ascii_hexdigit() || !b.is_ascii_hexdigit() {
  367|  1.11k|                                return Some((i + 1, Err((
  368|  1.11k|                                    i - 2..=i, format!("escapes in IRIs should be % followed by two hexadecimal characters, found '%{a}{b}'")
  369|  1.11k|                                ).into())));
  370|  2.95k|                            }
  371|  2.95k|                            i += 1;
  372|  2.95k|                            ends_with_unescaped_dot = 0;
  373|   799k|                        } else if c == '\\' {
  374|  66.7k|                            i += 1;
  375|  66.7k|                            let a = char::from(*data.get(i)?);
  376|  60.4k|                            if self.unchecked
  377|  45.3k|                                || matches!(
  378|  60.4k|                                    a,
  379|       |                                    '_' | '~'
  380|       |                                        | '.'
  381|       |                                        | '-'
  382|       |                                        | '!'
  383|       |                                        | '$'
  384|       |                                        | '&'
  385|       |                                        | '\''
  386|       |                                        | '('
  387|       |                                        | ')'
  388|       |                                        | '*'
  389|       |                                        | '+'
  390|       |                                        | ','
  391|       |                                        | ';'
  392|       |                                        | '='
  393|       |                                )
  394|  15.0k|                            {
  395|  15.0k|                                // ok to escape
  396|  45.3k|                            } else if matches!(a, '/' | '?' | '#' | '@' | '%') {
  397|  44.3k|                                // ok to escape but requires IRI validation
  398|  44.3k|                                might_be_invalid_iri = true;
  399|  44.3k|                            } else {
  400|  1.05k|                                return Some((i + 1, Err((
  401|  1.05k|                                    i..=i, format!("The character that are allowed to be escaped in IRIs are _~.-!$&'()*+,;=/?#@%, found '{a}'")
  402|  1.05k|                                ).into())));
  403|       |                            }
  404|  59.3k|                            let buffer = buffer.get_or_insert_with(String::new);
  405|  59.3k|                            // We add the missing bytes
  406|  59.3k|                            if i - position_that_is_already_in_buffer > 1 {
  407|  18.2k|                                buffer.push_str(
  408|  18.2k|                                    match str_from_utf8(
  409|  18.2k|                                        &data[position_that_is_already_in_buffer..i - 1],
  410|  18.2k|                                        position_that_is_already_in_buffer..i - 1,
  411|  18.2k|                                    ) {
  412|  18.2k|                                        Ok(data) => data,
  413|      0|                                        Err(e) => return Some((i, Err(e))),
  414|       |                                    },
  415|       |                                )
  416|  41.0k|                            }
  417|  59.3k|                            buffer.push(a);
  418|  59.3k|                            i += 1;
  419|  59.3k|                            position_that_is_already_in_buffer = i;
  420|  59.3k|                            ends_with_unescaped_dot = 0;
  421|   733k|                        } else if i == 0 {
  422|   210k|                            if !(Self::is_possible_pn_chars_u(c) || c == ':' || c.is_ascii_digit())
  423|       |                            {
  424|  51.6k|                                return Some((0, Ok((Cow::Borrowed(""), false))));
  425|   158k|                            }
  426|   158k|                            if !self.unchecked {
  427|       |                                might_be_invalid_iri |=
  428|   158k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  429|   158k|                                        || c == ':';
  430|      0|                            }
  431|   158k|                            i += consumed;
  432|   522k|                        } else if Self::is_possible_pn_chars(c) || c == ':' {
  433|   429k|                            if !self.unchecked {
  434|       |                                might_be_invalid_iri |=
  435|   429k|                                    Self::is_possible_pn_chars_base_but_not_valid_iri(c)
  436|   429k|                                        || c == ':';
  437|      0|                            }
  438|   429k|                            i += consumed;
  439|   429k|                            ends_with_unescaped_dot = 0;
  440|  93.4k|                        } else if c == '.' {
  441|  41.7k|                            i += consumed;
  442|  41.7k|                            ends_with_unescaped_dot += 1;
  443|  41.7k|                        } else {
  444|  51.7k|                            let buffer = if let Some(mut buffer) = buffer {
  445|  7.18k|                                buffer.push_str(
  446|  7.18k|                                    match str_from_utf8(
  447|  7.18k|                                        &data[position_that_is_already_in_buffer..i],
  448|  7.18k|                                        position_that_is_already_in_buffer..i,
  449|  7.18k|                                    ) {
  450|  7.18k|                                        Ok(data) => data,
  451|      0|                                        Err(e) => return Some((i, Err(e))),
  452|       |                                    },
  453|       |                                );
  454|       |                                // We do not include the last dots
  455|  7.18k|                                for _ in 0..ends_with_unescaped_dot {
  456|  3.47k|                                    buffer.pop();
  457|  3.47k|                                }
  458|  7.18k|                                i -= ends_with_unescaped_dot;
  459|  7.18k|                                Cow::Owned(buffer)
  460|       |                            } else {
  461|  44.5k|                                let mut data = match str_from_utf8(&data[..i], 0..i) {
  462|  44.5k|                                    Ok(data) => data,
  463|      0|                                    Err(e) => return Some((i, Err(e))),
  464|       |                                };
  465|       |                                // We do not include the last dots
  466|  44.5k|                                data = &data[..data.len() - ends_with_unescaped_dot];
  467|  44.5k|                                i -= ends_with_unescaped_dot;
  468|  44.5k|                                Cow::Borrowed(data)
  469|       |                            };
  470|  51.7k|                            return Some((i, Ok((buffer, might_be_invalid_iri))));
  471|       |                        }
  472|       |                    }
  473|  6.97k|                    Err(e) => return Some((e.location.end, Err(e))),
  474|       |                }
  475|   293k|            } else if is_ending {
  476|  1.14k|                let buffer = if let Some(mut buffer) = buffer {
  477|       |                    // We do not include the last dot
  478|    643|                    while buffer.ends_with('.') {
  479|    386|                        buffer.pop();
  480|    386|                        i -= 1;
  481|    386|                    }
  482|    257|                    Cow::Owned(buffer)
  483|       |                } else {
  484|    890|                    let mut data = match str_from_utf8(&data[..i], 0..i) {
  485|    890|                        Ok(data) => data,
  486|      0|                        Err(e) => return Some((i, Err(e))),
  487|       |                    };
  488|       |                    // We do not include the last dot
  489|  1.13k|                    while let Some(d) = data.strip_suffix('.') {
  490|    244|                        data = d;
  491|    244|                        i -= 1;
  492|    244|                    }
  493|    890|                    Cow::Borrowed(data)
  494|       |                };
  495|  1.14k|                return Some((i, Ok((buffer, might_be_invalid_iri))));
  496|       |            } else {
  497|   291k|                return None;
  498|       |            }
  499|       |        }
  500|   421k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer26recognize_blank_node_label:
  502|  29.8k|    fn recognize_blank_node_label(
  503|  29.8k|        data: &[u8],
  504|  29.8k|    ) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  505|  29.8k|        // [141s]  BLANK_NODE_LABEL  ::=  '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
  506|  29.8k|        let mut i = 2;
  507|       |        loop {
  508|  54.4k|            match Self::recognize_unicode_char(&data[i..], i)? {
  509|  31.6k|                Ok((c, consumed)) => {
  510|  31.6k|                    if (i == 2 && (Self::is_possible_pn_chars_u(c) || c.is_ascii_digit()))
  511|  25.7k|                        || (i > 2 && Self::is_possible_pn_chars(c))
  512|  21.6k|                    {
  513|  21.6k|                        // Ok
  514|  21.6k|                    } else if i > 2 && c == '.' {
  515|  3.13k|                        if data[i - 1] == b'.' {
  516|    160|                            i -= 1;
  517|    160|                            return Some((
  518|    160|                                i,
  519|    160|                                str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  520|    160|                            ));
  521|  2.97k|                        }
  522|  6.93k|                    } else if i == 0 {
  523|      0|                        return Some((
  524|      0|                            i,
  525|      0|                            Err((0..i, "A blank node ID should not be empty").into()),
  526|      0|                        ));
  527|  6.93k|                    } else if data[i - 1] == b'.' {
  528|    442|                        i -= 1;
  529|    442|                        return Some((
  530|    442|                            i,
  531|    442|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  532|    442|                        ));
  533|       |                    } else {
  534|  6.48k|                        return Some((
  535|  6.48k|                            i,
  536|  6.48k|                            str_from_utf8(&data[2..i], 2..i).map(N3Token::BlankNodeLabel),
  537|  6.48k|                        ));
  538|       |                    }
  539|  24.5k|                    i += consumed;
  540|       |                }
  541|  1.38k|                Err(e) => return Some((e.location.end, Err(e))),
  542|       |            }
  543|       |        }
  544|  29.8k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer18recognize_lang_tag:
  546|   189k|    fn recognize_lang_tag<'a>(
  547|   189k|        &self,
  548|   189k|        data: &'a [u8],
  549|   189k|    ) -> Option<(usize, Result<N3Token<'a>, TokenRecognizerError>)> {
  550|   189k|        // [144s]  LANGTAG  ::=  '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
  551|   189k|        let mut is_last_block_empty = true;
  552|   853k|        for (i, c) in data[1..].iter().enumerate() {
  553|   853k|            if c.is_ascii_alphabetic() {
  554|   735k|                is_last_block_empty = false;
  555|   735k|            } else if i == 0 {
  556|  50.7k|                return Some((
  557|  50.7k|                    1,
  558|  50.7k|                    Err((1..2, "A language code should always start with a letter").into()),
  559|  50.7k|                ));
  560|  66.6k|            } else if is_last_block_empty {
  561|    635|                return Some((i, self.parse_lang_tag(&data[1..i], 1..i - 1)));
  562|  66.0k|            } else if *c == b'-' {
  563|  27.7k|                is_last_block_empty = true;
  564|  27.7k|            } else {
  565|  38.2k|                return Some((i + 1, self.parse_lang_tag(&data[1..=i], 1..i)));
  566|       |            }
  567|       |        }
  568|   100k|        None
  569|   189k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer14parse_lang_tag:
  571|  38.8k|    fn parse_lang_tag<'a>(
  572|  38.8k|        &self,
  573|  38.8k|        lang_tag: &'a [u8],
  574|  38.8k|        position: Range<usize>,
  575|  38.8k|    ) -> Result<N3Token<'a>, TokenRecognizerError> {
  576|  38.8k|        let lang_tag = str_from_utf8(lang_tag, position.clone())?;
  577|  38.8k|        Ok(N3Token::LangTag(if self.unchecked {
  578|      0|            lang_tag
  579|       |        } else {
  580|  38.8k|            LanguageTag::parse(lang_tag)
  581|  38.8k|                .map_err(|e| (position.clone(), e.to_string()))?
  582|  30.7k|                .into_inner()
  583|       |        }))
  584|  38.8k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer16recognize_string:
  586|  34.0k|    fn recognize_string(
  587|  34.0k|        data: &[u8],
  588|  34.0k|        delimiter: u8,
  589|  34.0k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  590|  34.0k|        // [22]  STRING_LITERAL_QUOTE         ::=  '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
  591|  34.0k|        // [23]  STRING_LITERAL_SINGLE_QUOTE  ::=  "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
  592|  34.0k|        let mut string = String::new();
  593|  34.0k|        let mut i = 1;
  594|       |        loop {
  595|  37.2k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  596|  32.0k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  597|  30.9k|                Ok(s) => string.push_str(s),
  598|  1.17k|                Err(e) => return Some((end, Err(e))),
  599|       |            };
  600|  30.9k|            i += end;
  601|  30.9k|            match data[i] {
  602|  30.9k|                c if c == delimiter => {
  603|  12.3k|                    return Some((i + 1, Ok(N3Token::String(string))));
  604|       |                }
  605|       |                b'\\' => {
  606|  18.5k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  607|  17.4k|                    i += additional + 1;
  608|  17.4k|                    match c {
  609|  3.16k|                        Ok(c) => {
  610|  3.16k|                            string.push(c);
  611|  3.16k|                        }
  612|  14.2k|                        Err(e) => {
  613|       |                            // We read until the end of string char
  614|  14.2k|                            let end = memchr(delimiter, &data[i..])?;
  615|    702|                            return Some((i + end + 1, Err(e)));
  616|       |                        }
  617|       |                    }
  618|       |                }
  619|      0|                _ => unreachable!(),
  620|       |            }
  621|       |        }
  622|  34.0k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer21recognize_long_string:
  624|  25.5k|    fn recognize_long_string(
  625|  25.5k|        data: &[u8],
  626|  25.5k|        delimiter: u8,
  627|  25.5k|    ) -> Option<(usize, Result<N3Token<'static>, TokenRecognizerError>)> {
  628|  25.5k|        // [24]  STRING_LITERAL_LONG_SINGLE_QUOTE  ::=  "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
  629|  25.5k|        // [25]  STRING_LITERAL_LONG_QUOTE         ::=  '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
  630|  25.5k|        let mut string = String::new();
  631|  25.5k|        let mut i = 3;
  632|       |        loop {
  633|  45.3k|            let end = memchr2(delimiter, b'\\', &data[i..])?;
  634|  37.2k|            match str_from_utf8(&data[i..i + end], i..i + end) {
  635|  35.9k|                Ok(s) => string.push_str(s),
  636|  1.39k|                Err(e) => return Some((end, Err(e))),
  637|       |            };
  638|  35.9k|            i += end;
  639|  35.9k|            match data[i] {
  640|  35.9k|                c if c == delimiter => {
  641|  34.5k|                    if *data.get(i + 1)? == delimiter && *data.get(i + 2)? == delimiter {
  642|  12.8k|                        return Some((i + 3, Ok(N3Token::String(string))));
  643|  18.9k|                    }
  644|  18.9k|                    i += 1;
  645|  18.9k|                    string.push(char::from(delimiter));
  646|       |                }
  647|       |                b'\\' => {
  648|  1.34k|                    let (additional, c) = Self::recognize_escape(&data[i..], i, true)?;
  649|  1.14k|                    i += additional + 1;
  650|  1.14k|                    match c {
  651|    875|                        Ok(c) => {
  652|    875|                            string.push(c);
  653|    875|                        }
  654|    268|                        Err(e) => return Some((i, Err(e))),
  655|       |                    }
  656|       |                }
  657|      0|                _ => unreachable!(),
  658|       |            }
  659|       |        }
  660|  25.5k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer16recognize_number:
  662|   123k|    fn recognize_number(data: &[u8]) -> Option<(usize, Result<N3Token<'_>, TokenRecognizerError>)> {
  663|   123k|        // [19]  INTEGER    ::=  [+-]? [0-9]+
  664|   123k|        // [20]  DECIMAL    ::=  [+-]? [0-9]* '.' [0-9]+
  665|   123k|        // [21]  DOUBLE     ::=  [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
  666|   123k|        // [154s] EXPONENT  ::=  [eE] [+-]? [0-9]+
  667|   123k|        let mut i = 0;
  668|   123k|        let c = *data.first()?;
  669|   123k|        if matches!(c, b'+' | b'-') {
  670|  31.7k|            i += 1;
  671|  92.1k|        }
  672|       |        // We read the digits before .
  673|   123k|        let mut count_before: usize = 0;
  674|       |        loop {
  675|   226k|            let c = *data.get(i)?;
  676|   205k|            if c.is_ascii_digit() {
  677|   102k|                i += 1;
  678|   102k|                count_before += 1;
  679|   102k|            } else {
  680|   103k|                break;
  681|       |            }
  682|       |        }
  683|       |
  684|       |        // We read the digits after .
  685|       |        #[allow(clippy::if_then_some_else_none)]
  686|   103k|        let count_after = if *data.get(i)? == b'.' {
  687|  37.8k|            i += 1;
  688|  37.8k|
  689|  37.8k|            let mut count_after = 0;
  690|       |            loop {
  691|  57.1k|                let c = *data.get(i)?;
  692|  42.3k|                if c.is_ascii_digit() {
  693|  19.2k|                    i += 1;
  694|  19.2k|                    count_after += 1;
  695|  19.2k|                } else {
  696|  23.1k|                    break;
  697|  23.1k|                }
  698|  23.1k|            }
  699|  23.1k|            Some(count_after)
  700|       |        } else {
  701|  65.3k|            None
  702|       |        };
  703|       |
  704|       |        // End
  705|  88.4k|        let c = *data.get(i)?;
  706|  88.4k|        if matches!(c, b'e' | b'E') {
  707|  18.2k|            i += 1;
  708|       |
  709|  18.2k|            let c = *data.get(i)?;
  710|  13.7k|            if matches!(c, b'+' | b'-') {
  711|    303|                i += 1;
  712|  13.3k|            }
  713|       |
  714|  13.7k|            let mut found = false;
  715|       |            loop {
  716|  25.9k|                let c = *data.get(i)?;
  717|  16.5k|                if c.is_ascii_digit() {
  718|  12.2k|                    i += 1;
  719|  12.2k|                    found = true;
  720|  12.2k|                } else {
  721|  4.26k|                    break;
  722|  4.26k|                }
  723|  4.26k|            }
  724|  4.26k|            Some((
  725|  4.26k|                i,
  726|  4.26k|                if !found {
  727|  2.67k|                    Err((0..i, "A double exponent cannot be empty").into())
  728|  1.58k|                } else if count_before == 0 && count_after.unwrap_or(0) == 0 {
  729|    231|                    Err((0..i, "A double should not be empty").into())
  730|       |                } else {
  731|  1.35k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Double)
  732|       |                },
  733|       |            ))
  734|  70.2k|        } else if let Some(count_after) = count_after {
  735|  14.3k|            if count_after == 0 {
  736|       |                // We do not consume the '.' after all
  737|  9.95k|                i -= 1;
  738|  9.95k|                Some((
  739|  9.95k|                    i,
  740|  9.95k|                    if count_before == 0 {
  741|  1.81k|                        Err((0..i, "An integer should not be empty").into())
  742|       |                    } else {
  743|  8.13k|                        str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  744|       |                    },
  745|       |                ))
  746|       |            } else {
  747|  4.34k|                Some((i, str_from_utf8(&data[..i], 0..i).map(N3Token::Decimal)))
  748|       |            }
  749|       |        } else {
  750|       |            Some((
  751|  55.9k|                i,
  752|  55.9k|                if count_before == 0 {
  753|  18.6k|                    Err((0..i, "An integer should not be empty").into())
  754|       |                } else {
  755|  37.2k|                    str_from_utf8(&data[..i], 0..i).map(N3Token::Integer)
  756|       |                },
  757|       |            ))
  758|       |        }
  759|   123k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer16recognize_escape:
  761|  57.0k|    fn recognize_escape(
  762|  57.0k|        data: &[u8],
  763|  57.0k|        position: usize,
  764|  57.0k|        with_echar: bool,
  765|  57.0k|    ) -> Option<(usize, Result<char, TokenRecognizerError>)> {
  766|  57.0k|        // [26]   UCHAR  ::=  '\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
  767|  57.0k|        // [159s] ECHAR  ::=  '\' [tbnrf"'\]
  768|  57.0k|        match *data.get(1)? {
  769|  31.6k|            b'u' => match Self::recognize_hex_char(&data[2..], 4, 'u', position) {
  770|  30.2k|                Ok(c) => Some((5, Ok(c?))),
  771|  1.39k|                Err(e) => Some((5, Err(e))),
  772|       |            },
  773|  1.21k|            b'U' => match Self::recognize_hex_char(&data[2..], 8, 'u', position) {
  774|    673|                Ok(c) => Some((9, Ok(c?))),
  775|    539|                Err(e) => Some((9, Err(e))),
  776|       |            },
  777|    197|            b't' if with_echar => Some((1, Ok('\t'))),
  778|    200|            b'b' if with_echar => Some((1, Ok('\x08'))),
  779|    212|            b'n' if with_echar => Some((1, Ok('\n'))),
  780|    508|            b'r' if with_echar => Some((1, Ok('\r'))),
  781|    243|            b'f' if with_echar => Some((1, Ok('\x0C'))),
  782|    229|            b'"' if with_echar => Some((1, Ok('"'))),
  783|    261|            b'\'' if with_echar => Some((1, Ok('\''))),
  784|  1.86k|            b'\\' if with_echar => Some((1, Ok('\\'))),
  785|  16.7k|            c => Some((
  786|  16.7k|                1,
  787|  16.7k|                Err((
  788|  16.7k|                    position..position + 2,
  789|  16.7k|                    format!("Unexpected escape character '\\{}'", char::from(c)),
  790|  16.7k|                )
  791|  16.7k|                    .into()),
  792|  16.7k|            )), // TODO: read until end of string
  793|       |        }
  794|  57.0k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer18recognize_hex_char:
  796|  32.8k|    fn recognize_hex_char(
  797|  32.8k|        data: &[u8],
  798|  32.8k|        len: usize,
  799|  32.8k|        escape_char: char,
  800|  32.8k|        position: usize,
  801|  32.8k|    ) -> Result<Option<char>, TokenRecognizerError> {
  802|  32.8k|        if data.len() < len {
  803|  3.90k|            return Ok(None);
  804|  28.9k|        }
  805|  28.9k|        let val = str_from_utf8(&data[..len], position..position + len + 2)?;
  806|  27.8k|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|       |            (
  808|       |                position..position + len + 2,
  809|       |                format!(
  810|       |                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|       |                ),
  812|       |            )
  813|  27.8k|        })?;
  814|  27.2k|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|       |            (
  816|       |                position..position + len +2,
  817|       |                format!(
  818|       |                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|       |                ),
  820|       |            )
  821|  27.2k|        })?;
  822|  27.0k|        Ok(Some(c))
  823|  32.8k|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer22recognize_unicode_char:
  825|  3.60M|    fn recognize_unicode_char(
  826|  3.60M|        data: &[u8],
  827|  3.60M|        position: usize,
  828|  3.60M|    ) -> Option<Result<(char, usize), TokenRecognizerError>> {
  829|  3.60M|        let mut code_point: u32;
  830|  3.60M|        let bytes_needed: usize;
  831|  3.60M|        let mut lower_boundary = 0x80;
  832|  3.60M|        let mut upper_boundary = 0xBF;
  833|       |
  834|  3.60M|        let byte = *data.first()?;
  835|  3.15M|        match byte {
  836|  3.15M|            0x00..=0x7F => return Some(Ok((char::from(byte), 1))),
  837|   295k|            0xC2..=0xDF => {
  838|   193k|                bytes_needed = 1;
  839|   193k|                code_point = u32::from(byte) & 0x1F;
  840|   193k|            }
  841|   102k|            0xE0..=0xEF => {
  842|  48.6k|                if byte == 0xE0 {
  843|  5.63k|                    lower_boundary = 0xA0;
  844|  42.9k|                }
  845|  48.6k|                if byte == 0xED {
  846|    735|                    upper_boundary = 0x9F;
  847|  47.8k|                }
  848|  48.6k|                bytes_needed = 2;
  849|  48.6k|                code_point = u32::from(byte) & 0xF;
  850|       |            }
  851|  53.4k|            0xF0..=0xF4 => {
  852|  37.3k|                if byte == 0xF0 {
  853|    320|                    lower_boundary = 0x90;
  854|  36.9k|                }
  855|  37.3k|                if byte == 0xF4 {
  856|    439|                    upper_boundary = 0x8F;
  857|  36.8k|                }
  858|  37.3k|                bytes_needed = 3;
  859|  37.3k|                code_point = u32::from(byte) & 0x7;
  860|       |            }
  861|       |            _ => {
  862|   122k|                return Some(Err((
  863|   122k|                    position..=position,
  864|   122k|                    "Invalid UTF-8 character encoding",
  865|   122k|                )
  866|   122k|                    .into()))
  867|       |            }
  868|       |        }
  869|       |
  870|   370k|        for i in 1..=bytes_needed {
  871|   370k|            let byte = *data.get(i)?;
  872|   352k|            if byte < lower_boundary || upper_boundary < byte {
  873|  64.8k|                return Some(Err((
  874|  64.8k|                    position..=position + i,
  875|  64.8k|                    "Invalid UTF-8 character encoding",
  876|  64.8k|                )
  877|  64.8k|                    .into()));
  878|   287k|            }
  879|   287k|            lower_boundary = 0x80;
  880|   287k|            upper_boundary = 0xBF;
  881|   287k|            code_point = (code_point << 6) | (u32::from(byte) & 0x3F);
  882|       |        }
  883|       |
  884|   196k|        Some(
  885|   196k|            char::from_u32(code_point)
  886|   196k|                .map(|c| (c, bytes_needed + 1))
  887|   196k|                .ok_or_else(|| {
  888|       |                    (
  889|       |                        position..=position + bytes_needed,
  890|       |                        format!("The codepoint {code_point:X} is not a valid unicode character"),
  891|       |                    )
  892|       |                        .into()
  893|   196k|                }),
  894|   196k|        )
  895|  3.60M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer25is_possible_pn_chars_base:
  898|  2.49M|    fn is_possible_pn_chars_base(c: char) -> bool {
  899|  2.49M|        matches!(c,
  900|  1.28M|        'A'..='Z'
  901|   902k|        | 'a'..='z'
  902|   193k|        | '\u{00C0}'..='\u{00D6}'
  903|   193k|        | '\u{00D8}'..='\u{00F6}'
  904|   193k|        | '\u{00F8}'..='\u{02FF}'
  905|   160k|        | '\u{0370}'..='\u{037D}'
  906|   160k|        | '\u{037F}'..='\u{1FFF}'
  907|  55.8k|        | '\u{200C}'..='\u{200D}'
  908|  55.8k|        | '\u{2070}'..='\u{218F}'
  909|  55.8k|        | '\u{2C00}'..='\u{2FEF}'
  910|  55.8k|        | '\u{3001}'..='\u{D7FF}'
  911|  29.4k|        | '\u{F900}'..='\u{FDCF}'
  912|  29.4k|        | '\u{FDF0}'..='\u{FFFD}'
  913|  29.4k|        | '\u{10000}'..='\u{EFFFF}')
  914|  2.49M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer22is_possible_pn_chars_u:
  917|  1.61M|    pub(super) fn is_possible_pn_chars_u(c: char) -> bool {
  918|  1.61M|        Self::is_possible_pn_chars_base(c) || c == '_'
  919|  1.61M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer20is_possible_pn_chars:
  922|  1.39M|    pub(crate) fn is_possible_pn_chars(c: char) -> bool {
  923|  1.39M|        Self::is_possible_pn_chars_u(c)
  924|   610k|            || matches!(c,
  925|   377k|        '-' | '0'..='9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}')
  926|  1.39M|    }
_RNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB4_7N3Lexer43is_possible_pn_chars_base_but_not_valid_iri:
  928|   588k|    fn is_possible_pn_chars_base_but_not_valid_iri(c: char) -> bool {
  929|   588k|        matches!(c, '\u{FFF0}'..='\u{FFFD}')
  930|   588k|            || u32::from(c) % u32::from('\u{FFFE}') == 0
  931|   588k|            || u32::from(c) % u32::from('\u{FFFF}') == 0
  932|   588k|    }
_RNvNtCseXCYVcIQZ7o_5oxttl5lexer18resolve_local_name:
  935|  37.7k|pub fn resolve_local_name(
  936|  37.7k|    prefix: &str,
  937|  37.7k|    local: &str,
  938|  37.7k|    might_be_invalid_iri: bool,
  939|  37.7k|    prefixes: &HashMap<String, Iri<String>>,
  940|  37.7k|) -> Result<NamedNode, String> {
  941|  37.7k|    if let Some(start) = prefixes.get(prefix) {
  942|  28.5k|        let iri = format!("{start}{local}");
  943|  28.5k|        if might_be_invalid_iri || start.path().is_empty() {
  944|       |            // We validate again. We always validate if the local part might be the IRI authority.
  945|  26.2k|            if let Err(e) = Iri::parse(iri.as_str()) {
  946|  6.48k|                return Err(format!(
  947|  6.48k|                    "The prefixed name {prefix}:{local} builds IRI {iri} that is invalid: {e}"
  948|  6.48k|                ));
  949|  19.7k|            }
  950|  2.31k|        }
  951|  22.0k|        Ok(NamedNode::new_unchecked(iri))
  952|       |    } else {
  953|  9.20k|        Err(format!("The prefix {prefix}: has not been declared"))
  954|       |    }
  955|  37.7k|}
_RNvNtCseXCYVcIQZ7o_5oxttl5lexer13str_from_utf8:
  957|   776k|fn str_from_utf8(data: &[u8], range: Range<usize>) -> Result<&str, TokenRecognizerError> {
  958|   776k|    str::from_utf8(data).map_err(|e| {
  959|       |        (
  960|       |            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|       |            format!("Invalid UTF-8: {e}"),
  962|       |        )
  963|       |            .into()
  964|   776k|    })
  965|   776k|}
_RNvNtCseXCYVcIQZ7o_5oxttl5lexer16string_from_utf8:
  967|  78.0k|fn string_from_utf8(data: Vec<u8>, range: Range<usize>) -> Result<String, TokenRecognizerError> {
  968|  78.0k|    String::from_utf8(data).map_err(|e| {
  969|       |        (
  970|       |            range.start + e.utf8_error().valid_up_to()
  971|       |                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|       |            format!("Invalid UTF-8: {e}"),
  973|       |        )
  974|       |            .into()
  975|  78.0k|    })
  976|  78.0k|}
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer9parse_iri0B8_:
  224|  19.3k|                .map_err(|e| (position, e.to_string()))?
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer26recognize_pname_or_keyword0B8_:
  319|  88.2k|            pn_local_result.map(|(local, might_be_invalid_iri)| N3Token::PrefixedName {
  320|  88.2k|                prefix: pn_prefix,
  321|  88.2k|                local,
  322|  88.2k|                might_be_invalid_iri,
  323|  88.2k|            }),
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer18recognize_variable0B8_:
  336|  16.2k|            result.and_then(|(name, _)| {
  337|  16.2k|                if name.is_empty() {
  338|  7.21k|                    Err((0..consumed, "A variable name is not allowed to be empty").into())
  339|       |                } else {
  340|  9.04k|                    Ok(N3Token::Variable(name))
  341|       |                }
  342|  16.2k|            }),
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer14parse_lang_tag0B8_:
  581|  8.18k|                .map_err(|e| (position.clone(), e.to_string()))?
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_char0B8_:
  806|    678|        let codepoint = u32::from_str_radix(val, 16).map_err(|e| {
  807|    678|            (
  808|    678|                position..position + len + 2,
  809|    678|                format!(
  810|    678|                    "The escape sequence '\\{escape_char}{val}' is not a valid hexadecimal string: {e}"
  811|    678|                ),
  812|    678|            )
  813|    678|        })?;
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer18recognize_hex_chars_0B8_:
  814|    194|        let c = char::from_u32(codepoint).ok_or_else(|| {
  815|    194|            (
  816|    194|                position..position + len +2,
  817|    194|                format!(
  818|    194|                    "The escape sequence '\\{escape_char}{val}' is encoding {codepoint:X} that is not a valid unicode character",
  819|    194|                ),
  820|    194|            )
  821|    194|        })?;
_RNCNvMs_NtCseXCYVcIQZ7o_5oxttl5lexerNtB6_7N3Lexer22recognize_unicode_char0B8_:
  886|   196k|                .map(|c| (c, bytes_needed + 1))
_RNCNvNtCseXCYVcIQZ7o_5oxttl5lexer13str_from_utf80B5_:
  958|  3.63k|    str::from_utf8(data).map_err(|e| {
  959|  3.63k|        (
  960|  3.63k|            range.start + e.valid_up_to()..min(range.end, range.start + e.valid_up_to() + 4),
  961|  3.63k|            format!("Invalid UTF-8: {e}"),
  962|  3.63k|        )
  963|  3.63k|            .into()
  964|  3.63k|    })
_RNCNvNtCseXCYVcIQZ7o_5oxttl5lexer16string_from_utf80B5_:
  968|  5.29k|    String::from_utf8(data).map_err(|e| {
  969|  5.29k|        (
  970|  5.29k|            range.start + e.utf8_error().valid_up_to()
  971|  5.29k|                ..min(range.end, range.start + e.utf8_error().valid_up_to() + 4),
  972|  5.29k|            format!("Invalid UTF-8: {e}"),
  973|  5.29k|        )
  974|  5.29k|            .into()
  975|  5.29k|    })

_RINvMsb_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_8N3Parser13with_base_iriReECs5jEkc0fApSJ_2n3:
  235|  9.59k|    pub fn with_base_iri(mut self, base_iri: impl Into<String>) -> Result<Self, IriParseError> {
  236|  9.59k|        self.base = Some(Iri::parse(base_iri.into())?);
  237|  9.59k|        Ok(self)
  238|  9.59k|    }
_RNvMsb_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_8N3Parser3newCs5jEkc0fApSJ_2n3:
  219|  9.59k|    pub fn new() -> Self {
  220|  9.59k|        Self::default()
  221|  9.59k|    }
_RNvXs_NtCseXCYVcIQZ7o_5oxttl2n3NtB4_6N3TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs2NsVQwDzFGg_5oxrdf10named_node9NamedNodeE4fromB6_:
   52|  30.5k|    fn from(node: NamedNode) -> Self {
   53|  30.5k|        Self::NamedNode(node)
   54|  30.5k|    }
_RNvXs0_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_6N3TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefE4fromB7_:
   59|  28.6k|    fn from(node: NamedNodeRef<'_>) -> Self {
   60|  28.6k|        Self::NamedNode(node.into_owned())
   61|  28.6k|    }
_RNvXs1_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_6N3TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs2NsVQwDzFGg_5oxrdf10blank_node9BlankNodeE4fromB7_:
   66|   146k|    fn from(node: BlankNode) -> Self {
   67|   146k|        Self::BlankNode(node)
   68|   146k|    }
_RNvXs2_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_6N3TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs2NsVQwDzFGg_5oxrdf7literal7LiteralE4fromB7_:
   73|  31.7k|    fn from(literal: Literal) -> Self {
   74|  31.7k|        Self::Literal(literal)
   75|  31.7k|    }
_RNvXs8_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_6N3TermINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs2NsVQwDzFGg_5oxrdf8variable8VariableE4fromB7_:
  131|  5.84k|    fn from(variable: Variable) -> Self {
  132|  5.84k|        Self::Variable(variable)
  133|  5.84k|    }
_RNvMsb_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_8N3Parser5parse:
  365|  9.59k|    pub fn parse(self) -> LowLevelN3Reader {
  366|  9.59k|        LowLevelN3Reader {
  367|  9.59k|            parser: N3Recognizer::new_parser(self.unchecked, self.base, self.prefixes),
  368|  9.59k|        }
  369|  9.59k|    }
_RNvMse_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_16LowLevelN3Reader17extend_from_slice:
  624|  1.41M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  625|  1.41M|        self.parser.extend_from_slice(other)
  626|  1.41M|    }
_RNvMse_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_16LowLevelN3Reader3end:
  631|  9.59k|    pub fn end(&mut self) {
  632|  9.59k|        self.parser.end()
  633|  9.59k|    }
_RNvMse_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_16LowLevelN3Reader6is_end:
  636|  9.59k|    pub fn is_end(&self) -> bool {
  637|  9.59k|        self.parser.is_end()
  638|  9.59k|    }
_RNvMse_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_16LowLevelN3Reader9read_next:
  644|  2.42M|    pub fn read_next(&mut self) -> Option<Result<N3Quad, SyntaxError>> {
  645|  2.42M|        self.parser.read_next()
  646|  2.42M|    }
_RNvXsf_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer20error_recovery_state:
  730|   844k|    fn error_recovery_state(mut self) -> Self {
  731|   844k|        self.stack.clear();
  732|   844k|        self.terms.clear();
  733|   844k|        self.predicates.clear();
  734|   844k|        self.contexts.clear();
  735|   844k|        self
  736|   844k|    }
_RNvXsf_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer14recognize_next:
  738|  1.09M|    fn recognize_next(
  739|  1.09M|        mut self,
  740|  1.09M|        token: N3Token<'_>,
  741|  1.09M|        context: &mut N3RecognizerContext,
  742|  1.09M|        results: &mut Vec<N3Quad>,
  743|  1.09M|        errors: &mut Vec<RuleRecognizerError>,
  744|  1.09M|    ) -> Self {
  745|  2.44M|        while let Some(rule) = self.stack.pop() {
  746|  1.84M|            match rule {
  747|       |                // [1]  n3Doc            ::=  ( ( n3Statement ".") | sparqlDirective) *
  748|       |                // [2]  n3Statement      ::=  n3Directive | triples
  749|       |                // [3]  n3Directive      ::=  prefixID | base
  750|       |                // [4]  sparqlDirective  ::=  sparqlBase | sparqlPrefix
  751|       |                // [5]  sparqlBase       ::=  BASE IRIREF
  752|       |                // [6]  sparqlPrefix     ::=  PREFIX PNAME_NS IRIREF
  753|       |                // [7]  prefixID         ::=  "@prefix" PNAME_NS IRIREF
  754|       |                // [8]  base             ::=  "@base" IRIREF
  755|       |                N3State::N3Doc => {
  756|   154k|                    self.stack.push(N3State::N3Doc);
  757|  17.8k|                    match token {
  758|  22.0k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("base") => {
  759|  4.21k|                            self.stack.push(N3State::BaseExpectIri);
  760|  4.21k|                            return self;
  761|       |                        }
  762|  17.8k|                        N3Token::PlainKeyword(k) if k.eq_ignore_ascii_case("prefix") => {
  763|    658|                            self.stack.push(N3State::PrefixExpectPrefix);
  764|    658|                            return self;
  765|       |                        }
  766|  23.4k|                        N3Token::LangTag("prefix") => {
  767|  18.5k|                            self.stack.push(N3State::N3DocExpectDot);
  768|  18.5k|                            self.stack.push(N3State::PrefixExpectPrefix);
  769|  18.5k|                            return self;
  770|       |                        }
  771|  4.95k|                        N3Token::LangTag("base") => {
  772|    274|                            self.stack.push(N3State::N3DocExpectDot);
  773|    274|                            self.stack.push(N3State::BaseExpectIri);
  774|    274|                            return self;
  775|       |                        }
  776|   131k|                        _ => {
  777|   131k|                            self.stack.push(N3State::N3DocExpectDot);
  778|   131k|                            self.stack.push(N3State::Triples);
  779|   131k|                        }
  780|       |                    }
  781|       |                }
  782|       |                N3State::N3DocExpectDot => {
  783|  14.7k|                    if token == N3Token::Punctuation(".") {
  784|  2.93k|                        return self;
  785|  11.7k|                    }
  786|  11.7k|                    errors.push("A dot is expected at the end of N3 statements".into());
  787|       |                }
  788|  4.77k|                N3State::BaseExpectIri => return match token {
  789|  2.49k|                    N3Token::IriRef(iri) => {
  790|  2.49k|                        match Iri::parse_unchecked(iri) {
  791|  2.49k|                            Ok(iri) => {
  792|  2.49k|                                context.lexer_options.base_iri = Some(iri);
  793|  2.49k|                                self
  794|       |                            }
  795|      2|                            Err(e) => self.error(errors, format!("Invalid base IRI: {e}"))
  796|       |                        }
  797|       |                    }
  798|  2.27k|                    _ => self.error(errors, "The BASE keyword should be followed by an IRI"),
  799|       |                },
  800|  17.2k|                N3State::PrefixExpectPrefix => return match token {
  801|  17.2k|                    N3Token::PrefixedName { prefix, local, .. } if local.is_empty() => {
  802|  16.2k|                        self.stack.push(N3State::PrefixExpectIri { name: prefix.to_owned() });
  803|  16.2k|                        self
  804|       |                    }
  805|       |                    _ => {
  806|  2.35k|                        self.error(errors, "The PREFIX keyword should be followed by a prefix like 'ex:'")
  807|       |                    }
  808|       |                },
  809|  14.7k|                N3State::PrefixExpectIri { name } => return match token {
  810|  14.0k|                    N3Token::IriRef(iri) => {
  811|  14.0k|                        match Iri::parse_unchecked(iri) {
  812|  12.8k|                            Ok(iri) => {
  813|  12.8k|                                context.prefixes.insert(name, iri);
  814|  12.8k|                                self
  815|       |                            }
  816|  1.23k|                            Err(e) => self.error(errors, format!("Invalid prefix IRI: {e}"))
  817|       |                        }
  818|       |                    }
  819|    704|                    _ => self.error(errors, "The PREFIX declaration should be followed by a prefix and its value as an IRI"),
  820|       |                },
  821|       |                // [9]  triples  ::=  subject predicateObjectList?
  822|   229k|                N3State::Triples => {
  823|   229k|                    self.stack.push(N3State::TriplesMiddle);
  824|   229k|                    self.stack.push(N3State::Path);
  825|   229k|                }
  826|  32.5k|                N3State::TriplesMiddle => if matches!(token, N3Token::Punctuation("." | "]" | "}" | ")")) {} else {
  827|  26.9k|                    self.stack.push(N3State::TriplesEnd);
  828|  26.9k|                    self.stack.push(N3State::PredicateObjectList);
  829|  26.9k|                },
  830|  8.10k|                N3State::TriplesEnd => {
  831|  8.10k|                    self.terms.pop();
  832|  8.10k|                }
  833|       |                // [10]  predicateObjectList  ::=  verb objectList ( ";" ( verb objectList) ? ) *
  834|  90.7k|                N3State::PredicateObjectList => {
  835|  90.7k|                    self.stack.push(N3State::PredicateObjectListEnd);
  836|  90.7k|                    self.stack.push(N3State::ObjectsList);
  837|  90.7k|                    self.stack.push(N3State::Verb);
  838|  90.7k|                }
  839|       |                N3State::PredicateObjectListEnd => {
  840|  14.3k|                    self.predicates.pop();
  841|  14.3k|                    if token == N3Token::Punctuation(";") {
  842|  3.00k|                        self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  843|  3.00k|                        return self;
  844|  11.3k|                    }
  845|       |                }
  846|  7.28k|                N3State::PredicateObjectListPossibleContinuation => if token == N3Token::Punctuation(";") {
  847|  4.30k|                    self.stack.push(N3State::PredicateObjectListPossibleContinuation);
  848|  4.30k|                    return self;
  849|  2.98k|                } else if matches!(token, N3Token::Punctuation(";" | "." | "}" | "]" | ")")) {} else {
  850|  1.10k|                    self.stack.push(N3State::PredicateObjectListEnd);
  851|  1.10k|                    self.stack.push(N3State::ObjectsList);
  852|  1.10k|                    self.stack.push(N3State::Verb);
  853|  1.10k|                },
  854|       |                // [11]  objectList  ::=  object ( "," object) *
  855|  34.7k|                N3State::ObjectsList => {
  856|  34.7k|                    self.stack.push(N3State::ObjectsListEnd);
  857|  34.7k|                    self.stack.push(N3State::Path);
  858|  34.7k|                }
  859|       |                N3State::ObjectsListEnd => {
  860|  15.1k|                    let object = self.terms.pop().unwrap();
  861|  15.1k|                    let subject = self.terms.last().unwrap().clone();
  862|  15.1k|                    results.push(match self.predicates.last().unwrap().clone() {
  863|  13.9k|                        Predicate::Regular(predicate) => self.quad(
  864|  13.9k|                            subject,
  865|  13.9k|                            predicate,
  866|  13.9k|                            object,
  867|  13.9k|                        ),
  868|  1.23k|                        Predicate::Inverted(predicate) => self.quad(
  869|  1.23k|                            object,
  870|  1.23k|                            predicate,
  871|  1.23k|                            subject,
  872|  1.23k|                        )
  873|       |                    });
  874|  15.1k|                    if token == N3Token::Punctuation(",") {
  875|    871|                        self.stack.push(N3State::ObjectsListEnd);
  876|    871|                        self.stack.push(N3State::Path);
  877|    871|                        return self;
  878|  14.3k|                    }
  879|       |                }
  880|       |                // [12]  verb       ::=  predicate | "a" | ( "has" expression) | ( "is" expression "of") | "=" | "<=" | "=>"
  881|       |                // [14]  predicate  ::=  expression | ( "<-" expression)
  882|  91.8k|                N3State::Verb => match token {
  883|  9.13k|                    N3Token::PlainKeyword("a") => {
  884|  6.08k|                        self.predicates.push(Predicate::Regular(rdf::TYPE.into()));
  885|  6.08k|                        return self;
  886|       |                    }
  887|  3.05k|                    N3Token::PlainKeyword("has") => {
  888|    122|                        self.stack.push(N3State::AfterRegularVerb);
  889|    122|                        self.stack.push(N3State::Path);
  890|    122|                        return self;
  891|       |                    }
  892|  2.93k|                    N3Token::PlainKeyword("is") => {
  893|    788|                        self.stack.push(N3State::AfterVerbIs);
  894|    788|                        self.stack.push(N3State::Path);
  895|    788|                        return self;
  896|       |                    }
  897|  48.0k|                    N3Token::Punctuation("=") => {
  898|  1.28k|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2002/07/owl#sameAs").into()));
  899|  1.28k|                        return self;
  900|       |                    }
  901|  46.7k|                    N3Token::Punctuation("=>") => {
  902|    199|                        self.predicates.push(Predicate::Regular(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  903|    199|                        return self;
  904|       |                    }
  905|  46.5k|                    N3Token::Punctuation("<=") => {
  906|    149|                        self.predicates.push(Predicate::Inverted(NamedNode::new_unchecked("http://www.w3.org/2000/10/swap/log#implies").into()));
  907|    149|                        return self;
  908|       |                    }
  909|  46.3k|                    N3Token::Punctuation("<-") => {
  910|  1.20k|                        self.stack.push(N3State::AfterInvertedVerb);
  911|  1.20k|                        self.stack.push(N3State::Path);
  912|  1.20k|                        return self;
  913|       |                    }
  914|  82.0k|                    _ => {
  915|  82.0k|                        self.stack.push(N3State::AfterRegularVerb);
  916|  82.0k|                        self.stack.push(N3State::Path);
  917|  82.0k|                    }
  918|       |                }
  919|  26.6k|                N3State::AfterRegularVerb => {
  920|  26.6k|                    self.predicates.push(Predicate::Regular(self.terms.pop().unwrap()));
  921|  26.6k|                }
  922|  1.17k|                N3State::AfterInvertedVerb => {
  923|  1.17k|                    self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  924|  1.17k|                }
  925|    771|                N3State::AfterVerbIs => return match token {
  926|    548|                    N3Token::PlainKeyword("of") => {
  927|    122|                        self.predicates.push(Predicate::Inverted(self.terms.pop().unwrap()));
  928|    122|                        self
  929|       |                    }
  930|       |                    _ => {
  931|    649|                        self.error(errors, "The keyword 'is' should be followed by a predicate then by the keyword 'of'")
  932|       |                    }
  933|       |                },
  934|       |                // [13]  subject     ::=  expression
  935|       |                // [15]  object      ::=  expression
  936|       |                // [16]  expression  ::=  path
  937|       |                // [17]  path        ::=  pathItem ( ( "!" path) | ( "^" path) ) ?
  938|   376k|                N3State::Path => {
  939|   376k|                    self.stack.push(N3State::PathFollowUp);
  940|   376k|                    self.stack.push(N3State::PathItem);
  941|   376k|                }
  942|  85.8k|                N3State::PathFollowUp => match token {
  943|  58.8k|                    N3Token::Punctuation("!") => {
  944|  1.03k|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: false });
  945|  1.03k|                        self.stack.push(N3State::PathItem);
  946|  1.03k|                        return self;
  947|       |                    }
  948|  57.7k|                    N3Token::Punctuation("^") => {
  949|    469|                        self.stack.push(N3State::PathAfterIndicator { is_inverse: true });
  950|    469|                        self.stack.push(N3State::PathItem);
  951|    469|                        return self;
  952|       |                    }
  953|  84.3k|                    _ => ()
  954|       |                },
  955|  1.28k|                N3State::PathAfterIndicator { is_inverse } => {
  956|  1.28k|                    let predicate = self.terms.pop().unwrap();
  957|  1.28k|                    let previous = self.terms.pop().unwrap();
  958|  1.28k|                    let current = BlankNode::default();
  959|  1.28k|                    results.push(if is_inverse { self.quad(current.clone(), predicate, previous) } else { self.quad(previous, predicate, current.clone()) });
  960|  1.28k|                    self.terms.push(current.into());
  961|  1.28k|                    self.stack.push(N3State::PathFollowUp);
  962|       |                }
  963|       |                // [18]  pathItem               ::=  iri | blankNode | quickVar | collection | blankNodePropertyList | iriPropertyList | literal | formula
  964|       |                // [19]  literal                ::=  rdfLiteral | numericLiteral | BOOLEAN_LITERAL
  965|       |                // [20]  blankNodePropertyList  ::=  "[" predicateObjectList "]"
  966|       |                // [21]  iriPropertyList        ::=  IPLSTART iri predicateObjectList "]"
  967|       |                // [22]  collection             ::=  "(" object* ")"
  968|       |                // [23]  formula                ::=  "{" formulaContent? "}"
  969|       |                // [25]  numericLiteral         ::=  DOUBLE | DECIMAL | INTEGER
  970|       |                // [26]  rdfLiteral             ::=  STRING ( LANGTAG | ( "^^" iri) ) ?
  971|       |                // [27]  iri                    ::=  IRIREF | prefixedName
  972|       |                // [28]  prefixedName           ::=  PNAME_LN | PNAME_NS
  973|       |                // [29]  blankNode              ::=  BLANK_NODE_LABEL | ANON
  974|       |                // [30]  quickVar               ::=  QUICK_VAR_NAME
  975|       |                N3State::PathItem => {
  976|   377k|                    return match token {
  977|  7.24k|                        N3Token::IriRef(iri) => {
  978|  7.24k|                            self.terms.push(NamedNode::new_unchecked(iri).into());
  979|  7.24k|                            self
  980|       |                        }
  981|  36.0k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
  982|  21.2k|                            Ok(t) => {
  983|  21.2k|                                self.terms.push(t.into());
  984|  21.2k|                                self
  985|       |                            }
  986|  14.8k|                            Err(e) =>  self.error(errors, e)
  987|       |                        }
  988|  6.44k|                        N3Token::BlankNodeLabel(bnode) => {
  989|  6.44k|                            self.terms.push(BlankNode::new_unchecked(bnode).into());
  990|  6.44k|                            self
  991|       |                        }
  992|  5.84k|                        N3Token::Variable(name) => {
  993|  5.84k|                            self.terms.push(Variable::new_unchecked(name).into());
  994|  5.84k|                            self
  995|       |                        }
  996|   259k|                        N3Token::Punctuation("[") => {
  997|  69.2k|                            self.stack.push(N3State::PropertyListMiddle);
  998|  69.2k|                            self
  999|       |                        }
 1000|   190k|                        N3Token::Punctuation("(") => {
 1001|  26.5k|                            self.stack.push(N3State::CollectionBeginning);
 1002|  26.5k|                            self
 1003|       |                        }
 1004|  17.7k|                        N3Token::String(value) => {
 1005|  17.7k|                            self.stack.push(N3State::LiteralPossibleSuffix { value });
 1006|  17.7k|                            self
 1007|       |                        }
 1008|  11.0k|                        N3Token::Integer(v) => {
 1009|  11.0k|                            self.terms.push(Literal::new_typed_literal(v, xsd::INTEGER).into());
 1010|  11.0k|                            self
 1011|       |                        }
 1012|  2.78k|                        N3Token::Decimal(v) => {
 1013|  2.78k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DECIMAL).into());
 1014|  2.78k|                            self
 1015|       |                        }
 1016|  1.26k|                        N3Token::Double(v) => {
 1017|  1.26k|                            self.terms.push(Literal::new_typed_literal(v, xsd::DOUBLE).into());
 1018|  1.26k|                            self
 1019|       |                        }
 1020|  24.0k|                        N3Token::PlainKeyword("true") => {
 1021|    518|                            self.terms.push(Literal::new_typed_literal("true", xsd::BOOLEAN).into());
 1022|    518|                            self
 1023|       |                        }
 1024|  23.4k|                        N3Token::PlainKeyword("false") => {
 1025|    718|                            self.terms.push(Literal::new_typed_literal("false", xsd::BOOLEAN).into());
 1026|    718|                            self
 1027|       |                        }
 1028|   163k|                        N3Token::Punctuation("{") => {
 1029|   110k|                            self.contexts.push(BlankNode::default());
 1030|   110k|                            self.stack.push(N3State::FormulaContent);
 1031|   110k|                            self
 1032|       |                        }
 1033|       |                        _ =>
 1034|  81.1k|                            self.error(errors, "TOKEN is not a valid RDF value")
 1035|       |
 1036|       |                    }
 1037|       |                }
 1038|  65.5k|                N3State::PropertyListMiddle => match token {
 1039|  31.4k|                    N3Token::Punctuation("]") => {
 1040|    932|                        self.terms.push(BlankNode::default().into());
 1041|    932|                        return self;
 1042|       |                    }
 1043|  8.90k|                    N3Token::PlainKeyword("id") => {
 1044|  1.14k|                        self.stack.push(N3State::IriPropertyList);
 1045|  1.14k|                        return self;
 1046|       |                    }
 1047|  63.4k|                    _ => {
 1048|  63.4k|                        self.terms.push(BlankNode::default().into());
 1049|  63.4k|                        self.stack.push(N3State::PropertyListEnd);
 1050|  63.4k|                        self.stack.push(N3State::PredicateObjectList);
 1051|  63.4k|                    }
 1052|       |                }
 1053|  5.08k|                N3State::PropertyListEnd => if token == N3Token::Punctuation("]") {
 1054|    134|                    return self;
 1055|  4.94k|                } else {
 1056|  4.94k|                    errors.push("blank node property lists should end with a ']'".into());
 1057|  4.94k|                }
 1058|  1.10k|                N3State::IriPropertyList => return match token {
 1059|    230|                    N3Token::IriRef(id) => {
 1060|    230|                        self.terms.push(NamedNode::new_unchecked(id).into());
 1061|    230|                        self.stack.push(N3State::PropertyListEnd);
 1062|    230|                        self.stack.push(N3State::PredicateObjectList);
 1063|    230|                        self
 1064|       |                    }
 1065|    537|                    N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1066|    201|                        Ok(t) => {
 1067|    201|                            self.terms.push(t.into());
 1068|    201|                            self.stack.push(N3State::PropertyListEnd);
 1069|    201|                            self.stack.push(N3State::PredicateObjectList);
 1070|    201|                            self
 1071|       |                        }
 1072|    336|                        Err(e) => {
 1073|    336|                            self.error(errors, e)
 1074|       |                        }
 1075|       |                    }
 1076|       |                    _ => {
 1077|    335|                        self.error(errors, "The '[ id' construction should be followed by an IRI")
 1078|       |                    }
 1079|       |                },
 1080|  25.8k|                N3State::CollectionBeginning => if let N3Token::Punctuation(")") = token {
 1081|  1.49k|                    self.terms.push(rdf::NIL.into());
 1082|  1.49k|                    return self;
 1083|  24.3k|                } else {
 1084|  24.3k|                    let root = BlankNode::default();
 1085|  24.3k|                    self.terms.push(root.clone().into());
 1086|  24.3k|                    self.terms.push(root.into());
 1087|  24.3k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1088|  24.3k|                    self.stack.push(N3State::Path);
 1089|  24.3k|                },
 1090|       |                N3State::CollectionPossibleEnd => {
 1091|  8.05k|                    let value = self.terms.pop().unwrap();
 1092|  8.05k|                    let old = self.terms.pop().unwrap();
 1093|  8.05k|                    results.push(self.quad(
 1094|  8.05k|                        old.clone(),
 1095|  8.05k|                        rdf::FIRST,
 1096|  8.05k|                        value,
 1097|  8.05k|                    ));
 1098|  8.05k|                    if let N3Token::Punctuation(")") = token {
 1099|  5.00k|                        results.push(self.quad(
 1100|  5.00k|                            old,
 1101|  5.00k|                            rdf::REST,
 1102|  5.00k|                            rdf::NIL,
 1103|  5.00k|                        ));
 1104|  5.00k|                        return self;
 1105|  3.04k|                    }
 1106|  3.04k|                    let new = BlankNode::default();
 1107|  3.04k|                    results.push(self.quad(
 1108|  3.04k|                        old,
 1109|  3.04k|                        rdf::REST,
 1110|  3.04k|                        new.clone(),
 1111|  3.04k|                    ));
 1112|  3.04k|                    self.terms.push(new.into());
 1113|  3.04k|                    self.stack.push(N3State::CollectionPossibleEnd);
 1114|  3.04k|                    self.stack.push(N3State::Path);
 1115|       |                }
 1116|  16.8k|                N3State::LiteralPossibleSuffix { value } => {
 1117|  16.8k|                    match token {
 1118|    928|                        N3Token::LangTag(lang) => {
 1119|    928|                            self.terms.push(Literal::new_language_tagged_literal_unchecked(value, lang.to_ascii_lowercase()).into());
 1120|    928|                            return self;
 1121|       |                        }
 1122|  4.17k|                        N3Token::Punctuation("^^") => {
 1123|  2.70k|                            self.stack.push(N3State::LiteralExpectDatatype { value });
 1124|  2.70k|                            return self;
 1125|       |                        }
 1126|  13.2k|                        _ => {
 1127|  13.2k|                            self.terms.push(Literal::new_simple_literal(value).into());
 1128|  13.2k|                        }
 1129|       |                    }
 1130|       |                }
 1131|  2.34k|                N3State::LiteralExpectDatatype { value } => {
 1132|  2.34k|                    match token {
 1133|    650|                        N3Token::IriRef(datatype) => {
 1134|    650|                            self.terms.push(Literal::new_typed_literal(value, NamedNode::new_unchecked(datatype)).into());
 1135|    650|                            return self;
 1136|       |                        }
 1137|  1.11k|                        N3Token::PrefixedName { prefix, local, might_be_invalid_iri } => match resolve_local_name(prefix, &local, might_be_invalid_iri, &context.prefixes) {
 1138|    613|                            Ok(datatype) => {
 1139|    613|                                self.terms.push(Literal::new_typed_literal(value, datatype).into());
 1140|    613|                                return self;
 1141|       |                            }
 1142|    504|                            Err(e) => {
 1143|    504|                                return self.error(errors, e);
 1144|       |                            }
 1145|       |                        }
 1146|    575|                        _ => {
 1147|    575|                            errors.push("Expecting a datatype IRI after '^^, found TOKEN".into());
 1148|    575|                            self.stack.clear();
 1149|    575|                        }
 1150|       |                    }
 1151|       |                }
 1152|       |                // [24]  formulaContent  ::=  ( n3Statement ( "." formulaContent? ) ? ) | ( sparqlDirective formulaContent? )
 1153|       |                N3State::FormulaContent => {
 1154|  3.40k|                    match token {
 1155|   105k|                        N3Token::Punctuation("}") => {
 1156|  15.0k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1157|  15.0k|                            return self;
 1158|       |                        }
 1159|  3.69k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("base") => {
 1160|    287|                            self.stack.push(N3State::FormulaContent);
 1161|    287|                            self.stack.push(N3State::BaseExpectIri);
 1162|    287|                            return self;
 1163|       |                        }
 1164|  3.40k|                        N3Token::PlainKeyword(k)if k.eq_ignore_ascii_case("prefix") => {
 1165|     97|                            self.stack.push(N3State::FormulaContent);
 1166|     97|                            self.stack.push(N3State::PrefixExpectPrefix);
 1167|     97|                            return self;
 1168|       |                        }
 1169|  1.12k|                        N3Token::LangTag("prefix") => {
 1170|    188|                            self.stack.push(N3State::FormulaContentExpectDot);
 1171|    188|                            self.stack.push(N3State::PrefixExpectPrefix);
 1172|    188|                            return self;
 1173|       |                        }
 1174|    935|                        N3Token::LangTag("base") => {
 1175|    162|                            self.stack.push(N3State::FormulaContentExpectDot);
 1176|    162|                            self.stack.push(N3State::BaseExpectIri);
 1177|    162|                            return self;
 1178|       |                        }
 1179|  98.7k|                        _ => {
 1180|  98.7k|                            self.stack.push(N3State::FormulaContentExpectDot);
 1181|  98.7k|                            self.stack.push(N3State::Triples);
 1182|  98.7k|                        }
 1183|       |                    }
 1184|       |                }
 1185|       |                N3State::FormulaContentExpectDot => {
 1186|  7.19k|                    match token {
 1187|  6.01k|                        N3Token::Punctuation("}") => {
 1188|  2.97k|                            self.terms.push(self.contexts.pop().unwrap().into());
 1189|  2.97k|                            return self;
 1190|       |                        }
 1191|  3.04k|                        N3Token::Punctuation(".") => {
 1192|    945|                            self.stack.push(N3State::FormulaContent);
 1193|    945|                            return self;
 1194|       |                        }
 1195|  3.28k|                        _ => {
 1196|  3.28k|                            errors.push("A dot is expected at the end of N3 statements".into());
 1197|  3.28k|                            self.stack.push(N3State::FormulaContent);
 1198|  3.28k|                        }
 1199|       |                    }
 1200|       |                }
 1201|       |            }
 1202|       |        }
 1203|       |        // Empty stack
 1204|   601k|        if token == N3Token::Punctuation(".") {
 1205|   165k|            self.stack.push(N3State::N3Doc);
 1206|   165k|            self
 1207|       |        } else {
 1208|   436k|            self
 1209|       |        }
 1210|  1.09M|    }
_RNvXsf_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13recognize_end:
 1212|  9.59k|    fn recognize_end(
 1213|  9.59k|        self,
 1214|  9.59k|        _state: &mut N3RecognizerContext,
 1215|  9.59k|        _results: &mut Vec<Self::Output>,
 1216|  9.59k|        errors: &mut Vec<RuleRecognizerError>,
 1217|  9.59k|    ) {
 1218|  9.59k|        match &*self.stack {
 1219|  9.59k|            [] | [N3State::N3Doc] => (),
 1220|  1.22k|            _ => errors.push("Unexpected end".into()), // TODO
 1221|       |        }
 1222|  9.59k|    }
_RNvXsf_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_12N3RecognizerNtNtNtB7_7toolkit6parser14RuleRecognizer13lexer_options:
 1224|  3.37M|    fn lexer_options(context: &N3RecognizerContext) -> &N3LexerOptions {
 1225|  3.37M|        &context.lexer_options
 1226|  3.37M|    }
_RNvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB5_12N3Recognizer10new_parser:
 1230|  9.59k|    pub fn new_parser(
 1231|  9.59k|        unchecked: bool,
 1232|  9.59k|        base_iri: Option<Iri<String>>,
 1233|  9.59k|        prefixes: HashMap<String, Iri<String>>,
 1234|  9.59k|    ) -> Parser<Self> {
 1235|  9.59k|        Parser::new(
 1236|  9.59k|            Lexer::new(
 1237|  9.59k|                N3Lexer::new(N3LexerMode::N3, unchecked),
 1238|  9.59k|                MIN_BUFFER_SIZE,
 1239|  9.59k|                MAX_BUFFER_SIZE,
 1240|  9.59k|                true,
 1241|  9.59k|                Some(b"#"),
 1242|  9.59k|            ),
 1243|  9.59k|            Self {
 1244|  9.59k|                stack: vec![N3State::N3Doc],
 1245|  9.59k|                terms: Vec::new(),
 1246|  9.59k|                predicates: Vec::new(),
 1247|  9.59k|                contexts: Vec::new(),
 1248|  9.59k|            },
 1249|  9.59k|            N3RecognizerContext {
 1250|  9.59k|                lexer_options: N3LexerOptions { base_iri },
 1251|  9.59k|                prefixes,
 1252|  9.59k|            },
 1253|  9.59k|        )
 1254|  9.59k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer5errorNtNtCs80BIJ2NAVqC_5alloc6string6StringEB8_:
 1257|  16.9k|    fn error(
 1258|  16.9k|        mut self,
 1259|  16.9k|        errors: &mut Vec<RuleRecognizerError>,
 1260|  16.9k|        msg: impl Into<RuleRecognizerError>,
 1261|  16.9k|    ) -> Self {
 1262|  16.9k|        errors.push(msg.into());
 1263|  16.9k|        self.stack.clear();
 1264|  16.9k|        self
 1265|  16.9k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer5errorReEB8_:
 1257|  87.4k|    fn error(
 1258|  87.4k|        mut self,
 1259|  87.4k|        errors: &mut Vec<RuleRecognizerError>,
 1260|  87.4k|        msg: impl Into<RuleRecognizerError>,
 1261|  87.4k|    ) -> Self {
 1262|  87.4k|        errors.push(msg.into());
 1263|  87.4k|        self.stack.clear();
 1264|  87.4k|        self
 1265|  87.4k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_BT_EB8_:
 1267|  15.1k|    fn quad(
 1268|  15.1k|        &self,
 1269|  15.1k|        subject: impl Into<N3Term>,
 1270|  15.1k|        predicate: impl Into<N3Term>,
 1271|  15.1k|        object: impl Into<N3Term>,
 1272|  15.1k|    ) -> N3Quad {
 1273|  15.1k|        N3Quad {
 1274|  15.1k|            subject: subject.into(),
 1275|  15.1k|            predicate: predicate.into(),
 1276|  15.1k|            object: object.into(),
 1277|  15.1k|            graph_name: self
 1278|  15.1k|                .contexts
 1279|  15.1k|                .last()
 1280|  15.1k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1281|  15.1k|        }
 1282|  15.1k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermBT_NtNtCs2NsVQwDzFGg_5oxrdf10blank_node9BlankNodeEB8_:
 1267|    917|    fn quad(
 1268|    917|        &self,
 1269|    917|        subject: impl Into<N3Term>,
 1270|    917|        predicate: impl Into<N3Term>,
 1271|    917|        object: impl Into<N3Term>,
 1272|    917|    ) -> N3Quad {
 1273|    917|        N3Quad {
 1274|    917|            subject: subject.into(),
 1275|    917|            predicate: predicate.into(),
 1276|    917|            object: object.into(),
 1277|    917|            graph_name: self
 1278|    917|                .contexts
 1279|    917|                .last()
 1280|    917|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1281|    917|        }
 1282|    917|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefB15_EB8_:
 1267|  5.00k|    fn quad(
 1268|  5.00k|        &self,
 1269|  5.00k|        subject: impl Into<N3Term>,
 1270|  5.00k|        predicate: impl Into<N3Term>,
 1271|  5.00k|        object: impl Into<N3Term>,
 1272|  5.00k|    ) -> N3Quad {
 1273|  5.00k|        N3Quad {
 1274|  5.00k|            subject: subject.into(),
 1275|  5.00k|            predicate: predicate.into(),
 1276|  5.00k|            object: object.into(),
 1277|  5.00k|            graph_name: self
 1278|  5.00k|                .contexts
 1279|  5.00k|                .last()
 1280|  5.00k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1281|  5.00k|        }
 1282|  5.00k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefBT_EB8_:
 1267|  8.05k|    fn quad(
 1268|  8.05k|        &self,
 1269|  8.05k|        subject: impl Into<N3Term>,
 1270|  8.05k|        predicate: impl Into<N3Term>,
 1271|  8.05k|        object: impl Into<N3Term>,
 1272|  8.05k|    ) -> N3Quad {
 1273|  8.05k|        N3Quad {
 1274|  8.05k|            subject: subject.into(),
 1275|  8.05k|            predicate: predicate.into(),
 1276|  8.05k|            object: object.into(),
 1277|  8.05k|            graph_name: self
 1278|  8.05k|                .contexts
 1279|  8.05k|                .last()
 1280|  8.05k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1281|  8.05k|        }
 1282|  8.05k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer4quadNtB6_6N3TermNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefNtNtB19_10blank_node9BlankNodeEB8_:
 1267|  3.04k|    fn quad(
 1268|  3.04k|        &self,
 1269|  3.04k|        subject: impl Into<N3Term>,
 1270|  3.04k|        predicate: impl Into<N3Term>,
 1271|  3.04k|        object: impl Into<N3Term>,
 1272|  3.04k|    ) -> N3Quad {
 1273|  3.04k|        N3Quad {
 1274|  3.04k|            subject: subject.into(),
 1275|  3.04k|            predicate: predicate.into(),
 1276|  3.04k|            object: object.into(),
 1277|  3.04k|            graph_name: self
 1278|  3.04k|                .contexts
 1279|  3.04k|                .last()
 1280|  3.04k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1281|  3.04k|        }
 1282|  3.04k|    }
_RINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB6_12N3Recognizer4quadNtNtCs2NsVQwDzFGg_5oxrdf10blank_node9BlankNodeNtB6_6N3TermB1D_EB8_:
 1267|    372|    fn quad(
 1268|    372|        &self,
 1269|    372|        subject: impl Into<N3Term>,
 1270|    372|        predicate: impl Into<N3Term>,
 1271|    372|        object: impl Into<N3Term>,
 1272|    372|    ) -> N3Quad {
 1273|    372|        N3Quad {
 1274|    372|            subject: subject.into(),
 1275|    372|            predicate: predicate.into(),
 1276|    372|            object: object.into(),
 1277|    372|            graph_name: self
 1278|    372|                .contexts
 1279|    372|                .last()
 1280|    372|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
 1281|    372|        }
 1282|    372|    }
_RNCINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_BV_E0Ba_:
 1280|  4.73k|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermBV_NtNtCs2NsVQwDzFGg_5oxrdf10blank_node9BlankNodeE0Ba_:
 1280|    102|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefB17_E0Ba_:
 1280|    221|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefBV_E0Ba_:
 1280|    673|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB8_12N3Recognizer4quadNtB8_6N3TermNtNtCs2NsVQwDzFGg_5oxrdf10named_node12NamedNodeRefNtNtB1b_10blank_node9BlankNodeE0Ba_:
 1280|    452|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),
_RNCINvMsg_NtCseXCYVcIQZ7o_5oxttl2n3NtB8_12N3Recognizer4quadNtNtCs2NsVQwDzFGg_5oxrdf10blank_node9BlankNodeNtB8_6N3TermB1F_E0Ba_:
 1280|    261|                .map_or(GraphName::DefaultGraph, |g| g.clone().into()),

_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1a_3ops5range5RangejENtNtCs80BIJ2NAVqC_5alloc6string6StringEE4fromB6_:
   31|   592k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   592k|        Self {
   33|   592k|            location,
   34|   592k|            message: message.into(),
   35|   592k|        }
   36|   592k|    }
_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB2_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1a_3ops5range5RangejEReEE4fromB6_:
   31|   268k|    fn from((location, message): (Range<usize>, S)) -> Self {
   32|   268k|        Self {
   33|   268k|            location,
   34|   268k|            message: message.into(),
   35|   268k|        }
   36|   268k|    }
_RNvXs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejENtNtCs80BIJ2NAVqC_5alloc6string6StringEE4fromB8_:
   41|  10.7k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|  10.7k|        (*location.start()..*location.end() + 1, message).into()
   43|  10.7k|    }
_RNvXs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB4_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTINtNtNtB1c_3ops5range14RangeInclusivejEReEE4fromB8_:
   41|   187k|    fn from((location, message): (RangeInclusive<usize>, S)) -> Self {
   42|   187k|        (*location.start()..*location.end() + 1, message).into()
   43|   187k|    }
_RNvXs0_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerNtB5_20TokenRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromTjNtNtCs80BIJ2NAVqC_5alloc6string6StringEE4fromB9_:
   47|  8.53k|    fn from((location, message): (usize, S)) -> Self {
   48|  8.53k|        (location..=location, message).into()
   49|  8.53k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3newB9_:
   73|  9.59k|    pub fn new(
   74|  9.59k|        parser: R,
   75|  9.59k|        min_buffer_size: usize,
   76|  9.59k|        max_buffer_size: usize,
   77|  9.59k|        is_line_jump_whitespace: bool,
   78|  9.59k|        line_comment_start: Option<&'static [u8]>,
   79|  9.59k|    ) -> Self {
   80|  9.59k|        Self {
   81|  9.59k|            parser,
   82|  9.59k|            data: Vec::new(),
   83|  9.59k|            position: Position {
   84|  9.59k|                line_start_buffer_offset: 0,
   85|  9.59k|                buffer_offset: 0,
   86|  9.59k|                global_offset: 0,
   87|  9.59k|                global_line: 0,
   88|  9.59k|            },
   89|  9.59k|            previous_position: Position {
   90|  9.59k|                line_start_buffer_offset: 0,
   91|  9.59k|                buffer_offset: 0,
   92|  9.59k|                global_offset: 0,
   93|  9.59k|                global_line: 0,
   94|  9.59k|            },
   95|  9.59k|            is_ending: false,
   96|  9.59k|            min_buffer_size,
   97|  9.59k|            max_buffer_size,
   98|  9.59k|            is_line_jump_whitespace,
   99|  9.59k|            line_comment_start,
  100|  9.59k|        }
  101|  9.59k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17extend_from_sliceB9_:
  103|  1.41M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
  104|  1.41M|        self.shrink_data();
  105|  1.41M|        self.data.extend_from_slice(other);
  106|  1.41M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE3endB9_:
  109|  9.59k|    pub fn end(&mut self) {
  110|  9.59k|        self.is_ending = true;
  111|  9.59k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE9read_nextB9_:
  166|  3.37M|    pub fn read_next(&mut self, options: &R::Options) -> Option<Result<R::Token<'_>, SyntaxError>> {
  167|  3.37M|        self.skip_whitespaces_and_comments()?;
  168|  3.36M|        self.previous_position = self.position;
  169|  3.36M|        let Some((consumed, result)) = self.parser.recognize_next_token(
  170|  3.36M|            &self.data[self.position.buffer_offset..],
  171|  3.36M|            self.is_ending,
  172|  3.36M|            options,
  173|  3.36M|        ) else {
  174|  1.42M|            return if self.is_ending {
  175|  21.8k|                if self.position.buffer_offset == self.data.len() {
  176|  19.1k|                    None // We have finished
  177|       |                } else {
  178|  2.67k|                    let (new_line_jumps, new_line_start) =
  179|  2.67k|                        Self::find_number_of_line_jumps_and_start_of_last_line(
  180|  2.67k|                            &self.data[self.position.buffer_offset..],
  181|  2.67k|                        );
  182|  2.67k|                    if new_line_jumps > 0 {
  183|     62|                        self.position.line_start_buffer_offset =
  184|     62|                            self.position.buffer_offset + new_line_start;
  185|  2.61k|                    }
  186|  2.67k|                    self.position.global_offset +=
  187|  2.67k|                        u64::try_from(self.data.len() - self.position.buffer_offset).unwrap();
  188|  2.67k|                    self.position.buffer_offset = self.data.len();
  189|  2.67k|                    self.position.global_line += new_line_jumps;
  190|  2.67k|                    let new_position = TextPosition {
  191|  2.67k|                        line: self.position.global_line,
  192|  2.67k|                        column: Self::column_from_bytes(
  193|  2.67k|                            &self.data[self.position.line_start_buffer_offset..],
  194|  2.67k|                        ),
  195|  2.67k|                        offset: self.position.global_offset,
  196|  2.67k|                    };
  197|  2.67k|                    let error = SyntaxError {
  198|  2.67k|                        location: new_position..new_position,
  199|  2.67k|                        message: "Unexpected end of file".into(),
  200|  2.67k|                    };
  201|  2.67k|                    self.position.buffer_offset = self.data.len(); // We consume everything
  202|  2.67k|                    Some(Err(error))
  203|       |                }
  204|       |            } else {
  205|  1.40M|                None
  206|       |            };
  207|       |        };
  208|  1.94M|        debug_assert!(
  209|      0|            consumed > 0,
  210|      0|            "The lexer must consume at least one byte each time"
  211|       |        );
  212|  1.94M|        debug_assert!(
  213|      0|            self.position.buffer_offset + consumed <= self.data.len(),
  214|      0|            "The lexer tried to consumed {consumed} bytes but only {} bytes are readable",
  215|      0|            self.data.len() - self.position.buffer_offset
  216|       |        );
  217|  1.94M|        let (new_line_jumps, new_line_start) =
  218|  1.94M|            Self::find_number_of_line_jumps_and_start_of_last_line(
  219|  1.94M|                &self.data[self.position.buffer_offset..self.position.buffer_offset + consumed],
  220|  1.94M|            );
  221|  1.94M|        if new_line_jumps > 0 {
  222|  2.60k|            self.position.line_start_buffer_offset = self.position.buffer_offset + new_line_start;
  223|  1.93M|        }
  224|  1.94M|        self.position.buffer_offset += consumed;
  225|  1.94M|        self.position.global_offset += u64::try_from(consumed).unwrap();
  226|  1.94M|        self.position.global_line += new_line_jumps;
  227|  1.94M|        Some(result.map_err(|e| SyntaxError {
  228|       |            location: self.location_from_buffer_offset_range(e.location),
  229|       |            message: e.message,
  230|  1.94M|        }))
  231|  3.37M|    }
_RNCNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB7_5LexerNtNtBb_5lexer7N3LexerE9read_next0Bb_:
  227|   841k|        Some(result.map_err(|e| SyntaxError {
  228|   841k|            location: self.location_from_buffer_offset_range(e.location),
  229|   841k|            message: e.message,
  230|   841k|        }))
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE33location_from_buffer_offset_rangeB9_:
  233|   841k|    pub fn location_from_buffer_offset_range(
  234|   841k|        &self,
  235|   841k|        offset_range: Range<usize>,
  236|   841k|    ) -> Range<TextPosition> {
  237|   841k|        let start_offset = self.previous_position.buffer_offset + offset_range.start;
  238|   841k|        let (start_extra_line_jumps, start_line_start) =
  239|   841k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  240|   841k|                &self.data[self.previous_position.buffer_offset..start_offset],
  241|   841k|            );
  242|   841k|        let start_line_start = if start_extra_line_jumps > 0 {
  243|    742|            start_line_start + self.previous_position.buffer_offset
  244|       |        } else {
  245|   841k|            self.previous_position.line_start_buffer_offset
  246|       |        };
  247|   841k|        let end_offset = self.previous_position.buffer_offset + offset_range.end;
  248|   841k|        let (end_extra_line_jumps, end_line_start) =
  249|   841k|            Self::find_number_of_line_jumps_and_start_of_last_line(
  250|   841k|                &self.data[self.previous_position.buffer_offset..end_offset],
  251|   841k|            );
  252|   841k|        let end_line_start = if end_extra_line_jumps > 0 {
  253|  2.63k|            end_line_start + self.previous_position.buffer_offset
  254|       |        } else {
  255|   839k|            self.previous_position.line_start_buffer_offset
  256|       |        };
  257|   841k|        TextPosition {
  258|   841k|            line: self.previous_position.global_line + start_extra_line_jumps,
  259|   841k|            column: Self::column_from_bytes(&self.data[start_line_start..start_offset]),
  260|   841k|            offset: self.previous_position.global_offset
  261|   841k|                + u64::try_from(offset_range.start).unwrap(),
  262|   841k|        }..TextPosition {
  263|   841k|            line: self.previous_position.global_line + end_extra_line_jumps,
  264|   841k|            column: Self::column_from_bytes(&self.data[end_line_start..end_offset]),
  265|   841k|            offset: self.previous_position.global_offset + u64::try_from(offset_range.end).unwrap(),
  266|   841k|        }
  267|   841k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE19last_token_locationB9_:
  269|   126k|    pub fn last_token_location(&self) -> Range<TextPosition> {
  270|   126k|        TextPosition {
  271|   126k|            line: self.previous_position.global_line,
  272|   126k|            column: Self::column_from_bytes(
  273|   126k|                &self.data[self.previous_position.line_start_buffer_offset
  274|   126k|                    ..self.previous_position.buffer_offset],
  275|   126k|            ),
  276|   126k|            offset: self.previous_position.global_offset,
  277|   126k|        }..TextPosition {
  278|   126k|            line: self.position.global_line,
  279|   126k|            column: Self::column_from_bytes(
  280|   126k|                &self.data[self.position.line_start_buffer_offset..self.position.buffer_offset],
  281|   126k|            ),
  282|   126k|            offset: self.position.global_offset,
  283|   126k|        }
  284|   126k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17last_token_sourceB9_:
  286|   126k|    pub fn last_token_source(&self) -> Cow<'_, str> {
  287|   126k|        String::from_utf8_lossy(
  288|   126k|            &self.data[self.previous_position.buffer_offset..self.position.buffer_offset],
  289|   126k|        )
  290|   126k|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE6is_endB9_:
  292|  1.43M|    pub fn is_end(&self) -> bool {
  293|  1.43M|        self.is_ending && self.data.len() == self.position.buffer_offset
  294|  1.43M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE29skip_whitespaces_and_commentsB9_:
  297|  3.37M|    fn skip_whitespaces_and_comments(&mut self) -> Option<()> {
  298|       |        loop {
  299|  3.37M|            self.skip_whitespaces()?;
  300|       |
  301|  3.37M|            let buf = &self.data[self.position.buffer_offset..];
  302|  3.37M|            if let Some(line_comment_start) = self.line_comment_start {
  303|  3.37M|                if buf.starts_with(line_comment_start) {
  304|       |                    // Comment
  305|  9.24k|                    if let Some(end) = memchr2(b'\r', b'\n', &buf[line_comment_start.len()..]) {
  306|  4.27k|                        let mut end_position = line_comment_start.len() + end;
  307|  4.27k|                        if buf.get(end_position).copied() == Some(b'\r') {
  308|       |                            // We look for \n for Windows line end style
  309|  3.70k|                            if let Some(c) = buf.get(end_position + 1) {
  310|    838|                                if *c == b'\n' {
  311|      0|                                    end_position += 1;
  312|    838|                                }
  313|  2.86k|                            } else if !self.is_ending {
  314|  2.84k|                                return None; // We need to read more
  315|     16|                            }
  316|    573|                        }
  317|  1.42k|                        let comment_size = end_position + 1;
  318|  1.42k|                        self.position.buffer_offset += comment_size;
  319|  1.42k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  320|  1.42k|                        self.position.global_offset += u64::try_from(comment_size).unwrap();
  321|  1.42k|                        self.position.global_line += 1;
  322|  1.42k|                        continue;
  323|  4.96k|                    }
  324|  4.96k|                    if self.is_ending {
  325|     96|                        self.position.buffer_offset = self.data.len(); // EOF
  326|     96|                        return Some(());
  327|  4.86k|                    }
  328|  4.86k|                    return None; // We need more data
  329|  3.36M|                }
  330|      0|            }
  331|  3.36M|            return Some(());
  332|       |        }
  333|  3.37M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE16skip_whitespacesB9_:
  335|  3.37M|    fn skip_whitespaces(&mut self) -> Option<()> {
  336|  3.37M|        if self.is_line_jump_whitespace {
  337|  3.37M|            let mut i = self.position.buffer_offset;
  338|  3.41M|            while let Some(c) = self.data.get(i) {
  339|  3.06M|                match c {
  340|  10.1k|                    b' ' | b'\t' => {
  341|  10.1k|                        self.position.buffer_offset += 1;
  342|  10.1k|                        self.position.global_offset += 1;
  343|  10.1k|                    }
  344|       |                    b'\r' => {
  345|       |                        // We look for \n for Windows line end style
  346|  9.09k|                        let mut increment: u8 = 1;
  347|  9.09k|                        if let Some(c) = self.data.get(i + 1) {
  348|  6.58k|                            if *c == b'\n' {
  349|    102|                                increment += 1;
  350|    102|                                i += 1;
  351|  6.48k|                            }
  352|  2.51k|                        } else if !self.is_ending {
  353|  2.46k|                            return None; // We need to read more
  354|     46|                        }
  355|  6.63k|                        self.position.buffer_offset += usize::from(increment);
  356|  6.63k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  357|  6.63k|                        self.position.global_offset += u64::from(increment);
  358|  6.63k|                        self.position.global_line += 1;
  359|       |                    }
  360|  21.7k|                    b'\n' => {
  361|  21.7k|                        self.position.buffer_offset += 1;
  362|  21.7k|                        self.position.line_start_buffer_offset = self.position.buffer_offset;
  363|  21.7k|                        self.position.global_offset += 1;
  364|  21.7k|                        self.position.global_line += 1;
  365|  21.7k|                    }
  366|  3.02M|                    _ => return Some(()),
  367|       |                }
  368|  38.5k|                i += 1;
  369|       |                // TODO: SIMD
  370|       |            }
  371|       |        } else {
  372|      0|            for c in &self.data[self.position.buffer_offset..] {
  373|      0|                if matches!(c, b' ' | b'\t') {
  374|      0|                    self.position.buffer_offset += 1;
  375|      0|                    self.position.global_offset += 1;
  376|      0|                } else {
  377|      0|                    return Some(());
  378|       |                }
  379|       |                // TODO: SIMD
  380|       |            }
  381|       |        }
  382|   346k|        Some(())
  383|  3.37M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE11shrink_dataB9_:
  385|  1.41M|    fn shrink_data(&mut self) {
  386|  1.41M|        if self.position.line_start_buffer_offset > 0 {
  387|  22.8k|            self.data
  388|  22.8k|                .copy_within(self.position.line_start_buffer_offset.., 0);
  389|  22.8k|            self.data
  390|  22.8k|                .truncate(self.data.len() - self.position.line_start_buffer_offset);
  391|  22.8k|            self.position.buffer_offset -= self.position.line_start_buffer_offset;
  392|  22.8k|            self.position.line_start_buffer_offset = 0;
  393|  22.8k|            self.previous_position = self.position;
  394|  1.38M|        }
  395|  1.41M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE48find_number_of_line_jumps_and_start_of_last_lineB9_:
  397|  3.62M|    fn find_number_of_line_jumps_and_start_of_last_line(bytes: &[u8]) -> (u64, usize) {
  398|  3.62M|        let mut num_of_jumps = 0;
  399|  3.62M|        let mut last_jump_pos = 0;
  400|  3.62M|        let mut previous_cr = 0;
  401|  3.62M|        for pos in memchr2_iter(b'\r', b'\n', bytes) {
  402|  17.0k|            if bytes[pos] == b'\r' {
  403|  4.97k|                previous_cr = pos;
  404|  4.97k|                num_of_jumps += 1;
  405|  4.97k|                last_jump_pos = pos + 1;
  406|  4.97k|            } else {
  407|  12.0k|                if previous_cr < pos - 1 {
  408|  4.77k|                    // We count \r\n as a single line jump
  409|  4.77k|                    num_of_jumps += 1;
  410|  7.27k|                }
  411|  12.0k|                last_jump_pos = pos + 1;
  412|       |            }
  413|       |        }
  414|  3.62M|        (num_of_jumps, last_jump_pos)
  415|  3.62M|    }
_RNvMs1_NtNtCseXCYVcIQZ7o_5oxttl7toolkit5lexerINtB5_5LexerNtNtB9_5lexer7N3LexerE17column_from_bytesB9_:
  417|  3.31M|    fn column_from_bytes(bytes: &[u8]) -> u64 {
  418|  3.31M|        match str::from_utf8(bytes) {
  419|  1.61M|            Ok(s) => u64::try_from(s.chars().count()).unwrap(),
  420|  1.69M|            Err(e) => {
  421|  1.69M|                if e.valid_up_to() == 0 {
  422|   323k|                    0
  423|       |                } else {
  424|  1.37M|                    Self::column_from_bytes(&bytes[..e.valid_up_to()])
  425|       |                }
  426|       |            }
  427|       |        }
  428|  3.31M|    }

_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromNtNtCs80BIJ2NAVqC_5alloc6string6StringE4fromB6_:
   39|  16.9k|    fn from(message: S) -> Self {
   40|  16.9k|        Self {
   41|  16.9k|            message: message.into(),
   42|  16.9k|        }
   43|  16.9k|    }
_RNvXNtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserNtB2_19RuleRecognizerErrorINtNtCs433v4DNuM1R_4core7convert4FromReE4fromB6_:
   39|   109k|    fn from(message: S) -> Self {
   40|   109k|        Self {
   41|   109k|            message: message.into(),
   42|   109k|        }
   43|   109k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3newB8_:
   56|  9.59k|    pub fn new(lexer: Lexer<RR::TokenRecognizer>, recognizer: RR, context: RR::Context) -> Self {
   57|  9.59k|        Self {
   58|  9.59k|            lexer,
   59|  9.59k|            state: Some(recognizer),
   60|  9.59k|            context,
   61|  9.59k|            results: vec![],
   62|  9.59k|            errors: vec![],
   63|  9.59k|        }
   64|  9.59k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE17extend_from_sliceB8_:
   66|  1.41M|    pub fn extend_from_slice(&mut self, other: &[u8]) {
   67|  1.41M|        self.lexer.extend_from_slice(other)
   68|  1.41M|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE3endB8_:
   71|  9.59k|    pub fn end(&mut self) {
   72|  9.59k|        self.lexer.end()
   73|  9.59k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE6is_endB8_:
   76|  9.59k|    pub fn is_end(&self) -> bool {
   77|  9.59k|        self.state.is_none() && self.results.is_empty() && self.errors.is_empty()
   78|  9.59k|    }
_RNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB4_6ParserNtNtB8_2n312N3RecognizerE9read_nextB8_:
   80|  2.42M|    pub fn read_next(&mut self) -> Option<Result<RR::Output, SyntaxError>> {
   81|       |        loop {
   82|  3.53M|            if let Some(error) = self.errors.pop() {
   83|   126k|                return Some(Err(SyntaxError {
   84|   126k|                    location: self.lexer.last_token_location(),
   85|   126k|                    message: error
   86|   126k|                        .message
   87|   126k|                        .replace("TOKEN", &self.lexer.last_token_source()),
   88|   126k|                }));
   89|  3.40M|            }
   90|  3.40M|            if let Some(result) = self.results.pop() {
   91|  32.5k|                return Some(Ok(result));
   92|  3.37M|            }
   93|  3.37M|            if let Some(result) = self.lexer.read_next(RR::lexer_options(&self.context)) {
   94|  1.94M|                match result {
   95|  1.09M|                    Ok(token) => {
   96|  1.09M|                        self.state = self.state.take().map(|state| {
   97|       |                            state.recognize_next(
   98|       |                                token,
   99|       |                                &mut self.context,
  100|       |                                &mut self.results,
  101|       |                                &mut self.errors,
  102|       |                            )
  103|  1.09M|                        });
  104|  1.09M|                        continue;
  105|       |                    }
  106|   844k|                    Err(e) => {
  107|   844k|                        self.state = self.state.take().map(RR::error_recovery_state);
  108|   844k|                        return Some(Err(e));
  109|       |                    }
  110|       |                }
  111|  1.43M|            }
  112|  1.43M|            if self.lexer.is_end() {
  113|  19.1k|                self.state.take()?.recognize_end(
  114|  9.59k|                    &mut self.context,
  115|  9.59k|                    &mut self.results,
  116|  9.59k|                    &mut self.errors,
  117|  9.59k|                )
  118|       |            } else {
  119|  1.41M|                return None;
  120|       |            }
  121|       |        }
  122|  2.42M|    }
_RNCNvMs_NtNtCseXCYVcIQZ7o_5oxttl7toolkit6parserINtB6_6ParserNtNtBa_2n312N3RecognizerE9read_next0Ba_:
   96|  1.09M|                        self.state = self.state.take().map(|state| {
   97|  1.09M|                            state.recognize_next(
   98|  1.09M|                                token,
   99|  1.09M|                                &mut self.context,
  100|  1.09M|                                &mut self.results,
  101|  1.09M|                                &mut self.errors,
  102|  1.09M|                            )
  103|  1.09M|                        });


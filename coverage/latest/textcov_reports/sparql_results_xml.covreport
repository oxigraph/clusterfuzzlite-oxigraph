rust_fuzzer_test_input:
  209|  11.1k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  11.1k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  11.1k|                }
  223|  11.1k|
  224|  11.1k|                __libfuzzer_sys_run(bytes);
  225|  11.1k|                0
  226|       |            }
_RNvNvCsGVCQZ00h4W_18sparql_results_xml1__19___libfuzzer_sys_run:
  241|  11.1k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  11.1k|                $body
  243|  11.1k|            }
LLVMFuzzerTestOneInput:
   58|  11.1k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  11.1k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  11.1k|    });
   63|  11.1k|
   64|  11.1k|    match test_input {
   65|  11.1k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  11.1k|}
_RNCNvCsr18Qy4IdNF_13libfuzzer_sys15test_input_wrap0B3_:
   59|  11.1k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  11.1k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  11.1k|        rust_fuzzer_test_input(data_slice)
   62|  11.1k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs8ymoBFYi2FH_10sparesults:
 1044|  4.98k|    pub(crate) unsafe fn next(
 1045|  4.98k|        &mut self,
 1046|  4.98k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  4.98k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  4.98k|        let found = find_raw(self.start, self.end)?;
 1057|  4.18k|        let result = found.distance(self.original_start);
 1058|  4.18k|        self.start = found.add(1);
 1059|  4.18k|        Some(result)
 1060|  4.98k|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs8ymoBFYi2FH_10sparesults:
 1044|   628k|    pub(crate) unsafe fn next(
 1045|   628k|        &mut self,
 1046|   628k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   628k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   628k|        let found = find_raw(self.start, self.end)?;
 1057|   623k|        let result = found.distance(self.original_start);
 1058|   623k|        self.start = found.add(1);
 1059|   623k|        Some(result)
 1060|   628k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs8ymoBFYi2FH_10sparesults:
 1125|   259k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   259k|    haystack: &[u8],
 1127|   259k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   259k|) -> Option<usize> {
 1129|   259k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   259k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   259k|    // a &[u8].
 1132|   259k|    let start = haystack.as_ptr();
 1133|   259k|    let end = start.add(haystack.len());
 1134|   259k|    let found = find_raw(start, end)?;
 1135|   256k|    Some(found.distance(start))
 1136|   259k|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   284k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   284k|        Iter {
 1029|   284k|            original_start: haystack.as_ptr(),
 1030|   284k|            start: haystack.as_ptr(),
 1031|   284k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   284k|            haystack: core::marker::PhantomData,
 1033|   284k|        }
 1034|   284k|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECsjWx60dGvTf3_9quick_xml:
 1044|  2.75M|    pub(crate) unsafe fn next(
 1045|  2.75M|        &mut self,
 1046|  2.75M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  2.75M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  2.75M|        let found = find_raw(self.start, self.end)?;
 1057|  2.72M|        let result = found.distance(self.original_start);
 1058|  2.72M|        self.start = found.add(1);
 1059|  2.72M|        Some(result)
 1060|  2.75M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|  79.9k|    pub(crate) fn needle1(&self) -> u8 {
  118|  79.9k|        self.s1
  119|  79.9k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|   887k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   887k|        One { s1: needle, v1: V::splat(needle) }
  113|   887k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|   887k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|   887k|        One { s1: needle, v1: V::splat(needle) }
  113|   887k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  24.1k|    pub(crate) unsafe fn find_raw(
  144|  24.1k|        &self,
  145|  24.1k|        start: *const u8,
  146|  24.1k|        end: *const u8,
  147|  24.1k|    ) -> Option<*const u8> {
  148|  24.1k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  24.1k|        // need to move up to using a u64 for the masks used below. Currently
  150|  24.1k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  24.1k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  24.1k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  24.1k|        let topos = V::Mask::first_offset;
  155|  24.1k|        let len = end.distance(start);
  156|  24.1k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  24.1k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  22.5k|            return Some(cur);
  167|  1.66k|        }
  168|  1.66k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.66k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  1.66k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.66k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.66k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.04k|        while cur <= end.sub(V::BYTES) {
  213|    747|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    747|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    371|                return Some(cur);
  216|    376|            }
  217|    376|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.29k|        if cur < end {
  224|  1.21k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.21k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.21k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.21k|            return self.search_chunk(cur, topos);
  228|     78|        }
  229|     78|        None
  230|  24.1k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|   836k|    pub(crate) unsafe fn find_raw(
  144|   836k|        &self,
  145|   836k|        start: *const u8,
  146|   836k|        end: *const u8,
  147|   836k|    ) -> Option<*const u8> {
  148|   836k|        // If we want to support vectors bigger than 256 bits, we probably
  149|   836k|        // need to move up to using a u64 for the masks used below. Currently
  150|   836k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|   836k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|   836k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|   836k|        let topos = V::Mask::first_offset;
  155|   836k|        let len = end.distance(start);
  156|   836k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|   836k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|   811k|            return Some(cur);
  167|  24.2k|        }
  168|  24.2k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  24.2k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  24.2k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  24.2k|        if len >= Self::LOOP_SIZE {
  172|  24.5k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  23.5k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  23.5k|                let a = V::load_aligned(cur);
  176|  23.5k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  23.5k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  23.5k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  23.5k|                let eqa = self.v1.cmpeq(a);
  180|  23.5k|                let eqb = self.v1.cmpeq(b);
  181|  23.5k|                let eqc = self.v1.cmpeq(c);
  182|  23.5k|                let eqd = self.v1.cmpeq(d);
  183|  23.5k|                let or1 = eqa.or(eqb);
  184|  23.5k|                let or2 = eqc.or(eqd);
  185|  23.5k|                let or3 = or1.or(or2);
  186|  23.5k|                if or3.movemask_will_have_non_zero() {
  187|  20.8k|                    let mask = eqa.movemask();
  188|  20.8k|                    if mask.has_non_zero() {
  189|  12.0k|                        return Some(cur.add(topos(mask)));
  190|  8.77k|                    }
  191|  8.77k|
  192|  8.77k|                    let mask = eqb.movemask();
  193|  8.77k|                    if mask.has_non_zero() {
  194|  7.29k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.48k|                    }
  196|  1.48k|
  197|  1.48k|                    let mask = eqc.movemask();
  198|  1.48k|                    if mask.has_non_zero() {
  199|  1.12k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    363|                    }
  201|    363|
  202|    363|                    let mask = eqd.movemask();
  203|    363|                    debug_assert!(mask.has_non_zero());
  204|    363|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  2.67k|                }
  206|  2.67k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.35k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  5.73k|        while cur <= end.sub(V::BYTES) {
  213|  4.01k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  4.01k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.65k|                return Some(cur);
  216|  2.36k|            }
  217|  2.36k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.71k|        if cur < end {
  224|  1.62k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.62k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.62k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.62k|            return self.search_chunk(cur, topos);
  228|     92|        }
  229|     92|        None
  230|   836k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  26.1k|    unsafe fn search_chunk(
  417|  26.1k|        &self,
  418|  26.1k|        cur: *const u8,
  419|  26.1k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  26.1k|    ) -> Option<*const u8> {
  421|  26.1k|        let chunk = V::load_unaligned(cur);
  422|  26.1k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  26.1k|        if mask.has_non_zero() {
  424|  23.6k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.47k|            None
  427|       |        }
  428|  26.1k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|   841k|    unsafe fn search_chunk(
  417|   841k|        &self,
  418|   841k|        cur: *const u8,
  419|   841k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|   841k|    ) -> Option<*const u8> {
  421|   841k|        let chunk = V::load_unaligned(cur);
  422|   841k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|   841k|        if mask.has_non_zero() {
  424|   814k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  27.4k|            None
  427|       |        }
  428|   841k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  2.75M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  2.75M|        Two {
  452|  2.75M|            s1: needle1,
  453|  2.75M|            s2: needle2,
  454|  2.75M|            v1: V::splat(needle1),
  455|  2.75M|            v2: V::splat(needle2),
  456|  2.75M|        }
  457|  2.75M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  2.75M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  2.75M|        Two {
  452|  2.75M|            s1: needle1,
  453|  2.75M|            s2: needle2,
  454|  2.75M|            v1: V::splat(needle1),
  455|  2.75M|            v2: V::splat(needle2),
  456|  2.75M|        }
  457|  2.75M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|   280k|    pub(crate) fn needle1(&self) -> u8 {
  462|   280k|        self.s1
  463|   280k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|   229k|    pub(crate) fn needle2(&self) -> u8 {
  468|   229k|        self.s2
  469|   229k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   129k|    pub(crate) unsafe fn find_raw(
  494|   129k|        &self,
  495|   129k|        start: *const u8,
  496|   129k|        end: *const u8,
  497|   129k|    ) -> Option<*const u8> {
  498|   129k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   129k|        // need to move up to using a u64 for the masks used below. Currently
  500|   129k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   129k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   129k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   129k|        let topos = V::Mask::first_offset;
  505|   129k|        let len = end.distance(start);
  506|   129k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   129k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   125k|            return Some(cur);
  517|  3.91k|        }
  518|  3.91k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  3.91k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  3.91k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  3.91k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  3.91k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  5.30k|        while cur <= end.sub(V::BYTES) {
  551|  2.17k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  2.17k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    786|                return Some(cur);
  554|  1.39k|            }
  555|  1.39k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  3.13k|        if cur < end {
  562|  2.95k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  2.95k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  2.95k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  2.95k|            return self.search_chunk(cur, topos);
  566|    177|        }
  567|    177|        None
  568|   129k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.41M|    pub(crate) unsafe fn find_raw(
  494|  2.41M|        &self,
  495|  2.41M|        start: *const u8,
  496|  2.41M|        end: *const u8,
  497|  2.41M|    ) -> Option<*const u8> {
  498|  2.41M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  2.41M|        // need to move up to using a u64 for the masks used below. Currently
  500|  2.41M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  2.41M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  2.41M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.41M|        let topos = V::Mask::first_offset;
  505|  2.41M|        let len = end.distance(start);
  506|  2.41M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.41M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  2.36M|            return Some(cur);
  517|  56.4k|        }
  518|  56.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  56.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  56.4k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  56.4k|        if len >= Self::LOOP_SIZE {
  522|  52.7k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  47.3k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  47.3k|                let a = V::load_aligned(cur);
  526|  47.3k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  47.3k|                let eqa1 = self.v1.cmpeq(a);
  528|  47.3k|                let eqb1 = self.v1.cmpeq(b);
  529|  47.3k|                let eqa2 = self.v2.cmpeq(a);
  530|  47.3k|                let eqb2 = self.v2.cmpeq(b);
  531|  47.3k|                let or1 = eqa1.or(eqb1);
  532|  47.3k|                let or2 = eqa2.or(eqb2);
  533|  47.3k|                let or3 = or1.or(or2);
  534|  47.3k|                if or3.movemask_will_have_non_zero() {
  535|  44.3k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  44.3k|                    if mask.has_non_zero() {
  537|  39.0k|                        return Some(cur.add(topos(mask)));
  538|  5.23k|                    }
  539|  5.23k|
  540|  5.23k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  5.23k|                    debug_assert!(mask.has_non_zero());
  542|  5.23k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  3.05k|                }
  544|  3.05k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  6.65k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  13.4k|        while cur <= end.sub(V::BYTES) {
  551|  7.30k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  7.30k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  5.91k|                return Some(cur);
  554|  1.38k|            }
  555|  1.38k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  6.15k|        if cur < end {
  562|  6.07k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  6.07k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  6.07k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  6.07k|            return self.search_chunk(cur, topos);
  566|     81|        }
  567|     81|        None
  568|  2.41M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   134k|    unsafe fn search_chunk(
  671|   134k|        &self,
  672|   134k|        cur: *const u8,
  673|   134k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   134k|    ) -> Option<*const u8> {
  675|   134k|        let chunk = V::load_unaligned(cur);
  676|   134k|        let eq1 = self.v1.cmpeq(chunk);
  677|   134k|        let eq2 = self.v2.cmpeq(chunk);
  678|   134k|        let mask = eq1.or(eq2).movemask();
  679|   134k|        if mask.has_non_zero() {
  680|   128k|            let mask1 = eq1.movemask();
  681|   128k|            let mask2 = eq2.movemask();
  682|   128k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  5.68k|            None
  685|       |        }
  686|   134k|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.43M|    unsafe fn search_chunk(
  671|  2.43M|        &self,
  672|  2.43M|        cur: *const u8,
  673|  2.43M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.43M|    ) -> Option<*const u8> {
  675|  2.43M|        let chunk = V::load_unaligned(cur);
  676|  2.43M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.43M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.43M|        let mask = eq1.or(eq2).movemask();
  679|  2.43M|        if mask.has_non_zero() {
  680|  2.37M|            let mask1 = eq1.movemask();
  681|  2.37M|            let mask2 = eq2.movemask();
  682|  2.37M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  59.2k|            None
  685|       |        }
  686|  2.43M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBb_:
  710|  4.98k|    pub(crate) unsafe fn new(
  711|  4.98k|        needle1: u8,
  712|  4.98k|        needle2: u8,
  713|  4.98k|        needle3: u8,
  714|  4.98k|    ) -> Three<V> {
  715|  4.98k|        Three {
  716|  4.98k|            s1: needle1,
  717|  4.98k|            s2: needle2,
  718|  4.98k|            s3: needle3,
  719|  4.98k|            v1: V::splat(needle1),
  720|  4.98k|            v2: V::splat(needle2),
  721|  4.98k|            v3: V::splat(needle3),
  722|  4.98k|        }
  723|  4.98k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBb_:
  710|  4.98k|    pub(crate) unsafe fn new(
  711|  4.98k|        needle1: u8,
  712|  4.98k|        needle2: u8,
  713|  4.98k|        needle3: u8,
  714|  4.98k|    ) -> Three<V> {
  715|  4.98k|        Three {
  716|  4.98k|            s1: needle1,
  717|  4.98k|            s2: needle2,
  718|  4.98k|            s3: needle3,
  719|  4.98k|            v1: V::splat(needle1),
  720|  4.98k|            v2: V::splat(needle2),
  721|  4.98k|            v3: V::splat(needle3),
  722|  4.98k|        }
  723|  4.98k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Bb_:
  727|  4.43k|    pub(crate) fn needle1(&self) -> u8 {
  728|  4.43k|        self.s1
  729|  4.43k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  4.09k|    pub(crate) fn needle2(&self) -> u8 {
  734|  4.09k|        self.s2
  735|  4.09k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  3.93k|    pub(crate) fn needle3(&self) -> u8 {
  740|  3.93k|        self.s3
  741|  3.93k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBb_:
  765|    583|    pub(crate) unsafe fn find_raw(
  766|    583|        &self,
  767|    583|        start: *const u8,
  768|    583|        end: *const u8,
  769|    583|    ) -> Option<*const u8> {
  770|    583|        // If we want to support vectors bigger than 256 bits, we probably
  771|    583|        // need to move up to using a u64 for the masks used below. Currently
  772|    583|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|    583|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|    583|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|    583|        let topos = V::Mask::first_offset;
  777|    583|        let len = end.distance(start);
  778|    583|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|    583|        if let Some(cur) = self.search_chunk(start, topos) {
  788|    471|            return Some(cur);
  789|    112|        }
  790|    112|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    112|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|    112|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    112|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    112|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    150|        while cur <= end.sub(V::BYTES) {
  833|     42|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     42|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      4|                return Some(cur);
  836|     38|            }
  837|     38|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    108|        if cur < end {
  844|     85|            debug_assert!(end.distance(cur) < V::BYTES);
  845|     85|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|     85|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|     85|            return self.search_chunk(cur, topos);
  848|     23|        }
  849|     23|        None
  850|    583|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  3.06k|    pub(crate) unsafe fn find_raw(
  766|  3.06k|        &self,
  767|  3.06k|        start: *const u8,
  768|  3.06k|        end: *const u8,
  769|  3.06k|    ) -> Option<*const u8> {
  770|  3.06k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  3.06k|        // need to move up to using a u64 for the masks used below. Currently
  772|  3.06k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  3.06k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  3.06k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  3.06k|        let topos = V::Mask::first_offset;
  777|  3.06k|        let len = end.distance(start);
  778|  3.06k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  3.06k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  1.93k|            return Some(cur);
  789|  1.12k|        }
  790|  1.12k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  1.12k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  1.12k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  1.12k|        if len >= Self::LOOP_SIZE {
  794|  1.20k|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  1.13k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  1.13k|                let a = V::load_aligned(cur);
  798|  1.13k|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  1.13k|                let eqa1 = self.v1.cmpeq(a);
  800|  1.13k|                let eqb1 = self.v1.cmpeq(b);
  801|  1.13k|                let eqa2 = self.v2.cmpeq(a);
  802|  1.13k|                let eqb2 = self.v2.cmpeq(b);
  803|  1.13k|                let eqa3 = self.v3.cmpeq(a);
  804|  1.13k|                let eqb3 = self.v3.cmpeq(b);
  805|  1.13k|                let or1 = eqa1.or(eqb1);
  806|  1.13k|                let or2 = eqa2.or(eqb2);
  807|  1.13k|                let or3 = eqa3.or(eqb3);
  808|  1.13k|                let or4 = or1.or(or2);
  809|  1.13k|                let or5 = or3.or(or4);
  810|  1.13k|                if or5.movemask_will_have_non_zero() {
  811|    987|                    let mask = eqa1
  812|    987|                        .movemask()
  813|    987|                        .or(eqa2.movemask())
  814|    987|                        .or(eqa3.movemask());
  815|    987|                    if mask.has_non_zero() {
  816|    587|                        return Some(cur.add(topos(mask)));
  817|    400|                    }
  818|    400|
  819|    400|                    let mask = eqb1
  820|    400|                        .movemask()
  821|    400|                        .or(eqb2.movemask())
  822|    400|                        .or(eqb3.movemask());
  823|    400|                    debug_assert!(mask.has_non_zero());
  824|    400|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|    143|                }
  826|    143|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|     66|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    175|        while cur <= end.sub(V::BYTES) {
  833|     77|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     77|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|     44|                return Some(cur);
  836|     33|            }
  837|     33|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|     98|        if cur < end {
  844|     77|            debug_assert!(end.distance(cur) < V::BYTES);
  845|     77|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|     77|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|     77|            return self.search_chunk(cur, topos);
  848|     21|        }
  849|     21|        None
  850|  3.06k|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|    710|    unsafe fn search_chunk(
  963|    710|        &self,
  964|    710|        cur: *const u8,
  965|    710|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|    710|    ) -> Option<*const u8> {
  967|    710|        let chunk = V::load_unaligned(cur);
  968|    710|        let eq1 = self.v1.cmpeq(chunk);
  969|    710|        let eq2 = self.v2.cmpeq(chunk);
  970|    710|        let eq3 = self.v3.cmpeq(chunk);
  971|    710|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|    710|        if mask.has_non_zero() {
  973|    507|            let mask1 = eq1.movemask();
  974|    507|            let mask2 = eq2.movemask();
  975|    507|            let mask3 = eq3.movemask();
  976|    507|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    203|            None
  979|       |        }
  980|    710|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  3.21k|    unsafe fn search_chunk(
  963|  3.21k|        &self,
  964|  3.21k|        cur: *const u8,
  965|  3.21k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  3.21k|    ) -> Option<*const u8> {
  967|  3.21k|        let chunk = V::load_unaligned(cur);
  968|  3.21k|        let eq1 = self.v1.cmpeq(chunk);
  969|  3.21k|        let eq2 = self.v2.cmpeq(chunk);
  970|  3.21k|        let eq3 = self.v3.cmpeq(chunk);
  971|  3.21k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  3.21k|        if mask.has_non_zero() {
  973|  2.02k|            let mask1 = eq1.movemask();
  974|  2.02k|            let mask2 = eq2.movemask();
  975|  2.02k|            let mask3 = eq3.movemask();
  976|  2.02k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  1.19k|            None
  979|       |        }
  980|  3.21k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  26.3k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  26.3k|    start: *const u8,
 1150|  26.3k|    end: *const u8,
 1151|  26.3k|    confirm: F,
 1152|  26.3k|) -> Option<*const u8> {
 1153|  26.3k|    debug_assert!(start <= end);
 1154|  26.3k|    let mut ptr = start;
 1155|  84.9k|    while ptr < end {
 1156|  79.9k|        if confirm(*ptr) {
 1157|  21.3k|            return Some(ptr);
 1158|  58.5k|        }
 1159|  58.5k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.99k|    None
 1162|  26.3k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   191k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   191k|    start: *const u8,
 1150|   191k|    end: *const u8,
 1151|   191k|    confirm: F,
 1152|   191k|) -> Option<*const u8> {
 1153|   191k|    debug_assert!(start <= end);
 1154|   191k|    let mut ptr = start;
 1155|   289k|    while ptr < end {
 1156|   280k|        if confirm(*ptr) {
 1157|   181k|            return Some(ptr);
 1158|  98.3k|        }
 1159|  98.3k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  9.33k|    None
 1162|   191k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  1.29k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.29k|    start: *const u8,
 1150|  1.29k|    end: *const u8,
 1151|  1.29k|    confirm: F,
 1152|  1.29k|) -> Option<*const u8> {
 1153|  1.29k|    debug_assert!(start <= end);
 1154|  1.29k|    let mut ptr = start;
 1155|  5.05k|    while ptr < end {
 1156|  4.43k|        if confirm(*ptr) {
 1157|    673|            return Some(ptr);
 1158|  3.76k|        }
 1159|  3.76k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|    622|    None
 1162|  1.29k|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|   887k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|   887k|        One {
   71|   887k|            sse2: generic::One::new(needle),
   72|   887k|            avx2: generic::One::new(needle),
   73|   887k|        }
   74|   887k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|   887k|    pub unsafe fn find_raw(
  180|   887k|        &self,
  181|   887k|        start: *const u8,
  182|   887k|        end: *const u8,
  183|   887k|    ) -> Option<*const u8> {
  184|   887k|        if start >= end {
  185|    850|            return None;
  186|   886k|        }
  187|   886k|        let len = end.distance(start);
  188|   886k|        if len < __m256i::BYTES {
  189|  50.5k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  26.3k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  26.3k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  24.1k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|   836k|        }
  201|   836k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|   836k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|   836k|        // enough to run on the vector routine. Pointer validity is caller's
  204|   836k|        // responsibility.
  205|   836k|        //
  206|   836k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|   836k|        // means we'd have to annotate this routine with `target_feature`.
  208|   836k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|   836k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|   836k|        // The real problem is that a routine with a `target_feature`
  211|   836k|        // annotation generally can't be inlined into caller code unless
  212|   836k|        // the caller code has the same target feature annotations. Namely,
  213|   836k|        // the common case (at time of writing) is for calling code to not
  214|   836k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|   836k|        // `target_feature` on this routine, it can be inlined which will
  216|   836k|        // handle some of the short-haystack cases above without touching the
  217|   836k|        // architecture specific code.
  218|   836k|        self.find_raw_avx2(start, end)
  219|   887k|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  79.9k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  79.9k|                    b == self.sse2.needle1()
  194|  79.9k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  24.1k|    unsafe fn find_raw_sse2(
  337|  24.1k|        &self,
  338|  24.1k|        start: *const u8,
  339|  24.1k|        end: *const u8,
  340|  24.1k|    ) -> Option<*const u8> {
  341|  24.1k|        self.sse2.find_raw(start, end)
  342|  24.1k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|   836k|    unsafe fn find_raw_avx2(
  397|   836k|        &self,
  398|   836k|        start: *const u8,
  399|   836k|        end: *const u8,
  400|   836k|    ) -> Option<*const u8> {
  401|   836k|        self.avx2.find_raw(start, end)
  402|   836k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  2.75M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  2.75M|        Two {
  558|  2.75M|            sse2: generic::Two::new(needle1, needle2),
  559|  2.75M|            avx2: generic::Two::new(needle1, needle2),
  560|  2.75M|        }
  561|  2.75M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  2.75M|    pub unsafe fn find_raw(
  655|  2.75M|        &self,
  656|  2.75M|        start: *const u8,
  657|  2.75M|        end: *const u8,
  658|  2.75M|    ) -> Option<*const u8> {
  659|  2.75M|        if start >= end {
  660|  17.8k|            return None;
  661|  2.73M|        }
  662|  2.73M|        let len = end.distance(start);
  663|  2.73M|        if len < __m256i::BYTES {
  664|   320k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   191k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   191k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   129k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.41M|        }
  676|  2.41M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.41M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.41M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.41M|        // responsibility.
  680|  2.41M|        //
  681|  2.41M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.41M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.41M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.41M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.41M|        // The real problem is that a routine with a `target_feature`
  686|  2.41M|        // annotation generally can't be inlined into caller code unless
  687|  2.41M|        // the caller code has the same target feature annotations. Namely,
  688|  2.41M|        // the common case (at time of writing) is for calling code to not
  689|  2.41M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.41M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.41M|        // handle some of the short-haystack cases above without touching the
  692|  2.41M|        // architecture specific code.
  693|  2.41M|        self.find_raw_avx2(start, end)
  694|  2.75M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|   280k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|   280k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   280k|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   129k|    unsafe fn find_raw_sse2(
  765|   129k|        &self,
  766|   129k|        start: *const u8,
  767|   129k|        end: *const u8,
  768|   129k|    ) -> Option<*const u8> {
  769|   129k|        self.sse2.find_raw(start, end)
  770|   129k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.41M|    unsafe fn find_raw_avx2(
  805|  2.41M|        &self,
  806|  2.41M|        start: *const u8,
  807|  2.41M|        end: *const u8,
  808|  2.41M|    ) -> Option<*const u8> {
  809|  2.41M|        self.avx2.find_raw(start, end)
  810|  2.41M|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  4.98k|    pub unsafe fn new_unchecked(
  936|  4.98k|        needle1: u8,
  937|  4.98k|        needle2: u8,
  938|  4.98k|        needle3: u8,
  939|  4.98k|    ) -> Three {
  940|  4.98k|        Three {
  941|  4.98k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  4.98k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  4.98k|        }
  944|  4.98k|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  4.98k|    pub unsafe fn find_raw(
 1038|  4.98k|        &self,
 1039|  4.98k|        start: *const u8,
 1040|  4.98k|        end: *const u8,
 1041|  4.98k|    ) -> Option<*const u8> {
 1042|  4.98k|        if start >= end {
 1043|     42|            return None;
 1044|  4.93k|        }
 1045|  4.93k|        let len = end.distance(start);
 1046|  4.93k|        if len < __m256i::BYTES {
 1047|  1.87k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  1.29k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  1.29k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|    583|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  3.06k|        }
 1061|  3.06k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  3.06k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  3.06k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  3.06k|        // responsibility.
 1065|  3.06k|        //
 1066|  3.06k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  3.06k|        // means we'd have to annotate this routine with `target_feature`.
 1068|  3.06k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  3.06k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  3.06k|        // The real problem is that a routine with a `target_feature`
 1071|  3.06k|        // annotation generally can't be inlined into caller code unless
 1072|  3.06k|        // the caller code has the same target feature annotations. Namely,
 1073|  3.06k|        // the common case (at time of writing) is for calling code to not
 1074|  3.06k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  3.06k|        // `target_feature` on this routine, it can be inlined which will
 1076|  3.06k|        // handle some of the short-haystack cases above without touching the
 1077|  3.06k|        // architecture specific code.
 1078|  3.06k|        self.find_raw_avx2(start, end)
 1079|  4.98k|    }
_RNCNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|  4.43k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|  4.43k|                    b == self.sse2.needle1()
 1052|  4.09k|                        || b == self.sse2.needle2()
 1053|  3.93k|                        || b == self.sse2.needle3()
 1054|  4.43k|                })
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|    583|    unsafe fn find_raw_sse2(
 1152|    583|        &self,
 1153|    583|        start: *const u8,
 1154|    583|        end: *const u8,
 1155|    583|    ) -> Option<*const u8> {
 1156|    583|        self.sse2.find_raw(start, end)
 1157|    583|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  3.06k|    unsafe fn find_raw_avx2(
 1192|  3.06k|        &self,
 1193|  3.06k|        start: *const u8,
 1194|  3.06k|        end: *const u8,
 1195|  3.06k|    ) -> Option<*const u8> {
 1196|  3.06k|        self.avx2.find_raw(start, end)
 1197|  3.06k|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|   887k|pub(crate) fn memchr_raw(
  175|   887k|    n1: u8,
  176|   887k|    start: *const u8,
  177|   887k|    end: *const u8,
  178|   887k|) -> Option<*const u8> {
  179|   887k|    // SAFETY: We provide a valid function pointer type.
  180|   887k|    unsafe_ifunc!(
  181|   887k|        One,
  182|   887k|        find_raw,
  183|   887k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|   887k|        Option<*const u8>,
  185|   887k|        start,
  186|   887k|        end,
  187|   887k|        n1
  188|   887k|    )
  189|   887k|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  2.75M|pub(crate) fn memchr2_raw(
  221|  2.75M|    n1: u8,
  222|  2.75M|    n2: u8,
  223|  2.75M|    start: *const u8,
  224|  2.75M|    end: *const u8,
  225|  2.75M|) -> Option<*const u8> {
  226|  2.75M|    // SAFETY: We provide a valid function pointer type.
  227|  2.75M|    unsafe_ifunc!(
  228|  2.75M|        Two,
  229|  2.75M|        find_raw,
  230|  2.75M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  2.75M|        Option<*const u8>,
  232|  2.75M|        start,
  233|  2.75M|        end,
  234|  2.75M|        n1,
  235|  2.75M|        n2
  236|  2.75M|    )
  237|  2.75M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  4.98k|pub(crate) fn memchr3_raw(
  271|  4.98k|    n1: u8,
  272|  4.98k|    n2: u8,
  273|  4.98k|    n3: u8,
  274|  4.98k|    start: *const u8,
  275|  4.98k|    end: *const u8,
  276|  4.98k|) -> Option<*const u8> {
  277|  4.98k|    // SAFETY: We provide a valid function pointer type.
  278|  4.98k|    unsafe_ifunc!(
  279|  4.98k|        Three,
  280|  4.98k|        find_raw,
  281|  4.98k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  4.98k|        Option<*const u8>,
  283|  4.98k|        start,
  284|  4.98k|        end,
  285|  4.98k|        n1,
  286|  4.98k|        n2,
  287|  4.98k|        n3
  288|  4.98k|    )
  289|  4.98k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|   887k|        unsafe fn find_avx2(
   79|   887k|            $($needle: u8),+,
   80|   887k|            $hay_start: *const u8,
   81|   887k|            $hay_end: *const u8,
   82|   887k|        ) -> $retty {
   83|   887k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   887k|            $memchrty::new_unchecked($($needle),+)
   85|   887k|                .$memchrfind($hay_start, $hay_end)
   86|   887k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  2.75M|        unsafe fn find_avx2(
   79|  2.75M|            $($needle: u8),+,
   80|  2.75M|            $hay_start: *const u8,
   81|  2.75M|            $hay_end: *const u8,
   82|  2.75M|        ) -> $retty {
   83|  2.75M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.75M|            $memchrty::new_unchecked($($needle),+)
   85|  2.75M|                .$memchrfind($hay_start, $hay_end)
   86|  2.75M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  4.98k|        unsafe fn find_avx2(
   79|  4.98k|            $($needle: u8),+,
   80|  4.98k|            $hay_start: *const u8,
   81|  4.98k|            $hay_end: *const u8,
   82|  4.98k|        ) -> $retty {
   83|  4.98k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  4.98k|            $memchrty::new_unchecked($($needle),+)
   85|  4.98k|                .$memchrfind($hay_start, $hay_end)
   86|  4.98k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  10.6M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  10.6M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  10.6M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  10.6M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  87.4k|    fn as_usize(self) -> usize {
   27|  87.4k|        self as usize
   28|  87.4k|    }

_RNvMNtCseJq1f3D7C0A_6memchr6memchrNtB2_6Memchr3newCs8ymoBFYi2FH_10sparesults:
  300|   253k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|   253k|        Memchr {
  302|   253k|            needle1,
  303|   253k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|   253k|        }
  305|   253k|    }
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs8ymoBFYi2FH_10sparesults:
  377|  27.2k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  27.2k|        Memchr2 {
  379|  27.2k|            needle1,
  380|  27.2k|            needle2,
  381|  27.2k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  27.2k|        }
  383|  27.2k|    }
_RNvMs6_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr33newCs8ymoBFYi2FH_10sparesults:
  446|  1.36k|    pub fn new(
  447|  1.36k|        needle1: u8,
  448|  1.36k|        needle2: u8,
  449|  1.36k|        needle3: u8,
  450|  1.36k|        haystack: &'h [u8],
  451|  1.36k|    ) -> Memchr3<'h> {
  452|  1.36k|        Memchr3 {
  453|  1.36k|            needle1,
  454|  1.36k|            needle2,
  455|  1.36k|            needle3,
  456|  1.36k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  1.36k|        }
  458|  1.36k|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr_iterCs8ymoBFYi2FH_10sparesults:
  216|   253k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|   253k|    Memchr::new(needle, haystack)
  218|   253k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs8ymoBFYi2FH_10sparesults:
  232|  27.2k|pub fn memchr2_iter<'h>(
  233|  27.2k|    needle1: u8,
  234|  27.2k|    needle2: u8,
  235|  27.2k|    haystack: &'h [u8],
  236|  27.2k|) -> Memchr2<'h> {
  237|  27.2k|    Memchr2::new(needle1, needle2, haystack)
  238|  27.2k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr3_iterCs8ymoBFYi2FH_10sparesults:
  256|  1.36k|pub fn memchr3_iter<'h>(
  257|  1.36k|    needle1: u8,
  258|  1.36k|    needle2: u8,
  259|  1.36k|    needle3: u8,
  260|  1.36k|    haystack: &'h [u8],
  261|  1.36k|) -> Memchr3<'h> {
  262|  1.36k|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  1.36k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCs8ymoBFYi2FH_10sparesults:
   27|   259k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   259k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   259k|    // pointer between start and end.
   30|   259k|    unsafe {
   31|   259k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   259k|        })
   34|   259k|    }
   35|   259k|}
_RNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs8ymoBFYi2FH_10sparesults:
  465|  4.98k|    fn next(&mut self) -> Option<usize> {
  466|  4.98k|        // SAFETY: All of our implementations of memchr ensure that any
  467|  4.98k|        // pointers returns will fall within the start and end bounds, and this
  468|  4.98k|        // upholds the safety contract of `self.it.next`.
  469|  4.98k|        unsafe {
  470|  4.98k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  4.98k|            })
  473|  4.98k|        }
  474|  4.98k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB4_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs8ymoBFYi2FH_10sparesults:
  312|   628k|    fn next(&mut self) -> Option<usize> {
  313|   628k|        // SAFETY: All of our implementations of memchr ensure that any
  314|   628k|        // pointers returns will fall within the start and end bounds, and this
  315|   628k|        // upholds the safety contract of `self.it.next`.
  316|   628k|        unsafe {
  317|   628k|            // NOTE: I attempted to define an enum of previously created
  318|   628k|            // searchers and then switch on those here instead of just
  319|   628k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|   628k|            // that turned out to have a fair bit of extra overhead when
  321|   628k|            // searching very small haystacks.
  322|   628k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|   628k|        }
  324|   628k|    }
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsjWx60dGvTf3_9quick_xml:
  395|  2.75M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsjWx60dGvTf3_9quick_xml:
  470|  4.98k|            self.it.next(|s, e| {
  471|  4.98k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  4.98k|            })
_RNCNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB6_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0CsjWx60dGvTf3_9quick_xml:
  322|   628k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCsjWx60dGvTf3_9quick_xml:
  377|  2.17k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  2.17k|        Memchr2 {
  379|  2.17k|            needle1,
  380|  2.17k|            needle2,
  381|  2.17k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  2.17k|        }
  383|  2.17k|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawCsjWx60dGvTf3_9quick_xml:
  504|   628k|unsafe fn memchr_raw(
  505|   628k|    needle: u8,
  506|   628k|    start: *const u8,
  507|   628k|    end: *const u8,
  508|   628k|) -> Option<*const u8> {
  509|   628k|    #[cfg(target_arch = "x86_64")]
  510|   628k|    {
  511|   628k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   628k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   628k|        // time. This function also handles using a fallback if neither AVX2
  514|   628k|        // nor SSE2 (unusual) are available.
  515|   628k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   628k|    }
  517|   628k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   628k|    {
  519|   628k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   628k|    }
  521|   628k|    #[cfg(target_arch = "aarch64")]
  522|   628k|    {
  523|   628k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   628k|    }
  525|   628k|    #[cfg(not(any(
  526|   628k|        target_arch = "x86_64",
  527|   628k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   628k|        target_arch = "aarch64"
  529|   628k|    )))]
  530|   628k|    {
  531|   628k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   628k|    }
  533|   628k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCsjWx60dGvTf3_9quick_xml:
  574|  2.75M|unsafe fn memchr2_raw(
  575|  2.75M|    needle1: u8,
  576|  2.75M|    needle2: u8,
  577|  2.75M|    start: *const u8,
  578|  2.75M|    end: *const u8,
  579|  2.75M|) -> Option<*const u8> {
  580|  2.75M|    #[cfg(target_arch = "x86_64")]
  581|  2.75M|    {
  582|  2.75M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  2.75M|    }
  584|  2.75M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  2.75M|    {
  586|  2.75M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  2.75M|    }
  588|  2.75M|    #[cfg(target_arch = "aarch64")]
  589|  2.75M|    {
  590|  2.75M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  2.75M|    }
  592|  2.75M|    #[cfg(not(any(
  593|  2.75M|        target_arch = "x86_64",
  594|  2.75M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  2.75M|        target_arch = "aarch64"
  596|  2.75M|    )))]
  597|  2.75M|    {
  598|  2.75M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  2.75M|            .find_raw(start, end)
  600|  2.75M|    }
  601|  2.75M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr3_rawCsjWx60dGvTf3_9quick_xml:
  646|  4.98k|unsafe fn memchr3_raw(
  647|  4.98k|    needle1: u8,
  648|  4.98k|    needle2: u8,
  649|  4.98k|    needle3: u8,
  650|  4.98k|    start: *const u8,
  651|  4.98k|    end: *const u8,
  652|  4.98k|) -> Option<*const u8> {
  653|  4.98k|    #[cfg(target_arch = "x86_64")]
  654|  4.98k|    {
  655|  4.98k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  4.98k|            needle1, needle2, needle3, start, end,
  657|  4.98k|        )
  658|  4.98k|    }
  659|  4.98k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  4.98k|    {
  661|  4.98k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  4.98k|            needle1, needle2, needle3, start, end,
  663|  4.98k|        )
  664|  4.98k|    }
  665|  4.98k|    #[cfg(target_arch = "aarch64")]
  666|  4.98k|    {
  667|  4.98k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  4.98k|            needle1, needle2, needle3, start, end,
  669|  4.98k|        )
  670|  4.98k|    }
  671|  4.98k|    #[cfg(not(any(
  672|  4.98k|        target_arch = "x86_64",
  673|  4.98k|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  4.98k|        target_arch = "aarch64"
  675|  4.98k|    )))]
  676|  4.98k|    {
  677|  4.98k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  4.98k|            .find_raw(start, end)
  679|  4.98k|    }
  680|  4.98k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCsjWx60dGvTf3_9quick_xml:
  232|  2.17k|pub fn memchr2_iter<'h>(
  233|  2.17k|    needle1: u8,
  234|  2.17k|    needle2: u8,
  235|  2.17k|    haystack: &'h [u8],
  236|  2.17k|) -> Memchr2<'h> {
  237|  2.17k|    Memchr2::new(needle1, needle2, haystack)
  238|  2.17k|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsjWx60dGvTf3_9quick_xml:
  390|  2.75M|    fn next(&mut self) -> Option<usize> {
  391|  2.75M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  2.75M|        // pointers returns will fall within the start and end bounds, and this
  393|  2.75M|        // upholds the safety contract of `self.it.next`.
  394|  2.75M|        unsafe {
  395|  2.75M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  2.75M|        }
  397|  2.75M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|   259k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   259k|            memchr_raw(needle, start, end)
   33|   259k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|   259k|unsafe fn memchr_raw(
  505|   259k|    needle: u8,
  506|   259k|    start: *const u8,
  507|   259k|    end: *const u8,
  508|   259k|) -> Option<*const u8> {
  509|   259k|    #[cfg(target_arch = "x86_64")]
  510|   259k|    {
  511|   259k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   259k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   259k|        // time. This function also handles using a fallback if neither AVX2
  514|   259k|        // nor SSE2 (unusual) are available.
  515|   259k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   259k|    }
  517|   259k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   259k|    {
  519|   259k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   259k|    }
  521|   259k|    #[cfg(target_arch = "aarch64")]
  522|   259k|    {
  523|   259k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   259k|    }
  525|   259k|    #[cfg(not(any(
  526|   259k|        target_arch = "x86_64",
  527|   259k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   259k|        target_arch = "aarch64"
  529|   259k|    )))]
  530|   259k|    {
  531|   259k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   259k|    }
  533|   259k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  3.40M|    fn get_for_offset(self) -> u32 {
  127|  3.40M|        #[cfg(target_endian = "big")]
  128|  3.40M|        {
  129|  3.40M|            self.0.swap_bytes()
  130|  3.40M|        }
  131|  3.40M|        #[cfg(target_endian = "little")]
  132|  3.40M|        {
  133|  3.40M|            self.0
  134|  3.40M|        }
  135|  3.40M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  3.40M|    fn first_offset(self) -> usize {
  172|  3.40M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  3.40M|        // the bytes so we are in practice), where the most significant byte
  174|  3.40M|        // is at a higher address. That means the least significant bit that
  175|  3.40M|        // is set corresponds to the position of our first matching byte.
  176|  3.40M|        // That position corresponds to the number of zeros after the least
  177|  3.40M|        // significant bit.
  178|  3.40M|        self.get_for_offset().trailing_zeros() as usize
  179|  3.40M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  3.58M|    fn has_non_zero(self) -> bool {
  147|  3.58M|        self.0 != 0
  148|  3.58M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|   161k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|   161k|            _mm_loadu_si128(data as *const __m128i)
  219|   161k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|   420k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|   420k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|   420k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|   297k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|   297k|            _mm_cmpeq_epi8(self, vector2)
  229|   297k|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  72.0k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  72.0k|        self.movemask().has_non_zero()
   65|  72.0k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  3.27M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  3.27M|            _mm256_loadu_si256(data as *const __m256i)
  268|  3.27M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  8.23M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  8.23M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  8.23M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  6.00M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  6.00M|            _mm256_cmpeq_epi8(self, vector2)
  278|  6.00M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  2.55M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  2.55M|        SensibleMoveMask(self.0 | other.0)
  163|  2.55M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  6.41M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  6.41M|            _mm_set1_epi8(byte as i8)
  209|  6.41M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|   135k|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|   135k|            _mm_or_si128(self, vector2)
  239|   135k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  6.41M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  6.41M|            _mm256_set1_epi8(byte as i8)
  258|  6.41M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|   191k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|   191k|            _mm256_load_si256(data as *const __m256i)
  263|   191k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  2.65M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  2.65M|            _mm256_or_si256(self, vector2)
  288|  2.65M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsr18Qy4IdNF_13libfuzzer_sys:
   49|  11.1k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  11.1k|        // An `Acquire` load is enough because that makes all the initialization
   51|  11.1k|        // operations visible to us, and, this being a fast path, weaker
   52|  11.1k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  11.1k|        // `SeqCst` operations on the slow path.
   54|  11.1k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  11.1k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsr18Qy4IdNF_13libfuzzer_sys:
  963|  11.1k|        pub fn get(&self) -> Option<&T> {
  964|  11.1k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  11.1k|                None
  969|       |            }
  970|  11.1k|        }

_RNvMs_NtCsjWx60dGvTf3_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  3.82k|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  3.82k|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  2.72k|        decoded
   90|  3.82k|    }

_RNvXs6_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtBS_3str5error9Utf8ErrorE4fromB7_:
  235|  1.09k|    fn from(error: Utf8Error) -> Error {
  236|  1.09k|        Error::NonDecodable(Some(error))
  237|  1.09k|    }
_RNvXs8_NtCsjWx60dGvTf3_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromB7_:
  251|    265|    fn from(error: EscapeError) -> Error {
  252|    265|        Error::EscapeError(error)
  253|    265|    }

_RINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNvB2_25resolve_predefined_entityEB4_:
  229|  2.17k|pub fn unescape_with<'input, 'entity, F>(
  230|  2.17k|    raw: &'input str,
  231|  2.17k|    mut resolve_entity: F,
  232|  2.17k|) -> Result<Cow<'input, str>, EscapeError>
  233|  2.17k|where
  234|  2.17k|    // the lifetime of the output comes from a capture or is `'static`
  235|  2.17k|    F: FnMut(&str) -> Option<&'entity str>,
  236|  2.17k|{
  237|  2.17k|    let bytes = raw.as_bytes();
  238|  2.17k|    let mut unescaped = None;
  239|  2.17k|    let mut last_end = 0;
  240|  2.17k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  241|  49.0k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  242|  47.1k|        match iter.next() {
  243|  46.9k|            Some(end) if bytes[end] == b';' => {
  244|  46.9k|                // append valid data
  245|  46.9k|                if unescaped.is_none() {
  246|    780|                    unescaped = Some(String::with_capacity(raw.len()));
  247|  46.2k|                }
  248|  46.9k|                let unescaped = unescaped.as_mut().expect("initialized");
  249|  46.9k|                unescaped.push_str(&raw[last_end..start]);
  250|  46.9k|
  251|  46.9k|                // search for character correctness
  252|  46.9k|                let pat = &raw[start + 1..end];
  253|  46.9k|                if let Some(entity) = pat.strip_prefix('#') {
  254|  39.5k|                    let codepoint = parse_number(entity, start..end)?;
  255|  39.5k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  256|  7.41k|                } else if let Some(value) = resolve_entity(pat) {
  257|  7.33k|                    unescaped.push_str(value);
  258|  7.33k|                } else {
  259|     81|                    return Err(EscapeError::UnrecognizedSymbol(
  260|     81|                        start + 1..end,
  261|     81|                        pat.to_string(),
  262|     81|                    ));
  263|       |                }
  264|       |
  265|  46.8k|                last_end = end + 1;
  266|       |            }
  267|    116|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  268|       |        }
  269|       |    }
  270|       |
  271|  1.90k|    if let Some(mut unescaped) = unescaped {
  272|    588|        if let Some(raw) = raw.get(last_end..) {
  273|    588|            unescaped.push_str(raw);
  274|    588|        }
  275|    588|        Ok(Cow::Owned(unescaped))
  276|       |    } else {
  277|  1.31k|        Ok(Cow::Borrowed(raw))
  278|       |    }
  279|  2.17k|}
_RNCINvNtCsjWx60dGvTf3_9quick_xml6escape13unescape_withNvB4_25resolve_predefined_entityE0B6_:
  241|  53.6k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCsjWx60dGvTf3_9quick_xml6escape25resolve_predefined_entityB3_:
  287|  7.41k|pub const fn resolve_predefined_entity(entity: &str) -> Option<&'static str> {
  288|  7.41k|    #[cfg(not(feature = "escape-html"))]
  289|  7.41k|    {
  290|  7.41k|        resolve_xml_entity(entity)
  291|  7.41k|    }
  292|  7.41k|
  293|  7.41k|    #[cfg(feature = "escape-html")]
  294|  7.41k|    {
  295|  7.41k|        resolve_html5_entity(entity)
  296|  7.41k|    }
  297|  7.41k|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape18resolve_xml_entity:
  317|  7.41k|pub const fn resolve_xml_entity(entity: &str) -> Option<&'static str> {
  318|       |    // match over strings are not allowed in const functions
  319|  7.41k|    let s = match entity.as_bytes() {
  320|  7.41k|        b"lt" => "<",
  321|  2.67k|        b"gt" => ">",
  322|  2.35k|        b"amp" => "&",
  323|  1.89k|        b"apos" => "'",
  324|    194|        b"quot" => "\"",
  325|     81|        _ => return None,
  326|       |    };
  327|  7.33k|    Some(s)
  328|  7.41k|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape12parse_number:
 1799|  39.5k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1800|  39.5k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1801|  15.1k|        parse_hexadecimal(hex_digits)
 1802|       |    } else {
 1803|  24.3k|        parse_decimal(bytes)
 1804|     22|    }?;
 1805|  39.5k|    if code == 0 {
 1806|     32|        return Err(EscapeError::EntityWithNull(range));
 1807|  39.5k|    }
 1808|  39.5k|    match std::char::from_u32(code) {
 1809|  39.5k|        Some(c) => Ok(c),
 1810|     14|        None => Err(EscapeError::InvalidCodepoint(code)),
 1811|       |    }
 1812|  39.5k|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape17parse_hexadecimal:
 1814|  15.1k|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1815|  15.1k|    // maximum code is 0x10FFFF => 6 characters
 1816|  15.1k|    if bytes.len() > 6 {
 1817|      1|        return Err(EscapeError::TooLongHexadecimal);
 1818|  15.1k|    }
 1819|  15.1k|    let mut code = 0;
 1820|  37.0k|    for b in bytes.bytes() {
 1821|  37.0k|        code <<= 4;
 1822|  37.0k|        code += match b {
 1823|  37.0k|            b'0'..=b'9' => b - b'0',
 1824|  6.58k|            b'a'..=b'f' => b - b'a' + 10,
 1825|    119|            b'A'..=b'F' => b - b'A' + 10,
 1826|      7|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1827|       |        } as u32;
 1828|       |    }
 1829|  15.1k|    Ok(code)
 1830|  15.1k|}
_RNvNtCsjWx60dGvTf3_9quick_xml6escape13parse_decimal:
 1832|  24.3k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1833|  24.3k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1834|  24.3k|    if bytes.len() > 7 {
 1835|      2|        return Err(EscapeError::TooLongDecimal);
 1836|  24.3k|    }
 1837|  24.3k|    let mut code = 0;
 1838|  95.1k|    for b in bytes.bytes() {
 1839|  95.1k|        code *= 10;
 1840|  95.1k|        code += match b {
 1841|  95.1k|            b'0'..=b'9' => b - b'0',
 1842|     12|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1843|       |        } as u32;
 1844|       |    }
 1845|  24.3k|    Ok(code)
 1846|  24.3k|}

_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart10local_nameCs8ymoBFYi2FH_10sparesults:
  203|    569|    pub fn local_name(&self) -> LocalName {
  204|    569|        self.name().into()
  205|    569|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart4nameCs8ymoBFYi2FH_10sparesults:
  194|  1.13k|    pub fn name(&self) -> QName {
  195|  1.13k|        QName(&self.buf[..self.name_len])
  196|  1.13k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
  102|   228k|    pub(crate) const fn wrap(content: &'a [u8], name_len: usize) -> Self {
  103|   228k|        BytesStart {
  104|   228k|            buf: Cow::Borrowed(content),
  105|   228k|            name_len,
  106|   228k|        }
  107|   228k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6eventsNtB2_10BytesStart4nameB4_:
  194|    569|    pub fn name(&self) -> QName {
  195|    569|        QName(&self.buf[..self.name_len])
  196|    569|    }
_RINvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  537|  24.6k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  24.6k|        Self {
  539|  24.6k|            content: content.into(),
  540|  24.6k|            decoder,
  541|  24.6k|        }
  542|  24.6k|    }
_RNvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesText8unescape:
  586|  2.92k|    pub fn unescape(&self) -> Result<Cow<'a, str>> {
  587|  2.92k|        self.unescape_with(resolve_predefined_entity)
  588|  2.92k|    }
_RINvMs7_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_9BytesText13unescape_withNvNtB8_6escape25resolve_predefined_entityEB8_:
  594|  2.92k|    pub fn unescape_with<'entity>(
  595|  2.92k|        &self,
  596|  2.92k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  597|  2.92k|    ) -> Result<Cow<'a, str>> {
  598|  2.92k|        let decoded = match &self.content {
  599|  2.92k|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  600|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  601|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  602|       |        };
  603|       |
  604|  2.17k|        match unescape_with(&decoded, resolve_entity)? {
  605|       |            // Because result is borrowed, no replacements was done and we can use original string
  606|  1.31k|            Cow::Borrowed(_) => Ok(decoded),
  607|    588|            Cow::Owned(s) => Ok(s.into()),
  608|       |        }
  609|  2.92k|    }
_RNvXs9_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesTextNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  642|  3.30k|    fn deref(&self) -> &[u8] {
  643|  3.30k|        &self.content
  644|  3.30k|    }
_RINvMsa_NtCsjWx60dGvTf3_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  696|      1|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  697|      1|        Self {
  698|      1|            content: content.into(),
  699|      1|            decoder,
  700|      1|        }
  701|      1|    }
_RNvMsd_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_7BytesPI4wrapB7_:
  880|   149k|    pub(crate) const fn wrap(content: &'a [u8], target_len: usize) -> Self {
  881|   149k|        Self {
  882|   149k|            content: BytesStart::wrap(content, target_len),
  883|   149k|        }
  884|   149k|    }
_RNvMsg_NtCsjWx60dGvTf3_9quick_xml6eventsNtB5_9BytesDecl10from_start:
 1097|  78.5k|    pub const fn from_start(start: BytesStart<'a>) -> Self {
 1098|  78.5k|        Self { content: start }
 1099|  78.5k|    }

_RNvMNtCsjWx60dGvTf3_9quick_xml4nameNtB2_5QName5index:
  110|    569|    fn index(&self) -> Option<usize> {
  111|    569|        memchr(b':', self.0)
  112|    569|    }
_RNvXs0_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs8ymoBFYi2FH_10sparesults:
  123|    569|    fn as_ref(&self) -> &[u8] {
  124|    569|        self.0
  125|    569|    }
_RNvXs3_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_9LocalNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCs8ymoBFYi2FH_10sparesults:
  153|    569|    fn as_ref(&self) -> &[u8] {
  154|    569|        self.0
  155|    569|    }
_RNvXs4_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_9LocalNameINtNtCscdEvteftVc2_4core7convert4FromNtB5_5QNameE4fromCs8ymoBFYi2FH_10sparesults:
  172|    569|    fn from(name: QName<'a>) -> Self {
  173|    569|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
  174|    569|    }
_RNCNvXs4_NtCsjWx60dGvTf3_9quick_xml4nameNtB7_9LocalNameINtNtCscdEvteftVc2_4core7convert4FromNtB7_5QNameE4from0Cs8ymoBFYi2FH_10sparesults:
  173|      6|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
_RNvXs0_NtCsjWx60dGvTf3_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refB7_:
  123|    569|    fn as_ref(&self) -> &[u8] {
  124|    569|        self.0
  125|    569|    }

_RINvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtB5_2pi8PiParserECs8ymoBFYi2FH_10sparesults:
  150|   231k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  151|   231k|            &mut self,
  152|   231k|            mut parser: P,
  153|   231k|            buf: &'b mut Vec<u8>,
  154|   231k|            position: &mut usize,
  155|   231k|        ) -> Result<&'b [u8]> {
  156|   231k|            let mut read = 0;
  157|   231k|            let start = buf.len();
  158|       |            loop {
  159|   235k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  160|   235k|                    Ok(n) if n.is_empty() => break,
  161|   231k|                    Ok(n) => n,
  162|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  163|      0|                    Err(e) => {
  164|      0|                        *position += read;
  165|      0|                        return Err(Error::Io(e.into()));
  166|       |                    }
  167|       |                };
  168|       |
  169|   231k|                if let Some(i) = parser.feed(available) {
  170|   227k|                    buf.extend_from_slice(&available[..i]);
  171|   227k|
  172|   227k|                    // +1 for `>` which we do not include
  173|   227k|                    self $(.$reader)? .consume(i + 1);
  174|   227k|                    read += i + 1;
  175|   227k|
  176|   227k|                    *position += read;
  177|   227k|                    return Ok(&buf[start..]);
  178|  3.81k|                }
  179|  3.81k|
  180|  3.81k|                // The `>` symbol not yet found, continue reading
  181|  3.81k|                buf.extend_from_slice(available);
  182|  3.81k|
  183|  3.81k|                let used = available.len();
  184|  3.81k|                self $(.$reader)? .consume(used);
  185|  3.81k|                read += used;
  186|       |            }
  187|       |
  188|  3.81k|            *position += read;
  189|  3.81k|            Err(Error::Syntax(P::eof_error()))
  190|   231k|        }
_RINvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtB5_7element13ElementParserECs8ymoBFYi2FH_10sparesults:
  150|  1.36k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  151|  1.36k|            &mut self,
  152|  1.36k|            mut parser: P,
  153|  1.36k|            buf: &'b mut Vec<u8>,
  154|  1.36k|            position: &mut usize,
  155|  1.36k|        ) -> Result<&'b [u8]> {
  156|  1.36k|            let mut read = 0;
  157|  1.36k|            let start = buf.len();
  158|       |            loop {
  159|  2.15k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  160|  2.15k|                    Ok(n) if n.is_empty() => break,
  161|  1.36k|                    Ok(n) => n,
  162|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  163|      0|                    Err(e) => {
  164|      0|                        *position += read;
  165|      0|                        return Err(Error::Io(e.into()));
  166|       |                    }
  167|       |                };
  168|       |
  169|  1.36k|                if let Some(i) = parser.feed(available) {
  170|    569|                    buf.extend_from_slice(&available[..i]);
  171|    569|
  172|    569|                    // +1 for `>` which we do not include
  173|    569|                    self $(.$reader)? .consume(i + 1);
  174|    569|                    read += i + 1;
  175|    569|
  176|    569|                    *position += read;
  177|    569|                    return Ok(&buf[start..]);
  178|    791|                }
  179|    791|
  180|    791|                // The `>` symbol not yet found, continue reading
  181|    791|                buf.extend_from_slice(available);
  182|    791|
  183|    791|                let used = available.len();
  184|    791|                self $(.$reader)? .consume(used);
  185|    791|                read += used;
  186|       |            }
  187|       |
  188|    791|            *position += read;
  189|    791|            Err(Error::Syntax(P::eof_error()))
  190|  1.36k|        }
_RNCNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB6_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15skip_whitespace0Cs8ymoBFYi2FH_10sparesults:
  248|   344k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15remove_utf8_bomCs8ymoBFYi2FH_10sparesults:
   18|  11.1k|        $($async)? fn remove_utf8_bom(&mut self) -> io::Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|       |            loop {
   22|  11.1k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|  11.1k|                    Ok(n) => {
   24|  11.1k|                        if n.starts_with(UTF8_BOM) {
   25|    324|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|  10.8k|                        }
   27|  11.1k|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(e),
   31|       |                };
   32|       |            }
   33|  11.1k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15skip_whitespaceCs8ymoBFYi2FH_10sparesults:
  244|   259k|        $($async)? fn skip_whitespace(&mut self, position: &mut usize) -> io::Result<()> {
  245|       |            loop {
  246|   291k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  247|   291k|                    Ok(n) => {
  248|   291k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
  249|   291k|                        if count > 0 {
  250|  32.3k|                            self $(.$reader)? .consume(count);
  251|  32.3k|                            *position += count;
  252|  32.3k|                            continue;
  253|       |                        } else {
  254|   259k|                            Ok(())
  255|       |                        }
  256|       |                    }
  257|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  258|      0|                    Err(e) => Err(e),
  259|       |                };
  260|       |            }
  261|   259k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE16read_bytes_untilCs8ymoBFYi2FH_10sparesults:
  102|    402|        $($async)? fn read_bytes_until $(<$lf>)? (
  103|    402|            &mut self,
  104|    402|            byte: u8,
  105|    402|            buf: &'b mut Vec<u8>,
  106|    402|            position: &mut usize,
  107|    402|        ) -> io::Result<(&'b [u8], bool)> {
  108|    402|            // search byte must be within the ascii range
  109|    402|            debug_assert!(byte.is_ascii());
  110|       |
  111|    402|            let mut read = 0;
  112|    402|            let start = buf.len();
  113|       |            loop {
  114|    471|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|    471|                    Ok(n) if n.is_empty() => break,
  116|    402|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(e);
  121|       |                    }
  122|       |                };
  123|       |
  124|    402|                match memchr::memchr(byte, available) {
  125|    333|                    Some(i) => {
  126|    333|                        buf.extend_from_slice(&available[..i]);
  127|    333|
  128|    333|                        let used = i + 1;
  129|    333|                        self $(.$reader)? .consume(used);
  130|    333|                        read += used;
  131|    333|
  132|    333|                        *position += read;
  133|    333|                        return Ok((&buf[start..], true));
  134|       |                    }
  135|     69|                    None => {
  136|     69|                        buf.extend_from_slice(available);
  137|     69|
  138|     69|                        let used = available.len();
  139|     69|                        self $(.$reader)? .consume(used);
  140|     69|                        read += used;
  141|     69|                    }
  142|       |                }
  143|       |            }
  144|       |
  145|     69|            *position += read;
  146|     69|            Ok((&buf[start..], false))
  147|    402|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE17read_bang_elementCs8ymoBFYi2FH_10sparesults:
  193|  21.8k|        $($async)? fn read_bang_element $(<$lf>)? (
  194|  21.8k|            &mut self,
  195|  21.8k|            buf: &'b mut Vec<u8>,
  196|  21.8k|            position: &mut usize,
  197|  21.8k|        ) -> Result<(BangType, &'b [u8])> {
  198|  21.8k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  199|  21.8k|            // start with it.
  200|  21.8k|            let start = buf.len();
  201|  21.8k|            let mut read = 1;
  202|  21.8k|            buf.push(b'!');
  203|  21.8k|            self $(.$reader)? .consume(1);
  204|       |
  205|  21.8k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  206|       |
  207|       |            loop {
  208|  22.4k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  209|       |                    // Note: Do not update position, so the error points to
  210|       |                    // somewhere sane rather than at the EOF
  211|  22.4k|                    Ok(n) if n.is_empty() => break,
  212|  21.8k|                    Ok(available) => {
  213|       |                        // We only parse from start because we don't want to consider
  214|       |                        // whatever is in the buffer before the bang element
  215|  21.8k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  216|  21.2k|                            buf.extend_from_slice(consumed);
  217|  21.2k|
  218|  21.2k|                            self $(.$reader)? .consume(used);
  219|  21.2k|                            read += used;
  220|  21.2k|
  221|  21.2k|                            *position += read;
  222|  21.2k|                            return Ok((bang_type, &buf[start..]));
  223|    581|                        } else {
  224|    581|                            buf.extend_from_slice(available);
  225|    581|
  226|    581|                            let used = available.len();
  227|    581|                            self $(.$reader)? .consume(used);
  228|    581|                            read += used;
  229|    581|                        }
  230|       |                    }
  231|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  232|      0|                    Err(e) => {
  233|      0|                        *position += read;
  234|      0|                        return Err(Error::Io(e.into()));
  235|       |                    }
  236|       |                }
  237|       |            }
  238|       |
  239|    581|            *position += read;
  240|    581|            Err(bang_type.to_err())
  241|  21.8k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE8peek_oneCs8ymoBFYi2FH_10sparesults:
  264|   277k|        $($async)? fn peek_one(&mut self) -> io::Result<Option<u8>> {
  265|       |            loop {
  266|   277k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  267|   277k|                    Ok(n) => Ok(n.first().cloned()),
  268|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  269|      0|                    Err(e) => Err(e),
  270|       |                };
  271|       |            }
  272|   277k|        }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_textCs8ymoBFYi2FH_10sparesults:
   53|   259k|        $($async)? fn read_text $(<$lf>)? (
   54|   259k|            &mut self,
   55|   259k|            buf: &'b mut Vec<u8>,
   56|   259k|            position: &mut usize,
   57|   259k|        ) -> ReadTextResult<'b, &'b mut Vec<u8>> {
   58|   259k|            let mut read = 0;
   59|   259k|            let start = buf.len();
   60|       |            loop {
   61|   261k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   62|   261k|                    Ok(n) if n.is_empty() => break,
   63|   258k|                    Ok(n) => n,
   64|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   65|      0|                    Err(e) => {
   66|      0|                        *position += read;
   67|      0|                        return ReadTextResult::Err(e);
   68|       |                    }
   69|       |                };
   70|       |
   71|   258k|                match memchr::memchr(b'<', available) {
   72|       |                    Some(0) => {
   73|   255k|                        self $(.$reader)? .consume(1);
   74|   255k|                        *position += 1;
   75|   255k|                        return ReadTextResult::Markup(buf);
   76|       |                    }
   77|    656|                    Some(i) => {
   78|    656|                        buf.extend_from_slice(&available[..i]);
   79|    656|
   80|    656|                        let used = i + 1;
   81|    656|                        self $(.$reader)? .consume(used);
   82|    656|                        read += used;
   83|    656|
   84|    656|                        *position += read;
   85|    656|                        return ReadTextResult::UpToMarkup(&buf[start..]);
   86|       |                    }
   87|  2.26k|                    None => {
   88|  2.26k|                        buf.extend_from_slice(available);
   89|  2.26k|
   90|  2.26k|                        let used = available.len();
   91|  2.26k|                        self $(.$reader)? .consume(used);
   92|  2.26k|                        read += used;
   93|  2.26k|                    }
   94|       |                }
   95|       |            }
   96|       |
   97|  3.30k|            *position += read;
   98|  3.30k|            ReadTextResult::UpToEof(&buf[start..])
   99|   259k|        }
_RNvMs_NtNtCsjWx60dGvTf3_9quick_xml6reader15buffered_readerINtB6_6ReaderRShE15read_event_intoCs8ymoBFYi2FH_10sparesults:
  338|   259k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  339|   259k|        self.read_event_impl(buf)
  340|   259k|    }

_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader7elementNtB2_13ElementParserNtB4_6Parser4feedCs8ymoBFYi2FH_10sparesults:
   57|  1.36k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   58|  4.18k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', bytes) {
   59|  4.18k|            *self = match (*self, bytes[i]) {
   60|       |                // only allowed to match `>` while we are in state `Outside`
   61|    569|                (Self::Outside, b'>') => return Some(i),
   62|  1.04k|                (Self::Outside, b'\'') => Self::SingleQ,
   63|    417|                (Self::Outside, b'\"') => Self::DoubleQ,
   64|       |
   65|       |                // the only end_byte that gets us out if the same character
   66|  1.32k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Outside,
   67|       |
   68|       |                // all other bytes: no state change
   69|    831|                _ => continue,
   70|       |            };
   71|       |        }
   72|    791|        None
   73|  1.36k|    }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader7elementNtB2_13ElementParserNtB4_6Parser9eof_errorCs8ymoBFYi2FH_10sparesults:
   76|    791|    fn eof_error() -> SyntaxError {
   77|    791|        SyntaxError::UnclosedTag
   78|    791|    }
_RNvXs_NtNtCsjWx60dGvTf3_9quick_xml6reader7elementNtB4_13ElementParserNtNtCscdEvteftVc2_4core7default7Default7defaultCs8ymoBFYi2FH_10sparesults:
   83|  1.36k|    fn default() -> Self {
   84|  1.36k|        Self::Outside
   85|  1.36k|    }

_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType3new:
  915|  21.8k|    const fn new(byte: Option<u8>) -> Result<Self> {
  916|  21.8k|        Ok(match byte {
  917|     76|            Some(b'[') => Self::CData,
  918|  18.4k|            Some(b'-') => Self::Comment,
  919|  3.29k|            Some(b'D') | Some(b'd') => Self::DocType,
  920|     33|            _ => return Err(Error::Syntax(SyntaxError::InvalidBangMarkup)),
  921|       |        })
  922|  21.8k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType5parse:
  931|  21.8k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  932|  60.8k|        for i in memchr::memchr_iter(b'>', chunk) {
  933|  32.1k|            match self {
  934|  32.1k|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  935|  32.1k|                // <!----> - XML comment
  936|  32.1k|                //  012345 - i
  937|  32.1k|                Self::Comment if buf.len() + i > 4 => {
  938|  18.9k|                    if chunk[..i].ends_with(b"--") {
  939|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  940|       |                        // check_comments enabled option. XML standard requires that comment
  941|       |                        // will not end with `--->` sequence because this is a special case of
  942|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  943|  18.3k|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  944|    607|                    }
  945|    607|                    // End sequence `-|->` was splitted at |
  946|    607|                    //        buf --/   \-- chunk
  947|    607|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  948|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  949|    607|                    }
  950|    607|                    // End sequence `--|>` was splitted at |
  951|    607|                    //         buf --/   \-- chunk
  952|    607|                    if i == 0 && buf.ends_with(b"--") {
  953|      0|                        return Some((&[], i + 1)); // +1 for `>`
  954|    607|                    }
  955|       |                }
  956|  13.2k|                Self::Comment => {}
  957|       |                Self::CData => {
  958|  1.39k|                    if chunk[..i].ends_with(b"]]") {
  959|      8|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  960|  1.38k|                    }
  961|  1.38k|                    // End sequence `]|]>` was splitted at |
  962|  1.38k|                    //        buf --/   \-- chunk
  963|  1.38k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  964|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  965|  1.38k|                    }
  966|  1.38k|                    // End sequence `]]|>` was splitted at |
  967|  1.38k|                    //         buf --/   \-- chunk
  968|  1.38k|                    if i == 0 && buf.ends_with(b"]]") {
  969|      0|                        return Some((&[], i + 1)); // +1 for `>`
  970|  1.38k|                    }
  971|       |                }
  972|       |                Self::DocType => {
  973|  27.2k|                    let content = &chunk[..i];
  974|  27.2k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  975|  27.2k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  976|  27.2k|                        .sum::<i32>();
  977|  27.2k|                    if balance == 0 {
  978|  2.92k|                        return Some((content, i + 1)); // +1 for `>`
  979|  24.3k|                    }
  980|       |                }
  981|       |            }
  982|       |        }
  983|    581|        None
  984|  21.8k|    }
_RINvMs2_NtCsjWx60dGvTf3_9quick_xml6readerINtB6_6ReaderRShE15read_event_implQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs8ymoBFYi2FH_10sparesults:
  715|   259k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  716|   259k|    where
  717|   259k|        R: XmlSource<'i, B>,
  718|   259k|    {
  719|   530k|        read_event_impl!(self, buf, self.reader, read_until_close)
  720|   259k|    }
_RINvMs2_NtCsjWx60dGvTf3_9quick_xml6readerINtB6_6ReaderRShE16read_until_closeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs8ymoBFYi2FH_10sparesults:
  724|   255k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  725|   255k|    where
  726|   255k|        R: XmlSource<'i, B>,
  727|   255k|    {
  728|   255k|        read_until_close!(self, buf, self.reader)
  729|   255k|    }
_RNvMs0_NtCsjWx60dGvTf3_9quick_xml6readerINtB5_6ReaderRShE10config_mutCs8ymoBFYi2FH_10sparesults:
  595|  11.1k|    pub fn config_mut(&mut self) -> &mut Config {
  596|  11.1k|        &mut self.state.config
  597|  11.1k|    }
_RNvMNtCsjWx60dGvTf3_9quick_xml6readerNtB2_6Config9trim_textCs8ymoBFYi2FH_10sparesults:
  175|  11.1k|    pub fn trim_text(&mut self, trim: bool) {
  176|  11.1k|        self.trim_text_start = trim;
  177|  11.1k|        self.trim_text_end = trim;
  178|  11.1k|    }
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType6to_errCs8ymoBFYi2FH_10sparesults:
  986|    581|    const fn to_err(&self) -> Error {
  987|    581|        match self {
  988|     68|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
  989|    141|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
  990|    372|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
  991|       |        }
  992|    581|    }
_RNvXs_NtCsjWx60dGvTf3_9quick_xml6readerNtB4_6ConfigNtNtCscdEvteftVc2_4core7default7Default7default:
  191|  11.1k|    fn default() -> Self {
  192|  11.1k|        Self {
  193|  11.1k|            check_comments: false,
  194|  11.1k|            check_end_names: true,
  195|  11.1k|            expand_empty_elements: false,
  196|  11.1k|            trim_markup_names_in_closing_tags: true,
  197|  11.1k|            trim_text_start: false,
  198|  11.1k|            trim_text_end: false,
  199|  11.1k|        }
  200|  11.1k|    }
_RNvMs0_NtCsjWx60dGvTf3_9quick_xml6readerINtB5_6ReaderRShE11from_readerB7_:
  582|  11.1k|    pub fn from_reader(reader: R) -> Self {
  583|  11.1k|        Self {
  584|  11.1k|            reader,
  585|  11.1k|            state: ReaderState::default(),
  586|  11.1k|        }
  587|  11.1k|    }
_RNvMs1_NtCsjWx60dGvTf3_9quick_xml6readerINtB5_6ReaderRShE7decoderB7_:
  705|  11.1k|    pub const fn decoder(&self) -> Decoder {
  706|  11.1k|        self.state.decoder()
  707|  11.1k|    }
_RNCNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB7_8BangType5parse0B9_:
  975|  2.62M|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs3_NtCsjWx60dGvTf3_9quick_xml6readerNtB5_8BangType6to_errB7_:
  986|    583|    const fn to_err(&self) -> Error {
  987|    583|        match self {
  988|      7|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
  989|     14|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
  990|    562|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
  991|       |        }
  992|    583|    }

_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader2piNtB2_8PiParserNtB4_6Parser4feedCs8ymoBFYi2FH_10sparesults:
   61|   231k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   62|   562k|        for i in memchr::memchr_iter(b'>', bytes) {
   63|   562k|            match i {
   64|      0|                0 if self.0 => return Some(0),
   65|       |                // If the previous byte is `?`, then we found `?>`
   66|   562k|                i if i > 0 && bytes[i - 1] == b'?' => return Some(i),
   67|   335k|                _ => {}
   68|       |            }
   69|       |        }
   70|  3.81k|        self.0 = bytes.last().copied() == Some(b'?');
   71|  3.81k|        None
   72|   231k|    }
_RNvXNtNtCsjWx60dGvTf3_9quick_xml6reader2piNtB2_8PiParserNtB4_6Parser9eof_errorCs8ymoBFYi2FH_10sparesults:
   75|  3.81k|    fn eof_error() -> SyntaxError {
   76|  3.81k|        SyntaxError::UnclosedPIOrXmlDecl
   77|  3.81k|    }

_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   60|  3.96k|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> BytesText<'b> {
   61|  3.96k|        let mut content = bytes;
   62|  3.96k|
   63|  3.96k|        if self.config.trim_text_end {
   64|  3.96k|            // Skip the ending '<'
   65|  3.96k|            let len = bytes
   66|  3.96k|                .iter()
   67|  3.96k|                .rposition(|&b| !is_whitespace(b))
   68|  3.96k|                .map_or(0, |p| p + 1);
   69|  3.96k|            content = &bytes[..len];
   70|  3.96k|        }
   71|  3.96k|        BytesText::wrap(content, self.decoder())
   72|  3.96k|    }
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState9emit_text0B8_:
   67|  3.81k|                .rposition(|&b| !is_whitespace(b))
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState9emit_texts_0B8_:
   68|  2.92k|                .map_or(0, |p| p + 1);
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   76|  21.2k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   77|  21.2k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   78|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   79|       |        };
   80|       |
   81|  21.2k|        let len = buf.len();
   82|  2.93k|        match bang_type {
   83|  18.3k|            BangType::Comment if buf.starts_with(b"!--") => {
   84|  18.3k|                debug_assert!(buf.ends_with(b"--"));
   85|  18.3k|                if self.config.check_comments {
   86|       |                    // search if '--' not in comments
   87|      0|                    let mut haystack = &buf[3..len - 2];
   88|      0|                    let mut off = 0;
   89|      0|                    while let Some(p) = memchr::memchr(b'-', haystack) {
   90|      0|                        off += p + 1;
   91|      0|                        // if next byte after `-` is also `-`, return an error
   92|      0|                        if buf[3 + off] == b'-' {
   93|       |                            // Explanation of the magic:
   94|       |                            //
   95|       |                            // - `self.offset`` just after `>`,
   96|       |                            // - `buf` contains `!-- con--tent --`
   97|       |                            // - `p` is counted from byte after `<!--`
   98|       |                            //
   99|       |                            // <!-- con--tent -->:
  100|       |                            //  ~~~~~~~~~~~~~~~~ : - buf
  101|       |                            //   : ===========   : - zone of search (possible values of `p`)
  102|       |                            //   : |---p         : - p is counted from | (| is 0)
  103|       |                            //   : :   :         ^ - self.offset
  104|       |                            //   ^ :   :           - self.offset - len
  105|       |                            //     ^   :           - self.offset - len + 2
  106|       |                            //         ^           - self.offset - len + 2 + p
  107|      0|                            self.last_error_offset = self.offset - len + 2 + p;
  108|      0|                            return Err(Error::IllFormed(IllFormedError::DoubleHyphenInComment));
  109|      0|                        }
  110|      0|                        // Continue search after single `-` (+1 to skip it)
  111|      0|                        haystack = &haystack[p + 1..];
  112|       |                    }
  113|  18.3k|                }
  114|  18.3k|                Ok(Event::Comment(BytesText::wrap(
  115|  18.3k|                    // Cut of `!--` and `--` from start and end
  116|  18.3k|                    &buf[3..len - 2],
  117|  18.3k|                    self.decoder(),
  118|  18.3k|                )))
  119|       |            }
  120|      8|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  121|      1|                debug_assert!(buf.ends_with(b"]]"));
  122|      1|                Ok(Event::CData(BytesCData::wrap(
  123|      1|                    // Cut of `![CDATA[` and `]]` from start and end
  124|      1|                    &buf[8..len - 2],
  125|      1|                    self.decoder(),
  126|      1|                )))
  127|       |            }
  128|  2.92k|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  129|  2.36k|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
  130|  2.33k|                    Some(start) => Ok(Event::DocType(BytesText::wrap(
  131|  2.33k|                        // Cut of `!DOCTYPE` and any number of spaces from start
  132|  2.33k|                        &buf[8 + start..],
  133|  2.33k|                        self.decoder(),
  134|  2.33k|                    ))),
  135|       |                    None => {
  136|       |                        // Because we here, we at least read `<!DOCTYPE>` and offset after `>`.
  137|       |                        // We want report error at place where name is expected - this is just
  138|       |                        // before `>`
  139|     34|                        self.last_error_offset = self.offset - 1;
  140|     34|                        return Err(Error::IllFormed(IllFormedError::MissingDoctypeName));
  141|       |                    }
  142|       |                }
  143|       |            }
  144|       |            _ => {
  145|       |                // <!....>
  146|       |                //  ^^^^^ - `buf` does not contain `<` and `>`, but `self.offset` is after `>`.
  147|       |                // ^------- We report error at that position, so we need to subtract 2 and buf len
  148|    583|                self.last_error_offset = self.offset - len - 2;
  149|    583|                Err(bang_type.to_err())
  150|       |            }
  151|       |        }
  152|  21.2k|    }
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   77|  2.93k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   78|  2.93k|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   79|  2.93k|        };
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState9emit_bangs_0B8_:
  129|  4.24k|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  156|    333|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  157|    333|        // Strip the `/` character. `content` contains data between `</` and `>`
  158|    333|        let content = &buf[1..];
  159|       |        // XML standard permits whitespaces after the markup name in closing tags.
  160|       |        // Let's strip them from the buffer before comparing tag names.
  161|    333|        let name = if self.config.trim_markup_names_in_closing_tags {
  162|    333|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  163|    230|                &content[..pos_end_name + 1]
  164|       |            } else {
  165|    103|                content
  166|       |            }
  167|       |        } else {
  168|      0|            content
  169|       |        };
  170|       |
  171|    333|        let decoder = self.decoder();
  172|    333|
  173|    333|        // Get the index in self.opened_buffer of the name of the last opened tag
  174|    333|        match self.opened_starts.pop() {
  175|      0|            Some(start) => {
  176|      0|                if self.config.check_end_names {
  177|      0|                    let expected = &self.opened_buffer[start..];
  178|      0|                    if name != expected {
  179|      0|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  180|      0|                        // #513: In order to allow error recovery we should drop content of the buffer
  181|      0|                        self.opened_buffer.truncate(start);
  182|      0|
  183|      0|                        // Report error at start of the end tag at `<` character
  184|      0|                        // -2 for `<` and `>`
  185|      0|                        self.last_error_offset = self.offset - buf.len() - 2;
  186|      0|                        return Err(Error::IllFormed(IllFormedError::MismatchedEndTag {
  187|      0|                            expected,
  188|      0|                            found: decoder.decode(name).unwrap_or_default().into_owned(),
  189|      0|                        }));
  190|      0|                    }
  191|      0|                }
  192|       |
  193|      0|                self.opened_buffer.truncate(start);
  194|       |            }
  195|       |            None => {
  196|       |                // Report error at start of the end tag at `<` character
  197|       |                // -2 for `<` and `>`
  198|    333|                self.last_error_offset = self.offset - buf.len() - 2;
  199|    333|                return Err(Error::IllFormed(IllFormedError::UnmatchedEndTag(
  200|    333|                    decoder.decode(name).unwrap_or_default().into_owned(),
  201|    333|                )));
  202|       |            }
  203|       |        }
  204|       |
  205|      0|        Ok(Event::End(BytesEnd::wrap(name.into())))
  206|    333|    }
_RNCNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  162|  11.7k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  212|   227k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  213|   227k|        debug_assert!(buf.len() > 0);
  214|   227k|        debug_assert_eq!(buf[0], b'?');
  215|       |
  216|   227k|        let len = buf.len();
  217|   227k|        // We accept at least <??>
  218|   227k|        //                     ~~ - len = 2
  219|   227k|        if len > 1 && buf[len - 1] == b'?' {
  220|       |            // Cut of `?` and `?` from start and end
  221|   227k|            let content = &buf[1..len - 1];
  222|   227k|            let len = content.len();
  223|   227k|
  224|   227k|            if content.starts_with(b"xml") && (len == 3 || is_whitespace(content[3])) {
  225|  78.5k|                let event = BytesDecl::from_start(BytesStart::wrap(content, 3));
  226|  78.5k|
  227|  78.5k|                // Try getting encoding from the declaration event
  228|  78.5k|                #[cfg(feature = "encoding")]
  229|  78.5k|                if self.encoding.can_be_refined() {
  230|  78.5k|                    if let Some(encoding) = event.encoder() {
  231|  78.5k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  232|  78.5k|                    }
  233|  78.5k|                }
  234|  78.5k|
  235|  78.5k|                Ok(Event::Decl(event))
  236|       |            } else {
  237|   149k|                Ok(Event::PI(BytesPI::wrap(content, name_len(content))))
  238|       |            }
  239|       |        } else {
  240|       |            // <?....EOF
  241|       |            //  ^^^^^ - `buf` does not contains `<`, but we want to report error at `<`,
  242|       |            //          so we move offset to it (-2 for `<` and `>`)
  243|    255|            self.last_error_offset = self.offset - len - 2;
  244|    255|            Err(Error::Syntax(SyntaxError::UnclosedPIOrXmlDecl))
  245|       |        }
  246|   227k|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  252|    569|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Event<'b> {
  253|    569|        if let Some(content) = content.strip_suffix(b"/") {
  254|       |            // This is self-closed tag `<something/>`
  255|     39|            let event = BytesStart::wrap(content, name_len(content));
  256|     39|
  257|     39|            if self.config.expand_empty_elements {
  258|     39|                self.state = ParseState::InsideEmpty;
  259|     39|                self.opened_starts.push(self.opened_buffer.len());
  260|     39|                self.opened_buffer.extend(event.name().as_ref());
  261|     39|                Event::Start(event)
  262|       |            } else {
  263|      0|                Event::Empty(event)
  264|       |            }
  265|       |        } else {
  266|    530|            let event = BytesStart::wrap(content, name_len(content));
  267|    530|
  268|    530|            // #514: Always store names event when .check_end_names == false,
  269|    530|            // because checks can be temporary disabled and when they would be
  270|    530|            // enabled, we should have that information
  271|    530|            self.opened_starts.push(self.opened_buffer.len());
  272|    530|            self.opened_buffer.extend(event.name().as_ref());
  273|    530|            Event::Start(event)
  274|       |        }
  275|    569|    }
_RNvMNtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  295|  36.1k|    pub const fn decoder(&self) -> Decoder {
  296|  36.1k|        Decoder {
  297|  36.1k|            #[cfg(feature = "encoding")]
  298|  36.1k|            encoding: self.encoding.encoding(),
  299|  36.1k|        }
  300|  36.1k|    }
_RNvXs_NtNtCsjWx60dGvTf3_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCscdEvteftVc2_4core7default7Default7default:
  304|  11.1k|    fn default() -> Self {
  305|  11.1k|        Self {
  306|  11.1k|            offset: 0,
  307|  11.1k|            last_error_offset: 0,
  308|  11.1k|            state: ParseState::Init,
  309|  11.1k|            config: Config::default(),
  310|  11.1k|            opened_buffer: Vec::new(),
  311|  11.1k|            opened_starts: Vec::new(),
  312|  11.1k|
  313|  11.1k|            #[cfg(feature = "encoding")]
  314|  11.1k|            encoding: EncodingRef::Implicit(UTF_8),
  315|  11.1k|        }
  316|  11.1k|    }

_RNvNtCsjWx60dGvTf3_9quick_xml5utils13is_whitespaceCs8ymoBFYi2FH_10sparesults:
  202|   344k|pub const fn is_whitespace(b: u8) -> bool {
  203|   344k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  204|   344k|}
_RNvNtCsjWx60dGvTf3_9quick_xml5utils13is_whitespaceB3_:
  202|  2.21M|pub const fn is_whitespace(b: u8) -> bool {
  203|  2.21M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  204|  2.21M|}
_RNvNtCsjWx60dGvTf3_9quick_xml5utils8name_lenB3_:
  211|   149k|pub const fn name_len(mut bytes: &[u8]) -> usize {
  212|   149k|    // Note: A pattern matching based approach (instead of indexing) allows
  213|   149k|    // making the function const.
  214|   149k|    let mut len = 0;
  215|  2.13M|    while let [first, rest @ ..] = bytes {
  216|  2.05M|        if is_whitespace(*first) {
  217|  69.0k|            break;
  218|  1.98M|        }
  219|  1.98M|        len += 1;
  220|  1.98M|        bytes = rest;
  221|       |    }
  222|   149k|    len
  223|   149k|}

_RNvNtCslqj0VXIVnLb_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  11.1k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  11.1k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|  11.1k|        return;
    9|       |    };
   10|      0|    match reader {
   11|      0|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|      0|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|      0|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|      0|            let mut writer = QueryResultsSerializer::from_format(format)
   18|      0|                .serialize_solutions_to_write(
   19|      0|                    Vec::new(),
   20|      0|                    solutions
   21|      0|                        .first()
   22|      0|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|      0|                )
   24|      0|                .unwrap();
   25|      0|            for solution in &solutions {
   26|      0|                writer.write(solution).unwrap();
   27|      0|            }
   28|      0|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|      0|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|      0|                QueryResultsParser::from_format(format)
   33|      0|                    .parse_slice(&serialized)
   34|      0|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|      0|                    .unwrap()
   36|       |            {
   37|      0|                assert_eq!(
   38|      0|                    roundtrip_solutions
   39|      0|                        .collect::<Result<Vec<_>, _>>()
   40|      0|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|      0|                        .unwrap(),
   42|      0|                    solutions
   43|      0|                )
   44|      0|            }
   45|       |        }
   46|      0|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      0|            // We try to write again
   48|      0|            let mut serialized = Vec::new();
   49|      0|            QueryResultsSerializer::from_format(format)
   50|      0|                .serialize_boolean_to_write(&mut serialized, value)
   51|      0|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      0|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      0|                QueryResultsParser::from_format(format)
   56|      0|                    .parse_slice(&serialized)
   57|      0|                    .unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  11.1k|}

_RNvXs0_NtCs8ymoBFYi2FH_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCsjWx60dGvTf3_9quick_xml6errors5ErrorE4fromB7_:
   42|  7.91k|    fn from(error: quick_xml::Error) -> Self {
   43|  7.91k|        match error {
   44|      0|            quick_xml::Error::Io(error) => {
   45|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   46|       |            }
   47|  7.91k|            _ => Self::Syntax(QueryResultsSyntaxError(SyntaxErrorKind::Xml(error))),
   48|       |        }
   49|  7.91k|    }
_RNvXs9_NtCs8ymoBFYi2FH_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtB5_23QueryResultsSyntaxErrorE4from:
    7|  3.26k|#[derive(Debug, thiserror::Error)]
_RINvMs2_NtCs8ymoBFYi2FH_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   87|  2.22k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|  2.22k|        Self(SyntaxErrorKind::Msg {
   89|  2.22k|            msg: msg.into(),
   90|  2.22k|            location: None,
   91|  2.22k|        })
   92|  2.22k|    }
_RINvMs2_NtCs8ymoBFYi2FH_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|  1.03k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|  1.03k|        Self(SyntaxErrorKind::Msg {
   89|  1.03k|            msg: msg.into(),
   90|  1.03k|            location: None,
   91|  1.03k|        })
   92|  1.03k|    }

_RNvMNtCs8ymoBFYi2FH_10sparesults6parserNtB2_18QueryResultsParser11from_formatCslqj0VXIVnLb_13oxigraph_fuzz:
   65|  11.1k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  11.1k|        Self { format }
   67|  11.1k|    }
_RNvMNtCs8ymoBFYi2FH_10sparesults6parserNtB2_18QueryResultsParser11parse_slice:
  234|  11.1k|    pub fn parse_slice(
  235|  11.1k|        self,
  236|  11.1k|        slice: &[u8],
  237|  11.1k|    ) -> Result<FromSliceQueryResultsReader<'_>, QueryResultsSyntaxError> {
  238|  11.1k|        Ok(match self.format {
  239|  11.1k|            QueryResultsFormat::Xml => match FromSliceXmlQueryResultsReader::read(slice)? {
  240|      0|                FromSliceXmlQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  241|       |                FromSliceXmlQueryResultsReader::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: FromSliceSolutionsReaderKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match FromSliceJsonQueryResultsReader::read(slice)? {
  250|      0|                FromSliceJsonQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  251|       |                FromSliceJsonQueryResultsReader::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: FromSliceSolutionsReaderKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|      0|            QueryResultsFormat::Tsv => match FromSliceTsvQueryResultsReader::read(slice)? {
  261|      0|                FromSliceTsvQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  262|       |                FromSliceTsvQueryResultsReader::Solutions {
  263|      0|                    solutions,
  264|      0|                    variables,
  265|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  266|      0|                    variables: variables.into(),
  267|      0|                    solutions: FromSliceSolutionsReaderKind::Tsv(solutions),
  268|      0|                }),
  269|       |            },
  270|       |        })
  271|  11.1k|    }

_RNCNvMs2_NtCs8ymoBFYi2FH_10sparesults3xmlNtB7_30FromSliceXmlQueryResultsReader4read0B9_:
  362|  11.1k|        Self::do_read(slice).map_err(|e| match e {
  363|  11.1k|            QueryResultsParseError::Syntax(e) => e,
  364|      0|            QueryResultsParseError::Io(e) => {
  365|      0|                unreachable!("I/O error are not possible for slice but found {e}")
  366|       |            }
  367|  11.1k|        })
_RNvMs2_NtCs8ymoBFYi2FH_10sparesults3xmlNtB5_30FromSliceXmlQueryResultsReader4read:
  361|  11.1k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  362|  11.1k|        Self::do_read(slice).map_err(|e| match e {
  363|       |            QueryResultsParseError::Syntax(e) => e,
  364|       |            QueryResultsParseError::Io(e) => {
  365|       |                unreachable!("I/O error are not possible for slice but found {e}")
  366|       |            }
  367|  11.1k|        })
  368|  11.1k|    }
_RNvMs2_NtCs8ymoBFYi2FH_10sparesults3xmlNtB5_30FromSliceXmlQueryResultsReader7do_read:
  370|  11.1k|    fn do_read(slice: &'a [u8]) -> Result<Self, QueryResultsParseError> {
  371|  11.1k|        let mut reader = Reader::from_reader(slice);
  372|  11.1k|        XmlInnerQueryResultsReader::set_options(reader.config_mut());
  373|  11.1k|        let mut reader_buffer = Vec::new();
  374|  11.1k|        let mut inner = XmlInnerQueryResultsReader {
  375|  11.1k|            state: ResultsState::Start,
  376|  11.1k|            variables: Vec::new(),
  377|  11.1k|            decoder: reader.decoder(),
  378|  11.1k|        };
  379|   259k|        loop {
  380|   259k|            reader_buffer.clear();
  381|   259k|            let event = reader.read_event_into(&mut reader_buffer)?;
  382|   252k|            if let Some(result) = inner.read_event(event)? {
  383|      0|                return Ok(match result {
  384|       |                    XmlInnerQueryResults::Solutions {
  385|      0|                        variables,
  386|      0|                        solutions,
  387|      0|                    } => Self::Solutions {
  388|      0|                        variables,
  389|      0|                        solutions: FromSliceXmlSolutionsReader {
  390|      0|                            reader,
  391|      0|                            inner: solutions,
  392|      0|                            reader_buffer,
  393|      0|                        },
  394|      0|                    },
  395|      0|                    XmlInnerQueryResults::Boolean(value) => Self::Boolean(value),
  396|       |                });
  397|   248k|            }
  398|       |        }
  399|  11.1k|    }
_RNvMs4_NtCs8ymoBFYi2FH_10sparesults3xmlNtB5_26XmlInnerQueryResultsReader11set_options:
  456|  11.1k|    fn set_options(config: &mut Config) {
  457|  11.1k|        config.trim_text(true);
  458|  11.1k|        config.expand_empty_elements = true;
  459|  11.1k|    }
_RNvMs4_NtCs8ymoBFYi2FH_10sparesults3xmlNtB5_26XmlInnerQueryResultsReader10read_event:
  461|   252k|    pub fn read_event(
  462|   252k|        &mut self,
  463|   252k|        event: Event<'_>,
  464|   252k|    ) -> Result<Option<XmlInnerQueryResults>, QueryResultsParseError> {
  465|   252k|        match event {
  466|    569|            Event::Start(event) => match self.state {
  467|       |                ResultsState::Start => {
  468|    569|                    if event.local_name().as_ref() == b"sparql" {
  469|      0|                        self.state = ResultsState::Sparql;
  470|      0|                        Ok(None)
  471|       |                    } else {
  472|    569|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <sparql> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  473|       |                    }
  474|       |                }
  475|       |                ResultsState::Sparql => {
  476|      0|                    if event.local_name().as_ref() == b"head" {
  477|      0|                        self.state = ResultsState::Head;
  478|      0|                        Ok(None)
  479|       |                    } else {
  480|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <head> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  481|       |                    }
  482|       |                }
  483|       |                ResultsState::Head => {
  484|      0|                    if event.local_name().as_ref() == b"variable" {
  485|      0|                        let name = event.attributes()
  486|      0|                            .filter_map(Result::ok)
  487|      0|                            .find(|attr| attr.key.local_name().as_ref() == b"name")
  488|      0|                            .ok_or_else(|| QueryResultsSyntaxError::msg("No name attribute found for the <variable> tag"))?;
  489|      0|                        let name = unescape(&self.decoder.decode(&name.value)?)?.into_owned();
  490|      0|                        let variable = Variable::new(name).map_err(|e| QueryResultsSyntaxError::msg(format!("Invalid variable name: {e}")))?;
  491|      0|                        if self.variables.contains(&variable) {
  492|      0|                            return Err(QueryResultsSyntaxError::msg(format!(
  493|      0|                                "The variable {variable} is declared twice"
  494|      0|                            ))
  495|      0|                                .into());
  496|      0|                        }
  497|      0|                        self.variables.push(variable);
  498|      0|                        Ok(None)
  499|      0|                    } else if event.local_name().as_ref() == b"link" {
  500|       |                        // no op
  501|      0|                        Ok(None)
  502|       |                    } else {
  503|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <variable> or <link> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  504|       |                    }
  505|       |                }
  506|       |                ResultsState::AfterHead => {
  507|      0|                    if event.local_name().as_ref() == b"boolean" {
  508|      0|                        self.state = ResultsState::Boolean;
  509|      0|                        Ok(None)
  510|      0|                    } else if event.local_name().as_ref() == b"results" {
  511|      0|                        let mut mapping = BTreeMap::default();
  512|      0|                        for (i, var) in self.variables.iter().enumerate() {
  513|      0|                            mapping.insert(var.clone().into_string(), i);
  514|      0|                        }
  515|      0|                        Ok(Some(XmlInnerQueryResults::Solutions {
  516|      0|                            variables: take(&mut self.variables),
  517|      0|                            solutions: XmlInnerSolutionsReader {
  518|      0|                                decoder: self.decoder,
  519|      0|                                mapping,
  520|      0|                                state_stack: vec![State::Start, State::Start],
  521|      0|                                new_bindings: Vec::new(),
  522|      0|                                current_var: None,
  523|      0|                                term: None,
  524|      0|                                lang: None,
  525|      0|                                datatype: None,
  526|      0|                                subject_stack: Vec::new(),
  527|      0|                                predicate_stack: Vec::new(),
  528|      0|                                object_stack: Vec::new(),
  529|      0|                            },
  530|      0|                        }))
  531|      0|                    } else if event.local_name().as_ref() != b"link" && event.local_name().as_ref() != b"results" && event.local_name().as_ref() != b"boolean" {
  532|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting sparql tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  533|       |                    } else {
  534|      0|                        Ok(None)
  535|       |                    }
  536|       |                }
  537|      0|                ResultsState::Boolean => Err(QueryResultsSyntaxError::msg(format!("Unexpected tag inside of <boolean> tag: <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  538|       |            },
  539|  2.92k|            Event::Text(event) => {
  540|  2.92k|                let value = event.unescape()?;
  541|  1.90k|                match self.state {
  542|       |                    ResultsState::Boolean => {
  543|      0|                        if value == "true" {
  544|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(true)))
  545|      0|                        } else if value == "false" {
  546|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(false)))
  547|       |                        } else {
  548|      0|                            Err(QueryResultsSyntaxError::msg(format!("Unexpected boolean value. Found '{value}'")).into())
  549|       |                        }
  550|       |                    }
  551|  1.90k|                    _ => Err(QueryResultsSyntaxError::msg(format!("Unexpected textual value found: '{value}'")).into())
  552|       |                }
  553|       |            }
  554|      0|            Event::End(event) => {
  555|      0|                if let ResultsState::Head = self.state {
  556|      0|                    if event.local_name().as_ref() == b"head" {
  557|      0|                        self.state = ResultsState::AfterHead
  558|      0|                    }
  559|      0|                    Ok(None)
  560|       |                } else {
  561|      0|                    Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into())
  562|       |                }
  563|       |            }
  564|  1.03k|            Event::Eof => Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into()),
  565|       |            Event::Comment(_) | Event::Decl(_) | Event::PI(_) | Event::DocType(_) => {
  566|   248k|                Ok(None)
  567|       |            }
  568|      0|            Event::Empty(_) => unreachable!("Empty events are expended"),
  569|       |            Event::CData(_) => {
  570|      1|                Err(QueryResultsSyntaxError::msg(
  571|      1|                    "<![CDATA[...]]> are not supported in SPARQL XML results",
  572|      1|                )
  573|      1|                    .into())
  574|       |            }
  575|       |        }
  576|   252k|    }


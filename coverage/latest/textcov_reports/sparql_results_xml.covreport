_RNvNvCsllqgPCuXGc0_18sparql_results_xml1__19___libfuzzer_sys_run:
  241|  1.17k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  1.17k|                $body
  243|  1.17k|            }
rust_fuzzer_test_input:
  209|  1.17k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  1.17k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  1.17k|                }
  223|  1.17k|
  224|  1.17k|                __libfuzzer_sys_run(bytes);
  225|  1.17k|                0
  226|  1.17k|            }
LLVMFuzzerTestOneInput:
   58|  1.17k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.17k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.17k|    });
   63|  1.17k|
   64|  1.17k|    match test_input {
   65|  1.17k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.17k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsklKFDXJIVWe_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.17k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.17k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.17k|        rust_fuzzer_test_input(data_slice)
   62|  1.17k|    });

_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECs6IO3OdVZAM0_13oxigraph_fuzz:
 1044|  29.8k|    pub(crate) unsafe fn next(
 1045|  29.8k|        &mut self,
 1046|  29.8k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  29.8k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  29.8k|        let found = find_raw(self.start, self.end)?;
 1057|  29.6k|        let result = found.distance(self.original_start);
 1058|  29.6k|        self.start = found.add(1);
 1059|  29.6k|        Some(result)
 1060|  29.8k|    }
_RNvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  24.0k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  24.0k|        Iter {
 1029|  24.0k|            original_start: haystack.as_ptr(),
 1030|  24.0k|            start: haystack.as_ptr(),
 1031|  24.0k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  24.0k|            haystack: core::marker::PhantomData,
 1033|  24.0k|        }
 1034|  24.0k|    }
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECs6IO3OdVZAM0_13oxigraph_fuzz:
 1044|  1.96k|    pub(crate) unsafe fn next(
 1045|  1.96k|        &mut self,
 1046|  1.96k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.96k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.96k|        let found = find_raw(self.start, self.end)?;
 1057|  1.87k|        let result = found.distance(self.original_start);
 1058|  1.87k|        self.start = found.add(1);
 1059|  1.87k|        Some(result)
 1060|  1.96k|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs6IO3OdVZAM0_13oxigraph_fuzz:
 1125|  5.17k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  5.17k|    haystack: &[u8],
 1127|  5.17k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  5.17k|) -> Option<usize> {
 1129|  5.17k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  5.17k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  5.17k|    // a &[u8].
 1132|  5.17k|    let start = haystack.as_ptr();
 1133|  5.17k|    let end = start.add(haystack.len());
 1134|  5.17k|    let found = find_raw(start, end)?;
 1135|  4.60k|    Some(found.distance(start))
 1136|  5.17k|}
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECs5YIGoGv1zBy_10sparesults:
 1125|     95|pub(crate) unsafe fn search_slice_with_raw(
 1126|     95|    haystack: &[u8],
 1127|     95|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|     95|) -> Option<usize> {
 1129|     95|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|     95|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|     95|    // a &[u8].
 1132|     95|    let start = haystack.as_ptr();
 1133|     95|    let end = start.add(haystack.len());
 1134|     95|    let found = find_raw(start, end)?;
 1135|      3|    Some(found.distance(start))
 1136|     95|}
_RINvMs3_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0ECsdBczmAo6fNM_9quick_xml:
 1044|  1.46M|    pub(crate) unsafe fn next(
 1045|  1.46M|        &mut self,
 1046|  1.46M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.46M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.46M|        let found = find_raw(self.start, self.end)?;
 1057|  1.45M|        let result = found.distance(self.original_start);
 1058|  1.45M|        self.start = found.add(1);
 1059|  1.45M|        Some(result)
 1060|  1.46M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1B8_:
  117|  5.65k|    pub(crate) fn needle1(&self) -> u8 {
  118|  5.65k|        self.s1
  119|  5.65k|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  32.5k|    unsafe fn search_chunk(
  417|  32.5k|        &self,
  418|  32.5k|        cur: *const u8,
  419|  32.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  32.5k|    ) -> Option<*const u8> {
  421|  32.5k|        let chunk = V::load_unaligned(cur);
  422|  32.5k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  32.5k|        if mask.has_non_zero() {
  424|  30.2k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.29k|            None
  427|       |        }
  428|  32.5k|    }
_RINvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|    252|    unsafe fn search_chunk(
  963|    252|        &self,
  964|    252|        cur: *const u8,
  965|    252|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|    252|    ) -> Option<*const u8> {
  967|    252|        let chunk = V::load_unaligned(cur);
  968|    252|        let eq1 = self.v1.cmpeq(chunk);
  969|    252|        let eq2 = self.v2.cmpeq(chunk);
  970|    252|        let eq3 = self.v3.cmpeq(chunk);
  971|    252|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|    252|        if mask.has_non_zero() {
  973|    223|            let mask1 = eq1.movemask();
  974|    223|            let mask2 = eq2.movemask();
  975|    223|            let mask3 = eq3.movemask();
  976|    223|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|     29|            None
  979|       |        }
  980|    252|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|    377|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|    377|    start: *const u8,
 1150|    377|    end: *const u8,
 1151|    377|    confirm: F,
 1152|    377|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|    377|    let mut ptr = start;
 1155|    481|    while ptr < end {
 1156|    458|        if confirm(*ptr) {
 1157|    354|            return Some(ptr);
 1158|    104|        }
 1159|    104|        ptr = ptr.offset(1);
 1160|       |    }
 1161|     23|    None
 1162|    377|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newB8_:
  111|  35.1k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  35.1k|        One { s1: needle, v1: V::splat(needle) }
  113|  35.1k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Ba_:
  467|   102k|    pub(crate) fn needle2(&self) -> u8 {
  468|   102k|        self.s2
  469|   102k|    }
_RINvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  1.34k|    unsafe fn search_chunk(
  963|  1.34k|        &self,
  964|  1.34k|        cur: *const u8,
  965|  1.34k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  1.34k|    ) -> Option<*const u8> {
  967|  1.34k|        let chunk = V::load_unaligned(cur);
  968|  1.34k|        let eq1 = self.v1.cmpeq(chunk);
  969|  1.34k|        let eq2 = self.v2.cmpeq(chunk);
  970|  1.34k|        let eq3 = self.v3.cmpeq(chunk);
  971|  1.34k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  1.34k|        if mask.has_non_zero() {
  973|  1.08k|            let mask1 = eq1.movemask();
  974|  1.08k|            let mask2 = eq2.movemask();
  975|  1.08k|            let mask3 = eq3.movemask();
  976|  1.08k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    259|            None
  979|       |        }
  980|  1.34k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle2Bb_:
  733|    377|    pub(crate) fn needle2(&self) -> u8 {
  734|    377|        self.s2
  735|    377|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  63.0k|    pub(crate) unsafe fn find_raw(
  494|  63.0k|        &self,
  495|  63.0k|        start: *const u8,
  496|  63.0k|        end: *const u8,
  497|  63.0k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  63.0k|        let topos = V::Mask::first_offset;
  505|  63.0k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  63.0k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  60.3k|            return Some(cur);
  517|  2.66k|        }
  518|  2.66k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  2.66k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  2.66k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  2.66k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  3.70k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  1.72k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    689|                return Some(cur);
  554|  1.03k|            }
  555|  1.03k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.98k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.82k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.82k|            return self.search_chunk(cur, topos);
  566|    159|        }
  567|    159|        None
  568|  63.0k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBb_:
  710|  1.96k|    pub(crate) unsafe fn new(
  711|  1.96k|        needle1: u8,
  712|  1.96k|        needle2: u8,
  713|  1.96k|        needle3: u8,
  714|  1.96k|    ) -> Three<V> {
  715|  1.96k|        Three {
  716|  1.96k|            s1: needle1,
  717|  1.96k|            s2: needle2,
  718|  1.96k|            s3: needle3,
  719|  1.96k|            v1: V::splat(needle1),
  720|  1.96k|            v2: V::splat(needle2),
  721|  1.96k|            v3: V::splat(needle3),
  722|  1.96k|        }
  723|  1.96k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE3newBa_:
  450|  1.46M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.46M|        Two {
  452|  1.46M|            s1: needle1,
  453|  1.46M|            s2: needle2,
  454|  1.46M|            v1: V::splat(needle1),
  455|  1.46M|            v2: V::splat(needle2),
  456|  1.46M|        }
  457|  1.46M|    }
_RINvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  1.51k|    unsafe fn search_chunk(
  417|  1.51k|        &self,
  418|  1.51k|        cur: *const u8,
  419|  1.51k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  1.51k|    ) -> Option<*const u8> {
  421|  1.51k|        let chunk = V::load_unaligned(cur);
  422|  1.51k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  1.51k|        if mask.has_non_zero() {
  424|  1.31k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|    204|            None
  427|       |        }
  428|  1.51k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  1.31k|    pub(crate) unsafe fn find_raw(
  766|  1.31k|        &self,
  767|  1.31k|        start: *const u8,
  768|  1.31k|        end: *const u8,
  769|  1.31k|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  1.31k|        let topos = V::Mask::first_offset;
  777|  1.31k|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  1.31k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  1.07k|            return Some(cur);
  789|    243|        }
  790|    243|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    243|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    243|        if len >= Self::LOOP_SIZE {
  794|    322|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|    305|                let a = V::load_aligned(cur);
  798|    305|                let b = V::load_aligned(cur.add(V::BYTES));
  799|    305|                let eqa1 = self.v1.cmpeq(a);
  800|    305|                let eqb1 = self.v1.cmpeq(b);
  801|    305|                let eqa2 = self.v2.cmpeq(a);
  802|    305|                let eqb2 = self.v2.cmpeq(b);
  803|    305|                let eqa3 = self.v3.cmpeq(a);
  804|    305|                let eqb3 = self.v3.cmpeq(b);
  805|    305|                let or1 = eqa1.or(eqb1);
  806|    305|                let or2 = eqa2.or(eqb2);
  807|    305|                let or3 = eqa3.or(eqb3);
  808|    305|                let or4 = or1.or(or2);
  809|    305|                let or5 = or3.or(or4);
  810|    305|                if or5.movemask_will_have_non_zero() {
  811|    220|                    let mask = eqa1
  812|    220|                        .movemask()
  813|    220|                        .or(eqa2.movemask())
  814|    220|                        .or(eqa3.movemask());
  815|    220|                    if mask.has_non_zero() {
  816|    121|                        return Some(cur.add(topos(mask)));
  817|     99|                    }
  818|     99|
  819|     99|                    let mask = eqb1
  820|     99|                        .movemask()
  821|     99|                        .or(eqb2.movemask())
  822|     99|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|     99|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|     85|                }
  826|     85|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|      6|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|     30|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     12|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      5|                return Some(cur);
  836|      7|            }
  837|      7|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|     18|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|     12|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|     12|            return self.search_chunk(cur, topos);
  848|      6|        }
  849|      6|        None
  850|  1.31k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  66.5k|    unsafe fn search_chunk(
  671|  66.5k|        &self,
  672|  66.5k|        cur: *const u8,
  673|  66.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  66.5k|    ) -> Option<*const u8> {
  675|  66.5k|        let chunk = V::load_unaligned(cur);
  676|  66.5k|        let eq1 = self.v1.cmpeq(chunk);
  677|  66.5k|        let eq2 = self.v2.cmpeq(chunk);
  678|  66.5k|        let mask = eq1.or(eq2).movemask();
  679|  66.5k|        if mask.has_non_zero() {
  680|  62.6k|            let mask1 = eq1.movemask();
  681|  62.6k|            let mask2 = eq2.movemask();
  682|  62.6k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  3.96k|            None
  685|       |        }
  686|  66.5k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle3Bb_:
  739|    256|    pub(crate) fn needle3(&self) -> u8 {
  740|    256|        self.s3
  741|    256|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  1.38k|    pub(crate) unsafe fn find_raw(
  144|  1.38k|        &self,
  145|  1.38k|        start: *const u8,
  146|  1.38k|        end: *const u8,
  147|  1.38k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.38k|        let topos = V::Mask::first_offset;
  155|  1.38k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.38k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.25k|            return Some(cur);
  167|    132|        }
  168|    132|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|    132|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|    132|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|    132|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|    162|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|     40|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     10|                return Some(cur);
  216|     30|            }
  217|     30|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|    122|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|     94|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|     94|            return self.search_chunk(cur, topos);
  228|     28|        }
  229|     28|        None
  230|  1.38k|    }
_RINvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.31M|    unsafe fn search_chunk(
  671|  1.31M|        &self,
  672|  1.31M|        cur: *const u8,
  673|  1.31M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.31M|    ) -> Option<*const u8> {
  675|  1.31M|        let chunk = V::load_unaligned(cur);
  676|  1.31M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.31M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.31M|        let mask = eq1.or(eq2).movemask();
  679|  1.31M|        if mask.has_non_zero() {
  680|  1.29M|            let mask1 = eq1.movemask();
  681|  1.29M|            let mask2 = eq2.movemask();
  682|  1.29M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  21.6k|            None
  685|       |        }
  686|  1.31M|    }
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newB8_:
  111|  35.1k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  35.1k|        One { s1: needle, v1: V::splat(needle) }
  113|  35.1k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.31M|    pub(crate) unsafe fn find_raw(
  494|  1.31M|        &self,
  495|  1.31M|        start: *const u8,
  496|  1.31M|        end: *const u8,
  497|  1.31M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.31M|        let topos = V::Mask::first_offset;
  505|  1.31M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.31M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.29M|            return Some(cur);
  517|  20.9k|        }
  518|  20.9k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  20.9k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  20.9k|        if len >= Self::LOOP_SIZE {
  522|  19.2k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  17.9k|                let a = V::load_aligned(cur);
  526|  17.9k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  17.9k|                let eqa1 = self.v1.cmpeq(a);
  528|  17.9k|                let eqb1 = self.v1.cmpeq(b);
  529|  17.9k|                let eqa2 = self.v2.cmpeq(a);
  530|  17.9k|                let eqb2 = self.v2.cmpeq(b);
  531|  17.9k|                let or1 = eqa1.or(eqb1);
  532|  17.9k|                let or2 = eqa2.or(eqb2);
  533|  17.9k|                let or3 = or1.or(or2);
  534|  17.9k|                if or3.movemask_will_have_non_zero() {
  535|  17.1k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  17.1k|                    if mask.has_non_zero() {
  537|  16.1k|                        return Some(cur.add(topos(mask)));
  538|    961|                    }
  539|    961|
  540|    961|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|    961|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|    839|                }
  544|    839|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  2.55k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  3.99k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  1.86k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.71k|                return Some(cur);
  554|    157|            }
  555|    157|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  2.12k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  2.08k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  2.08k|            return self.search_chunk(cur, topos);
  566|     41|        }
  567|     41|        None
  568|  1.31M|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBb_:
  710|  1.96k|    pub(crate) unsafe fn new(
  711|  1.96k|        needle1: u8,
  712|  1.96k|        needle2: u8,
  713|  1.96k|        needle3: u8,
  714|  1.96k|    ) -> Three<V> {
  715|  1.96k|        Three {
  716|  1.96k|            s1: needle1,
  717|  1.96k|            s2: needle2,
  718|  1.96k|            s3: needle3,
  719|  1.96k|            v1: V::splat(needle1),
  720|  1.96k|            v2: V::splat(needle2),
  721|  1.96k|            v3: V::splat(needle3),
  722|  1.96k|        }
  723|  1.96k|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Ba_:
  461|   126k|    pub(crate) fn needle1(&self) -> u8 {
  462|   126k|        self.s1
  463|   126k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE8find_rawBb_:
  765|    236|    pub(crate) unsafe fn find_raw(
  766|    236|        &self,
  767|    236|        start: *const u8,
  768|    236|        end: *const u8,
  769|    236|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|    236|        let topos = V::Mask::first_offset;
  777|    236|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|    236|        if let Some(cur) = self.search_chunk(start, topos) {
  788|    221|            return Some(cur);
  789|     15|        }
  790|     15|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|     15|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|     15|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|     15|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|     27|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     14|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      2|                return Some(cur);
  836|     12|            }
  837|     12|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|     13|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|      2|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|      2|            return self.search_chunk(cur, topos);
  848|     11|        }
  849|     11|        None
  850|    236|    }
_RNvMs_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE3newBa_:
  450|  1.46M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.46M|        Two {
  452|  1.46M|            s1: needle1,
  453|  1.46M|            s2: needle2,
  454|  1.46M|            v1: V::splat(needle1),
  455|  1.46M|            v2: V::splat(needle2),
  456|  1.46M|        }
  457|  1.46M|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  2.18k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  2.18k|    start: *const u8,
 1150|  2.18k|    end: *const u8,
 1151|  2.18k|    confirm: F,
 1152|  2.18k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  2.18k|    let mut ptr = start;
 1155|  6.00k|    while ptr < end {
 1156|  5.65k|        if confirm(*ptr) {
 1157|  1.83k|            return Some(ptr);
 1158|  3.81k|        }
 1159|  3.81k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|    356|    None
 1162|  2.18k|}
_RNvMNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  31.4k|    pub(crate) unsafe fn find_raw(
  144|  31.4k|        &self,
  145|  31.4k|        start: *const u8,
  146|  31.4k|        end: *const u8,
  147|  31.4k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  31.4k|        let topos = V::Mask::first_offset;
  155|  31.4k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  31.4k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  30.0k|            return Some(cur);
  167|  1.37k|        }
  168|  1.37k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.37k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.37k|        if len >= Self::LOOP_SIZE {
  172|  2.40k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  2.11k|                let a = V::load_aligned(cur);
  176|  2.11k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  2.11k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  2.11k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  2.11k|                let eqa = self.v1.cmpeq(a);
  180|  2.11k|                let eqb = self.v1.cmpeq(b);
  181|  2.11k|                let eqc = self.v1.cmpeq(c);
  182|  2.11k|                let eqd = self.v1.cmpeq(d);
  183|  2.11k|                let or1 = eqa.or(eqb);
  184|  2.11k|                let or2 = eqc.or(eqd);
  185|  2.11k|                let or3 = or1.or(or2);
  186|  2.11k|                if or3.movemask_will_have_non_zero() {
  187|    829|                    let mask = eqa.movemask();
  188|    829|                    if mask.has_non_zero() {
  189|    504|                        return Some(cur.add(topos(mask)));
  190|    325|                    }
  191|    325|
  192|    325|                    let mask = eqb.movemask();
  193|    325|                    if mask.has_non_zero() {
  194|    185|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    140|                    }
  196|    140|
  197|    140|                    let mask = eqc.movemask();
  198|    140|                    if mask.has_non_zero() {
  199|     94|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     46|                    }
  201|     46|
  202|     46|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     46|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  1.28k|                }
  206|  1.28k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|    249|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  1.16k|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    764|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    136|                return Some(cur);
  216|    628|            }
  217|    628|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|    405|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|    364|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|    364|            return self.search_chunk(cur, topos);
  228|     41|        }
  229|     41|        None
  230|  31.4k|    }
_RNvMs0_NtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iE7needle1Bb_:
  727|    458|    pub(crate) fn needle1(&self) -> u8 {
  728|    458|        self.s1
  729|    458|    }
_RINvNtNtNtCsezyNti1ZN2c_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  84.8k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  84.8k|    start: *const u8,
 1150|  84.8k|    end: *const u8,
 1151|  84.8k|    confirm: F,
 1152|  84.8k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  84.8k|    let mut ptr = start;
 1155|   130k|    while ptr < end {
 1156|   126k|        if confirm(*ptr) {
 1157|  80.1k|            return Some(ptr);
 1158|  46.0k|        }
 1159|  46.0k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  4.75k|    None
 1162|  84.8k|}

_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  1.96k|    pub unsafe fn new_unchecked(
  936|  1.96k|        needle1: u8,
  937|  1.96k|        needle2: u8,
  938|  1.96k|        needle3: u8,
  939|  1.96k|    ) -> Three {
  940|  1.96k|        Three {
  941|  1.96k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  1.96k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  1.96k|        }
  944|  1.96k|    }
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  1.96k|    pub unsafe fn find_raw(
 1038|  1.96k|        &self,
 1039|  1.96k|        start: *const u8,
 1040|  1.96k|        end: *const u8,
 1041|  1.96k|    ) -> Option<*const u8> {
 1042|  1.96k|        if start >= end {
 1043|     34|            return None;
 1044|  1.93k|        }
 1045|  1.93k|        let len = end.distance(start);
 1046|  1.93k|        if len < __m256i::BYTES {
 1047|    613|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|    377|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|    377|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|    236|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  1.31k|        }
 1061|  1.31k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  1.31k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  1.31k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  1.31k|        // responsibility.
 1065|  1.31k|        //
 1066|  1.31k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  1.31k|        // means we'd have to annotate this routine with `target_feature`.
 1068|  1.31k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  1.31k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  1.31k|        // The real problem is that a routine with a `target_feature`
 1071|  1.31k|        // annotation generally can't be inlined into caller code unless
 1072|  1.31k|        // the caller code has the same target feature annotations. Namely,
 1073|  1.31k|        // the common case (at time of writing) is for calling code to not
 1074|  1.31k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  1.31k|        // `target_feature` on this routine, it can be inlined which will
 1076|  1.31k|        // handle some of the short-haystack cases above without touching the
 1077|  1.31k|        // architecture specific code.
 1078|  1.31k|        self.find_raw_avx2(start, end)
 1079|  1.96k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  1.31k|    unsafe fn find_raw_avx2(
 1192|  1.31k|        &self,
 1193|  1.31k|        start: *const u8,
 1194|  1.31k|        end: *const u8,
 1195|  1.31k|    ) -> Option<*const u8> {
 1196|  1.31k|        self.avx2.find_raw(start, end)
 1197|  1.31k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  31.4k|    unsafe fn find_raw_avx2(
  397|  31.4k|        &self,
  398|  31.4k|        start: *const u8,
  399|  31.4k|        end: *const u8,
  400|  31.4k|    ) -> Option<*const u8> {
  401|  31.4k|        self.avx2.find_raw(start, end)
  402|  31.4k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.46M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.46M|        Two {
  558|  1.46M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.46M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.46M|        }
  561|  1.46M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.46M|    pub unsafe fn find_raw(
  655|  1.46M|        &self,
  656|  1.46M|        start: *const u8,
  657|  1.46M|        end: *const u8,
  658|  1.46M|    ) -> Option<*const u8> {
  659|  1.46M|        if start >= end {
  660|  6.98k|            return None;
  661|  1.45M|        }
  662|  1.45M|        let len = end.distance(start);
  663|  1.45M|        if len < __m256i::BYTES {
  664|   147k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  84.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  84.8k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  63.0k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.31M|        }
  676|  1.31M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.31M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.31M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.31M|        // responsibility.
  680|  1.31M|        //
  681|  1.31M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.31M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.31M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.31M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.31M|        // The real problem is that a routine with a `target_feature`
  686|  1.31M|        // annotation generally can't be inlined into caller code unless
  687|  1.31M|        // the caller code has the same target feature annotations. Namely,
  688|  1.31M|        // the common case (at time of writing) is for calling code to not
  689|  1.31M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.31M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.31M|        // handle some of the short-haystack cases above without touching the
  692|  1.31M|        // architecture specific code.
  693|  1.31M|        self.find_raw_avx2(start, end)
  694|  1.46M|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.31M|    unsafe fn find_raw_avx2(
  805|  1.31M|        &self,
  806|  1.31M|        start: *const u8,
  807|  1.31M|        end: *const u8,
  808|  1.31M|    ) -> Option<*const u8> {
  809|  1.31M|        self.avx2.find_raw(start, end)
  810|  1.31M|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  35.1k|    pub unsafe fn find_raw(
  180|  35.1k|        &self,
  181|  35.1k|        start: *const u8,
  182|  35.1k|        end: *const u8,
  183|  35.1k|    ) -> Option<*const u8> {
  184|  35.1k|        if start >= end {
  185|    106|            return None;
  186|  35.0k|        }
  187|  35.0k|        let len = end.distance(start);
  188|  35.0k|        if len < __m256i::BYTES {
  189|  3.57k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  2.18k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  2.18k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  1.38k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  31.4k|        }
  201|  31.4k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  31.4k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  31.4k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  31.4k|        // responsibility.
  205|  31.4k|        //
  206|  31.4k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  31.4k|        // means we'd have to annotate this routine with `target_feature`.
  208|  31.4k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  31.4k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  31.4k|        // The real problem is that a routine with a `target_feature`
  211|  31.4k|        // annotation generally can't be inlined into caller code unless
  212|  31.4k|        // the caller code has the same target feature annotations. Namely,
  213|  31.4k|        // the common case (at time of writing) is for calling code to not
  214|  31.4k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  31.4k|        // `target_feature` on this routine, it can be inlined which will
  216|  31.4k|        // handle some of the short-haystack cases above without touching the
  217|  31.4k|        // architecture specific code.
  218|  31.4k|        self.find_raw_avx2(start, end)
  219|  35.1k|    }
_RNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  63.0k|    unsafe fn find_raw_sse2(
  765|  63.0k|        &self,
  766|  63.0k|        start: *const u8,
  767|  63.0k|        end: *const u8,
  768|  63.0k|    ) -> Option<*const u8> {
  769|  63.0k|        self.sse2.find_raw(start, end)
  770|  63.0k|    }
_RNCNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|    458|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|    458|                    b == self.sse2.needle1()
 1052|    377|                        || b == self.sse2.needle2()
 1053|    256|                        || b == self.sse2.needle3()
 1054|    458|                })
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|    236|    unsafe fn find_raw_sse2(
 1152|    236|        &self,
 1153|    236|        start: *const u8,
 1154|    236|        end: *const u8,
 1155|    236|    ) -> Option<*const u8> {
 1156|    236|        self.sse2.find_raw(start, end)
 1157|    236|    }
_RNCNvMs2_NtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|   126k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|   126k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   126k|                })
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  1.38k|    unsafe fn find_raw_sse2(
  337|  1.38k|        &self,
  338|  1.38k|        start: *const u8,
  339|  1.38k|        end: *const u8,
  340|  1.38k|    ) -> Option<*const u8> {
  341|  1.38k|        self.sse2.find_raw(start, end)
  342|  1.38k|    }
_RNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  35.1k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  35.1k|        One {
   71|  35.1k|            sse2: generic::One::new(needle),
   72|  35.1k|            avx2: generic::One::new(needle),
   73|  35.1k|        }
   74|  35.1k|    }
_RNCNvMNtNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  5.65k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  5.65k|                    b == self.sse2.needle1()
  194|  5.65k|                })

_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw:
  174|  35.1k|pub(crate) fn memchr_raw(
  175|  35.1k|    n1: u8,
  176|  35.1k|    start: *const u8,
  177|  35.1k|    end: *const u8,
  178|  35.1k|) -> Option<*const u8> {
  179|  35.1k|    // SAFETY: We provide a valid function pointer type.
  180|  35.1k|    unsafe_ifunc!(
  181|  35.1k|        One,
  182|  35.1k|        find_raw,
  183|  35.1k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  35.1k|        Option<*const u8>,
  185|  35.1k|        start,
  186|  35.1k|        end,
  187|  35.1k|        n1
  188|  35.1k|    )
  189|  35.1k|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  1.96k|pub(crate) fn memchr3_raw(
  271|  1.96k|    n1: u8,
  272|  1.96k|    n2: u8,
  273|  1.96k|    n3: u8,
  274|  1.96k|    start: *const u8,
  275|  1.96k|    end: *const u8,
  276|  1.96k|) -> Option<*const u8> {
  277|  1.96k|    // SAFETY: We provide a valid function pointer type.
  278|  1.96k|    unsafe_ifunc!(
  279|  1.96k|        Three,
  280|  1.96k|        find_raw,
  281|  1.96k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  1.96k|        Option<*const u8>,
  283|  1.96k|        start,
  284|  1.96k|        end,
  285|  1.96k|        n1,
  286|  1.96k|        n2,
  287|  1.96k|        n3
  288|  1.96k|    )
  289|  1.96k|}
_RNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.46M|pub(crate) fn memchr2_raw(
  221|  1.46M|    n1: u8,
  222|  1.46M|    n2: u8,
  223|  1.46M|    start: *const u8,
  224|  1.46M|    end: *const u8,
  225|  1.46M|) -> Option<*const u8> {
  226|  1.46M|    // SAFETY: We provide a valid function pointer type.
  227|  1.46M|    unsafe_ifunc!(
  228|  1.46M|        Two,
  229|  1.46M|        find_raw,
  230|  1.46M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.46M|        Option<*const u8>,
  232|  1.46M|        start,
  233|  1.46M|        end,
  234|  1.46M|        n1,
  235|  1.46M|        n2
  236|  1.46M|    )
  237|  1.46M|}
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.46M|        unsafe fn find_avx2(
   79|  1.46M|            $($needle: u8),+,
   80|  1.46M|            $hay_start: *const u8,
   81|  1.46M|            $hay_end: *const u8,
   82|  1.46M|        ) -> $retty {
   83|  1.46M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.46M|            $memchrty::new_unchecked($($needle),+)
   85|  1.46M|                .$memchrfind($hay_start, $hay_end)
   86|  1.46M|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  35.1k|        unsafe fn find_avx2(
   79|  35.1k|            $($needle: u8),+,
   80|  35.1k|            $hay_start: *const u8,
   81|  35.1k|            $hay_end: *const u8,
   82|  35.1k|        ) -> $retty {
   83|  35.1k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  35.1k|            $memchrty::new_unchecked($($needle),+)
   85|  35.1k|                .$memchrfind($hay_start, $hay_end)
   86|  35.1k|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  1.96k|        unsafe fn find_avx2(
   79|  1.96k|            $($needle: u8),+,
   80|  1.96k|            $hay_start: *const u8,
   81|  1.96k|            $hay_end: *const u8,
   82|  1.96k|        ) -> $retty {
   83|  1.96k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.96k|            $memchrty::new_unchecked($($needle),+)
   85|  1.96k|                .$memchrfind($hay_start, $hay_end)
   86|  1.96k|        }
_RNvNvNtNtNtCsezyNti1ZN2c_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  4.39M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  4.39M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  4.39M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  4.39M|    }
_RNvXNtCsezyNti1ZN2c_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  25.3k|    fn as_usize(self) -> usize {
   27|  25.3k|        self as usize
   28|  25.3k|    }

_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr_iterCs6IO3OdVZAM0_13oxigraph_fuzz:
  216|  11.0k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|  11.0k|    Memchr::new(needle, haystack)
  218|  11.0k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr3_iterCs6IO3OdVZAM0_13oxigraph_fuzz:
  256|     95|pub fn memchr3_iter<'h>(
  257|     95|    needle1: u8,
  258|     95|    needle2: u8,
  259|     95|    needle3: u8,
  260|     95|    haystack: &'h [u8],
  261|     95|) -> Memchr3<'h> {
  262|     95|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|     95|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCs6IO3OdVZAM0_13oxigraph_fuzz:
   27|  5.17k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  5.17k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  5.17k|    // pointer between start and end.
   30|  5.17k|    unsafe {
   31|  5.17k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  5.17k|        })
   34|  5.17k|    }
   35|  5.17k|}
_RNvXs7_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr3NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs6IO3OdVZAM0_13oxigraph_fuzz:
  465|  1.96k|    fn next(&mut self) -> Option<usize> {
  466|  1.96k|        // SAFETY: All of our implementations of memchr ensure that any
  467|  1.96k|        // pointers returns will fall within the start and end bounds, and this
  468|  1.96k|        // upholds the safety contract of `self.it.next`.
  469|  1.96k|        unsafe {
  470|  1.96k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  1.96k|            })
  473|  1.96k|        }
  474|  1.96k|    }
_RNvXs_NtCsezyNti1ZN2c_6memchr6memchrNtB4_6MemchrNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs6IO3OdVZAM0_13oxigraph_fuzz:
  312|  29.8k|    fn next(&mut self) -> Option<usize> {
  313|  29.8k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  29.8k|        // pointers returns will fall within the start and end bounds, and this
  315|  29.8k|        // upholds the safety contract of `self.it.next`.
  316|  29.8k|        unsafe {
  317|  29.8k|            // NOTE: I attempted to define an enum of previously created
  318|  29.8k|            // searchers and then switch on those here instead of just
  319|  29.8k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  29.8k|            // that turned out to have a fair bit of extra overhead when
  321|  29.8k|            // searching very small haystacks.
  322|  29.8k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  29.8k|        }
  324|  29.8k|    }
_RNvMNtCsezyNti1ZN2c_6memchr6memchrNtB2_6Memchr3newCs6IO3OdVZAM0_13oxigraph_fuzz:
  300|  11.0k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|  11.0k|        Memchr {
  302|  11.0k|            needle1,
  303|  11.0k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|  11.0k|        }
  305|  11.0k|    }
_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCs6IO3OdVZAM0_13oxigraph_fuzz:
  377|  12.4k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  12.4k|        Memchr2 {
  379|  12.4k|            needle1,
  380|  12.4k|            needle2,
  381|  12.4k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  12.4k|        }
  383|  12.4k|    }
_RNvMs6_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr33newCs6IO3OdVZAM0_13oxigraph_fuzz:
  446|     95|    pub fn new(
  447|     95|        needle1: u8,
  448|     95|        needle2: u8,
  449|     95|        needle3: u8,
  450|     95|        haystack: &'h [u8],
  451|     95|    ) -> Memchr3<'h> {
  452|     95|        Memchr3 {
  453|     95|            needle1,
  454|     95|            needle2,
  455|     95|            needle3,
  456|     95|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|     95|        }
  458|     95|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCs6IO3OdVZAM0_13oxigraph_fuzz:
  232|  12.4k|pub fn memchr2_iter<'h>(
  233|  12.4k|    needle1: u8,
  234|  12.4k|    needle2: u8,
  235|  12.4k|    haystack: &'h [u8],
  236|  12.4k|) -> Memchr2<'h> {
  237|  12.4k|    Memchr2::new(needle1, needle2, haystack)
  238|  12.4k|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr6memchrCs5YIGoGv1zBy_10sparesults:
   27|     95|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|     95|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|     95|    // pointer between start and end.
   30|     95|    unsafe {
   31|     95|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|     95|        })
   34|     95|    }
   35|     95|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr2_rawCsdBczmAo6fNM_9quick_xml:
  574|  1.46M|unsafe fn memchr2_raw(
  575|  1.46M|    needle1: u8,
  576|  1.46M|    needle2: u8,
  577|  1.46M|    start: *const u8,
  578|  1.46M|    end: *const u8,
  579|  1.46M|) -> Option<*const u8> {
  580|  1.46M|    #[cfg(target_arch = "x86_64")]
  581|  1.46M|    {
  582|  1.46M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.46M|    }
  584|  1.46M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  1.46M|    {
  586|  1.46M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.46M|    }
  588|  1.46M|    #[cfg(target_arch = "aarch64")]
  589|  1.46M|    {
  590|  1.46M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.46M|    }
  592|  1.46M|    #[cfg(not(any(
  593|  1.46M|        target_arch = "x86_64",
  594|  1.46M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  1.46M|        target_arch = "aarch64"
  596|  1.46M|    )))]
  597|  1.46M|    {
  598|  1.46M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.46M|            .find_raw(start, end)
  600|  1.46M|    }
  601|  1.46M|}
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawCsdBczmAo6fNM_9quick_xml:
  504|  29.8k|unsafe fn memchr_raw(
  505|  29.8k|    needle: u8,
  506|  29.8k|    start: *const u8,
  507|  29.8k|    end: *const u8,
  508|  29.8k|) -> Option<*const u8> {
  509|  29.8k|    #[cfg(target_arch = "x86_64")]
  510|  29.8k|    {
  511|  29.8k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  29.8k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  29.8k|        // time. This function also handles using a fallback if neither AVX2
  514|  29.8k|        // nor SSE2 (unusual) are available.
  515|  29.8k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  29.8k|    }
  517|  29.8k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  29.8k|    {
  519|  29.8k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  29.8k|    }
  521|  29.8k|    #[cfg(target_arch = "aarch64")]
  522|  29.8k|    {
  523|  29.8k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  29.8k|    }
  525|  29.8k|    #[cfg(not(any(
  526|  29.8k|        target_arch = "x86_64",
  527|  29.8k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  29.8k|        target_arch = "aarch64"
  529|  29.8k|    )))]
  530|  29.8k|    {
  531|  29.8k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  29.8k|    }
  533|  29.8k|}
_RNCNvXs7_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr3NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdBczmAo6fNM_9quick_xml:
  470|  1.96k|            self.it.next(|s, e| {
  471|  1.96k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  1.96k|            })
_RNCNvXs_NtCsezyNti1ZN2c_6memchr6memchrNtB6_6MemchrNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdBczmAo6fNM_9quick_xml:
  322|  29.8k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvMs2_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr23newCsdBczmAo6fNM_9quick_xml:
  377|    471|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|    471|        Memchr2 {
  379|    471|            needle1,
  380|    471|            needle2,
  381|    471|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|    471|        }
  383|    471|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr11memchr3_rawCsdBczmAo6fNM_9quick_xml:
  646|  1.96k|unsafe fn memchr3_raw(
  647|  1.96k|    needle1: u8,
  648|  1.96k|    needle2: u8,
  649|  1.96k|    needle3: u8,
  650|  1.96k|    start: *const u8,
  651|  1.96k|    end: *const u8,
  652|  1.96k|) -> Option<*const u8> {
  653|  1.96k|    #[cfg(target_arch = "x86_64")]
  654|  1.96k|    {
  655|  1.96k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  1.96k|            needle1, needle2, needle3, start, end,
  657|  1.96k|        )
  658|  1.96k|    }
  659|  1.96k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  1.96k|    {
  661|  1.96k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  1.96k|            needle1, needle2, needle3, start, end,
  663|  1.96k|        )
  664|  1.96k|    }
  665|  1.96k|    #[cfg(target_arch = "aarch64")]
  666|  1.96k|    {
  667|  1.96k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  1.96k|            needle1, needle2, needle3, start, end,
  669|  1.96k|        )
  670|  1.96k|    }
  671|  1.96k|    #[cfg(not(any(
  672|  1.96k|        target_arch = "x86_64",
  673|  1.96k|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  1.96k|        target_arch = "aarch64"
  675|  1.96k|    )))]
  676|  1.96k|    {
  677|  1.96k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  1.96k|            .find_raw(start, end)
  679|  1.96k|    }
  680|  1.96k|}
_RNCNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CsdBczmAo6fNM_9quick_xml:
  395|  1.46M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvXs3_NtCsezyNti1ZN2c_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCsdBczmAo6fNM_9quick_xml:
  390|  1.46M|    fn next(&mut self) -> Option<usize> {
  391|  1.46M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  1.46M|        // pointers returns will fall within the start and end bounds, and this
  393|  1.46M|        // upholds the safety contract of `self.it.next`.
  394|  1.46M|        unsafe {
  395|  1.46M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  1.46M|        }
  397|  1.46M|    }
_RNvNtCsezyNti1ZN2c_6memchr6memchr12memchr2_iterCsdBczmAo6fNM_9quick_xml:
  232|    471|pub fn memchr2_iter<'h>(
  233|    471|    needle1: u8,
  234|    471|    needle2: u8,
  235|    471|    haystack: &'h [u8],
  236|    471|) -> Memchr2<'h> {
  237|    471|    Memchr2::new(needle1, needle2, haystack)
  238|    471|}
_RNCNvNtCsezyNti1ZN2c_6memchr6memchr6memchr0B5_:
   31|  5.26k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  5.26k|            memchr_raw(needle, start, end)
   33|  5.26k|        })
_RNvNtCsezyNti1ZN2c_6memchr6memchr10memchr_rawB3_:
  504|  5.26k|unsafe fn memchr_raw(
  505|  5.26k|    needle: u8,
  506|  5.26k|    start: *const u8,
  507|  5.26k|    end: *const u8,
  508|  5.26k|) -> Option<*const u8> {
  509|  5.26k|    #[cfg(target_arch = "x86_64")]
  510|  5.26k|    {
  511|  5.26k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  5.26k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  5.26k|        // time. This function also handles using a fallback if neither AVX2
  514|  5.26k|        // nor SSE2 (unusual) are available.
  515|  5.26k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  5.26k|    }
  517|  5.26k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  5.26k|    {
  519|  5.26k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  5.26k|    }
  521|  5.26k|    #[cfg(target_arch = "aarch64")]
  522|  5.26k|    {
  523|  5.26k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  5.26k|    }
  525|  5.26k|    #[cfg(not(any(
  526|  5.26k|        target_arch = "x86_64",
  527|  5.26k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  5.26k|        target_arch = "aarch64"
  529|  5.26k|    )))]
  530|  5.26k|    {
  531|  5.26k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  5.26k|    }
  533|  5.26k|}

_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  68.3k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  68.3k|            _mm_loadu_si128(data as *const __m128i)
  222|  68.3k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.40M|    fn first_offset(self) -> usize {
  174|  1.40M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.40M|        // the bytes so we are in practice), where the most significant byte
  176|  1.40M|        // is at a higher address. That means the least significant bit that
  177|  1.40M|        // is set corresponds to the position of our first matching byte.
  178|  1.40M|        // That position corresponds to the number of zeros after the least
  179|  1.40M|        // significant bit.
  180|  1.40M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.40M|    }
_RNvMNtCsezyNti1ZN2c_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.40M|    fn get_for_offset(self) -> u32 {
  129|  1.40M|        #[cfg(target_endian = "big")]
  130|  1.40M|        {
  131|  1.40M|            self.0.swap_bytes()
  132|  1.40M|        }
  133|  1.40M|        #[cfg(target_endian = "little")]
  134|  1.40M|        {
  135|  1.40M|            self.0
  136|  1.40M|        }
  137|  1.40M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|   194k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|   194k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|   194k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  1.45M|    fn has_non_zero(self) -> bool {
  149|  1.45M|        self.0 != 0
  150|  1.45M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|   135k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|   135k|            _mm_cmpeq_epi8(self, vector2)
  232|   135k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  3.99M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  3.99M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  3.99M|        }
_RNvYNtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtNtCsezyNti1ZN2c_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  20.3k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  20.3k|        self.movemask().has_non_zero()
   67|  20.3k|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.34M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.34M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.34M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  2.74M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  2.74M|            _mm256_cmpeq_epi8(self, vector2)
  282|  2.74M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  2.97M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  2.97M|            _mm_set1_epi8(byte as i8)
  212|  2.97M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86sse2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  67.0k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  67.0k|            _mm_or_si128(self, vector2)
  242|  67.0k|        }
_RNvXs_NtCsezyNti1ZN2c_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.37M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.37M|        SensibleMoveMask(self.0 | other.0)
  165|  1.37M|    }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  44.9k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  44.9k|            _mm256_load_si256(data as *const __m256i)
  267|  44.9k|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  2.97M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  2.97M|            _mm256_set1_epi8(byte as i8)
  262|  2.97M|        }
_RNvXNtNtCsezyNti1ZN2c_6memchr6vector7x86avx2NtNtNtCs9nhK3FOW46N_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  1.37M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  1.37M|            _mm256_or_si256(self, vector2)
  292|  1.37M|        }

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCsklKFDXJIVWe_13libfuzzer_sys:
   49|  1.17k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.17k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.17k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.17k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.17k|        // `SeqCst` operations on the slow path.
   54|  1.17k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.17k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCsklKFDXJIVWe_13libfuzzer_sys:
  963|  1.17k|        pub fn get(&self) -> Option<&T> {
  964|  1.17k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  1.17k|                None
  969|       |            }
  970|  1.17k|        }

_RNvMs_NtCsdBczmAo6fNM_9quick_xml8encodingNtB4_7Decoder6decode:
   82|    626|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|    626|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|    562|        decoded
   90|    626|    }

_RNvXs1_NtCsdBczmAo6fNM_9quick_xml6errorsNtB5_5ErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromB7_:
   97|    111|    fn from(error: EscapeError) -> Error {
   98|    111|        Error::EscapeError(error)
   99|    111|    }
_RNvXs_NtCsdBczmAo6fNM_9quick_xml6errorsNtB4_5ErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtNtBR_3str5error9Utf8ErrorE4fromB6_:
   81|     64|    fn from(error: Utf8Error) -> Error {
   82|     64|        Error::NonDecodable(Some(error))
   83|     64|    }

_RNvNtCsdBczmAo6fNM_9quick_xml7escapei12parse_number:
 1694|  18.9k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1695|  18.9k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1696|  7.62k|        parse_hexadecimal(hex_digits)
 1697|       |    } else {
 1698|  11.2k|        parse_decimal(bytes)
 1699|     18|    }?;
 1700|  18.9k|    if code == 0 {
 1701|     12|        return Err(EscapeError::EntityWithNull(range));
 1702|  18.8k|    }
 1703|  18.8k|    match std::char::from_u32(code) {
 1704|  18.8k|        Some(c) => Ok(c),
 1705|     14|        None => Err(EscapeError::InvalidCodepoint(code)),
 1706|       |    }
 1707|  18.9k|}
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei13parse_decimal:
 1727|  11.2k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1728|  11.2k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1729|  11.2k|    if bytes.len() > 7 {
 1730|      1|        return Err(EscapeError::TooLongDecimal);
 1731|  11.2k|    }
 1732|  11.2k|    let mut code = 0;
 1733|  46.8k|    for b in bytes.bytes() {
 1734|  46.8k|        code *= 10;
 1735|  46.8k|        code += match b {
 1736|  46.8k|            b'0'..=b'9' => b - b'0',
 1737|      9|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1738|       |        } as u32;
 1739|       |    }
 1740|  11.2k|    Ok(code)
 1741|  11.2k|}
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei17parse_hexadecimal:
 1709|  7.62k|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1710|  7.62k|    // maximum code is 0x10FFFF => 6 characters
 1711|  7.62k|    if bytes.len() > 6 {
 1712|      1|        return Err(EscapeError::TooLongHexadecimal);
 1713|  7.62k|    }
 1714|  7.62k|    let mut code = 0;
 1715|  18.3k|    for b in bytes.bytes() {
 1716|  18.3k|        code <<= 4;
 1717|  18.3k|        code += match b {
 1718|  18.3k|            b'0'..=b'9' => b - b'0',
 1719|  1.20k|            b'a'..=b'f' => b - b'a' + 10,
 1720|     71|            b'A'..=b'F' => b - b'A' + 10,
 1721|      7|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1722|       |        } as u32;
 1723|       |    }
 1724|  7.62k|    Ok(code)
 1725|  7.62k|}
_RNCINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs7_NtB6_6eventsNtBZ_9BytesText8unescape0E0B6_:
  174|  27.7k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCsdBczmAo6fNM_9quick_xml7escapei12named_entity:
  217|  4.81k|fn named_entity(name: &str) -> Option<&str> {
  218|       |    // match over strings are not allowed in const functions
  219|  4.81k|    let s = match name.as_bytes() {
  220|  4.81k|        b"lt" => "<",
  221|  1.63k|        b"gt" => ">",
  222|  1.81k|        b"amp" => "&",
  223|  1.48k|        b"apos" => "'",
  224|     66|        b"quot" => "\"",
  225|     51|        _ => return None,
  226|       |    };
  227|  4.76k|    Some(s)
  228|  4.81k|}
_RINvNtCsdBczmAo6fNM_9quick_xml7escapei13unescape_withNCNvMs7_NtB4_6eventsNtBX_9BytesText8unescape0EB4_:
  162|    471|pub fn unescape_with<'input, 'entity, F>(
  163|    471|    raw: &'input str,
  164|    471|    mut resolve_entity: F,
  165|    471|) -> Result<Cow<'input, str>, EscapeError>
  166|    471|where
  167|    471|    // the lifetime of the output comes from a capture or is `'static`
  168|    471|    F: FnMut(&str) -> Option<&'entity str>,
  169|    471|{
  170|    471|    let bytes = raw.as_bytes();
  171|    471|    let mut unescaped = None;
  172|    471|    let mut last_end = 0;
  173|    471|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  24.1k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  23.7k|        match iter.next() {
  176|  23.7k|            Some(end) if bytes[end] == b';' => {
  177|  23.7k|                // append valid data
  178|  23.7k|                if unescaped.is_none() {
  179|    390|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  23.3k|                }
  181|  23.7k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  23.7k|                unescaped.push_str(&raw[last_end..start]);
  183|  23.7k|
  184|  23.7k|                // search for character correctness
  185|  23.7k|                let pat = &raw[start + 1..end];
  186|  23.7k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  18.9k|                    let codepoint = parse_number(entity, start..end)?;
  188|  18.8k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|  4.81k|                } else if let Some(value) = named_entity(pat) {
  190|  4.76k|                    unescaped.push_str(value);
  191|  4.76k|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|     51|                    return Err(EscapeError::UnrecognizedSymbol(
  195|     51|                        start + 1..end,
  196|     51|                        pat.to_string(),
  197|     51|                    ));
  198|       |                }
  199|       |
  200|  23.6k|                last_end = end + 1;
  201|       |            }
  202|     16|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|    360|    if let Some(mut unescaped) = unescaped {
  207|    285|        if let Some(raw) = raw.get(last_end..) {
  208|    285|            unescaped.push_str(raw);
  209|    285|        }
  210|    285|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|     75|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|    471|}

_RNvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB2_10BytesStart10local_nameCs5YIGoGv1zBy_10sparesults:
  179|     95|    pub fn local_name(&self) -> LocalName {
  180|     95|        self.name().into()
  181|     95|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB2_10BytesStart4nameCs5YIGoGv1zBy_10sparesults:
  170|    190|    pub fn name(&self) -> QName {
  171|    190|        QName(&self.buf[..self.name_len])
  172|    190|    }
_RNCNvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB7_9BytesText8unescape0B9_:
  734|     51|        self.unescape_with(|_| None)
_RINvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvB2_8unescape0EB8_:
  741|    492|    pub fn unescape_with<'entity>(
  742|    492|        &self,
  743|    492|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  744|    492|    ) -> Result<Cow<'a, str>> {
  745|    492|        let decoded = match &self.content {
  746|    492|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  747|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  748|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  749|       |        };
  750|       |
  751|    471|        match unescape_with(&decoded, resolve_entity)? {
  752|       |            // Because result is borrowed, no replacements was done and we can use original string
  753|     75|            Cow::Borrowed(_) => Ok(decoded),
  754|    285|            Cow::Owned(s) => Ok(s.into()),
  755|       |        }
  756|    492|    }
_RINvMsa_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  823|      1|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  824|      1|        Self {
  825|      1|            content: content.into(),
  826|      1|            decoder,
  827|      1|        }
  828|      1|    }
_RNvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB5_9BytesText8unescape:
  733|    492|    pub fn unescape(&self) -> Result<Cow<'a, str>> {
  734|    492|        self.unescape_with(|_| None)
  735|    492|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
   79|     95|    pub(crate) fn wrap(content: &'a [u8], name_len: usize) -> Self {
   80|     95|        BytesStart {
   81|     95|            buf: Cow::Borrowed(content),
   82|     95|            name_len,
   83|     95|        }
   84|     95|    }
_RINvMs7_NtCsdBczmAo6fNM_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  684|  15.7k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  15.7k|        Self {
  686|  15.7k|            content: content.into(),
  687|  15.7k|            decoder,
  688|  15.7k|        }
  689|  15.7k|    }

_RNvXs4_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_9LocalNameINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_5QNameE4fromCs5YIGoGv1zBy_10sparesults:
  173|     95|    fn from(name: QName<'a>) -> Self {
  174|     95|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
  175|     95|    }
_RNvXs3_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_9LocalNameINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refCs5YIGoGv1zBy_10sparesults:
  154|     95|    fn as_ref(&self) -> &[u8] {
  155|     95|        self.0
  156|     95|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml4nameNtB2_5QName5index:
  111|     95|    fn index(&self) -> Option<usize> {
  112|     95|        memchr(b':', self.0)
  113|     95|    }
_RNvXs0_NtCsdBczmAo6fNM_9quick_xml4nameNtB5_5QNameINtNtCs9nhK3FOW46N_4core7convert5AsRefShE6as_refCs5YIGoGv1zBy_10sparesults:
  124|     95|    fn as_ref(&self) -> &[u8] {
  125|     95|        self.0
  126|     95|    }
_RNCNvXs4_NtCsdBczmAo6fNM_9quick_xml4nameNtB7_9LocalNameINtNtCs9nhK3FOW46N_4core7convert4FromNtB7_5QNameE4from0Cs5YIGoGv1zBy_10sparesults:
  174|      3|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))

_RNCNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB6_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE15skip_whitespace0Cs6IO3OdVZAM0_13oxigraph_fuzz:
  252|  19.7k|    impl_buffered_source!();
_RNvMs_NtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_event_intoCs6IO3OdVZAM0_13oxigraph_fuzz:
  304|  16.4k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  305|  16.4k|        self.read_event_impl(buf)
  306|  16.4k|    }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE8peek_oneCs6IO3OdVZAM0_13oxigraph_fuzz:
  233|  43.3k|        $($async)? fn peek_one(&mut self) -> Result<Option<u8>> {
  234|  43.3k|            loop {
  235|  43.3k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  236|  43.3k|                    Ok(n) if n.is_empty() => Ok(None),
  237|  43.2k|                    Ok(n) => Ok(Some(n[0])),
  238|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  239|      0|                    Err(e) => Err(Error::Io(e.into())),
  240|       |                };
  241|       |            }
  242|  43.3k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE17read_bang_elementCs6IO3OdVZAM0_13oxigraph_fuzz:
  100|  11.0k|        $($async)? fn read_bang_element $(<$lf>)? (
  101|  11.0k|            &mut self,
  102|  11.0k|            buf: &'b mut Vec<u8>,
  103|  11.0k|            position: &mut usize,
  104|  11.0k|        ) -> Result<Option<(BangType, &'b [u8])>> {
  105|  11.0k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  106|  11.0k|            // start with it.
  107|  11.0k|            let start = buf.len();
  108|  11.0k|            let mut read = 1;
  109|  11.0k|            buf.push(b'!');
  110|  11.0k|            self $(.$reader)? .consume(1);
  111|       |
  112|  11.0k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  113|       |
  114|  11.2k|            loop {
  115|  11.2k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  116|       |                    // Note: Do not update position, so the error points to
  117|       |                    // somewhere sane rather than at the EOF
  118|  11.2k|                    Ok(n) if n.is_empty() => return Err(bang_type.to_err()),
  119|  11.0k|                    Ok(available) => {
  120|       |                        // We only parse from start because we don't want to consider
  121|       |                        // whatever is in the buffer before the bang element
  122|  11.0k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  123|  10.8k|                            buf.extend_from_slice(consumed);
  124|  10.8k|
  125|  10.8k|                            self $(.$reader)? .consume(used);
  126|  10.8k|                            read += used;
  127|  10.8k|
  128|  10.8k|                            *position += read;
  129|  10.8k|                            break;
  130|    215|                        } else {
  131|    215|                            buf.extend_from_slice(available);
  132|    215|
  133|    215|                            let used = available.len();
  134|    215|                            self $(.$reader)? .consume(used);
  135|    215|                            read += used;
  136|    215|                        }
  137|       |                    }
  138|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  139|      0|                    Err(e) => {
  140|      0|                        *position += read;
  141|      0|                        return Err(Error::Io(e.into()));
  142|       |                    }
  143|       |                }
  144|       |            }
  145|       |
  146|  10.8k|            if read == 0 {
  147|      0|                Ok(None)
  148|       |            } else {
  149|  10.8k|                Ok(Some((bang_type, &buf[start..])))
  150|       |            }
  151|  11.0k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE12read_elementCs6IO3OdVZAM0_13oxigraph_fuzz:
  154|     95|        $($async)? fn read_element $(<$lf>)? (
  155|     95|            &mut self,
  156|     95|            buf: &'b mut Vec<u8>,
  157|     95|            position: &mut usize,
  158|     95|        ) -> Result<Option<&'b [u8]>> {
  159|     95|            let mut state = ReadElementState::Elem;
  160|     95|            let mut read = 0;
  161|     95|
  162|     95|            let start = buf.len();
  163|       |            loop {
  164|    180|                match self $(.$reader)? .fill_buf() $(.$await)? {
  165|    180|                    Ok(n) if n.is_empty() => break,
  166|     95|                    Ok(available) => {
  167|     95|                        if let Some((consumed, used)) = state.change(available) {
  168|     10|                            buf.extend_from_slice(consumed);
  169|     10|
  170|     10|                            self $(.$reader)? .consume(used);
  171|     10|                            read += used;
  172|     10|
  173|     10|                            // Position now just after the `>` symbol
  174|     10|                            *position += read;
  175|     10|                            break;
  176|     85|                        } else {
  177|     85|                            // The `>` symbol not yet found, continue reading
  178|     85|                            buf.extend_from_slice(available);
  179|     85|
  180|     85|                            let used = available.len();
  181|     85|                            self $(.$reader)? .consume(used);
  182|     85|                            read += used;
  183|     85|                        }
  184|       |                    }
  185|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  186|      0|                    Err(e) => {
  187|      0|                        *position += read;
  188|      0|                        return Err(Error::Io(e.into()));
  189|       |                    }
  190|       |                };
  191|       |            }
  192|       |
  193|     95|            if read == 0 {
  194|      0|                Ok(None)
  195|       |            } else {
  196|     95|                Ok(Some(&buf[start..]))
  197|       |            }
  198|     95|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE15remove_utf8_bomCs6IO3OdVZAM0_13oxigraph_fuzz:
   18|  1.17k|        $($async)? fn remove_utf8_bom(&mut self) -> Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|  1.17k|            loop {
   22|  1.17k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|  1.17k|                    Ok(n) => {
   24|  1.17k|                        if n.starts_with(UTF8_BOM) {
   25|      4|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|  1.17k|                        }
   27|  1.17k|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(Error::Io(e.into())),
   31|       |                };
   32|       |            }
   33|  1.17k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE15skip_whitespaceCs6IO3OdVZAM0_13oxigraph_fuzz:
  200|  16.4k|        $($async)? fn skip_whitespace(&mut self, position: &mut usize) -> Result<()> {
  201|  17.7k|            loop {
  202|  17.7k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  203|  17.7k|                    Ok(n) => {
  204|  17.7k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
  205|  17.7k|                        if count > 0 {
  206|  1.30k|                            self $(.$reader)? .consume(count);
  207|  1.30k|                            *position += count;
  208|  1.30k|                            continue;
  209|       |                        } else {
  210|  16.4k|                            Ok(())
  211|       |                        }
  212|       |                    }
  213|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  214|      0|                    Err(e) => Err(Error::Io(e.into())),
  215|       |                };
  216|       |            }
  217|  16.4k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE8skip_oneCs6IO3OdVZAM0_13oxigraph_fuzz:
  219|  16.4k|        $($async)? fn skip_one(&mut self, byte: u8, position: &mut usize) -> Result<bool> {
  220|       |            // search byte must be within the ascii range
  221|      0|            debug_assert!(byte.is_ascii());
  222|       |
  223|  16.4k|            match self.peek_one() $(.$await)? ? {
  224|  16.3k|                Some(b) if b == byte => {
  225|  15.8k|                    *position += 1;
  226|  15.8k|                    self $(.$reader)? .consume(1);
  227|  15.8k|                    Ok(true)
  228|       |                }
  229|    575|                _ => Ok(false),
  230|       |            }
  231|  16.4k|        }
_RNvXNtNtCsdBczmAo6fNM_9quick_xml6reader15buffered_readerINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE16read_bytes_untilCs6IO3OdVZAM0_13oxigraph_fuzz:
   52|  5.25k|        $($async)? fn read_bytes_until $(<$lf>)? (
   53|  5.25k|            &mut self,
   54|  5.25k|            byte: u8,
   55|  5.25k|            buf: &'b mut Vec<u8>,
   56|  5.25k|            position: &mut usize,
   57|  5.25k|        ) -> Result<Option<&'b [u8]>> {
   58|       |            // search byte must be within the ascii range
   59|      0|            debug_assert!(byte.is_ascii());
   60|       |
   61|  5.25k|            let mut read = 0;
   62|  5.25k|            let mut done = false;
   63|  5.25k|            let start = buf.len();
   64|  10.4k|            while !done {
   65|  5.17k|                let used = {
   66|  5.82k|                    let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   67|  5.82k|                        Ok(n) if n.is_empty() => break,
   68|  5.17k|                        Ok(n) => n,
   69|      0|                        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   70|      0|                        Err(e) => {
   71|      0|                            *position += read;
   72|      0|                            return Err(Error::Io(e.into()));
   73|       |                        }
   74|       |                    };
   75|       |
   76|  5.17k|                    match memchr::memchr(byte, available) {
   77|  4.60k|                        Some(i) => {
   78|  4.60k|                            buf.extend_from_slice(&available[..i]);
   79|  4.60k|                            done = true;
   80|  4.60k|                            i + 1
   81|       |                        }
   82|       |                        None => {
   83|    567|                            buf.extend_from_slice(available);
   84|    567|                            available.len()
   85|       |                        }
   86|       |                    }
   87|       |                };
   88|  5.17k|                self $(.$reader)? .consume(used);
   89|  5.17k|                read += used;
   90|       |            }
   91|  5.25k|            *position += read;
   92|  5.25k|
   93|  5.25k|            if read == 0 {
   94|     83|                Ok(None)
   95|       |            } else {
   96|  5.17k|                Ok(Some(&buf[start..]))
   97|       |            }
   98|  5.25k|        }

_RNvMNtCsdBczmAo6fNM_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE21expand_empty_elementsCs6IO3OdVZAM0_13oxigraph_fuzz:
   33|  1.17k|        pub fn expand_empty_elements(&mut self, val: bool) -> &mut Self {
   34|  1.17k|            self $(.$holder)? .state.expand_empty_elements = val;
   35|  1.17k|            self
   36|  1.17k|        }
_RNvMNtCsdBczmAo6fNM_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE9trim_textCs6IO3OdVZAM0_13oxigraph_fuzz:
   60|  1.17k|        pub fn trim_text(&mut self, val: bool) -> &mut Self {
   61|  1.17k|            self $(.$holder)? .state.trim_text_start = val;
   62|  1.17k|            self $(.$holder)? .state.trim_text_end = val;
   63|  1.17k|            self
   64|  1.17k|        }
_RINvMs0_NtCsdBczmAo6fNM_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECs6IO3OdVZAM0_13oxigraph_fuzz:
  645|  16.4k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  646|  16.4k|    where
  647|  16.4k|        R: XmlSource<'i, B>,
  648|  16.4k|    {
  649|  32.2k|        read_event_impl!(self, buf, self.reader, read_until_open, read_until_close)
  650|  16.4k|    }
_RINvMs0_NtCsdBczmAo6fNM_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE16read_until_closeQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECs6IO3OdVZAM0_13oxigraph_fuzz:
  665|  15.8k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  666|  15.8k|    where
  667|  15.8k|        R: XmlSource<'i, B>,
  668|  15.8k|    {
  669|  15.8k|        read_until_close!(self, buf, self.reader)
  670|  15.8k|    }
_RNvMNtCsdBczmAo6fNM_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCs6IO3OdVZAM0_13oxigraph_fuzz:
  533|  1.17k|    pub fn from_reader(reader: R) -> Self {
  534|  1.17k|        Self {
  535|  1.17k|            reader,
  536|  1.17k|            state: ReaderState::default(),
  537|  1.17k|        }
  538|  1.17k|    }
_RNvMs_NtCsdBczmAo6fNM_9quick_xml6readerINtB4_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE7decoderCs6IO3OdVZAM0_13oxigraph_fuzz:
  635|  1.17k|    pub fn decoder(&self) -> Decoder {
  636|  1.17k|        self.state.decoder()
  637|  1.17k|    }
_RINvMs0_NtCsdBczmAo6fNM_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsc4CYCHgsNRQ_3std2io8buffered9bufreader9BufReaderRShEE15read_until_openQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECs6IO3OdVZAM0_13oxigraph_fuzz:
  656|  16.4k|    fn read_until_open<'i, B>(&mut self, buf: B) -> Result<std::result::Result<Event<'i>, B>>
  657|  16.4k|    where
  658|  16.4k|        R: XmlSource<'i, B>,
  659|  16.4k|    {
  660|  16.4k|        read_until_open!(self, buf, self.reader, read_event_impl)
  661|  16.4k|    }
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType6to_errCs6IO3OdVZAM0_13oxigraph_fuzz:
  879|    215|    fn to_err(&self) -> Error {
  880|    215|        let bang_str = match self {
  881|     44|            Self::CData => "CData",
  882|     68|            Self::Comment => "Comment",
  883|    103|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|    215|        Error::UnexpectedEof(bang_str.to_string())
  886|    215|    }
_RNvNtCsdBczmAo6fNM_9quick_xml6reader13is_whitespaceCs6IO3OdVZAM0_13oxigraph_fuzz:
  925|  19.7k|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  19.7k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  19.7k|}
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType3new:
  807|  11.0k|    fn new(byte: Option<u8>) -> Result<Self> {
  808|  11.0k|        Ok(match byte {
  809|     52|            Some(b'[') => Self::CData,
  810|  9.47k|            Some(b'-') => Self::Comment,
  811|  1.53k|            Some(b'D') | Some(b'd') => Self::DocType,
  812|      1|            Some(b) => return Err(Error::UnexpectedBang(b)),
  813|      5|            None => return Err(Error::UnexpectedEof("Bang".to_string())),
  814|       |        })
  815|  11.0k|    }
_RNvMs2_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_16ReadElementState6change:
  904|     95|    fn change<'b>(&mut self, chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  905|  1.87k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', chunk) {
  906|  1.87k|            *self = match (*self, chunk[i]) {
  907|       |                // only allowed to match `>` while we are in state `Elem`
  908|     10|                (Self::Elem, b'>') => return Some((&chunk[..i], i + 1)),
  909|    455|                (Self::Elem, b'\'') => Self::SingleQ,
  910|    254|                (Self::Elem, b'\"') => Self::DoubleQ,
  911|       |
  912|       |                // the only end_byte that gets us out if the same character
  913|    671|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Elem,
  914|       |
  915|       |                // all other bytes: no state change
  916|    489|                _ => *self,
  917|       |            };
  918|       |        }
  919|     85|        None
  920|     95|    }
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType5parse:
  824|  11.0k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  825|  29.6k|        for i in memchr::memchr_iter(b'>', chunk) {
  826|  16.4k|            match self {
  827|  16.4k|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  828|  16.4k|                // <!----> - XML comment
  829|  16.4k|                //  012345 - i
  830|  16.4k|                Self::Comment if buf.len() + i > 4 => {
  831|  9.80k|                    if chunk[..i].ends_with(b"--") {
  832|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  833|       |                        // check_comments enabled option. XML standard requires that comment
  834|       |                        // will not end with `--->` sequence because this is a special case of
  835|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  836|  9.40k|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  837|    395|                    }
  838|    395|                    // End sequence `-|->` was splitted at |
  839|    395|                    //        buf --/   \-- chunk
  840|    395|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  841|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  842|    395|                    }
  843|    395|                    // End sequence `--|>` was splitted at |
  844|    395|                    //         buf --/   \-- chunk
  845|    395|                    if i == 0 && buf.ends_with(b"--") {
  846|      0|                        return Some((&[], i + 1)); // +1 for `>`
  847|    395|                    }
  848|       |                }
  849|  6.67k|                Self::Comment => {}
  850|       |                Self::CData => {
  851|    722|                    if chunk[..i].ends_with(b"]]") {
  852|      8|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  853|    714|                    }
  854|    714|                    // End sequence `]|]>` was splitted at |
  855|    714|                    //        buf --/   \-- chunk
  856|    714|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  857|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  858|    714|                    }
  859|    714|                    // End sequence `]]|>` was splitted at |
  860|    714|                    //         buf --/   \-- chunk
  861|    714|                    if i == 0 && buf.ends_with(b"]]") {
  862|      0|                        return Some((&[], i + 1)); // +1 for `>`
  863|    714|                    }
  864|       |                }
  865|       |                Self::DocType => {
  866|  12.4k|                    let content = &chunk[..i];
  867|  12.4k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  868|  12.4k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  869|  12.4k|                        .sum::<i32>();
  870|  12.4k|                    if balance == 0 {
  871|  1.43k|                        return Some((content, i + 1)); // +1 for `>`
  872|  10.9k|                    }
  873|       |                }
  874|       |            }
  875|       |        }
  876|    215|        None
  877|  11.0k|    }
_RNvNtCsdBczmAo6fNM_9quick_xml6reader13is_whitespaceB3_:
  925|  9.59k|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  9.59k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  9.59k|}
_RNCNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB7_8BangType5parse0B9_:
  868|  1.40M|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs1_NtCsdBczmAo6fNM_9quick_xml6readerNtB5_8BangType6to_errB7_:
  879|    158|    fn to_err(&self) -> Error {
  880|    158|        let bang_str = match self {
  881|      7|            Self::CData => "CData",
  882|      2|            Self::Comment => "Comment",
  883|    149|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|    158|        Error::UnexpectedEof(bang_str.to_string())
  886|    158|    }

_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState9emit_bangs0_0B8_:
  118|  3.13k|                    .position(|b| !is_whitespace(*b))
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  186|  4.64k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  187|  4.64k|        let len = buf.len();
  188|  4.64k|        if len > 2 && buf[len - 1] == b'?' {
  189|  4.59k|            if len > 5 && &buf[1..4] == b"xml" && is_whitespace(buf[4]) {
  190|      0|                let event = BytesDecl::from_start(BytesStart::wrap(&buf[1..len - 1], 3));
  191|      0|
  192|      0|                // Try getting encoding from the declaration event
  193|      0|                #[cfg(feature = "encoding")]
  194|      0|                if self.encoding.can_be_refined() {
  195|      0|                    if let Some(encoding) = event.encoder() {
  196|      0|                        self.encoding = EncodingRef::XmlDetected(encoding);
  197|      0|                    }
  198|      0|                }
  199|      0|
  200|      0|                Ok(Event::Decl(event))
  201|       |            } else {
  202|  4.59k|                Ok(Event::PI(BytesText::wrap(&buf[1..len - 1], self.decoder())))
  203|       |            }
  204|       |        } else {
  205|     47|            self.offset -= len;
  206|     47|            Err(Error::UnexpectedEof("XmlDecl".to_string()))
  207|       |        }
  208|  4.64k|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  261|  16.9k|    pub fn decoder(&self) -> Decoder {
  262|  16.9k|        Decoder {
  263|  16.9k|            #[cfg(feature = "encoding")]
  264|  16.9k|            encoding: self.encoding.encoding(),
  265|  16.9k|        }
  266|  16.9k|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   68|    492|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> Result<Event<'b>> {
   69|    492|        let mut content = bytes;
   70|    492|
   71|    492|        if self.trim_text_end {
   72|    492|            // Skip the ending '<'
   73|    492|            let len = bytes
   74|    492|                .iter()
   75|    492|                .rposition(|&b| !is_whitespace(b))
   76|    492|                .map_or_else(|| bytes.len(), |p| p + 1);
   77|    492|            content = &bytes[..len];
   78|    492|        }
   79|       |
   80|    492|        Ok(Event::Text(BytesText::wrap(content, self.decoder())))
   81|    492|    }
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   86|  1.43k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|  1.43k|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|  1.43k|        };
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState8emit_ends_0B8_:
  150|     39|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|     39|            *offset -= buf.len();
  152|     39|            Err(Error::EndEventMismatch {
  153|     39|                expected,
  154|     39|                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|     39|            })
  156|     39|        };
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  140|    851|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   85|  10.8k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   86|  10.8k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|       |        };
   89|       |
   90|  10.8k|        let len = buf.len();
   91|  1.43k|        match bang_type {
   92|  9.40k|            BangType::Comment if buf.starts_with(b"!--") => {
   93|      0|                debug_assert!(buf.ends_with(b"--"));
   94|  9.40k|                if self.check_comments {
   95|       |                    // search if '--' not in comments
   96|      0|                    if let Some(p) = memchr::memchr_iter(b'-', &buf[3..len - 2])
   97|      0|                        .position(|p| buf[3 + p + 1] == b'-')
   98|       |                    {
   99|      0|                        self.offset += len - p;
  100|      0|                        return Err(Error::UnexpectedToken("--".to_string()));
  101|      0|                    }
  102|  9.40k|                }
  103|  9.40k|                Ok(Event::Comment(BytesText::wrap(
  104|  9.40k|                    &buf[3..len - 2],
  105|  9.40k|                    self.decoder(),
  106|  9.40k|                )))
  107|       |            }
  108|      8|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  109|      0|                debug_assert!(buf.ends_with(b"]]"));
  110|      1|                Ok(Event::CData(BytesCData::wrap(
  111|      1|                    &buf[8..len - 2],
  112|      1|                    self.decoder(),
  113|      1|                )))
  114|       |            }
  115|  1.43k|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  116|  1.28k|                let start = buf[8..]
  117|  1.28k|                    .iter()
  118|  1.28k|                    .position(|b| !is_whitespace(*b))
  119|  1.28k|                    .unwrap_or(len - 8);
  120|  1.28k|                if start + 8 >= len {
  121|     34|                    return Err(Error::EmptyDocType);
  122|  1.24k|                }
  123|  1.24k|                Ok(Event::DocType(BytesText::wrap(
  124|  1.24k|                    &buf[8 + start..],
  125|  1.24k|                    self.decoder(),
  126|  1.24k|                )))
  127|       |            }
  128|    158|            _ => Err(bang_type.to_err()),
  129|       |        }
  130|  10.8k|    }
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState10emit_start0B8_:
  218|  4.31k|            .position(|&b| is_whitespace(b))
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState9emit_texts0_0B8_:
   76|    492|                .map_or_else(|| bytes.len(), |p| p + 1);
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  134|     39|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  135|     39|        // Strip the `/` character. `content` contains data between `</` and `>`
  136|     39|        let content = &buf[1..];
  137|       |        // XML standard permits whitespaces after the markup name in closing tags.
  138|       |        // Let's strip them from the buffer before comparing tag names.
  139|     39|        let name = if self.trim_markup_names_in_closing_tags {
  140|     39|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  141|      8|                &content[..pos_end_name + 1]
  142|       |            } else {
  143|     31|                content
  144|       |            }
  145|       |        } else {
  146|      0|            content
  147|       |        };
  148|       |
  149|     39|        let decoder = self.decoder();
  150|     39|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|       |            *offset -= buf.len();
  152|       |            Err(Error::EndEventMismatch {
  153|       |                expected,
  154|       |                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|       |            })
  156|       |        };
  157|       |
  158|       |        // Get the index in self.opened_buffer of the name of the last opened tag
  159|     39|        match self.opened_starts.pop() {
  160|      0|            Some(start) => {
  161|      0|                if self.check_end_names {
  162|      0|                    let expected = &self.opened_buffer[start..];
  163|      0|                    if name != expected {
  164|      0|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  165|      0|                        // #513: In order to allow error recovery we should drop content of the buffer
  166|      0|                        self.opened_buffer.truncate(start);
  167|      0|
  168|      0|                        return mismatch_err(expected, name, &mut self.offset);
  169|      0|                    }
  170|      0|                }
  171|       |
  172|      0|                self.opened_buffer.truncate(start);
  173|       |            }
  174|       |            None => {
  175|     39|                if self.check_end_names {
  176|     39|                    return mismatch_err("".to_string(), &buf[1..], &mut self.offset);
  177|      0|                }
  178|       |            }
  179|       |        }
  180|       |
  181|      0|        Ok(Event::End(BytesEnd::wrap(name.into())))
  182|     39|    }
_RNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  214|     95|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Result<Event<'b>> {
  215|     95|        let len = content.len();
  216|     95|        let name_end = content
  217|     95|            .iter()
  218|     95|            .position(|&b| is_whitespace(b))
  219|     95|            .unwrap_or(len);
  220|     95|        if let Some(&b'/') = content.last() {
  221|       |            // This is self-closed tag `<something/>`
  222|      2|            let name_len = if name_end < len { name_end } else { len - 1 };
  223|      2|            let event = BytesStart::wrap(&content[..len - 1], name_len);
  224|      2|
  225|      2|            if self.expand_empty_elements {
  226|      2|                self.state = ParseState::Empty;
  227|      2|                self.opened_starts.push(self.opened_buffer.len());
  228|      2|                self.opened_buffer.extend(&content[..name_len]);
  229|      2|                Ok(Event::Start(event))
  230|       |            } else {
  231|      0|                Ok(Event::Empty(event))
  232|       |            }
  233|       |        } else {
  234|       |            // #514: Always store names event when .check_end_names == false,
  235|       |            // because checks can be temporary disabled and when they would be
  236|       |            // enabled, we should have that information
  237|     93|            self.opened_starts.push(self.opened_buffer.len());
  238|     93|            self.opened_buffer.extend(&content[..name_end]);
  239|     93|            Ok(Event::Start(BytesStart::wrap(content, name_end)))
  240|       |        }
  241|     95|    }
_RNvXs_NtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCs9nhK3FOW46N_4core7default7Default7default:
  270|  1.17k|    fn default() -> Self {
  271|  1.17k|        Self {
  272|  1.17k|            offset: 0,
  273|  1.17k|            state: ParseState::Init,
  274|  1.17k|            expand_empty_elements: false,
  275|  1.17k|            trim_text_start: false,
  276|  1.17k|            trim_text_end: false,
  277|  1.17k|            trim_markup_names_in_closing_tags: true,
  278|  1.17k|            check_end_names: true,
  279|  1.17k|            check_comments: false,
  280|  1.17k|            opened_buffer: Vec::new(),
  281|  1.17k|            opened_starts: Vec::new(),
  282|  1.17k|
  283|  1.17k|            #[cfg(feature = "encoding")]
  284|  1.17k|            encoding: EncodingRef::Implicit(UTF_8),
  285|  1.17k|        }
  286|  1.17k|    }
_RNCNvMNtNtCsdBczmAo6fNM_9quick_xml6reader5stateNtB4_11ReaderState9emit_text0B8_:
   75|  1.29k|                .rposition(|&b| !is_whitespace(b))

_RNvNtCs6IO3OdVZAM0_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  1.17k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  1.17k|    let parser = QueryResultsParser::from_format(format);
    8|  1.17k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  1.17k|    let Ok(reader) = parser.parse_read(data) else {
   11|  1.17k|        return;
   12|       |    };
   13|      0|    match reader {
   14|      0|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|      0|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|      0|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|      0|            let mut writer = serializer
   21|      0|                .serialize_solutions_to_write(
   22|      0|                    Vec::new(),
   23|      0|                    solutions
   24|      0|                        .first()
   25|      0|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|      0|                )
   27|      0|                .unwrap();
   28|      0|            for solution in &solutions {
   29|      0|                writer.write(solution).unwrap();
   30|      0|            }
   31|      0|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|      0|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|      0|                .parse_read(serialized.as_bytes())
   36|      0|                .with_context(|| format!("Parsing {serialized:?}"))
   37|      0|                .unwrap()
   38|       |            {
   39|      0|                assert_eq!(
   40|      0|                    roundtrip_solutions
   41|      0|                        .collect::<Result<Vec<_>, _>>()
   42|      0|                        .with_context(|| format!("Parsing {serialized:?}"))
   43|      0|                        .unwrap(),
   44|      0|                    solutions
   45|      0|                )
   46|      0|            }
   47|       |        }
   48|      0|        FromReadQueryResultsReader::Boolean(value) => {
   49|      0|            // We try to write again
   50|      0|            let mut serialized = Vec::new();
   51|      0|            serializer
   52|      0|                .serialize_boolean_to_write(&mut serialized, value)
   53|      0|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      0|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      0|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  1.17k|}

_RNvXs0_NtCs5YIGoGv1zBy_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsdBczmAo6fNM_9quick_xml6errors5ErrorE4fromCs6IO3OdVZAM0_13oxigraph_fuzz:
   42|    499|    fn from(error: quick_xml::Error) -> Self {
   43|    499|        match error {
   44|      0|            quick_xml::Error::Io(error) => {
   45|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   46|       |            }
   47|    499|            _ => Self::Syntax(QueryResultsSyntaxError(SyntaxErrorKind::Xml(error))),
   48|       |        }
   49|    499|    }
_RINvMs2_NtCs5YIGoGv1zBy_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
   87|    416|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    416|        Self(SyntaxErrorKind::Msg {
   89|    416|            msg: msg.into(),
   90|    416|            location: None,
   91|    416|        })
   92|    416|    }
_RINvMs2_NtCs5YIGoGv1zBy_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|     92|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|     92|        Self(SyntaxErrorKind::Msg {
   89|     92|            msg: msg.into(),
   90|     92|            location: None,
   91|     92|        })
   92|     92|    }
_RNvXs0_NtCs5YIGoGv1zBy_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsdBczmAo6fNM_9quick_xml6errors5ErrorE4fromB7_:
   42|    171|    fn from(error: quick_xml::Error) -> Self {
   43|    171|        match error {
   44|      0|            quick_xml::Error::Io(error) => {
   45|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   46|       |            }
   47|    171|            _ => Self::Syntax(QueryResultsSyntaxError(SyntaxErrorKind::Xml(error))),
   48|       |        }
   49|    171|    }
_RNvXs9_NtCs5YIGoGv1zBy_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_23QueryResultsSyntaxErrorE4from:
    7|    508|#[derive(Debug, thiserror::Error)]

_RNvMNtCs5YIGoGv1zBy_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs6IO3OdVZAM0_13oxigraph_fuzz:
   54|  1.17k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   55|  1.17k|        Self { format }
   56|  1.17k|    }
_RINvMNtCs5YIGoGv1zBy_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECs6IO3OdVZAM0_13oxigraph_fuzz:
   83|  1.17k|    pub fn parse_read<R: Read>(
   84|  1.17k|        &self,
   85|  1.17k|        reader: R,
   86|  1.17k|    ) -> Result<FromReadQueryResultsReader<R>, QueryResultsParseError> {
   87|  1.17k|        Ok(match self.format {
   88|  1.17k|            QueryResultsFormat::Xml => match FromReadXmlQueryResultsReader::read(reader)? {
   89|      0|                FromReadXmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                FromReadXmlQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: FromReadSolutionsReaderKind::Xml(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Json => match FromReadJsonQueryResultsReader::read(reader)? {
   99|      0|                FromReadJsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  100|       |                FromReadJsonQueryResultsReader::Solutions {
  101|      0|                    solutions,
  102|      0|                    variables,
  103|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  104|      0|                    variables: variables.into(),
  105|      0|                    solutions: FromReadSolutionsReaderKind::Json(solutions),
  106|      0|                }),
  107|       |            },
  108|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  109|      0|            QueryResultsFormat::Tsv => match FromReadTsvQueryResultsReader::read(reader)? {
  110|      0|                FromReadTsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  111|       |                FromReadTsvQueryResultsReader::Solutions {
  112|      0|                    solutions,
  113|      0|                    variables,
  114|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  115|      0|                    variables: variables.into(),
  116|      0|                    solutions: FromReadSolutionsReaderKind::Tsv(solutions),
  117|      0|                }),
  118|       |            },
  119|       |        })
  120|  1.17k|    }

_RNvMNtCs5YIGoGv1zBy_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs6IO3OdVZAM0_13oxigraph_fuzz:
   55|  1.17k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  1.17k|        Self { format }
   57|  1.17k|    }

_RNvMs0_NtCs5YIGoGv1zBy_10sparesults3xmlINtB5_29FromReadXmlQueryResultsReaderRShE4readCs6IO3OdVZAM0_13oxigraph_fuzz:
  229|  1.17k|    pub fn read(read: R) -> Result<Self, QueryResultsParseError> {
  230|  1.17k|        let mut reader = Reader::from_reader(BufReader::new(read));
  231|  1.17k|        reader.trim_text(true);
  232|  1.17k|        reader.expand_empty_elements(true);
  233|  1.17k|        let mut reader_buffer = Vec::new();
  234|  1.17k|        let mut inner = XmlInnerQueryResultsReader {
  235|  1.17k|            state: ResultsState::Start,
  236|  1.17k|            variables: Vec::new(),
  237|  1.17k|            decoder: reader.decoder(),
  238|  1.17k|        };
  239|  16.4k|        loop {
  240|  16.4k|            reader_buffer.clear();
  241|  16.4k|            let event = reader.read_event_into(&mut reader_buffer)?;
  242|  15.9k|            if let Some(result) = inner.read_event(event)? {
  243|      0|                return Ok(match result {
  244|       |                    XmlInnerQueryResults::Solutions {
  245|      0|                        variables,
  246|      0|                        solutions,
  247|      0|                    } => Self::Solutions {
  248|      0|                        variables,
  249|      0|                        solutions: FromReadXmlSolutionsReader {
  250|      0|                            reader,
  251|      0|                            inner: solutions,
  252|      0|                            reader_buffer,
  253|      0|                        },
  254|      0|                    },
  255|      0|                    XmlInnerQueryResults::Boolean(value) => Self::Boolean(value),
  256|       |                });
  257|  15.2k|            }
  258|       |        }
  259|  1.17k|    }
_RNvMs2_NtCs5YIGoGv1zBy_10sparesults3xmlNtB5_26XmlInnerQueryResultsReader10read_event:
  377|  15.9k|    pub fn read_event(
  378|  15.9k|        &mut self,
  379|  15.9k|        event: Event<'_>,
  380|  15.9k|    ) -> Result<Option<XmlInnerQueryResults>, QueryResultsParseError> {
  381|  15.9k|        match event {
  382|     95|            Event::Start(event) => match self.state {
  383|       |                ResultsState::Start => {
  384|     95|                    if event.local_name().as_ref() == b"sparql" {
  385|      0|                        self.state = ResultsState::Sparql;
  386|      0|                        Ok(None)
  387|       |                    } else {
  388|     95|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <sparql> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  389|       |                    }
  390|       |                }
  391|       |                ResultsState::Sparql => {
  392|      0|                    if event.local_name().as_ref() == b"head" {
  393|      0|                        self.state = ResultsState::Head;
  394|      0|                        Ok(None)
  395|       |                    } else {
  396|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <head> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  397|       |                    }
  398|       |                }
  399|       |                ResultsState::Head => {
  400|      0|                    if event.local_name().as_ref() == b"variable" {
  401|      0|                        let name = event.attributes()
  402|      0|                            .filter_map(Result::ok)
  403|      0|                            .find(|attr| attr.key.local_name().as_ref() == b"name")
  404|      0|                            .ok_or_else(|| QueryResultsSyntaxError::msg("No name attribute found for the <variable> tag"))?;
  405|      0|                        let name = unescape(&self.decoder.decode(&name.value)?)?.into_owned();
  406|      0|                        let variable = Variable::new(name).map_err(|e| QueryResultsSyntaxError::msg(format!("Invalid variable name: {e}")))?;
  407|      0|                        if self.variables.contains(&variable) {
  408|      0|                            return Err(QueryResultsSyntaxError::msg(format!(
  409|      0|                                "The variable {variable} is declared twice"
  410|      0|                            ))
  411|      0|                                .into());
  412|      0|                        }
  413|      0|                        self.variables.push(variable);
  414|      0|                        Ok(None)
  415|      0|                    } else if event.local_name().as_ref() == b"link" {
  416|       |                        // no op
  417|      0|                        Ok(None)
  418|       |                    } else {
  419|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <variable> or <link> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  420|       |                    }
  421|       |                }
  422|       |                ResultsState::AfterHead => {
  423|      0|                    if event.local_name().as_ref() == b"boolean" {
  424|      0|                        self.state = ResultsState::Boolean;
  425|      0|                        Ok(None)
  426|      0|                    } else if event.local_name().as_ref() == b"results" {
  427|      0|                        let mut mapping = BTreeMap::default();
  428|      0|                        for (i, var) in self.variables.iter().enumerate() {
  429|      0|                            mapping.insert(var.clone().into_string(), i);
  430|      0|                        }
  431|      0|                        Ok(Some(XmlInnerQueryResults::Solutions {
  432|      0|                            variables: take(&mut self.variables),
  433|      0|                            solutions: XmlInnerSolutionsReader {
  434|      0|                                decoder: self.decoder,
  435|      0|                                mapping,
  436|      0|                                state_stack: vec![State::Start, State::Start],
  437|      0|                                new_bindings: Vec::new(),
  438|      0|                                current_var: None,
  439|      0|                                term: None,
  440|      0|                                lang: None,
  441|      0|                                datatype: None,
  442|      0|                                subject_stack: Vec::new(),
  443|      0|                                predicate_stack: Vec::new(),
  444|      0|                                object_stack: Vec::new(),
  445|      0|                            },
  446|      0|                        }))
  447|      0|                    } else if event.local_name().as_ref() != b"link" && event.local_name().as_ref() != b"results" && event.local_name().as_ref() != b"boolean" {
  448|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting sparql tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  449|       |                    } else {
  450|      0|                        Ok(None)
  451|       |                    }
  452|       |                }
  453|      0|                ResultsState::Boolean => Err(QueryResultsSyntaxError::msg(format!("Unexpected tag inside of <boolean> tag: <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  454|       |            },
  455|    492|            Event::Text(event) => {
  456|    492|                let value = event.unescape()?;
  457|    360|                match self.state {
  458|       |                    ResultsState::Boolean => {
  459|      0|                        if value == "true" {
  460|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(true)))
  461|      0|                        } else if value == "false" {
  462|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(false)))
  463|       |                        } else {
  464|      0|                            Err(QueryResultsSyntaxError::msg(format!("Unexpected boolean value. Found '{value}'")).into())
  465|       |                        }
  466|       |                    }
  467|    360|                    _ => Err(QueryResultsSyntaxError::msg(format!("Unexpected textual value found: '{value}'")).into())
  468|       |                }
  469|       |            }
  470|      0|            Event::End(event) => {
  471|      0|                if let ResultsState::Head = self.state {
  472|      0|                    if event.local_name().as_ref() == b"head" {
  473|      0|                        self.state = ResultsState::AfterHead
  474|      0|                    }
  475|      0|                    Ok(None)
  476|       |                } else {
  477|      0|                    Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into())
  478|       |                }
  479|       |            }
  480|     91|            Event::Eof => Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into()),
  481|       |            Event::Comment(_) | Event::Decl(_) | Event::PI(_) | Event::DocType(_) => {
  482|  15.2k|                Ok(None)
  483|       |            }
  484|      0|            Event::Empty(_) => unreachable!("Empty events are expended"),
  485|       |            Event::CData(_) => {
  486|      1|                Err(QueryResultsSyntaxError::msg(
  487|      1|                    "<![CDATA[...]]> are not supported in SPARQL XML results",
  488|      1|                )
  489|      1|                    .into())
  490|       |            }
  491|       |        }
  492|  15.9k|    }


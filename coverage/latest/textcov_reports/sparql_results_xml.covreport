rust_fuzzer_test_input:
  209|  18.5k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  18.5k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  18.5k|                }
  223|  18.5k|
  224|  18.5k|                __libfuzzer_sys_run(bytes);
  225|  18.5k|                0
  226|       |            }
_RNvNvCshGALetkXHhZ_18sparql_results_xml1__19___libfuzzer_sys_run:
  241|  18.5k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  18.5k|                $body
  243|  18.5k|            }
LLVMFuzzerTestOneInput:
   58|  18.5k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  18.5k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  18.5k|    });
   63|  18.5k|
   64|  18.5k|    match test_input {
   65|  18.5k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  18.5k|}
_RNCNvCskxgTfQto6Vo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  18.5k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  18.5k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  18.5k|        rust_fuzzer_test_input(data_slice)
   62|  18.5k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECseR3GpSb7YJr_10sparesults:
 1044|  91.4k|    pub(crate) unsafe fn next(
 1045|  91.4k|        &mut self,
 1046|  91.4k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  91.4k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  91.4k|        let found = find_raw(self.start, self.end)?;
 1057|  90.5k|        let result = found.distance(self.original_start);
 1058|  90.5k|        self.start = found.add(1);
 1059|  90.5k|        Some(result)
 1060|  91.4k|    }
_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECseR3GpSb7YJr_10sparesults:
 1044|  8.83k|    pub(crate) unsafe fn next(
 1045|  8.83k|        &mut self,
 1046|  8.83k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  8.83k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  8.83k|        let found = find_raw(self.start, self.end)?;
 1057|  7.54k|        let result = found.distance(self.original_start);
 1058|  7.54k|        self.start = found.add(1);
 1059|  7.54k|        Some(result)
 1060|  8.83k|    }
_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECseR3GpSb7YJr_10sparesults:
 1044|  1.26M|    pub(crate) unsafe fn next(
 1045|  1.26M|        &mut self,
 1046|  1.26M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.26M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.26M|        let found = find_raw(self.start, self.end)?;
 1057|  1.26M|        let result = found.distance(self.original_start);
 1058|  1.26M|        self.start = found.add(1);
 1059|  1.26M|        Some(result)
 1060|  1.26M|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECseR3GpSb7YJr_10sparesults:
 1125|   743k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   743k|    haystack: &[u8],
 1127|   743k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   743k|) -> Option<usize> {
 1129|   743k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   743k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   743k|    // a &[u8].
 1132|   743k|    let start = haystack.as_ptr();
 1133|   743k|    let end = start.add(haystack.len());
 1134|   743k|    let found = find_raw(start, end)?;
 1135|   738k|    Some(found.distance(start))
 1136|   743k|}
_RNvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   741k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   741k|        Iter {
 1029|   741k|            original_start: haystack.as_ptr(),
 1030|   741k|            start: haystack.as_ptr(),
 1031|   741k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   741k|            haystack: core::marker::PhantomData,
 1033|   741k|        }
 1034|   741k|    }
_RINvMs3_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0ECsa7QYSr9aLYT_9quick_xml:
 1044|   192k|    pub(crate) unsafe fn next(
 1045|   192k|        &mut self,
 1046|   192k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   192k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   192k|        let found = find_raw(self.start, self.end)?;
 1057|   189k|        let result = found.distance(self.original_start);
 1058|   189k|        self.start = found.add(1);
 1059|   189k|        Some(result)
 1060|   192k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1B8_:
  117|   127k|    pub(crate) fn needle1(&self) -> u8 {
  118|   127k|        self.s1
  119|   127k|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newB8_:
  111|  2.01M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.01M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.01M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  43.2k|    pub(crate) unsafe fn find_raw(
  144|  43.2k|        &self,
  145|  43.2k|        start: *const u8,
  146|  43.2k|        end: *const u8,
  147|  43.2k|    ) -> Option<*const u8> {
  148|  43.2k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  43.2k|        // need to move up to using a u64 for the masks used below. Currently
  150|  43.2k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  43.2k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  43.2k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  43.2k|        let topos = V::Mask::first_offset;
  155|  43.2k|        let len = end.distance(start);
  156|  43.2k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  43.2k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  41.3k|            return Some(cur);
  167|  1.95k|        }
  168|  1.95k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  1.95k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  1.95k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  1.95k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.95k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.36k|        while cur <= end.sub(V::BYTES) {
  213|    897|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    897|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    480|                return Some(cur);
  216|    417|            }
  217|    417|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.47k|        if cur < end {
  224|  1.38k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.38k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.38k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.38k|            return self.search_chunk(cur, topos);
  228|     89|        }
  229|     89|        None
  230|  43.2k|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  45.5k|    unsafe fn search_chunk(
  417|  45.5k|        &self,
  418|  45.5k|        cur: *const u8,
  419|  45.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  45.5k|    ) -> Option<*const u8> {
  421|  45.5k|        let chunk = V::load_unaligned(cur);
  422|  45.5k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  45.5k|        if mask.has_non_zero() {
  424|  42.6k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.90k|            None
  427|       |        }
  428|  45.5k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newBa_:
  450|   284k|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|   284k|        Two {
  452|   284k|            s1: needle1,
  453|   284k|            s2: needle2,
  454|   284k|            v1: V::splat(needle1),
  455|   284k|            v2: V::splat(needle2),
  456|   284k|        }
  457|   284k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  43.0k|    pub(crate) fn needle1(&self) -> u8 {
  462|  43.0k|        self.s1
  463|  43.0k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  38.1k|    pub(crate) fn needle2(&self) -> u8 {
  468|  38.1k|        self.s2
  469|  38.1k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  11.9k|    pub(crate) unsafe fn find_raw(
  494|  11.9k|        &self,
  495|  11.9k|        start: *const u8,
  496|  11.9k|        end: *const u8,
  497|  11.9k|    ) -> Option<*const u8> {
  498|  11.9k|        // If we want to support vectors bigger than 256 bits, we probably
  499|  11.9k|        // need to move up to using a u64 for the masks used below. Currently
  500|  11.9k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  11.9k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  11.9k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  11.9k|        let topos = V::Mask::first_offset;
  505|  11.9k|        let len = end.distance(start);
  506|  11.9k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  11.9k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  11.6k|            return Some(cur);
  517|    268|        }
  518|    268|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|    268|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|    268|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|    268|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|    268|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|    335|        while cur <= end.sub(V::BYTES) {
  551|    197|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|    197|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    130|                return Some(cur);
  554|     67|            }
  555|     67|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|    138|        if cur < end {
  562|    130|            debug_assert!(end.distance(cur) < V::BYTES);
  563|    130|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|    130|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|    130|            return self.search_chunk(cur, topos);
  566|      8|        }
  567|      8|        None
  568|  11.9k|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  12.2k|    unsafe fn search_chunk(
  671|  12.2k|        &self,
  672|  12.2k|        cur: *const u8,
  673|  12.2k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  12.2k|    ) -> Option<*const u8> {
  675|  12.2k|        let chunk = V::load_unaligned(cur);
  676|  12.2k|        let eq1 = self.v1.cmpeq(chunk);
  677|  12.2k|        let eq2 = self.v2.cmpeq(chunk);
  678|  12.2k|        let mask = eq1.or(eq2).movemask();
  679|  12.2k|        if mask.has_non_zero() {
  680|  11.9k|            let mask1 = eq1.movemask();
  681|  11.9k|            let mask2 = eq2.movemask();
  682|  11.9k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|    351|            None
  685|       |        }
  686|  12.2k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE3newBb_:
  710|  8.83k|    pub(crate) unsafe fn new(
  711|  8.83k|        needle1: u8,
  712|  8.83k|        needle2: u8,
  713|  8.83k|        needle3: u8,
  714|  8.83k|    ) -> Three<V> {
  715|  8.83k|        Three {
  716|  8.83k|            s1: needle1,
  717|  8.83k|            s2: needle2,
  718|  8.83k|            s3: needle3,
  719|  8.83k|            v1: V::splat(needle1),
  720|  8.83k|            v2: V::splat(needle2),
  721|  8.83k|            v3: V::splat(needle3),
  722|  8.83k|        }
  723|  8.83k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle1Bb_:
  727|  6.86k|    pub(crate) fn needle1(&self) -> u8 {
  728|  6.86k|        self.s1
  729|  6.86k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  6.30k|    pub(crate) fn needle2(&self) -> u8 {
  734|  6.30k|        self.s2
  735|  6.30k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  6.14k|    pub(crate) fn needle3(&self) -> u8 {
  740|  6.14k|        self.s3
  741|  6.14k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE8find_rawBb_:
  765|    716|    pub(crate) unsafe fn find_raw(
  766|    716|        &self,
  767|    716|        start: *const u8,
  768|    716|        end: *const u8,
  769|    716|    ) -> Option<*const u8> {
  770|    716|        // If we want to support vectors bigger than 256 bits, we probably
  771|    716|        // need to move up to using a u64 for the masks used below. Currently
  772|    716|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|    716|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|    716|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|    716|        let topos = V::Mask::first_offset;
  777|    716|        let len = end.distance(start);
  778|    716|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|    716|        if let Some(cur) = self.search_chunk(start, topos) {
  788|    526|            return Some(cur);
  789|    190|        }
  790|    190|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    190|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|    190|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    190|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    190|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    251|        while cur <= end.sub(V::BYTES) {
  833|     69|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     69|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      8|                return Some(cur);
  836|     61|            }
  837|     61|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    182|        if cur < end {
  844|    149|            debug_assert!(end.distance(cur) < V::BYTES);
  845|    149|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|    149|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|    149|            return self.search_chunk(cur, topos);
  848|     33|        }
  849|     33|        None
  850|    716|    }
_RINvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|    934|    unsafe fn search_chunk(
  963|    934|        &self,
  964|    934|        cur: *const u8,
  965|    934|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|    934|    ) -> Option<*const u8> {
  967|    934|        let chunk = V::load_unaligned(cur);
  968|    934|        let eq1 = self.v1.cmpeq(chunk);
  969|    934|        let eq2 = self.v2.cmpeq(chunk);
  970|    934|        let eq3 = self.v3.cmpeq(chunk);
  971|    934|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|    934|        if mask.has_non_zero() {
  973|    606|            let mask1 = eq1.movemask();
  974|    606|            let mask2 = eq2.movemask();
  975|    606|            let mask3 = eq3.movemask();
  976|    606|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    328|            None
  979|       |        }
  980|    934|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newB8_:
  111|  2.01M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  2.01M|        One { s1: needle, v1: V::splat(needle) }
  113|  2.01M|    }
_RNvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  1.92M|    pub(crate) unsafe fn find_raw(
  144|  1.92M|        &self,
  145|  1.92M|        start: *const u8,
  146|  1.92M|        end: *const u8,
  147|  1.92M|    ) -> Option<*const u8> {
  148|  1.92M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  1.92M|        // need to move up to using a u64 for the masks used below. Currently
  150|  1.92M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  1.92M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  1.92M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.92M|        let topos = V::Mask::first_offset;
  155|  1.92M|        let len = end.distance(start);
  156|  1.92M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.92M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.90M|            return Some(cur);
  167|  23.5k|        }
  168|  23.5k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  23.5k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  23.5k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  23.5k|        if len >= Self::LOOP_SIZE {
  172|  26.5k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  25.1k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  25.1k|                let a = V::load_aligned(cur);
  176|  25.1k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  25.1k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  25.1k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  25.1k|                let eqa = self.v1.cmpeq(a);
  180|  25.1k|                let eqb = self.v1.cmpeq(b);
  181|  25.1k|                let eqc = self.v1.cmpeq(c);
  182|  25.1k|                let eqd = self.v1.cmpeq(d);
  183|  25.1k|                let or1 = eqa.or(eqb);
  184|  25.1k|                let or2 = eqc.or(eqd);
  185|  25.1k|                let or3 = or1.or(or2);
  186|  25.1k|                if or3.movemask_will_have_non_zero() {
  187|  20.2k|                    let mask = eqa.movemask();
  188|  20.2k|                    if mask.has_non_zero() {
  189|  11.8k|                        return Some(cur.add(topos(mask)));
  190|  8.44k|                    }
  191|  8.44k|
  192|  8.44k|                    let mask = eqb.movemask();
  193|  8.44k|                    if mask.has_non_zero() {
  194|  7.13k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.30k|                    }
  196|  1.30k|
  197|  1.30k|                    let mask = eqc.movemask();
  198|  1.30k|                    if mask.has_non_zero() {
  199|  1.00k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    300|                    }
  201|    300|
  202|    300|                    let mask = eqd.movemask();
  203|    300|                    debug_assert!(mask.has_non_zero());
  204|    300|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  4.88k|                }
  206|  4.88k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  1.85k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  6.01k|        while cur <= end.sub(V::BYTES) {
  213|  3.98k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  3.98k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  1.22k|                return Some(cur);
  216|  2.76k|            }
  217|  2.76k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.03k|        if cur < end {
  224|  1.89k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.89k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.89k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.89k|            return self.search_chunk(cur, topos);
  228|    131|        }
  229|    131|        None
  230|  1.92M|    }
_RINvMNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  1.93M|    unsafe fn search_chunk(
  417|  1.93M|        &self,
  418|  1.93M|        cur: *const u8,
  419|  1.93M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  1.93M|    ) -> Option<*const u8> {
  421|  1.93M|        let chunk = V::load_unaligned(cur);
  422|  1.93M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  1.93M|        if mask.has_non_zero() {
  424|  1.90M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  27.8k|            None
  427|       |        }
  428|  1.93M|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newBa_:
  450|   284k|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|   284k|        Two {
  452|   284k|            s1: needle1,
  453|   284k|            s2: needle2,
  454|   284k|            v1: V::splat(needle1),
  455|   284k|            v2: V::splat(needle2),
  456|   284k|        }
  457|   284k|    }
_RNvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   248k|    pub(crate) unsafe fn find_raw(
  494|   248k|        &self,
  495|   248k|        start: *const u8,
  496|   248k|        end: *const u8,
  497|   248k|    ) -> Option<*const u8> {
  498|   248k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   248k|        // need to move up to using a u64 for the masks used below. Currently
  500|   248k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   248k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   248k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   248k|        let topos = V::Mask::first_offset;
  505|   248k|        let len = end.distance(start);
  506|   248k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   248k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   243k|            return Some(cur);
  517|  5.36k|        }
  518|  5.36k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  5.36k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  5.36k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  5.36k|        if len >= Self::LOOP_SIZE {
  522|  5.69k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  5.38k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  5.38k|                let a = V::load_aligned(cur);
  526|  5.38k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  5.38k|                let eqa1 = self.v1.cmpeq(a);
  528|  5.38k|                let eqb1 = self.v1.cmpeq(b);
  529|  5.38k|                let eqa2 = self.v2.cmpeq(a);
  530|  5.38k|                let eqb2 = self.v2.cmpeq(b);
  531|  5.38k|                let or1 = eqa1.or(eqb1);
  532|  5.38k|                let or2 = eqa2.or(eqb2);
  533|  5.38k|                let or3 = or1.or(or2);
  534|  5.38k|                if or3.movemask_will_have_non_zero() {
  535|  4.59k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  4.59k|                    if mask.has_non_zero() {
  537|  2.95k|                        return Some(cur.add(topos(mask)));
  538|  1.64k|                    }
  539|  1.64k|
  540|  1.64k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  1.64k|                    debug_assert!(mask.has_non_zero());
  542|  1.64k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|    784|                }
  544|    784|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|    456|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|    958|        while cur <= end.sub(V::BYTES) {
  551|    463|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|    463|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    275|                return Some(cur);
  554|    188|            }
  555|    188|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|    495|        if cur < end {
  562|    475|            debug_assert!(end.distance(cur) < V::BYTES);
  563|    475|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|    475|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|    475|            return self.search_chunk(cur, topos);
  566|     20|        }
  567|     20|        None
  568|   248k|    }
_RINvMs_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   249k|    unsafe fn search_chunk(
  671|   249k|        &self,
  672|   249k|        cur: *const u8,
  673|   249k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   249k|    ) -> Option<*const u8> {
  675|   249k|        let chunk = V::load_unaligned(cur);
  676|   249k|        let eq1 = self.v1.cmpeq(chunk);
  677|   249k|        let eq2 = self.v2.cmpeq(chunk);
  678|   249k|        let mask = eq1.or(eq2).movemask();
  679|   249k|        if mask.has_non_zero() {
  680|   244k|            let mask1 = eq1.movemask();
  681|   244k|            let mask2 = eq2.movemask();
  682|   244k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  5.57k|            None
  685|       |        }
  686|   249k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE3newBb_:
  710|  8.83k|    pub(crate) unsafe fn new(
  711|  8.83k|        needle1: u8,
  712|  8.83k|        needle2: u8,
  713|  8.83k|        needle3: u8,
  714|  8.83k|    ) -> Three<V> {
  715|  8.83k|        Three {
  716|  8.83k|            s1: needle1,
  717|  8.83k|            s2: needle2,
  718|  8.83k|            s3: needle3,
  719|  8.83k|            v1: V::splat(needle1),
  720|  8.83k|            v2: V::splat(needle2),
  721|  8.83k|            v3: V::splat(needle3),
  722|  8.83k|        }
  723|  8.83k|    }
_RNvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  6.15k|    pub(crate) unsafe fn find_raw(
  766|  6.15k|        &self,
  767|  6.15k|        start: *const u8,
  768|  6.15k|        end: *const u8,
  769|  6.15k|    ) -> Option<*const u8> {
  770|  6.15k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  6.15k|        // need to move up to using a u64 for the masks used below. Currently
  772|  6.15k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  6.15k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  6.15k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  6.15k|        let topos = V::Mask::first_offset;
  777|  6.15k|        let len = end.distance(start);
  778|  6.15k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  6.15k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  2.73k|            return Some(cur);
  789|  3.42k|        }
  790|  3.42k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  3.42k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  3.42k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  3.42k|        if len >= Self::LOOP_SIZE {
  794|  3.56k|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  3.40k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  3.40k|                let a = V::load_aligned(cur);
  798|  3.40k|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  3.40k|                let eqa1 = self.v1.cmpeq(a);
  800|  3.40k|                let eqb1 = self.v1.cmpeq(b);
  801|  3.40k|                let eqa2 = self.v2.cmpeq(a);
  802|  3.40k|                let eqb2 = self.v2.cmpeq(b);
  803|  3.40k|                let eqa3 = self.v3.cmpeq(a);
  804|  3.40k|                let eqb3 = self.v3.cmpeq(b);
  805|  3.40k|                let or1 = eqa1.or(eqb1);
  806|  3.40k|                let or2 = eqa2.or(eqb2);
  807|  3.40k|                let or3 = eqa3.or(eqb3);
  808|  3.40k|                let or4 = or1.or(or2);
  809|  3.40k|                let or5 = or3.or(or4);
  810|  3.40k|                if or5.movemask_will_have_non_zero() {
  811|  3.06k|                    let mask = eqa1
  812|  3.06k|                        .movemask()
  813|  3.06k|                        .or(eqa2.movemask())
  814|  3.06k|                        .or(eqa3.movemask());
  815|  3.06k|                    if mask.has_non_zero() {
  816|  2.12k|                        return Some(cur.add(topos(mask)));
  817|    933|                    }
  818|    933|
  819|    933|                    let mask = eqb1
  820|    933|                        .movemask()
  821|    933|                        .or(eqb2.movemask())
  822|    933|                        .or(eqb3.movemask());
  823|    933|                    debug_assert!(mask.has_non_zero());
  824|    933|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|    344|                }
  826|    344|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    195|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    470|        while cur <= end.sub(V::BYTES) {
  833|    173|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|    173|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|     61|                return Some(cur);
  836|    112|            }
  837|    112|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    297|        if cur < end {
  844|    262|            debug_assert!(end.distance(cur) < V::BYTES);
  845|    262|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|    262|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|    262|            return self.search_chunk(cur, topos);
  848|     35|        }
  849|     35|        None
  850|  6.15k|    }
_RINvMs0_NtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  6.59k|    unsafe fn search_chunk(
  963|  6.59k|        &self,
  964|  6.59k|        cur: *const u8,
  965|  6.59k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  6.59k|    ) -> Option<*const u8> {
  967|  6.59k|        let chunk = V::load_unaligned(cur);
  968|  6.59k|        let eq1 = self.v1.cmpeq(chunk);
  969|  6.59k|        let eq2 = self.v2.cmpeq(chunk);
  970|  6.59k|        let eq3 = self.v3.cmpeq(chunk);
  971|  6.59k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  6.59k|        if mask.has_non_zero() {
  973|  2.98k|            let mask1 = eq1.movemask();
  974|  2.98k|            let mask2 = eq2.movemask();
  975|  2.98k|            let mask3 = eq3.movemask();
  976|  2.98k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  3.60k|            None
  979|       |        }
  980|  6.59k|    }
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  38.0k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  38.0k|    start: *const u8,
 1150|  38.0k|    end: *const u8,
 1151|  38.0k|    confirm: F,
 1152|  38.0k|) -> Option<*const u8> {
 1153|  38.0k|    debug_assert!(start <= end);
 1154|  38.0k|    let mut ptr = start;
 1155|   135k|    while ptr < end {
 1156|   127k|        if confirm(*ptr) {
 1157|  30.4k|            return Some(ptr);
 1158|  97.1k|        }
 1159|  97.1k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  7.54k|    None
 1162|  38.0k|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  21.9k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  21.9k|    start: *const u8,
 1150|  21.9k|    end: *const u8,
 1151|  21.9k|    confirm: F,
 1152|  21.9k|) -> Option<*const u8> {
 1153|  21.9k|    debug_assert!(start <= end);
 1154|  21.9k|    let mut ptr = start;
 1155|  45.7k|    while ptr < end {
 1156|  43.0k|        if confirm(*ptr) {
 1157|  19.2k|            return Some(ptr);
 1158|  23.8k|        }
 1159|  23.8k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  2.66k|    None
 1162|  21.9k|}
_RINvNtNtNtCsgAmdbuUjTpV_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  1.92k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.92k|    start: *const u8,
 1150|  1.92k|    end: *const u8,
 1151|  1.92k|    confirm: F,
 1152|  1.92k|) -> Option<*const u8> {
 1153|  1.92k|    debug_assert!(start <= end);
 1154|  1.92k|    let mut ptr = start;
 1155|  7.89k|    while ptr < end {
 1156|  6.86k|        if confirm(*ptr) {
 1157|    889|            return Some(ptr);
 1158|  5.97k|        }
 1159|  5.97k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.03k|    None
 1162|  1.92k|}

_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  2.01M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  2.01M|        One {
   71|  2.01M|            sse2: generic::One::new(needle),
   72|  2.01M|            avx2: generic::One::new(needle),
   73|  2.01M|        }
   74|  2.01M|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  2.01M|    pub unsafe fn find_raw(
  180|  2.01M|        &self,
  181|  2.01M|        start: *const u8,
  182|  2.01M|        end: *const u8,
  183|  2.01M|    ) -> Option<*const u8> {
  184|  2.01M|        if start >= end {
  185|    727|            return None;
  186|  2.01M|        }
  187|  2.01M|        let len = end.distance(start);
  188|  2.01M|        if len < __m256i::BYTES {
  189|  81.2k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  38.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  38.0k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  43.2k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  1.92M|        }
  201|  1.92M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  1.92M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  1.92M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  1.92M|        // responsibility.
  205|  1.92M|        //
  206|  1.92M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  1.92M|        // means we'd have to annotate this routine with `target_feature`.
  208|  1.92M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  1.92M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  1.92M|        // The real problem is that a routine with a `target_feature`
  211|  1.92M|        // annotation generally can't be inlined into caller code unless
  212|  1.92M|        // the caller code has the same target feature annotations. Namely,
  213|  1.92M|        // the common case (at time of writing) is for calling code to not
  214|  1.92M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  1.92M|        // `target_feature` on this routine, it can be inlined which will
  216|  1.92M|        // handle some of the short-haystack cases above without touching the
  217|  1.92M|        // architecture specific code.
  218|  1.92M|        self.find_raw_avx2(start, end)
  219|  2.01M|    }
_RNCNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   127k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   127k|                    b == self.sse2.needle1()
  194|   127k|                })
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  43.2k|    unsafe fn find_raw_sse2(
  337|  43.2k|        &self,
  338|  43.2k|        start: *const u8,
  339|  43.2k|        end: *const u8,
  340|  43.2k|    ) -> Option<*const u8> {
  341|  43.2k|        self.sse2.find_raw(start, end)
  342|  43.2k|    }
_RNvMNtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  1.92M|    unsafe fn find_raw_avx2(
  397|  1.92M|        &self,
  398|  1.92M|        start: *const u8,
  399|  1.92M|        end: *const u8,
  400|  1.92M|    ) -> Option<*const u8> {
  401|  1.92M|        self.avx2.find_raw(start, end)
  402|  1.92M|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|   284k|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|   284k|        Two {
  558|   284k|            sse2: generic::Two::new(needle1, needle2),
  559|   284k|            avx2: generic::Two::new(needle1, needle2),
  560|   284k|        }
  561|   284k|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|   284k|    pub unsafe fn find_raw(
  655|   284k|        &self,
  656|   284k|        start: *const u8,
  657|   284k|        end: *const u8,
  658|   284k|    ) -> Option<*const u8> {
  659|   284k|        if start >= end {
  660|  1.84k|            return None;
  661|   282k|        }
  662|   282k|        let len = end.distance(start);
  663|   282k|        if len < __m256i::BYTES {
  664|  33.8k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  21.9k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  21.9k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  11.9k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   248k|        }
  676|   248k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   248k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   248k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   248k|        // responsibility.
  680|   248k|        //
  681|   248k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   248k|        // means we'd have to annotate this routine with `target_feature`.
  683|   248k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   248k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   248k|        // The real problem is that a routine with a `target_feature`
  686|   248k|        // annotation generally can't be inlined into caller code unless
  687|   248k|        // the caller code has the same target feature annotations. Namely,
  688|   248k|        // the common case (at time of writing) is for calling code to not
  689|   248k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   248k|        // `target_feature` on this routine, it can be inlined which will
  691|   248k|        // handle some of the short-haystack cases above without touching the
  692|   248k|        // architecture specific code.
  693|   248k|        self.find_raw_avx2(start, end)
  694|   284k|    }
_RNCNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  43.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  43.0k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  43.0k|                })
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  11.9k|    unsafe fn find_raw_sse2(
  765|  11.9k|        &self,
  766|  11.9k|        start: *const u8,
  767|  11.9k|        end: *const u8,
  768|  11.9k|    ) -> Option<*const u8> {
  769|  11.9k|        self.sse2.find_raw(start, end)
  770|  11.9k|    }
_RNvMs2_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   248k|    unsafe fn find_raw_avx2(
  805|   248k|        &self,
  806|   248k|        start: *const u8,
  807|   248k|        end: *const u8,
  808|   248k|    ) -> Option<*const u8> {
  809|   248k|        self.avx2.find_raw(start, end)
  810|   248k|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  8.83k|    pub unsafe fn new_unchecked(
  936|  8.83k|        needle1: u8,
  937|  8.83k|        needle2: u8,
  938|  8.83k|        needle3: u8,
  939|  8.83k|    ) -> Three {
  940|  8.83k|        Three {
  941|  8.83k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  8.83k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  8.83k|        }
  944|  8.83k|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  8.83k|    pub unsafe fn find_raw(
 1038|  8.83k|        &self,
 1039|  8.83k|        start: *const u8,
 1040|  8.83k|        end: *const u8,
 1041|  8.83k|    ) -> Option<*const u8> {
 1042|  8.83k|        if start >= end {
 1043|     42|            return None;
 1044|  8.79k|        }
 1045|  8.79k|        let len = end.distance(start);
 1046|  8.79k|        if len < __m256i::BYTES {
 1047|  2.63k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  1.92k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  1.92k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|    716|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  6.15k|        }
 1061|  6.15k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  6.15k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  6.15k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  6.15k|        // responsibility.
 1065|  6.15k|        //
 1066|  6.15k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  6.15k|        // means we'd have to annotate this routine with `target_feature`.
 1068|  6.15k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  6.15k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  6.15k|        // The real problem is that a routine with a `target_feature`
 1071|  6.15k|        // annotation generally can't be inlined into caller code unless
 1072|  6.15k|        // the caller code has the same target feature annotations. Namely,
 1073|  6.15k|        // the common case (at time of writing) is for calling code to not
 1074|  6.15k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  6.15k|        // `target_feature` on this routine, it can be inlined which will
 1076|  6.15k|        // handle some of the short-haystack cases above without touching the
 1077|  6.15k|        // architecture specific code.
 1078|  6.15k|        self.find_raw_avx2(start, end)
 1079|  8.83k|    }
_RNCNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|  6.86k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|  6.86k|                    b == self.sse2.needle1()
 1052|  6.30k|                        || b == self.sse2.needle2()
 1053|  6.14k|                        || b == self.sse2.needle3()
 1054|  6.86k|                })
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|    716|    unsafe fn find_raw_sse2(
 1152|    716|        &self,
 1153|    716|        start: *const u8,
 1154|    716|        end: *const u8,
 1155|    716|    ) -> Option<*const u8> {
 1156|    716|        self.sse2.find_raw(start, end)
 1157|    716|    }
_RNvMs6_NtNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  6.15k|    unsafe fn find_raw_avx2(
 1192|  6.15k|        &self,
 1193|  6.15k|        start: *const u8,
 1194|  6.15k|        end: *const u8,
 1195|  6.15k|    ) -> Option<*const u8> {
 1196|  6.15k|        self.avx2.find_raw(start, end)
 1197|  6.15k|    }

_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw:
  174|  2.01M|pub(crate) fn memchr_raw(
  175|  2.01M|    n1: u8,
  176|  2.01M|    start: *const u8,
  177|  2.01M|    end: *const u8,
  178|  2.01M|) -> Option<*const u8> {
  179|  2.01M|    // SAFETY: We provide a valid function pointer type.
  180|  2.01M|    unsafe_ifunc!(
  181|  2.01M|        One,
  182|  2.01M|        find_raw,
  183|  2.01M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  2.01M|        Option<*const u8>,
  185|  2.01M|        start,
  186|  2.01M|        end,
  187|  2.01M|        n1
  188|  2.01M|    )
  189|  2.01M|}
_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw:
  220|   284k|pub(crate) fn memchr2_raw(
  221|   284k|    n1: u8,
  222|   284k|    n2: u8,
  223|   284k|    start: *const u8,
  224|   284k|    end: *const u8,
  225|   284k|) -> Option<*const u8> {
  226|   284k|    // SAFETY: We provide a valid function pointer type.
  227|   284k|    unsafe_ifunc!(
  228|   284k|        Two,
  229|   284k|        find_raw,
  230|   284k|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|   284k|        Option<*const u8>,
  232|   284k|        start,
  233|   284k|        end,
  234|   284k|        n1,
  235|   284k|        n2
  236|   284k|    )
  237|   284k|}
_RNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  8.83k|pub(crate) fn memchr3_raw(
  271|  8.83k|    n1: u8,
  272|  8.83k|    n2: u8,
  273|  8.83k|    n3: u8,
  274|  8.83k|    start: *const u8,
  275|  8.83k|    end: *const u8,
  276|  8.83k|) -> Option<*const u8> {
  277|  8.83k|    // SAFETY: We provide a valid function pointer type.
  278|  8.83k|    unsafe_ifunc!(
  279|  8.83k|        Three,
  280|  8.83k|        find_raw,
  281|  8.83k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  8.83k|        Option<*const u8>,
  283|  8.83k|        start,
  284|  8.83k|        end,
  285|  8.83k|        n1,
  286|  8.83k|        n2,
  287|  8.83k|        n3
  288|  8.83k|    )
  289|  8.83k|}
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  2.01M|        unsafe fn find_avx2(
   79|  2.01M|            $($needle: u8),+,
   80|  2.01M|            $hay_start: *const u8,
   81|  2.01M|            $hay_end: *const u8,
   82|  2.01M|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.01M|            $memchrty::new_unchecked($($needle),+)
   85|  2.01M|                .$memchrfind($hay_start, $hay_end)
   86|  2.01M|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|   284k|        unsafe fn find_avx2(
   79|   284k|            $($needle: u8),+,
   80|   284k|            $hay_start: *const u8,
   81|   284k|            $hay_end: *const u8,
   82|   284k|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   284k|            $memchrty::new_unchecked($($needle),+)
   85|   284k|                .$memchrfind($hay_start, $hay_end)
   86|   284k|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  8.83k|        unsafe fn find_avx2(
   79|  8.83k|            $($needle: u8),+,
   80|  8.83k|            $hay_start: *const u8,
   81|  8.83k|            $hay_end: *const u8,
   82|  8.83k|        ) -> $retty {
   83|       |            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  8.83k|            $memchrty::new_unchecked($($needle),+)
   85|  8.83k|                .$memchrfind($hay_start, $hay_end)
   86|  8.83k|        }
_RNvNvNtNtNtCsgAmdbuUjTpV_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  6.83M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  6.83M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  6.83M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  6.83M|    }
_RNvXNtCsgAmdbuUjTpV_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  34.7k|    fn as_usize(self) -> usize {
   27|  34.7k|        self as usize
   28|  34.7k|    }

_RNvMNtCsgAmdbuUjTpV_6memchr6memchrNtB2_6Memchr3newCseR3GpSb7YJr_10sparesults:
  300|   726k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|   726k|        Memchr {
  302|   726k|            needle1,
  303|   726k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|   726k|        }
  305|   726k|    }
_RNvMs2_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr23newCseR3GpSb7YJr_10sparesults:
  377|  8.54k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  8.54k|        Memchr2 {
  379|  8.54k|            needle1,
  380|  8.54k|            needle2,
  381|  8.54k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  8.54k|        }
  383|  8.54k|    }
_RNvMs6_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr33newCseR3GpSb7YJr_10sparesults:
  446|  2.34k|    pub fn new(
  447|  2.34k|        needle1: u8,
  448|  2.34k|        needle2: u8,
  449|  2.34k|        needle3: u8,
  450|  2.34k|        haystack: &'h [u8],
  451|  2.34k|    ) -> Memchr3<'h> {
  452|  2.34k|        Memchr3 {
  453|  2.34k|            needle1,
  454|  2.34k|            needle2,
  455|  2.34k|            needle3,
  456|  2.34k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  2.34k|        }
  458|  2.34k|    }
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr_iterCseR3GpSb7YJr_10sparesults:
  216|   726k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|   726k|    Memchr::new(needle, haystack)
  218|   726k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr2_iterCseR3GpSb7YJr_10sparesults:
  232|  8.54k|pub fn memchr2_iter<'h>(
  233|  8.54k|    needle1: u8,
  234|  8.54k|    needle2: u8,
  235|  8.54k|    haystack: &'h [u8],
  236|  8.54k|) -> Memchr2<'h> {
  237|  8.54k|    Memchr2::new(needle1, needle2, haystack)
  238|  8.54k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr3_iterCseR3GpSb7YJr_10sparesults:
  256|  2.34k|pub fn memchr3_iter<'h>(
  257|  2.34k|    needle1: u8,
  258|  2.34k|    needle2: u8,
  259|  2.34k|    needle3: u8,
  260|  2.34k|    haystack: &'h [u8],
  261|  2.34k|) -> Memchr3<'h> {
  262|  2.34k|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  2.34k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr6memchrCseR3GpSb7YJr_10sparesults:
   27|   743k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   743k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   743k|    // pointer between start and end.
   30|   743k|    unsafe {
   31|   743k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   743k|        })
   34|   743k|    }
   35|   743k|}
_RNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCseR3GpSb7YJr_10sparesults:
  390|  91.4k|    fn next(&mut self) -> Option<usize> {
  391|  91.4k|        // SAFETY: All of our implementations of memchr ensure that any
  392|  91.4k|        // pointers returns will fall within the start and end bounds, and this
  393|  91.4k|        // upholds the safety contract of `self.it.next`.
  394|  91.4k|        unsafe {
  395|  91.4k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  91.4k|        }
  397|  91.4k|    }
_RNvXs7_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr3NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCseR3GpSb7YJr_10sparesults:
  465|  8.83k|    fn next(&mut self) -> Option<usize> {
  466|  8.83k|        // SAFETY: All of our implementations of memchr ensure that any
  467|  8.83k|        // pointers returns will fall within the start and end bounds, and this
  468|  8.83k|        // upholds the safety contract of `self.it.next`.
  469|  8.83k|        unsafe {
  470|  8.83k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  8.83k|            })
  473|  8.83k|        }
  474|  8.83k|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6memchrNtB4_6MemchrNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCseR3GpSb7YJr_10sparesults:
  312|  1.26M|    fn next(&mut self) -> Option<usize> {
  313|  1.26M|        // SAFETY: All of our implementations of memchr ensure that any
  314|  1.26M|        // pointers returns will fall within the start and end bounds, and this
  315|  1.26M|        // upholds the safety contract of `self.it.next`.
  316|  1.26M|        unsafe {
  317|  1.26M|            // NOTE: I attempted to define an enum of previously created
  318|  1.26M|            // searchers and then switch on those here instead of just
  319|  1.26M|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  1.26M|            // that turned out to have a fair bit of extra overhead when
  321|  1.26M|            // searching very small haystacks.
  322|  1.26M|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  1.26M|        }
  324|  1.26M|    }
_RNCNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB7_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Csa7QYSr9aLYT_9quick_xml:
  395|   284k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCsgAmdbuUjTpV_6memchr6memchrNtB7_7Memchr3NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Csa7QYSr9aLYT_9quick_xml:
  470|  8.83k|            self.it.next(|s, e| {
  471|  8.83k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  8.83k|            })
_RNCNvXs_NtCsgAmdbuUjTpV_6memchr6memchrNtB6_6MemchrNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0Csa7QYSr9aLYT_9quick_xml:
  322|  1.26M|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvMs2_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr23newCsa7QYSr9aLYT_9quick_xml:
  377|  3.92k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  3.92k|        Memchr2 {
  379|  3.92k|            needle1,
  380|  3.92k|            needle2,
  381|  3.92k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  3.92k|        }
  383|  3.92k|    }
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawCsa7QYSr9aLYT_9quick_xml:
  504|  1.26M|unsafe fn memchr_raw(
  505|  1.26M|    needle: u8,
  506|  1.26M|    start: *const u8,
  507|  1.26M|    end: *const u8,
  508|  1.26M|) -> Option<*const u8> {
  509|  1.26M|    #[cfg(target_arch = "x86_64")]
  510|  1.26M|    {
  511|  1.26M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  1.26M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  1.26M|        // time. This function also handles using a fallback if neither AVX2
  514|  1.26M|        // nor SSE2 (unusual) are available.
  515|  1.26M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  1.26M|    }
  517|  1.26M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  1.26M|    {
  519|  1.26M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  1.26M|    }
  521|  1.26M|    #[cfg(target_arch = "aarch64")]
  522|  1.26M|    {
  523|  1.26M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  1.26M|    }
  525|  1.26M|    #[cfg(not(any(
  526|  1.26M|        target_arch = "x86_64",
  527|  1.26M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  1.26M|        target_arch = "aarch64"
  529|  1.26M|    )))]
  530|  1.26M|    {
  531|  1.26M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  1.26M|    }
  533|  1.26M|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr2_rawCsa7QYSr9aLYT_9quick_xml:
  574|   284k|unsafe fn memchr2_raw(
  575|   284k|    needle1: u8,
  576|   284k|    needle2: u8,
  577|   284k|    start: *const u8,
  578|   284k|    end: *const u8,
  579|   284k|) -> Option<*const u8> {
  580|   284k|    #[cfg(target_arch = "x86_64")]
  581|   284k|    {
  582|   284k|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|   284k|    }
  584|   284k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|   284k|    {
  586|   284k|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|   284k|    }
  588|   284k|    #[cfg(target_arch = "aarch64")]
  589|   284k|    {
  590|   284k|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|   284k|    }
  592|   284k|    #[cfg(not(any(
  593|   284k|        target_arch = "x86_64",
  594|   284k|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|   284k|        target_arch = "aarch64"
  596|   284k|    )))]
  597|   284k|    {
  598|   284k|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|   284k|            .find_raw(start, end)
  600|   284k|    }
  601|   284k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr11memchr3_rawCsa7QYSr9aLYT_9quick_xml:
  646|  8.83k|unsafe fn memchr3_raw(
  647|  8.83k|    needle1: u8,
  648|  8.83k|    needle2: u8,
  649|  8.83k|    needle3: u8,
  650|  8.83k|    start: *const u8,
  651|  8.83k|    end: *const u8,
  652|  8.83k|) -> Option<*const u8> {
  653|  8.83k|    #[cfg(target_arch = "x86_64")]
  654|  8.83k|    {
  655|  8.83k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  8.83k|            needle1, needle2, needle3, start, end,
  657|  8.83k|        )
  658|  8.83k|    }
  659|  8.83k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  8.83k|    {
  661|  8.83k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  8.83k|            needle1, needle2, needle3, start, end,
  663|  8.83k|        )
  664|  8.83k|    }
  665|  8.83k|    #[cfg(target_arch = "aarch64")]
  666|  8.83k|    {
  667|  8.83k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  8.83k|            needle1, needle2, needle3, start, end,
  669|  8.83k|        )
  670|  8.83k|    }
  671|  8.83k|    #[cfg(not(any(
  672|  8.83k|        target_arch = "x86_64",
  673|  8.83k|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  8.83k|        target_arch = "aarch64"
  675|  8.83k|    )))]
  676|  8.83k|    {
  677|  8.83k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  8.83k|            .find_raw(start, end)
  679|  8.83k|    }
  680|  8.83k|}
_RNvNtCsgAmdbuUjTpV_6memchr6memchr12memchr2_iterCsa7QYSr9aLYT_9quick_xml:
  232|  3.92k|pub fn memchr2_iter<'h>(
  233|  3.92k|    needle1: u8,
  234|  3.92k|    needle2: u8,
  235|  3.92k|    haystack: &'h [u8],
  236|  3.92k|) -> Memchr2<'h> {
  237|  3.92k|    Memchr2::new(needle1, needle2, haystack)
  238|  3.92k|}
_RNvXs3_NtCsgAmdbuUjTpV_6memchr6memchrNtB5_7Memchr2NtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCsa7QYSr9aLYT_9quick_xml:
  390|   192k|    fn next(&mut self) -> Option<usize> {
  391|   192k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   192k|        // pointers returns will fall within the start and end bounds, and this
  393|   192k|        // upholds the safety contract of `self.it.next`.
  394|   192k|        unsafe {
  395|   192k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   192k|        }
  397|   192k|    }
_RNCNvNtCsgAmdbuUjTpV_6memchr6memchr6memchr0B5_:
   31|   743k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   743k|            memchr_raw(needle, start, end)
   33|   743k|        })
_RNvNtCsgAmdbuUjTpV_6memchr6memchr10memchr_rawB3_:
  504|   743k|unsafe fn memchr_raw(
  505|   743k|    needle: u8,
  506|   743k|    start: *const u8,
  507|   743k|    end: *const u8,
  508|   743k|) -> Option<*const u8> {
  509|   743k|    #[cfg(target_arch = "x86_64")]
  510|   743k|    {
  511|   743k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   743k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   743k|        // time. This function also handles using a fallback if neither AVX2
  514|   743k|        // nor SSE2 (unusual) are available.
  515|   743k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   743k|    }
  517|   743k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   743k|    {
  519|   743k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   743k|    }
  521|   743k|    #[cfg(target_arch = "aarch64")]
  522|   743k|    {
  523|   743k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   743k|    }
  525|   743k|    #[cfg(not(any(
  526|   743k|        target_arch = "x86_64",
  527|   743k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   743k|        target_arch = "aarch64"
  529|   743k|    )))]
  530|   743k|    {
  531|   743k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   743k|    }
  533|   743k|}

_RNvYNtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtNtCsgAmdbuUjTpV_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  33.9k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  33.9k|        self.movemask().has_non_zero()
   65|  33.9k|    }
_RNvMNtCsgAmdbuUjTpV_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  2.23M|    fn get_for_offset(self) -> u32 {
  127|  2.23M|        #[cfg(target_endian = "big")]
  128|  2.23M|        {
  129|  2.23M|            self.0.swap_bytes()
  130|  2.23M|        }
  131|  2.23M|        #[cfg(target_endian = "little")]
  132|  2.23M|        {
  133|  2.23M|            self.0
  134|  2.23M|        }
  135|  2.23M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  2.32M|    fn has_non_zero(self) -> bool {
  147|  2.32M|        self.0 != 0
  148|  2.32M|    }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  2.23M|    fn first_offset(self) -> usize {
  172|  2.23M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  2.23M|        // the bytes so we are in practice), where the most significant byte
  174|  2.23M|        // is at a higher address. That means the least significant bit that
  175|  2.23M|        // is set corresponds to the position of our first matching byte.
  176|  2.23M|        // That position corresponds to the number of zeros after the least
  177|  2.23M|        // significant bit.
  178|  2.23M|        self.get_for_offset().trailing_zeros() as usize
  179|  2.23M|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|  84.3k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|  84.3k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|  84.3k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  2.77M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  2.77M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  2.77M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|  58.7k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|  58.7k|            _mm_loadu_si128(data as *const __m128i)
  219|  58.7k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|  72.8k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|  72.8k|            _mm_cmpeq_epi8(self, vector2)
  229|  72.8k|        }
_RNvXs_NtCsgAmdbuUjTpV_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|   277k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|   277k|        SensibleMoveMask(self.0 | other.0)
  163|   277k|    }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  2.60M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  2.60M|            _mm_set1_epi8(byte as i8)
  209|  2.60M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86sse2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|  14.1k|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|  14.1k|            _mm_or_si128(self, vector2)
  239|  14.1k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  2.19M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  2.19M|            _mm256_loadu_si256(data as *const __m256i)
  268|  2.19M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  2.59M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  2.59M|            _mm256_cmpeq_epi8(self, vector2)
  278|  2.59M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  2.60M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  2.60M|            _mm256_set1_epi8(byte as i8)
  258|  2.60M|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|   118k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|   118k|            _mm256_load_si256(data as *const __m256i)
  263|   118k|        }
_RNvXNtNtCsgAmdbuUjTpV_6memchr6vector7x86avx2NtNtNtCshZc3FwCJ069_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|   371k|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|   371k|            _mm256_or_si256(self, vector2)
  288|   371k|        }

_RNvMs2_NtCsaMS60HLPCvw_9once_cell3impINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE14is_initializedCskxgTfQto6Vo_13libfuzzer_sys:
   49|  18.5k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  18.5k|        // An `Acquire` load is enough because that makes all the initialization
   51|  18.5k|        // operations visible to us, and, this being a fast path, weaker
   52|  18.5k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  18.5k|        // `SeqCst` operations on the slow path.
   54|  18.5k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  18.5k|    }

_RNvMs4_NtCsaMS60HLPCvw_9once_cell4syncINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE3getCskxgTfQto6Vo_13libfuzzer_sys:
  963|  18.5k|        pub fn get(&self) -> Option<&T> {
  964|  18.5k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  18.5k|                None
  969|       |            }
  970|  18.5k|        }

_RNvMs_NtCsa7QYSr9aLYT_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  6.07k|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  6.07k|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  4.58k|        decoded
   90|  6.07k|    }
_RNvMs_NtCsa7QYSr9aLYT_9quick_xml8encodingNtB4_7Decoder10decode_cow:
  104|  5.01k|    pub(crate) fn decode_cow<'b>(&self, bytes: &Cow<'b, [u8]>) -> Result<Cow<'b, str>> {
  105|  5.01k|        match bytes {
  106|  5.01k|            Cow::Borrowed(bytes) => self.decode(bytes),
  107|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  108|      0|            Cow::Owned(bytes) => Ok(self.decode(bytes)?.into_owned().into()),
  109|       |        }
  110|  5.01k|    }

_RNvXs6_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtNtBS_3str5error9Utf8ErrorE4fromB7_:
  235|  1.48k|    fn from(error: Utf8Error) -> Error {
  236|  1.48k|        Error::NonDecodable(Some(error))
  237|  1.48k|    }
_RNvXs8_NtCsa7QYSr9aLYT_9quick_xml6errorsNtB5_5ErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromB7_:
  251|    547|    fn from(error: EscapeError) -> Error {
  252|    547|        Error::EscapeError(error)
  253|    547|    }

_RINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNvB2_25resolve_predefined_entityEB4_:
  249|  3.92k|pub fn unescape_with<'input, 'entity, F>(
  250|  3.92k|    raw: &'input str,
  251|  3.92k|    mut resolve_entity: F,
  252|  3.92k|) -> Result<Cow<'input, str>, EscapeError>
  253|  3.92k|where
  254|  3.92k|    // the lifetime of the output comes from a capture or is `'static`
  255|  3.92k|    F: FnMut(&str) -> Option<&'entity str>,
  256|  3.92k|{
  257|  3.92k|    let bytes = raw.as_bytes();
  258|  3.92k|    let mut unescaped = None;
  259|  3.92k|    let mut last_end = 0;
  260|  3.92k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|  92.8k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|  89.4k|        match iter.next() {
  263|  89.1k|            Some(end) if bytes[end] == b';' => {
  264|  89.1k|                // append valid data
  265|  89.1k|                if unescaped.is_none() {
  266|  1.49k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  87.6k|                }
  268|  89.1k|                let unescaped = unescaped.as_mut().expect("initialized");
  269|  89.1k|                unescaped.push_str(&raw[last_end..start]);
  270|  89.1k|
  271|  89.1k|                // search for character correctness
  272|  89.1k|                let pat = &raw[start + 1..end];
  273|  89.1k|                if let Some(entity) = pat.strip_prefix('#') {
  274|  72.8k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  72.6k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|  16.3k|                } else if let Some(value) = resolve_entity(pat) {
  277|  16.2k|                    unescaped.push_str(value);
  278|  16.2k|                } else {
  279|     96|                    return Err(EscapeError::UnrecognizedEntity(
  280|     96|                        start + 1..end,
  281|     96|                        pat.to_string(),
  282|     96|                    ));
  283|       |                }
  284|       |
  285|  88.9k|                last_end = end + 1;
  286|       |            }
  287|    326|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|  3.38k|    if let Some(mut unescaped) = unescaped {
  292|  1.14k|        if let Some(raw) = raw.get(last_end..) {
  293|  1.14k|            unescaped.push_str(raw);
  294|  1.14k|        }
  295|  1.14k|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|  2.23k|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|  3.92k|}
_RNCINvNtCsa7QYSr9aLYT_9quick_xml6escape13unescape_withNvB4_25resolve_predefined_entityE0B6_:
  261|   100k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape25resolve_predefined_entityB3_:
  307|  16.3k|pub const fn resolve_predefined_entity(entity: &str) -> Option<&'static str> {
  308|  16.3k|    #[cfg(not(feature = "escape-html"))]
  309|  16.3k|    {
  310|  16.3k|        resolve_xml_entity(entity)
  311|  16.3k|    }
  312|  16.3k|
  313|  16.3k|    #[cfg(feature = "escape-html")]
  314|  16.3k|    {
  315|  16.3k|        resolve_html5_entity(entity)
  316|  16.3k|    }
  317|  16.3k|}
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape18resolve_xml_entity:
  337|  16.3k|pub const fn resolve_xml_entity(entity: &str) -> Option<&'static str> {
  338|       |    // match over strings are not allowed in const functions
  339|  16.3k|    let s = match entity.as_bytes() {
  340|  16.3k|        b"lt" => "<",
  341|  3.11k|        b"gt" => ">",
  342|  9.22k|        b"amp" => "&",
  343|  8.58k|        b"apos" => "'",
  344|    962|        b"quot" => "\"",
  345|     96|        _ => return None,
  346|       |    };
  347|  16.2k|    Some(s)
  348|  16.3k|}
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape12parse_number:
 1819|  72.8k|fn parse_number(num: &str) -> Result<char, ParseCharRefError> {
 1820|  72.8k|    let code = if let Some(hex) = num.strip_prefix('x') {
 1821|  25.6k|        from_str_radix(hex, 16)?
 1822|       |    } else {
 1823|  47.1k|        from_str_radix(num, 10)?
 1824|       |    };
 1825|  72.7k|    if code == 0 {
 1826|      2|        return Err(ParseCharRefError::IllegalCharacter(code));
 1827|  72.6k|    }
 1828|  72.6k|    match std::char::from_u32(code) {
 1829|  72.6k|        Some(c) => Ok(c),
 1830|     14|        None => Err(ParseCharRefError::InvalidCodepoint(code)),
 1831|       |    }
 1832|  72.8k|}
_RNvNtCsa7QYSr9aLYT_9quick_xml6escape14from_str_radixB3_:
 1835|  72.8k|fn from_str_radix(src: &str, radix: u32) -> Result<u32, ParseCharRefError> {
 1836|  72.8k|    match src.as_bytes().first().copied() {
 1837|       |        // We should not allow sign numbers, but u32::from_str_radix will accept `+`.
 1838|       |        // We also handle `-` to be consistent in returned errors
 1839|     54|        Some(b'+') | Some(b'-') => Err(ParseCharRefError::UnexpectedSign),
 1840|  72.7k|        _ => u32::from_str_radix(src, radix).map_err(ParseCharRefError::InvalidNumber),
 1841|       |    }
 1842|  72.8k|}

_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart10local_nameCseR3GpSb7YJr_10sparesults:
  203|    719|    pub fn local_name(&self) -> LocalName {
  204|    719|        self.name().into()
  205|    719|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart4nameCseR3GpSb7YJr_10sparesults:
  194|  1.43k|    pub fn name(&self) -> QName {
  195|  1.43k|        QName(&self.buf[..self.name_len])
  196|  1.43k|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
  102|   687k|    pub(crate) const fn wrap(content: &'a [u8], name_len: usize) -> Self {
  103|   687k|        BytesStart {
  104|   687k|            buf: Cow::Borrowed(content),
  105|   687k|            name_len,
  106|   687k|        }
  107|   687k|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6eventsNtB2_10BytesStart4nameB4_:
  194|    719|    pub fn name(&self) -> QName {
  195|    719|        QName(&self.buf[..self.name_len])
  196|    719|    }
_RINvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  537|  48.2k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  48.2k|        Self {
  539|  48.2k|            content: content.into(),
  540|  48.2k|            decoder,
  541|  48.2k|        }
  542|  48.2k|    }
_RNvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesText8unescape:
  586|  5.01k|    pub fn unescape(&self) -> Result<Cow<'a, str>> {
  587|  5.01k|        self.unescape_with(resolve_predefined_entity)
  588|  5.01k|    }
_RINvMs7_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_9BytesText13unescape_withNvNtB8_6escape25resolve_predefined_entityEB8_:
  594|  5.01k|    pub fn unescape_with<'entity>(
  595|  5.01k|        &self,
  596|  5.01k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  597|  5.01k|    ) -> Result<Cow<'a, str>> {
  598|  5.01k|        let decoded = self.decoder.decode_cow(&self.content)?;
  599|       |
  600|  3.92k|        match unescape_with(&decoded, resolve_entity)? {
  601|       |            // Because result is borrowed, no replacements was done and we can use original string
  602|  2.23k|            Cow::Borrowed(_) => Ok(decoded),
  603|  1.14k|            Cow::Owned(s) => Ok(s.into()),
  604|       |        }
  605|  5.01k|    }
_RNvXs9_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesTextNtNtNtCshZc3FwCJ069_4core3ops5deref5Deref5deref:
  638|  6.71k|    fn deref(&self) -> &[u8] {
  639|  6.71k|        &self.content
  640|  6.71k|    }
_RINvMsa_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  692|      5|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  693|      5|        Self {
  694|      5|            content: content.into(),
  695|      5|            decoder,
  696|      5|        }
  697|      5|    }
_RNvMsd_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_7BytesPI4wrapB7_:
  872|   508k|    pub(crate) const fn wrap(content: &'a [u8], target_len: usize) -> Self {
  873|   508k|        Self {
  874|   508k|            content: BytesStart::wrap(content, target_len),
  875|   508k|        }
  876|   508k|    }
_RNvMsg_NtCsa7QYSr9aLYT_9quick_xml6eventsNtB5_9BytesDecl10from_start:
 1089|   178k|    pub const fn from_start(start: BytesStart<'a>) -> Self {
 1090|   178k|        Self { content: start }
 1091|   178k|    }

_RNvMNtCsa7QYSr9aLYT_9quick_xml4nameNtB2_5QName5index:
  110|    719|    fn index(&self) -> Option<usize> {
  111|    719|        memchr(b':', self.0)
  112|    719|    }
_RNvXs0_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_5QNameINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refCseR3GpSb7YJr_10sparesults:
  123|    719|    fn as_ref(&self) -> &[u8] {
  124|    719|        self.0
  125|    719|    }
_RNvXs3_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_9LocalNameINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refCseR3GpSb7YJr_10sparesults:
  153|    719|    fn as_ref(&self) -> &[u8] {
  154|    719|        self.0
  155|    719|    }
_RNvXs4_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_9LocalNameINtNtCshZc3FwCJ069_4core7convert4FromNtB5_5QNameE4fromCseR3GpSb7YJr_10sparesults:
  172|    719|    fn from(name: QName<'a>) -> Self {
  173|    719|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
  174|    719|    }
_RNCNvXs4_NtCsa7QYSr9aLYT_9quick_xml4nameNtB7_9LocalNameINtNtCshZc3FwCJ069_4core7convert4FromNtB7_5QNameE4from0CseR3GpSb7YJr_10sparesults:
  173|      6|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
_RNvXs0_NtCsa7QYSr9aLYT_9quick_xml4nameNtB5_5QNameINtNtCshZc3FwCJ069_4core7convert5AsRefShE6as_refB7_:
  123|    719|    fn as_ref(&self) -> &[u8] {
  124|    719|        self.0
  125|    719|    }

_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser4feedCseR3GpSb7YJr_10sparesults:
   57|  2.34k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   58|  7.54k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', bytes) {
   59|  7.54k|            *self = match (*self, bytes[i]) {
   60|       |                // only allowed to match `>` while we are in state `Outside`
   61|  1.05k|                (Self::Outside, b'>') => return Some(i),
   62|  1.73k|                (Self::Outside, b'\'') => Self::SingleQ,
   63|    442|                (Self::Outside, b'\"') => Self::DoubleQ,
   64|       |
   65|       |                // the only end_byte that gets us out if the same character
   66|  1.97k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Outside,
   67|       |
   68|       |                // all other bytes: no state change
   69|  2.33k|                _ => continue,
   70|       |            };
   71|       |        }
   72|  1.29k|        None
   73|  2.34k|    }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser9eof_errorCseR3GpSb7YJr_10sparesults:
   76|  1.29k|    fn eof_error() -> SyntaxError {
   77|  1.29k|        SyntaxError::UnclosedTag
   78|  1.29k|    }

_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser4feedCseR3GpSb7YJr_10sparesults:
   61|   692k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   62|  1.19M|        for i in memchr::memchr_iter(b'>', bytes) {
   63|  1.19M|            match i {
   64|      0|                0 if self.0 => return Some(0),
   65|       |                // If the previous byte is `?`, then we found `?>`
   66|  1.19M|                i if i > 0 && bytes[i - 1] == b'?' => return Some(i),
   67|   510k|                _ => {}
   68|       |            }
   69|       |        }
   70|  5.42k|        self.0 = bytes.last().copied() == Some(b'?');
   71|  5.42k|        None
   72|   692k|    }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser9eof_errorCseR3GpSb7YJr_10sparesults:
   75|  5.42k|    fn eof_error() -> SyntaxError {
   76|  5.42k|        SyntaxError::UnclosedPIOrXmlDecl
   77|  5.42k|    }

_RINvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9read_withNtNtNtB7_6parser2pi8PiParserECseR3GpSb7YJr_10sparesults:
  105|   692k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|   692k|            &mut self,
  107|   692k|            mut parser: P,
  108|   692k|            buf: &'b mut Vec<u8>,
  109|   692k|            position: &mut u64,
  110|   692k|        ) -> Result<&'b [u8]> {
  111|   692k|            let mut read = 0;
  112|   692k|            let start = buf.len();
  113|       |            loop {
  114|   697k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|   697k|                    Ok(n) if n.is_empty() => break,
  116|   692k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|   692k|                if let Some(i) = parser.feed(available) {
  125|   686k|                    buf.extend_from_slice(&available[..i]);
  126|   686k|
  127|   686k|                    // +1 for `>` which we do not include
  128|   686k|                    self $(.$reader)? .consume(i + 1);
  129|   686k|                    read += i as u64 + 1;
  130|   686k|
  131|   686k|                    *position += read;
  132|   686k|                    return Ok(&buf[start..]);
  133|  5.42k|                }
  134|  5.42k|
  135|  5.42k|                // The `>` symbol not yet found, continue reading
  136|  5.42k|                buf.extend_from_slice(available);
  137|  5.42k|
  138|  5.42k|                let used = available.len();
  139|  5.42k|                self $(.$reader)? .consume(used);
  140|  5.42k|                read += used as u64;
  141|       |            }
  142|       |
  143|  5.42k|            *position += read;
  144|  5.42k|            Err(Error::Syntax(P::eof_error()))
  145|   692k|        }
_RINvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9read_withNtNtNtB7_6parser7element13ElementParserECseR3GpSb7YJr_10sparesults:
  105|  2.34k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|  2.34k|            &mut self,
  107|  2.34k|            mut parser: P,
  108|  2.34k|            buf: &'b mut Vec<u8>,
  109|  2.34k|            position: &mut u64,
  110|  2.34k|        ) -> Result<&'b [u8]> {
  111|  2.34k|            let mut read = 0;
  112|  2.34k|            let start = buf.len();
  113|       |            loop {
  114|  3.63k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|  3.63k|                    Ok(n) if n.is_empty() => break,
  116|  2.34k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|  2.34k|                if let Some(i) = parser.feed(available) {
  125|  1.05k|                    buf.extend_from_slice(&available[..i]);
  126|  1.05k|
  127|  1.05k|                    // +1 for `>` which we do not include
  128|  1.05k|                    self $(.$reader)? .consume(i + 1);
  129|  1.05k|                    read += i as u64 + 1;
  130|  1.05k|
  131|  1.05k|                    *position += read;
  132|  1.05k|                    return Ok(&buf[start..]);
  133|  1.29k|                }
  134|  1.29k|
  135|  1.29k|                // The `>` symbol not yet found, continue reading
  136|  1.29k|                buf.extend_from_slice(available);
  137|  1.29k|
  138|  1.29k|                let used = available.len();
  139|  1.29k|                self $(.$reader)? .consume(used);
  140|  1.29k|                read += used as u64;
  141|       |            }
  142|       |
  143|  1.29k|            *position += read;
  144|  1.29k|            Err(Error::Syntax(P::eof_error()))
  145|  2.34k|        }
_RNCNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB6_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE15skip_whitespace0CseR3GpSb7YJr_10sparesults:
  203|  1.08M|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE15remove_utf8_bomCseR3GpSb7YJr_10sparesults:
   19|  18.5k|        $($async)? fn remove_utf8_bom(&mut self) -> io::Result<()> {
   20|       |            use crate::encoding::UTF8_BOM;
   21|       |
   22|       |            loop {
   23|  18.5k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   24|  18.5k|                    Ok(n) => {
   25|  18.5k|                        if n.starts_with(UTF8_BOM) {
   26|    425|                            self $(.$reader)? .consume(UTF8_BOM.len());
   27|  18.1k|                        }
   28|  18.5k|                        Ok(())
   29|       |                    },
   30|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   31|      0|                    Err(e) => Err(e),
   32|       |                };
   33|       |            }
   34|  18.5k|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE15skip_whitespaceCseR3GpSb7YJr_10sparesults:
  199|   745k|        $($async)? fn skip_whitespace(&mut self, position: &mut u64) -> io::Result<()> {
  200|       |            loop {
  201|   882k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  202|   882k|                    Ok(n) => {
  203|   882k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
  204|   882k|                        if count > 0 {
  205|   136k|                            self $(.$reader)? .consume(count);
  206|   136k|                            *position += count as u64;
  207|   136k|                            continue;
  208|       |                        } else {
  209|   745k|                            Ok(())
  210|       |                        }
  211|       |                    }
  212|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  213|      0|                    Err(e) => Err(e),
  214|       |                };
  215|       |            }
  216|   745k|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE17read_bang_elementCseR3GpSb7YJr_10sparesults:
  148|  42.9k|        $($async)? fn read_bang_element $(<$lf>)? (
  149|  42.9k|            &mut self,
  150|  42.9k|            buf: &'b mut Vec<u8>,
  151|  42.9k|            position: &mut u64,
  152|  42.9k|        ) -> Result<(BangType, &'b [u8])> {
  153|  42.9k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  154|  42.9k|            // start with it.
  155|  42.9k|            let start = buf.len();
  156|  42.9k|            let mut read = 1;
  157|  42.9k|            buf.push(b'!');
  158|  42.9k|            self $(.$reader)? .consume(1);
  159|       |
  160|  42.9k|            let mut bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  161|       |
  162|       |            loop {
  163|  44.1k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  164|       |                    // Note: Do not update position, so the error points to
  165|       |                    // somewhere sane rather than at the EOF
  166|  44.1k|                    Ok(n) if n.is_empty() => break,
  167|  42.9k|                    Ok(available) => {
  168|       |                        // We only parse from start because we don't want to consider
  169|       |                        // whatever is in the buffer before the bang element
  170|  42.9k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  171|  41.6k|                            buf.extend_from_slice(consumed);
  172|  41.6k|
  173|  41.6k|                            self $(.$reader)? .consume(used);
  174|  41.6k|                            read += used as u64;
  175|  41.6k|
  176|  41.6k|                            *position += read;
  177|  41.6k|                            return Ok((bang_type, &buf[start..]));
  178|  1.23k|                        } else {
  179|  1.23k|                            buf.extend_from_slice(available);
  180|  1.23k|
  181|  1.23k|                            let used = available.len();
  182|  1.23k|                            self $(.$reader)? .consume(used);
  183|  1.23k|                            read += used as u64;
  184|  1.23k|                        }
  185|       |                    }
  186|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  187|      0|                    Err(e) => {
  188|      0|                        *position += read;
  189|      0|                        return Err(Error::Io(e.into()));
  190|       |                    }
  191|       |                }
  192|       |            }
  193|       |
  194|  1.23k|            *position += read;
  195|  1.23k|            Err(bang_type.to_err())
  196|  42.9k|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE8peek_oneCseR3GpSb7YJr_10sparesults:
  219|   780k|        $($async)? fn peek_one(&mut self) -> io::Result<Option<u8>> {
  220|       |            loop {
  221|   780k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  222|   780k|                    Ok(n) => Ok(n.first().cloned()),
  223|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  224|      0|                    Err(e) => Err(e),
  225|       |                };
  226|       |            }
  227|   780k|        }
_RNvXNtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9read_textCseR3GpSb7YJr_10sparesults:
   54|   745k|        $($async)? fn read_text $(<$lf>)? (
   55|   745k|            &mut self,
   56|   745k|            buf: &'b mut Vec<u8>,
   57|   745k|            position: &mut u64,
   58|   745k|        ) -> ReadTextResult<'b, &'b mut Vec<u8>> {
   59|   745k|            let mut read = 0;
   60|   745k|            let start = buf.len();
   61|       |            loop {
   62|   749k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   63|   749k|                    Ok(n) if n.is_empty() => break,
   64|   743k|                    Ok(n) => n,
   65|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   66|      0|                    Err(e) => {
   67|      0|                        *position += read;
   68|      0|                        return ReadTextResult::Err(e);
   69|       |                    }
   70|       |                };
   71|       |
   72|   743k|                match memchr::memchr(b'<', available) {
   73|       |                    // Special handling is needed only on the first iteration.
   74|       |                    // On next iterations we already read something and should emit Text event
   75|   737k|                    Some(0) if read == 0 => {
   76|   737k|                        self $(.$reader)? .consume(1);
   77|   737k|                        *position += 1;
   78|   737k|                        return ReadTextResult::Markup(buf);
   79|       |                    }
   80|    959|                    Some(i) => {
   81|    959|                        buf.extend_from_slice(&available[..i]);
   82|    959|
   83|    959|                        let used = i + 1;
   84|    959|                        self $(.$reader)? .consume(used);
   85|    959|                        read += used as u64;
   86|    959|
   87|    959|                        *position += read;
   88|    959|                        return ReadTextResult::UpToMarkup(&buf[start..]);
   89|       |                    }
   90|  4.05k|                    None => {
   91|  4.05k|                        buf.extend_from_slice(available);
   92|  4.05k|
   93|  4.05k|                        let used = available.len();
   94|  4.05k|                        self $(.$reader)? .consume(used);
   95|  4.05k|                        read += used as u64;
   96|  4.05k|                    }
   97|       |                }
   98|       |            }
   99|       |
  100|  6.71k|            *position += read;
  101|  6.71k|            ReadTextResult::UpToEof(&buf[start..])
  102|   745k|        }
_RNvMs_NtNtCsa7QYSr9aLYT_9quick_xml6reader15buffered_readerINtB6_6ReaderRShE15read_event_intoCseR3GpSb7YJr_10sparesults:
  293|   745k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  294|   745k|        self.read_event_impl(buf)
  295|   745k|    }

_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType3new:
 1027|  42.9k|    const fn new(byte: Option<u8>) -> Result<Self> {
 1028|  42.9k|        Ok(match byte {
 1029|     96|            Some(b'[') => Self::CData,
 1030|  34.2k|            Some(b'-') => Self::Comment,
 1031|  8.54k|            Some(b'D') | Some(b'd') => Self::DocType(0),
 1032|     36|            _ => return Err(Error::Syntax(SyntaxError::InvalidBangMarkup)),
 1033|       |        })
 1034|  42.9k|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType5parse:
 1043|  42.9k|    fn parse<'b>(&mut self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
 1044|  42.9k|        match self {
 1045|       |            Self::Comment => {
 1046|  62.5k|                for i in memchr::memchr_iter(b'>', chunk) {
 1047|       |                    // Need to read at least 6 symbols (`!---->`) for properly finished comment
 1048|       |                    // <!----> - XML comment
 1049|       |                    //  012345 - i
 1050|  62.5k|                    if buf.len() + i > 4 {
 1051|  35.0k|                        if chunk[..i].ends_with(b"--") {
 1052|       |                            // We cannot strip last `--` from the buffer because we need it in case of
 1053|       |                            // check_comments enabled option. XML standard requires that comment
 1054|       |                            // will not end with `--->` sequence because this is a special case of
 1055|       |                            // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
 1056|  34.0k|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1057|  1.04k|                        }
 1058|  1.04k|                        // End sequence `-|->` was splitted at |
 1059|  1.04k|                        //        buf --/   \-- chunk
 1060|  1.04k|                        if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
 1061|      0|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1062|  1.04k|                        }
 1063|  1.04k|                        // End sequence `--|>` was splitted at |
 1064|  1.04k|                        //         buf --/   \-- chunk
 1065|  1.04k|                        if i == 0 && buf.ends_with(b"--") {
 1066|      0|                            return Some((&[], i + 1)); // +1 for `>`
 1067|  1.04k|                        }
 1068|  27.5k|                    }
 1069|       |                }
 1070|       |            }
 1071|       |            Self::CData => {
 1072|  1.74k|                for i in memchr::memchr_iter(b'>', chunk) {
 1073|  1.74k|                    if chunk[..i].ends_with(b"]]") {
 1074|     13|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1075|  1.73k|                    }
 1076|  1.73k|                    // End sequence `]|]>` was splitted at |
 1077|  1.73k|                    //        buf --/   \-- chunk
 1078|  1.73k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
 1079|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1080|  1.73k|                    }
 1081|  1.73k|                    // End sequence `]]|>` was splitted at |
 1082|  1.73k|                    //         buf --/   \-- chunk
 1083|  1.73k|                    if i == 0 && buf.ends_with(b"]]") {
 1084|      0|                        return Some((&[], i + 1)); // +1 for `>`
 1085|  1.73k|                    }
 1086|       |                }
 1087|       |            }
 1088|  8.54k|            Self::DocType(ref mut balance) => {
 1089|  90.5k|                for i in memchr::memchr2_iter(b'<', b'>', chunk) {
 1090|  90.5k|                    if chunk[i] == b'<' {
 1091|  42.9k|                        *balance += 1;
 1092|  42.9k|                    } else {
 1093|  47.6k|                        if *balance == 0 {
 1094|  7.66k|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1095|  40.0k|                        }
 1096|  40.0k|                        *balance -= 1;
 1097|       |                    }
 1098|       |                }
 1099|       |            }
 1100|       |        }
 1101|  1.23k|        None
 1102|  42.9k|    }
_RINvMs5_NtCsa7QYSr9aLYT_9quick_xml6readerINtB6_6ReaderRShE15read_event_implQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECseR3GpSb7YJr_10sparesults:
  897|   745k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  898|   745k|    where
  899|   745k|        R: XmlSource<'i, B>,
  900|   745k|    {
  901|  1.50M|        read_event_impl!(self, buf, self.reader, read_until_close)
  902|   745k|    }
_RINvMs5_NtCsa7QYSr9aLYT_9quick_xml6readerINtB6_6ReaderRShE16read_until_closeQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECseR3GpSb7YJr_10sparesults:
  906|   737k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  907|   737k|    where
  908|   737k|        R: XmlSource<'i, B>,
  909|   737k|    {
  910|   737k|        read_until_close!(self, buf, self.reader)
  911|   737k|    }
_RNvMNtCsa7QYSr9aLYT_9quick_xml6readerNtB2_6Config9trim_textCseR3GpSb7YJr_10sparesults:
  195|  18.5k|    pub fn trim_text(&mut self, trim: bool) {
  196|  18.5k|        self.trim_text_start = trim;
  197|  18.5k|        self.trim_text_end = trim;
  198|  18.5k|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType6to_errCseR3GpSb7YJr_10sparesults:
 1104|  1.23k|    const fn to_err(&self) -> Error {
 1105|  1.23k|        match self {
 1106|     83|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1107|    269|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1108|    879|            Self::DocType(_) => Error::Syntax(SyntaxError::UnclosedDoctype),
 1109|       |        }
 1110|  1.23k|    }
_RNvXs_NtCsa7QYSr9aLYT_9quick_xml6readerNtB4_6ConfigNtNtCshZc3FwCJ069_4core7default7Default7default:
  211|  18.5k|    fn default() -> Self {
  212|  18.5k|        Self {
  213|  18.5k|            allow_unmatched_ends: false,
  214|  18.5k|            check_comments: false,
  215|  18.5k|            check_end_names: true,
  216|  18.5k|            expand_empty_elements: false,
  217|  18.5k|            trim_markup_names_in_closing_tags: true,
  218|  18.5k|            trim_text_start: false,
  219|  18.5k|            trim_text_end: false,
  220|  18.5k|        }
  221|  18.5k|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6readerINtB5_6ReaderRShE11from_readerB7_:
  697|  18.5k|    pub fn from_reader(reader: R) -> Self {
  698|  18.5k|        Self {
  699|  18.5k|            reader,
  700|  18.5k|            state: ReaderState::default(),
  701|  18.5k|        }
  702|  18.5k|    }
_RNvMs3_NtCsa7QYSr9aLYT_9quick_xml6readerINtB5_6ReaderRShE10config_mutB7_:
  710|  18.5k|    pub fn config_mut(&mut self) -> &mut Config {
  711|  18.5k|        &mut self.state.config
  712|  18.5k|    }
_RNvMs4_NtCsa7QYSr9aLYT_9quick_xml6readerINtB5_6ReaderRShE7decoderB7_:
  827|  18.5k|    pub const fn decoder(&self) -> Decoder {
  828|  18.5k|        self.state.decoder()
  829|  18.5k|    }
_RNvMs6_NtCsa7QYSr9aLYT_9quick_xml6readerNtB5_8BangType6to_errB7_:
 1104|  1.10k|    const fn to_err(&self) -> Error {
 1105|  1.10k|        match self {
 1106|      8|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1107|     14|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1108|  1.07k|            Self::DocType(_) => Error::Syntax(SyntaxError::UnclosedDoctype),
 1109|       |        }
 1110|  1.10k|    }

_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   60|  7.67k|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> BytesText<'b> {
   61|  7.67k|        let mut content = bytes;
   62|  7.67k|
   63|  7.67k|        if self.config.trim_text_end {
   64|  7.67k|            // Skip the ending '<'
   65|  7.67k|            let len = bytes
   66|  7.67k|                .iter()
   67|  7.67k|                .rposition(|&b| !is_whitespace(b))
   68|  7.67k|                .map_or(0, |p| p + 1);
   69|  7.67k|            content = &bytes[..len];
   70|  7.67k|        }
   71|  7.67k|        BytesText::wrap(content, self.decoder())
   72|  7.67k|    }
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState9emit_text0B8_:
   67|  6.10k|                .rposition(|&b| !is_whitespace(b))
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState9emit_texts_0B8_:
   68|  5.01k|                .map_or(0, |p| p + 1);
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   81|  41.6k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   82|  41.6k|        debug_assert_eq!(
   83|      0|            buf.first(),
   84|       |            Some(&b'!'),
   85|      0|            "CDATA, comment or DOCTYPE should start from '!'"
   86|       |        );
   87|       |
   88|  41.6k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|       |        };
   91|       |
   92|  41.6k|        let len = buf.len();
   93|     13|        match bang_type {
   94|  34.0k|            BangType::Comment if buf.starts_with(b"!--") => {
   95|  33.9k|                debug_assert!(buf.ends_with(b"--"));
   96|  33.9k|                if self.config.check_comments {
   97|       |                    // search if '--' not in comments
   98|      0|                    let mut haystack = &buf[3..len - 2];
   99|      0|                    let mut off = 0;
  100|      0|                    while let Some(p) = memchr::memchr(b'-', haystack) {
  101|      0|                        off += p + 1;
  102|      0|                        // if next byte after `-` is also `-`, return an error
  103|      0|                        if buf[3 + off] == b'-' {
  104|       |                            // Explanation of the magic:
  105|       |                            //
  106|       |                            // - `self.offset`` just after `>`,
  107|       |                            // - `buf` contains `!-- con--tent --`
  108|       |                            // - `p` is counted from byte after `<!--`
  109|       |                            //
  110|       |                            // <!-- con--tent -->:
  111|       |                            //  ~~~~~~~~~~~~~~~~ : - buf
  112|       |                            //   : ===========   : - zone of search (possible values of `p`)
  113|       |                            //   : |---p         : - p is counted from | (| is 0)
  114|       |                            //   : :   :         ^ - self.offset
  115|       |                            //   ^ :   :           - self.offset - len
  116|       |                            //     ^   :           - self.offset - len + 2
  117|       |                            //         ^           - self.offset - len + 2 + p
  118|      0|                            self.last_error_offset = self.offset - len as u64 + 2 + p as u64;
  119|      0|                            return Err(Error::IllFormed(IllFormedError::DoubleHyphenInComment));
  120|      0|                        }
  121|      0|                        // Continue search after single `-` (+1 to skip it)
  122|      0|                        haystack = &haystack[p + 1..];
  123|       |                    }
  124|  33.9k|                }
  125|  33.9k|                Ok(Event::Comment(BytesText::wrap(
  126|  33.9k|                    // Cut of `!--` and `--` from start and end
  127|  33.9k|                    &buf[3..len - 2],
  128|  33.9k|                    self.decoder(),
  129|  33.9k|                )))
  130|       |            }
  131|       |            // XML requires uppercase only:
  132|       |            // https://www.w3.org/TR/xml11/#sec-cdata-sect
  133|       |            // Even HTML5 required uppercase only:
  134|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  135|     13|            BangType::CData if buf.starts_with(b"![CDATA[") => {
  136|      5|                debug_assert!(buf.ends_with(b"]]"));
  137|      5|                Ok(Event::CData(BytesCData::wrap(
  138|      5|                    // Cut of `![CDATA[` and `]]` from start and end
  139|      5|                    &buf[8..len - 2],
  140|      5|                    self.decoder(),
  141|      5|                )))
  142|       |            }
  143|       |            // XML requires uppercase only, but we will check that on validation stage:
  144|       |            // https://www.w3.org/TR/xml11/#sec-prolog-dtd
  145|       |            // HTML5 allows mixed case for doctype declarations:
  146|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  147|  7.66k|            BangType::DocType(0) if uncased_starts_with(buf, b"!DOCTYPE") => {
  148|  6.58k|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
  149|  6.54k|                    Some(start) => Ok(Event::DocType(BytesText::wrap(
  150|  6.54k|                        // Cut of `!DOCTYPE` and any number of spaces from start
  151|  6.54k|                        &buf[8 + start..],
  152|  6.54k|                        self.decoder(),
  153|  6.54k|                    ))),
  154|       |                    None => {
  155|       |                        // Because we here, we at least read `<!DOCTYPE>` and offset after `>`.
  156|       |                        // We want report error at place where name is expected - this is just
  157|       |                        // before `>`
  158|     34|                        self.last_error_offset = self.offset - 1;
  159|     34|                        return Err(Error::IllFormed(IllFormedError::MissingDoctypeName));
  160|       |                    }
  161|       |                }
  162|       |            }
  163|       |            _ => {
  164|       |                // <!....>
  165|       |                //  ^^^^^ - `buf` does not contain `<` and `>`, but `self.offset` is after `>`.
  166|       |                // ^------- We report error at that position, so we need to subtract 2 and buf len
  167|  1.10k|                self.last_error_offset = self.offset - len as u64 - 2;
  168|  1.10k|                Err(bang_type.to_err())
  169|       |            }
  170|       |        }
  171|  41.6k|    }
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   88|  7.66k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|  7.66k|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|  7.66k|        };
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState9emit_bangs_0B8_:
  148|  8.81k|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  177|    335|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  178|    335|        debug_assert_eq!(
  179|      0|            buf.first(),
  180|       |            Some(&b'/'),
  181|      0|            "closing tag should start from '/'"
  182|       |        );
  183|       |
  184|       |        // Strip the `/` character. `content` contains data between `</` and `>`
  185|    335|        let content = &buf[1..];
  186|       |        // XML standard permits whitespaces after the markup name in closing tags.
  187|       |        // Let's strip them from the buffer before comparing tag names.
  188|    335|        let name = if self.config.trim_markup_names_in_closing_tags {
  189|    335|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  190|    231|                &content[..pos_end_name + 1]
  191|       |            } else {
  192|    104|                content
  193|       |            }
  194|       |        } else {
  195|      0|            content
  196|       |        };
  197|       |
  198|    335|        let decoder = self.decoder();
  199|    335|
  200|    335|        // Get the index in self.opened_buffer of the name of the last opened tag
  201|    335|        match self.opened_starts.pop() {
  202|      0|            Some(start) => {
  203|      0|                if self.config.check_end_names {
  204|      0|                    let expected = &self.opened_buffer[start..];
  205|      0|                    if name != expected {
  206|      0|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  207|      0|                        // #513: In order to allow error recovery we should drop content of the buffer
  208|      0|                        self.opened_buffer.truncate(start);
  209|      0|
  210|      0|                        // Report error at start of the end tag at `<` character
  211|      0|                        // -2 for `<` and `>`
  212|      0|                        self.last_error_offset = self.offset - buf.len() as u64 - 2;
  213|      0|                        return Err(Error::IllFormed(IllFormedError::MismatchedEndTag {
  214|      0|                            expected,
  215|      0|                            found: decoder.decode(name).unwrap_or_default().into_owned(),
  216|      0|                        }));
  217|      0|                    }
  218|      0|                }
  219|       |
  220|      0|                self.opened_buffer.truncate(start);
  221|       |            }
  222|       |            None => {
  223|    335|                if !self.config.allow_unmatched_ends {
  224|       |                    // Report error at start of the end tag at `<` character
  225|       |                    // -2 for `<` and `>`
  226|    335|                    self.last_error_offset = self.offset - buf.len() as u64 - 2;
  227|    335|                    return Err(Error::IllFormed(IllFormedError::UnmatchedEndTag(
  228|    335|                        decoder.decode(name).unwrap_or_default().into_owned(),
  229|    335|                    )));
  230|      0|                }
  231|       |            }
  232|       |        }
  233|       |
  234|      0|        Ok(Event::End(BytesEnd::wrap(name.into())))
  235|    335|    }
_RNCNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  189|  11.9k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  241|   686k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  242|   686k|        debug_assert!(buf.len() > 0);
  243|   686k|        debug_assert_eq!(buf[0], b'?');
  244|       |
  245|   686k|        let len = buf.len();
  246|   686k|        // We accept at least <??>
  247|   686k|        //                     ~~ - len = 2
  248|   686k|        if len > 1 && buf[len - 1] == b'?' {
  249|       |            // Cut of `?` and `?` from start and end
  250|   686k|            let content = &buf[1..len - 1];
  251|   686k|            let len = content.len();
  252|   686k|
  253|   686k|            if content.starts_with(b"xml") && (len == 3 || is_whitespace(content[3])) {
  254|   178k|                let event = BytesDecl::from_start(BytesStart::wrap(content, 3));
  255|   178k|
  256|   178k|                // Try getting encoding from the declaration event
  257|   178k|                #[cfg(feature = "encoding")]
  258|   178k|                if self.encoding.can_be_refined() {
  259|   178k|                    if let Some(encoding) = event.encoder() {
  260|   178k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  261|   178k|                    }
  262|   178k|                }
  263|   178k|
  264|   178k|                Ok(Event::Decl(event))
  265|       |            } else {
  266|   508k|                Ok(Event::PI(BytesPI::wrap(content, name_len(content))))
  267|       |            }
  268|       |        } else {
  269|       |            // <?....EOF
  270|       |            //  ^^^^^ - `buf` does not contains `<`, but we want to report error at `<`,
  271|       |            //          so we move offset to it (-2 for `<` and `>`)
  272|    403|            self.last_error_offset = self.offset - len as u64 - 2;
  273|    403|            Err(Error::Syntax(SyntaxError::UnclosedPIOrXmlDecl))
  274|       |        }
  275|   686k|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  281|    719|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Event<'b> {
  282|    719|        if let Some(content) = content.strip_suffix(b"/") {
  283|       |            // This is self-closed tag `<something/>`
  284|     39|            let event = BytesStart::wrap(content, name_len(content));
  285|     39|
  286|     39|            if self.config.expand_empty_elements {
  287|     39|                self.state = ParseState::InsideEmpty;
  288|     39|                self.opened_starts.push(self.opened_buffer.len());
  289|     39|                self.opened_buffer.extend(event.name().as_ref());
  290|     39|                Event::Start(event)
  291|       |            } else {
  292|      0|                Event::Empty(event)
  293|       |            }
  294|       |        } else {
  295|    680|            let event = BytesStart::wrap(content, name_len(content));
  296|    680|
  297|    680|            // #514: Always store names event when .check_end_names == false,
  298|    680|            // because checks can be temporary disabled and when they would be
  299|    680|            // enabled, we should have that information
  300|    680|            self.opened_starts.push(self.opened_buffer.len());
  301|    680|            self.opened_buffer.extend(event.name().as_ref());
  302|    680|            Event::Start(event)
  303|       |        }
  304|    719|    }
_RNvMNtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  324|  67.0k|    pub const fn decoder(&self) -> Decoder {
  325|  67.0k|        Decoder {
  326|  67.0k|            #[cfg(feature = "encoding")]
  327|  67.0k|            encoding: self.encoding.encoding(),
  328|  67.0k|        }
  329|  67.0k|    }
_RNvXs_NtNtCsa7QYSr9aLYT_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCshZc3FwCJ069_4core7default7Default7default:
  333|  18.5k|    fn default() -> Self {
  334|  18.5k|        Self {
  335|  18.5k|            offset: 0,
  336|  18.5k|            last_error_offset: 0,
  337|  18.5k|            state: ParseState::Init,
  338|  18.5k|            config: Config::default(),
  339|  18.5k|            opened_buffer: Vec::new(),
  340|  18.5k|            opened_starts: Vec::new(),
  341|  18.5k|
  342|  18.5k|            #[cfg(feature = "encoding")]
  343|  18.5k|            encoding: EncodingRef::Implicit(UTF_8),
  344|  18.5k|        }
  345|  18.5k|    }

_RNvNtCsa7QYSr9aLYT_9quick_xml5utils13is_whitespaceCseR3GpSb7YJr_10sparesults:
  278|  1.08M|pub const fn is_whitespace(b: u8) -> bool {
  279|  1.08M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  280|  1.08M|}
_RNvNtCsa7QYSr9aLYT_9quick_xml5utils13is_whitespaceB3_:
  278|  4.13M|pub const fn is_whitespace(b: u8) -> bool {
  279|  4.13M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  280|  4.13M|}
_RNvNtCsa7QYSr9aLYT_9quick_xml5utils8name_lenB3_:
  287|   508k|pub const fn name_len(mut bytes: &[u8]) -> usize {
  288|   508k|    // Note: A pattern matching based approach (instead of indexing) allows
  289|   508k|    // making the function const.
  290|   508k|    let mut len = 0;
  291|  3.92M|    while let [first, rest @ ..] = bytes {
  292|  3.73M|        if is_whitespace(*first) {
  293|   324k|            break;
  294|  3.41M|        }
  295|  3.41M|        len += 1;
  296|  3.41M|        bytes = rest;
  297|       |    }
  298|   508k|    len
  299|   508k|}

_RNvNtCsiLMV5Kw4euE_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  18.5k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  18.5k|    let Ok(reader) = QueryResultsParser::from_format(format).for_slice(data) else {
    8|  18.5k|        return;
    9|       |    };
   10|      0|    match reader {
   11|      0|        SliceQueryResultsParserOutput::Solutions(solutions) => {
   12|      0|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|      0|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|      0|            let mut serializer = QueryResultsSerializer::from_format(format)
   18|      0|                .serialize_solutions_to_writer(
   19|      0|                    Vec::new(),
   20|      0|                    solutions
   21|      0|                        .first()
   22|      0|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|      0|                )
   24|      0|                .unwrap();
   25|      0|            for solution in &solutions {
   26|      0|                serializer.serialize(solution).unwrap();
   27|      0|            }
   28|      0|            let serialized = serializer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|      0|            if let SliceQueryResultsParserOutput::Solutions(roundtrip_solutions) =
   32|      0|                QueryResultsParser::from_format(format)
   33|      0|                    .for_slice(&serialized)
   34|      0|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|      0|                    .unwrap()
   36|       |            {
   37|      0|                assert_eq!(
   38|      0|                    roundtrip_solutions
   39|      0|                        .collect::<Result<Vec<_>, _>>()
   40|      0|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|      0|                        .unwrap(),
   42|      0|                    solutions
   43|      0|                )
   44|      0|            }
   45|       |        }
   46|      0|        SliceQueryResultsParserOutput::Boolean(value) => {
   47|      0|            // We try to write again
   48|      0|            let mut serialized = Vec::new();
   49|      0|            QueryResultsSerializer::from_format(format)
   50|      0|                .serialize_boolean_to_writer(&mut serialized, value)
   51|      0|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      0|            if let SliceQueryResultsParserOutput::Boolean(roundtrip_value) =
   55|      0|                QueryResultsParser::from_format(format)
   56|      0|                    .for_slice(&serialized)
   57|      0|                    .unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  18.5k|}

_RINvMs2_NtCseR3GpSb7YJr_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
   86|  3.80k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|  3.80k|        Self(SyntaxErrorKind::Msg {
   88|  3.80k|            msg: msg.into(),
   89|  3.80k|            location: None,
   90|  3.80k|        })
   91|  3.80k|    }
_RINvMs2_NtCseR3GpSb7YJr_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   86|  2.65k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|  2.65k|        Self(SyntaxErrorKind::Msg {
   88|  2.65k|            msg: msg.into(),
   89|  2.65k|            location: None,
   90|  2.65k|        })
   91|  2.65k|    }
_RNvXs0_NtCseR3GpSb7YJr_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtCsa7QYSr9aLYT_9quick_xml6errors5ErrorE4fromB7_:
   42|  12.0k|    fn from(error: quick_xml::Error) -> Self {
   43|  12.0k|        match error {
   44|      0|            quick_xml::Error::Io(error) => {
   45|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   46|       |            }
   47|  12.0k|            _ => Self::Syntax(QueryResultsSyntaxError(SyntaxErrorKind::Xml(error))),
   48|       |        }
   49|  12.0k|    }

_RNvMNtCseR3GpSb7YJr_10sparesults6parserNtB2_18QueryResultsParser11from_formatCsiLMV5Kw4euE_13oxigraph_fuzz:
   65|  18.5k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  18.5k|        Self { format }
   67|  18.5k|    }
_RNvMNtCseR3GpSb7YJr_10sparesults6parserNtB2_18QueryResultsParser9for_slice:
  234|  18.5k|    pub fn for_slice(
  235|  18.5k|        self,
  236|  18.5k|        slice: &[u8],
  237|  18.5k|    ) -> Result<SliceQueryResultsParserOutput<'_>, QueryResultsSyntaxError> {
  238|  18.5k|        Ok(match self.format {
  239|  18.5k|            QueryResultsFormat::Xml => match SliceXmlQueryResultsParserOutput::read(slice)? {
  240|      0|                SliceXmlQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  241|       |                SliceXmlQueryResultsParserOutput::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: SliceSolutionsParserKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match SliceJsonQueryResultsParserOutput::read(slice)? {
  250|      0|                SliceJsonQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  251|       |                SliceJsonQueryResultsParserOutput::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: SliceSolutionsParserKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|      0|            QueryResultsFormat::Tsv => match SliceTsvQueryResultsParserOutput::read(slice)? {
  261|      0|                SliceTsvQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  262|       |                SliceTsvQueryResultsParserOutput::Solutions {
  263|      0|                    solutions,
  264|      0|                    variables,
  265|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  266|      0|                    variables: variables.into(),
  267|      0|                    solutions: SliceSolutionsParserKind::Tsv(solutions),
  268|      0|                }),
  269|       |            },
  270|       |        })
  271|  18.5k|    }

_RNvMs2_NtCseR3GpSb7YJr_10sparesults3xmlNtB5_32SliceXmlQueryResultsParserOutput4read:
  363|  18.5k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  364|  18.5k|        Self::do_read(slice).map_err(|e| match e {
  365|       |            QueryResultsParseError::Syntax(e) => e,
  366|       |            QueryResultsParseError::Io(e) => {
  367|       |                unreachable!("I/O error are not possible for slice but found {e}")
  368|       |            }
  369|  18.5k|        })
  370|  18.5k|    }
_RNvMs2_NtCseR3GpSb7YJr_10sparesults3xmlNtB5_32SliceXmlQueryResultsParserOutput7do_read:
  372|  18.5k|    fn do_read(slice: &'a [u8]) -> Result<Self, QueryResultsParseError> {
  373|  18.5k|        let mut reader = Reader::from_reader(slice);
  374|  18.5k|        XmlInnerQueryResultsParser::set_options(reader.config_mut());
  375|  18.5k|        let mut reader_buffer = Vec::new();
  376|  18.5k|        let mut inner = XmlInnerQueryResultsParser {
  377|  18.5k|            state: ResultsState::Start,
  378|  18.5k|            variables: Vec::new(),
  379|  18.5k|            decoder: reader.decoder(),
  380|  18.5k|        };
  381|       |        loop {
  382|   745k|            reader_buffer.clear();
  383|   745k|            let event = reader.read_event_into(&mut reader_buffer)?;
  384|   735k|            if let Some(result) = inner.read_event(event)? {
  385|      0|                return Ok(match result {
  386|       |                    XmlInnerQueryResults::Solutions {
  387|      0|                        variables,
  388|      0|                        solutions,
  389|      0|                    } => Self::Solutions {
  390|      0|                        variables,
  391|      0|                        solutions: SliceXmlSolutionsParser {
  392|      0|                            reader,
  393|      0|                            inner: solutions,
  394|      0|                            reader_buffer,
  395|      0|                        },
  396|      0|                    },
  397|      0|                    XmlInnerQueryResults::Boolean(value) => Self::Boolean(value),
  398|       |                });
  399|   727k|            }
  400|       |        }
  401|  18.5k|    }
_RNvMs4_NtCseR3GpSb7YJr_10sparesults3xmlNtB5_26XmlInnerQueryResultsParser11set_options:
  458|  18.5k|    fn set_options(config: &mut Config) {
  459|  18.5k|        config.trim_text(true);
  460|  18.5k|        config.expand_empty_elements = true;
  461|  18.5k|    }
_RNvMs4_NtCseR3GpSb7YJr_10sparesults3xmlNtB5_26XmlInnerQueryResultsParser10read_event:
  463|   735k|    pub fn read_event(
  464|   735k|        &mut self,
  465|   735k|        event: Event<'_>,
  466|   735k|    ) -> Result<Option<XmlInnerQueryResults>, QueryResultsParseError> {
  467|   735k|        match event {
  468|    719|            Event::Start(event) => match self.state {
  469|       |                ResultsState::Start => {
  470|    719|                    if event.local_name().as_ref() == b"sparql" {
  471|      0|                        self.state = ResultsState::Sparql;
  472|      0|                        Ok(None)
  473|       |                    } else {
  474|    719|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <sparql> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  475|       |                    }
  476|       |                }
  477|       |                ResultsState::Sparql => {
  478|      0|                    if event.local_name().as_ref() == b"head" {
  479|      0|                        self.state = ResultsState::Head;
  480|      0|                        Ok(None)
  481|       |                    } else {
  482|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <head> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  483|       |                    }
  484|       |                }
  485|       |                ResultsState::Head => {
  486|      0|                    if event.local_name().as_ref() == b"variable" {
  487|      0|                        let name = event.attributes()
  488|      0|                            .filter_map(Result::ok)
  489|      0|                            .find(|attr| attr.key.local_name().as_ref() == b"name")
  490|      0|                            .ok_or_else(|| QueryResultsSyntaxError::msg("No name attribute found for the <variable> tag"))?;
  491|      0|                        let name = unescape(&self.decoder.decode(&name.value)?)?.into_owned();
  492|      0|                        let variable = Variable::new(name).map_err(|e| QueryResultsSyntaxError::msg(format!("Invalid variable name: {e}")))?;
  493|      0|                        if self.variables.contains(&variable) {
  494|      0|                            return Err(QueryResultsSyntaxError::msg(format!(
  495|      0|                                "The variable {variable} is declared twice"
  496|      0|                            ))
  497|      0|                                .into());
  498|      0|                        }
  499|      0|                        self.variables.push(variable);
  500|      0|                        Ok(None)
  501|      0|                    } else if event.local_name().as_ref() == b"link" {
  502|       |                        // no op
  503|      0|                        Ok(None)
  504|       |                    } else {
  505|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <variable> or <link> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  506|       |                    }
  507|       |                }
  508|       |                ResultsState::AfterHead => {
  509|      0|                    if event.local_name().as_ref() == b"boolean" {
  510|      0|                        self.state = ResultsState::Boolean;
  511|      0|                        Ok(None)
  512|      0|                    } else if event.local_name().as_ref() == b"results" {
  513|      0|                        let mut mapping = BTreeMap::default();
  514|      0|                        for (i, var) in self.variables.iter().enumerate() {
  515|      0|                            mapping.insert(var.clone().into_string(), i);
  516|      0|                        }
  517|      0|                        Ok(Some(XmlInnerQueryResults::Solutions {
  518|      0|                            variables: take(&mut self.variables),
  519|      0|                            solutions: XmlInnerSolutionsParser {
  520|      0|                                decoder: self.decoder,
  521|      0|                                mapping,
  522|      0|                                state_stack: vec![State::Start, State::Start],
  523|      0|                                new_bindings: Vec::new(),
  524|      0|                                current_var: None,
  525|      0|                                term: None,
  526|      0|                                lang: None,
  527|      0|                                datatype: None,
  528|      0|                                subject_stack: Vec::new(),
  529|      0|                                predicate_stack: Vec::new(),
  530|      0|                                object_stack: Vec::new(),
  531|      0|                            },
  532|      0|                        }))
  533|      0|                    } else if event.local_name().as_ref() != b"link" && event.local_name().as_ref() != b"results" && event.local_name().as_ref() != b"boolean" {
  534|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting sparql tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  535|       |                    } else {
  536|      0|                        Ok(None)
  537|       |                    }
  538|       |                }
  539|      0|                ResultsState::Boolean => Err(QueryResultsSyntaxError::msg(format!("Unexpected tag inside of <boolean> tag: <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  540|       |            },
  541|  5.01k|            Event::Text(event) => {
  542|  5.01k|                let value = event.unescape()?;
  543|  3.38k|                match self.state {
  544|       |                    ResultsState::Boolean => {
  545|      0|                        if value == "true" {
  546|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(true)))
  547|      0|                        } else if value == "false" {
  548|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(false)))
  549|       |                        } else {
  550|      0|                            Err(QueryResultsSyntaxError::msg(format!("Unexpected boolean value. Found '{value}'")).into())
  551|       |                        }
  552|       |                    }
  553|  3.38k|                    _ => Err(QueryResultsSyntaxError::msg(format!("Unexpected textual value found: '{value}'")).into())
  554|       |                }
  555|       |            }
  556|      0|            Event::End(event) => {
  557|      0|                if let ResultsState::Head = self.state {
  558|      0|                    if event.local_name().as_ref() == b"head" {
  559|      0|                        self.state = ResultsState::AfterHead
  560|      0|                    }
  561|      0|                    Ok(None)
  562|       |                } else {
  563|      0|                    Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into())
  564|       |                }
  565|       |            }
  566|  2.65k|            Event::Eof => Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into()),
  567|       |            Event::Comment(_) | Event::Decl(_) | Event::PI(_) | Event::DocType(_) => {
  568|   727k|                Ok(None)
  569|       |            }
  570|      0|            Event::Empty(_) => unreachable!("Empty events are expended"),
  571|       |            Event::CData(_) => {
  572|      5|                Err(QueryResultsSyntaxError::msg(
  573|      5|                    "<![CDATA[...]]> are not supported in SPARQL XML results",
  574|      5|                )
  575|      5|                    .into())
  576|       |            }
  577|       |        }
  578|   735k|    }
_RNCNvMs2_NtCseR3GpSb7YJr_10sparesults3xmlNtB7_32SliceXmlQueryResultsParserOutput4read0B9_:
  364|  18.5k|        Self::do_read(slice).map_err(|e| match e {
  365|  18.5k|            QueryResultsParseError::Syntax(e) => e,
  366|      0|            QueryResultsParseError::Io(e) => {
  367|      0|                unreachable!("I/O error are not possible for slice but found {e}")
  368|       |            }
  369|  18.5k|        })


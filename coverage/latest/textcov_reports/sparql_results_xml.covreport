_RNvNvCsd5HDRwKhqN6_18sparql_results_xml1__19___libfuzzer_sys_run:
  241|    789|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|    789|                $body
  243|    789|            }
rust_fuzzer_test_input:
  209|    789|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|    789|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    789|                }
  223|    789|
  224|    789|                __libfuzzer_sys_run(bytes);
  225|    789|                0
  226|    789|            }
LLVMFuzzerTestOneInput:
   58|    789|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    789|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    789|    });
   63|    789|
   64|    789|    match test_input {
   65|    789|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    789|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs697sg40YU7P_13libfuzzer_sys15test_input_wrap0B3_:
   59|    789|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    789|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    789|        rust_fuzzer_test_input(data_slice)
   62|    789|    });

_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsiGVLZ8KQ4TB_13oxigraph_fuzz:
 1125|  1.06k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.06k|    haystack: &[u8],
 1127|  1.06k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.06k|) -> Option<usize> {
 1129|  1.06k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.06k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.06k|    // a &[u8].
 1132|  1.06k|    let start = haystack.as_ptr();
 1133|  1.06k|    let end = start.add(haystack.len());
 1134|  1.06k|    let found = find_raw(start, end)?;
 1135|    613|    Some(found.distance(start))
 1136|  1.06k|}
_RINvMs3_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0ECsiGVLZ8KQ4TB_13oxigraph_fuzz:
 1044|  2.04k|    pub(crate) unsafe fn next(
 1045|  2.04k|        &mut self,
 1046|  2.04k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  2.04k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  2.04k|        let found = find_raw(self.start, self.end)?;
 1057|  1.95k|        let result = found.distance(self.original_start);
 1058|  1.95k|        self.start = found.add(1);
 1059|  1.95k|        Some(result)
 1060|  2.04k|    }
_RINvMs3_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0ECsiGVLZ8KQ4TB_13oxigraph_fuzz:
 1044|  7.46k|    pub(crate) unsafe fn next(
 1045|  7.46k|        &mut self,
 1046|  7.46k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  7.46k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  7.46k|        let found = find_raw(self.start, self.end)?;
 1057|  7.33k|        let result = found.distance(self.original_start);
 1058|  7.33k|        self.start = found.add(1);
 1059|  7.33k|        Some(result)
 1060|  7.46k|    }
_RNvMs3_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  6.69k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  6.69k|        Iter {
 1029|  6.69k|            original_start: haystack.as_ptr(),
 1030|  6.69k|            start: haystack.as_ptr(),
 1031|  6.69k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  6.69k|            haystack: core::marker::PhantomData,
 1033|  6.69k|        }
 1034|  6.69k|    }
_RINvMs3_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0ECsdrNTUVBLTNP_9quick_xml:
 1044|  1.13M|    pub(crate) unsafe fn next(
 1045|  1.13M|        &mut self,
 1046|  1.13M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.13M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.13M|        let found = find_raw(self.start, self.end)?;
 1057|  1.13M|        let result = found.distance(self.original_start);
 1058|  1.13M|        self.start = found.add(1);
 1059|  1.13M|        Some(result)
 1060|  1.13M|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle1B8_:
  117|  3.57k|    pub(crate) fn needle1(&self) -> u8 {
  118|  3.57k|        self.s1
  119|  3.57k|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle3Bb_:
  739|    295|    pub(crate) fn needle3(&self) -> u8 {
  740|    295|        self.s3
  741|    295|    }
_RINvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  7.17k|    unsafe fn search_chunk(
  417|  7.17k|        &self,
  418|  7.17k|        cur: *const u8,
  419|  7.17k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  7.17k|    ) -> Option<*const u8> {
  421|  7.17k|        let chunk = V::load_unaligned(cur);
  422|  7.17k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  7.17k|        if mask.has_non_zero() {
  424|  5.86k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  1.31k|            None
  427|       |        }
  428|  7.17k|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE8find_rawB8_:
  143|    595|    pub(crate) unsafe fn find_raw(
  144|    595|        &self,
  145|    595|        start: *const u8,
  146|    595|        end: *const u8,
  147|    595|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|    595|        let topos = V::Mask::first_offset;
  155|    595|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|    595|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    492|            return Some(cur);
  167|    103|        }
  168|    103|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|    103|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|    103|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|    103|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|    114|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|     19|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|      8|                return Some(cur);
  216|     11|            }
  217|     11|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|     95|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|     73|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|     73|            return self.search_chunk(cur, topos);
  228|     22|        }
  229|     22|        None
  230|    595|    }
_RINvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  24.0k|    unsafe fn search_chunk(
  671|  24.0k|        &self,
  672|  24.0k|        cur: *const u8,
  673|  24.0k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  24.0k|    ) -> Option<*const u8> {
  675|  24.0k|        let chunk = V::load_unaligned(cur);
  676|  24.0k|        let eq1 = self.v1.cmpeq(chunk);
  677|  24.0k|        let eq2 = self.v2.cmpeq(chunk);
  678|  24.0k|        let mask = eq1.or(eq2).movemask();
  679|  24.0k|        if mask.has_non_zero() {
  680|  21.4k|            let mask1 = eq1.movemask();
  681|  21.4k|            let mask2 = eq2.movemask();
  682|  21.4k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  2.55k|            None
  685|       |        }
  686|  24.0k|    }
_RINvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  1.08M|    unsafe fn search_chunk(
  671|  1.08M|        &self,
  672|  1.08M|        cur: *const u8,
  673|  1.08M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  1.08M|    ) -> Option<*const u8> {
  675|  1.08M|        let chunk = V::load_unaligned(cur);
  676|  1.08M|        let eq1 = self.v1.cmpeq(chunk);
  677|  1.08M|        let eq2 = self.v2.cmpeq(chunk);
  678|  1.08M|        let mask = eq1.or(eq2).movemask();
  679|  1.08M|        if mask.has_non_zero() {
  680|  1.06M|            let mask1 = eq1.movemask();
  681|  1.06M|            let mask2 = eq2.movemask();
  682|  1.06M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  18.2k|            None
  685|       |        }
  686|  1.08M|    }
_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|    410|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|    410|    start: *const u8,
 1150|    410|    end: *const u8,
 1151|    410|    confirm: F,
 1152|    410|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|    410|    let mut ptr = start;
 1155|    547|    while ptr < end {
 1156|    512|        if confirm(*ptr) {
 1157|    375|            return Some(ptr);
 1158|    137|        }
 1159|    137|        ptr = ptr.offset(1);
 1160|       |    }
 1161|     35|    None
 1162|    410|}
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  48.2k|    pub(crate) fn needle1(&self) -> u8 {
  462|  48.2k|        self.s1
  463|  48.2k|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE8find_rawBb_:
  765|    236|    pub(crate) unsafe fn find_raw(
  766|    236|        &self,
  767|    236|        start: *const u8,
  768|    236|        end: *const u8,
  769|    236|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|    236|        let topos = V::Mask::first_offset;
  777|    236|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|    236|        if let Some(cur) = self.search_chunk(start, topos) {
  788|    221|            return Some(cur);
  789|     15|        }
  790|     15|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|     15|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|     15|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|     15|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|     25|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     14|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      4|                return Some(cur);
  836|     10|            }
  837|     10|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|     11|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|      6|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|      6|            return self.search_chunk(cur, topos);
  848|      5|        }
  849|      5|        None
  850|    236|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle1Bb_:
  727|    512|    pub(crate) fn needle1(&self) -> u8 {
  728|    512|        self.s1
  729|    512|    }
_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  1.16k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.16k|    start: *const u8,
 1150|  1.16k|    end: *const u8,
 1151|  1.16k|    confirm: F,
 1152|  1.16k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  1.16k|    let mut ptr = start;
 1155|  3.85k|    while ptr < end {
 1156|  3.57k|        if confirm(*ptr) {
 1157|    888|            return Some(ptr);
 1158|  2.69k|        }
 1159|  2.69k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|    273|    None
 1162|  1.16k|}
_RINvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|    687|    unsafe fn search_chunk(
  417|    687|        &self,
  418|    687|        cur: *const u8,
  419|    687|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|    687|    ) -> Option<*const u8> {
  421|    687|        let chunk = V::load_unaligned(cur);
  422|    687|        let mask = self.v1.cmpeq(chunk).movemask();
  423|    687|        if mask.has_non_zero() {
  424|    525|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|    162|            None
  427|       |        }
  428|    687|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  1.36k|    pub(crate) unsafe fn find_raw(
  766|  1.36k|        &self,
  767|  1.36k|        start: *const u8,
  768|  1.36k|        end: *const u8,
  769|  1.36k|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  1.36k|        let topos = V::Mask::first_offset;
  777|  1.36k|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  1.36k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  1.17k|            return Some(cur);
  789|    198|        }
  790|    198|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    198|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    198|        if len >= Self::LOOP_SIZE {
  794|    288|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|    273|                let a = V::load_aligned(cur);
  798|    273|                let b = V::load_aligned(cur.add(V::BYTES));
  799|    273|                let eqa1 = self.v1.cmpeq(a);
  800|    273|                let eqb1 = self.v1.cmpeq(b);
  801|    273|                let eqa2 = self.v2.cmpeq(a);
  802|    273|                let eqb2 = self.v2.cmpeq(b);
  803|    273|                let eqa3 = self.v3.cmpeq(a);
  804|    273|                let eqb3 = self.v3.cmpeq(b);
  805|    273|                let or1 = eqa1.or(eqb1);
  806|    273|                let or2 = eqa2.or(eqb2);
  807|    273|                let or3 = eqa3.or(eqb3);
  808|    273|                let or4 = or1.or(or2);
  809|    273|                let or5 = or3.or(or4);
  810|    273|                if or5.movemask_will_have_non_zero() {
  811|    175|                    let mask = eqa1
  812|    175|                        .movemask()
  813|    175|                        .or(eqa2.movemask())
  814|    175|                        .or(eqa3.movemask());
  815|    175|                    if mask.has_non_zero() {
  816|     89|                        return Some(cur.add(topos(mask)));
  817|     86|                    }
  818|     86|
  819|     86|                    let mask = eqb1
  820|     86|                        .movemask()
  821|     86|                        .or(eqb2.movemask())
  822|     86|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|     86|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|     98|                }
  826|     98|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|      8|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|     27|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|      8|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      4|                return Some(cur);
  836|      4|            }
  837|      4|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|     19|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|     15|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|     15|            return self.search_chunk(cur, topos);
  848|      4|        }
  849|      4|        None
  850|  1.36k|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE3newB8_:
  111|  8.52k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  8.52k|        One { s1: needle, v1: V::splat(needle) }
  113|  8.52k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  41.1k|    pub(crate) fn needle2(&self) -> u8 {
  468|  41.1k|        self.s2
  469|  41.1k|    }
_RINvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|    256|    unsafe fn search_chunk(
  963|    256|        &self,
  964|    256|        cur: *const u8,
  965|    256|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|    256|    ) -> Option<*const u8> {
  967|    256|        let chunk = V::load_unaligned(cur);
  968|    256|        let eq1 = self.v1.cmpeq(chunk);
  969|    256|        let eq2 = self.v2.cmpeq(chunk);
  970|    256|        let eq3 = self.v3.cmpeq(chunk);
  971|    256|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|    256|        if mask.has_non_zero() {
  973|    225|            let mask1 = eq1.movemask();
  974|    225|            let mask2 = eq2.movemask();
  975|    225|            let mask3 = eq3.movemask();
  976|    225|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|     31|            None
  979|       |        }
  980|    256|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE3newB8_:
  111|  8.52k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  8.52k|        One { s1: needle, v1: V::splat(needle) }
  113|  8.52k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  1.07M|    pub(crate) unsafe fn find_raw(
  494|  1.07M|        &self,
  495|  1.07M|        start: *const u8,
  496|  1.07M|        end: *const u8,
  497|  1.07M|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  1.07M|        let topos = V::Mask::first_offset;
  505|  1.07M|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  1.07M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  1.06M|            return Some(cur);
  517|  17.4k|        }
  518|  17.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  17.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  17.4k|        if len >= Self::LOOP_SIZE {
  522|  17.5k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  16.7k|                let a = V::load_aligned(cur);
  526|  16.7k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  16.7k|                let eqa1 = self.v1.cmpeq(a);
  528|  16.7k|                let eqb1 = self.v1.cmpeq(b);
  529|  16.7k|                let eqa2 = self.v2.cmpeq(a);
  530|  16.7k|                let eqb2 = self.v2.cmpeq(b);
  531|  16.7k|                let or1 = eqa1.or(eqb1);
  532|  16.7k|                let or2 = eqa2.or(eqb2);
  533|  16.7k|                let or3 = or1.or(or2);
  534|  16.7k|                if or3.movemask_will_have_non_zero() {
  535|  15.6k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  15.6k|                    if mask.has_non_zero() {
  537|  10.4k|                        return Some(cur.add(topos(mask)));
  538|  5.27k|                    }
  539|  5.27k|
  540|  5.27k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  5.27k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  1.08k|                }
  544|  1.08k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.00k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  2.31k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  1.21k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    687|                return Some(cur);
  554|    529|            }
  555|    529|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.09k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.08k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.08k|            return self.search_chunk(cur, topos);
  566|     14|        }
  567|     14|        None
  568|  1.07M|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE3newBb_:
  710|  2.04k|    pub(crate) unsafe fn new(
  711|  2.04k|        needle1: u8,
  712|  2.04k|        needle2: u8,
  713|  2.04k|        needle3: u8,
  714|  2.04k|    ) -> Three<V> {
  715|  2.04k|        Three {
  716|  2.04k|            s1: needle1,
  717|  2.04k|            s2: needle2,
  718|  2.04k|            s3: needle3,
  719|  2.04k|            v1: V::splat(needle1),
  720|  2.04k|            v2: V::splat(needle2),
  721|  2.04k|            v3: V::splat(needle3),
  722|  2.04k|        }
  723|  2.04k|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE7needle2Bb_:
  733|    441|    pub(crate) fn needle2(&self) -> u8 {
  734|    441|        self.s2
  735|    441|    }
_RINvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  1.39k|    unsafe fn search_chunk(
  963|  1.39k|        &self,
  964|  1.39k|        cur: *const u8,
  965|  1.39k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  1.39k|    ) -> Option<*const u8> {
  967|  1.39k|        let chunk = V::load_unaligned(cur);
  968|  1.39k|        let eq1 = self.v1.cmpeq(chunk);
  969|  1.39k|        let eq2 = self.v2.cmpeq(chunk);
  970|  1.39k|        let eq3 = self.v3.cmpeq(chunk);
  971|  1.39k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  1.39k|        if mask.has_non_zero() {
  973|  1.17k|            let mask1 = eq1.movemask();
  974|  1.17k|            let mask2 = eq2.movemask();
  975|  1.17k|            let mask3 = eq3.movemask();
  976|  1.17k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    215|            None
  979|       |        }
  980|  1.39k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  21.9k|    pub(crate) unsafe fn find_raw(
  494|  21.9k|        &self,
  495|  21.9k|        start: *const u8,
  496|  21.9k|        end: *const u8,
  497|  21.9k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  21.9k|        let topos = V::Mask::first_offset;
  505|  21.9k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  21.9k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  20.3k|            return Some(cur);
  517|  1.59k|        }
  518|  1.59k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.59k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.59k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.59k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  2.12k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|    984|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    457|                return Some(cur);
  554|    527|            }
  555|    527|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  1.13k|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  1.07k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  1.07k|            return self.search_chunk(cur, topos);
  566|     62|        }
  567|     62|        None
  568|  21.9k|    }
_RNvMs0_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE3newBb_:
  710|  2.04k|    pub(crate) unsafe fn new(
  711|  2.04k|        needle1: u8,
  712|  2.04k|        needle2: u8,
  713|  2.04k|        needle3: u8,
  714|  2.04k|    ) -> Three<V> {
  715|  2.04k|        Three {
  716|  2.04k|            s1: needle1,
  717|  2.04k|            s2: needle2,
  718|  2.04k|            s3: needle3,
  719|  2.04k|            v1: V::splat(needle1),
  720|  2.04k|            v2: V::splat(needle2),
  721|  2.04k|            v3: V::splat(needle3),
  722|  2.04k|        }
  723|  2.04k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE3newBa_:
  450|  1.13M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.13M|        Two {
  452|  1.13M|            s1: needle1,
  453|  1.13M|            s2: needle2,
  454|  1.13M|            v1: V::splat(needle1),
  455|  1.13M|            v2: V::splat(needle2),
  456|  1.13M|        }
  457|  1.13M|    }
_RNvMNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  6.69k|    pub(crate) unsafe fn find_raw(
  144|  6.69k|        &self,
  145|  6.69k|        start: *const u8,
  146|  6.69k|        end: *const u8,
  147|  6.69k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  6.69k|        let topos = V::Mask::first_offset;
  155|  6.69k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  6.69k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  5.75k|            return Some(cur);
  167|    935|        }
  168|    935|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|    935|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|    935|        if len >= Self::LOOP_SIZE {
  172|  1.01k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    929|                let a = V::load_aligned(cur);
  176|    929|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    929|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    929|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    929|                let eqa = self.v1.cmpeq(a);
  180|    929|                let eqb = self.v1.cmpeq(b);
  181|    929|                let eqc = self.v1.cmpeq(c);
  182|    929|                let eqd = self.v1.cmpeq(d);
  183|    929|                let or1 = eqa.or(eqb);
  184|    929|                let or2 = eqc.or(eqd);
  185|    929|                let or3 = or1.or(or2);
  186|    929|                if or3.movemask_will_have_non_zero() {
  187|    663|                    let mask = eqa.movemask();
  188|    663|                    if mask.has_non_zero() {
  189|    315|                        return Some(cur.add(topos(mask)));
  190|    348|                    }
  191|    348|
  192|    348|                    let mask = eqb.movemask();
  193|    348|                    if mask.has_non_zero() {
  194|    195|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    153|                    }
  196|    153|
  197|    153|                    let mask = eqc.movemask();
  198|    153|                    if mask.has_non_zero() {
  199|    100|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     53|                    }
  201|     53|
  202|     53|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     53|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    266|                }
  206|    266|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|    187|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|    506|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    304|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     70|                return Some(cur);
  216|    234|            }
  217|    234|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|    202|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|    184|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|    184|            return self.search_chunk(cur, topos);
  228|     18|        }
  229|     18|        None
  230|  6.69k|    }
_RNvMs_NtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iE3newBa_:
  450|  1.13M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  1.13M|        Two {
  452|  1.13M|            s1: needle1,
  453|  1.13M|            s2: needle2,
  454|  1.13M|            v1: V::splat(needle1),
  455|  1.13M|            v2: V::splat(needle2),
  456|  1.13M|        }
  457|  1.13M|    }
_RINvNtNtNtCs6gOFuQHqvZ0_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  33.6k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  33.6k|    start: *const u8,
 1150|  33.6k|    end: *const u8,
 1151|  33.6k|    confirm: F,
 1152|  33.6k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  33.6k|    let mut ptr = start;
 1155|  49.7k|    while ptr < end {
 1156|  48.2k|        if confirm(*ptr) {
 1157|  32.1k|            return Some(ptr);
 1158|  16.1k|        }
 1159|  16.1k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.50k|    None
 1162|  33.6k|}

_RNvMs6_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  2.04k|    pub unsafe fn new_unchecked(
  936|  2.04k|        needle1: u8,
  937|  2.04k|        needle2: u8,
  938|  2.04k|        needle3: u8,
  939|  2.04k|    ) -> Three {
  940|  2.04k|        Three {
  941|  2.04k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  2.04k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  2.04k|        }
  944|  2.04k|    }
_RNvMs6_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  2.04k|    pub unsafe fn find_raw(
 1038|  2.04k|        &self,
 1039|  2.04k|        start: *const u8,
 1040|  2.04k|        end: *const u8,
 1041|  2.04k|    ) -> Option<*const u8> {
 1042|  2.04k|        if start >= end {
 1043|     32|            return None;
 1044|  2.01k|        }
 1045|  2.01k|        let len = end.distance(start);
 1046|  2.01k|        if len < __m256i::BYTES {
 1047|    646|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|    410|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|    410|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|    236|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  1.36k|        }
 1061|  1.36k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  1.36k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  1.36k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  1.36k|        // responsibility.
 1065|  1.36k|        //
 1066|  1.36k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  1.36k|        // means we'd have to annotate this routine with `target_feature`.
 1068|  1.36k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  1.36k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  1.36k|        // The real problem is that a routine with a `target_feature`
 1071|  1.36k|        // annotation generally can't be inlined into caller code unless
 1072|  1.36k|        // the caller code has the same target feature annotations. Namely,
 1073|  1.36k|        // the common case (at time of writing) is for calling code to not
 1074|  1.36k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  1.36k|        // `target_feature` on this routine, it can be inlined which will
 1076|  1.36k|        // handle some of the short-haystack cases above without touching the
 1077|  1.36k|        // architecture specific code.
 1078|  1.36k|        self.find_raw_avx2(start, end)
 1079|  2.04k|    }
_RNvMs6_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  1.36k|    unsafe fn find_raw_avx2(
 1192|  1.36k|        &self,
 1193|  1.36k|        start: *const u8,
 1194|  1.36k|        end: *const u8,
 1195|  1.36k|    ) -> Option<*const u8> {
 1196|  1.36k|        self.avx2.find_raw(start, end)
 1197|  1.36k|    }
_RNCNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  3.57k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  3.57k|                    b == self.sse2.needle1()
  194|  3.57k|                })
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  6.69k|    unsafe fn find_raw_avx2(
  397|  6.69k|        &self,
  398|  6.69k|        start: *const u8,
  399|  6.69k|        end: *const u8,
  400|  6.69k|    ) -> Option<*const u8> {
  401|  6.69k|        self.avx2.find_raw(start, end)
  402|  6.69k|    }
_RNCNvMs6_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|    512|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|    512|                    b == self.sse2.needle1()
 1052|    441|                        || b == self.sse2.needle2()
 1053|    295|                        || b == self.sse2.needle3()
 1054|    512|                })
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  1.13M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  1.13M|        Two {
  558|  1.13M|            sse2: generic::Two::new(needle1, needle2),
  559|  1.13M|            avx2: generic::Two::new(needle1, needle2),
  560|  1.13M|        }
  561|  1.13M|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  1.13M|    pub unsafe fn find_raw(
  655|  1.13M|        &self,
  656|  1.13M|        start: *const u8,
  657|  1.13M|        end: *const u8,
  658|  1.13M|    ) -> Option<*const u8> {
  659|  1.13M|        if start >= end {
  660|  3.26k|            return None;
  661|  1.13M|        }
  662|  1.13M|        let len = end.distance(start);
  663|  1.13M|        if len < __m256i::BYTES {
  664|  55.5k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  33.6k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  33.6k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  21.9k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  1.07M|        }
  676|  1.07M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  1.07M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  1.07M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  1.07M|        // responsibility.
  680|  1.07M|        //
  681|  1.07M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  1.07M|        // means we'd have to annotate this routine with `target_feature`.
  683|  1.07M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  1.07M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  1.07M|        // The real problem is that a routine with a `target_feature`
  686|  1.07M|        // annotation generally can't be inlined into caller code unless
  687|  1.07M|        // the caller code has the same target feature annotations. Namely,
  688|  1.07M|        // the common case (at time of writing) is for calling code to not
  689|  1.07M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  1.07M|        // `target_feature` on this routine, it can be inlined which will
  691|  1.07M|        // handle some of the short-haystack cases above without touching the
  692|  1.07M|        // architecture specific code.
  693|  1.07M|        self.find_raw_avx2(start, end)
  694|  1.13M|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  1.07M|    unsafe fn find_raw_avx2(
  805|  1.07M|        &self,
  806|  1.07M|        start: *const u8,
  807|  1.07M|        end: *const u8,
  808|  1.07M|    ) -> Option<*const u8> {
  809|  1.07M|        self.avx2.find_raw(start, end)
  810|  1.07M|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  8.52k|    pub unsafe fn find_raw(
  180|  8.52k|        &self,
  181|  8.52k|        start: *const u8,
  182|  8.52k|        end: *const u8,
  183|  8.52k|    ) -> Option<*const u8> {
  184|  8.52k|        if start >= end {
  185|     77|            return None;
  186|  8.44k|        }
  187|  8.44k|        let len = end.distance(start);
  188|  8.44k|        if len < __m256i::BYTES {
  189|  1.75k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  1.16k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  1.16k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|    595|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  6.69k|        }
  201|  6.69k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  6.69k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  6.69k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  6.69k|        // responsibility.
  205|  6.69k|        //
  206|  6.69k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  6.69k|        // means we'd have to annotate this routine with `target_feature`.
  208|  6.69k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  6.69k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  6.69k|        // The real problem is that a routine with a `target_feature`
  211|  6.69k|        // annotation generally can't be inlined into caller code unless
  212|  6.69k|        // the caller code has the same target feature annotations. Namely,
  213|  6.69k|        // the common case (at time of writing) is for calling code to not
  214|  6.69k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  6.69k|        // `target_feature` on this routine, it can be inlined which will
  216|  6.69k|        // handle some of the short-haystack cases above without touching the
  217|  6.69k|        // architecture specific code.
  218|  6.69k|        self.find_raw_avx2(start, end)
  219|  8.52k|    }
_RNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  21.9k|    unsafe fn find_raw_sse2(
  765|  21.9k|        &self,
  766|  21.9k|        start: *const u8,
  767|  21.9k|        end: *const u8,
  768|  21.9k|    ) -> Option<*const u8> {
  769|  21.9k|        self.sse2.find_raw(start, end)
  770|  21.9k|    }
_RNvMs6_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|    236|    unsafe fn find_raw_sse2(
 1152|    236|        &self,
 1153|    236|        start: *const u8,
 1154|    236|        end: *const u8,
 1155|    236|    ) -> Option<*const u8> {
 1156|    236|        self.sse2.find_raw(start, end)
 1157|    236|    }
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|    595|    unsafe fn find_raw_sse2(
  337|    595|        &self,
  338|    595|        start: *const u8,
  339|    595|        end: *const u8,
  340|    595|    ) -> Option<*const u8> {
  341|    595|        self.sse2.find_raw(start, end)
  342|    595|    }
_RNCNvMs2_NtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  48.2k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  48.2k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  48.2k|                })
_RNvMNtNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  8.52k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  8.52k|        One {
   71|  8.52k|            sse2: generic::One::new(needle),
   72|  8.52k|            avx2: generic::One::new(needle),
   73|  8.52k|        }
   74|  8.52k|    }

_RNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr10memchr_raw:
  174|  8.52k|pub(crate) fn memchr_raw(
  175|  8.52k|    n1: u8,
  176|  8.52k|    start: *const u8,
  177|  8.52k|    end: *const u8,
  178|  8.52k|) -> Option<*const u8> {
  179|  8.52k|    // SAFETY: We provide a valid function pointer type.
  180|  8.52k|    unsafe_ifunc!(
  181|  8.52k|        One,
  182|  8.52k|        find_raw,
  183|  8.52k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  8.52k|        Option<*const u8>,
  185|  8.52k|        start,
  186|  8.52k|        end,
  187|  8.52k|        n1
  188|  8.52k|    )
  189|  8.52k|}
_RNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  2.04k|pub(crate) fn memchr3_raw(
  271|  2.04k|    n1: u8,
  272|  2.04k|    n2: u8,
  273|  2.04k|    n3: u8,
  274|  2.04k|    start: *const u8,
  275|  2.04k|    end: *const u8,
  276|  2.04k|) -> Option<*const u8> {
  277|  2.04k|    // SAFETY: We provide a valid function pointer type.
  278|  2.04k|    unsafe_ifunc!(
  279|  2.04k|        Three,
  280|  2.04k|        find_raw,
  281|  2.04k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  2.04k|        Option<*const u8>,
  283|  2.04k|        start,
  284|  2.04k|        end,
  285|  2.04k|        n1,
  286|  2.04k|        n2,
  287|  2.04k|        n3
  288|  2.04k|    )
  289|  2.04k|}
_RNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  1.13M|pub(crate) fn memchr2_raw(
  221|  1.13M|    n1: u8,
  222|  1.13M|    n2: u8,
  223|  1.13M|    start: *const u8,
  224|  1.13M|    end: *const u8,
  225|  1.13M|) -> Option<*const u8> {
  226|  1.13M|    // SAFETY: We provide a valid function pointer type.
  227|  1.13M|    unsafe_ifunc!(
  228|  1.13M|        Two,
  229|  1.13M|        find_raw,
  230|  1.13M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  1.13M|        Option<*const u8>,
  232|  1.13M|        start,
  233|  1.13M|        end,
  234|  1.13M|        n1,
  235|  1.13M|        n2
  236|  1.13M|    )
  237|  1.13M|}
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  2.04k|        unsafe fn find_avx2(
   79|  2.04k|            $($needle: u8),+,
   80|  2.04k|            $hay_start: *const u8,
   81|  2.04k|            $hay_end: *const u8,
   82|  2.04k|        ) -> $retty {
   83|  2.04k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  2.04k|            $memchrty::new_unchecked($($needle),+)
   85|  2.04k|                .$memchrfind($hay_start, $hay_end)
   86|  2.04k|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  8.52k|        unsafe fn find_avx2(
   79|  8.52k|            $($needle: u8),+,
   80|  8.52k|            $hay_start: *const u8,
   81|  8.52k|            $hay_end: *const u8,
   82|  8.52k|        ) -> $retty {
   83|  8.52k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  8.52k|            $memchrty::new_unchecked($($needle),+)
   85|  8.52k|                .$memchrfind($hay_start, $hay_end)
   86|  8.52k|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  1.13M|        unsafe fn find_avx2(
   79|  1.13M|            $($needle: u8),+,
   80|  1.13M|            $hay_start: *const u8,
   81|  1.13M|            $hay_end: *const u8,
   82|  1.13M|        ) -> $retty {
   83|  1.13M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.13M|            $memchrty::new_unchecked($($needle),+)
   85|  1.13M|                .$memchrfind($hay_start, $hay_end)
   86|  1.13M|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs6gOFuQHqvZ0_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCs6gOFuQHqvZ0_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  3.40M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  3.40M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  3.40M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  3.40M|    }
_RNvXNtCs6gOFuQHqvZ0_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  20.3k|    fn as_usize(self) -> usize {
   27|  20.3k|        self as usize
   28|  20.3k|    }

_RNvMs2_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr23newCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  377|  5.31k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  5.31k|        Memchr2 {
  379|  5.31k|            needle1,
  380|  5.31k|            needle2,
  381|  5.31k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  5.31k|        }
  383|  5.31k|    }
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr12memchr3_iterCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  256|     98|pub fn memchr3_iter<'h>(
  257|     98|    needle1: u8,
  258|     98|    needle2: u8,
  259|     98|    needle3: u8,
  260|     98|    haystack: &'h [u8],
  261|     98|) -> Memchr3<'h> {
  262|     98|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|     98|}
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr6memchrCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   27|  1.06k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  1.06k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  1.06k|    // pointer between start and end.
   30|  1.06k|    unsafe {
   31|  1.06k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  1.06k|        })
   34|  1.06k|    }
   35|  1.06k|}
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr11memchr_iterCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  216|  1.00k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|  1.00k|    Memchr::new(needle, haystack)
  218|  1.00k|}
_RNvMNtCs6gOFuQHqvZ0_6memchr6memchrNtB2_6Memchr3newCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  300|  1.00k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|  1.00k|        Memchr {
  302|  1.00k|            needle1,
  303|  1.00k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|  1.00k|        }
  305|  1.00k|    }
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr12memchr2_iterCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  232|  5.31k|pub fn memchr2_iter<'h>(
  233|  5.31k|    needle1: u8,
  234|  5.31k|    needle2: u8,
  235|  5.31k|    haystack: &'h [u8],
  236|  5.31k|) -> Memchr2<'h> {
  237|  5.31k|    Memchr2::new(needle1, needle2, haystack)
  238|  5.31k|}
_RNvXs7_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr3NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4nextCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  465|  2.04k|    fn next(&mut self) -> Option<usize> {
  466|  2.04k|        // SAFETY: All of our implementations of memchr ensure that any
  467|  2.04k|        // pointers returns will fall within the start and end bounds, and this
  468|  2.04k|        // upholds the safety contract of `self.it.next`.
  469|  2.04k|        unsafe {
  470|  2.04k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  2.04k|            })
  473|  2.04k|        }
  474|  2.04k|    }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6memchrNtB4_6MemchrNtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4nextCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  312|  7.46k|    fn next(&mut self) -> Option<usize> {
  313|  7.46k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  7.46k|        // pointers returns will fall within the start and end bounds, and this
  315|  7.46k|        // upholds the safety contract of `self.it.next`.
  316|  7.46k|        unsafe {
  317|  7.46k|            // NOTE: I attempted to define an enum of previously created
  318|  7.46k|            // searchers and then switch on those here instead of just
  319|  7.46k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  7.46k|            // that turned out to have a fair bit of extra overhead when
  321|  7.46k|            // searching very small haystacks.
  322|  7.46k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  7.46k|        }
  324|  7.46k|    }
_RNvMs6_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr33newCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  446|     98|    pub fn new(
  447|     98|        needle1: u8,
  448|     98|        needle2: u8,
  449|     98|        needle3: u8,
  450|     98|        haystack: &'h [u8],
  451|     98|    ) -> Memchr3<'h> {
  452|     98|        Memchr3 {
  453|     98|            needle1,
  454|     98|            needle2,
  455|     98|            needle3,
  456|     98|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|     98|        }
  458|     98|    }
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr11memchr3_rawCsdrNTUVBLTNP_9quick_xml:
  646|  2.04k|unsafe fn memchr3_raw(
  647|  2.04k|    needle1: u8,
  648|  2.04k|    needle2: u8,
  649|  2.04k|    needle3: u8,
  650|  2.04k|    start: *const u8,
  651|  2.04k|    end: *const u8,
  652|  2.04k|) -> Option<*const u8> {
  653|  2.04k|    #[cfg(target_arch = "x86_64")]
  654|  2.04k|    {
  655|  2.04k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  2.04k|            needle1, needle2, needle3, start, end,
  657|  2.04k|        )
  658|  2.04k|    }
  659|  2.04k|    #[cfg(target_arch = "wasm32")]
  660|  2.04k|    {
  661|  2.04k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  2.04k|            needle1, needle2, needle3, start, end,
  663|  2.04k|        )
  664|  2.04k|    }
  665|  2.04k|    #[cfg(target_arch = "aarch64")]
  666|  2.04k|    {
  667|  2.04k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  2.04k|            needle1, needle2, needle3, start, end,
  669|  2.04k|        )
  670|  2.04k|    }
  671|  2.04k|    #[cfg(not(any(
  672|  2.04k|        target_arch = "x86_64",
  673|  2.04k|        target_arch = "wasm32",
  674|  2.04k|        target_arch = "aarch64"
  675|  2.04k|    )))]
  676|  2.04k|    {
  677|  2.04k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  2.04k|            .find_raw(start, end)
  679|  2.04k|    }
  680|  2.04k|}
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr11memchr2_rawCsdrNTUVBLTNP_9quick_xml:
  574|  1.13M|unsafe fn memchr2_raw(
  575|  1.13M|    needle1: u8,
  576|  1.13M|    needle2: u8,
  577|  1.13M|    start: *const u8,
  578|  1.13M|    end: *const u8,
  579|  1.13M|) -> Option<*const u8> {
  580|  1.13M|    #[cfg(target_arch = "x86_64")]
  581|  1.13M|    {
  582|  1.13M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  1.13M|    }
  584|  1.13M|    #[cfg(target_arch = "wasm32")]
  585|  1.13M|    {
  586|  1.13M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  1.13M|    }
  588|  1.13M|    #[cfg(target_arch = "aarch64")]
  589|  1.13M|    {
  590|  1.13M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  1.13M|    }
  592|  1.13M|    #[cfg(not(any(
  593|  1.13M|        target_arch = "x86_64",
  594|  1.13M|        target_arch = "wasm32",
  595|  1.13M|        target_arch = "aarch64"
  596|  1.13M|    )))]
  597|  1.13M|    {
  598|  1.13M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  1.13M|            .find_raw(start, end)
  600|  1.13M|    }
  601|  1.13M|}
_RNCNvXs_NtCs6gOFuQHqvZ0_6memchr6memchrNtB6_6MemchrNtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0CsdrNTUVBLTNP_9quick_xml:
  322|  7.46k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvXs3_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr2NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4nextCsdrNTUVBLTNP_9quick_xml:
  390|  1.13M|    fn next(&mut self) -> Option<usize> {
  391|  1.13M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  1.13M|        // pointers returns will fall within the start and end bounds, and this
  393|  1.13M|        // upholds the safety contract of `self.it.next`.
  394|  1.13M|        unsafe {
  395|  1.13M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  1.13M|        }
  397|  1.13M|    }
_RNCNvXs7_NtCs6gOFuQHqvZ0_6memchr6memchrNtB7_7Memchr3NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0CsdrNTUVBLTNP_9quick_xml:
  470|  2.04k|            self.it.next(|s, e| {
  471|  2.04k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  2.04k|            })
_RNCNvXs3_NtCs6gOFuQHqvZ0_6memchr6memchrNtB7_7Memchr2NtNtNtNtCs5I47Pk7y5NW_4core4iter6traits8iterator8Iterator4next0CsdrNTUVBLTNP_9quick_xml:
  395|  1.13M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr10memchr_rawCsdrNTUVBLTNP_9quick_xml:
  504|  7.46k|unsafe fn memchr_raw(
  505|  7.46k|    needle: u8,
  506|  7.46k|    start: *const u8,
  507|  7.46k|    end: *const u8,
  508|  7.46k|) -> Option<*const u8> {
  509|  7.46k|    #[cfg(target_arch = "x86_64")]
  510|  7.46k|    {
  511|  7.46k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  7.46k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  7.46k|        // time. This function also handles using a fallback if neither AVX2
  514|  7.46k|        // nor SSE2 (unusual) are available.
  515|  7.46k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  7.46k|    }
  517|  7.46k|    #[cfg(target_arch = "wasm32")]
  518|  7.46k|    {
  519|  7.46k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  7.46k|    }
  521|  7.46k|    #[cfg(target_arch = "aarch64")]
  522|  7.46k|    {
  523|  7.46k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  7.46k|    }
  525|  7.46k|    #[cfg(not(any(
  526|  7.46k|        target_arch = "x86_64",
  527|  7.46k|        target_arch = "wasm32",
  528|  7.46k|        target_arch = "aarch64"
  529|  7.46k|    )))]
  530|  7.46k|    {
  531|  7.46k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  7.46k|    }
  533|  7.46k|}
_RNvMs2_NtCs6gOFuQHqvZ0_6memchr6memchrNtB5_7Memchr23newCsdrNTUVBLTNP_9quick_xml:
  377|    279|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|    279|        Memchr2 {
  379|    279|            needle1,
  380|    279|            needle2,
  381|    279|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|    279|        }
  383|    279|    }
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr12memchr2_iterCsdrNTUVBLTNP_9quick_xml:
  232|    279|pub fn memchr2_iter<'h>(
  233|    279|    needle1: u8,
  234|    279|    needle2: u8,
  235|    279|    haystack: &'h [u8],
  236|    279|) -> Memchr2<'h> {
  237|    279|    Memchr2::new(needle1, needle2, haystack)
  238|    279|}
_RNvNtCs6gOFuQHqvZ0_6memchr6memchr10memchr_rawB3_:
  504|  1.06k|unsafe fn memchr_raw(
  505|  1.06k|    needle: u8,
  506|  1.06k|    start: *const u8,
  507|  1.06k|    end: *const u8,
  508|  1.06k|) -> Option<*const u8> {
  509|  1.06k|    #[cfg(target_arch = "x86_64")]
  510|  1.06k|    {
  511|  1.06k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  1.06k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  1.06k|        // time. This function also handles using a fallback if neither AVX2
  514|  1.06k|        // nor SSE2 (unusual) are available.
  515|  1.06k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  1.06k|    }
  517|  1.06k|    #[cfg(target_arch = "wasm32")]
  518|  1.06k|    {
  519|  1.06k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  1.06k|    }
  521|  1.06k|    #[cfg(target_arch = "aarch64")]
  522|  1.06k|    {
  523|  1.06k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  1.06k|    }
  525|  1.06k|    #[cfg(not(any(
  526|  1.06k|        target_arch = "x86_64",
  527|  1.06k|        target_arch = "wasm32",
  528|  1.06k|        target_arch = "aarch64"
  529|  1.06k|    )))]
  530|  1.06k|    {
  531|  1.06k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  1.06k|    }
  533|  1.06k|}
_RNCNvNtCs6gOFuQHqvZ0_6memchr6memchr6memchr0B5_:
   31|  1.06k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  1.06k|            memchr_raw(needle, start, end)
   33|  1.06k|        })

_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  49.4k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  49.4k|            _mm_cmpeq_epi8(self, vector2)
  232|  49.4k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  68.5k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  68.5k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  68.5k|        }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|  1.15M|    fn has_non_zero(self) -> bool {
  149|  1.15M|        self.0 != 0
  150|  1.15M|    }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  24.9k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  24.9k|            _mm_loadu_si128(data as *const __m128i)
  222|  24.9k|        }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|  1.10M|    fn first_offset(self) -> usize {
  174|  1.10M|        // We are dealing with little endian here (and if we aren't, we swap
  175|  1.10M|        // the bytes so we are in practice), where the most significant byte
  176|  1.10M|        // is at a higher address. That means the least significant bit that
  177|  1.10M|        // is set corresponds to the position of our first matching byte.
  178|  1.10M|        // That position corresponds to the number of zeros after the least
  179|  1.10M|        // significant bit.
  180|  1.10M|        self.get_for_offset().trailing_zeros() as usize
  181|  1.10M|    }
_RNvMNtCs6gOFuQHqvZ0_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|  1.10M|    fn get_for_offset(self) -> u32 {
  129|  1.10M|        #[cfg(target_endian = "big")]
  130|  1.10M|        {
  131|  1.10M|            self.0.swap_bytes()
  132|  1.10M|        }
  133|  1.10M|        #[cfg(target_endian = "little")]
  134|  1.10M|        {
  135|  1.10M|            self.0
  136|  1.10M|        }
  137|  1.10M|    }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  3.28M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  3.28M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  3.28M|        }
_RNvYNtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtNtCs6gOFuQHqvZ0_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  17.9k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  17.9k|        self.movemask().has_non_zero()
   67|  17.9k|    }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  2.24M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  2.24M|            _mm256_cmpeq_epi8(self, vector2)
  282|  2.24M|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|  1.09M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|  1.09M|            _mm256_loadu_si256(data as *const __m256i)
  272|  1.09M|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  37.8k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  37.8k|            _mm256_load_si256(data as *const __m256i)
  267|  37.8k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|  1.13M|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|  1.13M|            _mm256_or_si256(self, vector2)
  292|  1.13M|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  2.29M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  2.29M|            _mm_set1_epi8(byte as i8)
  212|  2.29M|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86sse2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  24.5k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  24.5k|            _mm_or_si128(self, vector2)
  242|  24.5k|        }
_RNvXNtNtCs6gOFuQHqvZ0_6memchr6vector7x86avx2NtNtNtCs5I47Pk7y5NW_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  2.29M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  2.29M|            _mm256_set1_epi8(byte as i8)
  262|  2.29M|        }
_RNvXs_NtCs6gOFuQHqvZ0_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|  1.10M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|  1.10M|        SensibleMoveMask(self.0 | other.0)
  165|  1.10M|    }

_RNvMs2_NtCsaa29Szp9EWb_9once_cell3impINtB5_8OnceCellNtNtCs7mhW5aIIbP8_5alloc6string6StringE14is_initializedCs697sg40YU7P_13libfuzzer_sys:
   49|    789|    pub(crate) fn is_initialized(&self) -> bool {
   50|    789|        // An `Acquire` load is enough because that makes all the initialization
   51|    789|        // operations visible to us, and, this being a fast path, weaker
   52|    789|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    789|        // `SeqCst` operations on the slow path.
   54|    789|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    789|    }

_RNvMs4_NtCsaa29Szp9EWb_9once_cell4syncINtB5_8OnceCellNtNtCs7mhW5aIIbP8_5alloc6string6StringE3getCs697sg40YU7P_13libfuzzer_sys:
  963|    789|        pub fn get(&self) -> Option<&T> {
  964|    789|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|    789|                None
  969|       |            }
  970|    789|        }

_RNvMs_NtCsdrNTUVBLTNP_9quick_xml8encodingNtB4_7Decoder6decode:
   82|    448|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|    448|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|    363|        decoded
   90|    448|    }

_RNvXs1_NtCsdrNTUVBLTNP_9quick_xml6errorsNtB5_5ErrorINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromB7_:
   97|     81|    fn from(error: EscapeError) -> Error {
   98|     81|        Error::EscapeError(error)
   99|     81|    }
_RNvXs_NtCsdrNTUVBLTNP_9quick_xml6errorsNtB4_5ErrorINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtNtBR_3str5error9Utf8ErrorE4fromB6_:
   81|     85|    fn from(error: Utf8Error) -> Error {
   82|     85|        Error::NonDecodable(Some(error))
   83|     85|    }

_RNvNtCsdrNTUVBLTNP_9quick_xml7escapei12parse_number:
 1694|  1.90k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1695|  1.90k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1696|    491|        parse_hexadecimal(hex_digits)
 1697|       |    } else {
 1698|  1.41k|        parse_decimal(bytes)
 1699|     17|    }?;
 1700|  1.89k|    if code == 0 {
 1701|      4|        return Err(EscapeError::EntityWithNull(range));
 1702|  1.88k|    }
 1703|  1.88k|    match std::char::from_u32(code) {
 1704|  1.88k|        Some(c) => Ok(c),
 1705|      3|        None => Err(EscapeError::InvalidCodepoint(code)),
 1706|       |    }
 1707|  1.90k|}
_RNvNtCsdrNTUVBLTNP_9quick_xml7escapei13parse_decimal:
 1727|  1.41k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1728|  1.41k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1729|  1.41k|    if bytes.len() > 7 {
 1730|      1|        return Err(EscapeError::TooLongDecimal);
 1731|  1.41k|    }
 1732|  1.41k|    let mut code = 0;
 1733|  6.72k|    for b in bytes.bytes() {
 1734|  6.72k|        code *= 10;
 1735|  6.72k|        code += match b {
 1736|  6.72k|            b'0'..=b'9' => b - b'0',
 1737|     10|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1738|       |        } as u32;
 1739|       |    }
 1740|  1.40k|    Ok(code)
 1741|  1.41k|}
_RNvNtCsdrNTUVBLTNP_9quick_xml7escapei17parse_hexadecimal:
 1709|    491|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1710|    491|    // maximum code is 0x10FFFF => 6 characters
 1711|    491|    if bytes.len() > 6 {
 1712|      1|        return Err(EscapeError::TooLongHexadecimal);
 1713|    490|    }
 1714|    490|    let mut code = 0;
 1715|  1.54k|    for b in bytes.bytes() {
 1716|  1.54k|        code <<= 4;
 1717|  1.54k|        code += match b {
 1718|  1.54k|            b'0'..=b'9' => b - b'0',
 1719|     66|            b'a'..=b'f' => b - b'a' + 10,
 1720|     79|            b'A'..=b'F' => b - b'A' + 10,
 1721|      5|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1722|       |        } as u32;
 1723|       |    }
 1724|    485|    Ok(code)
 1725|    491|}
_RNCINvNtCsdrNTUVBLTNP_9quick_xml7escapei13unescape_withNCNvMs7_NtB6_6eventsNtBZ_9BytesText8unescape0E0B6_:
  174|  4.16k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCsdrNTUVBLTNP_9quick_xml7escapei12named_entity:
  217|    457|fn named_entity(name: &str) -> Option<&str> {
  218|       |    // match over strings are not allowed in const functions
  219|    457|    let s = match name.as_bytes() {
  220|    457|        b"lt" => "<",
  221|     87|        b"gt" => ">",
  222|    292|        b"amp" => "&",
  223|    183|        b"apos" => "'",
  224|     75|        b"quot" => "\"",
  225|     40|        _ => return None,
  226|       |    };
  227|    417|    Some(s)
  228|    457|}
_RINvNtCsdrNTUVBLTNP_9quick_xml7escapei13unescape_withNCNvMs7_NtB4_6eventsNtBX_9BytesText8unescape0EB4_:
  162|    279|pub fn unescape_with<'input, 'entity, F>(
  163|    279|    raw: &'input str,
  164|    279|    mut resolve_entity: F,
  165|    279|) -> Result<Cow<'input, str>, EscapeError>
  166|    279|where
  167|    279|    // the lifetime of the output comes from a capture or is `'static`
  168|    279|    F: FnMut(&str) -> Option<&'entity str>,
  169|    279|{
  170|    279|    let bytes = raw.as_bytes();
  171|    279|    let mut unescaped = None;
  172|    279|    let mut last_end = 0;
  173|    279|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  2.58k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  2.38k|        match iter.next() {
  176|  2.36k|            Some(end) if bytes[end] == b';' => {
  177|  2.36k|                // append valid data
  178|  2.36k|                if unescaped.is_none() {
  179|    202|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  2.16k|                }
  181|  2.36k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  2.36k|                unescaped.push_str(&raw[last_end..start]);
  183|  2.36k|
  184|  2.36k|                // search for character correctness
  185|  2.36k|                let pat = &raw[start + 1..end];
  186|  2.36k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  1.90k|                    let codepoint = parse_number(entity, start..end)?;
  188|  1.88k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|    457|                } else if let Some(value) = named_entity(pat) {
  190|    417|                    unescaped.push_str(value);
  191|    417|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|     40|                    return Err(EscapeError::UnrecognizedSymbol(
  195|     40|                        start + 1..end,
  196|     40|                        pat.to_string(),
  197|     40|                    ));
  198|       |                }
  199|       |
  200|  2.30k|                last_end = end + 1;
  201|       |            }
  202|     17|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|    198|    if let Some(mut unescaped) = unescaped {
  207|    127|        if let Some(raw) = raw.get(last_end..) {
  208|    127|            unescaped.push_str(raw);
  209|    127|        }
  210|    127|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|     71|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|    279|}

_RNvMNtCsdrNTUVBLTNP_9quick_xml6eventsNtB2_10BytesStart10local_nameCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  179|     98|    pub fn local_name(&self) -> LocalName {
  180|     98|        self.name().into()
  181|     98|    }
_RNvMNtCsdrNTUVBLTNP_9quick_xml6eventsNtB2_10BytesStart4nameCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  170|    196|    pub fn name(&self) -> QName {
  171|    196|        QName(&self.buf[..self.name_len])
  172|    196|    }
_RNCNvMs7_NtCsdrNTUVBLTNP_9quick_xml6eventsNtB7_9BytesText8unescape0B9_:
  734|     40|        self.unescape_with(|_| None)
_RINvMsa_NtCsdrNTUVBLTNP_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  823|     34|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  824|     34|        Self {
  825|     34|            content: content.into(),
  826|     34|            decoder,
  827|     34|        }
  828|     34|    }
_RINvMs7_NtCsdrNTUVBLTNP_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvB2_8unescape0EB8_:
  741|    309|    pub fn unescape_with<'entity>(
  742|    309|        &self,
  743|    309|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  744|    309|    ) -> Result<Cow<'a, str>> {
  745|    309|        let decoded = match &self.content {
  746|    309|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  747|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  748|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  749|       |        };
  750|       |
  751|    279|        match unescape_with(&decoded, resolve_entity)? {
  752|       |            // Because result is borrowed, no replacements was done and we can use original string
  753|     71|            Cow::Borrowed(_) => Ok(decoded),
  754|    127|            Cow::Owned(s) => Ok(s.into()),
  755|       |        }
  756|    309|    }
_RINvMs7_NtCsdrNTUVBLTNP_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  684|  1.62k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  1.62k|        Self {
  686|  1.62k|            content: content.into(),
  687|  1.62k|            decoder,
  688|  1.62k|        }
  689|  1.62k|    }
_RNvMs7_NtCsdrNTUVBLTNP_9quick_xml6eventsNtB5_9BytesText8unescape:
  733|    309|    pub fn unescape(&self) -> Result<Cow<'a, str>> {
  734|    309|        self.unescape_with(|_| None)
  735|    309|    }
_RNvMNtCsdrNTUVBLTNP_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
   79|     98|    pub(crate) fn wrap(content: &'a [u8], name_len: usize) -> Self {
   80|     98|        BytesStart {
   81|     98|            buf: Cow::Borrowed(content),
   82|     98|            name_len,
   83|     98|        }
   84|     98|    }

_RNvXs4_NtCsdrNTUVBLTNP_9quick_xml4nameNtB5_9LocalNameINtNtCs5I47Pk7y5NW_4core7convert4FromNtB5_5QNameE4fromCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  173|     98|    fn from(name: QName<'a>) -> Self {
  174|     98|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
  175|     98|    }
_RNvXs3_NtCsdrNTUVBLTNP_9quick_xml4nameNtB5_9LocalNameINtNtCs5I47Pk7y5NW_4core7convert5AsRefShE6as_refCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  154|     98|    fn as_ref(&self) -> &[u8] {
  155|     98|        self.0
  156|     98|    }
_RNvMNtCsdrNTUVBLTNP_9quick_xml4nameNtB2_5QName5index:
  111|     98|    fn index(&self) -> Option<usize> {
  112|     98|        memchr(b':', self.0)
  113|     98|    }
_RNvXs0_NtCsdrNTUVBLTNP_9quick_xml4nameNtB5_5QNameINtNtCs5I47Pk7y5NW_4core7convert5AsRefShE6as_refCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  124|     98|    fn as_ref(&self) -> &[u8] {
  125|     98|        self.0
  126|     98|    }
_RNCNvXs4_NtCsdrNTUVBLTNP_9quick_xml4nameNtB7_9LocalNameINtNtCs5I47Pk7y5NW_4core7convert4FromNtB7_5QNameE4from0CsiGVLZ8KQ4TB_13oxigraph_fuzz:
  174|      3|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))

_RNCNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB6_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE15skip_whitespace0CsiGVLZ8KQ4TB_13oxigraph_fuzz:
  252|  2.97k|    impl_buffered_source!();
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE12read_elementCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  154|     98|        $($async)? fn read_element $(<$lf>)? (
  155|     98|            &mut self,
  156|     98|            buf: &'b mut Vec<u8>,
  157|     98|            position: &mut usize,
  158|     98|        ) -> Result<Option<&'b [u8]>> {
  159|     98|            let mut state = ReadElementState::Elem;
  160|     98|            let mut read = 0;
  161|     98|
  162|     98|            let start = buf.len();
  163|       |            loop {
  164|    193|                match self $(.$reader)? .fill_buf() $(.$await)? {
  165|    193|                    Ok(n) if n.is_empty() => break,
  166|     98|                    Ok(available) => {
  167|     98|                        if let Some((consumed, used)) = state.change(available) {
  168|      3|                            buf.extend_from_slice(consumed);
  169|      3|
  170|      3|                            self $(.$reader)? .consume(used);
  171|      3|                            read += used;
  172|      3|
  173|      3|                            // Position now just after the `>` symbol
  174|      3|                            *position += read;
  175|      3|                            break;
  176|     95|                        } else {
  177|     95|                            // The `>` symbol not yet found, continue reading
  178|     95|                            buf.extend_from_slice(available);
  179|     95|
  180|     95|                            let used = available.len();
  181|     95|                            self $(.$reader)? .consume(used);
  182|     95|                            read += used;
  183|     95|                        }
  184|       |                    }
  185|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  186|      0|                    Err(e) => {
  187|      0|                        *position += read;
  188|      0|                        return Err(Error::Io(e.into()));
  189|       |                    }
  190|       |                };
  191|       |            }
  192|       |
  193|     98|            if read == 0 {
  194|      0|                Ok(None)
  195|       |            } else {
  196|     98|                Ok(Some(&buf[start..]))
  197|       |            }
  198|     98|        }
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE15remove_utf8_bomCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   18|    789|        $($async)? fn remove_utf8_bom(&mut self) -> Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|    789|            loop {
   22|    789|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|    789|                    Ok(n) => {
   24|    789|                        if n.starts_with(UTF8_BOM) {
   25|      1|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|    788|                        }
   27|    789|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(Error::Io(e.into())),
   31|       |                };
   32|       |            }
   33|    789|        }
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE15skip_whitespaceCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  200|  2.13k|        $($async)? fn skip_whitespace(&mut self, position: &mut usize) -> Result<()> {
  201|  2.20k|            loop {
  202|  2.20k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  203|  2.20k|                    Ok(n) => {
  204|  2.20k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
  205|  2.20k|                        if count > 0 {
  206|     63|                            self $(.$reader)? .consume(count);
  207|     63|                            *position += count;
  208|     63|                            continue;
  209|       |                        } else {
  210|  2.13k|                            Ok(())
  211|       |                        }
  212|       |                    }
  213|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  214|      0|                    Err(e) => Err(Error::Io(e.into())),
  215|       |                };
  216|       |            }
  217|  2.13k|        }
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE8skip_oneCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  219|  2.13k|        $($async)? fn skip_one(&mut self, byte: u8, position: &mut usize) -> Result<bool> {
  220|       |            // search byte must be within the ascii range
  221|      0|            debug_assert!(byte.is_ascii());
  222|       |
  223|  2.13k|            match self.peek_one() $(.$await)? ? {
  224|  2.06k|                Some(b) if b == byte => {
  225|  1.75k|                    *position += 1;
  226|  1.75k|                    self $(.$reader)? .consume(1);
  227|  1.75k|                    Ok(true)
  228|       |                }
  229|    380|                _ => Ok(false),
  230|       |            }
  231|  2.13k|        }
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE16read_bytes_untilCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   52|  1.03k|        $($async)? fn read_bytes_until $(<$lf>)? (
   53|  1.03k|            &mut self,
   54|  1.03k|            byte: u8,
   55|  1.03k|            buf: &'b mut Vec<u8>,
   56|  1.03k|            position: &mut usize,
   57|  1.03k|        ) -> Result<Option<&'b [u8]>> {
   58|       |            // search byte must be within the ascii range
   59|      0|            debug_assert!(byte.is_ascii());
   60|       |
   61|  1.03k|            let mut read = 0;
   62|  1.03k|            let mut done = false;
   63|  1.03k|            let start = buf.len();
   64|  1.99k|            while !done {
   65|    963|                let used = {
   66|  1.38k|                    let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   67|  1.38k|                        Ok(n) if n.is_empty() => break,
   68|    963|                        Ok(n) => n,
   69|      0|                        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   70|      0|                        Err(e) => {
   71|      0|                            *position += read;
   72|      0|                            return Err(Error::Io(e.into()));
   73|       |                        }
   74|       |                    };
   75|       |
   76|    963|                    match memchr::memchr(byte, available) {
   77|    610|                        Some(i) => {
   78|    610|                            buf.extend_from_slice(&available[..i]);
   79|    610|                            done = true;
   80|    610|                            i + 1
   81|       |                        }
   82|       |                        None => {
   83|    353|                            buf.extend_from_slice(available);
   84|    353|                            available.len()
   85|       |                        }
   86|       |                    }
   87|       |                };
   88|    963|                self $(.$reader)? .consume(used);
   89|    963|                read += used;
   90|       |            }
   91|  1.03k|            *position += read;
   92|  1.03k|
   93|  1.03k|            if read == 0 {
   94|     71|                Ok(None)
   95|       |            } else {
   96|    963|                Ok(Some(&buf[start..]))
   97|       |            }
   98|  1.03k|        }
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE8peek_oneCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  233|  4.90k|        $($async)? fn peek_one(&mut self) -> Result<Option<u8>> {
  234|  4.90k|            loop {
  235|  4.90k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  236|  4.90k|                    Ok(n) if n.is_empty() => Ok(None),
  237|  4.82k|                    Ok(n) => Ok(Some(n[0])),
  238|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  239|      0|                    Err(e) => Err(Error::Io(e.into())),
  240|       |                };
  241|       |            }
  242|  4.90k|        }
_RNvXNtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEE17read_bang_elementCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  100|  1.00k|        $($async)? fn read_bang_element $(<$lf>)? (
  101|  1.00k|            &mut self,
  102|  1.00k|            buf: &'b mut Vec<u8>,
  103|  1.00k|            position: &mut usize,
  104|  1.00k|        ) -> Result<Option<(BangType, &'b [u8])>> {
  105|  1.00k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  106|  1.00k|            // start with it.
  107|  1.00k|            let start = buf.len();
  108|  1.00k|            let mut read = 1;
  109|  1.00k|            buf.push(b'!');
  110|  1.00k|            self $(.$reader)? .consume(1);
  111|       |
  112|  1.00k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  113|       |
  114|  1.13k|            loop {
  115|  1.13k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  116|       |                    // Note: Do not update position, so the error points to
  117|       |                    // somewhere sane rather than at the EOF
  118|  1.13k|                    Ok(n) if n.is_empty() => return Err(bang_type.to_err()),
  119|  1.00k|                    Ok(available) => {
  120|       |                        // We only parse from start because we don't want to consider
  121|       |                        // whatever is in the buffer before the bang element
  122|  1.00k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  123|    869|                            buf.extend_from_slice(consumed);
  124|    869|
  125|    869|                            self $(.$reader)? .consume(used);
  126|    869|                            read += used;
  127|    869|
  128|    869|                            *position += read;
  129|    869|                            break;
  130|    131|                        } else {
  131|    131|                            buf.extend_from_slice(available);
  132|    131|
  133|    131|                            let used = available.len();
  134|    131|                            self $(.$reader)? .consume(used);
  135|    131|                            read += used;
  136|    131|                        }
  137|       |                    }
  138|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  139|      0|                    Err(e) => {
  140|      0|                        *position += read;
  141|      0|                        return Err(Error::Io(e.into()));
  142|       |                    }
  143|       |                }
  144|       |            }
  145|       |
  146|    869|            if read == 0 {
  147|      0|                Ok(None)
  148|       |            } else {
  149|    869|                Ok(Some((bang_type, &buf[start..])))
  150|       |            }
  151|  1.00k|        }
_RNvMs_NtNtCsdrNTUVBLTNP_9quick_xml6reader15buffered_readerINtB6_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE15read_event_intoCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  304|  2.13k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  305|  2.13k|        self.read_event_impl(buf)
  306|  2.13k|    }

_RNvNtCsdrNTUVBLTNP_9quick_xml6reader13is_whitespaceCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  925|  2.97k|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  2.97k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  2.97k|}
_RNvMs1_NtCsdrNTUVBLTNP_9quick_xml6readerNtB5_8BangType6to_errCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  879|    131|    fn to_err(&self) -> Error {
  880|    131|        let bang_str = match self {
  881|     49|            Self::CData => "CData",
  882|     23|            Self::Comment => "Comment",
  883|     59|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|    131|        Error::UnexpectedEof(bang_str.to_string())
  886|    131|    }
_RNvMs1_NtCsdrNTUVBLTNP_9quick_xml6readerNtB5_8BangType3new:
  807|  1.00k|    fn new(byte: Option<u8>) -> Result<Self> {
  808|  1.00k|        Ok(match byte {
  809|     90|            Some(b'[') => Self::CData,
  810|    562|            Some(b'-') => Self::Comment,
  811|    348|            Some(b'D') | Some(b'd') => Self::DocType,
  812|      2|            Some(b) => return Err(Error::UnexpectedBang(b)),
  813|      3|            None => return Err(Error::UnexpectedEof("Bang".to_string())),
  814|       |        })
  815|  1.00k|    }
_RNvMs1_NtCsdrNTUVBLTNP_9quick_xml6readerNtB5_8BangType5parse:
  824|  1.00k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  825|  7.33k|        for i in memchr::memchr_iter(b'>', chunk) {
  826|    884|            match self {
  827|    884|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  828|    884|                // <!----> - XML comment
  829|    884|                //  012345 - i
  830|    884|                Self::Comment if buf.len() + i > 4 => {
  831|    761|                    if chunk[..i].ends_with(b"--") {
  832|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  833|       |                        // check_comments enabled option. XML standard requires that comment
  834|       |                        // will not end with `--->` sequence because this is a special case of
  835|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  836|    539|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  837|    222|                    }
  838|    222|                    // End sequence `-|->` was splitted at |
  839|    222|                    //        buf --/   \-- chunk
  840|    222|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  841|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  842|    222|                    }
  843|    222|                    // End sequence `--|>` was splitted at |
  844|    222|                    //         buf --/   \-- chunk
  845|    222|                    if i == 0 && buf.ends_with(b"--") {
  846|      0|                        return Some((&[], i + 1)); // +1 for `>`
  847|    222|                    }
  848|       |                }
  849|    123|                Self::Comment => {}
  850|       |                Self::CData => {
  851|  1.13k|                    if chunk[..i].ends_with(b"]]") {
  852|     41|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  853|  1.09k|                    }
  854|  1.09k|                    // End sequence `]|]>` was splitted at |
  855|  1.09k|                    //        buf --/   \-- chunk
  856|  1.09k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  857|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  858|  1.09k|                    }
  859|  1.09k|                    // End sequence `]]|>` was splitted at |
  860|  1.09k|                    //         buf --/   \-- chunk
  861|  1.09k|                    if i == 0 && buf.ends_with(b"]]") {
  862|      0|                        return Some((&[], i + 1)); // +1 for `>`
  863|  1.09k|                    }
  864|       |                }
  865|       |                Self::DocType => {
  866|  5.31k|                    let content = &chunk[..i];
  867|  5.31k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  868|  5.31k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  869|  5.31k|                        .sum::<i32>();
  870|  5.31k|                    if balance == 0 {
  871|    289|                        return Some((content, i + 1)); // +1 for `>`
  872|  5.02k|                    }
  873|       |                }
  874|       |            }
  875|       |        }
  876|    131|        None
  877|  1.00k|    }
_RNvMs2_NtCsdrNTUVBLTNP_9quick_xml6readerNtB5_16ReadElementState6change:
  904|     98|    fn change<'b>(&mut self, chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  905|  1.95k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', chunk) {
  906|  1.95k|            *self = match (*self, chunk[i]) {
  907|       |                // only allowed to match `>` while we are in state `Elem`
  908|      3|                (Self::Elem, b'>') => return Some((&chunk[..i], i + 1)),
  909|    419|                (Self::Elem, b'\'') => Self::SingleQ,
  910|    272|                (Self::Elem, b'\"') => Self::DoubleQ,
  911|       |
  912|       |                // the only end_byte that gets us out if the same character
  913|    648|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Elem,
  914|       |
  915|       |                // all other bytes: no state change
  916|    609|                _ => *self,
  917|       |            };
  918|       |        }
  919|     95|        None
  920|     98|    }
_RNvMs_NtCsdrNTUVBLTNP_9quick_xml6readerINtB4_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE7decoderCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  635|     98|    pub fn decoder(&self) -> Decoder {
  636|     98|        self.state.decoder()
  637|     98|    }
_RINvMs0_NtCsdrNTUVBLTNP_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE15read_until_openQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEECsiGVLZ8KQ4TB_13oxigraph_fuzz:
  656|  2.13k|    fn read_until_open<'i, B>(&mut self, buf: B) -> Result<std::result::Result<Event<'i>, B>>
  657|  2.13k|    where
  658|  2.13k|        R: XmlSource<'i, B>,
  659|  2.13k|    {
  660|  2.13k|        read_until_open!(self, buf, self.reader, read_event_impl)
  661|  2.13k|    }
_RNvMNtCsdrNTUVBLTNP_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE21expand_empty_elementsCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   33|    789|        pub fn expand_empty_elements(&mut self, val: bool) -> &mut Self {
   34|    789|            self $(.$holder)? .state.expand_empty_elements = val;
   35|    789|            self
   36|    789|        }
_RNvMNtCsdrNTUVBLTNP_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE9trim_textCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   60|    789|        pub fn trim_text(&mut self, val: bool) -> &mut Self {
   61|    789|            self $(.$holder)? .state.trim_text_start = val;
   62|    789|            self $(.$holder)? .state.trim_text_end = val;
   63|    789|            self
   64|    789|        }
_RINvMs0_NtCsdrNTUVBLTNP_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEECsiGVLZ8KQ4TB_13oxigraph_fuzz:
  645|  2.13k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  646|  2.13k|    where
  647|  2.13k|        R: XmlSource<'i, B>,
  648|  2.13k|    {
  649|  3.89k|        read_event_impl!(self, buf, self.reader, read_until_open, read_until_close)
  650|  2.13k|    }
_RINvMs0_NtCsdrNTUVBLTNP_9quick_xml6readerINtB6_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE16read_until_closeQINtNtCs7mhW5aIIbP8_5alloc3vec3VechEECsiGVLZ8KQ4TB_13oxigraph_fuzz:
  665|  1.75k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  666|  1.75k|    where
  667|  1.75k|        R: XmlSource<'i, B>,
  668|  1.75k|    {
  669|  1.75k|        read_until_close!(self, buf, self.reader)
  670|  1.75k|    }
_RNvMNtCsdrNTUVBLTNP_9quick_xml6readerINtB2_6ReaderINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  533|    789|    pub fn from_reader(reader: R) -> Self {
  534|    789|        Self {
  535|    789|            reader,
  536|    789|            state: ReaderState::default(),
  537|    789|        }
  538|    789|    }
_RNvNtCsdrNTUVBLTNP_9quick_xml6reader13is_whitespaceB3_:
  925|  7.69k|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  7.69k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  7.69k|}
_RNCNvMs1_NtCsdrNTUVBLTNP_9quick_xml6readerNtB7_8BangType5parse0B9_:
  868|  1.12M|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs1_NtCsdrNTUVBLTNP_9quick_xml6readerNtB5_8BangType6to_errB7_:
  879|     92|    fn to_err(&self) -> Error {
  880|     92|        let bang_str = match self {
  881|      7|            Self::CData => "CData",
  882|      2|            Self::Comment => "Comment",
  883|     83|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     92|        Error::UnexpectedEof(bang_str.to_string())
  886|     92|    }

_RNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   68|    309|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> Result<Event<'b>> {
   69|    309|        let mut content = bytes;
   70|    309|
   71|    309|        if self.trim_text_end {
   72|    309|            // Skip the ending '<'
   73|    309|            let len = bytes
   74|    309|                .iter()
   75|    309|                .rposition(|&b| !is_whitespace(b))
   76|    309|                .map_or_else(|| bytes.len(), |p| p + 1);
   77|    309|            content = &bytes[..len];
   78|    309|        }
   79|       |
   80|    309|        Ok(Event::Text(BytesText::wrap(content, self.decoder())))
   81|    309|    }
_RNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  186|    613|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  187|    613|        let len = buf.len();
  188|    613|        if len > 2 && buf[len - 1] == b'?' {
  189|    593|            if len > 5 && &buf[1..4] == b"xml" && is_whitespace(buf[4]) {
  190|      0|                let event = BytesDecl::from_start(BytesStart::wrap(&buf[1..len - 1], 3));
  191|      0|
  192|      0|                // Try getting encoding from the declaration event
  193|      0|                #[cfg(feature = "encoding")]
  194|      0|                if self.encoding.can_be_refined() {
  195|      0|                    if let Some(encoding) = event.encoder() {
  196|      0|                        self.encoding = EncodingRef::XmlDetected(encoding);
  197|      0|                    }
  198|      0|                }
  199|      0|
  200|      0|                Ok(Event::Decl(event))
  201|       |            } else {
  202|    593|                Ok(Event::PI(BytesText::wrap(&buf[1..len - 1], self.decoder())))
  203|       |            }
  204|       |        } else {
  205|     20|            self.offset -= len;
  206|     20|            Err(Error::UnexpectedEof("XmlDecl".to_string()))
  207|       |        }
  208|    613|    }
_RNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  261|  1.79k|    pub fn decoder(&self) -> Decoder {
  262|  1.79k|        Decoder {
  263|  1.79k|            #[cfg(feature = "encoding")]
  264|  1.79k|            encoding: self.encoding.encoding(),
  265|  1.79k|        }
  266|  1.79k|    }
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState8emit_ends_0B8_:
  150|     41|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|     41|            *offset -= buf.len();
  152|     41|            Err(Error::EndEventMismatch {
  153|     41|                expected,
  154|     41|                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|     41|            })
  156|     41|        };
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   86|    330|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|    330|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|    330|        };
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState9emit_bangs0_0B8_:
  118|  1.58k|                    .position(|b| !is_whitespace(*b))
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState9emit_text0B8_:
   75|  1.10k|                .rposition(|&b| !is_whitespace(b))
_RNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   85|    869|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   86|    869|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|       |        };
   89|       |
   90|    869|        let len = buf.len();
   91|    330|        match bang_type {
   92|    539|            BangType::Comment if buf.starts_with(b"!--") => {
   93|      0|                debug_assert!(buf.ends_with(b"--"));
   94|    537|                if self.check_comments {
   95|       |                    // search if '--' not in comments
   96|      0|                    if let Some(p) = memchr::memchr_iter(b'-', &buf[3..len - 2])
   97|      0|                        .position(|p| buf[3 + p + 1] == b'-')
   98|       |                    {
   99|      0|                        self.offset += len - p;
  100|      0|                        return Err(Error::UnexpectedToken("--".to_string()));
  101|      0|                    }
  102|    537|                }
  103|    537|                Ok(Event::Comment(BytesText::wrap(
  104|    537|                    &buf[3..len - 2],
  105|    537|                    self.decoder(),
  106|    537|                )))
  107|       |            }
  108|     41|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  109|      0|                debug_assert!(buf.ends_with(b"]]"));
  110|     34|                Ok(Event::CData(BytesCData::wrap(
  111|     34|                    &buf[8..len - 2],
  112|     34|                    self.decoder(),
  113|     34|                )))
  114|       |            }
  115|    289|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  116|    206|                let start = buf[8..]
  117|    206|                    .iter()
  118|    206|                    .position(|b| !is_whitespace(*b))
  119|    206|                    .unwrap_or(len - 8);
  120|    206|                if start + 8 >= len {
  121|     21|                    return Err(Error::EmptyDocType);
  122|    185|                }
  123|    185|                Ok(Event::DocType(BytesText::wrap(
  124|    185|                    &buf[8 + start..],
  125|    185|                    self.decoder(),
  126|    185|                )))
  127|       |            }
  128|     92|            _ => Err(bang_type.to_err()),
  129|       |        }
  130|    869|    }
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState9emit_texts0_0B8_:
   76|    309|                .map_or_else(|| bytes.len(), |p| p + 1);
_RNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  134|     41|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  135|     41|        // Strip the `/` character. `content` contains data between `</` and `>`
  136|     41|        let content = &buf[1..];
  137|       |        // XML standard permits whitespaces after the markup name in closing tags.
  138|       |        // Let's strip them from the buffer before comparing tag names.
  139|     41|        let name = if self.trim_markup_names_in_closing_tags {
  140|     41|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  141|     11|                &content[..pos_end_name + 1]
  142|       |            } else {
  143|     30|                content
  144|       |            }
  145|       |        } else {
  146|      0|            content
  147|       |        };
  148|       |
  149|     41|        let decoder = self.decoder();
  150|     41|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|       |            *offset -= buf.len();
  152|       |            Err(Error::EndEventMismatch {
  153|       |                expected,
  154|       |                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|       |            })
  156|       |        };
  157|       |
  158|       |        // Get the index in self.opened_buffer of the name of the last opened tag
  159|     41|        match self.opened_starts.pop() {
  160|      0|            Some(start) => {
  161|      0|                if self.check_end_names {
  162|      0|                    let expected = &self.opened_buffer[start..];
  163|      0|                    if name != expected {
  164|      0|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  165|      0|                        // #513: In order to allow error recovery we should drop content of the buffer
  166|      0|                        self.opened_buffer.truncate(start);
  167|      0|
  168|      0|                        return mismatch_err(expected, name, &mut self.offset);
  169|      0|                    }
  170|      0|                }
  171|       |
  172|      0|                self.opened_buffer.truncate(start);
  173|       |            }
  174|       |            None => {
  175|     41|                if self.check_end_names {
  176|     41|                    return mismatch_err("".to_string(), &buf[1..], &mut self.offset);
  177|      0|                }
  178|       |            }
  179|       |        }
  180|       |
  181|      0|        Ok(Event::End(BytesEnd::wrap(name.into())))
  182|     41|    }
_RNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  214|     98|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Result<Event<'b>> {
  215|     98|        let len = content.len();
  216|     98|        let name_end = content
  217|     98|            .iter()
  218|     98|            .position(|&b| is_whitespace(b))
  219|     98|            .unwrap_or(len);
  220|     98|        if let Some(&b'/') = content.last() {
  221|       |            // This is self-closed tag `<something/>`
  222|      2|            let name_len = if name_end < len { name_end } else { len - 1 };
  223|      2|            let event = BytesStart::wrap(&content[..len - 1], name_len);
  224|      2|
  225|      2|            if self.expand_empty_elements {
  226|      2|                self.state = ParseState::Empty;
  227|      2|                self.opened_starts.push(self.opened_buffer.len());
  228|      2|                self.opened_buffer.extend(&content[..name_len]);
  229|      2|                Ok(Event::Start(event))
  230|       |            } else {
  231|      0|                Ok(Event::Empty(event))
  232|       |            }
  233|       |        } else {
  234|       |            // #514: Always store names event when .check_end_names == false,
  235|       |            // because checks can be temporary disabled and when they would be
  236|       |            // enabled, we should have that information
  237|     96|            self.opened_starts.push(self.opened_buffer.len());
  238|     96|            self.opened_buffer.extend(&content[..name_end]);
  239|     96|            Ok(Event::Start(BytesStart::wrap(content, name_end)))
  240|       |        }
  241|     98|    }
_RNvXs_NtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCs5I47Pk7y5NW_4core7default7Default7default:
  270|    789|    fn default() -> Self {
  271|    789|        Self {
  272|    789|            offset: 0,
  273|    789|            state: ParseState::Init,
  274|    789|            expand_empty_elements: false,
  275|    789|            trim_text_start: false,
  276|    789|            trim_text_end: false,
  277|    789|            trim_markup_names_in_closing_tags: true,
  278|    789|            check_end_names: true,
  279|    789|            check_comments: false,
  280|    789|            opened_buffer: Vec::new(),
  281|    789|            opened_starts: Vec::new(),
  282|    789|
  283|    789|            #[cfg(feature = "encoding")]
  284|    789|            encoding: EncodingRef::Implicit(UTF_8),
  285|    789|        }
  286|    789|    }
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  140|    856|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNCNvMNtNtCsdrNTUVBLTNP_9quick_xml6reader5stateNtB4_11ReaderState10emit_start0B8_:
  218|  4.15k|            .position(|&b| is_whitespace(b))

_RNvNtCsiGVLZ8KQ4TB_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|    789|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|    789|    let parser = QueryResultsParser::from_format(format);
    8|    789|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|    789|    let Ok(reader) = parser.parse_read(data) else {
   11|    789|        return;
   12|       |    };
   13|      0|    match reader {
   14|      0|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|      0|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|      0|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|      0|            let mut writer = serializer
   21|      0|                .serialize_solutions_to_write(
   22|      0|                    Vec::new(),
   23|      0|                    solutions
   24|      0|                        .get(0)
   25|      0|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|      0|                )
   27|      0|                .unwrap();
   28|      0|            for solution in &solutions {
   29|      0|                writer.write(solution).unwrap();
   30|      0|            }
   31|      0|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|      0|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|      0|                .parse_read(serialized.as_bytes())
   36|      0|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|      0|                .unwrap()
   38|       |            {
   39|      0|                assert_eq!(
   40|      0|                    roundtrip_solutions
   41|      0|                        .collect::<Result<Vec<_>, _>>()
   42|      0|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|      0|                        .unwrap(),
   44|      0|                    solutions
   45|      0|                )
   46|      0|            }
   47|       |        }
   48|      0|        FromReadQueryResultsReader::Boolean(value) => {
   49|      0|            // We try to write again
   50|      0|            let mut serialized = Vec::new();
   51|      0|            serializer
   52|      0|                .serialize_boolean_to_write(&mut serialized, value)
   53|      0|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      0|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      0|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|    789|}

_RINvMs5_NtCs67UY03frutr_10sparesults5errorNtB6_11SyntaxError3msgNtNtCs7mhW5aIIbP8_5alloc6string6StringECsiGVLZ8KQ4TB_13oxigraph_fuzz:
  108|    246|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    246|        Self {
  110|    246|            inner: SyntaxErrorKind::Msg {
  111|    246|                msg: msg.into(),
  112|    246|                location: None,
  113|    246|            },
  114|    246|        }
  115|    246|    }
_RINvMs5_NtCs67UY03frutr_10sparesults5errorNtB6_11SyntaxError3msgReECsiGVLZ8KQ4TB_13oxigraph_fuzz:
  108|     72|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|     72|        Self {
  110|     72|            inner: SyntaxErrorKind::Msg {
  111|     72|                msg: msg.into(),
  112|     72|                location: None,
  113|     72|            },
  114|     72|        }
  115|     72|    }
_RNvXs4_NtCs67UY03frutr_10sparesults5errorNtB5_10ParseErrorINtNtCs5I47Pk7y5NW_4core7convert4FromNtNtCsdrNTUVBLTNP_9quick_xml6errors5ErrorE4fromCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   71|    471|    fn from(error: quick_xml::Error) -> Self {
   72|    471|        match error {
   73|      0|            quick_xml::Error::Io(error) => Self::Io(match Arc::try_unwrap(error) {
   74|      0|                Ok(error) => error,
   75|      0|                Err(error) => io::Error::new(error.kind(), error),
   76|       |            }),
   77|    471|            _ => Self::Syntax(SyntaxError {
   78|    471|                inner: SyntaxErrorKind::Xml(error),
   79|    471|            }),
   80|       |        }
   81|    471|    }
_RNvXs1_NtCs67UY03frutr_10sparesults5errorNtB5_10ParseErrorINtNtCs5I47Pk7y5NW_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|    318|    fn from(error: SyntaxError) -> Self {
   46|    318|        Self::Syntax(error)
   47|    318|    }

_RNvMNtCs67UY03frutr_10sparesults6parserNtB2_18QueryResultsParser11from_formatCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   44|    789|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|    789|        Self { format }
   46|    789|    }
_RINvMNtCs67UY03frutr_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECsiGVLZ8KQ4TB_13oxigraph_fuzz:
   73|    789|    pub fn parse_read<R: Read>(
   74|    789|        &self,
   75|    789|        reader: R,
   76|    789|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|    789|        Ok(match self.format {
   78|    789|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      0|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: SolutionsReaderKind::Json(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      0|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|      0|                    solutions,
  103|      0|                    variables,
  104|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|      0|                    variables: variables.into(),
  106|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|      0|                }),
  108|       |            },
  109|       |        })
  110|    789|    }

_RNvMNtCs67UY03frutr_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCsiGVLZ8KQ4TB_13oxigraph_fuzz:
   55|    789|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|    789|        Self { format }
   57|    789|    }

_RINvNtCs67UY03frutr_10sparesults3xml6decodeINtNtNtNtCsgdywqhqyfPf_3std2io8buffered9bufreader9BufReaderRShENtNtCsdrNTUVBLTNP_9quick_xml4name5QNameECsiGVLZ8KQ4TB_13oxigraph_fuzz:
  660|     98|fn decode<'a, T>(
  661|     98|    reader: &Reader<T>,
  662|     98|    data: &'a impl AsRef<[u8]>,
  663|     98|) -> Result<Cow<'a, str>, ParseError> {
  664|     98|    Ok(reader.decoder().decode(data.as_ref())?)
  665|     98|}
_RNvMs0_NtCs67UY03frutr_10sparesults3xmlINtB5_21XmlQueryResultsReaderRShE4readCsiGVLZ8KQ4TB_13oxigraph_fuzz:
  231|    789|    pub fn read(source: R) -> Result<Self, ParseError> {
  232|    789|        enum State {
  233|    789|            Start,
  234|    789|            Sparql,
  235|    789|            Head,
  236|    789|            AfterHead,
  237|    789|            Boolean,
  238|    789|        }
  239|    789|
  240|    789|        let mut reader = Reader::from_reader(BufReader::new(source));
  241|    789|        reader.trim_text(true);
  242|    789|        reader.expand_empty_elements(true);
  243|    789|
  244|    789|        let mut buffer = Vec::default();
  245|    789|        let mut variables = Vec::default();
  246|    789|        let mut state = State::Start;
  247|       |
  248|       |        //Read header
  249|  2.13k|        loop {
  250|  2.13k|            buffer.clear();
  251|  2.13k|            let event = reader.read_event_into(&mut buffer)?;
  252|  1.82k|            match event {
  253|     98|                Event::Start(event) => match state {
  254|       |                    State::Start => {
  255|     98|                        if event.local_name().as_ref() == b"sparql" {
  256|      0|                            state = State::Sparql;
  257|      0|                        } else {
  258|     98|                            return Err(SyntaxError::msg(format!("Expecting <sparql> tag, found <{}>", decode(&reader, &event.name())?)).into());
  259|       |                        }
  260|       |                    }
  261|       |                    State::Sparql => {
  262|      0|                        if event.local_name().as_ref() == b"head" {
  263|      0|                            state = State::Head;
  264|      0|                        } else {
  265|      0|                            return Err(SyntaxError::msg(format!("Expecting <head> tag, found <{}>",decode(&reader, &event.name())?)).into());
  266|       |                        }
  267|       |                    }
  268|       |                    State::Head => {
  269|      0|                        if event.local_name().as_ref() == b"variable" {
  270|      0|                            let name = event.attributes()
  271|      0|                                .filter_map(Result::ok)
  272|      0|                                .find(|attr| attr.key.local_name().as_ref() == b"name")
  273|      0|                                .ok_or_else(|| SyntaxError::msg("No name attribute found for the <variable> tag"))?
  274|      0|                                .decode_and_unescape_value(&reader)?;
  275|      0|                            let variable = Variable::new(name).map_err(|e| SyntaxError::msg(format!("Invalid variable name: {e}")))?;
  276|      0|                            if variables.contains(&variable) {
  277|      0|                                return Err(SyntaxError::msg(format!(
  278|      0|                                    "The variable {variable} is declared twice"
  279|      0|                                ))
  280|      0|                                    .into());
  281|      0|                            }
  282|      0|                            variables.push(variable);
  283|      0|                        } else if event.local_name().as_ref() == b"link" {
  284|      0|                            // no op
  285|      0|                        } else {
  286|      0|                            return Err(SyntaxError::msg(format!("Expecting <variable> or <link> tag, found <{}>", decode(&reader, &event.name())?)).into());
  287|       |                        }
  288|       |                    }
  289|       |                    State::AfterHead => {
  290|      0|                        if event.local_name().as_ref() == b"boolean" {
  291|      0|                            state = State::Boolean
  292|      0|                        } else if event.local_name().as_ref() == b"results" {
  293|      0|                            let mut mapping = BTreeMap::default();
  294|      0|                            for (i, var) in variables.iter().enumerate() {
  295|      0|                                mapping.insert(var.clone().into_string(), i);
  296|      0|                            }
  297|      0|                            return Ok(Self::Solutions { variables,
  298|      0|                                solutions: XmlSolutionsReader {
  299|      0|                                    reader,
  300|      0|                                    buffer,
  301|      0|                                    mapping,
  302|      0|                                    stack: Vec::new(),
  303|      0|                                    subject_stack: Vec::new(),
  304|      0|                                    predicate_stack: Vec::new(),
  305|      0|                                    object_stack: Vec::new(),
  306|      0|                                }});
  307|      0|                        } else if event.local_name().as_ref() != b"link" && event.local_name().as_ref() != b"results" && event.local_name().as_ref() != b"boolean" {
  308|      0|                            return Err(SyntaxError::msg(format!("Expecting sparql tag, found <{}>", decode(&reader, &event.name())?)).into());
  309|      0|                        }
  310|       |                    }
  311|      0|                    State::Boolean => return Err(SyntaxError::msg(format!("Unexpected tag inside of <boolean> tag: <{}>", decode(&reader, &event.name())?)).into())
  312|       |                },
  313|    309|                Event::Text(event) => {
  314|    309|                    let value = event.unescape()?;
  315|    198|                    return match state {
  316|       |                        State::Boolean => {
  317|      0|                            return if value == "true" {
  318|      0|                                Ok(Self::Boolean(true))
  319|      0|                            } else if value == "false" {
  320|      0|                                Ok(Self::Boolean(false))
  321|       |                            } else {
  322|      0|                                Err(SyntaxError::msg(format!("Unexpected boolean value. Found '{value}'")).into())
  323|       |                            };
  324|       |                        }
  325|    198|                        _ => Err(SyntaxError::msg(format!("Unexpected textual value found: '{value}'")).into())
  326|       |                    };
  327|       |                },
  328|      0|                Event::End(event) => {
  329|      0|                    if let State::Head = state {
  330|      0|                        if event.local_name().as_ref() == b"head" {
  331|      0|                            state = State::AfterHead
  332|      0|                        }
  333|       |                    } else {
  334|      0|                        return Err(SyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into());
  335|       |                    }
  336|       |                },
  337|     72|                Event::Eof => return Err(SyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into()),
  338|  1.34k|                _ => (),
  339|       |            }
  340|       |        }
  341|    789|    }


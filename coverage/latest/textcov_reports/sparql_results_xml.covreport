rust_fuzzer_test_input:
  209|    786|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|    786|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    786|                }
  223|    786|
  224|    786|                __libfuzzer_sys_run(bytes);
  225|    786|                0
  226|    786|            }
_RNvNvCs9lCV43MNY9R_18sparql_results_xml1__19___libfuzzer_sys_run:
  241|    786|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|    786|                $body
  243|    786|            }
LLVMFuzzerTestOneInput:
   58|    786|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    786|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    786|    });
   63|    786|
   64|    786|    match test_input {
   65|    786|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    786|}
_RNCNvCs1VO2i0pKgPs_13libfuzzer_sys15test_input_wrap0B3_:
   59|    786|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    786|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    786|        rust_fuzzer_test_input(data_slice)
   62|    786|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0ECse999pv0QDcz_13oxigraph_fuzz:
 1044|  1.90k|    pub(crate) unsafe fn next(
 1045|  1.90k|        &mut self,
 1046|  1.90k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.90k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.90k|        let found = find_raw(self.start, self.end)?;
 1057|  1.81k|        let result = found.distance(self.original_start);
 1058|  1.81k|        self.start = found.add(1);
 1059|  1.81k|        Some(result)
 1060|  1.90k|    }
_RINvMs3_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0ECse999pv0QDcz_13oxigraph_fuzz:
 1044|  6.61k|    pub(crate) unsafe fn next(
 1045|  6.61k|        &mut self,
 1046|  6.61k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  6.61k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  6.61k|        let found = find_raw(self.start, self.end)?;
 1057|  6.49k|        let result = found.distance(self.original_start);
 1058|  6.49k|        self.start = found.add(1);
 1059|  6.49k|        Some(result)
 1060|  6.61k|    }
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECse999pv0QDcz_13oxigraph_fuzz:
 1125|  1.04k|pub(crate) unsafe fn search_slice_with_raw(
 1126|  1.04k|    haystack: &[u8],
 1127|  1.04k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|  1.04k|) -> Option<usize> {
 1129|  1.04k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|  1.04k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|  1.04k|    // a &[u8].
 1132|  1.04k|    let start = haystack.as_ptr();
 1133|  1.04k|    let end = start.add(haystack.len());
 1134|  1.04k|    let found = find_raw(start, end)?;
 1135|    605|    Some(found.distance(start))
 1136|  1.04k|}
_RNvMs3_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|  5.90k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|  5.90k|        Iter {
 1029|  5.90k|            original_start: haystack.as_ptr(),
 1030|  5.90k|            start: haystack.as_ptr(),
 1031|  5.90k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|  5.90k|            haystack: core::marker::PhantomData,
 1033|  5.90k|        }
 1034|  5.90k|    }
_RINvMs3_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0ECs8axhQK3AMfh_9quick_xml:
 1044|   642k|    pub(crate) unsafe fn next(
 1045|   642k|        &mut self,
 1046|   642k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|   642k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|   642k|        let found = find_raw(self.start, self.end)?;
 1057|   637k|        let result = found.distance(self.original_start);
 1058|   637k|        self.start = found.add(1);
 1059|   637k|        Some(result)
 1060|   642k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle1B8_:
  117|  3.74k|    pub(crate) fn needle1(&self) -> u8 {
  118|  3.74k|        self.s1
  119|  3.74k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE3newB8_:
  111|  7.66k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  7.66k|        One { s1: needle, v1: V::splat(needle) }
  113|  7.66k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE3newB8_:
  111|  7.66k|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  7.66k|        One { s1: needle, v1: V::splat(needle) }
  113|  7.66k|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE8find_rawB8_:
  143|    625|    pub(crate) unsafe fn find_raw(
  144|    625|        &self,
  145|    625|        start: *const u8,
  146|    625|        end: *const u8,
  147|    625|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|    625|        let topos = V::Mask::first_offset;
  155|    625|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|    625|        if let Some(cur) = self.search_chunk(start, topos) {
  166|    521|            return Some(cur);
  167|    104|        }
  168|    104|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|    104|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|    104|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|    104|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|    119|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|     23|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|      8|                return Some(cur);
  216|     15|            }
  217|     15|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|     96|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|     71|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|     71|            return self.search_chunk(cur, topos);
  228|     25|        }
  229|     25|        None
  230|    625|    }
_RNvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  5.66k|    pub(crate) unsafe fn find_raw(
  144|  5.66k|        &self,
  145|  5.66k|        start: *const u8,
  146|  5.66k|        end: *const u8,
  147|  5.66k|    ) -> Option<*const u8> {
  148|       |        // If we want to support vectors bigger than 256 bits, we probably
  149|       |        // need to move up to using a u64 for the masks used below. Currently
  150|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  151|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  152|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  5.66k|        let topos = V::Mask::first_offset;
  155|  5.66k|        let len = end.distance(start);
  156|       |        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  5.66k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  4.82k|            return Some(cur);
  167|    840|        }
  168|    840|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|    840|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|    840|        if len >= Self::LOOP_SIZE {
  172|    902|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|    821|                let a = V::load_aligned(cur);
  176|    821|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|    821|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|    821|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|    821|                let eqa = self.v1.cmpeq(a);
  180|    821|                let eqb = self.v1.cmpeq(b);
  181|    821|                let eqc = self.v1.cmpeq(c);
  182|    821|                let eqd = self.v1.cmpeq(d);
  183|    821|                let or1 = eqa.or(eqb);
  184|    821|                let or2 = eqc.or(eqd);
  185|    821|                let or3 = or1.or(or2);
  186|    821|                if or3.movemask_will_have_non_zero() {
  187|    568|                    let mask = eqa.movemask();
  188|    568|                    if mask.has_non_zero() {
  189|    254|                        return Some(cur.add(topos(mask)));
  190|    314|                    }
  191|    314|
  192|    314|                    let mask = eqb.movemask();
  193|    314|                    if mask.has_non_zero() {
  194|    185|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|    129|                    }
  196|    129|
  197|    129|                    let mask = eqc.movemask();
  198|    129|                    if mask.has_non_zero() {
  199|     91|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|     38|                    }
  201|     38|
  202|     38|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|     38|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|    253|                }
  206|    253|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|    191|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|    491|        while cur <= end.sub(V::BYTES) {
  213|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    292|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|     73|                return Some(cur);
  216|    219|            }
  217|    219|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|    199|        if cur < end {
  224|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  225|    182|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|    182|            return self.search_chunk(cur, topos);
  228|     17|        }
  229|     17|        None
  230|  5.66k|    }
_RINvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|    719|    unsafe fn search_chunk(
  417|    719|        &self,
  418|    719|        cur: *const u8,
  419|    719|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|    719|    ) -> Option<*const u8> {
  421|    719|        let chunk = V::load_unaligned(cur);
  422|    719|        let mask = self.v1.cmpeq(chunk).movemask();
  423|    719|        if mask.has_non_zero() {
  424|    555|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|    164|            None
  427|       |        }
  428|    719|    }
_RINvMNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  6.13k|    unsafe fn search_chunk(
  417|  6.13k|        &self,
  418|  6.13k|        cur: *const u8,
  419|  6.13k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  6.13k|    ) -> Option<*const u8> {
  421|  6.13k|        let chunk = V::load_unaligned(cur);
  422|  6.13k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  6.13k|        if mask.has_non_zero() {
  424|  4.93k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  1.20k|            None
  427|       |        }
  428|  6.13k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE3newBa_:
  450|   642k|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|   642k|        Two {
  452|   642k|            s1: needle1,
  453|   642k|            s2: needle2,
  454|   642k|            v1: V::splat(needle1),
  455|   642k|            v2: V::splat(needle2),
  456|   642k|        }
  457|   642k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE3newBa_:
  450|   642k|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|   642k|        Two {
  452|   642k|            s1: needle1,
  453|   642k|            s2: needle2,
  454|   642k|            v1: V::splat(needle1),
  455|   642k|            v2: V::splat(needle2),
  456|   642k|        }
  457|   642k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle1Ba_:
  461|  40.6k|    pub(crate) fn needle1(&self) -> u8 {
  462|  40.6k|        self.s1
  463|  40.6k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle2Ba_:
  467|  34.7k|    pub(crate) fn needle2(&self) -> u8 {
  468|  34.7k|        self.s2
  469|  34.7k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE8find_rawBa_:
  493|  17.1k|    pub(crate) unsafe fn find_raw(
  494|  17.1k|        &self,
  495|  17.1k|        start: *const u8,
  496|  17.1k|        end: *const u8,
  497|  17.1k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  17.1k|        let topos = V::Mask::first_offset;
  505|  17.1k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  17.1k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  16.0k|            return Some(cur);
  517|  1.08k|        }
  518|  1.08k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  1.08k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  1.08k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.08k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  1.47k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|    676|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    288|                return Some(cur);
  554|    388|            }
  555|    388|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|    797|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|    739|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|    739|            return self.search_chunk(cur, topos);
  566|     58|        }
  567|     58|        None
  568|  17.1k|    }
_RNvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE8find_rawBa_:
  493|   594k|    pub(crate) unsafe fn find_raw(
  494|   594k|        &self,
  495|   594k|        start: *const u8,
  496|   594k|        end: *const u8,
  497|   594k|    ) -> Option<*const u8> {
  498|       |        // If we want to support vectors bigger than 256 bits, we probably
  499|       |        // need to move up to using a u64 for the masks used below. Currently
  500|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  501|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  502|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   594k|        let topos = V::Mask::first_offset;
  505|   594k|        let len = end.distance(start);
  506|       |        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   594k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   582k|            return Some(cur);
  517|  11.8k|        }
  518|  11.8k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  11.8k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  11.8k|        if len >= Self::LOOP_SIZE {
  522|  11.3k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  10.6k|                let a = V::load_aligned(cur);
  526|  10.6k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  10.6k|                let eqa1 = self.v1.cmpeq(a);
  528|  10.6k|                let eqb1 = self.v1.cmpeq(b);
  529|  10.6k|                let eqa2 = self.v2.cmpeq(a);
  530|  10.6k|                let eqb2 = self.v2.cmpeq(b);
  531|  10.6k|                let or1 = eqa1.or(eqb1);
  532|  10.6k|                let or2 = eqa2.or(eqb2);
  533|  10.6k|                let or3 = or1.or(or2);
  534|  10.6k|                if or3.movemask_will_have_non_zero() {
  535|  10.0k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  10.0k|                    if mask.has_non_zero() {
  537|  7.27k|                        return Some(cur.add(topos(mask)));
  538|  2.79k|                    }
  539|  2.79k|
  540|  2.79k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|  2.79k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|    592|                }
  544|    592|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  1.15k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  2.07k|        while cur <= end.sub(V::BYTES) {
  551|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  1.10k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|    839|                return Some(cur);
  554|    270|            }
  555|    270|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|    964|        if cur < end {
  562|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  563|    955|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|    955|            return self.search_chunk(cur, topos);
  566|      9|        }
  567|      9|        None
  568|   594k|    }
_RINvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  18.5k|    unsafe fn search_chunk(
  671|  18.5k|        &self,
  672|  18.5k|        cur: *const u8,
  673|  18.5k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  18.5k|    ) -> Option<*const u8> {
  675|  18.5k|        let chunk = V::load_unaligned(cur);
  676|  18.5k|        let eq1 = self.v1.cmpeq(chunk);
  677|  18.5k|        let eq2 = self.v2.cmpeq(chunk);
  678|  18.5k|        let mask = eq1.or(eq2).movemask();
  679|  18.5k|        if mask.has_non_zero() {
  680|  16.8k|            let mask1 = eq1.movemask();
  681|  16.8k|            let mask2 = eq2.movemask();
  682|  16.8k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  1.71k|            None
  685|       |        }
  686|  18.5k|    }
_RINvMs_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   596k|    unsafe fn search_chunk(
  671|   596k|        &self,
  672|   596k|        cur: *const u8,
  673|   596k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   596k|    ) -> Option<*const u8> {
  675|   596k|        let chunk = V::load_unaligned(cur);
  676|   596k|        let eq1 = self.v1.cmpeq(chunk);
  677|   596k|        let eq2 = self.v2.cmpeq(chunk);
  678|   596k|        let mask = eq1.or(eq2).movemask();
  679|   596k|        if mask.has_non_zero() {
  680|   584k|            let mask1 = eq1.movemask();
  681|   584k|            let mask2 = eq2.movemask();
  682|   584k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  12.3k|            None
  685|       |        }
  686|   596k|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE3newBb_:
  710|  1.90k|    pub(crate) unsafe fn new(
  711|  1.90k|        needle1: u8,
  712|  1.90k|        needle2: u8,
  713|  1.90k|        needle3: u8,
  714|  1.90k|    ) -> Three<V> {
  715|  1.90k|        Three {
  716|  1.90k|            s1: needle1,
  717|  1.90k|            s2: needle2,
  718|  1.90k|            s3: needle3,
  719|  1.90k|            v1: V::splat(needle1),
  720|  1.90k|            v2: V::splat(needle2),
  721|  1.90k|            v3: V::splat(needle3),
  722|  1.90k|        }
  723|  1.90k|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE3newBb_:
  710|  1.90k|    pub(crate) unsafe fn new(
  711|  1.90k|        needle1: u8,
  712|  1.90k|        needle2: u8,
  713|  1.90k|        needle3: u8,
  714|  1.90k|    ) -> Three<V> {
  715|  1.90k|        Three {
  716|  1.90k|            s1: needle1,
  717|  1.90k|            s2: needle2,
  718|  1.90k|            s3: needle3,
  719|  1.90k|            v1: V::splat(needle1),
  720|  1.90k|            v2: V::splat(needle2),
  721|  1.90k|            v3: V::splat(needle3),
  722|  1.90k|        }
  723|  1.90k|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle1Bb_:
  727|    516|    pub(crate) fn needle1(&self) -> u8 {
  728|    516|        self.s1
  729|    516|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle2Bb_:
  733|    436|    pub(crate) fn needle2(&self) -> u8 {
  734|    436|        self.s2
  735|    436|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE7needle3Bb_:
  739|    315|    pub(crate) fn needle3(&self) -> u8 {
  740|    315|        self.s3
  741|    315|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE8find_rawBb_:
  765|    232|    pub(crate) unsafe fn find_raw(
  766|    232|        &self,
  767|    232|        start: *const u8,
  768|    232|        end: *const u8,
  769|    232|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|    232|        let topos = V::Mask::first_offset;
  777|    232|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|    232|        if let Some(cur) = self.search_chunk(start, topos) {
  788|    219|            return Some(cur);
  789|     13|        }
  790|     13|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|     13|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|     13|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|     13|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|     21|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     12|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      4|                return Some(cur);
  836|      8|            }
  837|      8|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|      9|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|      3|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|      3|            return self.search_chunk(cur, topos);
  848|      6|        }
  849|      6|        None
  850|    232|    }
_RNvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  1.24k|    pub(crate) unsafe fn find_raw(
  766|  1.24k|        &self,
  767|  1.24k|        start: *const u8,
  768|  1.24k|        end: *const u8,
  769|  1.24k|    ) -> Option<*const u8> {
  770|       |        // If we want to support vectors bigger than 256 bits, we probably
  771|       |        // need to move up to using a u64 for the masks used below. Currently
  772|       |        // they are 32 bits, which means we're SOL for vectors that need masks
  773|       |        // bigger than 32 bits. Overall unclear until there's a use case.
  774|      0|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  1.24k|        let topos = V::Mask::first_offset;
  777|  1.24k|        let len = end.distance(start);
  778|       |        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  1.24k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  1.04k|            return Some(cur);
  789|    196|        }
  790|    196|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    196|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|      0|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    196|        if len >= Self::LOOP_SIZE {
  794|    279|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|    263|                let a = V::load_aligned(cur);
  798|    263|                let b = V::load_aligned(cur.add(V::BYTES));
  799|    263|                let eqa1 = self.v1.cmpeq(a);
  800|    263|                let eqb1 = self.v1.cmpeq(b);
  801|    263|                let eqa2 = self.v2.cmpeq(a);
  802|    263|                let eqb2 = self.v2.cmpeq(b);
  803|    263|                let eqa3 = self.v3.cmpeq(a);
  804|    263|                let eqb3 = self.v3.cmpeq(b);
  805|    263|                let or1 = eqa1.or(eqb1);
  806|    263|                let or2 = eqa2.or(eqb2);
  807|    263|                let or3 = eqa3.or(eqb3);
  808|    263|                let or4 = or1.or(or2);
  809|    263|                let or5 = or3.or(or4);
  810|    263|                if or5.movemask_will_have_non_zero() {
  811|    171|                    let mask = eqa1
  812|    171|                        .movemask()
  813|    171|                        .or(eqa2.movemask())
  814|    171|                        .or(eqa3.movemask());
  815|    171|                    if mask.has_non_zero() {
  816|     98|                        return Some(cur.add(topos(mask)));
  817|     73|                    }
  818|     73|
  819|     73|                    let mask = eqb1
  820|     73|                        .movemask()
  821|     73|                        .or(eqb2.movemask())
  822|     73|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|     73|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|     92|                }
  826|     92|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|      9|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|     29|        while cur <= end.sub(V::BYTES) {
  833|      0|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|      9|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      5|                return Some(cur);
  836|      4|            }
  837|      4|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|     20|        if cur < end {
  844|      0|            debug_assert!(end.distance(cur) < V::BYTES);
  845|     20|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|      0|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|     20|            return self.search_chunk(cur, topos);
  848|      0|        }
  849|      0|        None
  850|  1.24k|    }
_RINvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|    247|    unsafe fn search_chunk(
  963|    247|        &self,
  964|    247|        cur: *const u8,
  965|    247|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|    247|    ) -> Option<*const u8> {
  967|    247|        let chunk = V::load_unaligned(cur);
  968|    247|        let eq1 = self.v1.cmpeq(chunk);
  969|    247|        let eq2 = self.v2.cmpeq(chunk);
  970|    247|        let eq3 = self.v3.cmpeq(chunk);
  971|    247|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|    247|        if mask.has_non_zero() {
  973|    223|            let mask1 = eq1.movemask();
  974|    223|            let mask2 = eq2.movemask();
  975|    223|            let mask3 = eq3.movemask();
  976|    223|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|     24|            None
  979|       |        }
  980|    247|    }
_RINvMs0_NtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  1.27k|    unsafe fn search_chunk(
  963|  1.27k|        &self,
  964|  1.27k|        cur: *const u8,
  965|  1.27k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  1.27k|    ) -> Option<*const u8> {
  967|  1.27k|        let chunk = V::load_unaligned(cur);
  968|  1.27k|        let eq1 = self.v1.cmpeq(chunk);
  969|  1.27k|        let eq2 = self.v2.cmpeq(chunk);
  970|  1.27k|        let eq3 = self.v3.cmpeq(chunk);
  971|  1.27k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  1.27k|        if mask.has_non_zero() {
  973|  1.05k|            let mask1 = eq1.movemask();
  974|  1.05k|            let mask2 = eq2.movemask();
  975|  1.05k|            let mask3 = eq3.movemask();
  976|  1.05k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    218|            None
  979|       |        }
  980|  1.27k|    }
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  1.30k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.30k|    start: *const u8,
 1150|  1.30k|    end: *const u8,
 1151|  1.30k|    confirm: F,
 1152|  1.30k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  1.30k|    let mut ptr = start;
 1155|  4.01k|    while ptr < end {
 1156|  3.74k|        if confirm(*ptr) {
 1157|  1.03k|            return Some(ptr);
 1158|  2.70k|        }
 1159|  2.70k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|    270|    None
 1162|  1.30k|}
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|  27.8k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  27.8k|    start: *const u8,
 1150|  27.8k|    end: *const u8,
 1151|  27.8k|    confirm: F,
 1152|  27.8k|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|  27.8k|    let mut ptr = start;
 1155|  41.9k|    while ptr < end {
 1156|  40.6k|        if confirm(*ptr) {
 1157|  26.5k|            return Some(ptr);
 1158|  14.1k|        }
 1159|  14.1k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  1.26k|    None
 1162|  27.8k|}
_RINvNtNtNtCs87YssFN4ISD_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|    400|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|    400|    start: *const u8,
 1150|    400|    end: *const u8,
 1151|    400|    confirm: F,
 1152|    400|) -> Option<*const u8> {
 1153|      0|    debug_assert!(start <= end);
 1154|    400|    let mut ptr = start;
 1155|    549|    while ptr < end {
 1156|    516|        if confirm(*ptr) {
 1157|    367|            return Some(ptr);
 1158|    149|        }
 1159|    149|        ptr = ptr.offset(1);
 1160|       |    }
 1161|     33|    None
 1162|    400|}

_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  7.66k|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  7.66k|        One {
   71|  7.66k|            sse2: generic::One::new(needle),
   72|  7.66k|            avx2: generic::One::new(needle),
   73|  7.66k|        }
   74|  7.66k|    }
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  7.66k|    pub unsafe fn find_raw(
  180|  7.66k|        &self,
  181|  7.66k|        start: *const u8,
  182|  7.66k|        end: *const u8,
  183|  7.66k|    ) -> Option<*const u8> {
  184|  7.66k|        if start >= end {
  185|     70|            return None;
  186|  7.59k|        }
  187|  7.59k|        let len = end.distance(start);
  188|  7.59k|        if len < __m256i::BYTES {
  189|  1.92k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  1.30k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  1.30k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|    625|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  5.66k|        }
  201|  5.66k|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  5.66k|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  5.66k|        // enough to run on the vector routine. Pointer validity is caller's
  204|  5.66k|        // responsibility.
  205|  5.66k|        //
  206|  5.66k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  5.66k|        // means we'd have to annotate this routine with `target_feature`.
  208|  5.66k|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  5.66k|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  5.66k|        // The real problem is that a routine with a `target_feature`
  211|  5.66k|        // annotation generally can't be inlined into caller code unless
  212|  5.66k|        // the caller code has the same target feature annotations. Namely,
  213|  5.66k|        // the common case (at time of writing) is for calling code to not
  214|  5.66k|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  5.66k|        // `target_feature` on this routine, it can be inlined which will
  216|  5.66k|        // handle some of the short-haystack cases above without touching the
  217|  5.66k|        // architecture specific code.
  218|  5.66k|        self.find_raw_avx2(start, end)
  219|  7.66k|    }
_RNCNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|  3.74k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|  3.74k|                    b == self.sse2.needle1()
  194|  3.74k|                })
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|    625|    unsafe fn find_raw_sse2(
  337|    625|        &self,
  338|    625|        start: *const u8,
  339|    625|        end: *const u8,
  340|    625|    ) -> Option<*const u8> {
  341|    625|        self.sse2.find_raw(start, end)
  342|    625|    }
_RNvMNtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  5.66k|    unsafe fn find_raw_avx2(
  397|  5.66k|        &self,
  398|  5.66k|        start: *const u8,
  399|  5.66k|        end: *const u8,
  400|  5.66k|    ) -> Option<*const u8> {
  401|  5.66k|        self.avx2.find_raw(start, end)
  402|  5.66k|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|   642k|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|   642k|        Two {
  558|   642k|            sse2: generic::Two::new(needle1, needle2),
  559|   642k|            avx2: generic::Two::new(needle1, needle2),
  560|   642k|        }
  561|   642k|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|   642k|    pub unsafe fn find_raw(
  655|   642k|        &self,
  656|   642k|        start: *const u8,
  657|   642k|        end: *const u8,
  658|   642k|    ) -> Option<*const u8> {
  659|   642k|        if start >= end {
  660|  2.76k|            return None;
  661|   639k|        }
  662|   639k|        let len = end.distance(start);
  663|   639k|        if len < __m256i::BYTES {
  664|  44.9k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|  27.8k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  27.8k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|  17.1k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|   594k|        }
  676|   594k|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|   594k|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|   594k|        // enough to run on the vector routine. Pointer validity is caller's
  679|   594k|        // responsibility.
  680|   594k|        //
  681|   594k|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|   594k|        // means we'd have to annotate this routine with `target_feature`.
  683|   594k|        // Which is fine, because this routine is `unsafe` anyway and the
  684|   594k|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|   594k|        // The real problem is that a routine with a `target_feature`
  686|   594k|        // annotation generally can't be inlined into caller code unless
  687|   594k|        // the caller code has the same target feature annotations. Namely,
  688|   594k|        // the common case (at time of writing) is for calling code to not
  689|   594k|        // have the `avx2` target feature enabled *at compile time*. Without
  690|   594k|        // `target_feature` on this routine, it can be inlined which will
  691|   594k|        // handle some of the short-haystack cases above without touching the
  692|   594k|        // architecture specific code.
  693|   594k|        self.find_raw_avx2(start, end)
  694|   642k|    }
_RNCNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|  40.6k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|  40.6k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|  40.6k|                })
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|  17.1k|    unsafe fn find_raw_sse2(
  765|  17.1k|        &self,
  766|  17.1k|        start: *const u8,
  767|  17.1k|        end: *const u8,
  768|  17.1k|    ) -> Option<*const u8> {
  769|  17.1k|        self.sse2.find_raw(start, end)
  770|  17.1k|    }
_RNvMs2_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|   594k|    unsafe fn find_raw_avx2(
  805|   594k|        &self,
  806|   594k|        start: *const u8,
  807|   594k|        end: *const u8,
  808|   594k|    ) -> Option<*const u8> {
  809|   594k|        self.avx2.find_raw(start, end)
  810|   594k|    }
_RNvMs6_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  1.90k|    pub unsafe fn new_unchecked(
  936|  1.90k|        needle1: u8,
  937|  1.90k|        needle2: u8,
  938|  1.90k|        needle3: u8,
  939|  1.90k|    ) -> Three {
  940|  1.90k|        Three {
  941|  1.90k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  1.90k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  1.90k|        }
  944|  1.90k|    }
_RNvMs6_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  1.90k|    pub unsafe fn find_raw(
 1038|  1.90k|        &self,
 1039|  1.90k|        start: *const u8,
 1040|  1.90k|        end: *const u8,
 1041|  1.90k|    ) -> Option<*const u8> {
 1042|  1.90k|        if start >= end {
 1043|     34|            return None;
 1044|  1.87k|        }
 1045|  1.87k|        let len = end.distance(start);
 1046|  1.87k|        if len < __m256i::BYTES {
 1047|    632|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|    400|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|    400|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|    232|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  1.24k|        }
 1061|  1.24k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  1.24k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  1.24k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  1.24k|        // responsibility.
 1065|  1.24k|        //
 1066|  1.24k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  1.24k|        // means we'd have to annotate this routine with `target_feature`.
 1068|  1.24k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  1.24k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  1.24k|        // The real problem is that a routine with a `target_feature`
 1071|  1.24k|        // annotation generally can't be inlined into caller code unless
 1072|  1.24k|        // the caller code has the same target feature annotations. Namely,
 1073|  1.24k|        // the common case (at time of writing) is for calling code to not
 1074|  1.24k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  1.24k|        // `target_feature` on this routine, it can be inlined which will
 1076|  1.24k|        // handle some of the short-haystack cases above without touching the
 1077|  1.24k|        // architecture specific code.
 1078|  1.24k|        self.find_raw_avx2(start, end)
 1079|  1.90k|    }
_RNCNvMs6_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|    516|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|    516|                    b == self.sse2.needle1()
 1052|    436|                        || b == self.sse2.needle2()
 1053|    315|                        || b == self.sse2.needle3()
 1054|    516|                })
_RNvMs6_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|    232|    unsafe fn find_raw_sse2(
 1152|    232|        &self,
 1153|    232|        start: *const u8,
 1154|    232|        end: *const u8,
 1155|    232|    ) -> Option<*const u8> {
 1156|    232|        self.sse2.find_raw(start, end)
 1157|    232|    }
_RNvMs6_NtNtNtNtCs87YssFN4ISD_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  1.24k|    unsafe fn find_raw_avx2(
 1192|  1.24k|        &self,
 1193|  1.24k|        start: *const u8,
 1194|  1.24k|        end: *const u8,
 1195|  1.24k|    ) -> Option<*const u8> {
 1196|  1.24k|        self.avx2.find_raw(start, end)
 1197|  1.24k|    }

_RNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr10memchr_raw:
  174|  7.66k|pub(crate) fn memchr_raw(
  175|  7.66k|    n1: u8,
  176|  7.66k|    start: *const u8,
  177|  7.66k|    end: *const u8,
  178|  7.66k|) -> Option<*const u8> {
  179|  7.66k|    // SAFETY: We provide a valid function pointer type.
  180|  7.66k|    unsafe_ifunc!(
  181|  7.66k|        One,
  182|  7.66k|        find_raw,
  183|  7.66k|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  7.66k|        Option<*const u8>,
  185|  7.66k|        start,
  186|  7.66k|        end,
  187|  7.66k|        n1
  188|  7.66k|    )
  189|  7.66k|}
_RNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr2_raw:
  220|   642k|pub(crate) fn memchr2_raw(
  221|   642k|    n1: u8,
  222|   642k|    n2: u8,
  223|   642k|    start: *const u8,
  224|   642k|    end: *const u8,
  225|   642k|) -> Option<*const u8> {
  226|   642k|    // SAFETY: We provide a valid function pointer type.
  227|   642k|    unsafe_ifunc!(
  228|   642k|        Two,
  229|   642k|        find_raw,
  230|   642k|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|   642k|        Option<*const u8>,
  232|   642k|        start,
  233|   642k|        end,
  234|   642k|        n1,
  235|   642k|        n2
  236|   642k|    )
  237|   642k|}
_RNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  1.90k|pub(crate) fn memchr3_raw(
  271|  1.90k|    n1: u8,
  272|  1.90k|    n2: u8,
  273|  1.90k|    n3: u8,
  274|  1.90k|    start: *const u8,
  275|  1.90k|    end: *const u8,
  276|  1.90k|) -> Option<*const u8> {
  277|  1.90k|    // SAFETY: We provide a valid function pointer type.
  278|  1.90k|    unsafe_ifunc!(
  279|  1.90k|        Three,
  280|  1.90k|        find_raw,
  281|  1.90k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  1.90k|        Option<*const u8>,
  283|  1.90k|        start,
  284|  1.90k|        end,
  285|  1.90k|        n1,
  286|  1.90k|        n2,
  287|  1.90k|        n3
  288|  1.90k|    )
  289|  1.90k|}
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  7.66k|        unsafe fn find_avx2(
   79|  7.66k|            $($needle: u8),+,
   80|  7.66k|            $hay_start: *const u8,
   81|  7.66k|            $hay_end: *const u8,
   82|  7.66k|        ) -> $retty {
   83|  7.66k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  7.66k|            $memchrty::new_unchecked($($needle),+)
   85|  7.66k|                .$memchrfind($hay_start, $hay_end)
   86|  7.66k|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|   642k|        unsafe fn find_avx2(
   79|   642k|            $($needle: u8),+,
   80|   642k|            $hay_start: *const u8,
   81|   642k|            $hay_end: *const u8,
   82|   642k|        ) -> $retty {
   83|   642k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|   642k|            $memchrty::new_unchecked($($needle),+)
   85|   642k|                .$memchrfind($hay_start, $hay_end)
   86|   642k|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  1.90k|        unsafe fn find_avx2(
   79|  1.90k|            $($needle: u8),+,
   80|  1.90k|            $hay_start: *const u8,
   81|  1.90k|            $hay_end: *const u8,
   82|  1.90k|        ) -> $retty {
   83|  1.90k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.90k|            $memchrty::new_unchecked($($needle),+)
   85|  1.90k|                .$memchrfind($hay_start, $hay_end)
   86|  1.90k|        }
_RNvNvNtNtNtCs87YssFN4ISD_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCs87YssFN4ISD_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  1.91M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  1.91M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  1.91M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  1.91M|    }
_RNvXNtCs87YssFN4ISD_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|  14.1k|    fn as_usize(self) -> usize {
   27|  14.1k|        self as usize
   28|  14.1k|    }

_RNvMNtCs87YssFN4ISD_6memchr6memchrNtB2_6Memchr3newCse999pv0QDcz_13oxigraph_fuzz:
  300|  1.15k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|  1.15k|        Memchr {
  302|  1.15k|            needle1,
  303|  1.15k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|  1.15k|        }
  305|  1.15k|    }
_RNvMs2_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr23newCse999pv0QDcz_13oxigraph_fuzz:
  377|  4.37k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  4.37k|        Memchr2 {
  379|  4.37k|            needle1,
  380|  4.37k|            needle2,
  381|  4.37k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  4.37k|        }
  383|  4.37k|    }
_RNvMs6_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr33newCse999pv0QDcz_13oxigraph_fuzz:
  446|     97|    pub fn new(
  447|     97|        needle1: u8,
  448|     97|        needle2: u8,
  449|     97|        needle3: u8,
  450|     97|        haystack: &'h [u8],
  451|     97|    ) -> Memchr3<'h> {
  452|     97|        Memchr3 {
  453|     97|            needle1,
  454|     97|            needle2,
  455|     97|            needle3,
  456|     97|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|     97|        }
  458|     97|    }
_RNvNtCs87YssFN4ISD_6memchr6memchr11memchr_iterCse999pv0QDcz_13oxigraph_fuzz:
  216|  1.15k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|  1.15k|    Memchr::new(needle, haystack)
  218|  1.15k|}
_RNvNtCs87YssFN4ISD_6memchr6memchr12memchr2_iterCse999pv0QDcz_13oxigraph_fuzz:
  232|  4.37k|pub fn memchr2_iter<'h>(
  233|  4.37k|    needle1: u8,
  234|  4.37k|    needle2: u8,
  235|  4.37k|    haystack: &'h [u8],
  236|  4.37k|) -> Memchr2<'h> {
  237|  4.37k|    Memchr2::new(needle1, needle2, haystack)
  238|  4.37k|}
_RNvNtCs87YssFN4ISD_6memchr6memchr12memchr3_iterCse999pv0QDcz_13oxigraph_fuzz:
  256|     97|pub fn memchr3_iter<'h>(
  257|     97|    needle1: u8,
  258|     97|    needle2: u8,
  259|     97|    needle3: u8,
  260|     97|    haystack: &'h [u8],
  261|     97|) -> Memchr3<'h> {
  262|     97|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|     97|}
_RNvNtCs87YssFN4ISD_6memchr6memchr6memchrCse999pv0QDcz_13oxigraph_fuzz:
   27|  1.04k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|  1.04k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|  1.04k|    // pointer between start and end.
   30|  1.04k|    unsafe {
   31|  1.04k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|  1.04k|        })
   34|  1.04k|    }
   35|  1.04k|}
_RNvXs7_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr3NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCse999pv0QDcz_13oxigraph_fuzz:
  465|  1.90k|    fn next(&mut self) -> Option<usize> {
  466|  1.90k|        // SAFETY: All of our implementations of memchr ensure that any
  467|  1.90k|        // pointers returns will fall within the start and end bounds, and this
  468|  1.90k|        // upholds the safety contract of `self.it.next`.
  469|  1.90k|        unsafe {
  470|  1.90k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  1.90k|            })
  473|  1.90k|        }
  474|  1.90k|    }
_RNvXs_NtCs87YssFN4ISD_6memchr6memchrNtB4_6MemchrNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCse999pv0QDcz_13oxigraph_fuzz:
  312|  6.61k|    fn next(&mut self) -> Option<usize> {
  313|  6.61k|        // SAFETY: All of our implementations of memchr ensure that any
  314|  6.61k|        // pointers returns will fall within the start and end bounds, and this
  315|  6.61k|        // upholds the safety contract of `self.it.next`.
  316|  6.61k|        unsafe {
  317|  6.61k|            // NOTE: I attempted to define an enum of previously created
  318|  6.61k|            // searchers and then switch on those here instead of just
  319|  6.61k|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  6.61k|            // that turned out to have a fair bit of extra overhead when
  321|  6.61k|            // searching very small haystacks.
  322|  6.61k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  6.61k|        }
  324|  6.61k|    }
_RNCNvXs3_NtCs87YssFN4ISD_6memchr6memchrNtB7_7Memchr2NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0Cs8axhQK3AMfh_9quick_xml:
  395|   642k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCs87YssFN4ISD_6memchr6memchrNtB7_7Memchr3NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0Cs8axhQK3AMfh_9quick_xml:
  470|  1.90k|            self.it.next(|s, e| {
  471|  1.90k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  1.90k|            })
_RNCNvXs_NtCs87YssFN4ISD_6memchr6memchrNtB6_6MemchrNtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4next0Cs8axhQK3AMfh_9quick_xml:
  322|  6.61k|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvMs2_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr23newCs8axhQK3AMfh_9quick_xml:
  377|    269|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|    269|        Memchr2 {
  379|    269|            needle1,
  380|    269|            needle2,
  381|    269|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|    269|        }
  383|    269|    }
_RNvNtCs87YssFN4ISD_6memchr6memchr10memchr_rawCs8axhQK3AMfh_9quick_xml:
  504|  6.61k|unsafe fn memchr_raw(
  505|  6.61k|    needle: u8,
  506|  6.61k|    start: *const u8,
  507|  6.61k|    end: *const u8,
  508|  6.61k|) -> Option<*const u8> {
  509|  6.61k|    #[cfg(target_arch = "x86_64")]
  510|  6.61k|    {
  511|  6.61k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  6.61k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  6.61k|        // time. This function also handles using a fallback if neither AVX2
  514|  6.61k|        // nor SSE2 (unusual) are available.
  515|  6.61k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  6.61k|    }
  517|  6.61k|    #[cfg(target_arch = "wasm32")]
  518|  6.61k|    {
  519|  6.61k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  6.61k|    }
  521|  6.61k|    #[cfg(target_arch = "aarch64")]
  522|  6.61k|    {
  523|  6.61k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  6.61k|    }
  525|  6.61k|    #[cfg(not(any(
  526|  6.61k|        target_arch = "x86_64",
  527|  6.61k|        target_arch = "wasm32",
  528|  6.61k|        target_arch = "aarch64"
  529|  6.61k|    )))]
  530|  6.61k|    {
  531|  6.61k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  6.61k|    }
  533|  6.61k|}
_RNvNtCs87YssFN4ISD_6memchr6memchr11memchr2_rawCs8axhQK3AMfh_9quick_xml:
  574|   642k|unsafe fn memchr2_raw(
  575|   642k|    needle1: u8,
  576|   642k|    needle2: u8,
  577|   642k|    start: *const u8,
  578|   642k|    end: *const u8,
  579|   642k|) -> Option<*const u8> {
  580|   642k|    #[cfg(target_arch = "x86_64")]
  581|   642k|    {
  582|   642k|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|   642k|    }
  584|   642k|    #[cfg(target_arch = "wasm32")]
  585|   642k|    {
  586|   642k|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|   642k|    }
  588|   642k|    #[cfg(target_arch = "aarch64")]
  589|   642k|    {
  590|   642k|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|   642k|    }
  592|   642k|    #[cfg(not(any(
  593|   642k|        target_arch = "x86_64",
  594|   642k|        target_arch = "wasm32",
  595|   642k|        target_arch = "aarch64"
  596|   642k|    )))]
  597|   642k|    {
  598|   642k|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|   642k|            .find_raw(start, end)
  600|   642k|    }
  601|   642k|}
_RNvNtCs87YssFN4ISD_6memchr6memchr11memchr3_rawCs8axhQK3AMfh_9quick_xml:
  646|  1.90k|unsafe fn memchr3_raw(
  647|  1.90k|    needle1: u8,
  648|  1.90k|    needle2: u8,
  649|  1.90k|    needle3: u8,
  650|  1.90k|    start: *const u8,
  651|  1.90k|    end: *const u8,
  652|  1.90k|) -> Option<*const u8> {
  653|  1.90k|    #[cfg(target_arch = "x86_64")]
  654|  1.90k|    {
  655|  1.90k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  1.90k|            needle1, needle2, needle3, start, end,
  657|  1.90k|        )
  658|  1.90k|    }
  659|  1.90k|    #[cfg(target_arch = "wasm32")]
  660|  1.90k|    {
  661|  1.90k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  1.90k|            needle1, needle2, needle3, start, end,
  663|  1.90k|        )
  664|  1.90k|    }
  665|  1.90k|    #[cfg(target_arch = "aarch64")]
  666|  1.90k|    {
  667|  1.90k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  1.90k|            needle1, needle2, needle3, start, end,
  669|  1.90k|        )
  670|  1.90k|    }
  671|  1.90k|    #[cfg(not(any(
  672|  1.90k|        target_arch = "x86_64",
  673|  1.90k|        target_arch = "wasm32",
  674|  1.90k|        target_arch = "aarch64"
  675|  1.90k|    )))]
  676|  1.90k|    {
  677|  1.90k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  1.90k|            .find_raw(start, end)
  679|  1.90k|    }
  680|  1.90k|}
_RNvNtCs87YssFN4ISD_6memchr6memchr12memchr2_iterCs8axhQK3AMfh_9quick_xml:
  232|    269|pub fn memchr2_iter<'h>(
  233|    269|    needle1: u8,
  234|    269|    needle2: u8,
  235|    269|    haystack: &'h [u8],
  236|    269|) -> Memchr2<'h> {
  237|    269|    Memchr2::new(needle1, needle2, haystack)
  238|    269|}
_RNvXs3_NtCs87YssFN4ISD_6memchr6memchrNtB5_7Memchr2NtNtNtNtCsd3ZSx5keFHB_4core4iter6traits8iterator8Iterator4nextCs8axhQK3AMfh_9quick_xml:
  390|   642k|    fn next(&mut self) -> Option<usize> {
  391|   642k|        // SAFETY: All of our implementations of memchr ensure that any
  392|   642k|        // pointers returns will fall within the start and end bounds, and this
  393|   642k|        // upholds the safety contract of `self.it.next`.
  394|   642k|        unsafe {
  395|   642k|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|   642k|        }
  397|   642k|    }
_RNCNvNtCs87YssFN4ISD_6memchr6memchr6memchr0B5_:
   31|  1.04k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|  1.04k|            memchr_raw(needle, start, end)
   33|  1.04k|        })
_RNvNtCs87YssFN4ISD_6memchr6memchr10memchr_rawB3_:
  504|  1.04k|unsafe fn memchr_raw(
  505|  1.04k|    needle: u8,
  506|  1.04k|    start: *const u8,
  507|  1.04k|    end: *const u8,
  508|  1.04k|) -> Option<*const u8> {
  509|  1.04k|    #[cfg(target_arch = "x86_64")]
  510|  1.04k|    {
  511|  1.04k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  1.04k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  1.04k|        // time. This function also handles using a fallback if neither AVX2
  514|  1.04k|        // nor SSE2 (unusual) are available.
  515|  1.04k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  1.04k|    }
  517|  1.04k|    #[cfg(target_arch = "wasm32")]
  518|  1.04k|    {
  519|  1.04k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  1.04k|    }
  521|  1.04k|    #[cfg(target_arch = "aarch64")]
  522|  1.04k|    {
  523|  1.04k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  1.04k|    }
  525|  1.04k|    #[cfg(not(any(
  526|  1.04k|        target_arch = "x86_64",
  527|  1.04k|        target_arch = "wasm32",
  528|  1.04k|        target_arch = "aarch64"
  529|  1.04k|    )))]
  530|  1.04k|    {
  531|  1.04k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  1.04k|    }
  533|  1.04k|}

_RNvYNtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtNtCs87YssFN4ISD_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   65|  11.7k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   66|  11.7k|        self.movemask().has_non_zero()
   67|  11.7k|    }
_RNvMNtCs87YssFN4ISD_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  128|   618k|    fn get_for_offset(self) -> u32 {
  129|   618k|        #[cfg(target_endian = "big")]
  130|   618k|        {
  131|   618k|            self.0.swap_bytes()
  132|   618k|        }
  133|   618k|        #[cfg(target_endian = "little")]
  134|   618k|        {
  135|   618k|            self.0
  136|   618k|        }
  137|   618k|    }
_RNvXs_NtCs87YssFN4ISD_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  148|   646k|    fn has_non_zero(self) -> bool {
  149|   646k|        self.0 != 0
  150|   646k|    }
_RNvXs_NtCs87YssFN4ISD_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  173|   618k|    fn first_offset(self) -> usize {
  174|   618k|        // We are dealing with little endian here (and if we aren't, we swap
  175|   618k|        // the bytes so we are in practice), where the most significant byte
  176|   618k|        // is at a higher address. That means the least significant bit that
  177|   618k|        // is set corresponds to the position of our first matching byte.
  178|   618k|        // That position corresponds to the number of zeros after the least
  179|   618k|        // significant bit.
  180|   618k|        self.get_for_offset().trailing_zeros() as usize
  181|   618k|    }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  225|  53.8k|        unsafe fn movemask(self) -> SensibleMoveMask {
  226|  53.8k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  227|  53.8k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  275|  1.81M|        unsafe fn movemask(self) -> SensibleMoveMask {
  276|  1.81M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  277|  1.81M|        }
_RNvXs_NtCs87YssFN4ISD_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  163|   616k|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  164|   616k|        SensibleMoveMask(self.0 | other.0)
  165|   616k|    }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  210|  1.29M|        unsafe fn splat(byte: u8) -> __m128i {
  211|  1.29M|            _mm_set1_epi8(byte as i8)
  212|  1.29M|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  220|  19.5k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  221|  19.5k|            _mm_loadu_si128(data as *const __m128i)
  222|  19.5k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  230|  38.5k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  231|  38.5k|            _mm_cmpeq_epi8(self, vector2)
  232|  38.5k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86sse2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m128iNtB4_6Vector2or:
  240|  19.0k|        unsafe fn or(self, vector2: Self) -> __m128i {
  241|  19.0k|            _mm_or_si128(self, vector2)
  242|  19.0k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  260|  1.29M|        unsafe fn splat(byte: u8) -> __m256i {
  261|  1.29M|            _mm256_set1_epi8(byte as i8)
  262|  1.29M|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  265|  25.1k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  266|  25.1k|            _mm256_load_si256(data as *const __m256i)
  267|  25.1k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  270|   603k|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  271|   603k|            _mm256_loadu_si256(data as *const __m256i)
  272|   603k|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  280|  1.25M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  281|  1.25M|            _mm256_cmpeq_epi8(self, vector2)
  282|  1.25M|        }
_RNvXNtNtCs87YssFN4ISD_6memchr6vector7x86avx2NtNtNtCsd3ZSx5keFHB_4core9core_arch3x867___m256iNtB4_6Vector2or:
  290|   634k|        unsafe fn or(self, vector2: Self) -> __m256i {
  291|   634k|            _mm256_or_si256(self, vector2)
  292|   634k|        }

_RNvMs2_NtCs1sMlb0BTjBE_9once_cell3impINtB5_8OnceCellNtNtCsgcnyUjfByoh_5alloc6string6StringE14is_initializedCs1VO2i0pKgPs_13libfuzzer_sys:
   49|    786|    pub(crate) fn is_initialized(&self) -> bool {
   50|    786|        // An `Acquire` load is enough because that makes all the initialization
   51|    786|        // operations visible to us, and, this being a fast path, weaker
   52|    786|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    786|        // `SeqCst` operations on the slow path.
   54|    786|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    786|    }

_RNvMs4_NtCs1sMlb0BTjBE_9once_cell4syncINtB5_8OnceCellNtNtCsgcnyUjfByoh_5alloc6string6StringE3getCs1VO2i0pKgPs_13libfuzzer_sys:
  963|    786|        pub fn get(&self) -> Option<&T> {
  964|    786|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|    786|                None
  969|       |            }
  970|    786|        }

_RNvMs_NtCs8axhQK3AMfh_9quick_xml8encodingNtB4_7Decoder6decode:
   82|    433|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|    433|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|    355|        decoded
   90|    433|    }

_RNvXs_NtCs8axhQK3AMfh_9quick_xml6errorsNtB4_5ErrorINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtNtBR_3str5error9Utf8ErrorE4fromB6_:
   81|     78|    fn from(error: Utf8Error) -> Error {
   82|     78|        Error::NonDecodable(Some(error))
   83|     78|    }
_RNvXs1_NtCs8axhQK3AMfh_9quick_xml6errorsNtB5_5ErrorINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtB7_7escapei11EscapeErrorE4fromB7_:
   97|     73|    fn from(error: EscapeError) -> Error {
   98|     73|        Error::EscapeError(error)
   99|     73|    }

_RINvNtCs8axhQK3AMfh_9quick_xml7escapei13unescape_withNCNvMs7_NtB4_6eventsNtBX_9BytesText8unescape0EB4_:
  162|    269|pub fn unescape_with<'input, 'entity, F>(
  163|    269|    raw: &'input str,
  164|    269|    mut resolve_entity: F,
  165|    269|) -> Result<Cow<'input, str>, EscapeError>
  166|    269|where
  167|    269|    // the lifetime of the output comes from a capture or is `'static`
  168|    269|    F: FnMut(&str) -> Option<&'entity str>,
  169|    269|{
  170|    269|    let bytes = raw.as_bytes();
  171|    269|    let mut unescaped = None;
  172|    269|    let mut last_end = 0;
  173|    269|    let mut iter = memchr2_iter(b'&', b';', bytes);
  174|  2.67k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  175|  2.47k|        match iter.next() {
  176|  2.46k|            Some(end) if bytes[end] == b';' => {
  177|  2.46k|                // append valid data
  178|  2.46k|                if unescaped.is_none() {
  179|    196|                    unescaped = Some(String::with_capacity(raw.len()));
  180|  2.26k|                }
  181|  2.46k|                let unescaped = unescaped.as_mut().expect("initialized");
  182|  2.46k|                unescaped.push_str(&raw[last_end..start]);
  183|  2.46k|
  184|  2.46k|                // search for character correctness
  185|  2.46k|                let pat = &raw[start + 1..end];
  186|  2.46k|                if let Some(entity) = pat.strip_prefix('#') {
  187|  1.93k|                    let codepoint = parse_number(entity, start..end)?;
  188|  1.91k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  189|    531|                } else if let Some(value) = named_entity(pat) {
  190|    491|                    unescaped.push_str(value);
  191|    491|                } else if let Some(value) = resolve_entity(pat) {
  192|      0|                    unescaped.push_str(value);
  193|      0|                } else {
  194|     40|                    return Err(EscapeError::UnrecognizedSymbol(
  195|     40|                        start + 1..end,
  196|     40|                        pat.to_string(),
  197|     40|                    ));
  198|       |                }
  199|       |
  200|  2.40k|                last_end = end + 1;
  201|       |            }
  202|     11|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  203|       |        }
  204|       |    }
  205|       |
  206|    196|    if let Some(mut unescaped) = unescaped {
  207|    129|        if let Some(raw) = raw.get(last_end..) {
  208|    129|            unescaped.push_str(raw);
  209|    129|        }
  210|    129|        Ok(Cow::Owned(unescaped))
  211|       |    } else {
  212|     67|        Ok(Cow::Borrowed(raw))
  213|       |    }
  214|    269|}
_RNCINvNtCs8axhQK3AMfh_9quick_xml7escapei13unescape_withNCNvMs7_NtB6_6eventsNtBZ_9BytesText8unescape0E0B6_:
  174|  4.08k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCs8axhQK3AMfh_9quick_xml7escapei12named_entity:
  217|    531|fn named_entity(name: &str) -> Option<&str> {
  218|       |    // match over strings are not allowed in const functions
  219|    531|    let s = match name.as_bytes() {
  220|    531|        b"lt" => "<",
  221|     79|        b"gt" => ">",
  222|    242|        b"amp" => "&",
  223|    165|        b"apos" => "'",
  224|     74|        b"quot" => "\"",
  225|     40|        _ => return None,
  226|       |    };
  227|    491|    Some(s)
  228|    531|}
_RNvNtCs8axhQK3AMfh_9quick_xml7escapei12parse_number:
 1694|  1.93k|fn parse_number(bytes: &str, range: Range<usize>) -> Result<char, EscapeError> {
 1695|  1.93k|    let code = if let Some(hex_digits) = bytes.strip_prefix('x') {
 1696|    482|        parse_hexadecimal(hex_digits)
 1697|       |    } else {
 1698|  1.45k|        parse_decimal(bytes)
 1699|     15|    }?;
 1700|  1.91k|    if code == 0 {
 1701|      4|        return Err(EscapeError::EntityWithNull(range));
 1702|  1.91k|    }
 1703|  1.91k|    match std::char::from_u32(code) {
 1704|  1.91k|        Some(c) => Ok(c),
 1705|      3|        None => Err(EscapeError::InvalidCodepoint(code)),
 1706|       |    }
 1707|  1.93k|}
_RNvNtCs8axhQK3AMfh_9quick_xml7escapei17parse_hexadecimal:
 1709|    482|fn parse_hexadecimal(bytes: &str) -> Result<u32, EscapeError> {
 1710|    482|    // maximum code is 0x10FFFF => 6 characters
 1711|    482|    if bytes.len() > 6 {
 1712|      1|        return Err(EscapeError::TooLongHexadecimal);
 1713|    481|    }
 1714|    481|    let mut code = 0;
 1715|  1.49k|    for b in bytes.bytes() {
 1716|  1.49k|        code <<= 4;
 1717|  1.49k|        code += match b {
 1718|  1.48k|            b'0'..=b'9' => b - b'0',
 1719|     66|            b'a'..=b'f' => b - b'a' + 10,
 1720|     70|            b'A'..=b'F' => b - b'A' + 10,
 1721|      4|            b => return Err(EscapeError::InvalidHexadecimal(b as char)),
 1722|       |        } as u32;
 1723|       |    }
 1724|    477|    Ok(code)
 1725|    482|}
_RNvNtCs8axhQK3AMfh_9quick_xml7escapei13parse_decimal:
 1727|  1.45k|fn parse_decimal(bytes: &str) -> Result<u32, EscapeError> {
 1728|  1.45k|    // maximum code is 0x10FFFF = 1114111 => 7 characters
 1729|  1.45k|    if bytes.len() > 7 {
 1730|      1|        return Err(EscapeError::TooLongDecimal);
 1731|  1.44k|    }
 1732|  1.44k|    let mut code = 0;
 1733|  6.92k|    for b in bytes.bytes() {
 1734|  6.92k|        code *= 10;
 1735|  6.92k|        code += match b {
 1736|  6.91k|            b'0'..=b'9' => b - b'0',
 1737|      9|            b => return Err(EscapeError::InvalidDecimal(b as char)),
 1738|       |        } as u32;
 1739|       |    }
 1740|  1.44k|    Ok(code)
 1741|  1.45k|}

_RNvMNtCs8axhQK3AMfh_9quick_xml6eventsNtB2_10BytesStart10local_nameCse999pv0QDcz_13oxigraph_fuzz:
  179|     97|    pub fn local_name(&self) -> LocalName {
  180|     97|        self.name().into()
  181|     97|    }
_RNvMNtCs8axhQK3AMfh_9quick_xml6eventsNtB2_10BytesStart4nameCse999pv0QDcz_13oxigraph_fuzz:
  170|    194|    pub fn name(&self) -> QName {
  171|    194|        QName(&self.buf[..self.name_len])
  172|    194|    }
_RNvMNtCs8axhQK3AMfh_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
   79|     97|    pub(crate) fn wrap(content: &'a [u8], name_len: usize) -> Self {
   80|     97|        BytesStart {
   81|     97|            buf: Cow::Borrowed(content),
   82|     97|            name_len,
   83|     97|        }
   84|     97|    }
_RINvMs7_NtCs8axhQK3AMfh_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  684|  1.72k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  685|  1.72k|        Self {
  686|  1.72k|            content: content.into(),
  687|  1.72k|            decoder,
  688|  1.72k|        }
  689|  1.72k|    }
_RNvMs7_NtCs8axhQK3AMfh_9quick_xml6eventsNtB5_9BytesText8unescape:
  733|    297|    pub fn unescape(&self) -> Result<Cow<'a, str>> {
  734|    297|        self.unescape_with(|_| None)
  735|    297|    }
_RNCNvMs7_NtCs8axhQK3AMfh_9quick_xml6eventsNtB7_9BytesText8unescape0B9_:
  734|     40|        self.unescape_with(|_| None)
_RINvMs7_NtCs8axhQK3AMfh_9quick_xml6eventsNtB6_9BytesText13unescape_withNCNvB2_8unescape0EB8_:
  741|    297|    pub fn unescape_with<'entity>(
  742|    297|        &self,
  743|    297|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  744|    297|    ) -> Result<Cow<'a, str>> {
  745|    297|        let decoded = match &self.content {
  746|    297|            Cow::Borrowed(bytes) => self.decoder.decode(bytes)?,
  747|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  748|      0|            Cow::Owned(bytes) => self.decoder.decode(bytes)?.into_owned().into(),
  749|       |        };
  750|       |
  751|    269|        match unescape_with(&decoded, resolve_entity)? {
  752|       |            // Because result is borrowed, no replacements was done and we can use original string
  753|     67|            Cow::Borrowed(_) => Ok(decoded),
  754|    129|            Cow::Owned(s) => Ok(s.into()),
  755|       |        }
  756|    297|    }
_RINvMsa_NtCs8axhQK3AMfh_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  823|     66|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  824|     66|        Self {
  825|     66|            content: content.into(),
  826|     66|            decoder,
  827|     66|        }
  828|     66|    }

_RNCNvXs4_NtCs8axhQK3AMfh_9quick_xml4nameNtB7_9LocalNameINtNtCsd3ZSx5keFHB_4core7convert4FromNtB7_5QNameE4from0Cse999pv0QDcz_13oxigraph_fuzz:
  174|      3|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
_RNvMNtCs8axhQK3AMfh_9quick_xml4nameNtB2_5QName5index:
  111|     97|    fn index(&self) -> Option<usize> {
  112|     97|        memchr(b':', self.0)
  113|     97|    }
_RNvXs0_NtCs8axhQK3AMfh_9quick_xml4nameNtB5_5QNameINtNtCsd3ZSx5keFHB_4core7convert5AsRefShE6as_refCse999pv0QDcz_13oxigraph_fuzz:
  124|     97|    fn as_ref(&self) -> &[u8] {
  125|     97|        self.0
  126|     97|    }
_RNvXs3_NtCs8axhQK3AMfh_9quick_xml4nameNtB5_9LocalNameINtNtCsd3ZSx5keFHB_4core7convert5AsRefShE6as_refCse999pv0QDcz_13oxigraph_fuzz:
  154|     97|    fn as_ref(&self) -> &[u8] {
  155|     97|        self.0
  156|     97|    }
_RNvXs4_NtCs8axhQK3AMfh_9quick_xml4nameNtB5_9LocalNameINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_5QNameE4fromCse999pv0QDcz_13oxigraph_fuzz:
  173|     97|    fn from(name: QName<'a>) -> Self {
  174|     97|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
  175|     97|    }

_RNCNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB6_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE15skip_whitespace0Cse999pv0QDcz_13oxigraph_fuzz:
  252|  3.23k|    impl_buffered_source!();
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE12read_elementCse999pv0QDcz_13oxigraph_fuzz:
  154|     97|        $($async)? fn read_element $(<$lf>)? (
  155|     97|            &mut self,
  156|     97|            buf: &'b mut Vec<u8>,
  157|     97|            position: &mut usize,
  158|     97|        ) -> Result<Option<&'b [u8]>> {
  159|     97|            let mut state = ReadElementState::Elem;
  160|     97|            let mut read = 0;
  161|     97|
  162|     97|            let start = buf.len();
  163|       |            loop {
  164|    191|                match self $(.$reader)? .fill_buf() $(.$await)? {
  165|    191|                    Ok(n) if n.is_empty() => break,
  166|     97|                    Ok(available) => {
  167|     97|                        if let Some((consumed, used)) = state.change(available) {
  168|      3|                            buf.extend_from_slice(consumed);
  169|      3|
  170|      3|                            self $(.$reader)? .consume(used);
  171|      3|                            read += used;
  172|      3|
  173|      3|                            // Position now just after the `>` symbol
  174|      3|                            *position += read;
  175|      3|                            break;
  176|     94|                        } else {
  177|     94|                            // The `>` symbol not yet found, continue reading
  178|     94|                            buf.extend_from_slice(available);
  179|     94|
  180|     94|                            let used = available.len();
  181|     94|                            self $(.$reader)? .consume(used);
  182|     94|                            read += used;
  183|     94|                        }
  184|       |                    }
  185|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  186|      0|                    Err(e) => {
  187|      0|                        *position += read;
  188|      0|                        return Err(Error::Io(e.into()));
  189|       |                    }
  190|       |                };
  191|       |            }
  192|       |
  193|     97|            if read == 0 {
  194|      0|                Ok(None)
  195|       |            } else {
  196|     97|                Ok(Some(&buf[start..]))
  197|       |            }
  198|     97|        }
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE15remove_utf8_bomCse999pv0QDcz_13oxigraph_fuzz:
   18|    786|        $($async)? fn remove_utf8_bom(&mut self) -> Result<()> {
   19|       |            use crate::encoding::UTF8_BOM;
   20|       |
   21|    786|            loop {
   22|    786|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   23|    786|                    Ok(n) => {
   24|    786|                        if n.starts_with(UTF8_BOM) {
   25|      1|                            self $(.$reader)? .consume(UTF8_BOM.len());
   26|    785|                        }
   27|    786|                        Ok(())
   28|       |                    },
   29|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   30|      0|                    Err(e) => Err(Error::Io(e.into())),
   31|       |                };
   32|       |            }
   33|    786|        }
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE15skip_whitespaceCse999pv0QDcz_13oxigraph_fuzz:
  200|  2.27k|        $($async)? fn skip_whitespace(&mut self, position: &mut usize) -> Result<()> {
  201|  2.40k|            loop {
  202|  2.40k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  203|  2.40k|                    Ok(n) => {
  204|  2.40k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
  205|  2.40k|                        if count > 0 {
  206|    124|                            self $(.$reader)? .consume(count);
  207|    124|                            *position += count;
  208|    124|                            continue;
  209|       |                        } else {
  210|  2.27k|                            Ok(())
  211|       |                        }
  212|       |                    }
  213|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  214|      0|                    Err(e) => Err(Error::Io(e.into())),
  215|       |                };
  216|       |            }
  217|  2.27k|        }
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE16read_bytes_untilCse999pv0QDcz_13oxigraph_fuzz:
   52|  1.01k|        $($async)? fn read_bytes_until $(<$lf>)? (
   53|  1.01k|            &mut self,
   54|  1.01k|            byte: u8,
   55|  1.01k|            buf: &'b mut Vec<u8>,
   56|  1.01k|            position: &mut usize,
   57|  1.01k|        ) -> Result<Option<&'b [u8]>> {
   58|       |            // search byte must be within the ascii range
   59|      0|            debug_assert!(byte.is_ascii());
   60|       |
   61|  1.01k|            let mut read = 0;
   62|  1.01k|            let mut done = false;
   63|  1.01k|            let start = buf.len();
   64|  1.96k|            while !done {
   65|    948|                let used = {
   66|  1.36k|                    let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   67|  1.36k|                        Ok(n) if n.is_empty() => break,
   68|    948|                        Ok(n) => n,
   69|      0|                        Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   70|      0|                        Err(e) => {
   71|      0|                            *position += read;
   72|      0|                            return Err(Error::Io(e.into()));
   73|       |                        }
   74|       |                    };
   75|       |
   76|    948|                    match memchr::memchr(byte, available) {
   77|    602|                        Some(i) => {
   78|    602|                            buf.extend_from_slice(&available[..i]);
   79|    602|                            done = true;
   80|    602|                            i + 1
   81|       |                        }
   82|       |                        None => {
   83|    346|                            buf.extend_from_slice(available);
   84|    346|                            available.len()
   85|       |                        }
   86|       |                    }
   87|       |                };
   88|    948|                self $(.$reader)? .consume(used);
   89|    948|                read += used;
   90|       |            }
   91|  1.01k|            *position += read;
   92|  1.01k|
   93|  1.01k|            if read == 0 {
   94|     66|                Ok(None)
   95|       |            } else {
   96|    948|                Ok(Some(&buf[start..]))
   97|       |            }
   98|  1.01k|        }
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE17read_bang_elementCse999pv0QDcz_13oxigraph_fuzz:
  100|  1.16k|        $($async)? fn read_bang_element $(<$lf>)? (
  101|  1.16k|            &mut self,
  102|  1.16k|            buf: &'b mut Vec<u8>,
  103|  1.16k|            position: &mut usize,
  104|  1.16k|        ) -> Result<Option<(BangType, &'b [u8])>> {
  105|  1.16k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  106|  1.16k|            // start with it.
  107|  1.16k|            let start = buf.len();
  108|  1.16k|            let mut read = 1;
  109|  1.16k|            buf.push(b'!');
  110|  1.16k|            self $(.$reader)? .consume(1);
  111|       |
  112|  1.16k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  113|       |
  114|  1.28k|            loop {
  115|  1.28k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  116|       |                    // Note: Do not update position, so the error points to
  117|       |                    // somewhere sane rather than at the EOF
  118|  1.28k|                    Ok(n) if n.is_empty() => return Err(bang_type.to_err()),
  119|  1.15k|                    Ok(available) => {
  120|       |                        // We only parse from start because we don't want to consider
  121|       |                        // whatever is in the buffer before the bang element
  122|  1.15k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  123|  1.02k|                            buf.extend_from_slice(consumed);
  124|  1.02k|
  125|  1.02k|                            self $(.$reader)? .consume(used);
  126|  1.02k|                            read += used;
  127|  1.02k|
  128|  1.02k|                            *position += read;
  129|  1.02k|                            break;
  130|    128|                        } else {
  131|    128|                            buf.extend_from_slice(available);
  132|    128|
  133|    128|                            let used = available.len();
  134|    128|                            self $(.$reader)? .consume(used);
  135|    128|                            read += used;
  136|    128|                        }
  137|       |                    }
  138|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  139|      0|                    Err(e) => {
  140|      0|                        *position += read;
  141|      0|                        return Err(Error::Io(e.into()));
  142|       |                    }
  143|       |                }
  144|       |            }
  145|       |
  146|  1.02k|            if read == 0 {
  147|      0|                Ok(None)
  148|       |            } else {
  149|  1.02k|                Ok(Some((bang_type, &buf[start..])))
  150|       |            }
  151|  1.16k|        }
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE8peek_oneCse999pv0QDcz_13oxigraph_fuzz:
  233|  5.35k|        $($async)? fn peek_one(&mut self) -> Result<Option<u8>> {
  234|  5.35k|            loop {
  235|  5.35k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  236|  5.35k|                    Ok(n) if n.is_empty() => Ok(None),
  237|  5.28k|                    Ok(n) => Ok(Some(n[0])),
  238|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  239|      0|                    Err(e) => Err(Error::Io(e.into())),
  240|       |                };
  241|       |            }
  242|  5.35k|        }
_RNvXNtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEINtB4_9XmlSourceQINtNtCsgcnyUjfByoh_5alloc3vec3VechEE8skip_oneCse999pv0QDcz_13oxigraph_fuzz:
  219|  2.27k|        $($async)? fn skip_one(&mut self, byte: u8, position: &mut usize) -> Result<bool> {
  220|       |            // search byte must be within the ascii range
  221|      0|            debug_assert!(byte.is_ascii());
  222|       |
  223|  2.27k|            match self.peek_one() $(.$await)? ? {
  224|  2.21k|                Some(b) if b == byte => {
  225|  1.91k|                    *position += 1;
  226|  1.91k|                    self $(.$reader)? .consume(1);
  227|  1.91k|                    Ok(true)
  228|       |                }
  229|    363|                _ => Ok(false),
  230|       |            }
  231|  2.27k|        }
_RNvMs_NtNtCs8axhQK3AMfh_9quick_xml6reader15buffered_readerINtB6_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE15read_event_intoCse999pv0QDcz_13oxigraph_fuzz:
  304|  2.27k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  305|  2.27k|        self.read_event_impl(buf)
  306|  2.27k|    }

_RNvMs1_NtCs8axhQK3AMfh_9quick_xml6readerNtB5_8BangType3new:
  807|  1.16k|    fn new(byte: Option<u8>) -> Result<Self> {
  808|  1.16k|        Ok(match byte {
  809|    117|            Some(b'[') => Self::CData,
  810|    593|            Some(b'-') => Self::Comment,
  811|    446|            Some(b'D') | Some(b'd') => Self::DocType,
  812|      5|            Some(b) => return Err(Error::UnexpectedBang(b)),
  813|      4|            None => return Err(Error::UnexpectedEof("Bang".to_string())),
  814|       |        })
  815|  1.16k|    }
_RNvMs1_NtCs8axhQK3AMfh_9quick_xml6readerNtB5_8BangType5parse:
  824|  1.15k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  825|  6.49k|        for i in memchr::memchr_iter(b'>', chunk) {
  826|  1.01k|            match self {
  827|  1.01k|                // Need to read at least 6 symbols (`!---->`) for properly finished comment
  828|  1.01k|                // <!----> - XML comment
  829|  1.01k|                //  012345 - i
  830|  1.01k|                Self::Comment if buf.len() + i > 4 => {
  831|    788|                    if chunk[..i].ends_with(b"--") {
  832|       |                        // We cannot strip last `--` from the buffer because we need it in case of
  833|       |                        // check_comments enabled option. XML standard requires that comment
  834|       |                        // will not end with `--->` sequence because this is a special case of
  835|       |                        // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
  836|    573|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  837|    215|                    }
  838|    215|                    // End sequence `-|->` was splitted at |
  839|    215|                    //        buf --/   \-- chunk
  840|    215|                    if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
  841|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  842|    215|                    }
  843|    215|                    // End sequence `--|>` was splitted at |
  844|    215|                    //         buf --/   \-- chunk
  845|    215|                    if i == 0 && buf.ends_with(b"--") {
  846|      0|                        return Some((&[], i + 1)); // +1 for `>`
  847|    215|                    }
  848|       |                }
  849|    229|                Self::Comment => {}
  850|       |                Self::CData => {
  851|  1.09k|                    if chunk[..i].ends_with(b"]]") {
  852|     73|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  853|  1.02k|                    }
  854|  1.02k|                    // End sequence `]|]>` was splitted at |
  855|  1.02k|                    //        buf --/   \-- chunk
  856|  1.02k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
  857|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
  858|  1.02k|                    }
  859|  1.02k|                    // End sequence `]]|>` was splitted at |
  860|  1.02k|                    //         buf --/   \-- chunk
  861|  1.02k|                    if i == 0 && buf.ends_with(b"]]") {
  862|      0|                        return Some((&[], i + 1)); // +1 for `>`
  863|  1.02k|                    }
  864|       |                }
  865|       |                Self::DocType => {
  866|  4.37k|                    let content = &chunk[..i];
  867|  4.37k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
  868|  4.37k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
  869|  4.37k|                        .sum::<i32>();
  870|  4.37k|                    if balance == 0 {
  871|    382|                        return Some((content, i + 1)); // +1 for `>`
  872|  3.99k|                    }
  873|       |                }
  874|       |            }
  875|       |        }
  876|    128|        None
  877|  1.15k|    }
_RNvMs2_NtCs8axhQK3AMfh_9quick_xml6readerNtB5_16ReadElementState6change:
  904|     97|    fn change<'b>(&mut self, chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
  905|  1.81k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', chunk) {
  906|  1.81k|            *self = match (*self, chunk[i]) {
  907|       |                // only allowed to match `>` while we are in state `Elem`
  908|      3|                (Self::Elem, b'>') => return Some((&chunk[..i], i + 1)),
  909|    414|                (Self::Elem, b'\'') => Self::SingleQ,
  910|    263|                (Self::Elem, b'\"') => Self::DoubleQ,
  911|       |
  912|       |                // the only end_byte that gets us out if the same character
  913|    635|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Elem,
  914|       |
  915|       |                // all other bytes: no state change
  916|    499|                _ => *self,
  917|       |            };
  918|       |        }
  919|     94|        None
  920|     97|    }
_RINvMs0_NtCs8axhQK3AMfh_9quick_xml6readerINtB6_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE15read_event_implQINtNtCsgcnyUjfByoh_5alloc3vec3VechEECse999pv0QDcz_13oxigraph_fuzz:
  645|  2.27k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  646|  2.27k|    where
  647|  2.27k|        R: XmlSource<'i, B>,
  648|  2.27k|    {
  649|  4.19k|        read_event_impl!(self, buf, self.reader, read_until_open, read_until_close)
  650|  2.27k|    }
_RINvMs0_NtCs8axhQK3AMfh_9quick_xml6readerINtB6_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE15read_until_openQINtNtCsgcnyUjfByoh_5alloc3vec3VechEECse999pv0QDcz_13oxigraph_fuzz:
  656|  2.27k|    fn read_until_open<'i, B>(&mut self, buf: B) -> Result<std::result::Result<Event<'i>, B>>
  657|  2.27k|    where
  658|  2.27k|        R: XmlSource<'i, B>,
  659|  2.27k|    {
  660|  2.27k|        read_until_open!(self, buf, self.reader, read_event_impl)
  661|  2.27k|    }
_RINvMs0_NtCs8axhQK3AMfh_9quick_xml6readerINtB6_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE16read_until_closeQINtNtCsgcnyUjfByoh_5alloc3vec3VechEECse999pv0QDcz_13oxigraph_fuzz:
  665|  1.91k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  666|  1.91k|    where
  667|  1.91k|        R: XmlSource<'i, B>,
  668|  1.91k|    {
  669|  1.91k|        read_until_close!(self, buf, self.reader)
  670|  1.91k|    }
_RNvMNtCs8axhQK3AMfh_9quick_xml6readerINtB2_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE11from_readerCse999pv0QDcz_13oxigraph_fuzz:
  533|    786|    pub fn from_reader(reader: R) -> Self {
  534|    786|        Self {
  535|    786|            reader,
  536|    786|            state: ReaderState::default(),
  537|    786|        }
  538|    786|    }
_RNvMNtCs8axhQK3AMfh_9quick_xml6readerINtB2_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE21expand_empty_elementsCse999pv0QDcz_13oxigraph_fuzz:
   33|    786|        pub fn expand_empty_elements(&mut self, val: bool) -> &mut Self {
   34|    786|            self $(.$holder)? .state.expand_empty_elements = val;
   35|    786|            self
   36|    786|        }
_RNvMNtCs8axhQK3AMfh_9quick_xml6readerINtB2_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE9trim_textCse999pv0QDcz_13oxigraph_fuzz:
   60|    786|        pub fn trim_text(&mut self, val: bool) -> &mut Self {
   61|    786|            self $(.$holder)? .state.trim_text_start = val;
   62|    786|            self $(.$holder)? .state.trim_text_end = val;
   63|    786|            self
   64|    786|        }
_RNvMs_NtCs8axhQK3AMfh_9quick_xml6readerINtB4_6ReaderINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShEE7decoderCse999pv0QDcz_13oxigraph_fuzz:
  635|     97|    pub fn decoder(&self) -> Decoder {
  636|     97|        self.state.decoder()
  637|     97|    }
_RNvMs1_NtCs8axhQK3AMfh_9quick_xml6readerNtB5_8BangType6to_errCse999pv0QDcz_13oxigraph_fuzz:
  879|    128|    fn to_err(&self) -> Error {
  880|    128|        let bang_str = match self {
  881|     44|            Self::CData => "CData",
  882|     20|            Self::Comment => "Comment",
  883|     64|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|    128|        Error::UnexpectedEof(bang_str.to_string())
  886|    128|    }
_RNvNtCs8axhQK3AMfh_9quick_xml6reader13is_whitespaceCse999pv0QDcz_13oxigraph_fuzz:
  925|  3.23k|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  3.23k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  3.23k|}
_RNCNvMs1_NtCs8axhQK3AMfh_9quick_xml6readerNtB7_8BangType5parse0B9_:
  868|   631k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs1_NtCs8axhQK3AMfh_9quick_xml6readerNtB5_8BangType6to_errB7_:
  879|     97|    fn to_err(&self) -> Error {
  880|     97|        let bang_str = match self {
  881|      7|            Self::CData => "CData",
  882|      2|            Self::Comment => "Comment",
  883|     88|            Self::DocType => "DOCTYPE",
  884|       |        };
  885|     97|        Error::UnexpectedEof(bang_str.to_string())
  886|     97|    }
_RNvNtCs8axhQK3AMfh_9quick_xml6reader13is_whitespaceB3_:
  925|  7.94k|pub(crate) const fn is_whitespace(b: u8) -> bool {
  926|  7.94k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  927|  7.94k|}

_RNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   68|    297|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> Result<Event<'b>> {
   69|    297|        let mut content = bytes;
   70|    297|
   71|    297|        if self.trim_text_end {
   72|    297|            // Skip the ending '<'
   73|    297|            let len = bytes
   74|    297|                .iter()
   75|    297|                .rposition(|&b| !is_whitespace(b))
   76|    297|                .map_or_else(|| bytes.len(), |p| p + 1);
   77|    297|            content = &bytes[..len];
   78|    297|        }
   79|       |
   80|    297|        Ok(Event::Text(BytesText::wrap(content, self.decoder())))
   81|    297|    }
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState9emit_text0B8_:
   75|  1.08k|                .rposition(|&b| !is_whitespace(b))
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState9emit_texts0_0B8_:
   76|    297|                .map_or_else(|| bytes.len(), |p| p + 1);
_RNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   85|  1.02k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   86|  1.02k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|       |        };
   89|       |
   90|  1.02k|        let len = buf.len();
   91|    455|        match bang_type {
   92|    573|            BangType::Comment if buf.starts_with(b"!--") => {
   93|      0|                debug_assert!(buf.ends_with(b"--"));
   94|    571|                if self.check_comments {
   95|       |                    // search if '--' not in comments
   96|      0|                    if let Some(p) = memchr::memchr_iter(b'-', &buf[3..len - 2])
   97|      0|                        .position(|p| buf[3 + p + 1] == b'-')
   98|       |                    {
   99|      0|                        self.offset += len - p;
  100|      0|                        return Err(Error::UnexpectedToken("--".to_string()));
  101|      0|                    }
  102|    571|                }
  103|    571|                Ok(Event::Comment(BytesText::wrap(
  104|    571|                    &buf[3..len - 2],
  105|    571|                    self.decoder(),
  106|    571|                )))
  107|       |            }
  108|     73|            BangType::CData if uncased_starts_with(buf, b"![CDATA[") => {
  109|      0|                debug_assert!(buf.ends_with(b"]]"));
  110|     66|                Ok(Event::CData(BytesCData::wrap(
  111|     66|                    &buf[8..len - 2],
  112|     66|                    self.decoder(),
  113|     66|                )))
  114|       |            }
  115|    382|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  116|    294|                let start = buf[8..]
  117|    294|                    .iter()
  118|    294|                    .position(|b| !is_whitespace(*b))
  119|    294|                    .unwrap_or(len - 8);
  120|    294|                if start + 8 >= len {
  121|     33|                    return Err(Error::EmptyDocType);
  122|    261|                }
  123|    261|                Ok(Event::DocType(BytesText::wrap(
  124|    261|                    &buf[8 + start..],
  125|    261|                    self.decoder(),
  126|    261|                )))
  127|       |            }
  128|     97|            _ => Err(bang_type.to_err()),
  129|       |        }
  130|  1.02k|    }
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   86|    455|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   87|    455|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   88|    455|        };
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState9emit_bangs0_0B8_:
  118|  1.80k|                    .position(|b| !is_whitespace(*b))
_RNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  134|     39|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  135|     39|        // Strip the `/` character. `content` contains data between `</` and `>`
  136|     39|        let content = &buf[1..];
  137|       |        // XML standard permits whitespaces after the markup name in closing tags.
  138|       |        // Let's strip them from the buffer before comparing tag names.
  139|     39|        let name = if self.trim_markup_names_in_closing_tags {
  140|     39|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  141|      8|                &content[..pos_end_name + 1]
  142|       |            } else {
  143|     31|                content
  144|       |            }
  145|       |        } else {
  146|      0|            content
  147|       |        };
  148|       |
  149|     39|        let decoder = self.decoder();
  150|     39|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|       |            *offset -= buf.len();
  152|       |            Err(Error::EndEventMismatch {
  153|       |                expected,
  154|       |                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|       |            })
  156|       |        };
  157|       |
  158|       |        // Get the index in self.opened_buffer of the name of the last opened tag
  159|     39|        match self.opened_starts.pop() {
  160|      0|            Some(start) => {
  161|      0|                if self.check_end_names {
  162|      0|                    let expected = &self.opened_buffer[start..];
  163|      0|                    if name != expected {
  164|      0|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  165|      0|                        // #513: In order to allow error recovery we should drop content of the buffer
  166|      0|                        self.opened_buffer.truncate(start);
  167|      0|
  168|      0|                        return mismatch_err(expected, name, &mut self.offset);
  169|      0|                    }
  170|      0|                }
  171|       |
  172|      0|                self.opened_buffer.truncate(start);
  173|       |            }
  174|       |            None => {
  175|     39|                if self.check_end_names {
  176|     39|                    return mismatch_err("".to_string(), &buf[1..], &mut self.offset);
  177|      0|                }
  178|       |            }
  179|       |        }
  180|       |
  181|      0|        Ok(Event::End(BytesEnd::wrap(name.into())))
  182|     39|    }
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  140|    851|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState8emit_ends_0B8_:
  150|     39|        let mismatch_err = |expected: String, found: &[u8], offset: &mut usize| {
  151|     39|            *offset -= buf.len();
  152|     39|            Err(Error::EndEventMismatch {
  153|     39|                expected,
  154|     39|                found: decoder.decode(found).unwrap_or_default().into_owned(),
  155|     39|            })
  156|     39|        };
_RNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  186|    612|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  187|    612|        let len = buf.len();
  188|    612|        if len > 2 && buf[len - 1] == b'?' {
  189|    593|            if len > 5 && &buf[1..4] == b"xml" && is_whitespace(buf[4]) {
  190|      0|                let event = BytesDecl::from_start(BytesStart::wrap(&buf[1..len - 1], 3));
  191|      0|
  192|      0|                // Try getting encoding from the declaration event
  193|      0|                #[cfg(feature = "encoding")]
  194|      0|                if self.encoding.can_be_refined() {
  195|      0|                    if let Some(encoding) = event.encoder() {
  196|      0|                        self.encoding = EncodingRef::XmlDetected(encoding);
  197|      0|                    }
  198|      0|                }
  199|      0|
  200|      0|                Ok(Event::Decl(event))
  201|       |            } else {
  202|    593|                Ok(Event::PI(BytesText::wrap(&buf[1..len - 1], self.decoder())))
  203|       |            }
  204|       |        } else {
  205|     19|            self.offset -= len;
  206|     19|            Err(Error::UnexpectedEof("XmlDecl".to_string()))
  207|       |        }
  208|    612|    }
_RNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  214|     97|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Result<Event<'b>> {
  215|     97|        let len = content.len();
  216|     97|        let name_end = content
  217|     97|            .iter()
  218|     97|            .position(|&b| is_whitespace(b))
  219|     97|            .unwrap_or(len);
  220|     97|        if let Some(&b'/') = content.last() {
  221|       |            // This is self-closed tag `<something/>`
  222|      2|            let name_len = if name_end < len { name_end } else { len - 1 };
  223|      2|            let event = BytesStart::wrap(&content[..len - 1], name_len);
  224|      2|
  225|      2|            if self.expand_empty_elements {
  226|      2|                self.state = ParseState::Empty;
  227|      2|                self.opened_starts.push(self.opened_buffer.len());
  228|      2|                self.opened_buffer.extend(&content[..name_len]);
  229|      2|                Ok(Event::Start(event))
  230|       |            } else {
  231|      0|                Ok(Event::Empty(event))
  232|       |            }
  233|       |        } else {
  234|       |            // #514: Always store names event when .check_end_names == false,
  235|       |            // because checks can be temporary disabled and when they would be
  236|       |            // enabled, we should have that information
  237|     95|            self.opened_starts.push(self.opened_buffer.len());
  238|     95|            self.opened_buffer.extend(&content[..name_end]);
  239|     95|            Ok(Event::Start(BytesStart::wrap(content, name_end)))
  240|       |        }
  241|     97|    }
_RNCNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderState10emit_start0B8_:
  218|  4.19k|            .position(|&b| is_whitespace(b))
_RNvMNtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  261|  1.92k|    pub fn decoder(&self) -> Decoder {
  262|  1.92k|        Decoder {
  263|  1.92k|            #[cfg(feature = "encoding")]
  264|  1.92k|            encoding: self.encoding.encoding(),
  265|  1.92k|        }
  266|  1.92k|    }
_RNvXs_NtNtCs8axhQK3AMfh_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCsd3ZSx5keFHB_4core7default7Default7default:
  270|    786|    fn default() -> Self {
  271|    786|        Self {
  272|    786|            offset: 0,
  273|    786|            state: ParseState::Init,
  274|    786|            expand_empty_elements: false,
  275|    786|            trim_text_start: false,
  276|    786|            trim_text_end: false,
  277|    786|            trim_markup_names_in_closing_tags: true,
  278|    786|            check_end_names: true,
  279|    786|            check_comments: false,
  280|    786|            opened_buffer: Vec::new(),
  281|    786|            opened_starts: Vec::new(),
  282|    786|
  283|    786|            #[cfg(feature = "encoding")]
  284|    786|            encoding: EncodingRef::Implicit(UTF_8),
  285|    786|        }
  286|    786|    }

_RNvNtCse999pv0QDcz_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|    786|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|    786|    let parser = QueryResultsParser::from_format(format);
    8|    786|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|    786|    let Ok(reader) = parser.parse_read(data) else {
   11|    786|        return;
   12|       |    };
   13|      0|    match reader {
   14|      0|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|      0|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|      0|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|      0|            let mut writer = serializer
   21|      0|                .serialize_solutions_to_write(
   22|      0|                    Vec::new(),
   23|      0|                    solutions
   24|      0|                        .get(0)
   25|      0|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|      0|                )
   27|      0|                .unwrap();
   28|      0|            for solution in &solutions {
   29|      0|                writer.write(solution).unwrap();
   30|      0|            }
   31|      0|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|      0|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|      0|                .parse_read(serialized.as_bytes())
   36|      0|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|      0|                .unwrap()
   38|       |            {
   39|      0|                assert_eq!(
   40|      0|                    roundtrip_solutions
   41|      0|                        .collect::<Result<Vec<_>, _>>()
   42|      0|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|      0|                        .unwrap(),
   44|      0|                    solutions
   45|      0|                )
   46|      0|            }
   47|       |        }
   48|      0|        FromReadQueryResultsReader::Boolean(value) => {
   49|      0|            // We try to write again
   50|      0|            let mut serialized = Vec::new();
   51|      0|            serializer
   52|      0|                .serialize_boolean_to_write(&mut serialized, value)
   53|      0|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      0|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      0|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|    786|}

_RINvMs5_NtCse261IoOUGNS_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsgcnyUjfByoh_5alloc6string6StringECse999pv0QDcz_13oxigraph_fuzz:
  108|    247|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    247|        Self {
  110|    247|            inner: SyntaxErrorKind::Msg {
  111|    247|                msg: msg.into(),
  112|    247|                location: None,
  113|    247|            },
  114|    247|        }
  115|    247|    }
_RINvMs5_NtCse261IoOUGNS_10sparesults5errorNtB6_11SyntaxError3msgReECse999pv0QDcz_13oxigraph_fuzz:
  108|     67|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|     67|        Self {
  110|     67|            inner: SyntaxErrorKind::Msg {
  111|     67|                msg: msg.into(),
  112|     67|                location: None,
  113|     67|            },
  114|     67|        }
  115|     67|    }
_RNvXs4_NtCse261IoOUGNS_10sparesults5errorNtB5_10ParseErrorINtNtCsd3ZSx5keFHB_4core7convert4FromNtNtCs8axhQK3AMfh_9quick_xml6errors5ErrorE4fromCse999pv0QDcz_13oxigraph_fuzz:
   71|    472|    fn from(error: quick_xml::Error) -> Self {
   72|    472|        match error {
   73|      0|            quick_xml::Error::Io(error) => Self::Io(match Arc::try_unwrap(error) {
   74|      0|                Ok(error) => error,
   75|      0|                Err(error) => io::Error::new(error.kind(), error),
   76|       |            }),
   77|    472|            _ => Self::Syntax(SyntaxError {
   78|    472|                inner: SyntaxErrorKind::Xml(error),
   79|    472|            }),
   80|       |        }
   81|    472|    }
_RNvXs1_NtCse261IoOUGNS_10sparesults5errorNtB5_10ParseErrorINtNtCsd3ZSx5keFHB_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|    314|    fn from(error: SyntaxError) -> Self {
   46|    314|        Self::Syntax(error)
   47|    314|    }

_RNvMNtCse261IoOUGNS_10sparesults6parserNtB2_18QueryResultsParser11from_formatCse999pv0QDcz_13oxigraph_fuzz:
   44|    786|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|    786|        Self { format }
   46|    786|    }
_RINvMNtCse261IoOUGNS_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECse999pv0QDcz_13oxigraph_fuzz:
   73|    786|    pub fn parse_read<R: Read>(
   74|    786|        &self,
   75|    786|        reader: R,
   76|    786|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|    786|        Ok(match self.format {
   78|    786|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|      0|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      0|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: SolutionsReaderKind::Json(solutions),
   96|      0|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      0|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|      0|                    solutions,
  103|      0|                    variables,
  104|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|      0|                    variables: variables.into(),
  106|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|      0|                }),
  108|       |            },
  109|       |        })
  110|    786|    }

_RNvMNtCse261IoOUGNS_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCse999pv0QDcz_13oxigraph_fuzz:
   55|    786|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|    786|        Self { format }
   57|    786|    }

_RINvNtCse261IoOUGNS_10sparesults3xml6decodeINtNtNtNtCseSrEFui006x_3std2io8buffered9bufreader9BufReaderRShENtNtCs8axhQK3AMfh_9quick_xml4name5QNameECse999pv0QDcz_13oxigraph_fuzz:
  660|     97|fn decode<'a, T>(
  661|     97|    reader: &Reader<T>,
  662|     97|    data: &'a impl AsRef<[u8]>,
  663|     97|) -> Result<Cow<'a, str>, ParseError> {
  664|     97|    Ok(reader.decoder().decode(data.as_ref())?)
  665|     97|}
_RNvMs0_NtCse261IoOUGNS_10sparesults3xmlINtB5_21XmlQueryResultsReaderRShE4readCse999pv0QDcz_13oxigraph_fuzz:
  231|    786|    pub fn read(source: R) -> Result<Self, ParseError> {
  232|    786|        enum State {
  233|    786|            Start,
  234|    786|            Sparql,
  235|    786|            Head,
  236|    786|            AfterHead,
  237|    786|            Boolean,
  238|    786|        }
  239|    786|
  240|    786|        let mut reader = Reader::from_reader(BufReader::new(source));
  241|    786|        reader.trim_text(true);
  242|    786|        reader.expand_empty_elements(true);
  243|    786|
  244|    786|        let mut buffer = Vec::default();
  245|    786|        let mut variables = Vec::default();
  246|    786|        let mut state = State::Start;
  247|       |
  248|       |        //Read header
  249|  2.27k|        loop {
  250|  2.27k|            buffer.clear();
  251|  2.27k|            let event = reader.read_event_into(&mut buffer)?;
  252|  1.95k|            match event {
  253|     97|                Event::Start(event) => match state {
  254|       |                    State::Start => {
  255|     97|                        if event.local_name().as_ref() == b"sparql" {
  256|      0|                            state = State::Sparql;
  257|      0|                        } else {
  258|     97|                            return Err(SyntaxError::msg(format!("Expecting <sparql> tag, found <{}>", decode(&reader, &event.name())?)).into());
  259|       |                        }
  260|       |                    }
  261|       |                    State::Sparql => {
  262|      0|                        if event.local_name().as_ref() == b"head" {
  263|      0|                            state = State::Head;
  264|      0|                        } else {
  265|      0|                            return Err(SyntaxError::msg(format!("Expecting <head> tag, found <{}>",decode(&reader, &event.name())?)).into());
  266|       |                        }
  267|       |                    }
  268|       |                    State::Head => {
  269|      0|                        if event.local_name().as_ref() == b"variable" {
  270|      0|                            let name = event.attributes()
  271|      0|                                .filter_map(Result::ok)
  272|      0|                                .find(|attr| attr.key.local_name().as_ref() == b"name")
  273|      0|                                .ok_or_else(|| SyntaxError::msg("No name attribute found for the <variable> tag"))?
  274|      0|                                .decode_and_unescape_value(&reader)?;
  275|      0|                            let variable = Variable::new(name).map_err(|e| SyntaxError::msg(format!("Invalid variable name: {e}")))?;
  276|      0|                            if variables.contains(&variable) {
  277|      0|                                return Err(SyntaxError::msg(format!(
  278|      0|                                    "The variable {variable} is declared twice"
  279|      0|                                ))
  280|      0|                                    .into());
  281|      0|                            }
  282|      0|                            variables.push(variable);
  283|      0|                        } else if event.local_name().as_ref() == b"link" {
  284|      0|                            // no op
  285|      0|                        } else {
  286|      0|                            return Err(SyntaxError::msg(format!("Expecting <variable> or <link> tag, found <{}>", decode(&reader, &event.name())?)).into());
  287|       |                        }
  288|       |                    }
  289|       |                    State::AfterHead => {
  290|      0|                        if event.local_name().as_ref() == b"boolean" {
  291|      0|                            state = State::Boolean
  292|      0|                        } else if event.local_name().as_ref() == b"results" {
  293|      0|                            let mut mapping = BTreeMap::default();
  294|      0|                            for (i, var) in variables.iter().enumerate() {
  295|      0|                                mapping.insert(var.clone().into_string(), i);
  296|      0|                            }
  297|      0|                            return Ok(Self::Solutions { variables,
  298|      0|                                solutions: XmlSolutionsReader {
  299|      0|                                    reader,
  300|      0|                                    buffer,
  301|      0|                                    mapping,
  302|      0|                                    stack: Vec::new(),
  303|      0|                                    subject_stack: Vec::new(),
  304|      0|                                    predicate_stack: Vec::new(),
  305|      0|                                    object_stack: Vec::new(),
  306|      0|                                }});
  307|      0|                        } else if event.local_name().as_ref() != b"link" && event.local_name().as_ref() != b"results" && event.local_name().as_ref() != b"boolean" {
  308|      0|                            return Err(SyntaxError::msg(format!("Expecting sparql tag, found <{}>", decode(&reader, &event.name())?)).into());
  309|      0|                        }
  310|       |                    }
  311|      0|                    State::Boolean => return Err(SyntaxError::msg(format!("Unexpected tag inside of <boolean> tag: <{}>", decode(&reader, &event.name())?)).into())
  312|       |                },
  313|    297|                Event::Text(event) => {
  314|    297|                    let value = event.unescape()?;
  315|    196|                    return match state {
  316|       |                        State::Boolean => {
  317|      0|                            return if value == "true" {
  318|      0|                                Ok(Self::Boolean(true))
  319|      0|                            } else if value == "false" {
  320|      0|                                Ok(Self::Boolean(false))
  321|       |                            } else {
  322|      0|                                Err(SyntaxError::msg(format!("Unexpected boolean value. Found '{value}'")).into())
  323|       |                            };
  324|       |                        }
  325|    196|                        _ => Err(SyntaxError::msg(format!("Unexpected textual value found: '{value}'")).into())
  326|       |                    };
  327|       |                },
  328|      0|                Event::End(event) => {
  329|      0|                    if let State::Head = state {
  330|      0|                        if event.local_name().as_ref() == b"head" {
  331|      0|                            state = State::AfterHead
  332|      0|                        }
  333|       |                    } else {
  334|      0|                        return Err(SyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into());
  335|       |                    }
  336|       |                },
  337|     67|                Event::Eof => return Err(SyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into()),
  338|  1.49k|                _ => (),
  339|       |            }
  340|       |        }
  341|    786|    }


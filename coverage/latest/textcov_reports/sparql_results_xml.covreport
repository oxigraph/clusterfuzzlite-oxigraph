rust_fuzzer_test_input:
  209|  15.3k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  15.3k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  15.3k|                }
  223|  15.3k|
  224|  15.3k|                __libfuzzer_sys_run(bytes);
  225|  15.3k|                0
  226|       |            }
_RNvNvCscrrnyf9LUJA_18sparql_results_xml1__19___libfuzzer_sys_run:
  241|  15.3k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  15.3k|                $body
  243|  15.3k|            }
LLVMFuzzerTestOneInput:
   58|  15.3k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  15.3k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  15.3k|    });
   63|  15.3k|
   64|  15.3k|    match test_input {
   65|  15.3k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  15.3k|}
_RNCNvCs41Ye2X6NnRr_13libfuzzer_sys15test_input_wrap0B3_:
   59|  15.3k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  15.3k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  15.3k|        rust_fuzzer_test_input(data_slice)
   62|  15.3k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs7_NtBc_6memchrNtB1e_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECsP2fOiAuvJ3_10sparesults:
 1044|  8.54k|    pub(crate) unsafe fn next(
 1045|  8.54k|        &mut self,
 1046|  8.54k|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  8.54k|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  8.54k|        let found = find_raw(self.start, self.end)?;
 1057|  7.46k|        let result = found.distance(self.original_start);
 1058|  7.46k|        self.start = found.add(1);
 1059|  7.46k|        Some(result)
 1060|  8.54k|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs_NtBc_6memchrNtB1d_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECsP2fOiAuvJ3_10sparesults:
 1044|  1.01M|    pub(crate) unsafe fn next(
 1045|  1.01M|        &mut self,
 1046|  1.01M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  1.01M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  1.01M|        let found = find_raw(self.start, self.end)?;
 1057|  1.01M|        let result = found.distance(self.original_start);
 1058|  1.01M|        self.start = found.add(1);
 1059|  1.01M|        Some(result)
 1060|  1.01M|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr21search_slice_with_rawNCNvNtB8_6memchr6memchr0ECsP2fOiAuvJ3_10sparesults:
 1125|   497k|pub(crate) unsafe fn search_slice_with_raw(
 1126|   497k|    haystack: &[u8],
 1127|   497k|    mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1128|   497k|) -> Option<usize> {
 1129|   497k|    // SAFETY: We rely on `find_raw` to return a correct and valid pointer, but
 1130|   497k|    // otherwise, `start` and `end` are valid due to the guarantees provided by
 1131|   497k|    // a &[u8].
 1132|   497k|    let start = haystack.as_ptr();
 1133|   497k|    let end = start.add(haystack.len());
 1134|   497k|    let found = find_raw(start, end)?;
 1135|   493k|    Some(found.distance(start))
 1136|   497k|}
_RNvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB5_4Iter3new:
 1027|   531k|    pub(crate) fn new(haystack: &'h [u8]) -> Iter<'h> {
 1028|   531k|        Iter {
 1029|   531k|            original_start: haystack.as_ptr(),
 1030|   531k|            start: haystack.as_ptr(),
 1031|   531k|            end: haystack.as_ptr().wrapping_add(haystack.len()),
 1032|   531k|            haystack: core::marker::PhantomData,
 1033|   531k|        }
 1034|   531k|    }
_RINvMs3_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrNtB6_4Iter4nextNCNvXs3_NtBc_6memchrNtB1e_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0ECs4QWtT85WPeh_9quick_xml:
 1044|  3.30M|    pub(crate) unsafe fn next(
 1045|  3.30M|        &mut self,
 1046|  3.30M|        mut find_raw: impl FnMut(*const u8, *const u8) -> Option<*const u8>,
 1047|  3.30M|    ) -> Option<usize> {
 1048|       |        // SAFETY: Pointers are derived directly from the same &[u8] haystack.
 1049|       |        // We only ever modify start/end corresponding to a matching offset
 1050|       |        // found between start and end. Thus all changes to start/end maintain
 1051|       |        // our safety requirements.
 1052|       |        //
 1053|       |        // The only other assumption we rely on is that the pointer returned
 1054|       |        // by `find_raw` satisfies `self.start <= found < self.end`, and that
 1055|       |        // safety contract is forwarded to the caller.
 1056|  3.30M|        let found = find_raw(self.start, self.end)?;
 1057|  3.26M|        let result = found.distance(self.original_start);
 1058|  3.26M|        self.start = found.add(1);
 1059|  3.26M|        Some(result)
 1060|  3.30M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1B8_:
  117|   115k|    pub(crate) fn needle1(&self) -> u8 {
  118|   115k|        self.s1
  119|   115k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newB8_:
  111|  1.51M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  1.51M|        One { s1: needle, v1: V::splat(needle) }
  113|  1.51M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newB8_:
  111|  1.51M|    pub(crate) unsafe fn new(needle: u8) -> One<V> {
  112|  1.51M|        One { s1: needle, v1: V::splat(needle) }
  113|  1.51M|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawB8_:
  143|  36.0k|    pub(crate) unsafe fn find_raw(
  144|  36.0k|        &self,
  145|  36.0k|        start: *const u8,
  146|  36.0k|        end: *const u8,
  147|  36.0k|    ) -> Option<*const u8> {
  148|  36.0k|        // If we want to support vectors bigger than 256 bits, we probably
  149|  36.0k|        // need to move up to using a u64 for the masks used below. Currently
  150|  36.0k|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  36.0k|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  36.0k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  36.0k|        let topos = V::Mask::first_offset;
  155|  36.0k|        let len = end.distance(start);
  156|  36.0k|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  36.0k|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  34.0k|            return Some(cur);
  167|  2.01k|        }
  168|  2.01k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  2.01k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  2.01k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  2.01k|        if len >= Self::LOOP_SIZE {
  172|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|      0|                let a = V::load_aligned(cur);
  176|      0|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|      0|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|      0|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|      0|                let eqa = self.v1.cmpeq(a);
  180|      0|                let eqb = self.v1.cmpeq(b);
  181|      0|                let eqc = self.v1.cmpeq(c);
  182|      0|                let eqd = self.v1.cmpeq(d);
  183|      0|                let or1 = eqa.or(eqb);
  184|      0|                let or2 = eqc.or(eqd);
  185|      0|                let or3 = or1.or(or2);
  186|      0|                if or3.movemask_will_have_non_zero() {
  187|      0|                    let mask = eqa.movemask();
  188|      0|                    if mask.has_non_zero() {
  189|      0|                        return Some(cur.add(topos(mask)));
  190|      0|                    }
  191|      0|
  192|      0|                    let mask = eqb.movemask();
  193|      0|                    if mask.has_non_zero() {
  194|      0|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|      0|                    }
  196|      0|
  197|      0|                    let mask = eqc.movemask();
  198|      0|                    if mask.has_non_zero() {
  199|      0|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|      0|                    }
  201|      0|
  202|      0|                    let mask = eqd.movemask();
  203|      0|                    debug_assert!(mask.has_non_zero());
  204|      0|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|      0|                }
  206|      0|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.01k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  2.45k|        while cur <= end.sub(V::BYTES) {
  213|    966|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|    966|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|    520|                return Some(cur);
  216|    446|            }
  217|    446|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  1.49k|        if cur < end {
  224|  1.40k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  1.40k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  1.40k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  1.40k|            return self.search_chunk(cur, topos);
  228|     85|        }
  229|     85|        None
  230|  36.0k|    }
_RNvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB2_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawB8_:
  143|  1.44M|    pub(crate) unsafe fn find_raw(
  144|  1.44M|        &self,
  145|  1.44M|        start: *const u8,
  146|  1.44M|        end: *const u8,
  147|  1.44M|    ) -> Option<*const u8> {
  148|  1.44M|        // If we want to support vectors bigger than 256 bits, we probably
  149|  1.44M|        // need to move up to using a u64 for the masks used below. Currently
  150|  1.44M|        // they are 32 bits, which means we're SOL for vectors that need masks
  151|  1.44M|        // bigger than 32 bits. Overall unclear until there's a use case.
  152|  1.44M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  153|       |
  154|  1.44M|        let topos = V::Mask::first_offset;
  155|  1.44M|        let len = end.distance(start);
  156|  1.44M|        debug_assert!(
  157|      0|            len >= V::BYTES,
  158|      0|            "haystack has length {}, but must be at least {}",
  159|       |            len,
  160|       |            V::BYTES
  161|       |        );
  162|       |
  163|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  164|       |        // of the haystack prior to where aligned loads can start.
  165|  1.44M|        if let Some(cur) = self.search_chunk(start, topos) {
  166|  1.41M|            return Some(cur);
  167|  25.6k|        }
  168|  25.6k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  169|  25.6k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  170|  25.6k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  171|  25.6k|        if len >= Self::LOOP_SIZE {
  172|  25.8k|            while cur <= end.sub(Self::LOOP_SIZE) {
  173|  24.6k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  174|       |
  175|  24.6k|                let a = V::load_aligned(cur);
  176|  24.6k|                let b = V::load_aligned(cur.add(1 * V::BYTES));
  177|  24.6k|                let c = V::load_aligned(cur.add(2 * V::BYTES));
  178|  24.6k|                let d = V::load_aligned(cur.add(3 * V::BYTES));
  179|  24.6k|                let eqa = self.v1.cmpeq(a);
  180|  24.6k|                let eqb = self.v1.cmpeq(b);
  181|  24.6k|                let eqc = self.v1.cmpeq(c);
  182|  24.6k|                let eqd = self.v1.cmpeq(d);
  183|  24.6k|                let or1 = eqa.or(eqb);
  184|  24.6k|                let or2 = eqc.or(eqd);
  185|  24.6k|                let or3 = or1.or(or2);
  186|  24.6k|                if or3.movemask_will_have_non_zero() {
  187|  21.4k|                    let mask = eqa.movemask();
  188|  21.4k|                    if mask.has_non_zero() {
  189|  12.6k|                        return Some(cur.add(topos(mask)));
  190|  8.84k|                    }
  191|  8.84k|
  192|  8.84k|                    let mask = eqb.movemask();
  193|  8.84k|                    if mask.has_non_zero() {
  194|  7.35k|                        return Some(cur.add(1 * V::BYTES).add(topos(mask)));
  195|  1.49k|                    }
  196|  1.49k|
  197|  1.49k|                    let mask = eqc.movemask();
  198|  1.49k|                    if mask.has_non_zero() {
  199|  1.09k|                        return Some(cur.add(2 * V::BYTES).add(topos(mask)));
  200|    405|                    }
  201|    405|
  202|    405|                    let mask = eqd.movemask();
  203|    405|                    debug_assert!(mask.has_non_zero());
  204|    405|                    return Some(cur.add(3 * V::BYTES).add(topos(mask)));
  205|  3.21k|                }
  206|  3.21k|                cur = cur.add(Self::LOOP_SIZE);
  207|       |            }
  208|  2.99k|        }
  209|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  210|       |        // loads here, but I believe we are guaranteed that they are aligned
  211|       |        // since `cur` is aligned.
  212|  7.77k|        while cur <= end.sub(V::BYTES) {
  213|  5.66k|            debug_assert!(end.distance(cur) >= V::BYTES);
  214|  5.66k|            if let Some(cur) = self.search_chunk(cur, topos) {
  215|  2.09k|                return Some(cur);
  216|  3.56k|            }
  217|  3.56k|            cur = cur.add(V::BYTES);
  218|       |        }
  219|       |        // Finally handle any remaining bytes less than the size of V. In this
  220|       |        // case, our pointer may indeed be unaligned and the load may overlap
  221|       |        // with the previous one. But that's okay since we know the previous
  222|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  223|  2.11k|        if cur < end {
  224|  2.02k|            debug_assert!(end.distance(cur) < V::BYTES);
  225|  2.02k|            cur = cur.sub(V::BYTES - end.distance(cur));
  226|  2.02k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  227|  2.02k|            return self.search_chunk(cur, topos);
  228|     94|        }
  229|     94|        None
  230|  1.44M|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  38.3k|    unsafe fn search_chunk(
  417|  38.3k|        &self,
  418|  38.3k|        cur: *const u8,
  419|  38.3k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  38.3k|    ) -> Option<*const u8> {
  421|  38.3k|        let chunk = V::load_unaligned(cur);
  422|  38.3k|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  38.3k|        if mask.has_non_zero() {
  424|  35.4k|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  2.96k|            None
  427|       |        }
  428|  38.3k|    }
_RINvMNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB3_3OneNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtB9_6vector16SensibleMoveMaskNtB24_8MoveMask12first_offsetEB9_:
  416|  1.44M|    unsafe fn search_chunk(
  417|  1.44M|        &self,
  418|  1.44M|        cur: *const u8,
  419|  1.44M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  420|  1.44M|    ) -> Option<*const u8> {
  421|  1.44M|        let chunk = V::load_unaligned(cur);
  422|  1.44M|        let mask = self.v1.cmpeq(chunk).movemask();
  423|  1.44M|        if mask.has_non_zero() {
  424|  1.41M|            Some(cur.add(mask_to_offset(mask)))
  425|       |        } else {
  426|  30.3k|            None
  427|       |        }
  428|  1.44M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBa_:
  450|  3.30M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  3.30M|        Two {
  452|  3.30M|            s1: needle1,
  453|  3.30M|            s2: needle2,
  454|  3.30M|            v1: V::splat(needle1),
  455|  3.30M|            v2: V::splat(needle2),
  456|  3.30M|        }
  457|  3.30M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBa_:
  450|  3.30M|    pub(crate) unsafe fn new(needle1: u8, needle2: u8) -> Two<V> {
  451|  3.30M|        Two {
  452|  3.30M|            s1: needle1,
  453|  3.30M|            s2: needle2,
  454|  3.30M|            v1: V::splat(needle1),
  455|  3.30M|            v2: V::splat(needle2),
  456|  3.30M|        }
  457|  3.30M|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Ba_:
  461|   366k|    pub(crate) fn needle1(&self) -> u8 {
  462|   366k|        self.s1
  463|   366k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Ba_:
  467|   302k|    pub(crate) fn needle2(&self) -> u8 {
  468|   302k|        self.s2
  469|   302k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBa_:
  493|   161k|    pub(crate) unsafe fn find_raw(
  494|   161k|        &self,
  495|   161k|        start: *const u8,
  496|   161k|        end: *const u8,
  497|   161k|    ) -> Option<*const u8> {
  498|   161k|        // If we want to support vectors bigger than 256 bits, we probably
  499|   161k|        // need to move up to using a u64 for the masks used below. Currently
  500|   161k|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|   161k|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|   161k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|   161k|        let topos = V::Mask::first_offset;
  505|   161k|        let len = end.distance(start);
  506|   161k|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|   161k|        if let Some(cur) = self.search_chunk(start, topos) {
  516|   155k|            return Some(cur);
  517|  5.06k|        }
  518|  5.06k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  5.06k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  5.06k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  5.06k|        if len >= Self::LOOP_SIZE {
  522|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|      0|                let a = V::load_aligned(cur);
  526|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  527|      0|                let eqa1 = self.v1.cmpeq(a);
  528|      0|                let eqb1 = self.v1.cmpeq(b);
  529|      0|                let eqa2 = self.v2.cmpeq(a);
  530|      0|                let eqb2 = self.v2.cmpeq(b);
  531|      0|                let or1 = eqa1.or(eqb1);
  532|      0|                let or2 = eqa2.or(eqb2);
  533|      0|                let or3 = or1.or(or2);
  534|      0|                if or3.movemask_will_have_non_zero() {
  535|      0|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|      0|                    if mask.has_non_zero() {
  537|      0|                        return Some(cur.add(topos(mask)));
  538|      0|                    }
  539|      0|
  540|      0|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|      0|                    debug_assert!(mask.has_non_zero());
  542|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|      0|                }
  544|      0|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  5.06k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  6.80k|        while cur <= end.sub(V::BYTES) {
  551|  2.76k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  2.76k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  1.02k|                return Some(cur);
  554|  1.73k|            }
  555|  1.73k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  4.03k|        if cur < end {
  562|  3.83k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  3.83k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  3.83k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  3.83k|            return self.search_chunk(cur, topos);
  566|    199|        }
  567|    199|        None
  568|   161k|    }
_RNvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB4_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBa_:
  493|  2.87M|    pub(crate) unsafe fn find_raw(
  494|  2.87M|        &self,
  495|  2.87M|        start: *const u8,
  496|  2.87M|        end: *const u8,
  497|  2.87M|    ) -> Option<*const u8> {
  498|  2.87M|        // If we want to support vectors bigger than 256 bits, we probably
  499|  2.87M|        // need to move up to using a u64 for the masks used below. Currently
  500|  2.87M|        // they are 32 bits, which means we're SOL for vectors that need masks
  501|  2.87M|        // bigger than 32 bits. Overall unclear until there's a use case.
  502|  2.87M|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  503|       |
  504|  2.87M|        let topos = V::Mask::first_offset;
  505|  2.87M|        let len = end.distance(start);
  506|  2.87M|        debug_assert!(
  507|      0|            len >= V::BYTES,
  508|      0|            "haystack has length {}, but must be at least {}",
  509|       |            len,
  510|       |            V::BYTES
  511|       |        );
  512|       |
  513|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  514|       |        // of the haystack prior to where aligned loads can start.
  515|  2.87M|        if let Some(cur) = self.search_chunk(start, topos) {
  516|  2.80M|            return Some(cur);
  517|  67.4k|        }
  518|  67.4k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  519|  67.4k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  520|  67.4k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  521|  67.4k|        if len >= Self::LOOP_SIZE {
  522|  61.9k|            while cur <= end.sub(Self::LOOP_SIZE) {
  523|  53.7k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  524|       |
  525|  53.7k|                let a = V::load_aligned(cur);
  526|  53.7k|                let b = V::load_aligned(cur.add(V::BYTES));
  527|  53.7k|                let eqa1 = self.v1.cmpeq(a);
  528|  53.7k|                let eqb1 = self.v1.cmpeq(b);
  529|  53.7k|                let eqa2 = self.v2.cmpeq(a);
  530|  53.7k|                let eqb2 = self.v2.cmpeq(b);
  531|  53.7k|                let or1 = eqa1.or(eqb1);
  532|  53.7k|                let or2 = eqa2.or(eqb2);
  533|  53.7k|                let or3 = or1.or(or2);
  534|  53.7k|                if or3.movemask_will_have_non_zero() {
  535|  50.5k|                    let mask = eqa1.movemask().or(eqa2.movemask());
  536|  50.5k|                    if mask.has_non_zero() {
  537|  39.2k|                        return Some(cur.add(topos(mask)));
  538|  11.2k|                    }
  539|  11.2k|
  540|  11.2k|                    let mask = eqb1.movemask().or(eqb2.movemask());
  541|  11.2k|                    debug_assert!(mask.has_non_zero());
  542|  11.2k|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  543|  3.18k|                }
  544|  3.18k|                cur = cur.add(Self::LOOP_SIZE);
  545|       |            }
  546|  8.65k|        }
  547|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  548|       |        // loads here, but I believe we are guaranteed that they are aligned
  549|       |        // since `cur` is aligned.
  550|  19.9k|        while cur <= end.sub(V::BYTES) {
  551|  11.0k|            debug_assert!(end.distance(cur) >= V::BYTES);
  552|  11.0k|            if let Some(cur) = self.search_chunk(cur, topos) {
  553|  8.05k|                return Some(cur);
  554|  3.00k|            }
  555|  3.00k|            cur = cur.add(V::BYTES);
  556|       |        }
  557|       |        // Finally handle any remaining bytes less than the size of V. In this
  558|       |        // case, our pointer may indeed be unaligned and the load may overlap
  559|       |        // with the previous one. But that's okay since we know the previous
  560|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  561|  8.86k|        if cur < end {
  562|  8.65k|            debug_assert!(end.distance(cur) < V::BYTES);
  563|  8.65k|            cur = cur.sub(V::BYTES - end.distance(cur));
  564|  8.65k|            debug_assert_eq!(end.distance(cur), V::BYTES);
  565|  8.65k|            return self.search_chunk(cur, topos);
  566|    209|        }
  567|    209|        None
  568|  2.87M|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|   167k|    unsafe fn search_chunk(
  671|   167k|        &self,
  672|   167k|        cur: *const u8,
  673|   167k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|   167k|    ) -> Option<*const u8> {
  675|   167k|        let chunk = V::load_unaligned(cur);
  676|   167k|        let eq1 = self.v1.cmpeq(chunk);
  677|   167k|        let eq2 = self.v2.cmpeq(chunk);
  678|   167k|        let mask = eq1.or(eq2).movemask();
  679|   167k|        if mask.has_non_zero() {
  680|   160k|            let mask1 = eq1.movemask();
  681|   160k|            let mask2 = eq2.movemask();
  682|   160k|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  7.27k|            None
  685|       |        }
  686|   167k|    }
_RINvMs_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_3TwoNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBb_6vector16SensibleMoveMaskNtB26_8MoveMask12first_offsetEBb_:
  670|  2.89M|    unsafe fn search_chunk(
  671|  2.89M|        &self,
  672|  2.89M|        cur: *const u8,
  673|  2.89M|        mask_to_offset: impl Fn(V::Mask) -> usize,
  674|  2.89M|    ) -> Option<*const u8> {
  675|  2.89M|        let chunk = V::load_unaligned(cur);
  676|  2.89M|        let eq1 = self.v1.cmpeq(chunk);
  677|  2.89M|        let eq2 = self.v2.cmpeq(chunk);
  678|  2.89M|        let mask = eq1.or(eq2).movemask();
  679|  2.89M|        if mask.has_non_zero() {
  680|  2.82M|            let mask1 = eq1.movemask();
  681|  2.82M|            let mask2 = eq2.movemask();
  682|  2.82M|            Some(cur.add(mask_to_offset(mask1.or(mask2))))
  683|       |        } else {
  684|  72.1k|            None
  685|       |        }
  686|  2.89M|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE3newBb_:
  710|  8.54k|    pub(crate) unsafe fn new(
  711|  8.54k|        needle1: u8,
  712|  8.54k|        needle2: u8,
  713|  8.54k|        needle3: u8,
  714|  8.54k|    ) -> Three<V> {
  715|  8.54k|        Three {
  716|  8.54k|            s1: needle1,
  717|  8.54k|            s2: needle2,
  718|  8.54k|            s3: needle3,
  719|  8.54k|            v1: V::splat(needle1),
  720|  8.54k|            v2: V::splat(needle2),
  721|  8.54k|            v3: V::splat(needle3),
  722|  8.54k|        }
  723|  8.54k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE3newBb_:
  710|  8.54k|    pub(crate) unsafe fn new(
  711|  8.54k|        needle1: u8,
  712|  8.54k|        needle2: u8,
  713|  8.54k|        needle3: u8,
  714|  8.54k|    ) -> Three<V> {
  715|  8.54k|        Three {
  716|  8.54k|            s1: needle1,
  717|  8.54k|            s2: needle2,
  718|  8.54k|            s3: needle3,
  719|  8.54k|            v1: V::splat(needle1),
  720|  8.54k|            v2: V::splat(needle2),
  721|  8.54k|            v3: V::splat(needle3),
  722|  8.54k|        }
  723|  8.54k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle1Bb_:
  727|  6.10k|    pub(crate) fn needle1(&self) -> u8 {
  728|  6.10k|        self.s1
  729|  6.10k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle2Bb_:
  733|  5.59k|    pub(crate) fn needle2(&self) -> u8 {
  734|  5.59k|        self.s2
  735|  5.59k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE7needle3Bb_:
  739|  5.42k|    pub(crate) fn needle3(&self) -> u8 {
  740|  5.42k|        self.s3
  741|  5.42k|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE8find_rawBb_:
  765|    709|    pub(crate) unsafe fn find_raw(
  766|    709|        &self,
  767|    709|        start: *const u8,
  768|    709|        end: *const u8,
  769|    709|    ) -> Option<*const u8> {
  770|    709|        // If we want to support vectors bigger than 256 bits, we probably
  771|    709|        // need to move up to using a u64 for the masks used below. Currently
  772|    709|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|    709|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|    709|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|    709|        let topos = V::Mask::first_offset;
  777|    709|        let len = end.distance(start);
  778|    709|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|    709|        if let Some(cur) = self.search_chunk(start, topos) {
  788|    520|            return Some(cur);
  789|    189|        }
  790|    189|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|    189|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|    189|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|    189|        if len >= Self::LOOP_SIZE {
  794|      0|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|      0|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|      0|                let a = V::load_aligned(cur);
  798|      0|                let b = V::load_aligned(cur.add(V::BYTES));
  799|      0|                let eqa1 = self.v1.cmpeq(a);
  800|      0|                let eqb1 = self.v1.cmpeq(b);
  801|      0|                let eqa2 = self.v2.cmpeq(a);
  802|      0|                let eqb2 = self.v2.cmpeq(b);
  803|      0|                let eqa3 = self.v3.cmpeq(a);
  804|      0|                let eqb3 = self.v3.cmpeq(b);
  805|      0|                let or1 = eqa1.or(eqb1);
  806|      0|                let or2 = eqa2.or(eqb2);
  807|      0|                let or3 = eqa3.or(eqb3);
  808|      0|                let or4 = or1.or(or2);
  809|      0|                let or5 = or3.or(or4);
  810|      0|                if or5.movemask_will_have_non_zero() {
  811|      0|                    let mask = eqa1
  812|      0|                        .movemask()
  813|      0|                        .or(eqa2.movemask())
  814|      0|                        .or(eqa3.movemask());
  815|      0|                    if mask.has_non_zero() {
  816|      0|                        return Some(cur.add(topos(mask)));
  817|      0|                    }
  818|      0|
  819|      0|                    let mask = eqb1
  820|      0|                        .movemask()
  821|      0|                        .or(eqb2.movemask())
  822|      0|                        .or(eqb3.movemask());
  823|      0|                    debug_assert!(mask.has_non_zero());
  824|      0|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|      0|                }
  826|      0|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    189|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    249|        while cur <= end.sub(V::BYTES) {
  833|     68|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|     68|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|      8|                return Some(cur);
  836|     60|            }
  837|     60|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    181|        if cur < end {
  844|    149|            debug_assert!(end.distance(cur) < V::BYTES);
  845|    149|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|    149|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|    149|            return self.search_chunk(cur, topos);
  848|     32|        }
  849|     32|        None
  850|    709|    }
_RNvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB5_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE8find_rawBb_:
  765|  6.11k|    pub(crate) unsafe fn find_raw(
  766|  6.11k|        &self,
  767|  6.11k|        start: *const u8,
  768|  6.11k|        end: *const u8,
  769|  6.11k|    ) -> Option<*const u8> {
  770|  6.11k|        // If we want to support vectors bigger than 256 bits, we probably
  771|  6.11k|        // need to move up to using a u64 for the masks used below. Currently
  772|  6.11k|        // they are 32 bits, which means we're SOL for vectors that need masks
  773|  6.11k|        // bigger than 32 bits. Overall unclear until there's a use case.
  774|  6.11k|        debug_assert!(V::BYTES <= 32, "vector cannot be bigger than 32 bytes");
  775|       |
  776|  6.11k|        let topos = V::Mask::first_offset;
  777|  6.11k|        let len = end.distance(start);
  778|  6.11k|        debug_assert!(
  779|      0|            len >= V::BYTES,
  780|      0|            "haystack has length {}, but must be at least {}",
  781|       |            len,
  782|       |            V::BYTES
  783|       |        );
  784|       |
  785|       |        // Search a possibly unaligned chunk at `start`. This covers any part
  786|       |        // of the haystack prior to where aligned loads can start.
  787|  6.11k|        if let Some(cur) = self.search_chunk(start, topos) {
  788|  2.73k|            return Some(cur);
  789|  3.37k|        }
  790|  3.37k|        // Set `cur` to the first V-aligned pointer greater than `start`.
  791|  3.37k|        let mut cur = start.add(V::BYTES - (start.as_usize() & V::ALIGN));
  792|  3.37k|        debug_assert!(cur > start && end.sub(V::BYTES) >= start);
  793|  3.37k|        if len >= Self::LOOP_SIZE {
  794|  3.54k|            while cur <= end.sub(Self::LOOP_SIZE) {
  795|  3.36k|                debug_assert_eq!(0, cur.as_usize() % V::BYTES);
  796|       |
  797|  3.36k|                let a = V::load_aligned(cur);
  798|  3.36k|                let b = V::load_aligned(cur.add(V::BYTES));
  799|  3.36k|                let eqa1 = self.v1.cmpeq(a);
  800|  3.36k|                let eqb1 = self.v1.cmpeq(b);
  801|  3.36k|                let eqa2 = self.v2.cmpeq(a);
  802|  3.36k|                let eqb2 = self.v2.cmpeq(b);
  803|  3.36k|                let eqa3 = self.v3.cmpeq(a);
  804|  3.36k|                let eqb3 = self.v3.cmpeq(b);
  805|  3.36k|                let or1 = eqa1.or(eqb1);
  806|  3.36k|                let or2 = eqa2.or(eqb2);
  807|  3.36k|                let or3 = eqa3.or(eqb3);
  808|  3.36k|                let or4 = or1.or(or2);
  809|  3.36k|                let or5 = or3.or(or4);
  810|  3.36k|                if or5.movemask_will_have_non_zero() {
  811|  3.02k|                    let mask = eqa1
  812|  3.02k|                        .movemask()
  813|  3.02k|                        .or(eqa2.movemask())
  814|  3.02k|                        .or(eqa3.movemask());
  815|  3.02k|                    if mask.has_non_zero() {
  816|  2.17k|                        return Some(cur.add(topos(mask)));
  817|    846|                    }
  818|    846|
  819|    846|                    let mask = eqb1
  820|    846|                        .movemask()
  821|    846|                        .or(eqb2.movemask())
  822|    846|                        .or(eqb3.movemask());
  823|    846|                    debug_assert!(mask.has_non_zero());
  824|    846|                    return Some(cur.add(V::BYTES).add(topos(mask)));
  825|    338|                }
  826|    338|                cur = cur.add(Self::LOOP_SIZE);
  827|       |            }
  828|    170|        }
  829|       |        // Handle any leftovers after the aligned loop above. We use unaligned
  830|       |        // loads here, but I believe we are guaranteed that they are aligned
  831|       |        // since `cur` is aligned.
  832|    479|        while cur <= end.sub(V::BYTES) {
  833|    202|            debug_assert!(end.distance(cur) >= V::BYTES);
  834|    202|            if let Some(cur) = self.search_chunk(cur, topos) {
  835|     78|                return Some(cur);
  836|    124|            }
  837|    124|            cur = cur.add(V::BYTES);
  838|       |        }
  839|       |        // Finally handle any remaining bytes less than the size of V. In this
  840|       |        // case, our pointer may indeed be unaligned and the load may overlap
  841|       |        // with the previous one. But that's okay since we know the previous
  842|       |        // load didn't lead to a match (otherwise we wouldn't be here).
  843|    277|        if cur < end {
  844|    250|            debug_assert!(end.distance(cur) < V::BYTES);
  845|    250|            cur = cur.sub(V::BYTES - end.distance(cur));
  846|    250|            debug_assert_eq!(end.distance(cur), V::BYTES);
  847|    250|            return self.search_chunk(cur, topos);
  848|     27|        }
  849|     27|        None
  850|  6.11k|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|    926|    unsafe fn search_chunk(
  963|    926|        &self,
  964|    926|        cur: *const u8,
  965|    926|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|    926|    ) -> Option<*const u8> {
  967|    926|        let chunk = V::load_unaligned(cur);
  968|    926|        let eq1 = self.v1.cmpeq(chunk);
  969|    926|        let eq2 = self.v2.cmpeq(chunk);
  970|    926|        let eq3 = self.v3.cmpeq(chunk);
  971|    926|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|    926|        if mask.has_non_zero() {
  973|    600|            let mask1 = eq1.movemask();
  974|    600|            let mask2 = eq2.movemask();
  975|    600|            let mask3 = eq3.movemask();
  976|    600|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|    326|            None
  979|       |        }
  980|    926|    }
_RINvMs0_NtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchrINtB6_5ThreeNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iE12search_chunkNvYNtNtBc_6vector16SensibleMoveMaskNtB29_8MoveMask12first_offsetEBc_:
  962|  6.56k|    unsafe fn search_chunk(
  963|  6.56k|        &self,
  964|  6.56k|        cur: *const u8,
  965|  6.56k|        mask_to_offset: impl Fn(V::Mask) -> usize,
  966|  6.56k|    ) -> Option<*const u8> {
  967|  6.56k|        let chunk = V::load_unaligned(cur);
  968|  6.56k|        let eq1 = self.v1.cmpeq(chunk);
  969|  6.56k|        let eq2 = self.v2.cmpeq(chunk);
  970|  6.56k|        let eq3 = self.v3.cmpeq(chunk);
  971|  6.56k|        let mask = eq1.or(eq2).or(eq3).movemask();
  972|  6.56k|        if mask.has_non_zero() {
  973|  2.98k|            let mask1 = eq1.movemask();
  974|  2.98k|            let mask2 = eq2.movemask();
  975|  2.98k|            let mask3 = eq3.movemask();
  976|  2.98k|            Some(cur.add(mask_to_offset(mask1.or(mask2).or(mask3))))
  977|       |        } else {
  978|  3.58k|            None
  979|       |        }
  980|  6.56k|    }
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMNtNtNtB6_6x86_644avx26memchrNtB1a_3One8find_raw0EB8_:
 1148|  39.0k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  39.0k|    start: *const u8,
 1150|  39.0k|    end: *const u8,
 1151|  39.0k|    confirm: F,
 1152|  39.0k|) -> Option<*const u8> {
 1153|  39.0k|    debug_assert!(start <= end);
 1154|  39.0k|    let mut ptr = start;
 1155|   121k|    while ptr < end {
 1156|   115k|        if confirm(*ptr) {
 1157|  32.5k|            return Some(ptr);
 1158|  82.8k|        }
 1159|  82.8k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  6.52k|    None
 1162|  39.0k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs2_NtNtNtB6_6x86_644avx26memchrNtB1d_3Two8find_raw0EB8_:
 1148|   245k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|   245k|    start: *const u8,
 1150|   245k|    end: *const u8,
 1151|   245k|    confirm: F,
 1152|   245k|) -> Option<*const u8> {
 1153|   245k|    debug_assert!(start <= end);
 1154|   245k|    let mut ptr = start;
 1155|   378k|    while ptr < end {
 1156|   366k|        if confirm(*ptr) {
 1157|   233k|            return Some(ptr);
 1158|   132k|        }
 1159|   132k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|  11.9k|    None
 1162|   245k|}
_RINvNtNtNtCseJq1f3D7C0A_6memchr4arch7generic6memchr16fwd_byte_by_byteNCNvMs6_NtNtNtB6_6x86_644avx26memchrNtB1d_5Three8find_raw0EB8_:
 1148|  1.67k|pub(crate) unsafe fn fwd_byte_by_byte<F: Fn(u8) -> bool>(
 1149|  1.67k|    start: *const u8,
 1150|  1.67k|    end: *const u8,
 1151|  1.67k|    confirm: F,
 1152|  1.67k|) -> Option<*const u8> {
 1153|  1.67k|    debug_assert!(start <= end);
 1154|  1.67k|    let mut ptr = start;
 1155|  6.93k|    while ptr < end {
 1156|  6.10k|        if confirm(*ptr) {
 1157|    854|            return Some(ptr);
 1158|  5.25k|        }
 1159|  5.25k|        ptr = ptr.offset(1);
 1160|       |    }
 1161|    823|    None
 1162|  1.67k|}

_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13new_uncheckedBa_:
   69|  1.51M|    pub unsafe fn new_unchecked(needle: u8) -> One {
   70|  1.51M|        One {
   71|  1.51M|            sse2: generic::One::new(needle),
   72|  1.51M|            avx2: generic::One::new(needle),
   73|  1.51M|        }
   74|  1.51M|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One12is_availableBa_:
   86|      1|    pub fn is_available() -> bool {
   87|      1|        #[cfg(not(target_feature = "sse2"))]
   88|      1|        {
   89|      1|            false
   90|      1|        }
   91|      1|        #[cfg(target_feature = "sse2")]
   92|      1|        {
   93|      1|            #[cfg(target_feature = "avx2")]
   94|      1|            {
   95|      1|                true
   96|      1|            }
   97|      1|            #[cfg(not(target_feature = "avx2"))]
   98|      1|            {
   99|      1|                #[cfg(feature = "std")]
  100|      1|                {
  101|      1|                    std::is_x86_feature_detected!("avx2")
  102|       |                }
  103|       |                #[cfg(not(feature = "std"))]
  104|       |                {
  105|       |                    false
  106|       |                }
  107|       |            }
  108|       |        }
  109|      1|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One8find_rawBa_:
  179|  1.51M|    pub unsafe fn find_raw(
  180|  1.51M|        &self,
  181|  1.51M|        start: *const u8,
  182|  1.51M|        end: *const u8,
  183|  1.51M|    ) -> Option<*const u8> {
  184|  1.51M|        if start >= end {
  185|  1.20k|            return None;
  186|  1.51M|        }
  187|  1.51M|        let len = end.distance(start);
  188|  1.51M|        if len < __m256i::BYTES {
  189|  75.0k|            return if len < __m128i::BYTES {
  190|       |                // SAFETY: We require the caller to pass valid start/end
  191|       |                // pointers.
  192|  39.0k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|       |                    b == self.sse2.needle1()
  194|  39.0k|                })
  195|       |            } else {
  196|       |                // SAFETY: We require the caller to pass valid start/end
  197|       |                // pointers.
  198|  36.0k|                self.find_raw_sse2(start, end)
  199|       |            };
  200|  1.44M|        }
  201|  1.44M|        // SAFETY: Building a `One` means it's safe to call both 'sse2' and
  202|  1.44M|        // 'avx2' routines. Also, we've checked that our haystack is big
  203|  1.44M|        // enough to run on the vector routine. Pointer validity is caller's
  204|  1.44M|        // responsibility.
  205|  1.44M|        //
  206|  1.44M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  207|  1.44M|        // means we'd have to annotate this routine with `target_feature`.
  208|  1.44M|        // Which is fine, because this routine is `unsafe` anyway and the
  209|  1.44M|        // `target_feature` obligation is met by virtue of building a `One`.
  210|  1.44M|        // The real problem is that a routine with a `target_feature`
  211|  1.44M|        // annotation generally can't be inlined into caller code unless
  212|  1.44M|        // the caller code has the same target feature annotations. Namely,
  213|  1.44M|        // the common case (at time of writing) is for calling code to not
  214|  1.44M|        // have the `avx2` target feature enabled *at compile time*. Without
  215|  1.44M|        // `target_feature` on this routine, it can be inlined which will
  216|  1.44M|        // handle some of the short-haystack cases above without touching the
  217|  1.44M|        // architecture specific code.
  218|  1.44M|        self.find_raw_avx2(start, end)
  219|  1.51M|    }
_RNCNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB4_3One8find_raw0Bc_:
  192|   115k|                generic::fwd_byte_by_byte(start, end, |b| {
  193|   115k|                    b == self.sse2.needle1()
  194|   115k|                })
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_sse2Ba_:
  336|  36.0k|    unsafe fn find_raw_sse2(
  337|  36.0k|        &self,
  338|  36.0k|        start: *const u8,
  339|  36.0k|        end: *const u8,
  340|  36.0k|    ) -> Option<*const u8> {
  341|  36.0k|        self.sse2.find_raw(start, end)
  342|  36.0k|    }
_RNvMNtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB2_3One13find_raw_avx2Ba_:
  396|  1.44M|    unsafe fn find_raw_avx2(
  397|  1.44M|        &self,
  398|  1.44M|        start: *const u8,
  399|  1.44M|        end: *const u8,
  400|  1.44M|    ) -> Option<*const u8> {
  401|  1.44M|        self.avx2.find_raw(start, end)
  402|  1.44M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13new_uncheckedBd_:
  556|  3.30M|    pub unsafe fn new_unchecked(needle1: u8, needle2: u8) -> Two {
  557|  3.30M|        Two {
  558|  3.30M|            sse2: generic::Two::new(needle1, needle2),
  559|  3.30M|            avx2: generic::Two::new(needle1, needle2),
  560|  3.30M|        }
  561|  3.30M|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two12is_availableBd_:
  573|      1|    pub fn is_available() -> bool {
  574|      1|        #[cfg(not(target_feature = "sse2"))]
  575|      1|        {
  576|      1|            false
  577|      1|        }
  578|      1|        #[cfg(target_feature = "sse2")]
  579|      1|        {
  580|      1|            #[cfg(target_feature = "avx2")]
  581|      1|            {
  582|      1|                true
  583|      1|            }
  584|      1|            #[cfg(not(target_feature = "avx2"))]
  585|      1|            {
  586|      1|                #[cfg(feature = "std")]
  587|      1|                {
  588|      1|                    std::is_x86_feature_detected!("avx2")
  589|       |                }
  590|       |                #[cfg(not(feature = "std"))]
  591|       |                {
  592|       |                    false
  593|       |                }
  594|       |            }
  595|       |        }
  596|      1|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two8find_rawBd_:
  654|  3.30M|    pub unsafe fn find_raw(
  655|  3.30M|        &self,
  656|  3.30M|        start: *const u8,
  657|  3.30M|        end: *const u8,
  658|  3.30M|    ) -> Option<*const u8> {
  659|  3.30M|        if start >= end {
  660|  24.5k|            return None;
  661|  3.28M|        }
  662|  3.28M|        let len = end.distance(start);
  663|  3.28M|        if len < __m256i::BYTES {
  664|   406k|            return if len < __m128i::BYTES {
  665|       |                // SAFETY: We require the caller to pass valid start/end
  666|       |                // pointers.
  667|   245k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|       |                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   245k|                })
  670|       |            } else {
  671|       |                // SAFETY: We require the caller to pass valid start/end
  672|       |                // pointers.
  673|   161k|                self.find_raw_sse2(start, end)
  674|       |            };
  675|  2.87M|        }
  676|  2.87M|        // SAFETY: Building a `Two` means it's safe to call both 'sse2' and
  677|  2.87M|        // 'avx2' routines. Also, we've checked that our haystack is big
  678|  2.87M|        // enough to run on the vector routine. Pointer validity is caller's
  679|  2.87M|        // responsibility.
  680|  2.87M|        //
  681|  2.87M|        // Note that we could call `self.avx2.find_raw` directly here. But that
  682|  2.87M|        // means we'd have to annotate this routine with `target_feature`.
  683|  2.87M|        // Which is fine, because this routine is `unsafe` anyway and the
  684|  2.87M|        // `target_feature` obligation is met by virtue of building a `Two`.
  685|  2.87M|        // The real problem is that a routine with a `target_feature`
  686|  2.87M|        // annotation generally can't be inlined into caller code unless
  687|  2.87M|        // the caller code has the same target feature annotations. Namely,
  688|  2.87M|        // the common case (at time of writing) is for calling code to not
  689|  2.87M|        // have the `avx2` target feature enabled *at compile time*. Without
  690|  2.87M|        // `target_feature` on this routine, it can be inlined which will
  691|  2.87M|        // handle some of the short-haystack cases above without touching the
  692|  2.87M|        // architecture specific code.
  693|  2.87M|        self.find_raw_avx2(start, end)
  694|  3.30M|    }
_RNCNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_3Two8find_raw0Bf_:
  667|   366k|                generic::fwd_byte_by_byte(start, end, |b| {
  668|   366k|                    b == self.sse2.needle1() || b == self.sse2.needle2()
  669|   366k|                })
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_sse2Bd_:
  764|   161k|    unsafe fn find_raw_sse2(
  765|   161k|        &self,
  766|   161k|        start: *const u8,
  767|   161k|        end: *const u8,
  768|   161k|    ) -> Option<*const u8> {
  769|   161k|        self.sse2.find_raw(start, end)
  770|   161k|    }
_RNvMs2_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_3Two13find_raw_avx2Bd_:
  804|  2.87M|    unsafe fn find_raw_avx2(
  805|  2.87M|        &self,
  806|  2.87M|        start: *const u8,
  807|  2.87M|        end: *const u8,
  808|  2.87M|    ) -> Option<*const u8> {
  809|  2.87M|        self.avx2.find_raw(start, end)
  810|  2.87M|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13new_uncheckedBd_:
  935|  8.54k|    pub unsafe fn new_unchecked(
  936|  8.54k|        needle1: u8,
  937|  8.54k|        needle2: u8,
  938|  8.54k|        needle3: u8,
  939|  8.54k|    ) -> Three {
  940|  8.54k|        Three {
  941|  8.54k|            sse2: generic::Three::new(needle1, needle2, needle3),
  942|  8.54k|            avx2: generic::Three::new(needle1, needle2, needle3),
  943|  8.54k|        }
  944|  8.54k|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three12is_availableBd_:
  956|      1|    pub fn is_available() -> bool {
  957|      1|        #[cfg(not(target_feature = "sse2"))]
  958|      1|        {
  959|      1|            false
  960|      1|        }
  961|      1|        #[cfg(target_feature = "sse2")]
  962|      1|        {
  963|      1|            #[cfg(target_feature = "avx2")]
  964|      1|            {
  965|      1|                true
  966|      1|            }
  967|      1|            #[cfg(not(target_feature = "avx2"))]
  968|      1|            {
  969|      1|                #[cfg(feature = "std")]
  970|      1|                {
  971|      1|                    std::is_x86_feature_detected!("avx2")
  972|       |                }
  973|       |                #[cfg(not(feature = "std"))]
  974|       |                {
  975|       |                    false
  976|       |                }
  977|       |            }
  978|       |        }
  979|      1|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three8find_rawBd_:
 1037|  8.54k|    pub unsafe fn find_raw(
 1038|  8.54k|        &self,
 1039|  8.54k|        start: *const u8,
 1040|  8.54k|        end: *const u8,
 1041|  8.54k|    ) -> Option<*const u8> {
 1042|  8.54k|        if start >= end {
 1043|     42|            return None;
 1044|  8.49k|        }
 1045|  8.49k|        let len = end.distance(start);
 1046|  8.49k|        if len < __m256i::BYTES {
 1047|  2.38k|            return if len < __m128i::BYTES {
 1048|       |                // SAFETY: We require the caller to pass valid start/end
 1049|       |                // pointers.
 1050|  1.67k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|       |                    b == self.sse2.needle1()
 1052|       |                        || b == self.sse2.needle2()
 1053|       |                        || b == self.sse2.needle3()
 1054|  1.67k|                })
 1055|       |            } else {
 1056|       |                // SAFETY: We require the caller to pass valid start/end
 1057|       |                // pointers.
 1058|    709|                self.find_raw_sse2(start, end)
 1059|       |            };
 1060|  6.11k|        }
 1061|  6.11k|        // SAFETY: Building a `Three` means it's safe to call both 'sse2' and
 1062|  6.11k|        // 'avx2' routines. Also, we've checked that our haystack is big
 1063|  6.11k|        // enough to run on the vector routine. Pointer validity is caller's
 1064|  6.11k|        // responsibility.
 1065|  6.11k|        //
 1066|  6.11k|        // Note that we could call `self.avx2.find_raw` directly here. But that
 1067|  6.11k|        // means we'd have to annotate this routine with `target_feature`.
 1068|  6.11k|        // Which is fine, because this routine is `unsafe` anyway and the
 1069|  6.11k|        // `target_feature` obligation is met by virtue of building a `Three`.
 1070|  6.11k|        // The real problem is that a routine with a `target_feature`
 1071|  6.11k|        // annotation generally can't be inlined into caller code unless
 1072|  6.11k|        // the caller code has the same target feature annotations. Namely,
 1073|  6.11k|        // the common case (at time of writing) is for calling code to not
 1074|  6.11k|        // have the `avx2` target feature enabled *at compile time*. Without
 1075|  6.11k|        // `target_feature` on this routine, it can be inlined which will
 1076|  6.11k|        // handle some of the short-haystack cases above without touching the
 1077|  6.11k|        // architecture specific code.
 1078|  6.11k|        self.find_raw_avx2(start, end)
 1079|  8.54k|    }
_RNCNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB7_5Three8find_raw0Bf_:
 1050|  6.10k|                generic::fwd_byte_by_byte(start, end, |b| {
 1051|  6.10k|                    b == self.sse2.needle1()
 1052|  5.59k|                        || b == self.sse2.needle2()
 1053|  5.42k|                        || b == self.sse2.needle3()
 1054|  6.10k|                })
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_sse2Bd_:
 1151|    709|    unsafe fn find_raw_sse2(
 1152|    709|        &self,
 1153|    709|        start: *const u8,
 1154|    709|        end: *const u8,
 1155|    709|    ) -> Option<*const u8> {
 1156|    709|        self.sse2.find_raw(start, end)
 1157|    709|    }
_RNvMs6_NtNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_644avx26memchrNtB5_5Three13find_raw_avx2Bd_:
 1191|  6.11k|    unsafe fn find_raw_avx2(
 1192|  6.11k|        &self,
 1193|  6.11k|        start: *const u8,
 1194|  6.11k|        end: *const u8,
 1195|  6.11k|    ) -> Option<*const u8> {
 1196|  6.11k|        self.avx2.find_raw(start, end)
 1197|  6.11k|    }

_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw:
  174|  1.51M|pub(crate) fn memchr_raw(
  175|  1.51M|    n1: u8,
  176|  1.51M|    start: *const u8,
  177|  1.51M|    end: *const u8,
  178|  1.51M|) -> Option<*const u8> {
  179|  1.51M|    // SAFETY: We provide a valid function pointer type.
  180|  1.51M|    unsafe_ifunc!(
  181|  1.51M|        One,
  182|  1.51M|        find_raw,
  183|  1.51M|        unsafe fn(u8, *const u8, *const u8) -> Option<*const u8>,
  184|  1.51M|        Option<*const u8>,
  185|  1.51M|        start,
  186|  1.51M|        end,
  187|  1.51M|        n1
  188|  1.51M|    )
  189|  1.51M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw:
  220|  3.30M|pub(crate) fn memchr2_raw(
  221|  3.30M|    n1: u8,
  222|  3.30M|    n2: u8,
  223|  3.30M|    start: *const u8,
  224|  3.30M|    end: *const u8,
  225|  3.30M|) -> Option<*const u8> {
  226|  3.30M|    // SAFETY: We provide a valid function pointer type.
  227|  3.30M|    unsafe_ifunc!(
  228|  3.30M|        Two,
  229|  3.30M|        find_raw,
  230|  3.30M|        unsafe fn(u8, u8, *const u8, *const u8) -> Option<*const u8>,
  231|  3.30M|        Option<*const u8>,
  232|  3.30M|        start,
  233|  3.30M|        end,
  234|  3.30M|        n1,
  235|  3.30M|        n2
  236|  3.30M|    )
  237|  3.30M|}
_RNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw:
  270|  8.54k|pub(crate) fn memchr3_raw(
  271|  8.54k|    n1: u8,
  272|  8.54k|    n2: u8,
  273|  8.54k|    n3: u8,
  274|  8.54k|    start: *const u8,
  275|  8.54k|    end: *const u8,
  276|  8.54k|) -> Option<*const u8> {
  277|  8.54k|    // SAFETY: We provide a valid function pointer type.
  278|  8.54k|    unsafe_ifunc!(
  279|  8.54k|        Three,
  280|  8.54k|        find_raw,
  281|  8.54k|        unsafe fn(u8, u8, u8, *const u8, *const u8) -> Option<*const u8>,
  282|  8.54k|        Option<*const u8>,
  283|  8.54k|        start,
  284|  8.54k|        end,
  285|  8.54k|        n1,
  286|  8.54k|        n2,
  287|  8.54k|        n3
  288|  8.54k|    )
  289|  8.54k|}
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw9find_avx2:
   78|  1.51M|        unsafe fn find_avx2(
   79|  1.51M|            $($needle: u8),+,
   80|  1.51M|            $hay_start: *const u8,
   81|  1.51M|            $hay_end: *const u8,
   82|  1.51M|        ) -> $retty {
   83|  1.51M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  1.51M|            $memchrty::new_unchecked($($needle),+)
   85|  1.51M|                .$memchrfind($hay_start, $hay_end)
   86|  1.51M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr10memchr_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw9find_avx2:
   78|  3.30M|        unsafe fn find_avx2(
   79|  3.30M|            $($needle: u8),+,
   80|  3.30M|            $hay_start: *const u8,
   81|  3.30M|            $hay_end: *const u8,
   82|  3.30M|        ) -> $retty {
   83|  3.30M|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  3.30M|            $memchrty::new_unchecked($($needle),+)
   85|  3.30M|                .$memchrfind($hay_start, $hay_end)
   86|  3.30M|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr2_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw9find_avx2:
   78|  8.54k|        unsafe fn find_avx2(
   79|  8.54k|            $($needle: u8),+,
   80|  8.54k|            $hay_start: *const u8,
   81|  8.54k|            $hay_end: *const u8,
   82|  8.54k|        ) -> $retty {
   83|  8.54k|            use crate::arch::x86_64::avx2::memchr::$memchrty;
   84|  8.54k|            $memchrty::new_unchecked($($needle),+)
   85|  8.54k|                .$memchrfind($hay_start, $hay_end)
   86|  8.54k|        }
_RNvNvNtNtNtCseJq1f3D7C0A_6memchr4arch6x86_646memchr11memchr3_raw6detect:
  109|      1|        unsafe fn detect(
  110|      1|            $($needle: u8),+,
  111|      1|            $hay_start: *const u8,
  112|      1|            $hay_end: *const u8,
  113|      1|        ) -> $retty {
  114|      1|            let fun = {
  115|       |                #[cfg(not(target_feature = "sse2"))]
  116|       |                {
  117|       |                    debug!(
  118|       |                        "no sse2 feature available, using fallback for {}",
  119|       |                        stringify!($memchrty),
  120|       |                    );
  121|       |                    find_fallback as RealFn
  122|       |                }
  123|       |                #[cfg(target_feature = "sse2")]
  124|       |                {
  125|       |                    use crate::arch::x86_64::{sse2, avx2};
  126|      1|                    if avx2::memchr::$memchrty::is_available() {
  127|       |                        debug!("chose AVX2 for {}", stringify!($memchrty));
  128|      1|                        find_avx2 as RealFn
  129|      0|                    } else if sse2::memchr::$memchrty::is_available() {
  130|       |                        debug!("chose SSE2 for {}", stringify!($memchrty));
  131|      0|                        find_sse2 as RealFn
  132|       |                    } else {
  133|       |                        debug!("chose fallback for {}", stringify!($memchrty));
  134|      0|                        find_fallback as RealFn
  135|       |                    }
  136|       |                }
  137|       |            };
  138|      1|            FN.store(fun as Fn, Ordering::Relaxed);
  139|      1|            // SAFETY: The only thing we need to uphold here is the
  140|      1|            // `#[target_feature]` requirements. Since we check is_available
  141|      1|            // above before using the corresponding implementation, we are
  142|      1|            // guaranteed to only call code that is supported on the current
  143|      1|            // CPU.
  144|      1|            fun($($needle),+, $hay_start, $hay_end)
  145|      1|        }

_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8distanceB4_:
   21|  14.1M|    unsafe fn distance(self, origin: *const T) -> usize {
   22|  14.1M|        // TODO: Replace with `ptr::sub_ptr` once stabilized.
   23|  14.1M|        usize::try_from(self.offset_from(origin)).unwrap_unchecked()
   24|  14.1M|    }
_RNvXNtCseJq1f3D7C0A_6memchr3extPhNtB2_7Pointer8as_usizeB4_:
   26|   103k|    fn as_usize(self) -> usize {
   27|   103k|        self as usize
   28|   103k|    }

_RNvMNtCseJq1f3D7C0A_6memchr6memchrNtB2_6Memchr3newCsP2fOiAuvJ3_10sparesults:
  300|   490k|    pub fn new(needle1: u8, haystack: &'h [u8]) -> Memchr<'h> {
  301|   490k|        Memchr {
  302|   490k|            needle1,
  303|   490k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  304|   490k|        }
  305|   490k|    }
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCsP2fOiAuvJ3_10sparesults:
  377|  36.0k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  36.0k|        Memchr2 {
  379|  36.0k|            needle1,
  380|  36.0k|            needle2,
  381|  36.0k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  36.0k|        }
  383|  36.0k|    }
_RNvMs6_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr33newCsP2fOiAuvJ3_10sparesults:
  446|  2.06k|    pub fn new(
  447|  2.06k|        needle1: u8,
  448|  2.06k|        needle2: u8,
  449|  2.06k|        needle3: u8,
  450|  2.06k|        haystack: &'h [u8],
  451|  2.06k|    ) -> Memchr3<'h> {
  452|  2.06k|        Memchr3 {
  453|  2.06k|            needle1,
  454|  2.06k|            needle2,
  455|  2.06k|            needle3,
  456|  2.06k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  457|  2.06k|        }
  458|  2.06k|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr_iterCsP2fOiAuvJ3_10sparesults:
  216|   490k|pub fn memchr_iter<'h>(needle: u8, haystack: &'h [u8]) -> Memchr<'h> {
  217|   490k|    Memchr::new(needle, haystack)
  218|   490k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCsP2fOiAuvJ3_10sparesults:
  232|  36.0k|pub fn memchr2_iter<'h>(
  233|  36.0k|    needle1: u8,
  234|  36.0k|    needle2: u8,
  235|  36.0k|    haystack: &'h [u8],
  236|  36.0k|) -> Memchr2<'h> {
  237|  36.0k|    Memchr2::new(needle1, needle2, haystack)
  238|  36.0k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr3_iterCsP2fOiAuvJ3_10sparesults:
  256|  2.06k|pub fn memchr3_iter<'h>(
  257|  2.06k|    needle1: u8,
  258|  2.06k|    needle2: u8,
  259|  2.06k|    needle3: u8,
  260|  2.06k|    haystack: &'h [u8],
  261|  2.06k|) -> Memchr3<'h> {
  262|  2.06k|    Memchr3::new(needle1, needle2, needle3, haystack)
  263|  2.06k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr6memchrCsP2fOiAuvJ3_10sparesults:
   27|   497k|pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
   28|   497k|    // SAFETY: memchr_raw, when a match is found, always returns a valid
   29|   497k|    // pointer between start and end.
   30|   497k|    unsafe {
   31|   497k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|       |            memchr_raw(needle, start, end)
   33|   497k|        })
   34|   497k|    }
   35|   497k|}
_RNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsP2fOiAuvJ3_10sparesults:
  465|  8.54k|    fn next(&mut self) -> Option<usize> {
  466|  8.54k|        // SAFETY: All of our implementations of memchr ensure that any
  467|  8.54k|        // pointers returns will fall within the start and end bounds, and this
  468|  8.54k|        // upholds the safety contract of `self.it.next`.
  469|  8.54k|        unsafe {
  470|  8.54k|            self.it.next(|s, e| {
  471|       |                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  8.54k|            })
  473|  8.54k|        }
  474|  8.54k|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB4_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCsP2fOiAuvJ3_10sparesults:
  312|  1.01M|    fn next(&mut self) -> Option<usize> {
  313|  1.01M|        // SAFETY: All of our implementations of memchr ensure that any
  314|  1.01M|        // pointers returns will fall within the start and end bounds, and this
  315|  1.01M|        // upholds the safety contract of `self.it.next`.
  316|  1.01M|        unsafe {
  317|  1.01M|            // NOTE: I attempted to define an enum of previously created
  318|  1.01M|            // searchers and then switch on those here instead of just
  319|  1.01M|            // calling `memchr_raw` (or `One::new(..).find_raw(..)`). But
  320|  1.01M|            // that turned out to have a fair bit of extra overhead when
  321|  1.01M|            // searching very small haystacks.
  322|  1.01M|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
  323|  1.01M|        }
  324|  1.01M|    }
_RNCNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs4QWtT85WPeh_9quick_xml:
  395|  3.30M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
_RNCNvXs7_NtCseJq1f3D7C0A_6memchr6memchrNtB7_7Memchr3NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs4QWtT85WPeh_9quick_xml:
  470|  8.54k|            self.it.next(|s, e| {
  471|  8.54k|                memchr3_raw(self.needle1, self.needle2, self.needle3, s, e)
  472|  8.54k|            })
_RNCNvXs_NtCseJq1f3D7C0A_6memchr6memchrNtB6_6MemchrNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0Cs4QWtT85WPeh_9quick_xml:
  322|  1.01M|            self.it.next(|s, e| memchr_raw(self.needle1, s, e))
_RNvMs2_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr23newCs4QWtT85WPeh_9quick_xml:
  377|  3.21k|    pub fn new(needle1: u8, needle2: u8, haystack: &'h [u8]) -> Memchr2<'h> {
  378|  3.21k|        Memchr2 {
  379|  3.21k|            needle1,
  380|  3.21k|            needle2,
  381|  3.21k|            it: crate::arch::generic::memchr::Iter::new(haystack),
  382|  3.21k|        }
  383|  3.21k|    }
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawCs4QWtT85WPeh_9quick_xml:
  504|  1.01M|unsafe fn memchr_raw(
  505|  1.01M|    needle: u8,
  506|  1.01M|    start: *const u8,
  507|  1.01M|    end: *const u8,
  508|  1.01M|) -> Option<*const u8> {
  509|  1.01M|    #[cfg(target_arch = "x86_64")]
  510|  1.01M|    {
  511|  1.01M|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|  1.01M|        // instructions even when the `avx2` feature isn't enabled at compile
  513|  1.01M|        // time. This function also handles using a fallback if neither AVX2
  514|  1.01M|        // nor SSE2 (unusual) are available.
  515|  1.01M|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|  1.01M|    }
  517|  1.01M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|  1.01M|    {
  519|  1.01M|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|  1.01M|    }
  521|  1.01M|    #[cfg(target_arch = "aarch64")]
  522|  1.01M|    {
  523|  1.01M|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|  1.01M|    }
  525|  1.01M|    #[cfg(not(any(
  526|  1.01M|        target_arch = "x86_64",
  527|  1.01M|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|  1.01M|        target_arch = "aarch64"
  529|  1.01M|    )))]
  530|  1.01M|    {
  531|  1.01M|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|  1.01M|    }
  533|  1.01M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr2_rawCs4QWtT85WPeh_9quick_xml:
  574|  3.30M|unsafe fn memchr2_raw(
  575|  3.30M|    needle1: u8,
  576|  3.30M|    needle2: u8,
  577|  3.30M|    start: *const u8,
  578|  3.30M|    end: *const u8,
  579|  3.30M|) -> Option<*const u8> {
  580|  3.30M|    #[cfg(target_arch = "x86_64")]
  581|  3.30M|    {
  582|  3.30M|        crate::arch::x86_64::memchr::memchr2_raw(needle1, needle2, start, end)
  583|  3.30M|    }
  584|  3.30M|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  585|  3.30M|    {
  586|  3.30M|        crate::arch::wasm32::memchr::memchr2_raw(needle1, needle2, start, end)
  587|  3.30M|    }
  588|  3.30M|    #[cfg(target_arch = "aarch64")]
  589|  3.30M|    {
  590|  3.30M|        crate::arch::aarch64::memchr::memchr2_raw(needle1, needle2, start, end)
  591|  3.30M|    }
  592|  3.30M|    #[cfg(not(any(
  593|  3.30M|        target_arch = "x86_64",
  594|  3.30M|        all(target_arch = "wasm32", target_feature = "simd128"),
  595|  3.30M|        target_arch = "aarch64"
  596|  3.30M|    )))]
  597|  3.30M|    {
  598|  3.30M|        crate::arch::all::memchr::Two::new(needle1, needle2)
  599|  3.30M|            .find_raw(start, end)
  600|  3.30M|    }
  601|  3.30M|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr11memchr3_rawCs4QWtT85WPeh_9quick_xml:
  646|  8.54k|unsafe fn memchr3_raw(
  647|  8.54k|    needle1: u8,
  648|  8.54k|    needle2: u8,
  649|  8.54k|    needle3: u8,
  650|  8.54k|    start: *const u8,
  651|  8.54k|    end: *const u8,
  652|  8.54k|) -> Option<*const u8> {
  653|  8.54k|    #[cfg(target_arch = "x86_64")]
  654|  8.54k|    {
  655|  8.54k|        crate::arch::x86_64::memchr::memchr3_raw(
  656|  8.54k|            needle1, needle2, needle3, start, end,
  657|  8.54k|        )
  658|  8.54k|    }
  659|  8.54k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  660|  8.54k|    {
  661|  8.54k|        crate::arch::wasm32::memchr::memchr3_raw(
  662|  8.54k|            needle1, needle2, needle3, start, end,
  663|  8.54k|        )
  664|  8.54k|    }
  665|  8.54k|    #[cfg(target_arch = "aarch64")]
  666|  8.54k|    {
  667|  8.54k|        crate::arch::aarch64::memchr::memchr3_raw(
  668|  8.54k|            needle1, needle2, needle3, start, end,
  669|  8.54k|        )
  670|  8.54k|    }
  671|  8.54k|    #[cfg(not(any(
  672|  8.54k|        target_arch = "x86_64",
  673|  8.54k|        all(target_arch = "wasm32", target_feature = "simd128"),
  674|  8.54k|        target_arch = "aarch64"
  675|  8.54k|    )))]
  676|  8.54k|    {
  677|  8.54k|        crate::arch::all::memchr::Three::new(needle1, needle2, needle3)
  678|  8.54k|            .find_raw(start, end)
  679|  8.54k|    }
  680|  8.54k|}
_RNvNtCseJq1f3D7C0A_6memchr6memchr12memchr2_iterCs4QWtT85WPeh_9quick_xml:
  232|  3.21k|pub fn memchr2_iter<'h>(
  233|  3.21k|    needle1: u8,
  234|  3.21k|    needle2: u8,
  235|  3.21k|    haystack: &'h [u8],
  236|  3.21k|) -> Memchr2<'h> {
  237|  3.21k|    Memchr2::new(needle1, needle2, haystack)
  238|  3.21k|}
_RNvXs3_NtCseJq1f3D7C0A_6memchr6memchrNtB5_7Memchr2NtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs4QWtT85WPeh_9quick_xml:
  390|  3.30M|    fn next(&mut self) -> Option<usize> {
  391|  3.30M|        // SAFETY: All of our implementations of memchr ensure that any
  392|  3.30M|        // pointers returns will fall within the start and end bounds, and this
  393|  3.30M|        // upholds the safety contract of `self.it.next`.
  394|  3.30M|        unsafe {
  395|  3.30M|            self.it.next(|s, e| memchr2_raw(self.needle1, self.needle2, s, e))
  396|  3.30M|        }
  397|  3.30M|    }
_RNCNvNtCseJq1f3D7C0A_6memchr6memchr6memchr0B5_:
   31|   497k|        generic::search_slice_with_raw(haystack, |start, end| {
   32|   497k|            memchr_raw(needle, start, end)
   33|   497k|        })
_RNvNtCseJq1f3D7C0A_6memchr6memchr10memchr_rawB3_:
  504|   497k|unsafe fn memchr_raw(
  505|   497k|    needle: u8,
  506|   497k|    start: *const u8,
  507|   497k|    end: *const u8,
  508|   497k|) -> Option<*const u8> {
  509|   497k|    #[cfg(target_arch = "x86_64")]
  510|   497k|    {
  511|   497k|        // x86_64 does CPU feature detection at runtime in order to use AVX2
  512|   497k|        // instructions even when the `avx2` feature isn't enabled at compile
  513|   497k|        // time. This function also handles using a fallback if neither AVX2
  514|   497k|        // nor SSE2 (unusual) are available.
  515|   497k|        crate::arch::x86_64::memchr::memchr_raw(needle, start, end)
  516|   497k|    }
  517|   497k|    #[cfg(all(target_arch = "wasm32", target_feature = "simd128"))]
  518|   497k|    {
  519|   497k|        crate::arch::wasm32::memchr::memchr_raw(needle, start, end)
  520|   497k|    }
  521|   497k|    #[cfg(target_arch = "aarch64")]
  522|   497k|    {
  523|   497k|        crate::arch::aarch64::memchr::memchr_raw(needle, start, end)
  524|   497k|    }
  525|   497k|    #[cfg(not(any(
  526|   497k|        target_arch = "x86_64",
  527|   497k|        all(target_arch = "wasm32", target_feature = "simd128"),
  528|   497k|        target_arch = "aarch64"
  529|   497k|    )))]
  530|   497k|    {
  531|   497k|        crate::arch::all::memchr::One::new(needle).find_raw(start, end)
  532|   497k|    }
  533|   497k|}

_RNvMNtCseJq1f3D7C0A_6memchr6vectorNtB2_16SensibleMoveMask14get_for_offset:
  126|  4.51M|    fn get_for_offset(self) -> u32 {
  127|  4.51M|        #[cfg(target_endian = "big")]
  128|  4.51M|        {
  129|  4.51M|            self.0.swap_bytes()
  130|  4.51M|        }
  131|  4.51M|        #[cfg(target_endian = "little")]
  132|  4.51M|        {
  133|  4.51M|            self.0
  134|  4.51M|        }
  135|  4.51M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12first_offset:
  171|  4.51M|    fn first_offset(self) -> usize {
  172|  4.51M|        // We are dealing with little endian here (and if we aren't, we swap
  173|  4.51M|        // the bytes so we are in practice), where the most significant byte
  174|  4.51M|        // is at a higher address. That means the least significant bit that
  175|  4.51M|        // is set corresponds to the position of our first matching byte.
  176|  4.51M|        // That position corresponds to the number of zeros after the least
  177|  4.51M|        // significant bit.
  178|  4.51M|        self.get_for_offset().trailing_zeros() as usize
  179|  4.51M|    }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask12has_non_zero:
  146|  4.72M|    fn has_non_zero(self) -> bool {
  147|  4.72M|        self.0 != 0
  148|  4.72M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector14load_unaligned:
  217|   206k|        unsafe fn load_unaligned(data: *const u8) -> __m128i {
  218|   206k|            _mm_loadu_si128(data as *const __m128i)
  219|   206k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector8movemask:
  222|   529k|        unsafe fn movemask(self) -> SensibleMoveMask {
  223|   529k|            SensibleMoveMask(_mm_movemask_epi8(self) as u32)
  224|   529k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5cmpeq:
  227|   376k|        unsafe fn cmpeq(self, vector2: Self) -> __m128i {
  228|   376k|            _mm_cmpeq_epi8(self, vector2)
  229|   376k|        }
_RNvYNtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtNtCseJq1f3D7C0A_6memchr6vector6Vector27movemask_will_have_non_zeroBS_:
   63|  81.7k|    unsafe fn movemask_will_have_non_zero(self) -> bool {
   64|  81.7k|        self.movemask().has_non_zero()
   65|  81.7k|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector14load_unaligned:
  266|  4.35M|        unsafe fn load_unaligned(data: *const u8) -> __m256i {
  267|  4.35M|            _mm256_loadu_si256(data as *const __m256i)
  268|  4.35M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector8movemask:
  271|  10.2M|        unsafe fn movemask(self) -> SensibleMoveMask {
  272|  10.2M|            SensibleMoveMask(_mm256_movemask_epi8(self) as u32)
  273|  10.2M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5cmpeq:
  276|  7.59M|        unsafe fn cmpeq(self, vector2: Self) -> __m256i {
  277|  7.59M|            _mm256_cmpeq_epi8(self, vector2)
  278|  7.59M|        }
_RNvXs_NtCseJq1f3D7C0A_6memchr6vectorNtB4_16SensibleMoveMaskNtB4_8MoveMask2or:
  161|  3.06M|    fn or(self, other: SensibleMoveMask) -> SensibleMoveMask {
  162|  3.06M|        SensibleMoveMask(self.0 | other.0)
  163|  3.06M|    }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector5splat:
  207|  8.15M|        unsafe fn splat(byte: u8) -> __m128i {
  208|  8.15M|            _mm_set1_epi8(byte as i8)
  209|  8.15M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86sse2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m128iNtB4_6Vector2or:
  237|   169k|        unsafe fn or(self, vector2: Self) -> __m128i {
  238|   169k|            _mm_or_si128(self, vector2)
  239|   169k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector5splat:
  256|  8.15M|        unsafe fn splat(byte: u8) -> __m256i {
  257|  8.15M|            _mm256_set1_epi8(byte as i8)
  258|  8.15M|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector12load_aligned:
  261|   212k|        unsafe fn load_aligned(data: *const u8) -> __m256i {
  262|   212k|            _mm256_load_si256(data as *const __m256i)
  263|   212k|        }
_RNvXNtNtCseJq1f3D7C0A_6memchr6vector7x86avx2NtNtNtCscdEvteftVc2_4core9core_arch3x867___m256iNtB4_6Vector2or:
  286|  3.16M|        unsafe fn or(self, vector2: Self) -> __m256i {
  287|  3.16M|            _mm256_or_si256(self, vector2)
  288|  3.16M|        }

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCs41Ye2X6NnRr_13libfuzzer_sys:
   49|  15.3k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  15.3k|        // An `Acquire` load is enough because that makes all the initialization
   51|  15.3k|        // operations visible to us, and, this being a fast path, weaker
   52|  15.3k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  15.3k|        // `SeqCst` operations on the slow path.
   54|  15.3k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  15.3k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCs41Ye2X6NnRr_13libfuzzer_sys:
  963|  15.3k|        pub fn get(&self) -> Option<&T> {
  964|  15.3k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  15.3k|                None
  969|       |            }
  970|  15.3k|        }

_RNvMs_NtCs4QWtT85WPeh_9quick_xml8encodingNtB4_7Decoder6decode:
   82|  5.13k|    pub fn decode<'b>(&self, bytes: &'b [u8]) -> Result<Cow<'b, str>> {
   83|       |        #[cfg(not(feature = "encoding"))]
   84|  5.13k|        let decoded = Ok(Cow::Borrowed(std::str::from_utf8(bytes)?));
   85|       |
   86|       |        #[cfg(feature = "encoding")]
   87|       |        let decoded = decode(bytes, self.encoding);
   88|       |
   89|  3.83k|        decoded
   90|  5.13k|    }
_RNvMs_NtCs4QWtT85WPeh_9quick_xml8encodingNtB4_7Decoder10decode_cow:
  104|  4.14k|    pub(crate) fn decode_cow<'b>(&self, bytes: &Cow<'b, [u8]>) -> Result<Cow<'b, str>> {
  105|  4.14k|        match bytes {
  106|  4.14k|            Cow::Borrowed(bytes) => self.decode(bytes),
  107|       |            // Convert to owned, because otherwise Cow will be bound with wrong lifetime
  108|      0|            Cow::Owned(bytes) => Ok(self.decode(bytes)?.into_owned().into()),
  109|       |        }
  110|  4.14k|    }

_RNvXs6_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtNtBS_3str5error9Utf8ErrorE4fromB7_:
  235|  1.29k|    fn from(error: Utf8Error) -> Error {
  236|  1.29k|        Error::NonDecodable(Some(error))
  237|  1.29k|    }
_RNvXs8_NtCs4QWtT85WPeh_9quick_xml6errorsNtB5_5ErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtB7_6escape11EscapeErrorE4fromB7_:
  251|    487|    fn from(error: EscapeError) -> Error {
  252|    487|        Error::EscapeError(error)
  253|    487|    }

_RINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNvB2_25resolve_predefined_entityEB4_:
  249|  3.21k|pub fn unescape_with<'input, 'entity, F>(
  250|  3.21k|    raw: &'input str,
  251|  3.21k|    mut resolve_entity: F,
  252|  3.21k|) -> Result<Cow<'input, str>, EscapeError>
  253|  3.21k|where
  254|  3.21k|    // the lifetime of the output comes from a capture or is `'static`
  255|  3.21k|    F: FnMut(&str) -> Option<&'entity str>,
  256|  3.21k|{
  257|  3.21k|    let bytes = raw.as_bytes();
  258|  3.21k|    let mut unescaped = None;
  259|  3.21k|    let mut last_end = 0;
  260|  3.21k|    let mut iter = memchr2_iter(b'&', b';', bytes);
  261|  62.2k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
  262|  59.4k|        match iter.next() {
  263|  59.2k|            Some(end) if bytes[end] == b';' => {
  264|  59.2k|                // append valid data
  265|  59.2k|                if unescaped.is_none() {
  266|  1.15k|                    unescaped = Some(String::with_capacity(raw.len()));
  267|  58.0k|                }
  268|  59.2k|                let unescaped = unescaped.as_mut().expect("initialized");
  269|  59.2k|                unescaped.push_str(&raw[last_end..start]);
  270|  59.2k|
  271|  59.2k|                // search for character correctness
  272|  59.2k|                let pat = &raw[start + 1..end];
  273|  59.2k|                if let Some(entity) = pat.strip_prefix('#') {
  274|  51.2k|                    let codepoint = parse_number(entity).map_err(EscapeError::InvalidCharRef)?;
  275|  51.1k|                    unescaped.push_str(codepoint.encode_utf8(&mut [0u8; 4]));
  276|  7.97k|                } else if let Some(value) = resolve_entity(pat) {
  277|  7.89k|                    unescaped.push_str(value);
  278|  7.89k|                } else {
  279|     82|                    return Err(EscapeError::UnrecognizedEntity(
  280|     82|                        start + 1..end,
  281|     82|                        pat.to_string(),
  282|     82|                    ));
  283|       |                }
  284|       |
  285|  59.0k|                last_end = end + 1;
  286|       |            }
  287|    280|            _ => return Err(EscapeError::UnterminatedEntity(start..raw.len())),
  288|       |        }
  289|       |    }
  290|       |
  291|  2.73k|    if let Some(mut unescaped) = unescaped {
  292|    869|        if let Some(raw) = raw.get(last_end..) {
  293|    869|            unescaped.push_str(raw);
  294|    869|        }
  295|    869|        Ok(Cow::Owned(unescaped))
  296|       |    } else {
  297|  1.86k|        Ok(Cow::Borrowed(raw))
  298|       |    }
  299|  3.21k|}
_RNCINvNtCs4QWtT85WPeh_9quick_xml6escape13unescape_withNvB4_25resolve_predefined_entityE0B6_:
  261|  67.0k|    while let Some(start) = iter.by_ref().find(|p| bytes[*p] == b'&') {
_RNvNtCs4QWtT85WPeh_9quick_xml6escape25resolve_predefined_entityB3_:
  307|  7.97k|pub const fn resolve_predefined_entity(entity: &str) -> Option<&'static str> {
  308|  7.97k|    #[cfg(not(feature = "escape-html"))]
  309|  7.97k|    {
  310|  7.97k|        resolve_xml_entity(entity)
  311|  7.97k|    }
  312|  7.97k|
  313|  7.97k|    #[cfg(feature = "escape-html")]
  314|  7.97k|    {
  315|  7.97k|        resolve_html5_entity(entity)
  316|  7.97k|    }
  317|  7.97k|}
_RNvNtCs4QWtT85WPeh_9quick_xml6escape18resolve_xml_entity:
  337|  7.97k|pub const fn resolve_xml_entity(entity: &str) -> Option<&'static str> {
  338|       |    // match over strings are not allowed in const functions
  339|  7.97k|    let s = match entity.as_bytes() {
  340|  7.97k|        b"lt" => "<",
  341|  2.67k|        b"gt" => ">",
  342|  2.92k|        b"amp" => "&",
  343|  2.28k|        b"apos" => "'",
  344|    194|        b"quot" => "\"",
  345|     82|        _ => return None,
  346|       |    };
  347|  7.89k|    Some(s)
  348|  7.97k|}
_RNvNtCs4QWtT85WPeh_9quick_xml6escape12parse_number:
 1819|  51.2k|fn parse_number(num: &str) -> Result<char, ParseCharRefError> {
 1820|  51.2k|    let code = if let Some(hex) = num.strip_prefix('x') {
 1821|  19.0k|        from_str_radix(hex, 16)?
 1822|       |    } else {
 1823|  32.2k|        from_str_radix(num, 10)?
 1824|       |    };
 1825|  51.1k|    if code == 0 {
 1826|      2|        return Err(ParseCharRefError::IllegalCharacter(code));
 1827|  51.1k|    }
 1828|  51.1k|    match std::char::from_u32(code) {
 1829|  51.1k|        Some(c) => Ok(c),
 1830|     14|        None => Err(ParseCharRefError::InvalidCodepoint(code)),
 1831|       |    }
 1832|  51.2k|}
_RNvNtCs4QWtT85WPeh_9quick_xml6escape14from_str_radixB3_:
 1835|  51.2k|fn from_str_radix(src: &str, radix: u32) -> Result<u32, ParseCharRefError> {
 1836|  51.2k|    match src.as_bytes().first().copied() {
 1837|       |        // We should not allow sign numbers, but u32::from_str_radix will accept `+`.
 1838|       |        // We also handle `-` to be consistent in returned errors
 1839|     54|        Some(b'+') | Some(b'-') => Err(ParseCharRefError::UnexpectedSign),
 1840|  51.1k|        _ => u32::from_str_radix(src, radix).map_err(ParseCharRefError::InvalidNumber),
 1841|       |    }
 1842|  51.2k|}

_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart10local_nameCsP2fOiAuvJ3_10sparesults:
  203|    654|    pub fn local_name(&self) -> LocalName {
  204|    654|        self.name().into()
  205|    654|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart4nameCsP2fOiAuvJ3_10sparesults:
  194|  1.30k|    pub fn name(&self) -> QName {
  195|  1.30k|        QName(&self.buf[..self.name_len])
  196|  1.30k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart4wrapB4_:
  102|   456k|    pub(crate) const fn wrap(content: &'a [u8], name_len: usize) -> Self {
  103|   456k|        BytesStart {
  104|   456k|            buf: Cow::Borrowed(content),
  105|   456k|            name_len,
  106|   456k|        }
  107|   456k|    }
_RNvMNtCs4QWtT85WPeh_9quick_xml6eventsNtB2_10BytesStart4nameB4_:
  194|    654|    pub fn name(&self) -> QName {
  195|    654|        QName(&self.buf[..self.name_len])
  196|    654|    }
_RINvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_9BytesText4wrapRShEB8_:
  537|  32.7k|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  538|  32.7k|        Self {
  539|  32.7k|            content: content.into(),
  540|  32.7k|            decoder,
  541|  32.7k|        }
  542|  32.7k|    }
_RNvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesText8unescape:
  586|  4.14k|    pub fn unescape(&self) -> Result<Cow<'a, str>> {
  587|  4.14k|        self.unescape_with(resolve_predefined_entity)
  588|  4.14k|    }
_RINvMs7_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_9BytesText13unescape_withNvNtB8_6escape25resolve_predefined_entityEB8_:
  594|  4.14k|    pub fn unescape_with<'entity>(
  595|  4.14k|        &self,
  596|  4.14k|        resolve_entity: impl FnMut(&str) -> Option<&'entity str>,
  597|  4.14k|    ) -> Result<Cow<'a, str>> {
  598|  4.14k|        let decoded = self.decoder.decode_cow(&self.content)?;
  599|       |
  600|  3.21k|        match unescape_with(&decoded, resolve_entity)? {
  601|       |            // Because result is borrowed, no replacements was done and we can use original string
  602|  1.86k|            Cow::Borrowed(_) => Ok(decoded),
  603|    869|            Cow::Owned(s) => Ok(s.into()),
  604|       |        }
  605|  4.14k|    }
_RNvXs9_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesTextNtNtNtCscdEvteftVc2_4core3ops5deref5Deref5deref:
  638|  5.10k|    fn deref(&self) -> &[u8] {
  639|  5.10k|        &self.content
  640|  5.10k|    }
_RINvMsa_NtCs4QWtT85WPeh_9quick_xml6eventsNtB6_10BytesCData4wrapRShEB8_:
  692|      5|    pub(crate) fn wrap<C: Into<Cow<'a, [u8]>>>(content: C, decoder: Decoder) -> Self {
  693|      5|        Self {
  694|      5|            content: content.into(),
  695|      5|            decoder,
  696|      5|        }
  697|      5|    }
_RNvMsd_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_7BytesPI4wrapB7_:
  872|   333k|    pub(crate) const fn wrap(content: &'a [u8], target_len: usize) -> Self {
  873|   333k|        Self {
  874|   333k|            content: BytesStart::wrap(content, target_len),
  875|   333k|        }
  876|   333k|    }
_RNvMsg_NtCs4QWtT85WPeh_9quick_xml6eventsNtB5_9BytesDecl10from_start:
 1089|   123k|    pub const fn from_start(start: BytesStart<'a>) -> Self {
 1090|   123k|        Self { content: start }
 1091|   123k|    }

_RNvMNtCs4QWtT85WPeh_9quick_xml4nameNtB2_5QName5index:
  110|    654|    fn index(&self) -> Option<usize> {
  111|    654|        memchr(b':', self.0)
  112|    654|    }
_RNvXs0_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCsP2fOiAuvJ3_10sparesults:
  123|    654|    fn as_ref(&self) -> &[u8] {
  124|    654|        self.0
  125|    654|    }
_RNvXs3_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_9LocalNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refCsP2fOiAuvJ3_10sparesults:
  153|    654|    fn as_ref(&self) -> &[u8] {
  154|    654|        self.0
  155|    654|    }
_RNvXs4_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_9LocalNameINtNtCscdEvteftVc2_4core7convert4FromNtB5_5QNameE4fromCsP2fOiAuvJ3_10sparesults:
  172|    654|    fn from(name: QName<'a>) -> Self {
  173|    654|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
  174|    654|    }
_RNCNvXs4_NtCs4QWtT85WPeh_9quick_xml4nameNtB7_9LocalNameINtNtCscdEvteftVc2_4core7convert4FromNtB7_5QNameE4from0CsP2fOiAuvJ3_10sparesults:
  173|      6|        Self(name.index().map_or(name.0, |i| &name.0[i + 1..]))
_RNvXs0_NtCs4QWtT85WPeh_9quick_xml4nameNtB5_5QNameINtNtCscdEvteftVc2_4core7convert5AsRefShE6as_refB7_:
  123|    654|    fn as_ref(&self) -> &[u8] {
  124|    654|        self.0
  125|    654|    }

_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser4feedCsP2fOiAuvJ3_10sparesults:
   57|  2.06k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   58|  7.46k|        for i in memchr::memchr3_iter(b'>', b'\'', b'"', bytes) {
   59|  7.46k|            *self = match (*self, bytes[i]) {
   60|       |                // only allowed to match `>` while we are in state `Outside`
   61|    988|                (Self::Outside, b'>') => return Some(i),
   62|  1.73k|                (Self::Outside, b'\'') => Self::SingleQ,
   63|    435|                (Self::Outside, b'\"') => Self::DoubleQ,
   64|       |
   65|       |                // the only end_byte that gets us out if the same character
   66|  1.97k|                (Self::SingleQ, b'\'') | (Self::DoubleQ, b'"') => Self::Outside,
   67|       |
   68|       |                // all other bytes: no state change
   69|  2.33k|                _ => continue,
   70|       |            };
   71|       |        }
   72|  1.08k|        None
   73|  2.06k|    }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser7elementNtB2_13ElementParserNtB4_6Parser9eof_errorCsP2fOiAuvJ3_10sparesults:
   76|  1.08k|    fn eof_error() -> SyntaxError {
   77|  1.08k|        SyntaxError::UnclosedTag
   78|  1.08k|    }

_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser4feedCsP2fOiAuvJ3_10sparesults:
   61|   461k|    fn feed(&mut self, bytes: &[u8]) -> Option<usize> {
   62|   933k|        for i in memchr::memchr_iter(b'>', bytes) {
   63|   933k|            match i {
   64|      0|                0 if self.0 => return Some(0),
   65|       |                // If the previous byte is `?`, then we found `?>`
   66|   933k|                i if i > 0 && bytes[i - 1] == b'?' => return Some(i),
   67|   477k|                _ => {}
   68|       |            }
   69|       |        }
   70|  4.78k|        self.0 = bytes.last().copied() == Some(b'?');
   71|  4.78k|        None
   72|   461k|    }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6parser2piNtB2_8PiParserNtB4_6Parser9eof_errorCsP2fOiAuvJ3_10sparesults:
   75|  4.78k|    fn eof_error() -> SyntaxError {
   76|  4.78k|        SyntaxError::UnclosedPIOrXmlDecl
   77|  4.78k|    }

_RINvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtNtB7_6parser2pi8PiParserECsP2fOiAuvJ3_10sparesults:
  105|   461k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|   461k|            &mut self,
  107|   461k|            mut parser: P,
  108|   461k|            buf: &'b mut Vec<u8>,
  109|   461k|            position: &mut u64,
  110|   461k|        ) -> Result<&'b [u8]> {
  111|   461k|            let mut read = 0;
  112|   461k|            let start = buf.len();
  113|       |            loop {
  114|   466k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|   466k|                    Ok(n) if n.is_empty() => break,
  116|   461k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|   461k|                if let Some(i) = parser.feed(available) {
  125|   456k|                    buf.extend_from_slice(&available[..i]);
  126|   456k|
  127|   456k|                    // +1 for `>` which we do not include
  128|   456k|                    self $(.$reader)? .consume(i + 1);
  129|   456k|                    read += i as u64 + 1;
  130|   456k|
  131|   456k|                    *position += read;
  132|   456k|                    return Ok(&buf[start..]);
  133|  4.78k|                }
  134|  4.78k|
  135|  4.78k|                // The `>` symbol not yet found, continue reading
  136|  4.78k|                buf.extend_from_slice(available);
  137|  4.78k|
  138|  4.78k|                let used = available.len();
  139|  4.78k|                self $(.$reader)? .consume(used);
  140|  4.78k|                read += used as u64;
  141|       |            }
  142|       |
  143|  4.78k|            *position += read;
  144|  4.78k|            Err(Error::Syntax(P::eof_error()))
  145|   461k|        }
_RINvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB5_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_withNtNtNtB7_6parser7element13ElementParserECsP2fOiAuvJ3_10sparesults:
  105|  2.06k|        $($async)? fn read_with<$($lf,)? P: Parser>(
  106|  2.06k|            &mut self,
  107|  2.06k|            mut parser: P,
  108|  2.06k|            buf: &'b mut Vec<u8>,
  109|  2.06k|            position: &mut u64,
  110|  2.06k|        ) -> Result<&'b [u8]> {
  111|  2.06k|            let mut read = 0;
  112|  2.06k|            let start = buf.len();
  113|       |            loop {
  114|  3.14k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
  115|  3.14k|                    Ok(n) if n.is_empty() => break,
  116|  2.06k|                    Ok(n) => n,
  117|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  118|      0|                    Err(e) => {
  119|      0|                        *position += read;
  120|      0|                        return Err(Error::Io(e.into()));
  121|       |                    }
  122|       |                };
  123|       |
  124|  2.06k|                if let Some(i) = parser.feed(available) {
  125|    988|                    buf.extend_from_slice(&available[..i]);
  126|    988|
  127|    988|                    // +1 for `>` which we do not include
  128|    988|                    self $(.$reader)? .consume(i + 1);
  129|    988|                    read += i as u64 + 1;
  130|    988|
  131|    988|                    *position += read;
  132|    988|                    return Ok(&buf[start..]);
  133|  1.08k|                }
  134|  1.08k|
  135|  1.08k|                // The `>` symbol not yet found, continue reading
  136|  1.08k|                buf.extend_from_slice(available);
  137|  1.08k|
  138|  1.08k|                let used = available.len();
  139|  1.08k|                self $(.$reader)? .consume(used);
  140|  1.08k|                read += used as u64;
  141|       |            }
  142|       |
  143|  1.08k|            *position += read;
  144|  1.08k|            Err(Error::Syntax(P::eof_error()))
  145|  2.06k|        }
_RNCNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB6_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15skip_whitespace0CsP2fOiAuvJ3_10sparesults:
  203|   712k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15remove_utf8_bomCsP2fOiAuvJ3_10sparesults:
   19|  15.3k|        $($async)? fn remove_utf8_bom(&mut self) -> io::Result<()> {
   20|       |            use crate::encoding::UTF8_BOM;
   21|       |
   22|       |            loop {
   23|  15.3k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
   24|  15.3k|                    Ok(n) => {
   25|  15.3k|                        if n.starts_with(UTF8_BOM) {
   26|    359|                            self $(.$reader)? .consume(UTF8_BOM.len());
   27|  14.9k|                        }
   28|  15.3k|                        Ok(())
   29|       |                    },
   30|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   31|      0|                    Err(e) => Err(e),
   32|       |                };
   33|       |            }
   34|  15.3k|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE15skip_whitespaceCsP2fOiAuvJ3_10sparesults:
  199|   498k|        $($async)? fn skip_whitespace(&mut self, position: &mut u64) -> io::Result<()> {
  200|       |            loop {
  201|   581k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  202|   581k|                    Ok(n) => {
  203|   581k|                        let count = n.iter().position(|b| !is_whitespace(*b)).unwrap_or(n.len());
  204|   581k|                        if count > 0 {
  205|  82.7k|                            self $(.$reader)? .consume(count);
  206|  82.7k|                            *position += count as u64;
  207|  82.7k|                            continue;
  208|       |                        } else {
  209|   498k|                            Ok(())
  210|       |                        }
  211|       |                    }
  212|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  213|      0|                    Err(e) => Err(e),
  214|       |                };
  215|       |            }
  216|   498k|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE17read_bang_elementCsP2fOiAuvJ3_10sparesults:
  148|  28.6k|        $($async)? fn read_bang_element $(<$lf>)? (
  149|  28.6k|            &mut self,
  150|  28.6k|            buf: &'b mut Vec<u8>,
  151|  28.6k|            position: &mut u64,
  152|  28.6k|        ) -> Result<(BangType, &'b [u8])> {
  153|  28.6k|            // Peeked one bang ('!') before being called, so it's guaranteed to
  154|  28.6k|            // start with it.
  155|  28.6k|            let start = buf.len();
  156|  28.6k|            let mut read = 1;
  157|  28.6k|            buf.push(b'!');
  158|  28.6k|            self $(.$reader)? .consume(1);
  159|       |
  160|  28.6k|            let bang_type = BangType::new(self.peek_one() $(.$await)? ?)?;
  161|       |
  162|       |            loop {
  163|  29.5k|                match self $(.$reader)? .fill_buf() $(.$await)? {
  164|       |                    // Note: Do not update position, so the error points to
  165|       |                    // somewhere sane rather than at the EOF
  166|  29.5k|                    Ok(n) if n.is_empty() => break,
  167|  28.6k|                    Ok(available) => {
  168|       |                        // We only parse from start because we don't want to consider
  169|       |                        // whatever is in the buffer before the bang element
  170|  28.6k|                        if let Some((consumed, used)) = bang_type.parse(&buf[start..], available) {
  171|  27.7k|                            buf.extend_from_slice(consumed);
  172|  27.7k|
  173|  27.7k|                            self $(.$reader)? .consume(used);
  174|  27.7k|                            read += used as u64;
  175|  27.7k|
  176|  27.7k|                            *position += read;
  177|  27.7k|                            return Ok((bang_type, &buf[start..]));
  178|    854|                        } else {
  179|    854|                            buf.extend_from_slice(available);
  180|    854|
  181|    854|                            let used = available.len();
  182|    854|                            self $(.$reader)? .consume(used);
  183|    854|                            read += used as u64;
  184|    854|                        }
  185|       |                    }
  186|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  187|      0|                    Err(e) => {
  188|      0|                        *position += read;
  189|      0|                        return Err(Error::Io(e.into()));
  190|       |                    }
  191|       |                }
  192|       |            }
  193|       |
  194|    854|            *position += read;
  195|    854|            Err(bang_type.to_err())
  196|  28.6k|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE8peek_oneCsP2fOiAuvJ3_10sparesults:
  219|   521k|        $($async)? fn peek_one(&mut self) -> io::Result<Option<u8>> {
  220|       |            loop {
  221|   521k|                break match self $(.$reader)? .fill_buf() $(.$await)? {
  222|   521k|                    Ok(n) => Ok(n.first().cloned()),
  223|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
  224|      0|                    Err(e) => Err(e),
  225|       |                };
  226|       |            }
  227|   521k|        }
_RNvXNtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerRShINtB4_9XmlSourceQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE9read_textCsP2fOiAuvJ3_10sparesults:
   54|   498k|        $($async)? fn read_text $(<$lf>)? (
   55|   498k|            &mut self,
   56|   498k|            buf: &'b mut Vec<u8>,
   57|   498k|            position: &mut u64,
   58|   498k|        ) -> ReadTextResult<'b, &'b mut Vec<u8>> {
   59|   498k|            let mut read = 0;
   60|   498k|            let start = buf.len();
   61|       |            loop {
   62|   501k|                let available = match self $(.$reader)? .fill_buf() $(.$await)? {
   63|   501k|                    Ok(n) if n.is_empty() => break,
   64|   496k|                    Ok(n) => n,
   65|      0|                    Err(ref e) if e.kind() == io::ErrorKind::Interrupted => continue,
   66|      0|                    Err(e) => {
   67|      0|                        *position += read;
   68|      0|                        return ReadTextResult::Err(e);
   69|       |                    }
   70|       |                };
   71|       |
   72|   496k|                match memchr::memchr(b'<', available) {
   73|       |                    // Special handling is needed only on the first iteration.
   74|       |                    // On next iterations we already read something and should emit Text event
   75|   492k|                    Some(0) if read == 0 => {
   76|   492k|                        self $(.$reader)? .consume(1);
   77|   492k|                        *position += 1;
   78|   492k|                        return ReadTextResult::Markup(buf);
   79|       |                    }
   80|    870|                    Some(i) => {
   81|    870|                        buf.extend_from_slice(&available[..i]);
   82|    870|
   83|    870|                        let used = i + 1;
   84|    870|                        self $(.$reader)? .consume(used);
   85|    870|                        read += used as u64;
   86|    870|
   87|    870|                        *position += read;
   88|    870|                        return ReadTextResult::UpToMarkup(&buf[start..]);
   89|       |                    }
   90|  3.27k|                    None => {
   91|  3.27k|                        buf.extend_from_slice(available);
   92|  3.27k|
   93|  3.27k|                        let used = available.len();
   94|  3.27k|                        self $(.$reader)? .consume(used);
   95|  3.27k|                        read += used as u64;
   96|  3.27k|                    }
   97|       |                }
   98|       |            }
   99|       |
  100|  5.10k|            *position += read;
  101|  5.10k|            ReadTextResult::UpToEof(&buf[start..])
  102|   498k|        }
_RNvMs_NtNtCs4QWtT85WPeh_9quick_xml6reader15buffered_readerINtB6_6ReaderRShE15read_event_intoCsP2fOiAuvJ3_10sparesults:
  293|   498k|    pub fn read_event_into<'b>(&mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>> {
  294|   498k|        self.read_event_impl(buf)
  295|   498k|    }

_RNvMNtCs4QWtT85WPeh_9quick_xml6readerNtB2_6Config9trim_textCsP2fOiAuvJ3_10sparesults:
  195|  15.3k|    pub fn trim_text(&mut self, trim: bool) {
  196|  15.3k|        self.trim_text_start = trim;
  197|  15.3k|        self.trim_text_end = trim;
  198|  15.3k|    }
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType6to_errCsP2fOiAuvJ3_10sparesults:
 1103|    854|    const fn to_err(&self) -> Error {
 1104|    854|        match self {
 1105|     71|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1106|    184|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1107|    599|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
 1108|       |        }
 1109|    854|    }
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType3new:
 1027|  28.6k|    const fn new(byte: Option<u8>) -> Result<Self> {
 1028|  28.6k|        Ok(match byte {
 1029|     84|            Some(b'[') => Self::CData,
 1030|  23.8k|            Some(b'-') => Self::Comment,
 1031|  4.72k|            Some(b'D') | Some(b'd') => Self::DocType,
 1032|     33|            _ => return Err(Error::Syntax(SyntaxError::InvalidBangMarkup)),
 1033|       |        })
 1034|  28.6k|    }
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType5parse:
 1043|  28.6k|    fn parse<'b>(&self, buf: &[u8], chunk: &'b [u8]) -> Option<(&'b [u8], usize)> {
 1044|  28.6k|        match self {
 1045|       |            Self::Comment => {
 1046|  42.5k|                for i in memchr::memchr_iter(b'>', chunk) {
 1047|       |                    // Need to read at least 6 symbols (`!---->`) for properly finished comment
 1048|       |                    // <!----> - XML comment
 1049|       |                    //  012345 - i
 1050|  42.5k|                    if buf.len() + i > 4 {
 1051|  24.3k|                        if chunk[..i].ends_with(b"--") {
 1052|       |                            // We cannot strip last `--` from the buffer because we need it in case of
 1053|       |                            // check_comments enabled option. XML standard requires that comment
 1054|       |                            // will not end with `--->` sequence because this is a special case of
 1055|       |                            // `--` in the comment (https://www.w3.org/TR/xml11/#sec-comments)
 1056|  23.6k|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1057|    729|                        }
 1058|    729|                        // End sequence `-|->` was splitted at |
 1059|    729|                        //        buf --/   \-- chunk
 1060|    729|                        if i == 1 && buf.ends_with(b"-") && chunk[0] == b'-' {
 1061|      0|                            return Some((&chunk[..i], i + 1)); // +1 for `>`
 1062|    729|                        }
 1063|    729|                        // End sequence `--|>` was splitted at |
 1064|    729|                        //         buf --/   \-- chunk
 1065|    729|                        if i == 0 && buf.ends_with(b"--") {
 1066|      0|                            return Some((&[], i + 1)); // +1 for `>`
 1067|    729|                        }
 1068|  18.1k|                    }
 1069|       |                }
 1070|       |            }
 1071|       |            Self::CData => {
 1072|  1.41k|                for i in memchr::memchr_iter(b'>', chunk) {
 1073|  1.41k|                    if chunk[..i].ends_with(b"]]") {
 1074|     13|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1075|  1.39k|                    }
 1076|  1.39k|                    // End sequence `]|]>` was splitted at |
 1077|  1.39k|                    //        buf --/   \-- chunk
 1078|  1.39k|                    if i == 1 && buf.ends_with(b"]") && chunk[0] == b']' {
 1079|      0|                        return Some((&chunk[..i], i + 1)); // +1 for `>`
 1080|  1.39k|                    }
 1081|  1.39k|                    // End sequence `]]|>` was splitted at |
 1082|  1.39k|                    //         buf --/   \-- chunk
 1083|  1.39k|                    if i == 0 && buf.ends_with(b"]]") {
 1084|      0|                        return Some((&[], i + 1)); // +1 for `>`
 1085|  1.39k|                    }
 1086|       |                }
 1087|       |            }
 1088|       |            Self::DocType => {
 1089|  36.0k|                for i in memchr::memchr_iter(b'>', chunk) {
 1090|  36.0k|                    let content = &chunk[..i];
 1091|  36.0k|                    let balance = memchr::memchr2_iter(b'<', b'>', content)
 1092|  36.0k|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
 1093|  36.0k|                        .sum::<i32>();
 1094|  36.0k|                    if balance == 0 {
 1095|  4.12k|                        return Some((content, i + 1)); // +1 for `>`
 1096|  31.9k|                    }
 1097|       |                }
 1098|       |            }
 1099|       |        }
 1100|    854|        None
 1101|  28.6k|    }
_RINvMs5_NtCs4QWtT85WPeh_9quick_xml6readerINtB6_6ReaderRShE15read_event_implQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsP2fOiAuvJ3_10sparesults:
  897|   498k|    fn read_event_impl<'i, B>(&mut self, mut buf: B) -> Result<Event<'i>>
  898|   498k|    where
  899|   498k|        R: XmlSource<'i, B>,
  900|   498k|    {
  901|  1.01M|        read_event_impl!(self, buf, self.reader, read_until_close)
  902|   498k|    }
_RINvMs5_NtCs4QWtT85WPeh_9quick_xml6readerINtB6_6ReaderRShE16read_until_closeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECsP2fOiAuvJ3_10sparesults:
  906|   492k|    fn read_until_close<'i, B>(&mut self, buf: B) -> Result<Event<'i>>
  907|   492k|    where
  908|   492k|        R: XmlSource<'i, B>,
  909|   492k|    {
  910|   492k|        read_until_close!(self, buf, self.reader)
  911|   492k|    }
_RNvXs_NtCs4QWtT85WPeh_9quick_xml6readerNtB4_6ConfigNtNtCscdEvteftVc2_4core7default7Default7default:
  211|  15.3k|    fn default() -> Self {
  212|  15.3k|        Self {
  213|  15.3k|            allow_unmatched_ends: false,
  214|  15.3k|            check_comments: false,
  215|  15.3k|            check_end_names: true,
  216|  15.3k|            expand_empty_elements: false,
  217|  15.3k|            trim_markup_names_in_closing_tags: true,
  218|  15.3k|            trim_text_start: false,
  219|  15.3k|            trim_text_end: false,
  220|  15.3k|        }
  221|  15.3k|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6readerINtB5_6ReaderRShE11from_readerB7_:
  697|  15.3k|    pub fn from_reader(reader: R) -> Self {
  698|  15.3k|        Self {
  699|  15.3k|            reader,
  700|  15.3k|            state: ReaderState::default(),
  701|  15.3k|        }
  702|  15.3k|    }
_RNvMs3_NtCs4QWtT85WPeh_9quick_xml6readerINtB5_6ReaderRShE10config_mutB7_:
  710|  15.3k|    pub fn config_mut(&mut self) -> &mut Config {
  711|  15.3k|        &mut self.state.config
  712|  15.3k|    }
_RNvMs4_NtCs4QWtT85WPeh_9quick_xml6readerINtB5_6ReaderRShE7decoderB7_:
  827|  15.3k|    pub const fn decoder(&self) -> Decoder {
  828|  15.3k|        self.state.decoder()
  829|  15.3k|    }
_RNCNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB7_8BangType5parse0B9_:
 1092|  3.14M|                        .map(|p| if content[p] == b'<' { 1i32 } else { -1 })
_RNvMs6_NtCs4QWtT85WPeh_9quick_xml6readerNtB5_8BangType6to_errB7_:
 1103|    975|    const fn to_err(&self) -> Error {
 1104|    975|        match self {
 1105|      8|            Self::CData => Error::Syntax(SyntaxError::UnclosedCData),
 1106|     14|            Self::Comment => Error::Syntax(SyntaxError::UnclosedComment),
 1107|    953|            Self::DocType => Error::Syntax(SyntaxError::UnclosedDoctype),
 1108|       |        }
 1109|    975|    }

_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState9emit_text:
   60|  5.97k|    pub fn emit_text<'b>(&mut self, bytes: &'b [u8]) -> BytesText<'b> {
   61|  5.97k|        let mut content = bytes;
   62|  5.97k|
   63|  5.97k|        if self.config.trim_text_end {
   64|  5.97k|            // Skip the ending '<'
   65|  5.97k|            let len = bytes
   66|  5.97k|                .iter()
   67|  5.97k|                .rposition(|&b| !is_whitespace(b))
   68|  5.97k|                .map_or(0, |p| p + 1);
   69|  5.97k|            content = &bytes[..len];
   70|  5.97k|        }
   71|  5.97k|        BytesText::wrap(content, self.decoder())
   72|  5.97k|    }
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState9emit_text0B8_:
   67|  5.15k|                .rposition(|&b| !is_whitespace(b))
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState9emit_texts_0B8_:
   68|  4.14k|                .map_or(0, |p| p + 1);
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState9emit_bang:
   81|  27.7k|    pub fn emit_bang<'b>(&mut self, bang_type: BangType, buf: &'b [u8]) -> Result<Event<'b>> {
   82|  27.7k|        debug_assert_eq!(
   83|      0|            buf.first(),
   84|       |            Some(&b'!'),
   85|      0|            "CDATA, comment or DOCTYPE should start from '!'"
   86|       |        );
   87|       |
   88|  27.7k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|       |            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|       |        };
   91|       |
   92|  27.7k|        let len = buf.len();
   93|  4.13k|        match bang_type {
   94|  23.6k|            BangType::Comment if buf.starts_with(b"!--") => {
   95|  23.6k|                debug_assert!(buf.ends_with(b"--"));
   96|  23.6k|                if self.config.check_comments {
   97|       |                    // search if '--' not in comments
   98|      0|                    let mut haystack = &buf[3..len - 2];
   99|      0|                    let mut off = 0;
  100|      0|                    while let Some(p) = memchr::memchr(b'-', haystack) {
  101|      0|                        off += p + 1;
  102|      0|                        // if next byte after `-` is also `-`, return an error
  103|      0|                        if buf[3 + off] == b'-' {
  104|       |                            // Explanation of the magic:
  105|       |                            //
  106|       |                            // - `self.offset`` just after `>`,
  107|       |                            // - `buf` contains `!-- con--tent --`
  108|       |                            // - `p` is counted from byte after `<!--`
  109|       |                            //
  110|       |                            // <!-- con--tent -->:
  111|       |                            //  ~~~~~~~~~~~~~~~~ : - buf
  112|       |                            //   : ===========   : - zone of search (possible values of `p`)
  113|       |                            //   : |---p         : - p is counted from | (| is 0)
  114|       |                            //   : :   :         ^ - self.offset
  115|       |                            //   ^ :   :           - self.offset - len
  116|       |                            //     ^   :           - self.offset - len + 2
  117|       |                            //         ^           - self.offset - len + 2 + p
  118|      0|                            self.last_error_offset = self.offset - len as u64 + 2 + p as u64;
  119|      0|                            return Err(Error::IllFormed(IllFormedError::DoubleHyphenInComment));
  120|      0|                        }
  121|      0|                        // Continue search after single `-` (+1 to skip it)
  122|      0|                        haystack = &haystack[p + 1..];
  123|       |                    }
  124|  23.6k|                }
  125|  23.6k|                Ok(Event::Comment(BytesText::wrap(
  126|  23.6k|                    // Cut of `!--` and `--` from start and end
  127|  23.6k|                    &buf[3..len - 2],
  128|  23.6k|                    self.decoder(),
  129|  23.6k|                )))
  130|       |            }
  131|       |            // XML requires uppercase only:
  132|       |            // https://www.w3.org/TR/xml11/#sec-cdata-sect
  133|       |            // Even HTML5 required uppercase only:
  134|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  135|     13|            BangType::CData if buf.starts_with(b"![CDATA[") => {
  136|      5|                debug_assert!(buf.ends_with(b"]]"));
  137|      5|                Ok(Event::CData(BytesCData::wrap(
  138|      5|                    // Cut of `![CDATA[` and `]]` from start and end
  139|      5|                    &buf[8..len - 2],
  140|      5|                    self.decoder(),
  141|      5|                )))
  142|       |            }
  143|       |            // XML requires uppercase only, but we will check that on validation stage:
  144|       |            // https://www.w3.org/TR/xml11/#sec-prolog-dtd
  145|       |            // HTML5 allows mixed case for doctype declarations:
  146|       |            // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
  147|  4.12k|            BangType::DocType if uncased_starts_with(buf, b"!DOCTYPE") => {
  148|  3.16k|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
  149|  3.13k|                    Some(start) => Ok(Event::DocType(BytesText::wrap(
  150|  3.13k|                        // Cut of `!DOCTYPE` and any number of spaces from start
  151|  3.13k|                        &buf[8 + start..],
  152|  3.13k|                        self.decoder(),
  153|  3.13k|                    ))),
  154|       |                    None => {
  155|       |                        // Because we here, we at least read `<!DOCTYPE>` and offset after `>`.
  156|       |                        // We want report error at place where name is expected - this is just
  157|       |                        // before `>`
  158|     34|                        self.last_error_offset = self.offset - 1;
  159|     34|                        return Err(Error::IllFormed(IllFormedError::MissingDoctypeName));
  160|       |                    }
  161|       |                }
  162|       |            }
  163|       |            _ => {
  164|       |                // <!....>
  165|       |                //  ^^^^^ - `buf` does not contain `<` and `>`, but `self.offset` is after `>`.
  166|       |                // ^------- We report error at that position, so we need to subtract 2 and buf len
  167|    975|                self.last_error_offset = self.offset - len as u64 - 2;
  168|    975|                Err(bang_type.to_err())
  169|       |            }
  170|       |        }
  171|  27.7k|    }
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState9emit_bang0B8_:
   88|  4.12k|        let uncased_starts_with = |string: &[u8], prefix: &[u8]| {
   89|  4.12k|            string.len() >= prefix.len() && string[..prefix.len()].eq_ignore_ascii_case(prefix)
   90|  4.12k|        };
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState9emit_bangs_0B8_:
  148|  5.05k|                match buf[8..].iter().position(|&b| !is_whitespace(b)) {
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState8emit_end:
  177|    334|    pub fn emit_end<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  178|    334|        debug_assert_eq!(
  179|      0|            buf.first(),
  180|       |            Some(&b'/'),
  181|      0|            "closing tag should start from '/'"
  182|       |        );
  183|       |
  184|       |        // Strip the `/` character. `content` contains data between `</` and `>`
  185|    334|        let content = &buf[1..];
  186|       |        // XML standard permits whitespaces after the markup name in closing tags.
  187|       |        // Let's strip them from the buffer before comparing tag names.
  188|    334|        let name = if self.config.trim_markup_names_in_closing_tags {
  189|    334|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
  190|    231|                &content[..pos_end_name + 1]
  191|       |            } else {
  192|    103|                content
  193|       |            }
  194|       |        } else {
  195|      0|            content
  196|       |        };
  197|       |
  198|    334|        let decoder = self.decoder();
  199|    334|
  200|    334|        // Get the index in self.opened_buffer of the name of the last opened tag
  201|    334|        match self.opened_starts.pop() {
  202|      0|            Some(start) => {
  203|      0|                if self.config.check_end_names {
  204|      0|                    let expected = &self.opened_buffer[start..];
  205|      0|                    if name != expected {
  206|      0|                        let expected = decoder.decode(expected).unwrap_or_default().into_owned();
  207|      0|                        // #513: In order to allow error recovery we should drop content of the buffer
  208|      0|                        self.opened_buffer.truncate(start);
  209|      0|
  210|      0|                        // Report error at start of the end tag at `<` character
  211|      0|                        // -2 for `<` and `>`
  212|      0|                        self.last_error_offset = self.offset - buf.len() as u64 - 2;
  213|      0|                        return Err(Error::IllFormed(IllFormedError::MismatchedEndTag {
  214|      0|                            expected,
  215|      0|                            found: decoder.decode(name).unwrap_or_default().into_owned(),
  216|      0|                        }));
  217|      0|                    }
  218|      0|                }
  219|       |
  220|      0|                self.opened_buffer.truncate(start);
  221|       |            }
  222|       |            None => {
  223|    334|                if !self.config.allow_unmatched_ends {
  224|       |                    // Report error at start of the end tag at `<` character
  225|       |                    // -2 for `<` and `>`
  226|    334|                    self.last_error_offset = self.offset - buf.len() as u64 - 2;
  227|    334|                    return Err(Error::IllFormed(IllFormedError::UnmatchedEndTag(
  228|    334|                        decoder.decode(name).unwrap_or_default().into_owned(),
  229|    334|                    )));
  230|      0|                }
  231|       |            }
  232|       |        }
  233|       |
  234|      0|        Ok(Event::End(BytesEnd::wrap(name.into())))
  235|    334|    }
_RNCNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderState8emit_end0B8_:
  189|  11.8k|            if let Some(pos_end_name) = content.iter().rposition(|&b| !is_whitespace(b)) {
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState18emit_question_mark:
  241|   456k|    pub fn emit_question_mark<'b>(&mut self, buf: &'b [u8]) -> Result<Event<'b>> {
  242|   456k|        debug_assert!(buf.len() > 0);
  243|   456k|        debug_assert_eq!(buf[0], b'?');
  244|       |
  245|   456k|        let len = buf.len();
  246|   456k|        // We accept at least <??>
  247|   456k|        //                     ~~ - len = 2
  248|   456k|        if len > 1 && buf[len - 1] == b'?' {
  249|       |            // Cut of `?` and `?` from start and end
  250|   456k|            let content = &buf[1..len - 1];
  251|   456k|            let len = content.len();
  252|   456k|
  253|   456k|            if content.starts_with(b"xml") && (len == 3 || is_whitespace(content[3])) {
  254|   123k|                let event = BytesDecl::from_start(BytesStart::wrap(content, 3));
  255|   123k|
  256|   123k|                // Try getting encoding from the declaration event
  257|   123k|                #[cfg(feature = "encoding")]
  258|   123k|                if self.encoding.can_be_refined() {
  259|   123k|                    if let Some(encoding) = event.encoder() {
  260|   123k|                        self.encoding = EncodingRef::XmlDetected(encoding);
  261|   123k|                    }
  262|   123k|                }
  263|   123k|
  264|   123k|                Ok(Event::Decl(event))
  265|       |            } else {
  266|   333k|                Ok(Event::PI(BytesPI::wrap(content, name_len(content))))
  267|       |            }
  268|       |        } else {
  269|       |            // <?....EOF
  270|       |            //  ^^^^^ - `buf` does not contains `<`, but we want to report error at `<`,
  271|       |            //          so we move offset to it (-2 for `<` and `>`)
  272|    390|            self.last_error_offset = self.offset - len as u64 - 2;
  273|    390|            Err(Error::Syntax(SyntaxError::UnclosedPIOrXmlDecl))
  274|       |        }
  275|   456k|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState10emit_start:
  281|    654|    pub fn emit_start<'b>(&mut self, content: &'b [u8]) -> Event<'b> {
  282|    654|        if let Some(content) = content.strip_suffix(b"/") {
  283|       |            // This is self-closed tag `<something/>`
  284|     39|            let event = BytesStart::wrap(content, name_len(content));
  285|     39|
  286|     39|            if self.config.expand_empty_elements {
  287|     39|                self.state = ParseState::InsideEmpty;
  288|     39|                self.opened_starts.push(self.opened_buffer.len());
  289|     39|                self.opened_buffer.extend(event.name().as_ref());
  290|     39|                Event::Start(event)
  291|       |            } else {
  292|      0|                Event::Empty(event)
  293|       |            }
  294|       |        } else {
  295|    615|            let event = BytesStart::wrap(content, name_len(content));
  296|    615|
  297|    615|            // #514: Always store names event when .check_end_names == false,
  298|    615|            // because checks can be temporary disabled and when they would be
  299|    615|            // enabled, we should have that information
  300|    615|            self.opened_starts.push(self.opened_buffer.len());
  301|    615|            self.opened_buffer.extend(event.name().as_ref());
  302|    615|            Event::Start(event)
  303|       |        }
  304|    654|    }
_RNvMNtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB2_11ReaderState7decoder:
  324|  48.4k|    pub const fn decoder(&self) -> Decoder {
  325|  48.4k|        Decoder {
  326|  48.4k|            #[cfg(feature = "encoding")]
  327|  48.4k|            encoding: self.encoding.encoding(),
  328|  48.4k|        }
  329|  48.4k|    }
_RNvXs_NtNtCs4QWtT85WPeh_9quick_xml6reader5stateNtB4_11ReaderStateNtNtCscdEvteftVc2_4core7default7Default7default:
  333|  15.3k|    fn default() -> Self {
  334|  15.3k|        Self {
  335|  15.3k|            offset: 0,
  336|  15.3k|            last_error_offset: 0,
  337|  15.3k|            state: ParseState::Init,
  338|  15.3k|            config: Config::default(),
  339|  15.3k|            opened_buffer: Vec::new(),
  340|  15.3k|            opened_starts: Vec::new(),
  341|  15.3k|
  342|  15.3k|            #[cfg(feature = "encoding")]
  343|  15.3k|            encoding: EncodingRef::Implicit(UTF_8),
  344|  15.3k|        }
  345|  15.3k|    }

_RNvNtCs4QWtT85WPeh_9quick_xml5utils13is_whitespaceCsP2fOiAuvJ3_10sparesults:
  278|   712k|pub const fn is_whitespace(b: u8) -> bool {
  279|   712k|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  280|   712k|}
_RNvNtCs4QWtT85WPeh_9quick_xml5utils13is_whitespaceB3_:
  278|  3.40M|pub const fn is_whitespace(b: u8) -> bool {
  279|  3.40M|    matches!(b, b' ' | b'\r' | b'\n' | b'\t')
  280|  3.40M|}
_RNvNtCs4QWtT85WPeh_9quick_xml5utils8name_lenB3_:
  287|   333k|pub const fn name_len(mut bytes: &[u8]) -> usize {
  288|   333k|    // Note: A pattern matching based approach (instead of indexing) allows
  289|   333k|    // making the function const.
  290|   333k|    let mut len = 0;
  291|  3.25M|    while let [first, rest @ ..] = bytes {
  292|  3.12M|        if is_whitespace(*first) {
  293|   205k|            break;
  294|  2.91M|        }
  295|  2.91M|        len += 1;
  296|  2.91M|        bytes = rest;
  297|       |    }
  298|   333k|    len
  299|   333k|}

_RNvNtCs3nWAmOpaoOe_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  15.3k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  15.3k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|  15.3k|        return;
    9|       |    };
   10|      0|    match reader {
   11|      0|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|      0|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|      0|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|      0|            let mut writer = QueryResultsSerializer::from_format(format)
   18|      0|                .serialize_solutions_to_write(
   19|      0|                    Vec::new(),
   20|      0|                    solutions
   21|      0|                        .first()
   22|      0|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|      0|                )
   24|      0|                .unwrap();
   25|      0|            for solution in &solutions {
   26|      0|                writer.write(solution).unwrap();
   27|      0|            }
   28|      0|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|      0|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|      0|                QueryResultsParser::from_format(format)
   33|      0|                    .parse_slice(&serialized)
   34|      0|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|      0|                    .unwrap()
   36|       |            {
   37|      0|                assert_eq!(
   38|      0|                    roundtrip_solutions
   39|      0|                        .collect::<Result<Vec<_>, _>>()
   40|      0|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|      0|                        .unwrap(),
   42|      0|                    solutions
   43|      0|                )
   44|      0|            }
   45|       |        }
   46|      0|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      0|            // We try to write again
   48|      0|            let mut serialized = Vec::new();
   49|      0|            QueryResultsSerializer::from_format(format)
   50|      0|                .serialize_boolean_to_write(&mut serialized, value)
   51|      0|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      0|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      0|                QueryResultsParser::from_format(format)
   56|      0|                    .parse_slice(&serialized)
   57|      0|                    .unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  15.3k|}

_RNvXs0_NtCsP2fOiAuvJ3_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCs4QWtT85WPeh_9quick_xml6errors5ErrorE4fromB7_:
   42|  10.3k|    fn from(error: quick_xml::Error) -> Self {
   43|  10.3k|        match error {
   44|      0|            quick_xml::Error::Io(error) => {
   45|      0|                Self::Io(Arc::try_unwrap(error).unwrap_or_else(|e| io::Error::new(e.kind(), e)))
   46|       |            }
   47|  10.3k|            _ => Self::Syntax(QueryResultsSyntaxError(SyntaxErrorKind::Xml(error))),
   48|       |        }
   49|  10.3k|    }
_RNvXs9_NtCsP2fOiAuvJ3_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCscdEvteftVc2_4core7convert4FromNtB5_23QueryResultsSyntaxErrorE4from:
    7|  4.94k|#[derive(Debug, thiserror::Error)]
_RINvMs2_NtCsP2fOiAuvJ3_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   87|  3.11k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|  3.11k|        Self(SyntaxErrorKind::Msg {
   89|  3.11k|            msg: msg.into(),
   90|  3.11k|            location: None,
   91|  3.11k|        })
   92|  3.11k|    }
_RINvMs2_NtCsP2fOiAuvJ3_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|  1.83k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|  1.83k|        Self(SyntaxErrorKind::Msg {
   89|  1.83k|            msg: msg.into(),
   90|  1.83k|            location: None,
   91|  1.83k|        })
   92|  1.83k|    }

_RNvMNtCsP2fOiAuvJ3_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs3nWAmOpaoOe_13oxigraph_fuzz:
   65|  15.3k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  15.3k|        Self { format }
   67|  15.3k|    }
_RNvMNtCsP2fOiAuvJ3_10sparesults6parserNtB2_18QueryResultsParser11parse_slice:
  234|  15.3k|    pub fn parse_slice(
  235|  15.3k|        self,
  236|  15.3k|        slice: &[u8],
  237|  15.3k|    ) -> Result<FromSliceQueryResultsReader<'_>, QueryResultsSyntaxError> {
  238|  15.3k|        Ok(match self.format {
  239|  15.3k|            QueryResultsFormat::Xml => match FromSliceXmlQueryResultsReader::read(slice)? {
  240|      0|                FromSliceXmlQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  241|       |                FromSliceXmlQueryResultsReader::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: FromSliceSolutionsReaderKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|      0|            QueryResultsFormat::Json => match FromSliceJsonQueryResultsReader::read(slice)? {
  250|      0|                FromSliceJsonQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  251|       |                FromSliceJsonQueryResultsReader::Solutions {
  252|      0|                    solutions,
  253|      0|                    variables,
  254|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  255|      0|                    variables: variables.into(),
  256|      0|                    solutions: FromSliceSolutionsReaderKind::Json(solutions),
  257|      0|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|      0|            QueryResultsFormat::Tsv => match FromSliceTsvQueryResultsReader::read(slice)? {
  261|      0|                FromSliceTsvQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  262|       |                FromSliceTsvQueryResultsReader::Solutions {
  263|      0|                    solutions,
  264|      0|                    variables,
  265|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  266|      0|                    variables: variables.into(),
  267|      0|                    solutions: FromSliceSolutionsReaderKind::Tsv(solutions),
  268|      0|                }),
  269|       |            },
  270|       |        })
  271|  15.3k|    }

_RNvMs2_NtCsP2fOiAuvJ3_10sparesults3xmlNtB5_30FromSliceXmlQueryResultsReader4read:
  361|  15.3k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  362|  15.3k|        Self::do_read(slice).map_err(|e| match e {
  363|       |            QueryResultsParseError::Syntax(e) => e,
  364|       |            QueryResultsParseError::Io(e) => {
  365|       |                unreachable!("I/O error are not possible for slice but found {e}")
  366|       |            }
  367|  15.3k|        })
  368|  15.3k|    }
_RNvMs2_NtCsP2fOiAuvJ3_10sparesults3xmlNtB5_30FromSliceXmlQueryResultsReader7do_read:
  370|  15.3k|    fn do_read(slice: &'a [u8]) -> Result<Self, QueryResultsParseError> {
  371|  15.3k|        let mut reader = Reader::from_reader(slice);
  372|  15.3k|        XmlInnerQueryResultsReader::set_options(reader.config_mut());
  373|  15.3k|        let mut reader_buffer = Vec::new();
  374|  15.3k|        let mut inner = XmlInnerQueryResultsReader {
  375|  15.3k|            state: ResultsState::Start,
  376|  15.3k|            variables: Vec::new(),
  377|  15.3k|            decoder: reader.decoder(),
  378|  15.3k|        };
  379|   498k|        loop {
  380|   498k|            reader_buffer.clear();
  381|   498k|            let event = reader.read_event_into(&mut reader_buffer)?;
  382|   489k|            if let Some(result) = inner.read_event(event)? {
  383|      0|                return Ok(match result {
  384|       |                    XmlInnerQueryResults::Solutions {
  385|      0|                        variables,
  386|      0|                        solutions,
  387|      0|                    } => Self::Solutions {
  388|      0|                        variables,
  389|      0|                        solutions: FromSliceXmlSolutionsReader {
  390|      0|                            reader,
  391|      0|                            inner: solutions,
  392|      0|                            reader_buffer,
  393|      0|                        },
  394|      0|                    },
  395|      0|                    XmlInnerQueryResults::Boolean(value) => Self::Boolean(value),
  396|       |                });
  397|   482k|            }
  398|       |        }
  399|  15.3k|    }
_RNvMs4_NtCsP2fOiAuvJ3_10sparesults3xmlNtB5_26XmlInnerQueryResultsReader11set_options:
  456|  15.3k|    fn set_options(config: &mut Config) {
  457|  15.3k|        config.trim_text(true);
  458|  15.3k|        config.expand_empty_elements = true;
  459|  15.3k|    }
_RNvMs4_NtCsP2fOiAuvJ3_10sparesults3xmlNtB5_26XmlInnerQueryResultsReader10read_event:
  461|   489k|    pub fn read_event(
  462|   489k|        &mut self,
  463|   489k|        event: Event<'_>,
  464|   489k|    ) -> Result<Option<XmlInnerQueryResults>, QueryResultsParseError> {
  465|   489k|        match event {
  466|    654|            Event::Start(event) => match self.state {
  467|       |                ResultsState::Start => {
  468|    654|                    if event.local_name().as_ref() == b"sparql" {
  469|      0|                        self.state = ResultsState::Sparql;
  470|      0|                        Ok(None)
  471|       |                    } else {
  472|    654|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <sparql> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  473|       |                    }
  474|       |                }
  475|       |                ResultsState::Sparql => {
  476|      0|                    if event.local_name().as_ref() == b"head" {
  477|      0|                        self.state = ResultsState::Head;
  478|      0|                        Ok(None)
  479|       |                    } else {
  480|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <head> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  481|       |                    }
  482|       |                }
  483|       |                ResultsState::Head => {
  484|      0|                    if event.local_name().as_ref() == b"variable" {
  485|      0|                        let name = event.attributes()
  486|      0|                            .filter_map(Result::ok)
  487|      0|                            .find(|attr| attr.key.local_name().as_ref() == b"name")
  488|      0|                            .ok_or_else(|| QueryResultsSyntaxError::msg("No name attribute found for the <variable> tag"))?;
  489|      0|                        let name = unescape(&self.decoder.decode(&name.value)?)?.into_owned();
  490|      0|                        let variable = Variable::new(name).map_err(|e| QueryResultsSyntaxError::msg(format!("Invalid variable name: {e}")))?;
  491|      0|                        if self.variables.contains(&variable) {
  492|      0|                            return Err(QueryResultsSyntaxError::msg(format!(
  493|      0|                                "The variable {variable} is declared twice"
  494|      0|                            ))
  495|      0|                                .into());
  496|      0|                        }
  497|      0|                        self.variables.push(variable);
  498|      0|                        Ok(None)
  499|      0|                    } else if event.local_name().as_ref() == b"link" {
  500|       |                        // no op
  501|      0|                        Ok(None)
  502|       |                    } else {
  503|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting <variable> or <link> tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  504|       |                    }
  505|       |                }
  506|       |                ResultsState::AfterHead => {
  507|      0|                    if event.local_name().as_ref() == b"boolean" {
  508|      0|                        self.state = ResultsState::Boolean;
  509|      0|                        Ok(None)
  510|      0|                    } else if event.local_name().as_ref() == b"results" {
  511|      0|                        let mut mapping = BTreeMap::default();
  512|      0|                        for (i, var) in self.variables.iter().enumerate() {
  513|      0|                            mapping.insert(var.clone().into_string(), i);
  514|      0|                        }
  515|      0|                        Ok(Some(XmlInnerQueryResults::Solutions {
  516|      0|                            variables: take(&mut self.variables),
  517|      0|                            solutions: XmlInnerSolutionsReader {
  518|      0|                                decoder: self.decoder,
  519|      0|                                mapping,
  520|      0|                                state_stack: vec![State::Start, State::Start],
  521|      0|                                new_bindings: Vec::new(),
  522|      0|                                current_var: None,
  523|      0|                                term: None,
  524|      0|                                lang: None,
  525|      0|                                datatype: None,
  526|      0|                                subject_stack: Vec::new(),
  527|      0|                                predicate_stack: Vec::new(),
  528|      0|                                object_stack: Vec::new(),
  529|      0|                            },
  530|      0|                        }))
  531|      0|                    } else if event.local_name().as_ref() != b"link" && event.local_name().as_ref() != b"results" && event.local_name().as_ref() != b"boolean" {
  532|      0|                        Err(QueryResultsSyntaxError::msg(format!("Expecting sparql tag, found <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  533|       |                    } else {
  534|      0|                        Ok(None)
  535|       |                    }
  536|       |                }
  537|      0|                ResultsState::Boolean => Err(QueryResultsSyntaxError::msg(format!("Unexpected tag inside of <boolean> tag: <{}>", self.decoder.decode(event.name().as_ref())?)).into())
  538|       |            },
  539|  4.14k|            Event::Text(event) => {
  540|  4.14k|                let value = event.unescape()?;
  541|  2.73k|                match self.state {
  542|       |                    ResultsState::Boolean => {
  543|      0|                        if value == "true" {
  544|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(true)))
  545|      0|                        } else if value == "false" {
  546|      0|                            Ok(Some(XmlInnerQueryResults::Boolean(false)))
  547|       |                        } else {
  548|      0|                            Err(QueryResultsSyntaxError::msg(format!("Unexpected boolean value. Found '{value}'")).into())
  549|       |                        }
  550|       |                    }
  551|  2.73k|                    _ => Err(QueryResultsSyntaxError::msg(format!("Unexpected textual value found: '{value}'")).into())
  552|       |                }
  553|       |            }
  554|      0|            Event::End(event) => {
  555|      0|                if let ResultsState::Head = self.state {
  556|      0|                    if event.local_name().as_ref() == b"head" {
  557|      0|                        self.state = ResultsState::AfterHead
  558|      0|                    }
  559|      0|                    Ok(None)
  560|       |                } else {
  561|      0|                    Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into())
  562|       |                }
  563|       |            }
  564|  1.83k|            Event::Eof => Err(QueryResultsSyntaxError::msg("Unexpected early file end. All results file should have a <head> and a <result> or <boolean> tag").into()),
  565|       |            Event::Comment(_) | Event::Decl(_) | Event::PI(_) | Event::DocType(_) => {
  566|   482k|                Ok(None)
  567|       |            }
  568|      0|            Event::Empty(_) => unreachable!("Empty events are expended"),
  569|       |            Event::CData(_) => {
  570|      5|                Err(QueryResultsSyntaxError::msg(
  571|      5|                    "<![CDATA[...]]> are not supported in SPARQL XML results",
  572|      5|                )
  573|      5|                    .into())
  574|       |            }
  575|       |        }
  576|   489k|    }
_RNCNvMs2_NtCsP2fOiAuvJ3_10sparesults3xmlNtB7_30FromSliceXmlQueryResultsReader4read0B9_:
  362|  15.3k|        Self::do_read(slice).map_err(|e| match e {
  363|  15.3k|            QueryResultsParseError::Syntax(e) => e,
  364|      0|            QueryResultsParseError::Io(e) => {
  365|      0|                unreachable!("I/O error are not possible for slice but found {e}")
  366|       |            }
  367|  15.3k|        })


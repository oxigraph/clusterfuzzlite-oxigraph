_RINvXNtCshtIYxkSpLeS_6anyhow7contextINtNtCsl2lhD68vXAd_4core6result6ResultINtNtCsdBW21Yiwikk_5alloc3vec3VecNtNtCsbBgSuRnHgd0_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|    216|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    216|    where
   60|    216|        C: Display + Send + Sync + 'static,
   61|    216|        F: FnOnce() -> C,
   62|    216|    {
   63|    216|        match self {
   64|    216|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    216|    }
_RINvXNtCshtIYxkSpLeS_6anyhow7contextINtNtCsl2lhD68vXAd_4core6result6ResultINtNtCsbBgSuRnHgd0_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error10ParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCsdBW21Yiwikk_5alloc6string6StringNCNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB42_:
   58|    216|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    216|    where
   60|    216|        C: Display + Send + Sync + 'static,
   61|    216|        F: FnOnce() -> C,
   62|    216|    {
   63|    216|        match self {
   64|    216|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    216|    }

_RNvXs1_Csfypg28Pvccj_17json_event_parserNtB5_9JsonEventNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCslu3GLw2gIGD_13oxigraph_fuzz:
   29|  16.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNvMNtCsfypg28Pvccj_17json_event_parser4readINtB2_18FromReadJsonReaderRShE3newCslu3GLw2gIGD_13oxigraph_fuzz:
   40|  5.44k|    pub const fn new(read: R) -> Self {
   41|  5.44k|        Self {
   42|  5.44k|            input_buffer: Vec::new(),
   43|  5.44k|            input_buffer_start: 0,
   44|  5.44k|            input_buffer_end: 0,
   45|  5.44k|            max_buffer_size: MAX_BUFFER_SIZE,
   46|  5.44k|            is_ending: false,
   47|  5.44k|            read,
   48|  5.44k|            parser: LowLevelJsonReader::new(),
   49|  5.44k|        }
   50|  5.44k|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser4readINtB2_18FromReadJsonReaderRShE15read_next_eventCslu3GLw2gIGD_13oxigraph_fuzz:
   58|   109k|    pub fn read_next_event(&mut self) -> Result<JsonEvent<'_>, ParseError> {
   59|       |        loop {
   60|       |            {
   61|       |                let LowLevelJsonReaderResult {
   62|   117k|                    event,
   63|   117k|                    consumed_bytes,
   64|   117k|                } = self.parser.read_next_event(
   65|   117k|                    #[allow(unsafe_code)]
   66|   117k|                    unsafe {
   67|   117k|                        let input_buffer_ptr: *const [u8] =
   68|   117k|                            &self.input_buffer[self.input_buffer_start..self.input_buffer_end];
   69|   117k|                        &*input_buffer_ptr
   70|   117k|                    }, // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
   71|   117k|                    self.is_ending,
   72|   117k|                );
   73|   117k|                self.input_buffer_start += consumed_bytes;
   74|   117k|                if let Some(event) = event {
   75|   109k|                    return Ok(event?);
   76|  8.49k|                }
   77|  8.49k|            }
   78|  8.49k|            if self.input_buffer_start > 0 {
   79|  1.71k|                self.input_buffer
   80|  1.71k|                    .copy_within(self.input_buffer_start..self.input_buffer_end, 0);
   81|  1.71k|                self.input_buffer_end -= self.input_buffer_start;
   82|  1.71k|                self.input_buffer_start = 0;
   83|  6.78k|            }
   84|  8.49k|            if self.input_buffer.len() == self.max_buffer_size {
   85|      0|                return Err(io::Error::new(
   86|      0|                    io::ErrorKind::OutOfMemory,
   87|      0|                    format!(
   88|      0|                        "Reached the buffer maximal size of {}",
   89|      0|                        self.max_buffer_size
   90|      0|                    ),
   91|      0|                )
   92|      0|                .into());
   93|  8.49k|            }
   94|  8.49k|            let min_end = min(
   95|  8.49k|                self.input_buffer_end + MIN_BUFFER_SIZE,
   96|  8.49k|                self.max_buffer_size,
   97|  8.49k|            );
   98|  8.49k|            if self.input_buffer.len() < min_end {
   99|  7.79k|                self.input_buffer.resize(min_end, 0);
  100|  7.79k|            }
  101|  8.49k|            if self.input_buffer.len() < self.input_buffer.capacity() {
  102|  2.34k|                // We keep extending to have as much space as available without reallocation
  103|  2.34k|                self.input_buffer.resize(self.input_buffer.capacity(), 0);
  104|  6.15k|            }
  105|  8.49k|            let read = self
  106|  8.49k|                .read
  107|  8.49k|                .read(&mut self.input_buffer[self.input_buffer_end..])?;
  108|  8.49k|            self.input_buffer_end += read;
  109|  8.49k|            self.is_ending = read == 0;
  110|       |        }
  111|   109k|    }
_RNvXs8_NtCsfypg28Pvccj_17json_event_parser4readNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
 1209|  3.90k|    fn from(error: SyntaxError) -> Self {
 1210|  3.90k|        Self::Syntax(error)
 1211|  3.90k|    }
_RNCNvNtCsfypg28Pvccj_17json_event_parser4read11read_digits0B5_:
 1070|  3.10k|        .take_while(|c| c.is_ascii_digit())
_RNCNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB7_18LowLevelJsonReader15read_next_event0B9_:
  350|    933|                    let error = error.map(|e| {
  351|    933|                        self.lexer.syntax_error(
  352|    933|                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|    933|                            e,
  354|    933|                        )
  355|    933|                    });
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_numbers_0B9_:
  949|  1.57k|            |c| Some(Some(*c)),
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_number0B9_:
  948|     66|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings5_0B9_:
  875|    619|                    error = error.or_else(|| {
  876|    619|                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|    619|                        Some(self.syntax_error(
  878|    619|                            pos..pos + 1,
  879|    619|                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|    619|                        ))
  881|    619|                    });
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_numbers0_0B9_:
  970|     57|            || if is_ending { Some(None) } else { None },
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer11read_string:
  680|  51.7k|    fn read_string<'a>(
  681|  51.7k|        &mut self,
  682|  51.7k|        input_buffer: &'a [u8],
  683|  51.7k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  684|  51.7k|        let mut error = None;
  685|  51.7k|        let mut string: Option<(String, usize)> = None;
  686|  51.7k|        let mut next_byte_offset = 1;
  687|       |        loop {
  688|   929k|            match *input_buffer.get(next_byte_offset)? {
  689|       |                b'"' => {
  690|       |                    // end of string
  691|  47.4k|                    let result = Some(if let Some(error) = error {
  692|    438|                        Err(error)
  693|  47.0k|                    } else if let Some((mut string, read_until)) = string {
  694|  3.91k|                        if read_until < next_byte_offset {
  695|  3.66k|                            let (str, e) = self.decode_utf8(
  696|  3.66k|                                &input_buffer[read_until..next_byte_offset],
  697|  3.66k|                                self.file_offset + u64::try_from(read_until).unwrap(),
  698|  3.66k|                            );
  699|  3.66k|                            error = error.or(e);
  700|  3.66k|                            string.push_str(&str);
  701|  3.66k|                        }
  702|  3.91k|                        if let Some(error) = error {
  703|      9|                            Err(error)
  704|       |                        } else {
  705|  3.90k|                            Ok(JsonToken::String(Cow::Owned(string)))
  706|       |                        }
  707|       |                    } else {
  708|  43.0k|                        let (string, error) = self
  709|  43.0k|                            .decode_utf8(&input_buffer[1..next_byte_offset], self.file_offset + 1);
  710|  43.0k|                        if let Some(error) = error {
  711|     19|                            Err(error)
  712|       |                        } else {
  713|  43.0k|                            Ok(JsonToken::String(string))
  714|       |                        }
  715|       |                    });
  716|  47.4k|                    self.file_offset += u64::try_from(next_byte_offset).unwrap() + 1;
  717|  47.4k|                    return result;
  718|       |                }
  719|       |                b'\\' => {
  720|       |                    // Escape sequences
  721|   170k|                    if string.is_none() {
  722|  8.50k|                        string = Some((String::new(), 1))
  723|   162k|                    }
  724|   170k|                    let (string, read_until) = string.as_mut().unwrap();
  725|   170k|                    if *read_until < next_byte_offset {
  726|  95.2k|                        let (str, e) = self.decode_utf8(
  727|  95.2k|                            &input_buffer[*read_until..next_byte_offset],
  728|  95.2k|                            self.file_offset + u64::try_from(*read_until).unwrap(),
  729|  95.2k|                        );
  730|  95.2k|                        error = error.or(e);
  731|  95.2k|                        string.push_str(&str);
  732|  95.2k|                    }
  733|   170k|                    next_byte_offset += 1;
  734|   170k|                    match *input_buffer.get(next_byte_offset)? {
  735|  2.86k|                        b'"' => {
  736|  2.86k|                            string.push('"');
  737|  2.86k|                            next_byte_offset += 1;
  738|  2.86k|                        }
  739|  3.41k|                        b'\\' => {
  740|  3.41k|                            string.push('\\');
  741|  3.41k|                            next_byte_offset += 1;
  742|  3.41k|                        }
  743|  3.00k|                        b'/' => {
  744|  3.00k|                            string.push('/');
  745|  3.00k|                            next_byte_offset += 1;
  746|  3.00k|                        }
  747|  3.45k|                        b'b' => {
  748|  3.45k|                            string.push('\u{8}');
  749|  3.45k|                            next_byte_offset += 1;
  750|  3.45k|                        }
  751|  1.32k|                        b'f' => {
  752|  1.32k|                            string.push('\u{C}');
  753|  1.32k|                            next_byte_offset += 1;
  754|  1.32k|                        }
  755|  1.73k|                        b'n' => {
  756|  1.73k|                            string.push('\n');
  757|  1.73k|                            next_byte_offset += 1;
  758|  1.73k|                        }
  759|  1.57k|                        b'r' => {
  760|  1.57k|                            string.push('\r');
  761|  1.57k|                            next_byte_offset += 1;
  762|  1.57k|                        }
  763|  1.29k|                        b't' => {
  764|  1.29k|                            string.push('\t');
  765|  1.29k|                            next_byte_offset += 1;
  766|  1.29k|                        }
  767|       |                        b'u' => {
  768|   137k|                            next_byte_offset += 1;
  769|   137k|                            let val = input_buffer.get(next_byte_offset..next_byte_offset + 4)?;
  770|   137k|                            next_byte_offset += 4;
  771|   137k|                            let code_point = match read_hexa_char(val) {
  772|   102k|                                Ok(cp) => cp,
  773|  34.9k|                                Err(e) => {
  774|  34.9k|                                    error = error.or_else(|| {
  775|       |                                        let pos = self.file_offset
  776|       |                                            + u64::try_from(next_byte_offset).unwrap();
  777|       |                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  34.9k|                                    });
  779|  34.9k|                                    char::REPLACEMENT_CHARACTER.into()
  780|       |                                }
  781|       |                            };
  782|   137k|                            if let Some(c) = char::from_u32(code_point) {
  783|  75.3k|                                string.push(c);
  784|  75.3k|                            } else {
  785|  61.8k|                                let high_surrogate = code_point;
  786|  61.8k|                                if !(0xD800..=0xDBFF).contains(&high_surrogate) {
  787|  51.2k|                                    error = error.or_else(|| {
  788|       |                                        let pos = self.file_offset
  789|       |                                            + u64::try_from(next_byte_offset).unwrap();
  790|       |                                        Some(self.syntax_error(
  791|       |                                            pos - 6..pos,
  792|       |                                            format!(
  793|       |                                                "\\u{:X} is not a valid high surrogate",
  794|       |                                                high_surrogate
  795|       |                                            ),
  796|       |                                        ))
  797|  51.2k|                                    });
  798|  51.2k|                                }
  799|  61.4k|                                let val =
  800|  61.8k|                                    input_buffer.get(next_byte_offset..next_byte_offset + 6)?;
  801|  61.4k|                                next_byte_offset += 6;
  802|  61.4k|                                if !val.starts_with(b"\\u") {
  803|  20.3k|                                    error = error.or_else(|| {
  804|       |                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|       |                                        Some(self.syntax_error(
  806|       |                                            pos - 6..pos,
  807|       |                                            format!(
  808|       |                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|       |                                                high_surrogate
  810|       |                                            )
  811|       |                                        ))
  812|  20.3k|                                    });
  813|  41.1k|                                }
  814|  61.4k|                                let low_surrogate = match read_hexa_char(&val[2..]) {
  815|  36.8k|                                    Ok(cp) => cp,
  816|  24.6k|                                    Err(e) => {
  817|  24.6k|                                        error = error.or_else(|| {
  818|       |                                            let pos = self.file_offset
  819|       |                                                + u64::try_from(next_byte_offset).unwrap();
  820|       |                                            Some(self.syntax_error(pos - 6..pos, e))
  821|  24.6k|                                        });
  822|  24.6k|                                        char::REPLACEMENT_CHARACTER.into()
  823|       |                                    }
  824|       |                                };
  825|  61.4k|                                if !(0xDC00..=0xDFFF).contains(&low_surrogate) {
  826|  35.8k|                                    error = error.or_else(|| {
  827|       |                                        let pos = self.file_offset
  828|       |                                            + u64::try_from(next_byte_offset).unwrap();
  829|       |                                        Some(self.syntax_error(
  830|       |                                            pos - 6..pos,
  831|       |                                            format!(
  832|       |                                                "\\u{:X} is not a valid low surrogate",
  833|       |                                                low_surrogate
  834|       |                                            ),
  835|       |                                        ))
  836|  35.8k|                                    });
  837|  35.8k|                                }
  838|  61.4k|                                let code_point = 0x10000
  839|  61.4k|                                    + ((high_surrogate & 0x03FF) << 10)
  840|  61.4k|                                    + (low_surrogate & 0x03FF);
  841|  61.4k|                                if let Some(c) = char::from_u32(code_point) {
  842|  61.4k|                                    string.push(c)
  843|      0|                                } else {
  844|      0|                                    string.push(char::REPLACEMENT_CHARACTER);
  845|      0|                                    error = error.or_else(|| {
  846|       |                                        let pos = self.file_offset
  847|       |                                            + u64::try_from(next_byte_offset).unwrap();
  848|       |                                        Some(self.syntax_error(
  849|       |                                            pos - 12..pos,
  850|       |                                            format!(
  851|       |                                                "\\u{:X}\\u{:X} is an invalid surrogate pair",
  852|       |                                                high_surrogate, low_surrogate
  853|       |                                            ),
  854|       |                                        ))
  855|      0|                                    });
  856|      0|                                }
  857|       |                            }
  858|       |                        }
  859|  14.4k|                        c => {
  860|  14.4k|                            next_byte_offset += 1;
  861|  14.4k|                            error = error.or_else(|| {
  862|       |                                let pos =
  863|       |                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|       |                                Some(self.syntax_error(
  865|       |                                    pos - 2..pos,
  866|       |                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|       |                                ))
  868|  14.4k|                            });
  869|  14.4k|                            string.push(char::REPLACEMENT_CHARACTER);
  870|  14.4k|                        }
  871|       |                    }
  872|   169k|                    *read_until = next_byte_offset;
  873|       |                }
  874|   707k|                c @ (0..=0x1F) => {
  875|  23.7k|                    error = error.or_else(|| {
  876|       |                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|       |                        Some(self.syntax_error(
  878|       |                            pos..pos + 1,
  879|       |                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|       |                        ))
  881|  23.7k|                    });
  882|  23.7k|                    next_byte_offset += 1;
  883|  23.7k|                }
  884|   684k|                _ => {
  885|   684k|                    next_byte_offset += 1;
  886|   684k|                }
  887|       |            }
  888|       |        }
  889|  51.7k|    }
_RNvNtCsfypg28Pvccj_17json_event_parser4read11read_digits:
 1067|  1.98k|fn read_digits(input_buffer: &[u8], is_ending: bool) -> Option<usize> {
 1068|  1.98k|    let count = input_buffer
 1069|  1.98k|        .iter()
 1070|  1.98k|        .take_while(|c| c.is_ascii_digit())
 1071|  1.98k|        .count();
 1072|  1.98k|    if count == input_buffer.len() && !is_ending {
 1073|     48|        return None;
 1074|  1.93k|    }
 1075|  1.93k|    Some(count)
 1076|  1.98k|}
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader16check_stack_size:
  529|   208k|    fn check_stack_size(&self) -> Result<(), String> {
  530|   208k|        if self.state_stack.len() > self.max_state_stack_size {
  531|      0|            Err(format!(
  532|      0|                "Max stack size of {} reached on an object opening",
  533|      0|                self.max_state_stack_size
  534|      0|            ))
  535|       |        } else {
  536|   208k|            Ok(())
  537|       |        }
  538|   208k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings4_0B9_:
  861|    513|                            error = error.or_else(|| {
  862|    513|                                let pos =
  863|    513|                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|    513|                                Some(self.syntax_error(
  865|    513|                                    pos - 2..pos,
  866|    513|                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|    513|                                ))
  868|    513|                            });
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader25apply_new_token_for_value:
  488|  58.2k|    fn apply_new_token_for_value<'a>(
  489|  58.2k|        &mut self,
  490|  58.2k|        token: JsonToken<'a>,
  491|  58.2k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  492|  58.2k|        match token {
  493|  6.91k|            JsonToken::OpeningSquareBracket => (
  494|  6.91k|                Some(JsonEvent::StartArray),
  495|  6.91k|                self.push_state_stack(JsonState::ArrayValueOrEnd).err(),
  496|  6.91k|            ),
  497|      1|            JsonToken::ClosingSquareBracket => (
  498|      1|                None,
  499|      1|                Some("Unexpected closing square bracket, no array to close".into()),
  500|      1|            ),
  501|  31.9k|            JsonToken::OpeningCurlyBracket => (
  502|  31.9k|                Some(JsonEvent::StartObject),
  503|  31.9k|                self.push_state_stack(JsonState::ObjectKeyOrEnd).err(),
  504|  31.9k|            ),
  505|      5|            JsonToken::ClosingCurlyBracket => (
  506|      5|                None,
  507|      5|                Some("Unexpected closing curly bracket, no array to close".into()),
  508|      5|            ),
  509|      5|            JsonToken::Comma => (None, Some("Unexpected comma, no values to separate".into())),
  510|      4|            JsonToken::Colon => (None, Some("Unexpected colon, no key to follow".into())),
  511|  17.1k|            JsonToken::String(string) => (Some(JsonEvent::String(string)), None),
  512|  1.53k|            JsonToken::Number(number) => (Some(JsonEvent::Number(number)), None),
  513|    202|            JsonToken::True => (Some(JsonEvent::Boolean(true)), None),
  514|     80|            JsonToken::False => (Some(JsonEvent::Boolean(false)), None),
  515|      4|            JsonToken::Null => (Some(JsonEvent::Null), None),
  516|    382|            JsonToken::Eof => (
  517|    382|                Some(JsonEvent::Eof),
  518|    382|                Some("Unexpected end of file, a value was expected".into()),
  519|    382|            ),
  520|       |        }
  521|  58.2k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings0_0B9_:
  803|     59|                                    error = error.or_else(|| {
  804|     59|                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|     59|                                        Some(self.syntax_error(
  806|     59|                                            pos - 6..pos,
  807|     59|                                            format!(
  808|     59|                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|     59|                                                high_surrogate
  810|     59|                                            )
  811|     59|                                        ))
  812|     59|                                    });
_RNvNtCsfypg28Pvccj_17json_event_parser4read14read_hexa_char:
 1048|   198k|fn read_hexa_char(input: &[u8]) -> Result<u32, String> {
 1049|   198k|    let mut value = 0;
 1050|   699k|    for c in input.iter().copied() {
 1051|   699k|        value = value * 16
 1052|   699k|            + match c {
 1053|   688k|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
 1054|   125k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
 1055|   319k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
 1056|       |                _ => {
 1057|  59.6k|                    return Err(format!(
 1058|  59.6k|                        "Unexpected character in a unicode escape: '{}'",
 1059|  59.6k|                        char::from(c)
 1060|  59.6k|                    ))
 1061|       |                }
 1062|       |            }
 1063|       |    }
 1064|   139k|    Ok(value)
 1065|   198k|}
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings1_0B9_:
  817|     47|                                        error = error.or_else(|| {
  818|     47|                                            let pos = self.file_offset
  819|     47|                                                + u64::try_from(next_byte_offset).unwrap();
  820|     47|                                            Some(self.syntax_error(pos - 6..pos, e))
  821|     47|                                        });
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader16push_state_stack:
  523|   208k|    fn push_state_stack(&mut self, state: JsonState) -> Result<(), String> {
  524|   208k|        self.check_stack_size()?;
  525|   208k|        self.state_stack.push(state);
  526|   208k|        Ok(())
  527|   208k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings2_0B9_:
  826|     47|                                    error = error.or_else(|| {
  827|     47|                                        let pos = self.file_offset
  828|     47|                                            + u64::try_from(next_byte_offset).unwrap();
  829|     47|                                        Some(self.syntax_error(
  830|     47|                                            pos - 6..pos,
  831|     47|                                            format!(
  832|     47|                                                "\\u{:X} is not a valid low surrogate",
  833|     47|                                                low_surrogate
  834|     47|                                            ),
  835|     47|                                        ))
  836|     47|                                    });
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer11read_number:
  918|  1.68k|    fn read_number<'a>(
  919|  1.68k|        &mut self,
  920|  1.68k|        input_buffer: &'a [u8],
  921|  1.68k|        is_ending: bool,
  922|  1.68k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  923|  1.68k|        let mut next_byte_offset = 0;
  924|  1.68k|        if *input_buffer.get(next_byte_offset)? == b'-' {
  925|     74|            next_byte_offset += 1;
  926|  1.61k|        }
  927|       |        // integer starting with first bytes
  928|  1.68k|        match *input_buffer.get(next_byte_offset)? {
  929|    193|            b'0' => {
  930|    193|                next_byte_offset += 1;
  931|    193|            }
  932|  1.47k|            b'1'..=b'9' => {
  933|  1.47k|                next_byte_offset += 1;
  934|  1.47k|                next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  935|       |            }
  936|      1|            c => {
  937|      1|                next_byte_offset += 1;
  938|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  939|      1|                return Some(Err(self.syntax_error(
  940|      1|                    self.file_offset - 1..self.file_offset,
  941|      1|                    format!("A number is not allowed to start with '{}'", char::from(c)),
  942|      1|                )));
  943|       |            }
  944|       |        }
  945|       |
  946|       |        // Dot
  947|  1.64k|        if input_buffer.get(next_byte_offset).map_or_else(
  948|  1.64k|            || if is_ending { Some(None) } else { None },
  949|  1.64k|            |c| Some(Some(*c)),
  950|  1.64k|        )? == Some(b'.')
  951|       |        {
  952|     53|            next_byte_offset += 1;
  953|     53|            let c = *input_buffer.get(next_byte_offset)?;
  954|     46|            next_byte_offset += 1;
  955|     46|            if !c.is_ascii_digit() {
  956|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  957|      1|                return Some(Err(self.syntax_error(
  958|      1|                    self.file_offset - 1..self.file_offset,
  959|      1|                    format!(
  960|      1|                        "A number fractional part must start with a digit and not '{}'",
  961|      1|                        char::from(c)
  962|      1|                    ),
  963|      1|                )));
  964|     45|            }
  965|     45|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  966|  1.57k|        }
  967|       |
  968|       |        // Exp
  969|  1.60k|        let c = input_buffer.get(next_byte_offset).map_or_else(
  970|  1.60k|            || if is_ending { Some(None) } else { None },
  971|  1.60k|            |c| Some(Some(*c)),
  972|  1.60k|        )?;
  973|  1.60k|        if c == Some(b'e') || c == Some(b'E') {
  974|    493|            next_byte_offset += 1;
  975|    493|            match *input_buffer.get(next_byte_offset)? {
  976|       |                b'-' | b'+' => {
  977|    386|                    next_byte_offset += 1;
  978|    386|                    let c = *input_buffer.get(next_byte_offset)?;
  979|    370|                    next_byte_offset += 1;
  980|    370|                    if !c.is_ascii_digit() {
  981|      2|                        self.file_offset += u64::try_from(next_byte_offset).unwrap();
  982|      2|                        return Some(Err(self.syntax_error(
  983|      2|                            self.file_offset - 1..self.file_offset,
  984|      2|                            format!(
  985|      2|                                "A number exponential part must contain at least a digit, '{}' found",
  986|      2|                                char::from(c)
  987|      2|                            ),
  988|      2|                        )));
  989|    368|                    }
  990|       |                }
  991|     99|                b'0'..=b'9' => {
  992|     99|                    next_byte_offset += 1;
  993|     99|                }
  994|      1|                c => {
  995|      1|                    next_byte_offset += 1;
  996|      1|                    self.file_offset += u64::try_from(next_byte_offset).unwrap();
  997|      1|                    return Some(Err(self.syntax_error(
  998|      1|                        self.file_offset - 1..self.file_offset,
  999|      1|                        format!(
 1000|      1|                            "A number exponential part must start with +, - or a digit, '{}' found",
 1001|      1|                            char::from(c)
 1002|      1|                        ),
 1003|      1|                    )));
 1004|       |                }
 1005|       |            }
 1006|    467|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
 1007|  1.11k|        }
 1008|  1.56k|        self.file_offset += u64::try_from(next_byte_offset).unwrap();
 1009|  1.56k|        Some(Ok(JsonToken::Number(Cow::Borrowed(
 1010|  1.56k|            str::from_utf8(&input_buffer[..next_byte_offset]).unwrap(),
 1011|  1.56k|        ))))
 1012|  1.68k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer13read_constant0B9_:
  904|    489|            .take_while(|c| c.is_ascii_alphabetic())
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_string0B9_:
  774|    851|                                    error = error.or_else(|| {
  775|    851|                                        let pos = self.file_offset
  776|    851|                                            + u64::try_from(next_byte_offset).unwrap();
  777|    851|                                        Some(self.syntax_error(pos - 4..pos, e))
  778|    851|                                    });
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader3new:
  303|  5.44k|    pub const fn new() -> Self {
  304|  5.44k|        Self {
  305|  5.44k|            lexer: JsonLexer {
  306|  5.44k|                file_offset: 0,
  307|  5.44k|                file_line: 0,
  308|  5.44k|                file_start_of_last_line: 0,
  309|  5.44k|                file_start_of_last_token: 0,
  310|  5.44k|                is_start: true,
  311|  5.44k|            },
  312|  5.44k|            state_stack: Vec::new(),
  313|  5.44k|            max_state_stack_size: MAX_STATE_STACK_SIZE,
  314|  5.44k|            element_read: false,
  315|  5.44k|            buffered_event: None,
  316|  5.44k|        }
  317|  5.44k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings_0B9_:
  787|    962|                                    error = error.or_else(|| {
  788|    962|                                        let pos = self.file_offset
  789|    962|                                            + u64::try_from(next_byte_offset).unwrap();
  790|    962|                                        Some(self.syntax_error(
  791|    962|                                            pos - 6..pos,
  792|    962|                                            format!(
  793|    962|                                                "\\u{:X} is not a valid high surrogate",
  794|    962|                                                high_surrogate
  795|    962|                                            ),
  796|    962|                                        ))
  797|    962|                                    });
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer15read_next_token:
  578|   177k|    fn read_next_token<'a>(
  579|   177k|        &mut self,
  580|   177k|        mut input_buffer: &'a [u8],
  581|   177k|        is_ending: bool,
  582|   177k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  583|   177k|        // We remove BOM at the beginning
  584|   177k|        if self.is_start {
  585|  10.9k|            if input_buffer.len() < 3 && !is_ending {
  586|  5.47k|                return None;
  587|  5.44k|            }
  588|  5.44k|            self.is_start = false;
  589|  5.44k|            if input_buffer.starts_with(&[0xEF, 0xBB, 0xBF]) {
  590|      2|                input_buffer = &input_buffer[3..];
  591|      2|                self.file_offset += 3;
  592|  5.44k|            }
  593|   166k|        }
  594|       |
  595|       |        // We skip whitespaces
  596|   171k|        let mut i = 0;
  597|   175k|        while let Some(c) = input_buffer.get(i) {
  598|   174k|            match *c {
  599|  3.57k|                b' ' | b'\t' => {
  600|  3.57k|                    i += 1;
  601|  3.57k|                }
  602|    238|                b'\n' => {
  603|    238|                    i += 1;
  604|    238|                    self.file_line += 1;
  605|    238|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  606|    238|                }
  607|       |                b'\r' => {
  608|    259|                    i += 1;
  609|    259|                    if let Some(c) = input_buffer.get(i) {
  610|    233|                        if *c == b'\n' {
  611|      0|                            i += 1; // \r\n
  612|    233|                        }
  613|     26|                    } else if !is_ending {
  614|       |                        // We need an extra byte to check if followed by \n
  615|     12|                        i -= 1;
  616|     12|                        self.file_offset += u64::try_from(i).unwrap();
  617|     12|                        return None;
  618|     14|                    }
  619|    247|                    self.file_line += 1;
  620|    247|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  621|       |                }
  622|       |                _ => {
  623|   170k|                    break;
  624|       |                }
  625|       |            }
  626|       |        }
  627|   171k|        self.file_offset += u64::try_from(i).unwrap();
  628|   171k|        input_buffer = &input_buffer[i..];
  629|   171k|        self.file_start_of_last_token = self.file_offset;
  630|   171k|
  631|   171k|        if is_ending && input_buffer.is_empty() {
  632|    733|            return Some(Ok(JsonToken::Eof));
  633|   171k|        }
  634|   171k|
  635|   171k|        // we get the first character
  636|   171k|        match *input_buffer.first()? {
  637|       |            b'{' => {
  638|  31.9k|                self.file_offset += 1;
  639|  31.9k|                Some(Ok(JsonToken::OpeningCurlyBracket))
  640|       |            }
  641|       |            b'}' => {
  642|  14.8k|                self.file_offset += 1;
  643|  14.8k|                Some(Ok(JsonToken::ClosingCurlyBracket))
  644|       |            }
  645|       |            b'[' => {
  646|  6.92k|                self.file_offset += 1;
  647|  6.92k|                Some(Ok(JsonToken::OpeningSquareBracket))
  648|       |            }
  649|       |            b']' => {
  650|  3.04k|                self.file_offset += 1;
  651|  3.04k|                Some(Ok(JsonToken::ClosingSquareBracket))
  652|       |            }
  653|       |            b',' => {
  654|  29.8k|                self.file_offset += 1;
  655|  29.8k|                Some(Ok(JsonToken::Comma))
  656|       |            }
  657|       |            b':' => {
  658|  29.6k|                self.file_offset += 1;
  659|  29.6k|                Some(Ok(JsonToken::Colon))
  660|       |            }
  661|  51.7k|            b'"' => self.read_string(input_buffer),
  662|    231|            b't' => self.read_constant(input_buffer, is_ending, "true", JsonToken::True),
  663|    115|            b'f' => self.read_constant(input_buffer, is_ending, "false", JsonToken::False),
  664|     43|            b'n' => self.read_constant(input_buffer, is_ending, "null", JsonToken::Null),
  665|  1.78k|            b'-' | b'0'..=b'9' => self.read_number(input_buffer, is_ending),
  666|    236|            c => {
  667|    236|                self.file_offset += 1;
  668|    236|                Some(Err(self.syntax_error(
  669|    236|                    self.file_offset - 1..self.file_offset,
  670|    236|                    if c < 128 {
  671|    223|                        format!("Unexpected char: '{}'", char::from(c))
  672|       |                    } else {
  673|     13|                        format!("Unexpected byte: \\x{c:X}")
  674|       |                    },
  675|       |                )))
  676|       |            }
  677|       |        }
  678|   177k|    }
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader15read_next_event:
  328|   117k|    pub fn read_next_event<'a>(
  329|   117k|        &mut self,
  330|   117k|        input_buffer: &'a [u8],
  331|   117k|        is_ending: bool,
  332|   117k|    ) -> LowLevelJsonReaderResult<'a> {
  333|   117k|        if let Some(event) = self.buffered_event.take() {
  334|      0|            return LowLevelJsonReaderResult {
  335|      0|                consumed_bytes: 0,
  336|      0|                event: Some(Ok(event)),
  337|      0|            };
  338|   117k|        }
  339|   117k|        let start_file_offset = self.lexer.file_offset;
  340|   177k|        while let Some(token) = self.lexer.read_next_token(
  341|   177k|            &input_buffer[usize::try_from(self.lexer.file_offset - start_file_offset).unwrap()..],
  342|   177k|            is_ending,
  343|   177k|        ) {
  344|   166k|            let consumed_bytes = (self.lexer.file_offset - start_file_offset)
  345|   166k|                .try_into()
  346|   166k|                .unwrap();
  347|   166k|            match token {
  348|   165k|                Ok(token) => {
  349|   165k|                    let (event, error) = self.apply_new_token(token);
  350|   165k|                    let error = error.map(|e| {
  351|       |                        self.lexer.syntax_error(
  352|       |                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|       |                            e,
  354|       |                        )
  355|   165k|                    });
  356|   165k|                    if let Some(error) = error {
  357|    933|                        self.buffered_event = event.map(owned_event);
  358|    933|                        return LowLevelJsonReaderResult {
  359|    933|                            consumed_bytes,
  360|    933|                            event: Some(Err(error)),
  361|    933|                        };
  362|   164k|                    }
  363|   164k|                    if let Some(event) = event {
  364|   105k|                        return LowLevelJsonReaderResult {
  365|   105k|                            consumed_bytes,
  366|   105k|                            event: Some(Ok(event)),
  367|   105k|                        };
  368|  59.4k|                    }
  369|       |                }
  370|    749|                Err(error) => {
  371|    749|                    return LowLevelJsonReaderResult {
  372|    749|                        consumed_bytes,
  373|    749|                        event: Some(Err(error)),
  374|    749|                    }
  375|       |                }
  376|       |            }
  377|       |        }
  378|       |        LowLevelJsonReaderResult {
  379|  10.7k|            consumed_bytes: (self.lexer.file_offset - start_file_offset)
  380|  10.7k|                .try_into()
  381|  10.7k|                .unwrap(),
  382|  10.7k|            event: if is_ending {
  383|  2.21k|                self.buffered_event = Some(JsonEvent::Eof);
  384|  2.21k|                Some(Err(self.lexer.syntax_error(
  385|  2.21k|                    self.lexer.file_offset..self.lexer.file_offset + 1,
  386|  2.21k|                    "Unexpected end of file",
  387|  2.21k|                )))
  388|       |            } else {
  389|  8.49k|                None
  390|       |            },
  391|       |        }
  392|   117k|    }
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer13read_constant:
  891|    389|    fn read_constant(
  892|    389|        &mut self,
  893|    389|        input_buffer: &[u8],
  894|    389|        is_ending: bool,
  895|    389|        expected: &str,
  896|    389|        value: JsonToken<'static>,
  897|    389|    ) -> Option<Result<JsonToken<'static>, SyntaxError>> {
  898|    389|        if input_buffer.get(..expected.len())? == expected.as_bytes() {
  899|    286|            self.file_offset += u64::try_from(expected.len()).unwrap();
  900|    286|            return Some(Ok(value));
  901|     70|        }
  902|     70|        let ascii_chars = input_buffer
  903|     70|            .iter()
  904|     70|            .take_while(|c| c.is_ascii_alphabetic())
  905|     70|            .count();
  906|     70|        if ascii_chars == input_buffer.len() && !is_ending {
  907|     28|            return None; // We might read a bigger token
  908|     42|        }
  909|     42|        let read = max(1, ascii_chars); // We want to consume at least a byte
  910|     42|        let start_offset = self.file_offset;
  911|     42|        self.file_offset += u64::try_from(read).unwrap();
  912|     42|        Some(Err(self.syntax_error(
  913|     42|            start_offset..self.file_offset,
  914|     42|            format!("{} expected", expected),
  915|     42|        )))
  916|    389|    }
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer11decode_utf8:
 1014|   142k|    fn decode_utf8<'a>(
 1015|   142k|        &self,
 1016|   142k|        input_buffer: &'a [u8],
 1017|   142k|        start_position: u64,
 1018|   142k|    ) -> (Cow<'a, str>, Option<SyntaxError>) {
 1019|   142k|        match str::from_utf8(input_buffer) {
 1020|   118k|            Ok(str) => (Cow::Borrowed(str), None),
 1021|  23.2k|            Err(e) => (
 1022|  23.2k|                String::from_utf8_lossy(input_buffer),
 1023|  23.2k|                Some({
 1024|  23.2k|                    let pos = start_position + u64::try_from(e.valid_up_to()).unwrap();
 1025|  23.2k|                    self.syntax_error(pos..pos + 1, format!("Invalid UTF-8: {e}"))
 1026|  23.2k|                }),
 1027|  23.2k|            ),
 1028|       |        }
 1029|   142k|    }
_RINvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB6_9JsonLexer12syntax_errorNtNtCsdBW21Yiwikk_5alloc6string6StringEB8_:
 1031|  27.5k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  27.5k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  27.5k|        SyntaxError {
 1034|  27.5k|            location: TextPosition {
 1035|  27.5k|                line: self.file_line,
 1036|  27.5k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  27.5k|                offset: start_file_offset,
 1038|  27.5k|            }..TextPosition {
 1039|  27.5k|                line: self.file_line,
 1040|  27.5k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  27.5k|                offset: file_offset.end,
 1042|  27.5k|            },
 1043|  27.5k|            message: message.into(),
 1044|  27.5k|        }
 1045|  27.5k|    }
_RNvNtCsfypg28Pvccj_17json_event_parser4read11owned_event:
 1078|    444|fn owned_event(event: JsonEvent<'_>) -> JsonEvent<'static> {
 1079|    444|    match event {
 1080|     23|        JsonEvent::String(s) => JsonEvent::String(s.into_owned().into()),
 1081|     16|        JsonEvent::Number(n) => JsonEvent::Number(n.into_owned().into()),
 1082|      8|        JsonEvent::Boolean(b) => JsonEvent::Boolean(b),
 1083|      1|        JsonEvent::Null => JsonEvent::Null,
 1084|      1|        JsonEvent::StartArray => JsonEvent::StartArray,
 1085|      5|        JsonEvent::EndArray => JsonEvent::EndArray,
 1086|      5|        JsonEvent::StartObject => JsonEvent::StartObject,
 1087|      3|        JsonEvent::EndObject => JsonEvent::EndObject,
 1088|      0|        JsonEvent::ObjectKey(k) => JsonEvent::ObjectKey(k.into_owned().into()),
 1089|    382|        JsonEvent::Eof => JsonEvent::Eof,
 1090|       |    }
 1091|    444|}
_RNvXsl_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonTokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  553|   122k|#[derive(Eq, PartialEq, Clone, Debug)]
_RINvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB6_9JsonLexer12syntax_errorReEB8_:
 1031|  2.21k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  2.21k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  2.21k|        SyntaxError {
 1034|  2.21k|            location: TextPosition {
 1035|  2.21k|                line: self.file_line,
 1036|  2.21k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  2.21k|                offset: start_file_offset,
 1038|  2.21k|            }..TextPosition {
 1039|  2.21k|                line: self.file_line,
 1040|  2.21k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  2.21k|                offset: file_offset.end,
 1042|  2.21k|            },
 1043|  2.21k|            message: message.into(),
 1044|  2.21k|        }
 1045|  2.21k|    }
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader15apply_new_token:
  394|   191k|    fn apply_new_token<'a>(
  395|   191k|        &mut self,
  396|   191k|        token: JsonToken<'a>,
  397|   191k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  398|   191k|        match self.state_stack.pop() {
  399|       |            Some(JsonState::ObjectKeyOrEnd) => {
  400|  31.1k|                if token == JsonToken::ClosingCurlyBracket {
  401|  12.2k|                    (Some(JsonEvent::EndObject), None)
  402|       |                } else {
  403|  18.9k|                    if let Err(e) = self.push_state_stack(JsonState::ObjectKey) {
  404|      0|                        return (None, Some(e));
  405|  18.9k|                    }
  406|  18.9k|                    self.apply_new_token(token)
  407|       |                }
  408|       |            }
  409|       |            Some(JsonState::ObjectKey) => {
  410|  30.0k|                if token == JsonToken::ClosingCurlyBracket {
  411|      3|                    return (Some(JsonEvent::EndObject), Some("Trailing commas are not allowed".into()));
  412|  30.0k|                }
  413|  30.0k|                if let Err(e) = self.push_state_stack(JsonState::ObjectColon) {
  414|      0|                    return (None, Some(e));
  415|  30.0k|                }
  416|  30.0k|                if let JsonToken::String(key) = token {
  417|  29.8k|                    (Some(JsonEvent::ObjectKey(key)), None)
  418|       |                } else {
  419|    262|                    (None, Some("Object keys must be strings".into()))
  420|       |                }
  421|       |            }
  422|       |            Some(JsonState::ObjectColon) => {
  423|  29.6k|                if let Err(e) = self.push_state_stack(JsonState::ObjectValue) {
  424|      0|                    return (None, Some(e));
  425|  29.6k|                }
  426|  29.6k|                if token == JsonToken::Colon {
  427|  29.6k|                    (None, None)
  428|       |                } else {
  429|     69|                    let (event, _) = self.apply_new_token(token);
  430|     69|                    (event, Some("Object keys must be strings".into()))
  431|       |                }
  432|       |            }
  433|       |            Some(JsonState::ObjectValue) => {
  434|  29.5k|                if let Err(e) = self.push_state_stack(JsonState::ObjectCommaOrEnd) {
  435|      0|                    return (None, Some(e));
  436|  29.5k|                }
  437|  29.5k|                self.apply_new_token_for_value(token)
  438|       |            }
  439|  14.0k|            Some(JsonState::ObjectCommaOrEnd) => match token {
  440|       |                JsonToken::Comma => {
  441|  11.2k|                    (None, self.push_state_stack(JsonState::ObjectKey).err())
  442|       |                }
  443|  2.62k|                JsonToken::ClosingCurlyBracket => (Some(JsonEvent::EndObject), None),
  444|    209|                _ => (None, Some("Object values must be followed by a comma to add a new value or a curly bracket to end the object".into())),
  445|       |            },
  446|       |            Some(JsonState::ArrayValueOrEnd) =>{
  447|  6.88k|                if token == JsonToken::ClosingSquareBracket {
  448|    694|                    return (Some(JsonEvent::EndArray), None);
  449|  6.19k|                }
  450|  6.19k|                if let Err(e) = self.push_state_stack(JsonState::ArrayValue) {
  451|      0|                    return (None, Some(e));
  452|  6.19k|                }
  453|  6.19k|                self.apply_new_token(token)
  454|       |            }
  455|       |            Some(JsonState::ArrayValue) => {
  456|  24.9k|                if token == JsonToken::ClosingSquareBracket {
  457|      5|                    return (Some(JsonEvent::EndArray), Some("Trailing commas are not allowed".into()));
  458|  24.9k|                }
  459|  24.9k|                if let Err(e) = self.push_state_stack(JsonState::ArrayCommaOrEnd) {
  460|      0|                    return (None, Some(e));
  461|  24.9k|                }
  462|  24.9k|                self.apply_new_token_for_value(token)
  463|       |            }
  464|  21.1k|            Some(JsonState::ArrayCommaOrEnd) => match token {
  465|       |                JsonToken::Comma => {
  466|  18.6k|                    (None, self.push_state_stack(JsonState::ArrayValue).err())
  467|       |                }
  468|  2.34k|                JsonToken::ClosingSquareBracket => (Some(JsonEvent::EndArray), None),
  469|       |                _ => {
  470|    150|                    let _ = self.push_state_stack(JsonState::ArrayValue); // We already have an error
  471|    150|                    let (event, _) = self.apply_new_token(token);
  472|    150|                    (event, Some("Array values must be followed by a comma to add a new value or a squared bracket to end the array".into()))
  473|       |                }
  474|       |            }
  475|  3.80k|            None => if self.element_read {
  476|     28|                if token == JsonToken::Eof {
  477|     25|                    (Some(JsonEvent::Eof), None)
  478|       |                } else {
  479|      3|                    (None, Some("The JSON already contains one root element".into()))
  480|       |                }
  481|       |            } else {
  482|  3.77k|                self.element_read = true;
  483|  3.77k|                self.apply_new_token_for_value(token)
  484|       |            }
  485|       |        }
  486|   191k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_numbers1_0B9_:
  971|  1.55k|            |c| Some(Some(*c)),

_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCslu3GLw2gIGD_13oxigraph_fuzz:
   37|    216|    pub fn finish(self) -> Result<W> {
   38|    216|        self.writer.validate_eof()?;
   39|    216|        Ok(self.write)
   40|    216|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  121|     21|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|     21|        match event {
  123|      0|            JsonEvent::String(s) => {
  124|      0|                self.before_value(&mut write)?;
  125|      0|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      3|            JsonEvent::Boolean(b) => {
  132|      3|                self.before_value(&mut write)?;
  133|      3|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|      0|                self.before_value(&mut write)?;
  141|      0|                self.state_stack.push(JsonState::OpenArray);
  142|      0|                write.write_all(b"[")
  143|       |            }
  144|      0|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|      0|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|      6|                self.before_value(&mut write)?;
  162|      6|                self.state_stack.push(JsonState::OpenObject);
  163|      6|                write.write_all(b"{")
  164|       |            }
  165|      6|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|      6|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|      6|            JsonEvent::ObjectKey(key) => {
  182|      6|                match self.state_stack.pop() {
  183|      3|                    Some(JsonState::OpenObject) => (),
  184|      3|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|      6|                self.state_stack.push(JsonState::ContinuationObject);
  193|      6|                self.state_stack.push(JsonState::ObjectValue);
  194|      6|                write_escaped_json_string(&key, &mut write)?;
  195|      6|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|     21|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  121|  14.2k|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|  14.2k|        match event {
  123|  1.53k|            JsonEvent::String(s) => {
  124|  1.53k|                self.before_value(&mut write)?;
  125|  1.53k|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      0|            JsonEvent::Boolean(b) => {
  132|      0|                self.before_value(&mut write)?;
  133|      0|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|    432|                self.before_value(&mut write)?;
  141|    432|                self.state_stack.push(JsonState::OpenArray);
  142|    432|                write.write_all(b"[")
  143|       |            }
  144|    432|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|    432|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|  5.48k|                self.before_value(&mut write)?;
  162|  5.48k|                self.state_stack.push(JsonState::OpenObject);
  163|  5.48k|                write.write_all(b"{")
  164|       |            }
  165|  5.48k|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|  5.48k|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|    864|            JsonEvent::ObjectKey(key) => {
  182|    864|                match self.state_stack.pop() {
  183|    648|                    Some(JsonState::OpenObject) => (),
  184|    216|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|    864|                self.state_stack.push(JsonState::ContinuationObject);
  193|    864|                self.state_stack.push(JsonState::ObjectValue);
  194|    864|                write_escaped_json_string(&key, &mut write)?;
  195|    864|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|  14.2k|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  204|  7.44k|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|  7.44k|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|    388|                self.state_stack.push(JsonState::ContinuationArray);
  208|    388|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|  5.97k|                self.state_stack.push(JsonState::ContinuationArray);
  212|  5.97k|                write.write_all(b",")?;
  213|  5.97k|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|    864|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|    216|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|    216|                    self.element_written = true;
  232|    216|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|  7.44k|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  204|      9|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|      9|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|      0|                self.state_stack.push(JsonState::ContinuationArray);
  208|      0|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|      0|                self.state_stack.push(JsonState::ContinuationArray);
  212|      0|                write.write_all(b",")?;
  213|      0|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|      6|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|      3|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|      3|                    self.element_written = true;
  232|      3|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|      9|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsdBW21Yiwikk_5alloc3vec3VechEE11write_eventCslu3GLw2gIGD_13oxigraph_fuzz:
   33|     21|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|     21|        self.writer.write_event(event, &mut self.write)
   35|     21|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsdBW21Yiwikk_5alloc3vec3VechEE3newCslu3GLw2gIGD_13oxigraph_fuzz:
   26|      3|    pub const fn new(write: W) -> Self {
   27|      3|        Self {
   28|      3|            write,
   29|      3|            writer: LowLevelJsonWriter::new(),
   30|      3|        }
   31|      3|    }
_RINvNtCsfypg28Pvccj_17json_event_parser5write25write_escaped_json_stringQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  263|  1.53k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  1.53k|    write.write_all(b"\"")?;
  265|  1.53k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  9.02k|    for c in s.chars() {
  267|  9.02k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  9.02k|            c => {
  271|  9.02k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  9.02k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  1.53k|    write.write_all(b"\"")?;
  295|  1.53k|    Ok(())
  296|  1.53k|}
_RINvNtCsfypg28Pvccj_17json_event_parser5write25write_escaped_json_stringQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  263|    864|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|    864|    write.write_all(b"\"")?;
  265|    864|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  4.96k|    for c in s.chars() {
  267|  4.96k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  4.96k|            c => {
  271|  4.96k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  4.96k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|    864|    write.write_all(b"\"")?;
  295|    864|    Ok(())
  296|    864|}
_RINvNtCsfypg28Pvccj_17json_event_parser5write25write_escaped_json_stringQQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  263|      6|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|      6|    write.write_all(b"\"")?;
  265|      6|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|     33|    for c in s.chars() {
  267|     33|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|     33|            c => {
  271|     33|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|     33|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|      6|    write.write_all(b"\"")?;
  295|      6|    Ok(())
  296|      6|}
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE3newCslu3GLw2gIGD_13oxigraph_fuzz:
   26|    216|    pub const fn new(write: W) -> Self {
   27|    216|        Self {
   28|    216|            write,
   29|    216|            writer: LowLevelJsonWriter::new(),
   30|    216|        }
   31|    216|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCslu3GLw2gIGD_13oxigraph_fuzz:
   37|      3|    pub fn finish(self) -> Result<W> {
   38|      3|        self.writer.validate_eof()?;
   39|      3|        Ok(self.write)
   40|      3|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE11write_eventCslu3GLw2gIGD_13oxigraph_fuzz:
   33|  14.2k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|  14.2k|        self.writer.write_event(event, &mut self.write)
   35|  14.2k|    }
_RNvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB4_18LowLevelJsonWriter12validate_eof:
  238|    219|    fn validate_eof(&self) -> Result<()> {
  239|    219|        if !self.state_stack.is_empty() {
  240|      0|            return Err(Error::new(
  241|      0|                ErrorKind::InvalidInput,
  242|      0|                "The written JSON is not balanced: an object or an array has not been closed",
  243|      0|            ));
  244|    219|        }
  245|    219|        if !self.element_written {
  246|      0|            return Err(Error::new(
  247|      0|                ErrorKind::InvalidInput,
  248|      0|                "A JSON file can't be empty",
  249|      0|            ));
  250|    219|        }
  251|    219|        Ok(())
  252|    219|    }
_RNvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB4_18LowLevelJsonWriter3new:
  114|    219|    pub const fn new() -> Self {
  115|    219|        Self {
  116|    219|            state_stack: Vec::new(),
  117|    219|            element_written: false,
  118|    219|        }
  119|    219|    }

_RNvNvCsNlLNZrHcHK_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  5.22k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  5.22k|                $body
  243|  5.22k|            }
rust_fuzzer_test_input:
  209|  5.22k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  5.22k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  5.22k|                }
  223|  5.22k|
  224|  5.22k|                __libfuzzer_sys_run(bytes);
  225|  5.22k|                0
  226|  5.22k|            }
LLVMFuzzerTestOneInput:
   58|  5.22k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  5.22k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  5.22k|    });
   63|  5.22k|
   64|  5.22k|    match test_input {
   65|  5.22k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  5.22k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs5ixuek62Ty3_13libfuzzer_sys15test_input_wrap0B3_:
   59|  5.22k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  5.22k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  5.22k|        rust_fuzzer_test_input(data_slice)
   62|  5.22k|    });

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs5ixuek62Ty3_13libfuzzer_sys:
   49|  5.22k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  5.22k|        // An `Acquire` load is enough because that makes all the initialization
   51|  5.22k|        // operations visible to us, and, this being a fast path, weaker
   52|  5.22k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  5.22k|        // `SeqCst` operations on the slow path.
   54|  5.22k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  5.22k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs5ixuek62Ty3_13libfuzzer_sys:
  963|  5.22k|        pub fn get(&self) -> Option<&T> {
  964|  5.22k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  5.22k|                None
  969|       |            }
  970|  5.22k|        }

_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCsbrE1BkJ52QU_5oxrdf:
 1152|    814|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|    814|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|    814|            self.output_positions.scheme_end = 0;
 1201|    814|            self.input_scheme_end = 0;
 1202|    814|            if self.input.starts_with('/') {
 1203|    311|                self.input.next();
 1204|    311|                self.output.push('/');
 1205|    311|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|    503|                self.output_positions.authority_end = 0;
 1208|    503|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|    814|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|  2.97k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  12.5k|        loop {
 1346|  12.5k|            let c = self.input.next();
 1347|  12.5k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  4.08k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  4.08k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  4.08k|                    } else if c == Some('/') {
 1357|  1.14k|                        self.output.push('/');
 1358|  2.94k|                    }
 1359|       |
 1360|  4.08k|                    if c == Some('?') {
 1361|    397|                        self.output_positions.path_end = self.output.len();
 1362|    397|                        self.output.push('?');
 1363|    397|                        return self.parse_query();
 1364|  3.68k|                    } else if c == Some('#') {
 1365|    397|                        self.output_positions.path_end = self.output.len();
 1366|    397|                        self.output_positions.query_end = self.output.len();
 1367|    397|                        self.output.push('#');
 1368|    397|                        return self.parse_fragment();
 1369|  3.29k|                    } else if c == None {
 1370|  2.14k|                        self.output_positions.path_end = self.output.len();
 1371|  2.14k|                        self.output_positions.query_end = self.output.len();
 1372|  2.14k|                        return Ok(());
 1373|  1.14k|                    }
 1374|       |                }
 1375|  8.42k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  2.97k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECsbrE1BkJ52QU_5oxrdf:
 1454|    157|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|    157|        Err(IriParseError { kind })
 1456|    157|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|  4.09k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  4.09k|        if iri.is_absolute() {
  873|  3.42k|            Ok(Self(iri))
  874|       |        } else {
  875|    671|            Err(IriParseError {
  876|    671|                kind: IriParseErrorKind::NoScheme,
  877|    671|            })
  878|       |        }
  879|  4.09k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|  4.25k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  4.25k|        match self.input.front() {
 1103|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  4.25k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|    705|            _ => self.parse_relative(),
 1106|       |        }
 1107|  4.25k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|  1.99k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  1.99k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|     72|            let start_position = self.input.position;
 1259|  7.54k|            while let Some(c) = self.input.next() {
 1260|  7.47k|                self.output.push(c);
 1261|  7.47k|                if c == ']' {
 1262|      3|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      3|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      3|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  7.47k|                }
 1280|       |            }
 1281|     69|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  6.17k|            loop {
 1285|  6.17k|                let c = self.input.next();
 1286|  6.17k|                match c {
 1287|       |                    Some(':') => {
 1288|    987|                        self.output.push(':');
 1289|    987|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|    929|                        self.output_positions.authority_end = self.output.len();
 1293|    929|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  4.25k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  1.99k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|  1.89k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  1.89k|        match c {
 1317|       |            None => {
 1318|    612|                self.output_positions.path_end = self.output.len();
 1319|    612|                self.output_positions.query_end = self.output.len();
 1320|    612|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    109|                self.output_positions.path_end = self.output.len();
 1324|    109|                self.output.push('?');
 1325|    109|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    456|                self.output_positions.path_end = self.output.len();
 1329|    456|                self.output_positions.query_end = self.output.len();
 1330|    456|                self.output.push('#');
 1331|    456|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|    718|                self.output.push('/');
 1335|    718|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  1.89k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|  8.22k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  8.22k|        if c == '%' {
 1424|    203|            self.read_echar()
 1425|  8.01k|        } else if is_url_query_code_point(c) {
 1426|  8.00k|            self.output.push(c);
 1427|  8.00k|            Ok(())
 1428|       |        } else {
 1429|     10|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  8.22k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|  1.62k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  1.62k|        let c1 = self.input.next();
 1436|  1.62k|        let c2 = self.input.next();
 1437|  1.62k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.58k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.57k|            self.output.push('%');
 1441|  1.57k|            self.output.push(c1.unwrap());
 1442|  1.57k|            self.output.push(c2.unwrap());
 1443|  1.57k|            Ok(())
 1444|       |        } else {
 1445|     46|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|     46|                Some('%'),
 1447|     46|                c1,
 1448|     46|                c2,
 1449|     46|            ]))
 1450|       |        }
 1451|  1.62k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|  4.25k|    fn parse(
 1077|  4.25k|        iri: &'a str,
 1078|  4.25k|        base: Option<IriRef<&'a str>>,
 1079|  4.25k|        output: &'a mut O,
 1080|  4.25k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  4.25k|        let mut parser = Self {
 1082|  4.25k|            iri,
 1083|  4.25k|            base,
 1084|  4.25k|            input: ParserInput {
 1085|  4.25k|                value: iri.chars(),
 1086|  4.25k|                position: 0,
 1087|  4.25k|            },
 1088|  4.25k|            output,
 1089|  4.25k|            output_positions: IriElementsPositions {
 1090|  4.25k|                scheme_end: 0,
 1091|  4.25k|                authority_end: 0,
 1092|  4.25k|                path_end: 0,
 1093|  4.25k|                query_end: 0,
 1094|  4.25k|            },
 1095|  4.25k|            input_scheme_end: 0,
 1096|  4.25k|        };
 1097|  4.25k|        parser.parse_scheme_start()?;
 1098|  4.09k|        Ok(parser.output_positions)
 1099|  4.25k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|    867|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  5.92k|        while let Some(c) = self.input.next() {
 1396|  5.06k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|    860|        Ok(())
 1399|    867|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|  3.55k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  11.5k|        loop {
 1111|  11.5k|            let c = self.input.next();
 1112|  11.5k|            match c {
 1113|  11.5k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  8.02k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  3.44k|                    self.output.push(':');
 1118|  3.44k|                    self.output_positions.scheme_end = self.output.len();
 1119|  3.44k|                    self.input_scheme_end = self.input.position;
 1120|  3.44k|                    return if self.input.starts_with('/') {
 1121|  2.20k|                        self.input.next();
 1122|  2.20k|                        self.output.push('/');
 1123|  2.20k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  1.23k|                        self.output_positions.authority_end = self.output.len();
 1126|  1.23k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|    109|                    self.input = ParserInput {
 1131|    109|                        value: self.iri.chars(),
 1132|    109|                        position: 0,
 1133|    109|                    }; // reset
 1134|    109|                    self.output.clear();
 1135|    109|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  3.55k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|  4.25k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|  4.25k|        IriRef::parse(iri)?.try_into()
  503|  4.25k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|  2.51k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  2.51k|        if self.input.starts_with('/') {
 1143|  1.99k|            self.input.next();
 1144|  1.99k|            self.output.push('/');
 1145|  1.99k|            self.parse_authority()
 1146|       |        } else {
 1147|    520|            self.output_positions.authority_end = self.output.len() - 1;
 1148|    520|            self.parse_path()
 1149|       |        }
 1150|  2.51k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|  4.25k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  4.25k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  4.09k|        Ok(Self { iri, positions })
   58|  4.25k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|  4.09k|    pub fn is_absolute(&self) -> bool {
  147|  4.09k|        self.positions.scheme_end != 0
  148|  4.09k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|  1.58k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|    506|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  8.71k|        while let Some(c) = self.input.next() {
 1382|  8.23k|            if c == '#' {
 1383|     14|                self.output_positions.query_end = self.output.len();
 1384|     14|                self.output.push('#');
 1385|     14|                return self.parse_fragment();
 1386|       |            } else {
 1387|  8.22k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    481|        self.output_positions.query_end = self.output.len();
 1391|    481|        Ok(())
 1392|    506|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|  1.99k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  7.55k|        loop {
 1234|  7.55k|            let c = self.input.next();
 1235|  7.55k|            match c {
 1236|       |                Some('@') => {
 1237|     11|                    self.output.push('@');
 1238|     11|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  1.98k|                    self.input = ParserInput {
 1242|  1.98k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  1.98k|                        position: self.input_scheme_end + 2,
 1244|  1.98k|                    };
 1245|  1.98k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  1.98k|                    return self.parse_host();
 1247|       |                }
 1248|  5.56k|                Some(c) => {
 1249|  5.56k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  1.99k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|  3.42k|    pub fn into_inner(self) -> T {
  569|  3.42k|        self.0.into_inner()
  570|  3.42k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|    987|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  1.27k|        loop {
 1303|  1.27k|            let c = self.input.next();
 1304|    993|            match c {
 1305|    993|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|    966|                    self.output_positions.authority_end = self.output.len();
 1308|    966|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     21|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|    987|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|  3.42k|    pub fn into_inner(self) -> T {
  133|  3.42k|        self.iri
  134|  3.42k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  23.3k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  23.3k|        if c == '%' {
 1412|  1.42k|            self.read_echar()
 1413|  21.8k|        } else if is_url_code_point(c) {
 1414|  21.8k|            self.output.push(c);
 1415|  21.8k|            Ok(())
 1416|       |        } else {
 1417|      7|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  23.3k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|  1.61k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|  4.25k|    fn front(&self) -> Option<char> {
 1054|  4.25k|        self.value.clone().next()
 1055|  4.25k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsbrE1BkJ52QU_5oxrdf:
  985|    109|    fn clear(&mut self) {
  986|    109|        self.len = 0;
  987|    109|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|  8.76k|    fn starts_with(&self, c: char) -> bool {
 1059|  8.76k|        self.value.as_str().starts_with(c)
 1060|  8.76k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|  4.25k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|  1.98k|    fn truncate(&mut self, new_len: usize) {
  991|  1.98k|        self.len = new_len;
  992|  1.98k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|  15.3k|    fn len(&self) -> usize {
  996|  15.3k|        self.len
  997|  15.3k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|  8.17k|    fn as_str(&self) -> &str {
 1001|  8.17k|        ""
 1002|  8.17k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  62.5k|    fn push(&mut self, c: char) {
  976|  62.5k|        self.len += c.len_utf8();
  977|  62.5k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  69.0k|    fn next(&mut self) -> Option<char> {
 1044|  69.0k|        if let Some(head) = self.value.next() {
 1045|  64.1k|            self.position += head.len_utf8();
 1046|  64.1k|            Some(head)
 1047|       |        } else {
 1048|  4.85k|            None
 1049|       |        }
 1050|  69.0k|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  29.9k|fn is_url_code_point(c: char) -> bool {
 1460|  29.9k|    matches!(c,
 1461|  9.62k|        'a'..='z'
 1462|  11.7k|        | 'A'..='Z'
 1463|  13.2k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  5.14k|        | '\u{A0}'..='\u{D7FF}'
 1484|  2.45k|        | '\u{F900}'..='\u{FDCF}'
 1485|  2.45k|        | '\u{FDF0}'..='\u{FFEF}'
 1486|  2.45k|        | '\u{10000}'..='\u{1FFFD}'
 1487|  2.45k|        | '\u{20000}'..='\u{2FFFD}'
 1488|  2.45k|        | '\u{30000}'..='\u{3FFFD}'
 1489|  2.45k|        | '\u{40000}'..='\u{4FFFD}'
 1490|    107|        | '\u{50000}'..='\u{5FFFD}'
 1491|     81|        | '\u{60000}'..='\u{6FFFD}'
 1492|     57|        | '\u{70000}'..='\u{7FFFD}'
 1493|     49|        | '\u{80000}'..='\u{8FFFD}'
 1494|     49|        | '\u{90000}'..='\u{9FFFD}'
 1495|     49|        | '\u{A0000}'..='\u{AFFFD}'
 1496|     49|        | '\u{B0000}'..='\u{BFFFD}'
 1497|     49|        | '\u{C0000}'..='\u{CFFFD}'
 1498|     34|        | '\u{D0000}'..='\u{DFFFD}'
 1499|     34|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  29.9k|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|    828|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|    828|        match &self.kind {
  908|    672|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|     69|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|     69|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|      3|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|     21|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|     17|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|     17|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|     46|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|     46|                f,
  919|     46|                "Invalid IRI percent encoding '{}'",
  920|     46|                cs.iter().flatten().cloned().collect::<String>()
  921|     46|            ),
  922|       |        }
  923|    828|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|  8.01k|fn is_url_query_code_point(c: char) -> bool {
 1504|  8.01k|    is_url_code_point(c)
 1505|    134|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  8.01k|}

_RNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  5.22k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  5.22k|    let parser = QueryResultsParser::from_format(format);
    8|  5.22k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  5.22k|    let Ok(reader) = parser.parse_read(data) else {
   11|  4.94k|        return;
   12|       |    };
   13|    286|    match reader {
   14|    283|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|    283|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|     67|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|    216|            let mut writer = serializer
   21|    216|                .serialize_solutions_to_write(
   22|    216|                    Vec::new(),
   23|    216|                    solutions
   24|    216|                        .get(0)
   25|    216|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|    216|                )
   27|    216|                .unwrap();
   28|  5.04k|            for solution in &solutions {
   29|  4.83k|                writer.write(solution).unwrap();
   30|  4.83k|            }
   31|    216|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|    216|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|    216|                .parse_read(serialized.as_bytes())
   36|    216|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|    216|                .unwrap()
   38|       |            {
   39|    216|                assert_eq!(
   40|    216|                    roundtrip_solutions
   41|    216|                        .collect::<Result<Vec<_>, _>>()
   42|    216|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|    216|                        .unwrap(),
   44|    216|                    solutions
   45|    216|                )
   46|      0|            }
   47|       |        }
   48|      3|        FromReadQueryResultsReader::Boolean(value) => {
   49|      3|            // We try to write again
   50|      3|            let mut serialized = Vec::new();
   51|      3|            serializer
   52|      3|                .serialize_boolean_to_write(&mut serialized, value)
   53|      3|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      3|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      3|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      3|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  5.22k|}
_RNCNvNtCslu3GLw2gIGD_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|    209|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCslu3GLw2gIGD_13oxigraph_fuzz:
   29|  3.42k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  3.42k|        Self::new_unchecked(iri.into_inner())
   31|  3.42k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCsdBW21Yiwikk_5alloc6borrow3CoweEECslu3GLw2gIGD_13oxigraph_fuzz:
   24|  4.25k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  4.25k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  4.25k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   39|  3.42k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  3.42k|        Self { iri: iri.into() }
   41|  3.42k|    }

_RNvXs_NtCsbrE1BkJ52QU_5oxrdf8variableNtB4_8VariableNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
   61|     18|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|     18|        self.as_ref().fmt(f)
   63|     18|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_strCslu3GLw2gIGD_13oxigraph_fuzz:
   44|  4.59k|    pub fn as_str(&self) -> &str {
   45|  4.59k|        &self.name
   46|  4.59k|    }
_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCslu3GLw2gIGD_13oxigraph_fuzz:
   17|  59.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCslu3GLw2gIGD_13oxigraph_fuzz:
   17|  1.53k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_refCslu3GLw2gIGD_13oxigraph_fuzz:
   54|     18|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|     18|        VariableRef { name: &self.name }
   56|     18|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_11VariableRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
  123|     18|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|     18|        write!(f, "?{}", self.name)
  125|     18|    }
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCslu3GLw2gIGD_13oxigraph_fuzz:
  226|     29|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     29|        write!(f, "The variable name is invalid")
  228|     29|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_strCsbBgSuRnHgd0_10sparesults:
   44|  1.53k|    pub fn as_str(&self) -> &str {
   45|  1.53k|        &self.name
   46|  1.53k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   39|  7.90k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  7.90k|        Self { name: name.into() }
   41|  7.90k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  7.93k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  7.93k|        let name = name.into();
   28|  7.93k|        validate_variable_identifier(&name)?;
   29|  7.90k|        Ok(Self::new_unchecked(name))
   30|  7.93k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf8variable28validate_variable_identifier:
  170|  7.93k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  7.93k|    let mut chars = id.chars();
  172|  7.93k|    let front = chars.next().ok_or(VariableNameParseError)?;
  173|  7.93k|    match front {
  174|  7.93k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  7.22k|        | 'A'..='Z'
  178|  4.83k|        | 'a'..='z'
  179|    220|        | '\u{00C0}'..='\u{00D6}'
  180|    220|        | '\u{00D8}'..='\u{00F6}'
  181|    220|        | '\u{00F8}'..='\u{02FF}'
  182|    188|        | '\u{0370}'..='\u{037D}'
  183|    188|        | '\u{037F}'..='\u{1FFF}'
  184|    136|        | '\u{200C}'..='\u{200D}'
  185|    136|        | '\u{2070}'..='\u{218F}'
  186|    136|        | '\u{2C00}'..='\u{2FEF}'
  187|    136|        | '\u{3001}'..='\u{D7FF}'
  188|    101|        | '\u{F900}'..='\u{FDCF}'
  189|    101|        | '\u{FDF0}'..='\u{FFFD}'
  190|  7.92k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      6|        _ => return Err(VariableNameParseError),
  192|       |    }
  193|  30.9k|    for c in chars {
  194|  23.0k|        match c {
  195|  23.0k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|  2.51k|            | '\u{00300}'..='\u{036F}'
  198|  1.33k|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  18.4k|            | 'A'..='Z'
  201|  12.3k|            | 'a'..='z'
  202|  2.65k|            | '\u{00C0}'..='\u{00D6}'
  203|  2.65k|            | '\u{00D8}'..='\u{00F6}'
  204|  2.65k|            | '\u{00F8}'..='\u{02FF}'
  205|  2.51k|            | '\u{0370}'..='\u{037D}'
  206|  2.51k|            | '\u{037F}'..='\u{1FFF}'
  207|  1.33k|            | '\u{200C}'..='\u{200D}'
  208|  1.33k|            | '\u{2070}'..='\u{218F}'
  209|  1.32k|            | '\u{2C00}'..='\u{2FEF}'
  210|  1.32k|            | '\u{3001}'..='\u{D7FF}'
  211|    861|            | '\u{F900}'..='\u{FDCF}'
  212|    859|            | '\u{FDF0}'..='\u{FFFD}'
  213|  22.9k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|     18|            _ => return Err(VariableNameParseError),
  215|       |        }
  216|       |    }
  217|  7.90k|    Ok(())
  218|  7.93k|}

_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsdBW21Yiwikk_5alloc6string6StringECslu3GLw2gIGD_13oxigraph_fuzz:
  108|    950|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    950|        Self {
  110|    950|            inner: SyntaxErrorKind::Msg {
  111|    950|                msg: msg.into(),
  112|    950|                location: None,
  113|    950|            },
  114|    950|        }
  115|    950|    }
_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError3msgReECslu3GLw2gIGD_13oxigraph_fuzz:
  108|    157|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    157|        Self {
  110|    157|            inner: SyntaxErrorKind::Msg {
  111|    157|                msg: msg.into(),
  112|    157|                location: None,
  113|    157|            },
  114|    157|        }
  115|    157|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
   45|    876|    fn from(error: SyntaxError) -> Self {
   46|    876|        Self::Syntax(error)
   47|    876|    }
_RNvXs3_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsfypg28Pvccj_17json_event_parser4read10ParseErrorE4from:
   61|  3.90k|    fn from(error: json_event_parser::ParseError) -> Self {
   62|  3.90k|        match error {
   63|  3.90k|            json_event_parser::ParseError::Syntax(error) => SyntaxError::from(error).into(),
   64|      0|            json_event_parser::ParseError::Io(error) => error.into(),
   65|       |        }
   66|  3.90k|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|  4.13k|    fn from(error: SyntaxError) -> Self {
   46|  4.13k|        Self::Syntax(error)
   47|  4.13k|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_11SyntaxErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsfypg28Pvccj_17json_event_parser4read11SyntaxErrorE4from:
  203|  3.90k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  204|  3.90k|        Self {
  205|  3.90k|            inner: SyntaxErrorKind::Json(error),
  206|  3.90k|        }
  207|  3.90k|    }

_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs5_0Cslu3GLw2gIGD_13oxigraph_fuzz:
  574|      2|                            match subject.ok_or_else(|| {
  575|      2|                                SyntaxError::msg("triple serialization should have a 'subject' key")
  576|      2|                            })? {
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json9read_headRShE0Cslu3GLw2gIGD_13oxigraph_fuzz:
  628|     29|                                let new_var = Variable::new(s.as_ref()).map_err(|e| {
  629|     29|                                    SyntaxError::msg(format!(
  630|     29|                                        "Invalid variable declaration '{s}': {e}"
  631|     29|                                    ))
  632|     29|                                })?;
_RINvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB3_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB36_22ToWriteSolutionsWriterB18_E5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB48_6triple4TermRNtB2E_13QuerySolutionE0EECslu3GLw2gIGD_13oxigraph_fuzz:
   66|  4.83k|    pub fn write<'a>(
   67|  4.83k|        &mut self,
   68|  4.83k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   69|  4.83k|    ) -> io::Result<()> {
   70|  4.83k|        let mut buffer = Vec::with_capacity(48);
   71|  4.83k|        self.inner.write(&mut buffer, solution);
   72|  4.83k|        Self::do_write(&mut self.writer, buffer)
   73|  4.83k|    }
_RNCNvMs1_NtCsbBgSuRnHgd0_10sparesults4jsonINtB7_19JsonSolutionsReaderRShE9read_next0Cslu3GLw2gIGD_13oxigraph_fuzz:
  385|     13|                            let k = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  386|     13|                                SyntaxError::msg(format!(
  387|     13|                                    "The variable {key} has not been defined in the header"
  388|     13|                                ))
  389|     13|                            })?;
_RINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShECslu3GLw2gIGD_13oxigraph_fuzz:
  416|  3.75k|fn read_value<R: Read>(
  417|  3.75k|    reader: &mut FromReadJsonReader<R>,
  418|  3.75k|    number_of_recursive_calls: usize,
  419|  3.75k|) -> Result<Term, ParseError> {
  420|  3.75k|    enum Type {
  421|  3.75k|        Uri,
  422|  3.75k|        BNode,
  423|  3.75k|        Literal,
  424|  3.75k|        #[cfg(feature = "rdf-star")]
  425|  3.75k|        Triple,
  426|  3.75k|    }
  427|  3.75k|    #[derive(Eq, PartialEq)]
  428|  3.75k|    enum State {
  429|  3.75k|        Type,
  430|  3.75k|        Value,
  431|  3.75k|        Lang,
  432|  3.75k|        Datatype,
  433|  3.75k|    }
  434|  3.75k|
  435|  3.75k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  436|      1|        return Err(SyntaxError::msg(format!(
  437|      1|            "Too many nested triples ({MAX_NUMBER_OF_NESTED_TRIPLES}). The parser fails here to avoid a stack overflow."
  438|      1|        ))
  439|      1|            .into());
  440|  3.75k|    }
  441|  3.75k|    let mut state = None;
  442|  3.75k|    let mut t = None;
  443|  3.75k|    let mut value = None;
  444|  3.75k|    let mut lang = None;
  445|  3.75k|    let mut datatype = None;
  446|  3.75k|    #[cfg(feature = "rdf-star")]
  447|  3.75k|    let mut subject = None;
  448|  3.75k|    #[cfg(feature = "rdf-star")]
  449|  3.75k|    let mut predicate = None;
  450|  3.75k|    #[cfg(feature = "rdf-star")]
  451|  3.75k|    let mut object = None;
  452|  3.75k|    if reader.read_next_event()? != JsonEvent::StartObject {
  453|      9|        return Err(SyntaxError::msg("Term serializations should be an object").into());
  454|  3.69k|    }
  455|       |    loop {
  456|       |        #[allow(unsafe_code)]
  457|       |        // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
  458|  12.3k|        let next_event = unsafe {
  459|  12.6k|            let r: *mut FromReadJsonReader<R> = reader;
  460|  12.6k|            &mut *r
  461|  12.6k|        }
  462|  12.6k|        .read_next_event()?;
  463|  12.3k|        match next_event {
  464|  7.43k|            JsonEvent::ObjectKey(key) => match key.as_ref() {
  465|  7.43k|                "type" => state = Some(State::Type),
  466|  7.31k|                "value" => state = Some(State::Value),
  467|  7.02k|                "xml:lang" => state = Some(State::Lang),
  468|  6.81k|                "datatype" => state = Some(State::Datatype),
  469|       |                #[cfg(feature = "rdf-star")]
  470|  2.48k|                "subject" => subject = Some(read_value(reader, number_of_recursive_calls + 1)?),
  471|       |                #[cfg(feature = "rdf-star")]
  472|  2.40k|                "predicate" => predicate = Some(read_value(reader, number_of_recursive_calls + 1)?),
  473|       |                #[cfg(feature = "rdf-star")]
  474|    104|                "object" => object = Some(read_value(reader, number_of_recursive_calls + 1)?),
  475|       |                _ => {
  476|     28|                    return Err(SyntaxError::msg(format!(
  477|     28|                        "Unexpected key in term serialization: '{key}'"
  478|     28|                    ))
  479|     28|                    .into())
  480|       |                }
  481|       |            },
  482|       |            JsonEvent::StartObject => {
  483|     68|                if state != Some(State::Value) {
  484|      3|                    return Err(
  485|      3|                        SyntaxError::msg("Unexpected nested object in term serialization").into(),
  486|      3|                    );
  487|     65|                }
  488|       |            }
  489|  4.79k|            JsonEvent::String(s) => match state {
  490|       |                Some(State::Type) => {
  491|    110|                    match s.as_ref() {
  492|    110|                        "uri" => t = Some(Type::Uri),
  493|     87|                        "bnode" => t = Some(Type::BNode),
  494|     68|                        "literal" | "typed-literal" => t = Some(Type::Literal),
  495|       |                        #[cfg(feature = "rdf-star")]
  496|     37|                        "triple" => t = Some(Type::Triple),
  497|       |                        _ => {
  498|     12|                            return Err(
  499|     12|                                SyntaxError::msg(format!("Unexpected term type: '{s}'")).into()
  500|     12|                            )
  501|       |                        }
  502|       |                    };
  503|     98|                    state = None;
  504|       |                }
  505|    222|                Some(State::Value) => {
  506|    222|                    value = Some(s.into_owned());
  507|    222|                    state = None;
  508|    222|                }
  509|    209|                Some(State::Lang) => {
  510|    209|                    lang = Some(s.into_owned());
  511|    209|                    state = None;
  512|    209|                }
  513|  3.42k|                Some(State::Datatype) => {
  514|  3.42k|                    datatype = Some(
  515|  4.25k|                        NamedNode::new(s)
  516|  4.25k|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
  517|       |                    );
  518|  3.42k|                    state = None;
  519|       |                }
  520|      0|                _ => (), // impossible
  521|       |            },
  522|       |            JsonEvent::EndObject => {
  523|     41|                if let Some(s) = state {
  524|     34|                    if s == State::Value {
  525|     34|                        state = None; //End of triple
  526|     34|                    } else {
  527|      0|                        return Err(
  528|      0|                            SyntaxError::msg("Term description values should be string").into()
  529|      0|                        );
  530|       |                    }
  531|       |                } else {
  532|      6|                    return match t {
  533|      1|                        None => Err(SyntaxError::msg(
  534|      1|                            "Term serialization should have a 'type' key",
  535|      1|                        )
  536|      1|                        .into()),
  537|      1|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  538|       |                            SyntaxError::msg("uri serialization should have a 'value' key")
  539|      1|                        })?)
  540|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid uri value: {e}")))?
  541|      0|                        .into()),
  542|      1|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  543|       |                            SyntaxError::msg("bnode serialization should have a 'value' key")
  544|      1|                        })?)
  545|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid bnode value: {e}")))?
  546|      0|                        .into()),
  547|       |                        Some(Type::Literal) => {
  548|      2|                            let value = value.ok_or_else(|| {
  549|       |                                SyntaxError::msg("literal serialization should have a 'value' key")
  550|      2|                            })?;
  551|      0|                            Ok(match lang {
  552|      0|                                Some(lang) => {
  553|      0|                                    if let Some(datatype) = datatype {
  554|      0|                                        if datatype.as_ref() != rdf::LANG_STRING {
  555|      0|                                            return Err(SyntaxError::msg(format!(
  556|      0|                                                "xml:lang value '{lang}' provided with the datatype {datatype}"
  557|      0|                                            )).into())
  558|      0|                                        }
  559|      0|                                    }
  560|      0|                                    Literal::new_language_tagged_literal(value, &*lang).map_err(|e| {
  561|       |                                        SyntaxError::msg(format!("Invalid xml:lang value '{lang}': {e}"))
  562|      0|                                    })?
  563|       |                                }
  564|      0|                                None => if let Some(datatype) = datatype {
  565|      0|                                    Literal::new_typed_literal(value, datatype)
  566|       |                                } else {
  567|      0|                                    Literal::new_simple_literal(value)
  568|       |                                }
  569|       |                            }
  570|      0|                                .into())
  571|       |                        }
  572|       |                        #[cfg(feature = "rdf-star")]
  573|       |                        Some(Type::Triple) => Ok(Triple::new(
  574|      2|                            match subject.ok_or_else(|| {
  575|       |                                SyntaxError::msg("triple serialization should have a 'subject' key")
  576|      2|                            })? {
  577|      0|                                Term::NamedNode(subject) => subject.into(),
  578|      0|                                Term::BlankNode(subject) => subject.into(),
  579|      0|                                Term::Triple(subject) => Subject::Triple(subject),
  580|       |                                Term::Literal(_) => {
  581|      0|                                    return Err(SyntaxError::msg(
  582|      0|                                        "The 'subject' value should not be a literal",
  583|      0|                                    )
  584|      0|                                    .into())
  585|       |                                }
  586|       |                            },
  587|      0|                            match predicate.ok_or_else(|| {
  588|       |                                SyntaxError::msg(
  589|       |                                    "triple serialization should have a 'predicate' key",
  590|       |                                )
  591|      0|                            })? {
  592|      0|                                Term::NamedNode(predicate) => predicate,
  593|       |                                _ => {
  594|      0|                                    return Err(SyntaxError::msg(
  595|      0|                                        "The 'predicate' value should be a uri",
  596|      0|                                    )
  597|      0|                                    .into())
  598|       |                                }
  599|       |                            },
  600|      0|                            object.ok_or_else(|| {
  601|       |                                SyntaxError::msg("triple serialization should have a 'object' key")
  602|      0|                            })?,
  603|       |                        )
  604|      0|                        .into()),
  605|       |                    };
  606|       |                }
  607|       |            }
  608|      2|            _ => return Err(SyntaxError::msg("Invalid term serialization").into()),
  609|       |        }
  610|       |    }
  611|  3.75k|}
_RNvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5startCslu3GLw2gIGD_13oxigraph_fuzz:
   58|    216|    pub fn start(write: W, variables: &[Variable]) -> io::Result<Self> {
   59|    216|        let mut writer = ToWriteJsonWriter::new(write);
   60|    216|        let mut buffer = Vec::with_capacity(48);
   61|    216|        let inner = InnerJsonSolutionsWriter::start(&mut buffer, variables);
   62|    216|        Self::do_write(&mut writer, buffer)?;
   63|    216|        Ok(Self { inner, writer })
   64|    216|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCslu3GLw2gIGD_13oxigraph_fuzz:
   75|    216|    pub fn finish(mut self) -> io::Result<W> {
   76|    216|        let mut buffer = Vec::with_capacity(4);
   77|    216|        self.inner.finish(&mut buffer);
   78|    216|        Self::do_write(&mut self.writer, buffer)?;
   79|    216|        self.writer.finish()
   80|    216|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE8do_writeCslu3GLw2gIGD_13oxigraph_fuzz:
   82|  5.26k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   83|  19.4k|        for event in output {
   84|  14.2k|            writer.write_event(event)?;
   85|       |        }
   86|  5.26k|        Ok(())
   87|  5.26k|    }
_RNvMs1_NtCsbBgSuRnHgd0_10sparesults4jsonINtB5_19JsonSolutionsReaderRShE9read_nextCslu3GLw2gIGD_13oxigraph_fuzz:
  375|  10.4k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  376|  10.4k|        match &mut self.kind {
  377|  10.2k|            JsonSolutionsReaderKind::Streaming { reader } => {
  378|  10.2k|                let mut new_bindings = vec![None; self.mapping.len()];
  379|       |                loop {
  380|  20.0k|                    match reader.read_next_event()? {
  381|  9.79k|                        JsonEvent::StartObject => (),
  382|  9.77k|                        JsonEvent::EndObject => return Ok(Some(new_bindings)),
  383|    418|                        JsonEvent::EndArray | JsonEvent::Eof => return Ok(None),
  384|     15|                        JsonEvent::ObjectKey(key) => {
  385|     15|                            let k = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  386|       |                                SyntaxError::msg(format!(
  387|       |                                    "The variable {key} has not been defined in the header"
  388|       |                                ))
  389|     15|                            })?;
  390|      2|                            new_bindings[k] = Some(read_value(reader, 0)?)
  391|       |                        }
  392|     10|                        _ => return Err(SyntaxError::msg("Invalid result serialization").into()),
  393|       |                    }
  394|       |                }
  395|       |            }
  396|    210|            JsonSolutionsReaderKind::Buffered { bindings } => {
  397|    210|                Ok(if let Some((variables, values)) = bindings.next() {
  398|    196|                    let mut new_bindings = vec![None; self.mapping.len()];
  399|    196|                    for (variable, value) in variables.into_iter().zip(values) {
  400|      0|                        let k = *self.mapping.get(&variable).ok_or_else(|| {
  401|       |                            SyntaxError::msg(format!(
  402|       |                                "The variable {variable} has not been defined in the header"
  403|       |                            ))
  404|      0|                        })?;
  405|      0|                        new_bindings[k] = Some(value)
  406|       |                    }
  407|    196|                    Some(new_bindings)
  408|       |                } else {
  409|     14|                    None
  410|       |                })
  411|       |            }
  412|       |        }
  413|  10.4k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults4json9read_headRShECslu3GLw2gIGD_13oxigraph_fuzz:
  613|  2.47k|fn read_head<R: Read>(reader: &mut FromReadJsonReader<R>) -> Result<Vec<Variable>, ParseError> {
  614|  2.47k|    if reader.read_next_event()? != JsonEvent::StartObject {
  615|      4|        return Err(SyntaxError::msg("head should be an object").into());
  616|  2.44k|    }
  617|  2.44k|    let mut variables = Vec::new();
  618|       |    loop {
  619|  5.64k|        match reader.read_next_event()? {
  620|  3.63k|            JsonEvent::ObjectKey(key) => match key.as_ref() {
  621|  3.63k|                "vars" => {
  622|  1.40k|                    if reader.read_next_event()? != JsonEvent::StartArray {
  623|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  624|  1.39k|                    }
  625|       |                    loop {
  626|  9.28k|                        match reader.read_next_event()? {
  627|  7.93k|                            JsonEvent::String(s) => {
  628|  7.93k|                                let new_var = Variable::new(s.as_ref()).map_err(|e| {
  629|       |                                    SyntaxError::msg(format!(
  630|       |                                        "Invalid variable declaration '{s}': {e}"
  631|       |                                    ))
  632|  7.93k|                                })?;
  633|  7.90k|                                if variables.contains(&new_var) {
  634|     18|                                    return Err(SyntaxError::msg(format!(
  635|     18|                                        "The variable {new_var} is declared twice"
  636|     18|                                    ))
  637|     18|                                    .into());
  638|  7.88k|                                }
  639|  7.88k|                                variables.push(new_var);
  640|       |                            }
  641|  1.19k|                            JsonEvent::EndArray => break,
  642|       |                            _ => {
  643|      2|                                return Err(
  644|      2|                                    SyntaxError::msg("Variable names should be strings").into()
  645|      2|                                )
  646|       |                            }
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|  2.23k|                "link" => {
  651|    127|                    if reader.read_next_event()? != JsonEvent::StartArray {
  652|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  653|    122|                    }
  654|       |                    loop {
  655|    475|                        match reader.read_next_event()? {
  656|    353|                            JsonEvent::String(_) => (),
  657|     96|                            JsonEvent::EndArray => break,
  658|       |                            _ => {
  659|      4|                                return Err(SyntaxError::msg("Link names should be strings").into())
  660|       |                            }
  661|       |                        }
  662|       |                    }
  663|       |                }
  664|  2.11k|                _ => ignore_value(reader)?,
  665|       |            },
  666|  1.87k|            JsonEvent::EndObject => return Ok(variables),
  667|      0|            _ => return Err(SyntaxError::msg("Invalid head serialization").into()),
  668|       |        }
  669|       |    }
  670|  2.47k|}
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults4jsonINtB5_22JsonQueryResultsReaderRShE4readCslu3GLw2gIGD_13oxigraph_fuzz:
  237|  5.44k|    pub fn read(read: R) -> Result<Self, ParseError> {
  238|  5.44k|        let mut reader = FromReadJsonReader::new(read);
  239|  5.44k|        let mut variables = None;
  240|  5.44k|        let mut buffered_bindings: Option<Vec<_>> = None;
  241|  5.44k|        let mut output_iter = None;
  242|  5.44k|
  243|  5.44k|        if reader.read_next_event()? != JsonEvent::StartObject {
  244|     93|            return Err(SyntaxError::msg("SPARQL JSON results should be an object").into());
  245|  3.64k|        }
  246|       |
  247|       |        loop {
  248|  6.43k|            let event = reader.read_next_event()?;
  249|  5.67k|            match event {
  250|  5.35k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  251|  5.35k|                    "head" => {
  252|  2.47k|                        let extracted_variables = read_head(&mut reader)?;
  253|  1.87k|                        if let Some(buffered_bindings) = buffered_bindings.take() {
  254|    396|                            let mut mapping = BTreeMap::default();
  255|  1.17k|                            for (i, var) in extracted_variables.iter().enumerate() {
  256|  1.17k|                                mapping.insert(var.as_str().to_owned(), i);
  257|  1.17k|                            }
  258|    396|                            output_iter = Some(Self::Solutions {
  259|    396|                                variables: extracted_variables,
  260|    396|                                solutions: JsonSolutionsReader {
  261|    396|                                    kind: JsonSolutionsReaderKind::Buffered {
  262|    396|                                        bindings: buffered_bindings.into_iter(),
  263|    396|                                    },
  264|    396|                                    mapping,
  265|    396|                                },
  266|    396|                            });
  267|  1.47k|                        } else {
  268|  1.47k|                            variables = Some(extracted_variables);
  269|  1.47k|                        }
  270|       |                    }
  271|  2.88k|                    "results" => {
  272|  2.85k|                        if reader.read_next_event()? != JsonEvent::StartObject {
  273|      4|                            return Err(SyntaxError::msg("'results' should be an object").into());
  274|  2.84k|                        }
  275|       |                        loop {
  276|  5.58k|                            match reader.read_next_event()? {
  277|  5.40k|                                JsonEvent::ObjectKey(k) if k == "bindings" => break, // Found
  278|  2.96k|                                JsonEvent::ObjectKey(_) => ignore_value(&mut reader)?,
  279|       |                                _ => {
  280|      3|                                    return Err(SyntaxError::msg(
  281|      3|                                        "'results' should contain a 'bindings' key",
  282|      3|                                    )
  283|      3|                                    .into())
  284|       |                                }
  285|       |                            }
  286|       |                        }
  287|  2.43k|                        if reader.read_next_event()? != JsonEvent::StartArray {
  288|      1|                            return Err(SyntaxError::msg("'bindings' should be an object").into());
  289|  2.43k|                        }
  290|  2.43k|                        if let Some(variables) = variables {
  291|    485|                            let mut mapping = BTreeMap::default();
  292|  3.41k|                            for (i, var) in variables.iter().enumerate() {
  293|  3.41k|                                mapping.insert(var.as_str().to_owned(), i);
  294|  3.41k|                            }
  295|    485|                            return Ok(Self::Solutions {
  296|    485|                                variables,
  297|    485|                                solutions: JsonSolutionsReader {
  298|    485|                                    kind: JsonSolutionsReaderKind::Streaming { reader },
  299|    485|                                    mapping,
  300|    485|                                },
  301|    485|                            });
  302|  1.94k|                        }
  303|  1.94k|                        // We buffer all results before being able to read the header
  304|  1.94k|                        let mut bindings = Vec::new();
  305|  1.94k|                        let mut variables = Vec::new();
  306|  1.94k|                        let mut values = Vec::new();
  307|       |                        loop {
  308|  5.96k|                            match reader.read_next_event()? {
  309|  2.65k|                                JsonEvent::StartObject => (),
  310|  1.35k|                                JsonEvent::EndObject => {
  311|  1.35k|                                    bindings.push((take(&mut variables), take(&mut values)));
  312|  1.35k|                                }
  313|       |                                JsonEvent::EndArray | JsonEvent::Eof => {
  314|    628|                                    buffered_bindings = Some(bindings);
  315|    628|                                    break;
  316|       |                                }
  317|  1.30k|                                JsonEvent::ObjectKey(key) => {
  318|  1.30k|                                    variables.push(key.into_owned());
  319|  1.30k|                                    values.push(read_value(&mut reader, 0)?);
  320|       |                                }
  321|       |                                _ => {
  322|      1|                                    return Err(
  323|      1|                                        SyntaxError::msg("Invalid result serialization").into()
  324|      1|                                    )
  325|       |                                }
  326|       |                            }
  327|       |                        }
  328|       |                    }
  329|     29|                    "boolean" => {
  330|      8|                        return if let JsonEvent::Boolean(v) = reader.read_next_event()? {
  331|      6|                            Ok(Self::Boolean(v))
  332|       |                        } else {
  333|      1|                            Err(SyntaxError::msg("Unexpected boolean value").into())
  334|       |                        }
  335|       |                    }
  336|       |                    _ => {
  337|     21|                        return Err(SyntaxError::msg(format!(
  338|     21|                            "Expecting head or result key, found {key}"
  339|     21|                        ))
  340|     21|                        .into());
  341|       |                    }
  342|       |                },
  343|    295|                JsonEvent::EndObject => (),
  344|       |                JsonEvent::Eof => {
  345|     25|                    return if let Some(output_iter) = output_iter {
  346|     14|                        Ok(output_iter)
  347|       |                    } else {
  348|     11|                        Err(SyntaxError::msg(
  349|     11|                            "Unexpected end of JSON object without 'results' or 'boolean' key",
  350|     11|                        )
  351|     11|                        .into())
  352|       |                    }
  353|       |                }
  354|      0|                _ => return Err(SyntaxError::msg("Invalid SPARQL results serialization").into()),
  355|       |            }
  356|       |        }
  357|  5.44k|    }
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs1_0Cslu3GLw2gIGD_13oxigraph_fuzz:
  542|      1|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  543|      1|                            SyntaxError::msg("bnode serialization should have a 'value' key")
  544|      1|                        })?)
_RINvMs_NtCsbBgSuRnHgd0_10sparesults4jsonNtB5_24InnerJsonSolutionsWriter5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2v_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB42_6triple4TermRNtB23_13QuerySolutionE0EECslu3GLw2gIGD_13oxigraph_fuzz:
  155|  4.83k|    fn write<'a>(
  156|  4.83k|        &self,
  157|  4.83k|        output: &mut Vec<JsonEvent<'a>>,
  158|  4.83k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  159|  4.83k|    ) {
  160|  4.83k|        output.push(JsonEvent::StartObject);
  161|  4.83k|        for (variable, value) in solution {
  162|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  163|      0|            write_json_term(output, value);
  164|      0|        }
  165|  4.83k|        output.push(JsonEvent::EndObject);
  166|  4.83k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults4json25write_boolean_json_resultQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
   20|      3|pub fn write_boolean_json_result<W: Write>(write: W, value: bool) -> io::Result<W> {
   21|      3|    let mut writer = ToWriteJsonWriter::new(write);
   22|     21|    for event in inner_write_boolean_json_result(value) {
   23|     21|        writer.write_event(event)?;
   24|       |    }
   25|      3|    writer.finish()
   26|      3|}
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs3_0Cslu3GLw2gIGD_13oxigraph_fuzz:
  548|      2|                            let value = value.ok_or_else(|| {
  549|      2|                                SyntaxError::msg("literal serialization should have a 'value' key")
  550|      2|                            })?;
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShE0Cslu3GLw2gIGD_13oxigraph_fuzz:
  516|    828|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
_RINvNtCsbBgSuRnHgd0_10sparesults4json12ignore_valueRShECslu3GLw2gIGD_13oxigraph_fuzz:
  672|  5.07k|fn ignore_value<R: Read>(reader: &mut FromReadJsonReader<R>) -> Result<(), ParseError> {
  673|  5.07k|    let mut nesting = 0;
  674|       |    loop {
  675|  24.7k|        match reader.read_next_event()? {
  676|       |            JsonEvent::Boolean(_)
  677|       |            | JsonEvent::Null
  678|       |            | JsonEvent::Number(_)
  679|       |            | JsonEvent::String(_) => {
  680|  5.69k|                if nesting == 0 {
  681|  3.97k|                    return Ok(());
  682|  1.71k|                }
  683|       |            }
  684|  6.66k|            JsonEvent::ObjectKey(_) => (),
  685|  9.78k|            JsonEvent::StartArray | JsonEvent::StartObject => nesting += 1,
  686|       |            JsonEvent::EndArray | JsonEvent::EndObject => {
  687|  2.21k|                nesting -= 1;
  688|  2.21k|                if nesting == 0 {
  689|    683|                    return Ok(());
  690|  1.53k|                }
  691|       |            }
  692|      0|            JsonEvent::Eof => return Err(SyntaxError::msg("Unexpected end of file").into()),
  693|       |        }
  694|       |    }
  695|  5.07k|}
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs_0Cslu3GLw2gIGD_13oxigraph_fuzz:
  537|      1|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  538|      1|                            SyntaxError::msg("uri serialization should have a 'value' key")
  539|      1|                        })?)
_RNvXs1_NvNtCsbBgSuRnHgd0_10sparesults4json10read_valueNtB5_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCslu3GLw2gIGD_13oxigraph_fuzz:
  427|    102|    #[derive(Eq, PartialEq)]
_RNvMs_NtCsbBgSuRnHgd0_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter5start:
  136|    216|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  137|    216|        output.push(JsonEvent::StartObject);
  138|    216|        output.push(JsonEvent::ObjectKey("head".into()));
  139|    216|        output.push(JsonEvent::StartObject);
  140|    216|        output.push(JsonEvent::ObjectKey("vars".into()));
  141|    216|        output.push(JsonEvent::StartArray);
  142|  1.75k|        for variable in variables {
  143|  1.53k|            output.push(JsonEvent::String(variable.as_str().into()));
  144|  1.53k|        }
  145|    216|        output.push(JsonEvent::EndArray);
  146|    216|        output.push(JsonEvent::EndObject);
  147|    216|        output.push(JsonEvent::ObjectKey("results".into()));
  148|    216|        output.push(JsonEvent::StartObject);
  149|    216|        output.push(JsonEvent::ObjectKey("bindings".into()));
  150|    216|        output.push(JsonEvent::StartArray);
  151|    216|        Self {}
  152|    216|    }
_RNvNtCsbBgSuRnHgd0_10sparesults4json31inner_write_boolean_json_result:
   40|      3|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   41|      3|    [
   42|      3|        JsonEvent::StartObject,
   43|      3|        JsonEvent::ObjectKey("head".into()),
   44|      3|        JsonEvent::StartObject,
   45|      3|        JsonEvent::EndObject,
   46|      3|        JsonEvent::ObjectKey("boolean".into()),
   47|      3|        JsonEvent::Boolean(value),
   48|      3|        JsonEvent::EndObject,
   49|      3|    ]
   50|      3|}
_RNvMs_NtCsbBgSuRnHgd0_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter6finish:
  169|    216|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  170|    216|        output.push(JsonEvent::EndArray);
  171|    216|        output.push(JsonEvent::EndObject);
  172|    216|        output.push(JsonEvent::EndObject);
  173|    216|    }

_RNvMNtCsbBgSuRnHgd0_10sparesults6parserNtB2_18QueryResultsParser11from_formatCslu3GLw2gIGD_13oxigraph_fuzz:
   44|  5.22k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|  5.22k|        Self { format }
   46|  5.22k|    }
_RNCNvXs1_NtCsbBgSuRnHgd0_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cslu3GLw2gIGD_13oxigraph_fuzz:
  217|  9.97k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RINvMNtCsbBgSuRnHgd0_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECslu3GLw2gIGD_13oxigraph_fuzz:
   73|  5.44k|    pub fn parse_read<R: Read>(
   74|  5.44k|        &self,
   75|  5.44k|        reader: R,
   76|  5.44k|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|  5.44k|        Ok(match self.format {
   78|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|  5.44k|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      6|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|    499|                    solutions,
   92|    499|                    variables,
   93|    499|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|    499|                    variables: variables.into(),
   95|    499|                    solutions: SolutionsReaderKind::Json(solutions),
   96|    499|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      0|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|      0|                    solutions,
  103|      0|                    variables,
  104|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|      0|                    variables: variables.into(),
  106|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|      0|                }),
  108|       |            },
  109|       |        })
  110|  5.44k|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCslu3GLw2gIGD_13oxigraph_fuzz:
  209|  10.4k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  210|  10.4k|        Some(
  211|  10.4k|            match &mut self.solutions {
  212|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  213|  10.4k|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  214|      0|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  215|       |            }
  216|  10.4k|            .transpose()?
  217|  10.0k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  218|       |        )
  219|  10.4k|    }

_RINvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
   71|      3|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      3|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      3|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      0|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      3|    }
_RINvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECslu3GLw2gIGD_13oxigraph_fuzz:
  274|  4.83k|    pub fn write<'a>(
  275|  4.83k|        &mut self,
  276|  4.83k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  277|  4.83k|    ) -> io::Result<()> {
  278|  4.83k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  279|  4.83k|        match &mut self.formatter {
  280|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  281|  4.83k|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  282|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  283|      0|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  284|       |        }
  285|  4.83k|    }
_RINvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECslu3GLw2gIGD_13oxigraph_fuzz:
  136|    216|    pub fn serialize_solutions_to_write<W: Write>(
  137|    216|        &self,
  138|    216|        write: W,
  139|    216|        variables: Vec<Variable>,
  140|    216|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  141|    216|        Ok(ToWriteSolutionsWriter {
  142|    216|            formatter: match self.format {
  143|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  144|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  145|       |                ),
  146|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  147|    216|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  148|       |                ),
  149|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  150|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  151|       |                ),
  152|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  153|      0|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  154|       |                ),
  155|       |            },
  156|       |        })
  157|    216|    }
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCslu3GLw2gIGD_13oxigraph_fuzz:
  288|    216|    pub fn finish(self) -> io::Result<W> {
  289|    216|        match self.formatter {
  290|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  291|    216|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  292|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  293|      0|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  294|       |        }
  295|    216|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCslu3GLw2gIGD_13oxigraph_fuzz:
   55|  5.22k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  5.22k|        Self { format }
   57|  5.22k|    }

_RNvXs_NtCsbBgSuRnHgd0_10sparesults8solutionNtB4_13QuerySolutionINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtCsdBW21Yiwikk_5alloc4sync3ArcSNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCslu3GLw2gIGD_13oxigraph_fuzz:
  120|  9.97k|    fn from((v, s): (V, S)) -> Self {
  121|  9.97k|        Self {
  122|  9.97k|            variables: v.into(),
  123|  9.97k|            values: s.into(),
  124|  9.97k|        }
  125|  9.97k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iterCslu3GLw2gIGD_13oxigraph_fuzz:
  133|  4.83k|    fn into_iter(self) -> Iter<'a> {
  134|  4.83k|        Iter {
  135|  4.83k|            inner: self.variables.iter().zip(&self.values),
  136|  4.83k|        }
  137|  4.83k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB2_13QuerySolution9variablesCslu3GLw2gIGD_13oxigraph_fuzz:
  113|    209|    pub fn variables(&self) -> &[Variable] {
  114|    209|        &self.variables
  115|    209|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCslu3GLw2gIGD_13oxigraph_fuzz:
  231|  4.83k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|  9.65k|        for (variable, value) in &mut self.inner {
  233|  4.81k|            if let Some(value) = value {
  234|      0|                return Some((variable, value));
  235|  4.81k|            }
  236|       |        }
  237|  4.83k|        None
  238|  4.83k|    }
_RNvXs6_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_13QuerySolutionNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eq:
  191|  4.83k|    fn eq(&self, other: &Self) -> bool {
  192|  4.83k|        for (k, v) in self.iter() {
  193|      0|            if other.get(k) != Some(v) {
  194|      0|                return false;
  195|      0|            }
  196|       |        }
  197|  4.83k|        for (k, v) in other.iter() {
  198|      0|            if self.get(k) != Some(v) {
  199|      0|                return false;
  200|      0|            }
  201|       |        }
  202|  4.83k|        true
  203|  4.83k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   85|  9.66k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   86|  9.66k|        self.into_iter()
   87|  9.66k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  133|  9.66k|    fn into_iter(self) -> Iter<'a> {
  134|  9.66k|        Iter {
  135|  9.66k|            inner: self.variables.iter().zip(&self.values),
  136|  9.66k|        }
  137|  9.66k|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextB7_:
  231|  9.66k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|  19.3k|        for (variable, value) in &mut self.inner {
  233|  9.63k|            if let Some(value) = value {
  234|      0|                return Some((variable, value));
  235|  9.63k|            }
  236|       |        }
  237|  9.66k|        None
  238|  9.66k|    }


_RINvXNtCsiWVlQfz2Npw_6anyhow7contextINtNtCs3enrnThfs6H_4core6result6ResultINtNtCs3ONS7Rzjfqc_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error10ParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCsbqtYJIZlK4w_5alloc6string6StringNCNvNtCs2ZhSipuJ38Z_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB42_:
   58|    140|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    140|    where
   60|    140|        C: Display + Send + Sync + 'static,
   61|    140|        F: FnOnce() -> C,
   62|    140|    {
   63|    140|        match self {
   64|    140|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    140|    }
_RINvXNtCsiWVlQfz2Npw_6anyhow7contextINtNtCs3enrnThfs6H_4core6result6ResultINtNtCsbqtYJIZlK4w_5alloc3vec3VecNtNtCs3ONS7Rzjfqc_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCs2ZhSipuJ38Z_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|    140|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    140|    where
   60|    140|        C: Display + Send + Sync + 'static,
   61|    140|        F: FnOnce() -> C,
   62|    140|    {
   63|    140|        match self {
   64|    140|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    140|    }

_RNvXs1_Cs4KG2xUOtNUk_17json_event_parserNtB5_9JsonEventNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqCs2ZhSipuJ38Z_13oxigraph_fuzz:
   29|  10.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNvXs8_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_10ParseErrorINtNtCs3enrnThfs6H_4core7convert4FromNtB5_11SyntaxErrorE4fromCs2ZhSipuJ38Z_13oxigraph_fuzz:
 1209|  1.21k|    fn from(error: SyntaxError) -> Self {
 1210|  1.21k|        Self::Syntax(error)
 1211|  1.21k|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser4readINtB2_18FromReadJsonReaderRShE15read_next_eventCs2ZhSipuJ38Z_13oxigraph_fuzz:
   58|  69.1k|    pub fn read_next_event(&mut self) -> Result<JsonEvent<'_>, ParseError> {
   59|       |        loop {
   60|       |            {
   61|       |                let LowLevelJsonReaderResult {
   62|  72.4k|                    event,
   63|  72.4k|                    consumed_bytes,
   64|  72.4k|                } = self.parser.read_next_event(
   65|  72.4k|                    #[allow(unsafe_code)]
   66|  72.4k|                    unsafe {
   67|  72.4k|                        let input_buffer_ptr: *const [u8] =
   68|  72.4k|                            &self.input_buffer[self.input_buffer_start..self.input_buffer_end];
   69|  72.4k|                        &*input_buffer_ptr
   70|  72.4k|                    }, // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
   71|  72.4k|                    self.is_ending,
   72|  72.4k|                );
   73|  72.4k|                self.input_buffer_start += consumed_bytes;
   74|  72.4k|                if let Some(event) = event {
   75|  69.1k|                    return Ok(event?);
   76|  3.26k|                }
   77|  3.26k|            }
   78|  3.26k|            if self.input_buffer_start > 0 {
   79|    707|                self.input_buffer
   80|    707|                    .copy_within(self.input_buffer_start..self.input_buffer_end, 0);
   81|    707|                self.input_buffer_end -= self.input_buffer_start;
   82|    707|                self.input_buffer_start = 0;
   83|  2.55k|            }
   84|  3.26k|            if self.input_buffer.len() == self.max_buffer_size {
   85|      0|                return Err(io::Error::new(
   86|      0|                    io::ErrorKind::OutOfMemory,
   87|      0|                    format!(
   88|      0|                        "Reached the buffer maximal size of {}",
   89|      0|                        self.max_buffer_size
   90|      0|                    ),
   91|      0|                )
   92|      0|                .into());
   93|  3.26k|            }
   94|  3.26k|            let min_end = min(
   95|  3.26k|                self.input_buffer_end + MIN_BUFFER_SIZE,
   96|  3.26k|                self.max_buffer_size,
   97|  3.26k|            );
   98|  3.26k|            if self.input_buffer.len() < min_end {
   99|  2.67k|                self.input_buffer.resize(min_end, 0);
  100|  2.67k|            }
  101|  3.26k|            if self.input_buffer.len() < self.input_buffer.capacity() {
  102|    473|                // We keep extending to have as much space as available without reallocation
  103|    473|                self.input_buffer.resize(self.input_buffer.capacity(), 0);
  104|  2.78k|            }
  105|  3.26k|            let read = self
  106|  3.26k|                .read
  107|  3.26k|                .read(&mut self.input_buffer[self.input_buffer_end..])?;
  108|  3.26k|            self.input_buffer_end += read;
  109|  3.26k|            self.is_ending = read == 0;
  110|       |        }
  111|  69.1k|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser4readINtB2_18FromReadJsonReaderRShE3newCs2ZhSipuJ38Z_13oxigraph_fuzz:
   40|  2.20k|    pub const fn new(read: R) -> Self {
   41|  2.20k|        Self {
   42|  2.20k|            input_buffer: Vec::new(),
   43|  2.20k|            input_buffer_start: 0,
   44|  2.20k|            input_buffer_end: 0,
   45|  2.20k|            max_buffer_size: MAX_BUFFER_SIZE,
   46|  2.20k|            is_ending: false,
   47|  2.20k|            read,
   48|  2.20k|            parser: LowLevelJsonReader::new(),
   49|  2.20k|        }
   50|  2.20k|    }
_RNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_18LowLevelJsonReader3new:
  303|  2.20k|    pub const fn new() -> Self {
  304|  2.20k|        Self {
  305|  2.20k|            lexer: JsonLexer {
  306|  2.20k|                file_offset: 0,
  307|  2.20k|                file_line: 0,
  308|  2.20k|                file_start_of_last_line: 0,
  309|  2.20k|                file_start_of_last_token: 0,
  310|  2.20k|                is_start: true,
  311|  2.20k|            },
  312|  2.20k|            state_stack: Vec::new(),
  313|  2.20k|            max_state_stack_size: MAX_STATE_STACK_SIZE,
  314|  2.20k|            element_read: false,
  315|  2.20k|            buffered_event: None,
  316|  2.20k|        }
  317|  2.20k|    }
_RNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_18LowLevelJsonReader15read_next_event:
  328|  72.4k|    pub fn read_next_event<'a>(
  329|  72.4k|        &mut self,
  330|  72.4k|        input_buffer: &'a [u8],
  331|  72.4k|        is_ending: bool,
  332|  72.4k|    ) -> LowLevelJsonReaderResult<'a> {
  333|  72.4k|        if let Some(event) = self.buffered_event.take() {
  334|      0|            return LowLevelJsonReaderResult {
  335|      0|                consumed_bytes: 0,
  336|      0|                event: Some(Ok(event)),
  337|      0|            };
  338|  72.4k|        }
  339|  72.4k|        let start_file_offset = self.lexer.file_offset;
  340|   111k|        while let Some(token) = self.lexer.read_next_token(
  341|   111k|            &input_buffer[usize::try_from(self.lexer.file_offset - start_file_offset).unwrap()..],
  342|   111k|            is_ending,
  343|   111k|        ) {
  344|   107k|            let consumed_bytes = (self.lexer.file_offset - start_file_offset)
  345|   107k|                .try_into()
  346|   107k|                .unwrap();
  347|   107k|            match token {
  348|   107k|                Ok(token) => {
  349|   107k|                    let (event, error) = self.apply_new_token(token);
  350|   107k|                    let error = error.map(|e| {
  351|       |                        self.lexer.syntax_error(
  352|       |                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|       |                            e,
  354|       |                        )
  355|   107k|                    });
  356|   107k|                    if let Some(error) = error {
  357|    666|                        self.buffered_event = event.map(owned_event);
  358|    666|                        return LowLevelJsonReaderResult {
  359|    666|                            consumed_bytes,
  360|    666|                            event: Some(Err(error)),
  361|    666|                        };
  362|   106k|                    }
  363|   106k|                    if let Some(event) = event {
  364|  67.9k|                        return LowLevelJsonReaderResult {
  365|  67.9k|                            consumed_bytes,
  366|  67.9k|                            event: Some(Ok(event)),
  367|  67.9k|                        };
  368|  39.0k|                    }
  369|       |                }
  370|    158|                Err(error) => {
  371|    158|                    return LowLevelJsonReaderResult {
  372|    158|                        consumed_bytes,
  373|    158|                        event: Some(Err(error)),
  374|    158|                    }
  375|       |                }
  376|       |            }
  377|       |        }
  378|       |        LowLevelJsonReaderResult {
  379|  3.64k|            consumed_bytes: (self.lexer.file_offset - start_file_offset)
  380|  3.64k|                .try_into()
  381|  3.64k|                .unwrap(),
  382|  3.64k|            event: if is_ending {
  383|    386|                self.buffered_event = Some(JsonEvent::Eof);
  384|    386|                Some(Err(self.lexer.syntax_error(
  385|    386|                    self.lexer.file_offset..self.lexer.file_offset + 1,
  386|    386|                    "Unexpected end of file",
  387|    386|                )))
  388|       |            } else {
  389|  3.26k|                None
  390|       |            },
  391|       |        }
  392|  72.4k|    }
_RNCNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_18LowLevelJsonReader15read_next_event0B9_:
  350|    666|                    let error = error.map(|e| {
  351|    666|                        self.lexer.syntax_error(
  352|    666|                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|    666|                            e,
  354|    666|                        )
  355|    666|                    });
_RNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_18LowLevelJsonReader15apply_new_token:
  394|   120k|    fn apply_new_token<'a>(
  395|   120k|        &mut self,
  396|   120k|        token: JsonToken<'a>,
  397|   120k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  398|   120k|        match self.state_stack.pop() {
  399|       |            Some(JsonState::ObjectKeyOrEnd) => {
  400|  20.9k|                if token == JsonToken::ClosingCurlyBracket {
  401|  11.4k|                    (Some(JsonEvent::EndObject), None)
  402|       |                } else {
  403|  9.51k|                    if let Err(e) = self.push_state_stack(JsonState::ObjectKey) {
  404|      0|                        return (None, Some(e));
  405|  9.51k|                    }
  406|  9.51k|                    self.apply_new_token(token)
  407|       |                }
  408|       |            }
  409|       |            Some(JsonState::ObjectKey) => {
  410|  16.7k|                if token == JsonToken::ClosingCurlyBracket {
  411|      1|                    return (Some(JsonEvent::EndObject), Some("Trailing commas are not allowed".into()));
  412|  16.7k|                }
  413|  16.7k|                if let Err(e) = self.push_state_stack(JsonState::ObjectColon) {
  414|      0|                    return (None, Some(e));
  415|  16.7k|                }
  416|  16.7k|                if let JsonToken::String(key) = token {
  417|  16.6k|                    (Some(JsonEvent::ObjectKey(key)), None)
  418|       |                } else {
  419|    164|                    (None, Some("Object keys must be strings".into()))
  420|       |                }
  421|       |            }
  422|       |            Some(JsonState::ObjectColon) => {
  423|  16.5k|                if let Err(e) = self.push_state_stack(JsonState::ObjectValue) {
  424|      0|                    return (None, Some(e));
  425|  16.5k|                }
  426|  16.5k|                if token == JsonToken::Colon {
  427|  16.5k|                    (None, None)
  428|       |                } else {
  429|     63|                    let (event, _) = self.apply_new_token(token);
  430|     63|                    (event, Some("Object keys must be strings".into()))
  431|       |                }
  432|       |            }
  433|       |            Some(JsonState::ObjectValue) => {
  434|  16.5k|                if let Err(e) = self.push_state_stack(JsonState::ObjectCommaOrEnd) {
  435|      0|                    return (None, Some(e));
  436|  16.5k|                }
  437|  16.5k|                self.apply_new_token_for_value(token)
  438|       |            }
  439|  9.21k|            Some(JsonState::ObjectCommaOrEnd) => match token {
  440|       |                JsonToken::Comma => {
  441|  7.31k|                    (None, self.push_state_stack(JsonState::ObjectKey).err())
  442|       |                }
  443|  1.74k|                JsonToken::ClosingCurlyBracket => (Some(JsonEvent::EndObject), None),
  444|    158|                _ => (None, Some("Object values must be followed by a comma to add a new value or a curly bracket to end the object".into())),
  445|       |            },
  446|       |            Some(JsonState::ArrayValueOrEnd) =>{
  447|  3.38k|                if token == JsonToken::ClosingSquareBracket {
  448|    580|                    return (Some(JsonEvent::EndArray), None);
  449|  2.80k|                }
  450|  2.80k|                if let Err(e) = self.push_state_stack(JsonState::ArrayValue) {
  451|      0|                    return (None, Some(e));
  452|  2.80k|                }
  453|  2.80k|                self.apply_new_token(token)
  454|       |            }
  455|       |            Some(JsonState::ArrayValue) => {
  456|  18.1k|                if token == JsonToken::ClosingSquareBracket {
  457|      1|                    return (Some(JsonEvent::EndArray), Some("Trailing commas are not allowed".into()));
  458|  18.1k|                }
  459|  18.1k|                if let Err(e) = self.push_state_stack(JsonState::ArrayCommaOrEnd) {
  460|      0|                    return (None, Some(e));
  461|  18.1k|                }
  462|  18.1k|                self.apply_new_token_for_value(token)
  463|       |            }
  464|  16.7k|            Some(JsonState::ArrayCommaOrEnd) => match token {
  465|       |                JsonToken::Comma => {
  466|  15.1k|                    (None, self.push_state_stack(JsonState::ArrayValue).err())
  467|       |                }
  468|  1.43k|                JsonToken::ClosingSquareBracket => (Some(JsonEvent::EndArray), None),
  469|       |                _ => {
  470|    128|                    let _ = self.push_state_stack(JsonState::ArrayValue); // We already have an error
  471|    128|                    let (event, _) = self.apply_new_token(token);
  472|    128|                    (event, Some("Array values must be followed by a comma to add a new value or a squared bracket to end the array".into()))
  473|       |                }
  474|       |            }
  475|  1.81k|            None => if self.element_read {
  476|     23|                if token == JsonToken::Eof {
  477|     21|                    (Some(JsonEvent::Eof), None)
  478|       |                } else {
  479|      2|                    (None, Some("The JSON already contains one root element".into()))
  480|       |                }
  481|       |            } else {
  482|  1.79k|                self.element_read = true;
  483|  1.79k|                self.apply_new_token_for_value(token)
  484|       |            }
  485|       |        }
  486|   120k|    }
_RNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_18LowLevelJsonReader25apply_new_token_for_value:
  488|  36.4k|    fn apply_new_token_for_value<'a>(
  489|  36.4k|        &mut self,
  490|  36.4k|        token: JsonToken<'a>,
  491|  36.4k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  492|  36.4k|        match token {
  493|  3.39k|            JsonToken::OpeningSquareBracket => (
  494|  3.39k|                Some(JsonEvent::StartArray),
  495|  3.39k|                self.push_state_stack(JsonState::ArrayValueOrEnd).err(),
  496|  3.39k|            ),
  497|      1|            JsonToken::ClosingSquareBracket => (
  498|      1|                None,
  499|      1|                Some("Unexpected closing square bracket, no array to close".into()),
  500|      1|            ),
  501|  21.0k|            JsonToken::OpeningCurlyBracket => (
  502|  21.0k|                Some(JsonEvent::StartObject),
  503|  21.0k|                self.push_state_stack(JsonState::ObjectKeyOrEnd).err(),
  504|  21.0k|            ),
  505|      1|            JsonToken::ClosingCurlyBracket => (
  506|      1|                None,
  507|      1|                Some("Unexpected closing curly bracket, no array to close".into()),
  508|      1|            ),
  509|      2|            JsonToken::Comma => (None, Some("Unexpected comma, no values to separate".into())),
  510|      3|            JsonToken::Colon => (None, Some("Unexpected colon, no key to follow".into())),
  511|  10.5k|            JsonToken::String(string) => (Some(JsonEvent::String(string)), None),
  512|  1.05k|            JsonToken::Number(number) => (Some(JsonEvent::Number(number)), None),
  513|     46|            JsonToken::True => (Some(JsonEvent::Boolean(true)), None),
  514|     66|            JsonToken::False => (Some(JsonEvent::Boolean(false)), None),
  515|      2|            JsonToken::Null => (Some(JsonEvent::Null), None),
  516|    311|            JsonToken::Eof => (
  517|    311|                Some(JsonEvent::Eof),
  518|    311|                Some("Unexpected end of file, a value was expected".into()),
  519|    311|            ),
  520|       |        }
  521|  36.4k|    }
_RNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_18LowLevelJsonReader16push_state_stack:
  523|   127k|    fn push_state_stack(&mut self, state: JsonState) -> Result<(), String> {
  524|   127k|        self.check_stack_size()?;
  525|   127k|        self.state_stack.push(state);
  526|   127k|        Ok(())
  527|   127k|    }
_RNvMs0_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_18LowLevelJsonReader16check_stack_size:
  529|   127k|    fn check_stack_size(&self) -> Result<(), String> {
  530|   127k|        if self.state_stack.len() > self.max_state_stack_size {
  531|      0|            Err(format!(
  532|      0|                "Max stack size of {} reached on an object opening",
  533|      0|                self.max_state_stack_size
  534|      0|            ))
  535|       |        } else {
  536|   127k|            Ok(())
  537|       |        }
  538|   127k|    }
_RNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_9JsonLexer15read_next_token:
  578|   111k|    fn read_next_token<'a>(
  579|   111k|        &mut self,
  580|   111k|        mut input_buffer: &'a [u8],
  581|   111k|        is_ending: bool,
  582|   111k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  583|   111k|        // We remove BOM at the beginning
  584|   111k|        if self.is_start {
  585|  4.43k|            if input_buffer.len() < 3 && !is_ending {
  586|  2.23k|                return None;
  587|  2.20k|            }
  588|  2.20k|            self.is_start = false;
  589|  2.20k|            if input_buffer.starts_with(&[0xEF, 0xBB, 0xBF]) {
  590|      1|                input_buffer = &input_buffer[3..];
  591|      1|                self.file_offset += 3;
  592|  2.20k|            }
  593|   107k|        }
  594|       |
  595|       |        // We skip whitespaces
  596|   109k|        let mut i = 0;
  597|   111k|        while let Some(c) = input_buffer.get(i) {
  598|   110k|            match *c {
  599|  2.30k|                b' ' | b'\t' => {
  600|  2.30k|                    i += 1;
  601|  2.30k|                }
  602|    200|                b'\n' => {
  603|    200|                    i += 1;
  604|    200|                    self.file_line += 1;
  605|    200|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  606|    200|                }
  607|       |                b'\r' => {
  608|    210|                    i += 1;
  609|    210|                    if let Some(c) = input_buffer.get(i) {
  610|    196|                        if *c == b'\n' {
  611|      0|                            i += 1; // \r\n
  612|    196|                        }
  613|     14|                    } else if !is_ending {
  614|       |                        // We need an extra byte to check if followed by \n
  615|      6|                        i -= 1;
  616|      6|                        self.file_offset += u64::try_from(i).unwrap();
  617|      6|                        return None;
  618|      8|                    }
  619|    204|                    self.file_line += 1;
  620|    204|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  621|       |                }
  622|       |                _ => {
  623|   108k|                    break;
  624|       |                }
  625|       |            }
  626|       |        }
  627|   109k|        self.file_offset += u64::try_from(i).unwrap();
  628|   109k|        input_buffer = &input_buffer[i..];
  629|   109k|        self.file_start_of_last_token = self.file_offset;
  630|   109k|
  631|   109k|        if is_ending && input_buffer.is_empty() {
  632|    611|            return Some(Ok(JsonToken::Eof));
  633|   108k|        }
  634|   108k|
  635|   108k|        // we get the first character
  636|   108k|        match *input_buffer.first()? {
  637|       |            b'{' => {
  638|  21.0k|                self.file_offset += 1;
  639|  21.0k|                Some(Ok(JsonToken::OpeningCurlyBracket))
  640|       |            }
  641|       |            b'}' => {
  642|  13.1k|                self.file_offset += 1;
  643|  13.1k|                Some(Ok(JsonToken::ClosingCurlyBracket))
  644|       |            }
  645|       |            b'[' => {
  646|  3.39k|                self.file_offset += 1;
  647|  3.39k|                Some(Ok(JsonToken::OpeningSquareBracket))
  648|       |            }
  649|       |            b']' => {
  650|  2.02k|                self.file_offset += 1;
  651|  2.02k|                Some(Ok(JsonToken::ClosingSquareBracket))
  652|       |            }
  653|       |            b',' => {
  654|  22.5k|                self.file_offset += 1;
  655|  22.5k|                Some(Ok(JsonToken::Comma))
  656|       |            }
  657|       |            b':' => {
  658|  16.5k|                self.file_offset += 1;
  659|  16.5k|                Some(Ok(JsonToken::Colon))
  660|       |            }
  661|  28.0k|            b'"' => self.read_string(input_buffer),
  662|     63|            b't' => self.read_constant(input_buffer, is_ending, "true", JsonToken::True),
  663|     73|            b'f' => self.read_constant(input_buffer, is_ending, "false", JsonToken::False),
  664|     12|            b'n' => self.read_constant(input_buffer, is_ending, "null", JsonToken::Null),
  665|  1.16k|            b'-' | b'0'..=b'9' => self.read_number(input_buffer, is_ending),
  666|     52|            c => {
  667|     52|                self.file_offset += 1;
  668|     52|                Some(Err(self.syntax_error(
  669|     52|                    self.file_offset - 1..self.file_offset,
  670|     52|                    if c < 128 {
  671|     50|                        format!("Unexpected char: '{}'", char::from(c))
  672|       |                    } else {
  673|      2|                        format!("Unexpected byte: \\x{c:X}")
  674|       |                    },
  675|       |                )))
  676|       |            }
  677|       |        }
  678|   111k|    }
_RNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_9JsonLexer11read_string:
  680|  28.0k|    fn read_string<'a>(
  681|  28.0k|        &mut self,
  682|  28.0k|        input_buffer: &'a [u8],
  683|  28.0k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  684|  28.0k|        let mut error = None;
  685|  28.0k|        let mut string: Option<(String, usize)> = None;
  686|  28.0k|        let mut next_byte_offset = 1;
  687|       |        loop {
  688|   217k|            match *input_buffer.get(next_byte_offset)? {
  689|       |                b'"' => {
  690|       |                    // end of string
  691|  27.2k|                    let result = Some(if let Some(error) = error {
  692|     87|                        Err(error)
  693|  27.2k|                    } else if let Some((mut string, read_until)) = string {
  694|  1.64k|                        if read_until < next_byte_offset {
  695|  1.33k|                            let (str, e) = self.decode_utf8(
  696|  1.33k|                                &input_buffer[read_until..next_byte_offset],
  697|  1.33k|                                self.file_offset + u64::try_from(read_until).unwrap(),
  698|  1.33k|                            );
  699|  1.33k|                            error = error.or(e);
  700|  1.33k|                            string.push_str(&str);
  701|  1.33k|                        }
  702|  1.64k|                        if let Some(error) = error {
  703|      4|                            Err(error)
  704|       |                        } else {
  705|  1.64k|                            Ok(JsonToken::String(Cow::Owned(string)))
  706|       |                        }
  707|       |                    } else {
  708|  25.5k|                        let (string, error) = self
  709|  25.5k|                            .decode_utf8(&input_buffer[1..next_byte_offset], self.file_offset + 1);
  710|  25.5k|                        if let Some(error) = error {
  711|      1|                            Err(error)
  712|       |                        } else {
  713|  25.5k|                            Ok(JsonToken::String(string))
  714|       |                        }
  715|       |                    });
  716|  27.2k|                    self.file_offset += u64::try_from(next_byte_offset).unwrap() + 1;
  717|  27.2k|                    return result;
  718|       |                }
  719|       |                b'\\' => {
  720|       |                    // Escape sequences
  721|  14.4k|                    if string.is_none() {
  722|  2.37k|                        string = Some((String::new(), 1))
  723|  12.0k|                    }
  724|  14.4k|                    let (string, read_until) = string.as_mut().unwrap();
  725|  14.4k|                    if *read_until < next_byte_offset {
  726|  7.07k|                        let (str, e) = self.decode_utf8(
  727|  7.07k|                            &input_buffer[*read_until..next_byte_offset],
  728|  7.07k|                            self.file_offset + u64::try_from(*read_until).unwrap(),
  729|  7.07k|                        );
  730|  7.07k|                        error = error.or(e);
  731|  7.07k|                        string.push_str(&str);
  732|  7.35k|                    }
  733|  14.4k|                    next_byte_offset += 1;
  734|  14.4k|                    match *input_buffer.get(next_byte_offset)? {
  735|    940|                        b'"' => {
  736|    940|                            string.push('"');
  737|    940|                            next_byte_offset += 1;
  738|    940|                        }
  739|    676|                        b'\\' => {
  740|    676|                            string.push('\\');
  741|    676|                            next_byte_offset += 1;
  742|    676|                        }
  743|    346|                        b'/' => {
  744|    346|                            string.push('/');
  745|    346|                            next_byte_offset += 1;
  746|    346|                        }
  747|    707|                        b'b' => {
  748|    707|                            string.push('\u{8}');
  749|    707|                            next_byte_offset += 1;
  750|    707|                        }
  751|    286|                        b'f' => {
  752|    286|                            string.push('\u{C}');
  753|    286|                            next_byte_offset += 1;
  754|    286|                        }
  755|    324|                        b'n' => {
  756|    324|                            string.push('\n');
  757|    324|                            next_byte_offset += 1;
  758|    324|                        }
  759|    588|                        b'r' => {
  760|    588|                            string.push('\r');
  761|    588|                            next_byte_offset += 1;
  762|    588|                        }
  763|  1.01k|                        b't' => {
  764|  1.01k|                            string.push('\t');
  765|  1.01k|                            next_byte_offset += 1;
  766|  1.01k|                        }
  767|       |                        b'u' => {
  768|  8.49k|                            next_byte_offset += 1;
  769|  8.49k|                            let val = input_buffer.get(next_byte_offset..next_byte_offset + 4)?;
  770|  8.48k|                            next_byte_offset += 4;
  771|  8.48k|                            let code_point = match read_hexa_char(val) {
  772|  6.93k|                                Ok(cp) => cp,
  773|  1.55k|                                Err(e) => {
  774|  1.55k|                                    error = error.or_else(|| {
  775|       |                                        let pos = self.file_offset
  776|       |                                            + u64::try_from(next_byte_offset).unwrap();
  777|       |                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  1.55k|                                    });
  779|  1.55k|                                    char::REPLACEMENT_CHARACTER.into()
  780|       |                                }
  781|       |                            };
  782|  8.48k|                            if let Some(c) = char::from_u32(code_point) {
  783|  5.41k|                                string.push(c);
  784|  5.41k|                            } else {
  785|  3.07k|                                let high_surrogate = code_point;
  786|  3.07k|                                if !(0xD800..=0xDBFF).contains(&high_surrogate) {
  787|  2.72k|                                    error = error.or_else(|| {
  788|       |                                        let pos = self.file_offset
  789|       |                                            + u64::try_from(next_byte_offset).unwrap();
  790|       |                                        Some(self.syntax_error(
  791|       |                                            pos - 6..pos,
  792|       |                                            format!(
  793|       |                                                "\\u{:X} is not a valid high surrogate",
  794|       |                                                high_surrogate
  795|       |                                            ),
  796|       |                                        ))
  797|  2.72k|                                    });
  798|  2.72k|                                }
  799|  3.04k|                                let val =
  800|  3.07k|                                    input_buffer.get(next_byte_offset..next_byte_offset + 6)?;
  801|  3.04k|                                next_byte_offset += 6;
  802|  3.04k|                                if !val.starts_with(b"\\u") {
  803|  1.02k|                                    error = error.or_else(|| {
  804|       |                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|       |                                        Some(self.syntax_error(
  806|       |                                            pos - 6..pos,
  807|       |                                            format!(
  808|       |                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|       |                                                high_surrogate
  810|       |                                            )
  811|       |                                        ))
  812|  1.02k|                                    });
  813|  2.01k|                                }
  814|  3.04k|                                let low_surrogate = match read_hexa_char(&val[2..]) {
  815|  1.86k|                                    Ok(cp) => cp,
  816|  1.17k|                                    Err(e) => {
  817|  1.17k|                                        error = error.or_else(|| {
  818|       |                                            let pos = self.file_offset
  819|       |                                                + u64::try_from(next_byte_offset).unwrap();
  820|       |                                            Some(self.syntax_error(pos - 6..pos, e))
  821|  1.17k|                                        });
  822|  1.17k|                                        char::REPLACEMENT_CHARACTER.into()
  823|       |                                    }
  824|       |                                };
  825|  3.04k|                                if !(0xDC00..=0xDFFF).contains(&low_surrogate) {
  826|  1.78k|                                    error = error.or_else(|| {
  827|       |                                        let pos = self.file_offset
  828|       |                                            + u64::try_from(next_byte_offset).unwrap();
  829|       |                                        Some(self.syntax_error(
  830|       |                                            pos - 6..pos,
  831|       |                                            format!(
  832|       |                                                "\\u{:X} is not a valid low surrogate",
  833|       |                                                low_surrogate
  834|       |                                            ),
  835|       |                                        ))
  836|  1.78k|                                    });
  837|  1.78k|                                }
  838|  3.04k|                                let code_point = 0x10000
  839|  3.04k|                                    + ((high_surrogate & 0x03FF) << 10)
  840|  3.04k|                                    + (low_surrogate & 0x03FF);
  841|  3.04k|                                if let Some(c) = char::from_u32(code_point) {
  842|  3.04k|                                    string.push(c)
  843|      0|                                } else {
  844|      0|                                    string.push(char::REPLACEMENT_CHARACTER);
  845|      0|                                    error = error.or_else(|| {
  846|       |                                        let pos = self.file_offset
  847|       |                                            + u64::try_from(next_byte_offset).unwrap();
  848|       |                                        Some(self.syntax_error(
  849|       |                                            pos - 12..pos,
  850|       |                                            format!(
  851|       |                                                "\\u{:X}\\u{:X} is an invalid surrogate pair",
  852|       |                                                high_surrogate, low_surrogate
  853|       |                                            ),
  854|       |                                        ))
  855|      0|                                    });
  856|      0|                                }
  857|       |                            }
  858|       |                        }
  859|  1.00k|                        c => {
  860|  1.00k|                            next_byte_offset += 1;
  861|  1.00k|                            error = error.or_else(|| {
  862|       |                                let pos =
  863|       |                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|       |                                Some(self.syntax_error(
  865|       |                                    pos - 2..pos,
  866|       |                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|       |                                ))
  868|  1.00k|                            });
  869|  1.00k|                            string.push(char::REPLACEMENT_CHARACTER);
  870|  1.00k|                        }
  871|       |                    }
  872|  14.3k|                    *read_until = next_byte_offset;
  873|       |                }
  874|   175k|                c @ (0..=0x1F) => {
  875|  1.21k|                    error = error.or_else(|| {
  876|       |                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|       |                        Some(self.syntax_error(
  878|       |                            pos..pos + 1,
  879|       |                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|       |                        ))
  881|  1.21k|                    });
  882|  1.21k|                    next_byte_offset += 1;
  883|  1.21k|                }
  884|   174k|                _ => {
  885|   174k|                    next_byte_offset += 1;
  886|   174k|                }
  887|       |            }
  888|       |        }
  889|  28.0k|    }
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_string0B9_:
  774|     78|                                    error = error.or_else(|| {
  775|     78|                                        let pos = self.file_offset
  776|     78|                                            + u64::try_from(next_byte_offset).unwrap();
  777|     78|                                        Some(self.syntax_error(pos - 4..pos, e))
  778|     78|                                    });
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_strings_0B9_:
  787|    117|                                    error = error.or_else(|| {
  788|    117|                                        let pos = self.file_offset
  789|    117|                                            + u64::try_from(next_byte_offset).unwrap();
  790|    117|                                        Some(self.syntax_error(
  791|    117|                                            pos - 6..pos,
  792|    117|                                            format!(
  793|    117|                                                "\\u{:X} is not a valid high surrogate",
  794|    117|                                                high_surrogate
  795|    117|                                            ),
  796|    117|                                        ))
  797|    117|                                    });
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_strings0_0B9_:
  803|      8|                                    error = error.or_else(|| {
  804|      8|                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|      8|                                        Some(self.syntax_error(
  806|      8|                                            pos - 6..pos,
  807|      8|                                            format!(
  808|      8|                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|      8|                                                high_surrogate
  810|      8|                                            )
  811|      8|                                        ))
  812|      8|                                    });
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_strings1_0B9_:
  817|     11|                                        error = error.or_else(|| {
  818|     11|                                            let pos = self.file_offset
  819|     11|                                                + u64::try_from(next_byte_offset).unwrap();
  820|     11|                                            Some(self.syntax_error(pos - 6..pos, e))
  821|     11|                                        });
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_strings2_0B9_:
  826|      6|                                    error = error.or_else(|| {
  827|      6|                                        let pos = self.file_offset
  828|      6|                                            + u64::try_from(next_byte_offset).unwrap();
  829|      6|                                        Some(self.syntax_error(
  830|      6|                                            pos - 6..pos,
  831|      6|                                            format!(
  832|      6|                                                "\\u{:X} is not a valid low surrogate",
  833|      6|                                                low_surrogate
  834|      6|                                            ),
  835|      6|                                        ))
  836|      6|                                    });
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_strings4_0B9_:
  861|     73|                            error = error.or_else(|| {
  862|     73|                                let pos =
  863|     73|                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|     73|                                Some(self.syntax_error(
  865|     73|                                    pos - 2..pos,
  866|     73|                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|     73|                                ))
  868|     73|                            });
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_strings5_0B9_:
  875|     83|                    error = error.or_else(|| {
  876|     83|                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|     83|                        Some(self.syntax_error(
  878|     83|                            pos..pos + 1,
  879|     83|                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|     83|                        ))
  881|     83|                    });
_RNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_9JsonLexer13read_constant:
  891|    148|    fn read_constant(
  892|    148|        &mut self,
  893|    148|        input_buffer: &[u8],
  894|    148|        is_ending: bool,
  895|    148|        expected: &str,
  896|    148|        value: JsonToken<'static>,
  897|    148|    ) -> Option<Result<JsonToken<'static>, SyntaxError>> {
  898|    148|        if input_buffer.get(..expected.len())? == expected.as_bytes() {
  899|    114|            self.file_offset += u64::try_from(expected.len()).unwrap();
  900|    114|            return Some(Ok(value));
  901|     15|        }
  902|     15|        let ascii_chars = input_buffer
  903|     15|            .iter()
  904|     15|            .take_while(|c| c.is_ascii_alphabetic())
  905|     15|            .count();
  906|     15|        if ascii_chars == input_buffer.len() && !is_ending {
  907|      6|            return None; // We might read a bigger token
  908|      9|        }
  909|      9|        let read = max(1, ascii_chars); // We want to consume at least a byte
  910|      9|        let start_offset = self.file_offset;
  911|      9|        self.file_offset += u64::try_from(read).unwrap();
  912|      9|        Some(Err(self.syntax_error(
  913|      9|            start_offset..self.file_offset,
  914|      9|            format!("{} expected", expected),
  915|      9|        )))
  916|    148|    }
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer13read_constant0B9_:
  904|    225|            .take_while(|c| c.is_ascii_alphabetic())
_RNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_9JsonLexer11read_number:
  918|  1.16k|    fn read_number<'a>(
  919|  1.16k|        &mut self,
  920|  1.16k|        input_buffer: &'a [u8],
  921|  1.16k|        is_ending: bool,
  922|  1.16k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  923|  1.16k|        let mut next_byte_offset = 0;
  924|  1.16k|        if *input_buffer.get(next_byte_offset)? == b'-' {
  925|     67|            next_byte_offset += 1;
  926|  1.09k|        }
  927|       |        // integer starting with first bytes
  928|  1.16k|        match *input_buffer.get(next_byte_offset)? {
  929|    150|            b'0' => {
  930|    150|                next_byte_offset += 1;
  931|    150|            }
  932|  1.00k|            b'1'..=b'9' => {
  933|  1.00k|                next_byte_offset += 1;
  934|  1.00k|                next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  935|       |            }
  936|      1|            c => {
  937|      1|                next_byte_offset += 1;
  938|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  939|      1|                return Some(Err(self.syntax_error(
  940|      1|                    self.file_offset - 1..self.file_offset,
  941|      1|                    format!("A number is not allowed to start with '{}'", char::from(c)),
  942|      1|                )));
  943|       |            }
  944|       |        }
  945|       |
  946|       |        // Dot
  947|  1.13k|        if input_buffer.get(next_byte_offset).map_or_else(
  948|  1.13k|            || if is_ending { Some(None) } else { None },
  949|  1.13k|            |c| Some(Some(*c)),
  950|  1.13k|        )? == Some(b'.')
  951|       |        {
  952|     98|            next_byte_offset += 1;
  953|     98|            let c = *input_buffer.get(next_byte_offset)?;
  954|     91|            next_byte_offset += 1;
  955|     91|            if !c.is_ascii_digit() {
  956|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  957|      1|                return Some(Err(self.syntax_error(
  958|      1|                    self.file_offset - 1..self.file_offset,
  959|      1|                    format!(
  960|      1|                        "A number fractional part must start with a digit and not '{}'",
  961|      1|                        char::from(c)
  962|      1|                    ),
  963|      1|                )));
  964|     90|            }
  965|     90|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  966|  1.02k|        }
  967|       |
  968|       |        // Exp
  969|  1.10k|        let c = input_buffer.get(next_byte_offset).map_or_else(
  970|  1.10k|            || if is_ending { Some(None) } else { None },
  971|  1.10k|            |c| Some(Some(*c)),
  972|  1.10k|        )?;
  973|  1.10k|        if c == Some(b'e') || c == Some(b'E') {
  974|    366|            next_byte_offset += 1;
  975|    366|            match *input_buffer.get(next_byte_offset)? {
  976|       |                b'-' | b'+' => {
  977|    270|                    next_byte_offset += 1;
  978|    270|                    let c = *input_buffer.get(next_byte_offset)?;
  979|    258|                    next_byte_offset += 1;
  980|    258|                    if !c.is_ascii_digit() {
  981|      2|                        self.file_offset += u64::try_from(next_byte_offset).unwrap();
  982|      2|                        return Some(Err(self.syntax_error(
  983|      2|                            self.file_offset - 1..self.file_offset,
  984|      2|                            format!(
  985|      2|                                "A number exponential part must contain at least a digit, '{}' found",
  986|      2|                                char::from(c)
  987|      2|                            ),
  988|      2|                        )));
  989|    256|                    }
  990|       |                }
  991|     88|                b'0'..=b'9' => {
  992|     88|                    next_byte_offset += 1;
  993|     88|                }
  994|      1|                c => {
  995|      1|                    next_byte_offset += 1;
  996|      1|                    self.file_offset += u64::try_from(next_byte_offset).unwrap();
  997|      1|                    return Some(Err(self.syntax_error(
  998|      1|                        self.file_offset - 1..self.file_offset,
  999|      1|                        format!(
 1000|      1|                            "A number exponential part must start with +, - or a digit, '{}' found",
 1001|      1|                            char::from(c)
 1002|      1|                        ),
 1003|      1|                    )));
 1004|       |                }
 1005|       |            }
 1006|    344|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
 1007|    743|        }
 1008|  1.07k|        self.file_offset += u64::try_from(next_byte_offset).unwrap();
 1009|  1.07k|        Some(Ok(JsonToken::Number(Cow::Borrowed(
 1010|  1.07k|            str::from_utf8(&input_buffer[..next_byte_offset]).unwrap(),
 1011|  1.07k|        ))))
 1012|  1.16k|    }
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_number0B9_:
  948|     41|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_numbers_0B9_:
  949|  1.09k|            |c| Some(Some(*c)),
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_numbers0_0B9_:
  970|     43|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB7_9JsonLexer11read_numbers1_0B9_:
  971|  1.06k|            |c| Some(Some(*c)),
_RNvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_9JsonLexer11decode_utf8:
 1014|  33.9k|    fn decode_utf8<'a>(
 1015|  33.9k|        &self,
 1016|  33.9k|        input_buffer: &'a [u8],
 1017|  33.9k|        start_position: u64,
 1018|  33.9k|    ) -> (Cow<'a, str>, Option<SyntaxError>) {
 1019|  33.9k|        match str::from_utf8(input_buffer) {
 1020|  32.1k|            Ok(str) => (Cow::Borrowed(str), None),
 1021|  1.82k|            Err(e) => (
 1022|  1.82k|                String::from_utf8_lossy(input_buffer),
 1023|  1.82k|                Some({
 1024|  1.82k|                    let pos = start_position + u64::try_from(e.valid_up_to()).unwrap();
 1025|  1.82k|                    self.syntax_error(pos..pos + 1, format!("Invalid UTF-8: {e}"))
 1026|  1.82k|                }),
 1027|  1.82k|            ),
 1028|       |        }
 1029|  33.9k|    }
_RINvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB6_9JsonLexer12syntax_errorNtNtCsbqtYJIZlK4w_5alloc6string6StringEB8_:
 1031|  2.93k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  2.93k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  2.93k|        SyntaxError {
 1034|  2.93k|            location: TextPosition {
 1035|  2.93k|                line: self.file_line,
 1036|  2.93k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  2.93k|                offset: start_file_offset,
 1038|  2.93k|            }..TextPosition {
 1039|  2.93k|                line: self.file_line,
 1040|  2.93k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  2.93k|                offset: file_offset.end,
 1042|  2.93k|            },
 1043|  2.93k|            message: message.into(),
 1044|  2.93k|        }
 1045|  2.93k|    }
_RINvMs1_NtCs4KG2xUOtNUk_17json_event_parser4readNtB6_9JsonLexer12syntax_errorReEB8_:
 1031|    386|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|    386|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|    386|        SyntaxError {
 1034|    386|            location: TextPosition {
 1035|    386|                line: self.file_line,
 1036|    386|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|    386|                offset: start_file_offset,
 1038|    386|            }..TextPosition {
 1039|    386|                line: self.file_line,
 1040|    386|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|    386|                offset: file_offset.end,
 1042|    386|            },
 1043|    386|            message: message.into(),
 1044|    386|        }
 1045|    386|    }
_RNvNtCs4KG2xUOtNUk_17json_event_parser4read14read_hexa_char:
 1048|  11.5k|fn read_hexa_char(input: &[u8]) -> Result<u32, String> {
 1049|  11.5k|    let mut value = 0;
 1050|  41.9k|    for c in input.iter().copied() {
 1051|  41.9k|        value = value * 16
 1052|  41.9k|            + match c {
 1053|  41.4k|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
 1054|  6.28k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
 1055|  15.1k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
 1056|       |                _ => {
 1057|  2.72k|                    return Err(format!(
 1058|  2.72k|                        "Unexpected character in a unicode escape: '{}'",
 1059|  2.72k|                        char::from(c)
 1060|  2.72k|                    ))
 1061|       |                }
 1062|       |            }
 1063|       |    }
 1064|  8.80k|    Ok(value)
 1065|  11.5k|}
_RNvNtCs4KG2xUOtNUk_17json_event_parser4read11read_digits:
 1067|  1.44k|fn read_digits(input_buffer: &[u8], is_ending: bool) -> Option<usize> {
 1068|  1.44k|    let count = input_buffer
 1069|  1.44k|        .iter()
 1070|  1.44k|        .take_while(|c| c.is_ascii_digit())
 1071|  1.44k|        .count();
 1072|  1.44k|    if count == input_buffer.len() && !is_ending {
 1073|     44|        return None;
 1074|  1.39k|    }
 1075|  1.39k|    Some(count)
 1076|  1.44k|}
_RNCNvNtCs4KG2xUOtNUk_17json_event_parser4read11read_digits0B5_:
 1070|  2.42k|        .take_while(|c| c.is_ascii_digit())
_RNvNtCs4KG2xUOtNUk_17json_event_parser4read11owned_event:
 1078|    335|fn owned_event(event: JsonEvent<'_>) -> JsonEvent<'static> {
 1079|    335|    match event {
 1080|     10|        JsonEvent::String(s) => JsonEvent::String(s.into_owned().into()),
 1081|      2|        JsonEvent::Number(n) => JsonEvent::Number(n.into_owned().into()),
 1082|      5|        JsonEvent::Boolean(b) => JsonEvent::Boolean(b),
 1083|      1|        JsonEvent::Null => JsonEvent::Null,
 1084|      1|        JsonEvent::StartArray => JsonEvent::StartArray,
 1085|      1|        JsonEvent::EndArray => JsonEvent::EndArray,
 1086|      3|        JsonEvent::StartObject => JsonEvent::StartObject,
 1087|      1|        JsonEvent::EndObject => JsonEvent::EndObject,
 1088|      0|        JsonEvent::ObjectKey(k) => JsonEvent::ObjectKey(k.into_owned().into()),
 1089|    311|        JsonEvent::Eof => JsonEvent::Eof,
 1090|       |    }
 1091|    335|}
_RNvXsl_NtCs4KG2xUOtNUk_17json_event_parser4readNtB5_9JsonTokenNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqB7_:
  553|  75.8k|#[derive(Eq, PartialEq, Clone, Debug)]

_RINvMs_NtCs4KG2xUOtNUk_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  121|  12.3k|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|  12.3k|        match event {
  123|    949|            JsonEvent::String(s) => {
  124|    949|                self.before_value(&mut write)?;
  125|    949|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      0|            JsonEvent::Boolean(b) => {
  132|      0|                self.before_value(&mut write)?;
  133|      0|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|    280|                self.before_value(&mut write)?;
  141|    280|                self.state_stack.push(JsonState::OpenArray);
  142|    280|                write.write_all(b"[")
  143|       |            }
  144|    280|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|    280|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|  5.15k|                self.before_value(&mut write)?;
  162|  5.15k|                self.state_stack.push(JsonState::OpenObject);
  163|  5.15k|                write.write_all(b"{")
  164|       |            }
  165|  5.15k|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|  5.15k|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|    560|            JsonEvent::ObjectKey(key) => {
  182|    560|                match self.state_stack.pop() {
  183|    420|                    Some(JsonState::OpenObject) => (),
  184|    140|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|    560|                self.state_stack.push(JsonState::ContinuationObject);
  193|    560|                self.state_stack.push(JsonState::ObjectValue);
  194|    560|                write_escaped_json_string(&key, &mut write)?;
  195|    560|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|  12.3k|    }
_RINvMs_NtCs4KG2xUOtNUk_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  121|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|     14|        match event {
  123|      0|            JsonEvent::String(s) => {
  124|      0|                self.before_value(&mut write)?;
  125|      0|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      2|            JsonEvent::Boolean(b) => {
  132|      2|                self.before_value(&mut write)?;
  133|      2|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|      0|                self.before_value(&mut write)?;
  141|      0|                self.state_stack.push(JsonState::OpenArray);
  142|      0|                write.write_all(b"[")
  143|       |            }
  144|      0|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|      0|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|      4|                self.before_value(&mut write)?;
  162|      4|                self.state_stack.push(JsonState::OpenObject);
  163|      4|                write.write_all(b"{")
  164|       |            }
  165|      4|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|      4|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|      4|            JsonEvent::ObjectKey(key) => {
  182|      4|                match self.state_stack.pop() {
  183|      2|                    Some(JsonState::OpenObject) => (),
  184|      2|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|      4|                self.state_stack.push(JsonState::ContinuationObject);
  193|      4|                self.state_stack.push(JsonState::ObjectValue);
  194|      4|                write_escaped_json_string(&key, &mut write)?;
  195|      4|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|     14|    }
_RINvMs_NtCs4KG2xUOtNUk_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  204|  6.38k|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|  6.38k|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|    243|                self.state_stack.push(JsonState::ContinuationArray);
  208|    243|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|  5.44k|                self.state_stack.push(JsonState::ContinuationArray);
  212|  5.44k|                write.write_all(b",")?;
  213|  5.44k|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|    560|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|    140|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|    140|                    self.element_written = true;
  232|    140|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|  6.38k|    }
_RINvMs_NtCs4KG2xUOtNUk_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  204|      6|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|      6|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|      0|                self.state_stack.push(JsonState::ContinuationArray);
  208|      0|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|      0|                self.state_stack.push(JsonState::ContinuationArray);
  212|      0|                write.write_all(b",")?;
  213|      0|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|      4|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|      2|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|      2|                    self.element_written = true;
  232|      2|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|      6|    }
_RINvNtCs4KG2xUOtNUk_17json_event_parser5write25write_escaped_json_stringQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  263|    949|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|    949|    write.write_all(b"\"")?;
  265|    949|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  4.00k|    for c in s.chars() {
  267|  4.00k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  4.00k|            c => {
  271|  4.00k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  4.00k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|    949|    write.write_all(b"\"")?;
  295|    949|    Ok(())
  296|    949|}
_RINvNtCs4KG2xUOtNUk_17json_event_parser5write25write_escaped_json_stringQQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  263|    560|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|    560|    write.write_all(b"\"")?;
  265|    560|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  3.22k|    for c in s.chars() {
  267|  3.22k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  3.22k|            c => {
  271|  3.22k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  3.22k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|    560|    write.write_all(b"\"")?;
  295|    560|    Ok(())
  296|    560|}
_RINvNtCs4KG2xUOtNUk_17json_event_parser5write25write_escaped_json_stringQQQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  263|      4|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|      4|    write.write_all(b"\"")?;
  265|      4|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|     22|    for c in s.chars() {
  267|     22|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|     22|            c => {
  271|     22|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|     22|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|      4|    write.write_all(b"\"")?;
  295|      4|    Ok(())
  296|      4|}
_RNvMNtCs4KG2xUOtNUk_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE11write_eventCs2ZhSipuJ38Z_13oxigraph_fuzz:
   33|  12.3k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|  12.3k|        self.writer.write_event(event, &mut self.write)
   35|  12.3k|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE3newCs2ZhSipuJ38Z_13oxigraph_fuzz:
   26|    140|    pub const fn new(write: W) -> Self {
   27|    140|        Self {
   28|    140|            write,
   29|    140|            writer: LowLevelJsonWriter::new(),
   30|    140|        }
   31|    140|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE6finishCs2ZhSipuJ38Z_13oxigraph_fuzz:
   37|    140|    pub fn finish(self) -> Result<W> {
   38|    140|        self.writer.validate_eof()?;
   39|    140|        Ok(self.write)
   40|    140|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE11write_eventCs2ZhSipuJ38Z_13oxigraph_fuzz:
   33|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|     14|        self.writer.write_event(event, &mut self.write)
   35|     14|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE3newCs2ZhSipuJ38Z_13oxigraph_fuzz:
   26|      2|    pub const fn new(write: W) -> Self {
   27|      2|        Self {
   28|      2|            write,
   29|      2|            writer: LowLevelJsonWriter::new(),
   30|      2|        }
   31|      2|    }
_RNvMNtCs4KG2xUOtNUk_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE6finishCs2ZhSipuJ38Z_13oxigraph_fuzz:
   37|      2|    pub fn finish(self) -> Result<W> {
   38|      2|        self.writer.validate_eof()?;
   39|      2|        Ok(self.write)
   40|      2|    }
_RNvMs_NtCs4KG2xUOtNUk_17json_event_parser5writeNtB4_18LowLevelJsonWriter3new:
  114|    142|    pub const fn new() -> Self {
  115|    142|        Self {
  116|    142|            state_stack: Vec::new(),
  117|    142|            element_written: false,
  118|    142|        }
  119|    142|    }
_RNvMs_NtCs4KG2xUOtNUk_17json_event_parser5writeNtB4_18LowLevelJsonWriter12validate_eof:
  238|    142|    fn validate_eof(&self) -> Result<()> {
  239|    142|        if !self.state_stack.is_empty() {
  240|      0|            return Err(Error::new(
  241|      0|                ErrorKind::InvalidInput,
  242|      0|                "The written JSON is not balanced: an object or an array has not been closed",
  243|      0|            ));
  244|    142|        }
  245|    142|        if !self.element_written {
  246|      0|            return Err(Error::new(
  247|      0|                ErrorKind::InvalidInput,
  248|      0|                "A JSON file can't be empty",
  249|      0|            ));
  250|    142|        }
  251|    142|        Ok(())
  252|    142|    }

rust_fuzzer_test_input:
  209|  2.05k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  2.05k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  2.05k|                }
  223|  2.05k|
  224|  2.05k|                __libfuzzer_sys_run(bytes);
  225|  2.05k|                0
  226|  2.05k|            }
_RNvNvCs2RIzVrDlsat_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  2.05k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  2.05k|                $body
  243|  2.05k|            }
LLVMFuzzerTestOneInput:
   58|  2.05k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.05k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.05k|    });
   63|  2.05k|
   64|  2.05k|    match test_input {
   65|  2.05k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.05k|}
_RNCNvCssYmL8WCiQ9_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.05k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.05k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.05k|        rust_fuzzer_test_input(data_slice)
   62|  2.05k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCs6nwz1C93WHf_9once_cell3impINtB5_8OnceCellNtNtCsbqtYJIZlK4w_5alloc6string6StringE14is_initializedCssYmL8WCiQ9_13libfuzzer_sys:
   49|  2.05k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.05k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.05k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.05k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.05k|        // `SeqCst` operations on the slow path.
   54|  2.05k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.05k|    }

_RNvMs4_NtCs6nwz1C93WHf_9once_cell4syncINtB5_8OnceCellNtNtCsbqtYJIZlK4w_5alloc6string6StringE3getCssYmL8WCiQ9_13libfuzzer_sys:
  963|  2.05k|        pub fn get(&self) -> Option<&T> {
  964|  2.05k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.05k|                None
  969|       |            }
  970|  2.05k|        }

_RINvMs11_CshZH4L1BJXsw_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECse77hlhKzJ8Y_5oxrdf:
 1567|     89|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1568|     89|        Err(IriParseError { kind })
 1569|     89|    }
_RNCNvMs11_CshZH4L1BJXsw_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cse77hlhKzJ8Y_5oxrdf:
 1550|  1.31k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_CshZH4L1BJXsw_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cse77hlhKzJ8Y_5oxrdf:
 1551|  1.30k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE10into_innerCse77hlhKzJ8Y_5oxrdf:
  191|  2.83k|    pub fn into_inner(self) -> T {
  192|  2.83k|        self.iri
  193|  2.83k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE11is_absoluteCse77hlhKzJ8Y_5oxrdf:
  205|  3.26k|    pub fn is_absolute(&self) -> bool {
  206|  3.26k|        self.positions.scheme_end != 0
  207|  3.26k|    }
_RNvMCshZH4L1BJXsw_5oxiriINtB2_6IriRefNtNtCsbqtYJIZlK4w_5alloc6string6StringE5parseCse77hlhKzJ8Y_5oxrdf:
   58|  3.35k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  3.35k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  3.26k|        Ok(Self { iri, positions })
   61|  3.35k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCse77hlhKzJ8Y_5oxrdf:
 1366|  1.52k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1367|  1.52k|        if self.input.starts_with('[') {
 1368|       |            // IP v6
 1369|     39|            let start_position = self.input.position;
 1370|  1.38k|            while let Some(c) = self.input.next() {
 1371|  1.34k|                self.output.push(c);
 1372|  1.34k|                if c == ']' {
 1373|      3|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1374|      3|                    if !UNCHECKED {
 1375|      3|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1376|      3|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1377|      0|                        }
 1378|      0|                    }
 1379|       |
 1380|      0|                    let c = self.input.next();
 1381|      0|                    return match c {
 1382|       |                        Some(':') => {
 1383|      0|                            self.output.push(':');
 1384|      0|                            self.parse_port()
 1385|       |                        }
 1386|       |                        None | Some('/') | Some('?') | Some('#') => {
 1387|      0|                            self.output_positions.authority_end = self.output.len();
 1388|      0|                            self.parse_path_start(c)
 1389|       |                        }
 1390|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1391|       |                    };
 1392|  1.34k|                }
 1393|       |            }
 1394|     36|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1395|       |        } else {
 1396|       |            // Other host
 1397|  4.24k|            loop {
 1398|  4.24k|                let c = self.input.next();
 1399|  4.24k|                match c {
 1400|       |                    Some(':') => {
 1401|    828|                        self.output.push(':');
 1402|    828|                        return self.parse_port();
 1403|       |                    }
 1404|       |                    None | Some('/') | Some('?') | Some('#') => {
 1405|    656|                        self.output_positions.authority_end = self.output.len();
 1406|    656|                        return self.parse_path_start(c);
 1407|       |                    }
 1408|  2.76k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1409|       |                }
 1410|       |            }
 1411|       |        }
 1412|  1.52k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCse77hlhKzJ8Y_5oxrdf:
 1457|  2.32k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1458|  8.41k|        loop {
 1459|  8.41k|            let c = self.input.next();
 1460|  8.41k|            match c {
 1461|       |                None | Some('/') | Some('?') | Some('#') => {
 1462|  3.15k|                    if self.output.as_str().ends_with("/..") {
 1463|      0|                        self.remove_last_segment();
 1464|      0|                        self.remove_last_segment();
 1465|      0|                        self.output.push('/');
 1466|  3.15k|                    } else if self.output.as_str().ends_with("/.") {
 1467|      0|                        self.remove_last_segment();
 1468|      0|                        self.output.push('/');
 1469|  3.15k|                    } else if c == Some('/') {
 1470|    857|                        self.output.push('/');
 1471|  2.30k|                    }
 1472|       |
 1473|  3.15k|                    if c == Some('?') {
 1474|    245|                        self.output_positions.path_end = self.output.len();
 1475|    245|                        self.output.push('?');
 1476|    245|                        return self.parse_query();
 1477|  2.91k|                    } else if c == Some('#') {
 1478|    303|                        self.output_positions.path_end = self.output.len();
 1479|    303|                        self.output_positions.query_end = self.output.len();
 1480|    303|                        self.output.push('#');
 1481|    303|                        return self.parse_fragment();
 1482|  2.61k|                    } else if c.is_none() {
 1483|  1.75k|                        self.output_positions.path_end = self.output.len();
 1484|  1.75k|                        self.output_positions.query_end = self.output.len();
 1485|  1.75k|                        return Ok(());
 1486|    857|                    }
 1487|       |                }
 1488|  5.25k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1489|       |            }
 1490|       |        }
 1491|  2.32k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCse77hlhKzJ8Y_5oxrdf:
 1414|    828|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1415|  1.08k|        loop {
 1416|  1.08k|            let c = self.input.next();
 1417|    838|            match c {
 1418|    838|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1419|       |                Some('/') | Some('?') | Some('#') | None => {
 1420|    813|                    self.output_positions.authority_end = self.output.len();
 1421|    813|                    return self.parse_path_start(c);
 1422|       |                }
 1423|     15|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1424|       |            }
 1425|       |        }
 1426|    828|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCse77hlhKzJ8Y_5oxrdf:
 1547|  1.32k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1548|  1.32k|        let c1 = self.input.next();
 1549|  1.32k|        let c2 = self.input.next();
 1550|  1.32k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1551|  1.30k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1552|       |        {
 1553|  1.30k|            self.output.push('%');
 1554|  1.30k|            self.output.push(c1.unwrap());
 1555|  1.30k|            self.output.push(c2.unwrap());
 1556|  1.30k|            Ok(())
 1557|       |        } else {
 1558|     26|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1559|     26|                Some('%'),
 1560|     26|                c1,
 1561|     26|                c2,
 1562|     26|            ]))
 1563|       |        }
 1564|  1.32k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCse77hlhKzJ8Y_5oxrdf:
 1493|    336|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1494|  2.80k|        while let Some(c) = self.input.next() {
 1495|  2.48k|            if c == '#' {
 1496|     12|                self.output_positions.query_end = self.output.len();
 1497|     12|                self.output.push('#');
 1498|     12|                return self.parse_fragment();
 1499|       |            } else {
 1500|  2.46k|                self.read_url_query_codepoint_or_echar(c)?
 1501|       |            }
 1502|       |        }
 1503|    320|        self.output_positions.query_end = self.output.len();
 1504|    320|        Ok(())
 1505|    336|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCse77hlhKzJ8Y_5oxrdf:
 1220|  2.90k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1221|  9.43k|        loop {
 1222|  9.43k|            let c = self.input.next();
 1223|  9.40k|            match c {
 1224|  9.40k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1225|  6.53k|                    self.output.push(c)
 1226|       |                }
 1227|       |                Some(':') => {
 1228|  2.83k|                    self.output.push(':');
 1229|  2.83k|                    self.output_positions.scheme_end = self.output.len();
 1230|  2.83k|                    self.input_scheme_end = self.input.position;
 1231|  2.83k|                    return if self.input.starts_with('/') {
 1232|  1.76k|                        self.input.next();
 1233|  1.76k|                        self.output.push('/');
 1234|  1.76k|                        self.parse_path_or_authority()
 1235|       |                    } else {
 1236|  1.07k|                        self.output_positions.authority_end = self.output.len();
 1237|  1.07k|                        self.parse_path()
 1238|       |                    };
 1239|       |                }
 1240|       |                _ => {
 1241|     67|                    self.input = ParserInput {
 1242|     67|                        value: self.iri.chars(),
 1243|     67|                        position: 0,
 1244|     67|                    }; // reset
 1245|     67|                    self.output.clear();
 1246|     67|                    return self.parse_relative();
 1247|       |                }
 1248|       |            }
 1249|       |        }
 1250|  2.90k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCse77hlhKzJ8Y_5oxrdf:
 1507|    700|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1508|  2.55k|        while let Some(c) = self.input.next() {
 1509|  1.86k|            self.read_url_codepoint_or_echar(c)?
 1510|       |        }
 1511|    696|        Ok(())
 1512|    700|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCse77hlhKzJ8Y_5oxrdf:
 1263|    517|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1264|    517|        if let Some(base) = self.base {
 1265|      0|            match self.input.front() {
 1266|       |                None => {
 1267|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1268|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1269|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1270|      0|                    self.output_positions.path_end = base.positions.path_end;
 1271|      0|                    self.output_positions.query_end = base.positions.query_end;
 1272|      0|                    Ok(())
 1273|       |                }
 1274|       |                Some('/') => {
 1275|      0|                    self.input.next();
 1276|      0|                    self.parse_relative_slash(&base)
 1277|       |                }
 1278|       |                Some('?') => {
 1279|      0|                    self.input.next();
 1280|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1281|      0|                    self.output.push('?');
 1282|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1283|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1284|      0|                    self.output_positions.path_end = base.positions.path_end;
 1285|      0|                    self.parse_query()
 1286|       |                }
 1287|       |                Some('#') => {
 1288|      0|                    self.input.next();
 1289|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1290|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1291|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1292|      0|                    self.output_positions.path_end = base.positions.path_end;
 1293|      0|                    self.output_positions.query_end = base.positions.query_end;
 1294|      0|                    self.output.push('#');
 1295|      0|                    self.parse_fragment()
 1296|       |                }
 1297|       |                _ => {
 1298|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1299|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1300|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1301|      0|                    self.output_positions.path_end = base.positions.path_end;
 1302|      0|                    self.remove_last_segment();
 1303|      0|                    if self.output.len() > base.positions.scheme_end {
 1304|      0|                        // We have some path or authority, we keep a base '/'
 1305|      0|                        self.output.push('/');
 1306|      0|                    }
 1307|      0|                    self.parse_path()
 1308|       |                }
 1309|       |            }
 1310|       |        } else {
 1311|    517|            self.output_positions.scheme_end = 0;
 1312|    517|            self.input_scheme_end = 0;
 1313|    517|            if self.input.starts_with('/') {
 1314|    222|                self.input.next();
 1315|    222|                self.output.push('/');
 1316|    222|                self.parse_path_or_authority()
 1317|       |            } else {
 1318|    295|                self.output_positions.authority_end = 0;
 1319|    295|                self.parse_path()
 1320|       |            }
 1321|       |        }
 1322|    517|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCse77hlhKzJ8Y_5oxrdf:
 1342|  1.52k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1343|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1344|  5.38k|        loop {
 1345|  5.38k|            let c = self.input.next();
 1346|  5.38k|            match c {
 1347|       |                Some('@') => {
 1348|     10|                    self.output.push('@');
 1349|     10|                    return self.parse_host();
 1350|       |                }
 1351|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1352|  1.51k|                    self.input = ParserInput {
 1353|  1.51k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1354|  1.51k|                        position: self.input_scheme_end + 2,
 1355|  1.51k|                    };
 1356|  1.51k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1357|  1.51k|                    return self.parse_host();
 1358|       |                }
 1359|  3.86k|                Some(c) => {
 1360|  3.86k|                    self.read_url_codepoint_or_echar(c)?;
 1361|       |                }
 1362|       |            }
 1363|       |        }
 1364|  1.52k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCse77hlhKzJ8Y_5oxrdf:
 1428|  1.46k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1429|  1.46k|        match c {
 1430|       |            None => {
 1431|    493|                self.output_positions.path_end = self.output.len();
 1432|    493|                self.output_positions.query_end = self.output.len();
 1433|    493|                Ok(())
 1434|       |            }
 1435|       |            Some('?') => {
 1436|     91|                self.output_positions.path_end = self.output.len();
 1437|     91|                self.output.push('?');
 1438|     91|                self.parse_query()
 1439|       |            }
 1440|       |            Some('#') => {
 1441|    385|                self.output_positions.path_end = self.output.len();
 1442|    385|                self.output_positions.query_end = self.output.len();
 1443|    385|                self.output.push('#');
 1444|    385|                self.parse_fragment()
 1445|       |            }
 1446|       |            Some('/') => {
 1447|    500|                self.output.push('/');
 1448|    500|                self.parse_path()
 1449|       |            }
 1450|      0|            Some(c) => {
 1451|      0|                self.read_url_codepoint_or_echar(c)?;
 1452|      0|                self.parse_path()
 1453|       |            }
 1454|       |        }
 1455|  1.46k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCse77hlhKzJ8Y_5oxrdf:
 1212|  3.35k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1213|  3.35k|        match self.input.front() {
 1214|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1215|  3.35k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1216|    450|            _ => self.parse_relative(),
 1217|       |        }
 1218|  3.35k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCse77hlhKzJ8Y_5oxrdf:
 1252|  1.98k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1253|  1.98k|        if self.input.starts_with('/') {
 1254|  1.52k|            self.input.next();
 1255|  1.52k|            self.output.push('/');
 1256|  1.52k|            self.parse_authority()
 1257|       |        } else {
 1258|    457|            self.output_positions.authority_end = self.output.len() - 1;
 1259|    457|            self.parse_path()
 1260|       |        }
 1261|  1.98k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCse77hlhKzJ8Y_5oxrdf:
 1523|  13.7k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1524|  13.7k|        if UNCHECKED || is_url_code_point(c) {
 1525|  12.6k|            self.output.push(c);
 1526|  12.6k|            Ok(())
 1527|  1.12k|        } else if c == '%' {
 1528|  1.12k|            self.read_echar()
 1529|       |        } else {
 1530|      5|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1531|       |        }
 1532|  13.7k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCse77hlhKzJ8Y_5oxrdf:
 1535|  2.46k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1536|  2.46k|        if UNCHECKED || is_url_query_code_point(c) {
 1537|  2.26k|            self.output.push(c);
 1538|  2.26k|            Ok(())
 1539|    206|        } else if c == '%' {
 1540|    203|            self.read_echar()
 1541|       |        } else {
 1542|      3|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1543|       |        }
 1544|  2.46k|    }
_RNvMs11_CshZH4L1BJXsw_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCse77hlhKzJ8Y_5oxrdf:
 1187|  3.35k|    fn parse(
 1188|  3.35k|        iri: &'a str,
 1189|  3.35k|        base: Option<IriRef<&'a str>>,
 1190|  3.35k|        output: &'a mut O,
 1191|  3.35k|    ) -> Result<IriElementsPositions, IriParseError> {
 1192|  3.35k|        let mut parser = Self {
 1193|  3.35k|            iri,
 1194|  3.35k|            base,
 1195|  3.35k|            input: ParserInput {
 1196|  3.35k|                value: iri.chars(),
 1197|  3.35k|                position: 0,
 1198|  3.35k|            },
 1199|  3.35k|            output,
 1200|  3.35k|            output_positions: IriElementsPositions {
 1201|  3.35k|                scheme_end: 0,
 1202|  3.35k|                authority_end: 0,
 1203|  3.35k|                path_end: 0,
 1204|  3.35k|                query_end: 0,
 1205|  3.35k|            },
 1206|  3.35k|            input_scheme_end: 0,
 1207|  3.35k|        };
 1208|  3.35k|        parser.parse_scheme_start()?;
 1209|  3.26k|        Ok(parser.output_positions)
 1210|  3.35k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE10into_innerCse77hlhKzJ8Y_5oxrdf:
  678|  2.83k|    pub fn into_inner(self) -> T {
  679|  2.83k|        self.0.into_inner()
  680|  2.83k|    }
_RNvMsp_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringE5parseCse77hlhKzJ8Y_5oxrdf:
  562|  3.35k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  563|  3.35k|        IriRef::parse(iri)?.try_into()
  564|  3.35k|    }
_RNvXsV_CshZH4L1BJXsw_5oxiriINtB5_3IriNtNtCsbqtYJIZlK4w_5alloc6string6StringEINtNtCs3enrnThfs6H_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCse77hlhKzJ8Y_5oxrdf:
  981|  3.26k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  982|  3.26k|        if iri.is_absolute() {
  983|  2.83k|            Ok(Self(iri))
  984|       |        } else {
  985|    432|            Err(IriParseError {
  986|    432|                kind: IriParseErrorKind::NoScheme,
  987|    432|            })
  988|       |        }
  989|  3.26k|    }
_RNvCshZH4L1BJXsw_5oxiri17is_url_code_pointCse77hlhKzJ8Y_5oxrdf:
 1573|  16.2k|fn is_url_code_point(c: char) -> bool {
 1574|  16.2k|    matches!(c,
 1575|  4.55k|        'a'..='z'
 1576|  4.21k|        | 'A'..='Z'
 1577|  8.58k|        | '0'..='9'
 1578|       |        | '!'
 1579|       |        | '$'
 1580|       |        | '&'
 1581|       |        | '\''
 1582|       |        | '('
 1583|       |        | ')'
 1584|       |        | '*'
 1585|       |        | '+'
 1586|       |        | ','
 1587|       |        | '-'
 1588|       |        | '.'
 1589|       |        | '/'
 1590|       |        | ':'
 1591|       |        | ';'
 1592|       |        | '='
 1593|       |        | '?'
 1594|       |        | '@'
 1595|       |        | '_'
 1596|       |        | '~'
 1597|  2.86k|        | '\u{A0}'..='\u{D7FF}'
 1598|    672|        | '\u{F900}'..='\u{FDCF}'
 1599|    672|        | '\u{FDF0}'..='\u{FFEF}'
 1600|    668|        | '\u{10000}'..='\u{1FFFD}'
 1601|    668|        | '\u{20000}'..='\u{2FFFD}'
 1602|    668|        | '\u{30000}'..='\u{3FFFD}'
 1603|    668|        | '\u{40000}'..='\u{4FFFD}'
 1604|     50|        | '\u{50000}'..='\u{5FFFD}'
 1605|     30|        | '\u{60000}'..='\u{6FFFD}'
 1606|     26|        | '\u{70000}'..='\u{7FFFD}'
 1607|     24|        | '\u{80000}'..='\u{8FFFD}'
 1608|     24|        | '\u{90000}'..='\u{9FFFD}'
 1609|     24|        | '\u{A0000}'..='\u{AFFFD}'
 1610|     24|        | '\u{B0000}'..='\u{BFFFD}'
 1611|     24|        | '\u{C0000}'..='\u{CFFFD}'
 1612|     22|        | '\u{D0000}'..='\u{DFFFD}'
 1613|     22|        | '\u{E1000}'..='\u{EFFFD}'
 1614|       |    )
 1615|  16.2k|}
_RNvCshZH4L1BJXsw_5oxiri23is_url_query_code_pointCse77hlhKzJ8Y_5oxrdf:
 1618|  2.46k|fn is_url_query_code_point(c: char) -> bool {
 1619|  2.46k|    is_url_code_point(c)
 1620|    310|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1621|  2.46k|}
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput11starts_withCse77hlhKzJ8Y_5oxrdf:
 1169|  6.86k|    fn starts_with(&self, c: char) -> bool {
 1170|  6.86k|        self.value.as_str().starts_with(c)
 1171|  6.86k|    }
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput4nextCse77hlhKzJ8Y_5oxrdf:
 1154|  41.4k|    fn next(&mut self) -> Option<char> {
 1155|  41.4k|        if let Some(head) = self.value.next() {
 1156|  37.6k|            self.position += head.len_utf8();
 1157|  37.6k|            Some(head)
 1158|       |        } else {
 1159|  3.85k|            None
 1160|       |        }
 1161|  41.4k|    }
_RNvMs10_CshZH4L1BJXsw_5oxiriNtB6_11ParserInput5frontCse77hlhKzJ8Y_5oxrdf:
 1164|  3.35k|    fn front(&self) -> Option<char> {
 1165|  3.35k|        self.value.clone().next()
 1166|  3.35k|    }
_RNvXs1b_CshZH4L1BJXsw_5oxiriNtB6_16VoidOutputBufferNtNtCs3enrnThfs6H_4core7default7Default7defaultCse77hlhKzJ8Y_5oxrdf:
 1078|  3.35k|#[derive(Default)]
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCse77hlhKzJ8Y_5oxrdf:
 1105|  12.3k|    fn len(&self) -> usize {
 1106|  12.3k|        self.len
 1107|  12.3k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCse77hlhKzJ8Y_5oxrdf:
 1085|  36.4k|    fn push(&mut self, c: char) {
 1086|  36.4k|        self.len += c.len_utf8();
 1087|  36.4k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCse77hlhKzJ8Y_5oxrdf:
 1095|     67|    fn clear(&mut self) {
 1096|     67|        self.len = 0;
 1097|     67|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCse77hlhKzJ8Y_5oxrdf:
 1110|  6.31k|    fn as_str(&self) -> &str {
 1111|  6.31k|        ""
 1112|  6.31k|    }
_RNvXsY_CshZH4L1BJXsw_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCse77hlhKzJ8Y_5oxrdf:
 1100|  1.51k|    fn truncate(&mut self, new_len: usize) {
 1101|  1.51k|        self.len = new_len;
 1102|  1.51k|    }
_RNvXsW_CshZH4L1BJXsw_5oxiriNtB5_13IriParseErrorNtNtCs3enrnThfs6H_4core3fmt7Display3fmt:
 1016|    521|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1017|    521|        match &self.kind {
 1018|    433|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1019|     36|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1020|     36|                write!(f, "Invalid character '{c}' in host")
 1021|       |            }
 1022|      3|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1023|     15|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1024|      8|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1025|      8|                write!(f, "Invalid IRI code point '{c}'")
 1026|       |            }
 1027|     26|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1028|     26|                f,
 1029|     26|                "Invalid IRI percent encoding '{}'",
 1030|     26|                cs.iter().flatten().cloned().collect::<String>()
 1031|     26|            ),
 1032|       |        }
 1033|    521|    }

_RNvNtCs2ZhSipuJ38Z_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  2.05k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  2.05k|    let parser = QueryResultsParser::from_format(format);
    8|  2.05k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  2.05k|    let Ok(reader) = parser.parse_read(data) else {
   11|  1.87k|        return;
   12|       |    };
   13|    189|    match reader {
   14|    187|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|    187|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|     47|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|    140|            let mut writer = serializer
   21|    140|                .serialize_solutions_to_write(
   22|    140|                    Vec::new(),
   23|    140|                    solutions
   24|    140|                        .get(0)
   25|    140|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|    140|                )
   27|    140|                .unwrap();
   28|  4.87k|            for solution in &solutions {
   29|  4.73k|                writer.write(solution).unwrap();
   30|  4.73k|            }
   31|    140|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|    140|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|    140|                .parse_read(serialized.as_bytes())
   36|    140|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|    140|                .unwrap()
   38|       |            {
   39|    140|                assert_eq!(
   40|    140|                    roundtrip_solutions
   41|    140|                        .collect::<Result<Vec<_>, _>>()
   42|    140|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|    140|                        .unwrap(),
   44|    140|                    solutions
   45|    140|                )
   46|      0|            }
   47|       |        }
   48|      2|        FromReadQueryResultsReader::Boolean(value) => {
   49|      2|            // We try to write again
   50|      2|            let mut serialized = Vec::new();
   51|      2|            serializer
   52|      2|                .serialize_boolean_to_write(&mut serialized, value)
   53|      2|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      2|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      2|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  2.05k|}
_RNCNvNtCs2ZhSipuJ38Z_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|    136|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCs2ZhSipuJ38Z_13oxigraph_fuzz:
   29|  2.83k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  2.83k|        Self::new_unchecked(iri.into_inner())
   31|  2.83k|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCsbqtYJIZlK4w_5alloc6borrow3CoweEECs2ZhSipuJ38Z_13oxigraph_fuzz:
   24|  3.35k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  3.35k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  3.35k|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsbqtYJIZlK4w_5alloc6string6StringEB5_:
   39|  2.83k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  2.83k|        Self { iri: iri.into() }
   41|  2.83k|    }

_RNvMNtCse77hlhKzJ8Y_5oxrdf8variableNtB2_8Variable6as_refCs2ZhSipuJ38Z_13oxigraph_fuzz:
   54|     11|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|     11|        VariableRef { name: &self.name }
   56|     11|    }
_RNvMNtCse77hlhKzJ8Y_5oxrdf8variableNtB2_8Variable6as_strCs2ZhSipuJ38Z_13oxigraph_fuzz:
   44|  3.39k|    pub fn as_str(&self) -> &str {
   45|  3.39k|        &self.name
   46|  3.39k|    }
_RNvXs1_NtCse77hlhKzJ8Y_5oxrdf8variableNtB5_11VariableRefNtNtCs3enrnThfs6H_4core3fmt7Display3fmtCs2ZhSipuJ38Z_13oxigraph_fuzz:
  123|     11|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|     11|        write!(f, "?{}", self.name)
  125|     11|    }
_RNvXs8_NtCse77hlhKzJ8Y_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCs3enrnThfs6H_4core3fmt7Display3fmtCs2ZhSipuJ38Z_13oxigraph_fuzz:
  226|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     15|        write!(f, "The variable name is invalid")
  228|     15|    }
_RNvXs_NtCse77hlhKzJ8Y_5oxrdf8variableNtB4_8VariableNtNtCs3enrnThfs6H_4core3fmt7Display3fmtCs2ZhSipuJ38Z_13oxigraph_fuzz:
   61|     11|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|     11|        self.as_ref().fmt(f)
   63|     11|    }
_RNvXsd_NtCse77hlhKzJ8Y_5oxrdf8variableNtB5_8VariableNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqCs2ZhSipuJ38Z_13oxigraph_fuzz:
   17|  39.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCse77hlhKzJ8Y_5oxrdf8variableNtB5_8VariableNtNtCs3enrnThfs6H_4core5clone5Clone5cloneCs2ZhSipuJ38Z_13oxigraph_fuzz:
   17|    949|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCse77hlhKzJ8Y_5oxrdf8variableNtB2_8Variable6as_strCs3ONS7Rzjfqc_10sparesults:
   44|    949|    pub fn as_str(&self) -> &str {
   45|    949|        &self.name
   46|    949|    }
_RNvNtCse77hlhKzJ8Y_5oxrdf8variable28validate_variable_identifier:
  170|  4.99k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  4.99k|    let mut chars = id.chars();
  172|  4.99k|    let front = chars.next().ok_or(VariableNameParseError)?;
  173|  4.99k|    match front {
  174|  4.99k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  4.56k|        | 'A'..='Z'
  178|  3.02k|        | 'a'..='z'
  179|    103|        | '\u{00C0}'..='\u{00D6}'
  180|    103|        | '\u{00D8}'..='\u{00F6}'
  181|    103|        | '\u{00F8}'..='\u{02FF}'
  182|     73|        | '\u{0370}'..='\u{037D}'
  183|     73|        | '\u{037F}'..='\u{1FFF}'
  184|     41|        | '\u{200C}'..='\u{200D}'
  185|     41|        | '\u{2070}'..='\u{218F}'
  186|     41|        | '\u{2C00}'..='\u{2FEF}'
  187|     41|        | '\u{3001}'..='\u{D7FF}'
  188|     26|        | '\u{F900}'..='\u{FDCF}'
  189|     26|        | '\u{FDF0}'..='\u{FFFD}'
  190|  4.99k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      3|        _ => return Err(VariableNameParseError),
  192|       |    }
  193|  15.7k|    for c in chars {
  194|  10.7k|        match c {
  195|  10.7k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|  1.30k|            | '\u{00300}'..='\u{036F}'
  198|    576|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  8.48k|            | 'A'..='Z'
  201|  5.51k|            | 'a'..='z'
  202|  1.43k|            | '\u{00C0}'..='\u{00D6}'
  203|  1.43k|            | '\u{00D8}'..='\u{00F6}'
  204|  1.43k|            | '\u{00F8}'..='\u{02FF}'
  205|  1.30k|            | '\u{0370}'..='\u{037D}'
  206|  1.30k|            | '\u{037F}'..='\u{1FFF}'
  207|    576|            | '\u{200C}'..='\u{200D}'
  208|    576|            | '\u{2070}'..='\u{218F}'
  209|    562|            | '\u{2C00}'..='\u{2FEF}'
  210|    560|            | '\u{3001}'..='\u{D7FF}'
  211|    173|            | '\u{F900}'..='\u{FDCF}'
  212|    173|            | '\u{FDF0}'..='\u{FFFD}'
  213|  10.7k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|     11|            _ => return Err(VariableNameParseError),
  215|       |        }
  216|       |    }
  217|  4.98k|    Ok(())
  218|  4.99k|}
_RINvMNtCse77hlhKzJ8Y_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  4.99k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  4.99k|        let name = name.into();
   28|  4.99k|        validate_variable_identifier(&name)?;
   29|  4.98k|        Ok(Self::new_unchecked(name))
   30|  4.99k|    }
_RINvMNtCse77hlhKzJ8Y_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsbqtYJIZlK4w_5alloc6string6StringEB5_:
   39|  4.98k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  4.98k|        Self { name: name.into() }
   41|  4.98k|    }

_RINvMs5_NtCs3ONS7Rzjfqc_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsbqtYJIZlK4w_5alloc6string6StringECs2ZhSipuJ38Z_13oxigraph_fuzz:
  108|    587|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    587|        Self {
  110|    587|            inner: SyntaxErrorKind::Msg {
  111|    587|                msg: msg.into(),
  112|    587|                location: None,
  113|    587|            },
  114|    587|        }
  115|    587|    }
_RINvMs5_NtCs3ONS7Rzjfqc_10sparesults5errorNtB6_11SyntaxError3msgReECs2ZhSipuJ38Z_13oxigraph_fuzz:
  108|    120|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    120|        Self {
  110|    120|            inner: SyntaxErrorKind::Msg {
  111|    120|                msg: msg.into(),
  112|    120|                location: None,
  113|    120|            },
  114|    120|        }
  115|    120|    }
_RNvXs1_NtCs3ONS7Rzjfqc_10sparesults5errorNtB5_10ParseErrorINtNtCs3enrnThfs6H_4core7convert4FromNtB5_11SyntaxErrorE4fromCs2ZhSipuJ38Z_13oxigraph_fuzz:
   45|    550|    fn from(error: SyntaxError) -> Self {
   46|    550|        Self::Syntax(error)
   47|    550|    }
_RNvXs1_NtCs3ONS7Rzjfqc_10sparesults5errorNtB5_10ParseErrorINtNtCs3enrnThfs6H_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|  1.36k|    fn from(error: SyntaxError) -> Self {
   46|  1.36k|        Self::Syntax(error)
   47|  1.36k|    }
_RNvXs3_NtCs3ONS7Rzjfqc_10sparesults5errorNtB5_10ParseErrorINtNtCs3enrnThfs6H_4core7convert4FromNtNtCs4KG2xUOtNUk_17json_event_parser4read10ParseErrorE4from:
   61|  1.21k|    fn from(error: json_event_parser::ParseError) -> Self {
   62|  1.21k|        match error {
   63|  1.21k|            json_event_parser::ParseError::Syntax(error) => SyntaxError::from(error).into(),
   64|      0|            json_event_parser::ParseError::Io(error) => error.into(),
   65|       |        }
   66|  1.21k|    }
_RNvXs9_NtCs3ONS7Rzjfqc_10sparesults5errorNtB5_11SyntaxErrorINtNtCs3enrnThfs6H_4core7convert4FromNtNtCs4KG2xUOtNUk_17json_event_parser4read11SyntaxErrorE4from:
  203|  1.21k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  204|  1.21k|        Self {
  205|  1.21k|            inner: SyntaxErrorKind::Json(error),
  206|  1.21k|        }
  207|  1.21k|    }

_RINvMNtCs3ONS7Rzjfqc_10sparesults4jsonINtB3_26ToWriteJsonSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE5writeINtNtNtNtCs3enrnThfs6H_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB36_22ToWriteSolutionsWriterB18_E5writeRNtNtCse77hlhKzJ8Y_5oxrdf8variable8VariableRNtNtB48_6triple4TermRNtB2E_13QuerySolutionE0EECs2ZhSipuJ38Z_13oxigraph_fuzz:
   66|  4.73k|    pub fn write<'a>(
   67|  4.73k|        &mut self,
   68|  4.73k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   69|  4.73k|    ) -> io::Result<()> {
   70|  4.73k|        let mut buffer = Vec::with_capacity(48);
   71|  4.73k|        self.inner.write(&mut buffer, solution);
   72|  4.73k|        Self::do_write(&mut self.writer, buffer)
   73|  4.73k|    }
_RINvMs_NtCs3ONS7Rzjfqc_10sparesults4jsonNtB5_24InnerJsonSolutionsWriter5writeINtNtNtNtCs3enrnThfs6H_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2v_22ToWriteSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE5writeRNtNtCse77hlhKzJ8Y_5oxrdf8variable8VariableRNtNtB42_6triple4TermRNtB23_13QuerySolutionE0EECs2ZhSipuJ38Z_13oxigraph_fuzz:
  155|  4.73k|    fn write<'a>(
  156|  4.73k|        &self,
  157|  4.73k|        output: &mut Vec<JsonEvent<'a>>,
  158|  4.73k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  159|  4.73k|    ) {
  160|  4.73k|        output.push(JsonEvent::StartObject);
  161|  4.73k|        for (variable, value) in solution {
  162|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  163|      0|            write_json_term(output, value);
  164|      0|        }
  165|  4.73k|        output.push(JsonEvent::EndObject);
  166|  4.73k|    }
_RINvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueRShECs2ZhSipuJ38Z_13oxigraph_fuzz:
  416|  2.56k|fn read_value<R: Read>(
  417|  2.56k|    reader: &mut FromReadJsonReader<R>,
  418|  2.56k|    number_of_recursive_calls: usize,
  419|  2.56k|) -> Result<Term, ParseError> {
  420|  2.56k|    enum Type {
  421|  2.56k|        Uri,
  422|  2.56k|        BNode,
  423|  2.56k|        Literal,
  424|  2.56k|        #[cfg(feature = "rdf-star")]
  425|  2.56k|        Triple,
  426|  2.56k|    }
  427|  2.56k|    #[derive(Eq, PartialEq)]
  428|  2.56k|    enum State {
  429|  2.56k|        Type,
  430|  2.56k|        Value,
  431|  2.56k|        Lang,
  432|  2.56k|        Datatype,
  433|  2.56k|    }
  434|  2.56k|
  435|  2.56k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  436|      1|        return Err(SyntaxError::msg(format!(
  437|      1|            "Too many nested triples ({MAX_NUMBER_OF_NESTED_TRIPLES}). The parser fails here to avoid a stack overflow."
  438|      1|        ))
  439|      1|            .into());
  440|  2.56k|    }
  441|  2.56k|    let mut state = None;
  442|  2.56k|    let mut t = None;
  443|  2.56k|    let mut value = None;
  444|  2.56k|    let mut lang = None;
  445|  2.56k|    let mut datatype = None;
  446|  2.56k|    #[cfg(feature = "rdf-star")]
  447|  2.56k|    let mut subject = None;
  448|  2.56k|    #[cfg(feature = "rdf-star")]
  449|  2.56k|    let mut predicate = None;
  450|  2.56k|    #[cfg(feature = "rdf-star")]
  451|  2.56k|    let mut object = None;
  452|  2.56k|    if reader.read_next_event()? != JsonEvent::StartObject {
  453|      4|        return Err(SyntaxError::msg("Term serializations should be an object").into());
  454|  2.50k|    }
  455|       |    loop {
  456|       |        #[allow(unsafe_code)]
  457|       |        // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
  458|  9.72k|        let next_event = unsafe {
  459|  9.90k|            let r: *mut FromReadJsonReader<R> = reader;
  460|  9.90k|            &mut *r
  461|  9.90k|        }
  462|  9.90k|        .read_next_event()?;
  463|  9.72k|        match next_event {
  464|  5.74k|            JsonEvent::ObjectKey(key) => match key.as_ref() {
  465|  5.74k|                "type" => state = Some(State::Type),
  466|  5.64k|                "value" => state = Some(State::Value),
  467|  5.35k|                "xml:lang" => state = Some(State::Lang),
  468|  5.14k|                "datatype" => state = Some(State::Datatype),
  469|       |                #[cfg(feature = "rdf-star")]
  470|  1.78k|                "subject" => subject = Some(read_value(reader, number_of_recursive_calls + 1)?),
  471|       |                #[cfg(feature = "rdf-star")]
  472|  1.70k|                "predicate" => predicate = Some(read_value(reader, number_of_recursive_calls + 1)?),
  473|       |                #[cfg(feature = "rdf-star")]
  474|     86|                "object" => object = Some(read_value(reader, number_of_recursive_calls + 1)?),
  475|       |                _ => {
  476|     15|                    return Err(SyntaxError::msg(format!(
  477|     15|                        "Unexpected key in term serialization: '{key}'"
  478|     15|                    ))
  479|     15|                    .into())
  480|       |                }
  481|       |            },
  482|       |            JsonEvent::StartObject => {
  483|     64|                if state != Some(State::Value) {
  484|      1|                    return Err(
  485|      1|                        SyntaxError::msg("Unexpected nested object in term serialization").into(),
  486|      1|                    );
  487|     63|                }
  488|       |            }
  489|  3.87k|            JsonEvent::String(s) => match state {
  490|       |                Some(State::Type) => {
  491|     94|                    match s.as_ref() {
  492|     94|                        "uri" => t = Some(Type::Uri),
  493|     75|                        "bnode" => t = Some(Type::BNode),
  494|     56|                        "literal" | "typed-literal" => t = Some(Type::Literal),
  495|       |                        #[cfg(feature = "rdf-star")]
  496|     27|                        "triple" => t = Some(Type::Triple),
  497|       |                        _ => {
  498|      7|                            return Err(
  499|      7|                                SyntaxError::msg(format!("Unexpected term type: '{s}'")).into()
  500|      7|                            )
  501|       |                        }
  502|       |                    };
  503|     87|                    state = None;
  504|       |                }
  505|    223|                Some(State::Value) => {
  506|    223|                    value = Some(s.into_owned());
  507|    223|                    state = None;
  508|    223|                }
  509|    209|                Some(State::Lang) => {
  510|    209|                    lang = Some(s.into_owned());
  511|    209|                    state = None;
  512|    209|                }
  513|  2.83k|                Some(State::Datatype) => {
  514|  2.83k|                    datatype = Some(
  515|  3.35k|                        NamedNode::new(s)
  516|  3.35k|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
  517|       |                    );
  518|  2.83k|                    state = None;
  519|       |                }
  520|      0|                _ => (), // impossible
  521|       |            },
  522|       |            JsonEvent::EndObject => {
  523|     39|                if let Some(s) = state {
  524|     34|                    if s == State::Value {
  525|     34|                        state = None; //End of triple
  526|     34|                    } else {
  527|      0|                        return Err(
  528|      0|                            SyntaxError::msg("Term description values should be string").into()
  529|      0|                        );
  530|       |                    }
  531|       |                } else {
  532|      4|                    return match t {
  533|      1|                        None => Err(SyntaxError::msg(
  534|      1|                            "Term serialization should have a 'type' key",
  535|      1|                        )
  536|      1|                        .into()),
  537|      1|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  538|       |                            SyntaxError::msg("uri serialization should have a 'value' key")
  539|      1|                        })?)
  540|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid uri value: {e}")))?
  541|      0|                        .into()),
  542|      1|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  543|       |                            SyntaxError::msg("bnode serialization should have a 'value' key")
  544|      1|                        })?)
  545|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid bnode value: {e}")))?
  546|      0|                        .into()),
  547|       |                        Some(Type::Literal) => {
  548|      1|                            let value = value.ok_or_else(|| {
  549|       |                                SyntaxError::msg("literal serialization should have a 'value' key")
  550|      1|                            })?;
  551|      0|                            Ok(match lang {
  552|      0|                                Some(lang) => {
  553|      0|                                    if let Some(datatype) = datatype {
  554|      0|                                        if datatype.as_ref() != rdf::LANG_STRING {
  555|      0|                                            return Err(SyntaxError::msg(format!(
  556|      0|                                                "xml:lang value '{lang}' provided with the datatype {datatype}"
  557|      0|                                            )).into())
  558|      0|                                        }
  559|      0|                                    }
  560|      0|                                    Literal::new_language_tagged_literal(value, &*lang).map_err(|e| {
  561|       |                                        SyntaxError::msg(format!("Invalid xml:lang value '{lang}': {e}"))
  562|      0|                                    })?
  563|       |                                }
  564|      0|                                None => if let Some(datatype) = datatype {
  565|      0|                                    Literal::new_typed_literal(value, datatype)
  566|       |                                } else {
  567|      0|                                    Literal::new_simple_literal(value)
  568|       |                                }
  569|       |                            }
  570|      0|                                .into())
  571|       |                        }
  572|       |                        #[cfg(feature = "rdf-star")]
  573|       |                        Some(Type::Triple) => Ok(Triple::new(
  574|      1|                            match subject.ok_or_else(|| {
  575|       |                                SyntaxError::msg("triple serialization should have a 'subject' key")
  576|      1|                            })? {
  577|      0|                                Term::NamedNode(subject) => subject.into(),
  578|      0|                                Term::BlankNode(subject) => subject.into(),
  579|      0|                                Term::Triple(subject) => Subject::Triple(subject),
  580|       |                                Term::Literal(_) => {
  581|      0|                                    return Err(SyntaxError::msg(
  582|      0|                                        "The 'subject' value should not be a literal",
  583|      0|                                    )
  584|      0|                                    .into())
  585|       |                                }
  586|       |                            },
  587|      0|                            match predicate.ok_or_else(|| {
  588|       |                                SyntaxError::msg(
  589|       |                                    "triple serialization should have a 'predicate' key",
  590|       |                                )
  591|      0|                            })? {
  592|      0|                                Term::NamedNode(predicate) => predicate,
  593|       |                                _ => {
  594|      0|                                    return Err(SyntaxError::msg(
  595|      0|                                        "The 'predicate' value should be a uri",
  596|      0|                                    )
  597|      0|                                    .into())
  598|       |                                }
  599|       |                            },
  600|      0|                            object.ok_or_else(|| {
  601|       |                                SyntaxError::msg("triple serialization should have a 'object' key")
  602|      0|                            })?,
  603|       |                        )
  604|      0|                        .into()),
  605|       |                    };
  606|       |                }
  607|       |            }
  608|      2|            _ => return Err(SyntaxError::msg("Invalid term serialization").into()),
  609|       |        }
  610|       |    }
  611|  2.56k|}
_RINvNtCs3ONS7Rzjfqc_10sparesults4json12ignore_valueRShECs2ZhSipuJ38Z_13oxigraph_fuzz:
  672|  1.90k|fn ignore_value<R: Read>(reader: &mut FromReadJsonReader<R>) -> Result<(), ParseError> {
  673|  1.90k|    let mut nesting = 0;
  674|       |    loop {
  675|  8.76k|        match reader.read_next_event()? {
  676|       |            JsonEvent::Boolean(_)
  677|       |            | JsonEvent::Null
  678|       |            | JsonEvent::Number(_)
  679|       |            | JsonEvent::String(_) => {
  680|  2.55k|                if nesting == 0 {
  681|  1.35k|                    return Ok(());
  682|  1.20k|                }
  683|       |            }
  684|  2.10k|            JsonEvent::ObjectKey(_) => (),
  685|  2.68k|            JsonEvent::StartArray | JsonEvent::StartObject => nesting += 1,
  686|       |            JsonEvent::EndArray | JsonEvent::EndObject => {
  687|  1.30k|                nesting -= 1;
  688|  1.30k|                if nesting == 0 {
  689|    438|                    return Ok(());
  690|    863|                }
  691|       |            }
  692|      0|            JsonEvent::Eof => return Err(SyntaxError::msg("Unexpected end of file").into()),
  693|       |        }
  694|       |    }
  695|  1.90k|}
_RINvNtCs3ONS7Rzjfqc_10sparesults4json25write_boolean_json_resultQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
   20|      2|pub fn write_boolean_json_result<W: Write>(write: W, value: bool) -> io::Result<W> {
   21|      2|    let mut writer = ToWriteJsonWriter::new(write);
   22|     14|    for event in inner_write_boolean_json_result(value) {
   23|     14|        writer.write_event(event)?;
   24|       |    }
   25|      2|    writer.finish()
   26|      2|}
_RINvNtCs3ONS7Rzjfqc_10sparesults4json9read_headRShECs2ZhSipuJ38Z_13oxigraph_fuzz:
  613|  1.52k|fn read_head<R: Read>(reader: &mut FromReadJsonReader<R>) -> Result<Vec<Variable>, ParseError> {
  614|  1.52k|    if reader.read_next_event()? != JsonEvent::StartObject {
  615|      4|        return Err(SyntaxError::msg("head should be an object").into());
  616|  1.51k|    }
  617|  1.51k|    let mut variables = Vec::new();
  618|       |    loop {
  619|  3.52k|        match reader.read_next_event()? {
  620|  2.24k|            JsonEvent::ObjectKey(key) => match key.as_ref() {
  621|  2.24k|                "vars" => {
  622|    931|                    if reader.read_next_event()? != JsonEvent::StartArray {
  623|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  624|    929|                    }
  625|       |                    loop {
  626|  5.89k|                        match reader.read_next_event()? {
  627|  4.99k|                            JsonEvent::String(s) => {
  628|  4.99k|                                let new_var = Variable::new(s.as_ref()).map_err(|e| {
  629|       |                                    SyntaxError::msg(format!(
  630|       |                                        "Invalid variable declaration '{s}': {e}"
  631|       |                                    ))
  632|  4.99k|                                })?;
  633|  4.98k|                                if variables.contains(&new_var) {
  634|     11|                                    return Err(SyntaxError::msg(format!(
  635|     11|                                        "The variable {new_var} is declared twice"
  636|     11|                                    ))
  637|     11|                                    .into());
  638|  4.97k|                                }
  639|  4.97k|                                variables.push(new_var);
  640|       |                            }
  641|    811|                            JsonEvent::EndArray => break,
  642|       |                            _ => {
  643|      2|                                return Err(
  644|      2|                                    SyntaxError::msg("Variable names should be strings").into()
  645|      2|                                )
  646|       |                            }
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|  1.31k|                "link" => {
  651|     94|                    if reader.read_next_event()? != JsonEvent::StartArray {
  652|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  653|     90|                    }
  654|       |                    loop {
  655|    294|                        match reader.read_next_event()? {
  656|    204|                            JsonEvent::String(_) => (),
  657|     75|                            JsonEvent::EndArray => break,
  658|       |                            _ => {
  659|      2|                                return Err(SyntaxError::msg("Link names should be strings").into())
  660|       |                            }
  661|       |                        }
  662|       |                    }
  663|       |                }
  664|  1.21k|                _ => ignore_value(reader)?,
  665|       |            },
  666|  1.20k|            JsonEvent::EndObject => return Ok(variables),
  667|      0|            _ => return Err(SyntaxError::msg("Invalid head serialization").into()),
  668|       |        }
  669|       |    }
  670|  1.52k|}
_RNCINvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueRShE0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  516|    521|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
_RNCINvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueRShEs1_0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  542|      1|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  543|      1|                            SyntaxError::msg("bnode serialization should have a 'value' key")
  544|      1|                        })?)
_RNCINvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueRShEs3_0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  548|      1|                            let value = value.ok_or_else(|| {
  549|      1|                                SyntaxError::msg("literal serialization should have a 'value' key")
  550|      1|                            })?;
_RNCINvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueRShEs5_0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  574|      1|                            match subject.ok_or_else(|| {
  575|      1|                                SyntaxError::msg("triple serialization should have a 'subject' key")
  576|      1|                            })? {
_RNCINvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueRShEs_0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  537|      1|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  538|      1|                            SyntaxError::msg("uri serialization should have a 'value' key")
  539|      1|                        })?)
_RNCINvNtCs3ONS7Rzjfqc_10sparesults4json9read_headRShE0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  628|     15|                                let new_var = Variable::new(s.as_ref()).map_err(|e| {
  629|     15|                                    SyntaxError::msg(format!(
  630|     15|                                        "Invalid variable declaration '{s}': {e}"
  631|     15|                                    ))
  632|     15|                                })?;
_RNCNvMs1_NtCs3ONS7Rzjfqc_10sparesults4jsonINtB7_19JsonSolutionsReaderRShE9read_next0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  385|     10|                            let k = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  386|     10|                                SyntaxError::msg(format!(
  387|     10|                                    "The variable {key} has not been defined in the header"
  388|     10|                                ))
  389|     10|                            })?;
_RNvMNtCs3ONS7Rzjfqc_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE5startCs2ZhSipuJ38Z_13oxigraph_fuzz:
   58|    140|    pub fn start(write: W, variables: &[Variable]) -> io::Result<Self> {
   59|    140|        let mut writer = ToWriteJsonWriter::new(write);
   60|    140|        let mut buffer = Vec::with_capacity(48);
   61|    140|        let inner = InnerJsonSolutionsWriter::start(&mut buffer, variables);
   62|    140|        Self::do_write(&mut writer, buffer)?;
   63|    140|        Ok(Self { inner, writer })
   64|    140|    }
_RNvMNtCs3ONS7Rzjfqc_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE6finishCs2ZhSipuJ38Z_13oxigraph_fuzz:
   75|    140|    pub fn finish(mut self) -> io::Result<W> {
   76|    140|        let mut buffer = Vec::with_capacity(4);
   77|    140|        self.inner.finish(&mut buffer);
   78|    140|        Self::do_write(&mut self.writer, buffer)?;
   79|    140|        self.writer.finish()
   80|    140|    }
_RNvMNtCs3ONS7Rzjfqc_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE8do_writeCs2ZhSipuJ38Z_13oxigraph_fuzz:
   82|  5.01k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   83|  17.4k|        for event in output {
   84|  12.3k|            writer.write_event(event)?;
   85|       |        }
   86|  5.01k|        Ok(())
   87|  5.01k|    }
_RNvMs0_NtCs3ONS7Rzjfqc_10sparesults4jsonINtB5_22JsonQueryResultsReaderRShE4readCs2ZhSipuJ38Z_13oxigraph_fuzz:
  237|  2.20k|    pub fn read(read: R) -> Result<Self, ParseError> {
  238|  2.20k|        let mut reader = FromReadJsonReader::new(read);
  239|  2.20k|        let mut variables = None;
  240|  2.20k|        let mut buffered_bindings: Option<Vec<_>> = None;
  241|  2.20k|        let mut output_iter = None;
  242|  2.20k|
  243|  2.20k|        if reader.read_next_event()? != JsonEvent::StartObject {
  244|     75|            return Err(SyntaxError::msg("SPARQL JSON results should be an object").into());
  245|  1.68k|        }
  246|       |
  247|       |        loop {
  248|  3.75k|            let event = reader.read_next_event()?;
  249|  3.61k|            match event {
  250|  3.32k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  251|  3.32k|                    "head" => {
  252|  1.52k|                        let extracted_variables = read_head(&mut reader)?;
  253|  1.20k|                        if let Some(buffered_bindings) = buffered_bindings.take() {
  254|    367|                            let mut mapping = BTreeMap::default();
  255|  1.15k|                            for (i, var) in extracted_variables.iter().enumerate() {
  256|  1.15k|                                mapping.insert(var.as_str().to_owned(), i);
  257|  1.15k|                            }
  258|    367|                            output_iter = Some(Self::Solutions {
  259|    367|                                variables: extracted_variables,
  260|    367|                                solutions: JsonSolutionsReader {
  261|    367|                                    kind: JsonSolutionsReaderKind::Buffered {
  262|    367|                                        bindings: buffered_bindings.into_iter(),
  263|    367|                                    },
  264|    367|                                    mapping,
  265|    367|                                },
  266|    367|                            });
  267|    841|                        } else {
  268|    841|                            variables = Some(extracted_variables);
  269|    841|                        }
  270|       |                    }
  271|  1.79k|                    "results" => {
  272|  1.78k|                        if reader.read_next_event()? != JsonEvent::StartObject {
  273|      4|                            return Err(SyntaxError::msg("'results' should be an object").into());
  274|  1.77k|                        }
  275|       |                        loop {
  276|  2.43k|                            match reader.read_next_event()? {
  277|  2.41k|                                JsonEvent::ObjectKey(k) if k == "bindings" => break, // Found
  278|    691|                                JsonEvent::ObjectKey(_) => ignore_value(&mut reader)?,
  279|       |                                _ => {
  280|      2|                                    return Err(SyntaxError::msg(
  281|      2|                                        "'results' should contain a 'bindings' key",
  282|      2|                                    )
  283|      2|                                    .into())
  284|       |                                }
  285|       |                            }
  286|       |                        }
  287|  1.71k|                        if reader.read_next_event()? != JsonEvent::StartArray {
  288|      1|                            return Err(SyntaxError::msg("'bindings' should be an object").into());
  289|  1.71k|                        }
  290|  1.71k|                        if let Some(variables) = variables {
  291|    317|                            let mut mapping = BTreeMap::default();
  292|  2.24k|                            for (i, var) in variables.iter().enumerate() {
  293|  2.24k|                                mapping.insert(var.as_str().to_owned(), i);
  294|  2.24k|                            }
  295|    317|                            return Ok(Self::Solutions {
  296|    317|                                variables,
  297|    317|                                solutions: JsonSolutionsReader {
  298|    317|                                    kind: JsonSolutionsReaderKind::Streaming { reader },
  299|    317|                                    mapping,
  300|    317|                                },
  301|    317|                            });
  302|  1.40k|                        }
  303|  1.40k|                        // We buffer all results before being able to read the header
  304|  1.40k|                        let mut bindings = Vec::new();
  305|  1.40k|                        let mut variables = Vec::new();
  306|  1.40k|                        let mut values = Vec::new();
  307|       |                        loop {
  308|  4.81k|                            match reader.read_next_event()? {
  309|  2.10k|                                JsonEvent::StartObject => (),
  310|  1.31k|                                JsonEvent::EndObject => {
  311|  1.31k|                                    bindings.push((take(&mut variables), take(&mut values)));
  312|  1.31k|                                }
  313|       |                                JsonEvent::EndArray | JsonEvent::Eof => {
  314|    595|                                    buffered_bindings = Some(bindings);
  315|    595|                                    break;
  316|       |                                }
  317|    787|                                JsonEvent::ObjectKey(key) => {
  318|    787|                                    variables.push(key.into_owned());
  319|    787|                                    values.push(read_value(&mut reader, 0)?);
  320|       |                                }
  321|       |                                _ => {
  322|      1|                                    return Err(
  323|      1|                                        SyntaxError::msg("Invalid result serialization").into()
  324|      1|                                    )
  325|       |                                }
  326|       |                            }
  327|       |                        }
  328|       |                    }
  329|     13|                    "boolean" => {
  330|      6|                        return if let JsonEvent::Boolean(v) = reader.read_next_event()? {
  331|      4|                            Ok(Self::Boolean(v))
  332|       |                        } else {
  333|      1|                            Err(SyntaxError::msg("Unexpected boolean value").into())
  334|       |                        }
  335|       |                    }
  336|       |                    _ => {
  337|      7|                        return Err(SyntaxError::msg(format!(
  338|      7|                            "Expecting head or result key, found {key}"
  339|      7|                        ))
  340|      7|                        .into());
  341|       |                    }
  342|       |                },
  343|    271|                JsonEvent::EndObject => (),
  344|       |                JsonEvent::Eof => {
  345|     21|                    return if let Some(output_iter) = output_iter {
  346|     10|                        Ok(output_iter)
  347|       |                    } else {
  348|     11|                        Err(SyntaxError::msg(
  349|     11|                            "Unexpected end of JSON object without 'results' or 'boolean' key",
  350|     11|                        )
  351|     11|                        .into())
  352|       |                    }
  353|       |                }
  354|      0|                _ => return Err(SyntaxError::msg("Invalid SPARQL results serialization").into()),
  355|       |            }
  356|       |        }
  357|  2.20k|    }
_RNvMs1_NtCs3ONS7Rzjfqc_10sparesults4jsonINtB5_19JsonSolutionsReaderRShE9read_nextCs2ZhSipuJ38Z_13oxigraph_fuzz:
  375|  9.84k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  376|  9.84k|        match &mut self.kind {
  377|  9.64k|            JsonSolutionsReaderKind::Streaming { reader } => {
  378|  9.64k|                let mut new_bindings = vec![None; self.mapping.len()];
  379|       |                loop {
  380|  18.9k|                    match reader.read_next_event()? {
  381|  9.33k|                        JsonEvent::StartObject => (),
  382|  9.32k|                        JsonEvent::EndObject => return Ok(Some(new_bindings)),
  383|    270|                        JsonEvent::EndArray | JsonEvent::Eof => return Ok(None),
  384|     11|                        JsonEvent::ObjectKey(key) => {
  385|     11|                            let k = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  386|       |                                SyntaxError::msg(format!(
  387|       |                                    "The variable {key} has not been defined in the header"
  388|       |                                ))
  389|     11|                            })?;
  390|      1|                            new_bindings[k] = Some(read_value(reader, 0)?)
  391|       |                        }
  392|      3|                        _ => return Err(SyntaxError::msg("Invalid result serialization").into()),
  393|       |                    }
  394|       |                }
  395|       |            }
  396|    204|            JsonSolutionsReaderKind::Buffered { bindings } => {
  397|    204|                Ok(if let Some((variables, values)) = bindings.next() {
  398|    194|                    let mut new_bindings = vec![None; self.mapping.len()];
  399|    194|                    for (variable, value) in variables.into_iter().zip(values) {
  400|      0|                        let k = *self.mapping.get(&variable).ok_or_else(|| {
  401|       |                            SyntaxError::msg(format!(
  402|       |                                "The variable {variable} has not been defined in the header"
  403|       |                            ))
  404|      0|                        })?;
  405|      0|                        new_bindings[k] = Some(value)
  406|       |                    }
  407|    194|                    Some(new_bindings)
  408|       |                } else {
  409|     10|                    None
  410|       |                })
  411|       |            }
  412|       |        }
  413|  9.84k|    }
_RNvXs1_NvNtCs3ONS7Rzjfqc_10sparesults4json10read_valueNtB5_5StateNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eqCs2ZhSipuJ38Z_13oxigraph_fuzz:
  427|     98|    #[derive(Eq, PartialEq)]
_RNvNtCs3ONS7Rzjfqc_10sparesults4json31inner_write_boolean_json_result:
   40|      2|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   41|      2|    [
   42|      2|        JsonEvent::StartObject,
   43|      2|        JsonEvent::ObjectKey("head".into()),
   44|      2|        JsonEvent::StartObject,
   45|      2|        JsonEvent::EndObject,
   46|      2|        JsonEvent::ObjectKey("boolean".into()),
   47|      2|        JsonEvent::Boolean(value),
   48|      2|        JsonEvent::EndObject,
   49|      2|    ]
   50|      2|}
_RNvMs_NtCs3ONS7Rzjfqc_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter5start:
  136|    140|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  137|    140|        output.push(JsonEvent::StartObject);
  138|    140|        output.push(JsonEvent::ObjectKey("head".into()));
  139|    140|        output.push(JsonEvent::StartObject);
  140|    140|        output.push(JsonEvent::ObjectKey("vars".into()));
  141|    140|        output.push(JsonEvent::StartArray);
  142|  1.08k|        for variable in variables {
  143|    949|            output.push(JsonEvent::String(variable.as_str().into()));
  144|    949|        }
  145|    140|        output.push(JsonEvent::EndArray);
  146|    140|        output.push(JsonEvent::EndObject);
  147|    140|        output.push(JsonEvent::ObjectKey("results".into()));
  148|    140|        output.push(JsonEvent::StartObject);
  149|    140|        output.push(JsonEvent::ObjectKey("bindings".into()));
  150|    140|        output.push(JsonEvent::StartArray);
  151|    140|        Self {}
  152|    140|    }
_RNvMs_NtCs3ONS7Rzjfqc_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter6finish:
  169|    140|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  170|    140|        output.push(JsonEvent::EndArray);
  171|    140|        output.push(JsonEvent::EndObject);
  172|    140|        output.push(JsonEvent::EndObject);
  173|    140|    }

_RINvMNtCs3ONS7Rzjfqc_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECs2ZhSipuJ38Z_13oxigraph_fuzz:
   73|  2.20k|    pub fn parse_read<R: Read>(
   74|  2.20k|        &self,
   75|  2.20k|        reader: R,
   76|  2.20k|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|  2.20k|        Ok(match self.format {
   78|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|  2.20k|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      4|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|    327|                    solutions,
   92|    327|                    variables,
   93|    327|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|    327|                    variables: variables.into(),
   95|    327|                    solutions: SolutionsReaderKind::Json(solutions),
   96|    327|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      0|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|      0|                    solutions,
  103|      0|                    variables,
  104|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|      0|                    variables: variables.into(),
  106|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|      0|                }),
  108|       |            },
  109|       |        })
  110|  2.20k|    }
_RNCNvXs1_NtCs3ONS7Rzjfqc_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4next0Cs2ZhSipuJ38Z_13oxigraph_fuzz:
  217|  9.51k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RNvXs1_NtCs3ONS7Rzjfqc_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4nextCs2ZhSipuJ38Z_13oxigraph_fuzz:
  209|  9.84k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  210|  9.84k|        Some(
  211|  9.84k|            match &mut self.solutions {
  212|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  213|  9.84k|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  214|      0|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  215|       |            }
  216|  9.84k|            .transpose()?
  217|  9.56k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  218|       |        )
  219|  9.84k|    }
_RNvMNtCs3ONS7Rzjfqc_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs2ZhSipuJ38Z_13oxigraph_fuzz:
   44|  2.05k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|  2.05k|        Self { format }
   46|  2.05k|    }

_RINvMNtCs3ONS7Rzjfqc_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
   71|      2|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      2|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      2|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      0|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      2|    }
_RINvMNtCs3ONS7Rzjfqc_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCsbqtYJIZlK4w_5alloc3vec3VechEECs2ZhSipuJ38Z_13oxigraph_fuzz:
  140|    140|    pub fn serialize_solutions_to_write<W: Write>(
  141|    140|        &self,
  142|    140|        write: W,
  143|    140|        variables: Vec<Variable>,
  144|    140|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  145|    140|        Ok(ToWriteSolutionsWriter {
  146|    140|            formatter: match self.format {
  147|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  148|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  149|       |                ),
  150|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  151|    140|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  152|       |                ),
  153|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  154|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  155|       |                ),
  156|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  157|      0|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  158|       |                ),
  159|       |            },
  160|       |        })
  161|    140|    }
_RINvMs0_NtCs3ONS7Rzjfqc_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE5writeRNtNtCse77hlhKzJ8Y_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECs2ZhSipuJ38Z_13oxigraph_fuzz:
  286|  4.73k|    pub fn write<'a>(
  287|  4.73k|        &mut self,
  288|  4.73k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  289|  4.73k|    ) -> io::Result<()> {
  290|  4.73k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  291|  4.73k|        match &mut self.formatter {
  292|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  293|  4.73k|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  294|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  295|      0|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  296|       |        }
  297|  4.73k|    }
_RNvMs0_NtCs3ONS7Rzjfqc_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCsbqtYJIZlK4w_5alloc3vec3VechEE6finishCs2ZhSipuJ38Z_13oxigraph_fuzz:
  300|    140|    pub fn finish(self) -> io::Result<W> {
  301|    140|        match self.formatter {
  302|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  303|    140|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  304|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  305|      0|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  306|       |        }
  307|    140|    }
_RNvMNtCs3ONS7Rzjfqc_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs2ZhSipuJ38Z_13oxigraph_fuzz:
   55|  2.05k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  2.05k|        Self { format }
   57|  2.05k|    }

_RNvXs_NtCs3ONS7Rzjfqc_10sparesults8solutionNtB4_13QuerySolutionINtNtCs3enrnThfs6H_4core7convert4FromTINtNtCsbqtYJIZlK4w_5alloc4sync3ArcSNtNtCse77hlhKzJ8Y_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCs2ZhSipuJ38Z_13oxigraph_fuzz:
  120|  9.51k|    fn from((v, s): (V, S)) -> Self {
  121|  9.51k|        Self {
  122|  9.51k|            variables: v.into(),
  123|  9.51k|            values: s.into(),
  124|  9.51k|        }
  125|  9.51k|    }
_RNvMNtCs3ONS7Rzjfqc_10sparesults8solutionNtB2_13QuerySolution9variablesCs2ZhSipuJ38Z_13oxigraph_fuzz:
  113|    136|    pub fn variables(&self) -> &[Variable] {
  114|    136|        &self.variables
  115|    136|    }
_RNvXs0_NtCs3ONS7Rzjfqc_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCs3enrnThfs6H_4core4iter6traits7collect12IntoIterator9into_iterCs2ZhSipuJ38Z_13oxigraph_fuzz:
  133|  4.73k|    fn into_iter(self) -> Iter<'a> {
  134|  4.73k|        Iter {
  135|  4.73k|            inner: self.variables.iter().zip(&self.values),
  136|  4.73k|        }
  137|  4.73k|    }
_RNvXs9_NtCs3ONS7Rzjfqc_10sparesults8solutionNtB5_4IterNtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4nextCs2ZhSipuJ38Z_13oxigraph_fuzz:
  231|  4.73k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|  8.87k|        for (variable, value) in &mut self.inner {
  233|  4.13k|            if let Some(value) = value {
  234|      0|                return Some((variable, value));
  235|  4.13k|            }
  236|       |        }
  237|  4.73k|        None
  238|  4.73k|    }
_RNvMNtCs3ONS7Rzjfqc_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   85|  9.47k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   86|  9.47k|        self.into_iter()
   87|  9.47k|    }
_RNvXs0_NtCs3ONS7Rzjfqc_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCs3enrnThfs6H_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  133|  9.47k|    fn into_iter(self) -> Iter<'a> {
  134|  9.47k|        Iter {
  135|  9.47k|            inner: self.variables.iter().zip(&self.values),
  136|  9.47k|        }
  137|  9.47k|    }
_RNvXs6_NtCs3ONS7Rzjfqc_10sparesults8solutionNtB5_13QuerySolutionNtNtCs3enrnThfs6H_4core3cmp9PartialEq2eq:
  191|  4.73k|    fn eq(&self, other: &Self) -> bool {
  192|  4.73k|        for (k, v) in self.iter() {
  193|      0|            if other.get(k) != Some(v) {
  194|      0|                return false;
  195|      0|            }
  196|       |        }
  197|  4.73k|        for (k, v) in other.iter() {
  198|      0|            if self.get(k) != Some(v) {
  199|      0|                return false;
  200|      0|            }
  201|       |        }
  202|  4.73k|        true
  203|  4.73k|    }
_RNvXs9_NtCs3ONS7Rzjfqc_10sparesults8solutionNtB5_4IterNtNtNtNtCs3enrnThfs6H_4core4iter6traits8iterator8Iterator4nextB7_:
  231|  9.47k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|  17.7k|        for (variable, value) in &mut self.inner {
  233|  8.26k|            if let Some(value) = value {
  234|      0|                return Some((variable, value));
  235|  8.26k|            }
  236|       |        }
  237|  9.47k|        None
  238|  9.47k|    }









_RNvNtCs5JN3rnboZqJ_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  13.7k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  13.7k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|  12.0k|        return;
    9|       |    };
   10|  1.69k|    match reader {
   11|  1.69k|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|  1.69k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|    853|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|    840|            let mut writer = QueryResultsSerializer::from_format(format)
   18|    840|                .serialize_solutions_to_write(
   19|    840|                    Vec::new(),
   20|    840|                    solutions
   21|    840|                        .first()
   22|    840|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|    840|                )
   24|    840|                .unwrap();
   25|  10.1k|            for solution in &solutions {
   26|  9.30k|                writer.write(solution).unwrap();
   27|  9.30k|            }
   28|    840|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|    840|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|    840|                QueryResultsParser::from_format(format)
   33|    840|                    .parse_slice(&serialized)
   34|    840|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|    840|                    .unwrap()
   36|       |            {
   37|    840|                assert_eq!(
   38|    840|                    roundtrip_solutions
   39|    840|                        .collect::<Result<Vec<_>, _>>()
   40|    840|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|    840|                        .unwrap(),
   42|    840|                    solutions
   43|    840|                )
   44|      0|            }
   45|       |        }
   46|      2|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      2|            // We try to write again
   48|      2|            let mut serialized = Vec::new();
   49|      2|            QueryResultsSerializer::from_format(format)
   50|      2|                .serialize_boolean_to_write(&mut serialized, value)
   51|      2|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      2|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      2|                QueryResultsParser::from_format(format)
   56|      2|                    .parse_slice(&serialized)
   57|      2|                    .unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  13.7k|}
_RNCNvNtCs5JN3rnboZqJ_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|    829|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs3h5CtSje9kw_10sparesults:
   24|  69.2k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  69.2k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  69.2k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCs3h5CtSje9kw_10sparesults:
   29|  67.8k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  67.8k|        Self::new_unchecked(iri.into_inner())
   31|  67.8k|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  67.8k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  67.8k|        Self { iri: iri.into() }
   41|  67.8k|    }

_RINvMNtCsg6vp76A8CLh_5oxrdf8variableNtB3_8Variable3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs3h5CtSje9kw_10sparesults:
   22|  52.3k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  52.3k|        let name = name.into();
   24|  52.3k|        validate_variable_identifier(&name)?;
   25|  52.2k|        Ok(Self::new_unchecked(name))
   26|  52.3k|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf8variableNtB2_8Variable6as_refCs3h5CtSje9kw_10sparesults:
   50|     15|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|     15|        VariableRef { name: &self.name }
   52|     15|    }
_RNvMNtCsg6vp76A8CLh_5oxrdf8variableNtB2_8Variable6as_strCs3h5CtSje9kw_10sparesults:
   40|  76.7k|    pub fn as_str(&self) -> &str {
   41|  76.7k|        &self.name
   42|  76.7k|    }
_RNvXs1_NtCsg6vp76A8CLh_5oxrdf8variableNtB5_11VariableRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3h5CtSje9kw_10sparesults:
  116|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|     15|        write!(f, "?{}", self.name)
  118|     15|    }
_RNvXs_NtCsg6vp76A8CLh_5oxrdf8variableNtB4_8VariableNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs3h5CtSje9kw_10sparesults:
   57|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|     15|        self.as_ref().fmt(f)
   59|     15|    }
_RINvMNtCsg6vp76A8CLh_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   35|  52.2k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  52.2k|        Self { name: name.into() }
   37|  52.2k|    }
_RNvNtCsg6vp76A8CLh_5oxrdf8variable28validate_variable_identifier:
  163|  52.3k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  52.3k|    let mut chars = id.chars();
  165|  52.3k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  52.3k|    match front {
  167|  52.2k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  50.8k|        | 'A'..='Z'
  171|  35.4k|        | 'a'..='z'
  172|    235|        | '\u{00C0}'..='\u{00D6}'
  173|    235|        | '\u{00D8}'..='\u{00F6}'
  174|    235|        | '\u{00F8}'..='\u{02FF}'
  175|    223|        | '\u{0370}'..='\u{037D}'
  176|    223|        | '\u{037F}'..='\u{1FFF}'
  177|    188|        | '\u{200C}'..='\u{200D}'
  178|    188|        | '\u{2070}'..='\u{218F}'
  179|    188|        | '\u{2C00}'..='\u{2FEF}'
  180|    188|        | '\u{3001}'..='\u{D7FF}'
  181|    127|        | '\u{F900}'..='\u{FDCF}'
  182|    127|        | '\u{FDF0}'..='\u{FFFD}'
  183|  52.2k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      4|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|   245k|    for c in chars {
  187|   193k|        match c {
  188|   193k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  36.2k|            | '\u{0300}'..='\u{036F}'
  191|  27.2k|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|   181k|            | 'A'..='Z'
  194|   108k|            | 'a'..='z'
  195|  36.5k|            | '\u{00C0}'..='\u{00D6}'
  196|  36.5k|            | '\u{00D8}'..='\u{00F6}'
  197|  36.5k|            | '\u{00F8}'..='\u{02FF}'
  198|  36.2k|            | '\u{0370}'..='\u{037D}'
  199|  36.2k|            | '\u{037F}'..='\u{1FFF}'
  200|  27.2k|            | '\u{200C}'..='\u{200D}'
  201|  27.2k|            | '\u{2070}'..='\u{218F}'
  202|  26.8k|            | '\u{2C00}'..='\u{2FEF}'
  203|  26.8k|            | '\u{3001}'..='\u{D7FF}'
  204|  17.7k|            | '\u{F900}'..='\u{FDCF}'
  205|  17.7k|            | '\u{FDF0}'..='\u{FFFD}'
  206|   193k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      4|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  52.2k|    Ok(())
  211|  52.3k|}
_RNvXsr_NtCsg6vp76A8CLh_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  214|      9|#[derive(Debug, thiserror::Error)]

_RINvMs2_NtCs3h5CtSje9kw_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   87|  2.19k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|  2.19k|        Self(SyntaxErrorKind::Msg {
   89|  2.19k|            msg: msg.into(),
   90|  2.19k|            location: None,
   91|  2.19k|        })
   92|  2.19k|    }
_RINvMs2_NtCs3h5CtSje9kw_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|    224|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    224|        Self(SyntaxErrorKind::Msg {
   89|    224|            msg: msg.into(),
   90|    224|            location: None,
   91|    224|        })
   92|    224|    }
_RNvXs4_NtCs3h5CtSje9kw_10sparesults5errorNtB5_23QueryResultsSyntaxErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCsiS85MHDKMvU_17json_event_parser4read11SyntaxErrorE4from:
  147|  10.4k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  148|  10.4k|        Self(SyntaxErrorKind::Json(error))
  149|  10.4k|    }

_RINvMNtCs3h5CtSje9kw_10sparesults4jsonINtB3_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB36_22ToWriteSolutionsWriterB18_E5writeRNtNtCsg6vp76A8CLh_5oxrdf8variable8VariableRNtNtB48_6triple4TermRNtB2E_13QuerySolutionE0EECs5JN3rnboZqJ_13oxigraph_fuzz:
   61|  9.30k|    pub fn write<'a>(
   62|  9.30k|        &mut self,
   63|  9.30k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   64|  9.30k|    ) -> io::Result<()> {
   65|  9.30k|        let mut buffer = Vec::with_capacity(48);
   66|  9.30k|        self.inner.write(&mut buffer, solution);
   67|  9.30k|        Self::do_write(&mut self.writer, buffer)
   68|  9.30k|    }
_RINvMs_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_24InnerJsonSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2v_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCsg6vp76A8CLh_5oxrdf8variable8VariableRNtNtB42_6triple4TermRNtB23_13QuerySolutionE0EECs5JN3rnboZqJ_13oxigraph_fuzz:
  150|  9.30k|    fn write<'a>(
  151|  9.30k|        &self,
  152|  9.30k|        output: &mut Vec<JsonEvent<'a>>,
  153|  9.30k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  154|  9.30k|    ) {
  155|  9.30k|        output.push(JsonEvent::StartObject);
  156|  9.30k|        for (variable, value) in solution {
  157|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  158|      0|            write_json_term(output, value);
  159|      0|        }
  160|  9.30k|        output.push(JsonEvent::EndObject);
  161|  9.30k|    }
_RINvNtCs3h5CtSje9kw_10sparesults4json25write_boolean_json_resultQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs5JN3rnboZqJ_13oxigraph_fuzz:
   15|      2|pub fn write_boolean_json_result<W: Write>(write: W, value: bool) -> io::Result<W> {
   16|      2|    let mut writer = ToWriteJsonWriter::new(write);
   17|     14|    for event in inner_write_boolean_json_result(value) {
   18|     14|        writer.write_event(event)?;
   19|       |    }
   20|      2|    writer.finish()
   21|      2|}
_RNvMNtCs3h5CtSje9kw_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5startCs5JN3rnboZqJ_13oxigraph_fuzz:
   53|    840|    pub fn start(write: W, variables: &[Variable]) -> io::Result<Self> {
   54|    840|        let mut writer = ToWriteJsonWriter::new(write);
   55|    840|        let mut buffer = Vec::with_capacity(48);
   56|    840|        let inner = InnerJsonSolutionsWriter::start(&mut buffer, variables);
   57|    840|        Self::do_write(&mut writer, buffer)?;
   58|    840|        Ok(Self { inner, writer })
   59|    840|    }
_RNvMNtCs3h5CtSje9kw_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs5JN3rnboZqJ_13oxigraph_fuzz:
   70|    840|    pub fn finish(mut self) -> io::Result<W> {
   71|    840|        let mut buffer = Vec::with_capacity(4);
   72|    840|        self.inner.finish(&mut buffer);
   73|    840|        Self::do_write(&mut self.writer, buffer)?;
   74|    840|        self.writer.finish()
   75|    840|    }
_RNvMNtCs3h5CtSje9kw_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE8do_writeCs5JN3rnboZqJ_13oxigraph_fuzz:
   77|  10.9k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   78|  66.3k|        for event in output {
   79|  55.3k|            writer.write_event(event)?;
   80|       |        }
   81|  10.9k|        Ok(())
   82|  10.9k|    }
_RNvNtCs3h5CtSje9kw_10sparesults4json31inner_write_boolean_json_result:
   35|      2|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   36|      2|    [
   37|      2|        JsonEvent::StartObject,
   38|      2|        JsonEvent::ObjectKey("head".into()),
   39|      2|        JsonEvent::StartObject,
   40|      2|        JsonEvent::EndObject,
   41|      2|        JsonEvent::ObjectKey("boolean".into()),
   42|      2|        JsonEvent::Boolean(value),
   43|      2|        JsonEvent::EndObject,
   44|      2|    ]
   45|      2|}
_RNvMs_NtCs3h5CtSje9kw_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter5start:
  131|    840|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  132|    840|        output.push(JsonEvent::StartObject);
  133|    840|        output.push(JsonEvent::ObjectKey("head".into()));
  134|    840|        output.push(JsonEvent::StartObject);
  135|    840|        output.push(JsonEvent::ObjectKey("vars".into()));
  136|    840|        output.push(JsonEvent::StartArray);
  137|  25.8k|        for variable in variables {
  138|  24.9k|            output.push(JsonEvent::String(variable.as_str().into()));
  139|  24.9k|        }
  140|    840|        output.push(JsonEvent::EndArray);
  141|    840|        output.push(JsonEvent::EndObject);
  142|    840|        output.push(JsonEvent::ObjectKey("results".into()));
  143|    840|        output.push(JsonEvent::StartObject);
  144|    840|        output.push(JsonEvent::ObjectKey("bindings".into()));
  145|    840|        output.push(JsonEvent::StartArray);
  146|    840|        Self {}
  147|    840|    }
_RNvMs_NtCs3h5CtSje9kw_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter6finish:
  164|    840|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  165|    840|        output.push(JsonEvent::EndArray);
  166|    840|        output.push(JsonEvent::EndObject);
  167|    840|        output.push(JsonEvent::EndObject);
  168|    840|    }
_RNvMs2_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_31FromSliceJsonQueryResultsReader4read:
  344|  14.5k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  345|  14.5k|        let mut reader = FromBufferJsonReader::new(slice);
  346|  14.5k|        let mut inner = JsonInnerReader::new();
  347|       |        loop {
  348|  1.08M|            if let Some(result) = inner.read_event(reader.read_next_event()?)? {
  349|  2.53k|                return match result {
  350|       |                    JsonInnerQueryResults::Solutions {
  351|  2.53k|                        variables,
  352|  2.53k|                        solutions,
  353|  2.53k|                    } => Ok(Self::Solutions {
  354|  2.53k|                        variables,
  355|  2.53k|                        solutions: FromSliceJsonSolutionsReader {
  356|  2.53k|                            inner: solutions,
  357|  2.53k|                            reader,
  358|  2.53k|                        },
  359|  2.53k|                    }),
  360|      4|                    JsonInnerQueryResults::Boolean(value) => Ok(Self::Boolean(value)),
  361|       |                };
  362|  1.06M|            }
  363|       |        }
  364|  14.5k|    }
_RNvMs3_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_28FromSliceJsonSolutionsReader9read_next:
  373|  21.6k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  374|  21.6k|        match &mut self.inner {
  375|  11.5k|            JsonInnerSolutions::Reader(reader) => loop {
  376|  83.8k|                let event = self.reader.read_next_event()?;
  377|  83.3k|                if event == JsonEvent::Eof {
  378|    845|                    return Ok(None);
  379|  82.4k|                }
  380|  82.4k|                if let Some(result) = reader.read_event(event)? {
  381|  9.86k|                    return Ok(Some(result));
  382|  72.3k|                }
  383|       |            },
  384|  10.1k|            JsonInnerSolutions::Iterator(iter) => iter.next(),
  385|       |        }
  386|  21.6k|    }
_RNvMs4_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_15JsonInnerReader3new:
  448|  14.5k|    fn new() -> Self {
  449|  14.5k|        Self {
  450|  14.5k|            state: JsonInnerReaderState::Start,
  451|  14.5k|            variables: Vec::new(),
  452|  14.5k|            current_solution_variables: Vec::new(),
  453|  14.5k|            current_solution_values: Vec::new(),
  454|  14.5k|            solutions: Vec::new(),
  455|  14.5k|            vars_read: false,
  456|  14.5k|            solutions_read: false,
  457|  14.5k|        }
  458|  14.5k|    }
_RNvMs4_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_15JsonInnerReader10read_event:
  460|  1.07M|    fn read_event(
  461|  1.07M|        &mut self,
  462|  1.07M|        event: JsonEvent<'_>,
  463|  1.07M|    ) -> Result<Option<JsonInnerQueryResults>, QueryResultsSyntaxError> {
  464|  1.07M|        match &mut self.state {
  465|       |            JsonInnerReaderState::Start => {
  466|  11.4k|                if event == JsonEvent::StartObject {
  467|  11.3k|                    self.state = JsonInnerReaderState::InRootObject;
  468|  11.3k|                    Ok(None)
  469|       |                } else {
  470|    111|                    Err(QueryResultsSyntaxError::msg(
  471|    111|                        "SPARQL JSON results must be an object",
  472|    111|                    ))
  473|       |                }
  474|       |            }
  475|  78.2k|            JsonInnerReaderState::InRootObject => match event {
  476|  78.2k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  477|  78.2k|                    "head" => {
  478|  12.3k|                        self.state = JsonInnerReaderState::BeforeHead;
  479|  12.3k|                        Ok(None)
  480|       |                    }
  481|  65.8k|                    "results" => {
  482|  8.90k|                        self.state = JsonInnerReaderState::BeforeResults;
  483|  8.90k|                        Ok(None)
  484|       |                    }
  485|  56.9k|                    "boolean" => {
  486|      6|                        self.state = JsonInnerReaderState::BeforeBoolean;
  487|      6|                        Ok(None)
  488|       |                    }
  489|       |                    _ => {
  490|  56.9k|                        self.state = JsonInnerReaderState::Ignore {
  491|  56.9k|                            level: 0,
  492|  56.9k|                            after: JsonInnerReaderStateAfterIgnore::InRootObject,
  493|  56.9k|                        };
  494|  56.9k|                        Ok(None)
  495|       |                    }
  496|       |                },
  497|     22|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  498|     22|                    "SPARQL JSON results must contain a 'boolean' or a 'results' key",
  499|     22|                )),
  500|      0|                _ => unreachable!(),
  501|       |            },
  502|       |            JsonInnerReaderState::BeforeHead => {
  503|  12.3k|                if event == JsonEvent::StartObject {
  504|  12.3k|                    self.state = JsonInnerReaderState::InHead;
  505|  12.3k|                    Ok(None)
  506|       |                } else {
  507|      1|                    Err(QueryResultsSyntaxError::msg(
  508|      1|                        "SPARQL JSON results head must be an object",
  509|      1|                    ))
  510|       |                }
  511|       |            }
  512|  70.0k|            JsonInnerReaderState::InHead => match event {
  513|  59.3k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  514|  59.3k|                    "vars" => {
  515|  5.28k|                        self.state = JsonInnerReaderState::BeforeVars;
  516|  5.28k|                        self.vars_read = true;
  517|  5.28k|                        Ok(None)
  518|       |                    }
  519|  54.0k|                    "links" => {
  520|     24|                        self.state = JsonInnerReaderState::BeforeLinks;
  521|     24|                        Ok(None)
  522|       |                    }
  523|       |                    _ => {
  524|  54.0k|                        self.state = JsonInnerReaderState::Ignore {
  525|  54.0k|                            level: 0,
  526|  54.0k|                            after: JsonInnerReaderStateAfterIgnore::InHead,
  527|  54.0k|                        };
  528|  54.0k|                        Ok(None)
  529|       |                    }
  530|       |                },
  531|       |                JsonEvent::EndObject => {
  532|  10.7k|                    self.state = JsonInnerReaderState::InRootObject;
  533|  10.7k|                    Ok(None)
  534|       |                }
  535|      0|                _ => unreachable!(),
  536|       |            },
  537|       |            JsonInnerReaderState::BeforeVars => {
  538|  5.26k|                if event == JsonEvent::StartArray {
  539|  5.26k|                    self.state = JsonInnerReaderState::InVars;
  540|  5.26k|                    Ok(None)
  541|       |                } else {
  542|      1|                    Err(QueryResultsSyntaxError::msg(
  543|      1|                        "SPARQL JSON results vars must be an array",
  544|      1|                    ))
  545|       |                }
  546|       |            }
  547|  57.4k|            JsonInnerReaderState::InVars => match event {
  548|  52.3k|                JsonEvent::String(variable) => match Variable::new(variable.clone()) {
  549|  52.2k|                    Ok(var) => {
  550|  52.2k|                        if self.variables.contains(&var) {
  551|     15|                            return Err(QueryResultsSyntaxError::msg(format!(
  552|     15|                                "The variable {var} is declared twice"
  553|     15|                            )));
  554|  52.2k|                        }
  555|  52.2k|                        self.variables.push(var);
  556|  52.2k|                        Ok(None)
  557|       |                    }
  558|      9|                    Err(e) => Err(QueryResultsSyntaxError::msg(format!(
  559|      9|                        "Invalid variable name '{variable}': {e}"
  560|      9|                    ))),
  561|       |                },
  562|       |                JsonEvent::EndArray => {
  563|  5.12k|                    if self.solutions_read {
  564|    835|                        let mut mapping = BTreeMap::default();
  565|  24.9k|                        for (i, var) in self.variables.iter().enumerate() {
  566|  24.9k|                            mapping.insert(var.as_str().to_owned(), i);
  567|  24.9k|                        }
  568|    835|                        Ok(Some(JsonInnerQueryResults::Solutions {
  569|    835|                            variables: take(&mut self.variables),
  570|    835|                            solutions: JsonInnerSolutions::Iterator(
  571|    835|                                JsonBufferedSolutionsIterator {
  572|    835|                                    mapping,
  573|    835|                                    bindings: take(&mut self.solutions).into_iter(),
  574|    835|                                },
  575|    835|                            ),
  576|    835|                        }))
  577|       |                    } else {
  578|  4.29k|                        self.state = JsonInnerReaderState::InHead;
  579|  4.29k|                        Ok(None)
  580|       |                    }
  581|       |                }
  582|      1|                _ => Err(QueryResultsSyntaxError::msg(
  583|      1|                    "Variables name in the vars array must be strings",
  584|      1|                )),
  585|       |            },
  586|       |            JsonInnerReaderState::BeforeLinks => {
  587|     24|                if event == JsonEvent::StartArray {
  588|     23|                    self.state = JsonInnerReaderState::InLinks;
  589|     23|                    Ok(None)
  590|       |                } else {
  591|      1|                    Err(QueryResultsSyntaxError::msg(
  592|      1|                        "SPARQL JSON results links must be an array",
  593|      1|                    ))
  594|       |                }
  595|       |            }
  596|  1.62k|            JsonInnerReaderState::InLinks => match event {
  597|  1.62k|                JsonEvent::String(_) => Ok(None),
  598|       |                JsonEvent::EndArray => {
  599|      3|                    self.state = JsonInnerReaderState::InHead;
  600|      3|                    Ok(None)
  601|       |                }
  602|      1|                _ => Err(QueryResultsSyntaxError::msg(
  603|      1|                    "Links in the links array must be strings",
  604|      1|                )),
  605|       |            },
  606|       |            JsonInnerReaderState::BeforeResults => {
  607|  8.90k|                if event == JsonEvent::StartObject {
  608|  8.90k|                    self.state = JsonInnerReaderState::InResults;
  609|  8.90k|                    Ok(None)
  610|       |                } else {
  611|      1|                    Err(QueryResultsSyntaxError::msg(
  612|      1|                        "SPARQL JSON results result must be an object",
  613|      1|                    ))
  614|       |                }
  615|       |            }
  616|  27.7k|            JsonInnerReaderState::InResults => match event {
  617|  27.7k|                JsonEvent::ObjectKey(key) => {
  618|  27.7k|                    if key == "bindings" {
  619|  8.55k|                        self.state = JsonInnerReaderState::BeforeBindings;
  620|  8.55k|                        Ok(None)
  621|       |                    } else {
  622|  19.1k|                        self.state = JsonInnerReaderState::Ignore {
  623|  19.1k|                            level: 0,
  624|  19.1k|                            after: JsonInnerReaderStateAfterIgnore::InResults,
  625|  19.1k|                        };
  626|  19.1k|                        Ok(None)
  627|       |                    }
  628|       |                }
  629|     32|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  630|     32|                    "The results object must contains a 'bindings' key",
  631|     32|                )),
  632|      0|                _ => unreachable!(),
  633|       |            },
  634|       |            JsonInnerReaderState::BeforeBindings => {
  635|  8.55k|                if event == JsonEvent::StartArray {
  636|  8.55k|                    self.solutions_read = true;
  637|  8.55k|                    if self.vars_read {
  638|  1.69k|                        let mut mapping = BTreeMap::default();
  639|  26.8k|                        for (i, var) in self.variables.iter().enumerate() {
  640|  26.8k|                            mapping.insert(var.as_str().to_owned(), i);
  641|  26.8k|                        }
  642|  1.69k|                        Ok(Some(JsonInnerQueryResults::Solutions {
  643|  1.69k|                            variables: take(&mut self.variables),
  644|  1.69k|                            solutions: JsonInnerSolutions::Reader(JsonInnerSolutionsReader {
  645|  1.69k|                                state: JsonInnerSolutionsReaderState::BeforeSolution,
  646|  1.69k|                                mapping,
  647|  1.69k|                                new_bindings: Vec::new(),
  648|  1.69k|                            }),
  649|  1.69k|                        }))
  650|       |                    } else {
  651|  6.85k|                        self.state = JsonInnerReaderState::BeforeSolution;
  652|  6.85k|                        Ok(None)
  653|       |                    }
  654|       |                } else {
  655|      1|                    Err(QueryResultsSyntaxError::msg(
  656|      1|                        "SPARQL JSON results bindings must be an array",
  657|      1|                    ))
  658|       |                }
  659|       |            }
  660|  17.9k|            JsonInnerReaderState::BeforeSolution => match event {
  661|       |                JsonEvent::StartObject => {
  662|  14.8k|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  663|  14.8k|                    Ok(None)
  664|       |                }
  665|       |                JsonEvent::EndArray => {
  666|  3.02k|                    self.state = JsonInnerReaderState::AfterBindings;
  667|  3.02k|                    Ok(None)
  668|       |                }
  669|      1|                _ => Err(QueryResultsSyntaxError::msg(
  670|      1|                    "Expecting a new solution object",
  671|      1|                )),
  672|       |            },
  673|  14.8k|            JsonInnerReaderState::BetweenSolutionTerms => match event {
  674|  3.81k|                JsonEvent::ObjectKey(key) => {
  675|  3.81k|                    self.state = JsonInnerReaderState::Term {
  676|  3.81k|                        reader: JsonInnerTermReader::default(),
  677|  3.81k|                        variable: key.into(),
  678|  3.81k|                    };
  679|  3.81k|                    Ok(None)
  680|       |                }
  681|       |                JsonEvent::EndObject => {
  682|  11.0k|                    self.state = JsonInnerReaderState::BeforeSolution;
  683|  11.0k|                    self.solutions.push((
  684|  11.0k|                        take(&mut self.current_solution_variables),
  685|  11.0k|                        take(&mut self.current_solution_values),
  686|  11.0k|                    ));
  687|  11.0k|                    Ok(None)
  688|       |                }
  689|      0|                _ => unreachable!(),
  690|       |            },
  691|       |            JsonInnerReaderState::Term {
  692|   284k|                ref mut reader,
  693|   284k|                variable,
  694|   284k|            } => {
  695|   284k|                let result = reader.read_event(event);
  696|   284k|                if let Some(term) = result? {
  697|      0|                    self.current_solution_variables.push(take(variable));
  698|      0|                    self.current_solution_values.push(term);
  699|      0|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  700|   282k|                }
  701|   282k|                Ok(None)
  702|       |            }
  703|       |            JsonInnerReaderState::AfterBindings => {
  704|  22.5k|                if event == JsonEvent::EndObject {
  705|  2.77k|                    self.state = JsonInnerReaderState::InRootObject;
  706|  2.77k|                } else {
  707|  19.8k|                    self.state = JsonInnerReaderState::Ignore {
  708|  19.8k|                        level: 0,
  709|  19.8k|                        after: JsonInnerReaderStateAfterIgnore::AfterBindings,
  710|  19.8k|                    }
  711|       |                }
  712|  22.5k|                Ok(None)
  713|       |            }
  714|       |            JsonInnerReaderState::BeforeBoolean => {
  715|      5|                if let JsonEvent::Boolean(v) = event {
  716|      4|                    Ok(Some(JsonInnerQueryResults::Boolean(v)))
  717|       |                } else {
  718|      1|                    Err(QueryResultsSyntaxError::msg("Unexpected boolean value"))
  719|       |                }
  720|       |            }
  721|       |            #[allow(clippy::ref_patterns)]
  722|   451k|            JsonInnerReaderState::Ignore { level, ref after } => {
  723|   451k|                let level = match event {
  724|   119k|                    JsonEvent::StartArray | JsonEvent::StartObject => *level + 1,
  725|  47.1k|                    JsonEvent::EndArray | JsonEvent::EndObject => *level - 1,
  726|       |                    JsonEvent::String(_)
  727|       |                    | JsonEvent::Number(_)
  728|       |                    | JsonEvent::Boolean(_)
  729|       |                    | JsonEvent::Null
  730|       |                    | JsonEvent::ObjectKey(_)
  731|   284k|                    | JsonEvent::Eof => *level,
  732|       |                };
  733|   451k|                self.state = if level == 0 {
  734|   147k|                    match after {
  735|       |                        JsonInnerReaderStateAfterIgnore::InRootObject => {
  736|  55.1k|                            JsonInnerReaderState::InRootObject
  737|       |                        }
  738|  53.7k|                        JsonInnerReaderStateAfterIgnore::InHead => JsonInnerReaderState::InHead,
  739|       |                        JsonInnerReaderStateAfterIgnore::InResults => {
  740|  18.9k|                            JsonInnerReaderState::InResults
  741|       |                        }
  742|       |                        JsonInnerReaderStateAfterIgnore::AfterBindings => {
  743|  19.5k|                            JsonInnerReaderState::AfterBindings
  744|       |                        }
  745|       |                    }
  746|       |                } else {
  747|   303k|                    JsonInnerReaderState::Ignore {
  748|   303k|                        level,
  749|   303k|                        after: *after,
  750|   303k|                    }
  751|       |                };
  752|   451k|                Ok(None)
  753|       |            }
  754|       |        }
  755|  1.07M|    }
_RNvMs5_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_24JsonInnerSolutionsReader10read_event:
  775|  82.4k|    fn read_event(
  776|  82.4k|        &mut self,
  777|  82.4k|        event: JsonEvent<'_>,
  778|  82.4k|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  779|  82.4k|        match &mut self.state {
  780|  11.4k|            JsonInnerSolutionsReaderState::BeforeSolution => match event {
  781|       |                JsonEvent::StartObject => {
  782|  10.6k|                    self.state = JsonInnerSolutionsReaderState::BetweenSolutionTerms;
  783|  10.6k|                    self.new_bindings = vec![None; self.mapping.len()];
  784|  10.6k|                    Ok(None)
  785|       |                }
  786|       |                JsonEvent::EndArray => {
  787|    850|                    self.state = JsonInnerSolutionsReaderState::AfterEnd;
  788|    850|                    Ok(None)
  789|       |                }
  790|      3|                _ => Err(QueryResultsSyntaxError::msg(
  791|      3|                    "Expecting a new solution object",
  792|      3|                )),
  793|       |            },
  794|  10.6k|            JsonInnerSolutionsReaderState::BetweenSolutionTerms => match event {
  795|    764|                JsonEvent::ObjectKey(key) => {
  796|    764|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  797|       |                        QueryResultsSyntaxError::msg(format!(
  798|       |                            "The variable {key} has not been defined in the header"
  799|       |                        ))
  800|    764|                    })?;
  801|    754|                    self.state = JsonInnerSolutionsReaderState::Term {
  802|    754|                        reader: JsonInnerTermReader::default(),
  803|    754|                        key,
  804|    754|                    };
  805|    754|                    Ok(None)
  806|       |                }
  807|       |                JsonEvent::EndObject => {
  808|  9.86k|                    self.state = JsonInnerSolutionsReaderState::BeforeSolution;
  809|  9.86k|                    Ok(Some(take(&mut self.new_bindings)))
  810|       |                }
  811|      0|                _ => unreachable!(),
  812|       |            },
  813|       |            JsonInnerSolutionsReaderState::Term {
  814|  58.6k|                ref mut reader,
  815|  58.6k|                key,
  816|  58.6k|            } => {
  817|  58.6k|                let result = reader.read_event(event);
  818|  58.6k|                if let Some(term) = result? {
  819|      0|                    self.new_bindings[*key] = Some(term);
  820|      0|                    self.state = JsonInnerSolutionsReaderState::BetweenSolutionTerms;
  821|  58.3k|                }
  822|  58.3k|                Ok(None)
  823|       |            }
  824|       |            JsonInnerSolutionsReaderState::AfterEnd => {
  825|  1.69k|                if event == JsonEvent::EndObject {
  826|  1.69k|                    Ok(None)
  827|       |                } else {
  828|      2|                    Err(QueryResultsSyntaxError::msg(
  829|      2|                        "Unexpected JSON after the end of the bindings array",
  830|      2|                    ))
  831|       |                }
  832|       |            }
  833|       |        }
  834|  82.4k|    }
_RNvMs6_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_19JsonInnerTermReader10read_event:
  880|  6.55M|    fn read_event(
  881|  6.55M|        &mut self,
  882|  6.55M|        event: JsonEvent<'_>,
  883|  6.55M|    ) -> Result<Option<Term>, QueryResultsSyntaxError> {
  884|  6.55M|        match &mut self.state {
  885|       |            JsonInnerTermReaderState::Start => {
  886|  44.4k|                if event == JsonEvent::StartObject {
  887|  44.4k|                    self.state = JsonInnerTermReaderState::Middle;
  888|  44.4k|                    Ok(None)
  889|       |                } else {
  890|     33|                    Err(QueryResultsSyntaxError::msg(
  891|     33|                        "RDF terms must be encoded using objects",
  892|     33|                    ))
  893|       |                }
  894|       |            }
  895|   129k|            JsonInnerTermReaderState::Middle => match event {
  896|   129k|                JsonEvent::ObjectKey(object_key) => {
  897|   129k|                    self.state = match object_key.as_ref() {
  898|   129k|                        "type" => JsonInnerTermReaderState::TermType,
  899|   129k|                        "value" => JsonInnerTermReaderState::Value,
  900|  72.7k|                        "datatype" => JsonInnerTermReaderState::Datatype,
  901|  3.25k|                        "xml:lang" => JsonInnerTermReaderState::Lang,
  902|       |                        _ => {
  903|    680|                            return Err(QueryResultsSyntaxError::msg(format!(
  904|    680|                                "Unsupported term key: {object_key}"
  905|    680|                            )));
  906|       |                        }
  907|       |                    };
  908|   128k|                    Ok(None)
  909|       |                }
  910|       |                JsonEvent::EndObject => {
  911|      5|                    self.state = JsonInnerTermReaderState::Start;
  912|      5|                    match self.term_type.take() {
  913|      1|                        None => Err(QueryResultsSyntaxError::msg(
  914|      1|                            "Term serialization should have a 'type' key",
  915|      1|                        )),
  916|       |                        Some(TermType::Uri) => Ok(Some(
  917|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  918|       |                                QueryResultsSyntaxError::msg(
  919|       |                                    "uri serialization should have a 'value' key",
  920|       |                                )
  921|      1|                            })?)
  922|      0|                            .map_err(|e| {
  923|       |                                QueryResultsSyntaxError::msg(format!("Invalid uri value: {e}"))
  924|      0|                            })?
  925|      0|                            .into(),
  926|       |                        )),
  927|       |                        Some(TermType::BNode) => Ok(Some(
  928|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  929|       |                                QueryResultsSyntaxError::msg(
  930|       |                                    "bnode serialization should have a 'value' key",
  931|       |                                )
  932|      1|                            })?)
  933|      0|                            .map_err(|e| {
  934|       |                                QueryResultsSyntaxError::msg(format!("Invalid bnode value: {e}"))
  935|      0|                            })?
  936|      0|                            .into(),
  937|       |                        )),
  938|       |                        Some(TermType::Literal) => {
  939|      1|                            let value = self.value.take().ok_or_else(|| {
  940|       |                                QueryResultsSyntaxError::msg(
  941|       |                                    "literal serialization should have a 'value' key",
  942|       |                                )
  943|      1|                            })?;
  944|      0|                            Ok(Some(match self.lang.take() {
  945|      0|                                    Some(lang) => {
  946|      0|                                        if let Some(datatype) = &self.datatype {
  947|      0|                                            if datatype.as_ref() != rdf::LANG_STRING {
  948|      0|                                                return Err(QueryResultsSyntaxError::msg(format!(
  949|      0|                                                    "xml:lang value '{lang}' provided with the datatype {datatype}"
  950|      0|                                                )));
  951|      0|                                            }
  952|      0|                                        }
  953|      0|                                        Literal::new_language_tagged_literal(value, &*lang)
  954|      0|                                            .map_err(|e| {
  955|       |                                                QueryResultsSyntaxError::msg(format!(
  956|       |                                                    "Invalid xml:lang value '{lang}': {e}"
  957|       |                                                ))
  958|      0|                                            })?
  959|       |                                    }
  960|       |                                    None => {
  961|      0|                                        if let Some(datatype) = self.datatype.take() {
  962|      0|                                            Literal::new_typed_literal(value, datatype)
  963|       |                                        } else {
  964|      0|                                            Literal::new_simple_literal(value)
  965|       |                                        }
  966|       |                                    }
  967|      0|                                }.into()))
  968|       |                        }
  969|       |                        #[cfg(feature = "rdf-star")]
  970|       |                        Some(TermType::Triple) => Ok(Some(
  971|       |                            Triple::new(
  972|      1|                                match self.subject.take().ok_or_else(|| {
  973|       |                                    QueryResultsSyntaxError::msg(
  974|       |                                        "triple serialization should have a 'subject' key",
  975|       |                                    )
  976|      1|                                })? {
  977|      0|                                    Term::NamedNode(subject) => subject.into(),
  978|      0|                                    Term::BlankNode(subject) => subject.into(),
  979|      0|                                    Term::Triple(subject) => Subject::Triple(subject),
  980|       |                                    Term::Literal(_) => {
  981|      0|                                        return Err(QueryResultsSyntaxError::msg(
  982|      0|                                            "The 'subject' value should not be a literal",
  983|      0|                                        ));
  984|       |                                    }
  985|       |                                },
  986|      0|                                match self.predicate.take().ok_or_else(|| {
  987|       |                                    QueryResultsSyntaxError::msg(
  988|       |                                        "triple serialization should have a 'predicate' key",
  989|       |                                    )
  990|      0|                                })? {
  991|      0|                                    Term::NamedNode(predicate) => predicate,
  992|       |                                    _ => {
  993|      0|                                        return Err(QueryResultsSyntaxError::msg(
  994|      0|                                            "The 'predicate' value should be a uri",
  995|      0|                                        ));
  996|       |                                    }
  997|       |                                },
  998|      0|                                self.object.take().ok_or_else(|| {
  999|       |                                    QueryResultsSyntaxError::msg(
 1000|       |                                        "triple serialization should have a 'object' key",
 1001|       |                                    )
 1002|      0|                                })?,
 1003|       |                            )
 1004|      0|                            .into(),
 1005|       |                        )),
 1006|       |                    }
 1007|       |                }
 1008|      0|                _ => unreachable!(),
 1009|       |            },
 1010|       |            JsonInnerTermReaderState::TermType => {
 1011|    171|                self.state = JsonInnerTermReaderState::Middle;
 1012|    171|                if let JsonEvent::String(value) = event {
 1013|    167|                    match value.as_ref() {
 1014|    167|                        "uri" => {
 1015|     91|                            self.term_type = Some(TermType::Uri);
 1016|     91|                            Ok(None)
 1017|       |                        }
 1018|     76|                        "bnode" => {
 1019|     19|                            self.term_type = Some(TermType::BNode);
 1020|     19|                            Ok(None)
 1021|       |                        }
 1022|     57|                        "literal" | "typed-literal" => {
 1023|     30|                            self.term_type = Some(TermType::Literal);
 1024|     30|                            Ok(None)
 1025|       |                        }
 1026|       |                        #[cfg(feature = "rdf-star")]
 1027|     27|                        "triple" => {
 1028|     20|                            self.term_type = Some(TermType::Triple);
 1029|     20|                            Ok(None)
 1030|       |                        }
 1031|      7|                        _ => Err(QueryResultsSyntaxError::msg(format!(
 1032|      7|                            "Unexpected term type: '{value}'"
 1033|      7|                        ))),
 1034|       |                    }
 1035|       |                } else {
 1036|      4|                    Err(QueryResultsSyntaxError::msg("Term type must be a string"))
 1037|       |                }
 1038|       |            }
 1039|  56.5k|            JsonInnerTermReaderState::Value => match event {
 1040|  16.3k|                JsonEvent::String(value) => {
 1041|  16.3k|                    self.value = Some(value.into_owned());
 1042|  16.3k|                    self.state = JsonInnerTermReaderState::Middle;
 1043|  16.3k|                    Ok(None)
 1044|       |                }
 1045|       |                #[cfg(feature = "rdf-star")]
 1046|       |                JsonEvent::StartObject => {
 1047|  40.2k|                    self.state = JsonInnerTermReaderState::InValue;
 1048|  40.2k|                    Ok(None)
 1049|       |                }
 1050|       |                _ => {
 1051|      1|                    self.state = JsonInnerTermReaderState::Middle;
 1052|      1|
 1053|      1|                    Err(QueryResultsSyntaxError::msg("Term value must be a string"))
 1054|       |                }
 1055|       |            },
 1056|       |            JsonInnerTermReaderState::Lang => {
 1057|  2.56k|                let result = if let JsonEvent::String(value) = event {
 1058|  2.56k|                    self.lang = Some(value.into_owned());
 1059|  2.56k|                    Ok(None)
 1060|       |                } else {
 1061|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1062|       |                };
 1063|  2.56k|                self.state = JsonInnerTermReaderState::Middle;
 1064|  2.56k|
 1065|  2.56k|                result
 1066|       |            }
 1067|       |            JsonInnerTermReaderState::Datatype => {
 1068|  69.2k|                let result = if let JsonEvent::String(value) = event {
 1069|  69.2k|                    match NamedNode::new(value) {
 1070|  67.8k|                        Ok(datatype) => {
 1071|  67.8k|                            self.datatype = Some(datatype);
 1072|  67.8k|                            Ok(None)
 1073|       |                        }
 1074|  1.40k|                        Err(e) => Err(QueryResultsSyntaxError::msg(format!(
 1075|  1.40k|                            "Invalid datatype: {e}"
 1076|  1.40k|                        ))),
 1077|       |                    }
 1078|       |                } else {
 1079|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1080|       |                };
 1081|  69.2k|                self.state = JsonInnerTermReaderState::Middle;
 1082|  69.2k|
 1083|  69.2k|                result
 1084|       |            }
 1085|       |            #[cfg(feature = "rdf-star")]
 1086|  40.2k|            JsonInnerTermReaderState::InValue => match event {
 1087|  40.1k|                JsonEvent::ObjectKey(object_key) => {
 1088|  40.1k|                    self.state = match object_key.as_ref() {
 1089|  40.1k|                        "subject" => JsonInnerTermReaderState::Subject(Box::default()),
 1090|  39.3k|                        "predicate" => JsonInnerTermReaderState::Predicate(Box::default()),
 1091|  1.02k|                        "object" => JsonInnerTermReaderState::Object(Box::default()),
 1092|       |                        _ => {
 1093|     69|                            return Err(QueryResultsSyntaxError::msg(format!(
 1094|     69|                                "Unsupported value key: {object_key}"
 1095|     69|                            )));
 1096|       |                        }
 1097|       |                    };
 1098|  40.0k|                    Ok(None)
 1099|       |                }
 1100|       |                JsonEvent::EndObject => {
 1101|     66|                    self.state = JsonInnerTermReaderState::Middle;
 1102|     66|                    Ok(None)
 1103|       |                }
 1104|      0|                _ => unreachable!(),
 1105|       |            },
 1106|       |            #[cfg(feature = "rdf-star")]
 1107|  23.7k|            JsonInnerTermReaderState::Subject(ref mut inner_state) => {
 1108|  23.7k|                if let Some(term) = inner_state.read_event(event)? {
 1109|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1110|      0|                    self.subject = Some(term);
 1111|  23.4k|                }
 1112|  23.4k|                Ok(None)
 1113|       |            }
 1114|       |            #[cfg(feature = "rdf-star")]
 1115|  6.11M|            JsonInnerTermReaderState::Predicate(ref mut inner_state) => {
 1116|  6.11M|                if let Some(term) = inner_state.read_event(event)? {
 1117|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1118|      0|                    self.predicate = Some(term);
 1119|  6.09M|                }
 1120|  6.09M|                Ok(None)
 1121|       |            }
 1122|       |            #[cfg(feature = "rdf-star")]
 1123|  80.6k|            JsonInnerTermReaderState::Object(ref mut inner_state) => {
 1124|  80.6k|                if let Some(term) = inner_state.read_event(event)? {
 1125|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1126|      0|                    self.object = Some(term);
 1127|  80.1k|                }
 1128|  80.1k|                Ok(None)
 1129|       |            }
 1130|       |        }
 1131|  6.55M|    }
_RNvMs7_NtCs3h5CtSje9kw_10sparesults4jsonNtB5_29JsonBufferedSolutionsIterator4next:
 1140|  10.1k|    fn next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
 1141|  10.1k|        let Some((variables, values)) = self.bindings.next() else {
 1142|    835|            return Ok(None);
 1143|       |        };
 1144|  9.30k|        let mut new_bindings = vec![None; self.mapping.len()];
 1145|  9.30k|        for (variable, value) in variables.into_iter().zip(values) {
 1146|      0|            let k = *self.mapping.get(&variable).ok_or_else(|| {
 1147|       |                QueryResultsSyntaxError::msg(format!(
 1148|       |                    "The variable {variable} has not been defined in the header"
 1149|       |                ))
 1150|      0|            })?;
 1151|      0|            new_bindings[k] = Some(value);
 1152|       |        }
 1153|  9.30k|        Ok(Some(new_bindings))
 1154|  10.1k|    }
_RNCNvMs5_NtCs3h5CtSje9kw_10sparesults4jsonNtB7_24JsonInnerSolutionsReader10read_event0B9_:
  796|     10|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  797|     10|                        QueryResultsSyntaxError::msg(format!(
  798|     10|                            "The variable {key} has not been defined in the header"
  799|     10|                        ))
  800|     10|                    })?;
_RNCNvMs6_NtCs3h5CtSje9kw_10sparesults4jsonNtB7_19JsonInnerTermReader10read_event0B9_:
  917|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  918|      1|                                QueryResultsSyntaxError::msg(
  919|      1|                                    "uri serialization should have a 'value' key",
  920|      1|                                )
  921|      1|                            })?)
_RNCNvMs6_NtCs3h5CtSje9kw_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events0_0B9_:
  928|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  929|      1|                                QueryResultsSyntaxError::msg(
  930|      1|                                    "bnode serialization should have a 'value' key",
  931|      1|                                )
  932|      1|                            })?)
_RNCNvMs6_NtCs3h5CtSje9kw_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events2_0B9_:
  939|      1|                            let value = self.value.take().ok_or_else(|| {
  940|      1|                                QueryResultsSyntaxError::msg(
  941|      1|                                    "literal serialization should have a 'value' key",
  942|      1|                                )
  943|      1|                            })?;
_RNCNvMs6_NtCs3h5CtSje9kw_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events4_0B9_:
  972|      1|                                match self.subject.take().ok_or_else(|| {
  973|      1|                                    QueryResultsSyntaxError::msg(
  974|      1|                                        "triple serialization should have a 'subject' key",
  975|      1|                                    )
  976|      1|                                })? {

_RNvMNtCs3h5CtSje9kw_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs5JN3rnboZqJ_13oxigraph_fuzz:
   65|  14.5k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  14.5k|        Self { format }
   67|  14.5k|    }
_RNvMNtCs3h5CtSje9kw_10sparesults6parserNtB2_18QueryResultsParser11parse_slice:
  234|  14.5k|    pub fn parse_slice(
  235|  14.5k|        self,
  236|  14.5k|        slice: &[u8],
  237|  14.5k|    ) -> Result<FromSliceQueryResultsReader<'_>, QueryResultsSyntaxError> {
  238|  14.5k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match FromSliceXmlQueryResultsReader::read(slice)? {
  240|      0|                FromSliceXmlQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  241|       |                FromSliceXmlQueryResultsReader::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: FromSliceSolutionsReaderKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|  14.5k|            QueryResultsFormat::Json => match FromSliceJsonQueryResultsReader::read(slice)? {
  250|      4|                FromSliceJsonQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  251|       |                FromSliceJsonQueryResultsReader::Solutions {
  252|  2.53k|                    solutions,
  253|  2.53k|                    variables,
  254|  2.53k|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  255|  2.53k|                    variables: variables.into(),
  256|  2.53k|                    solutions: FromSliceSolutionsReaderKind::Json(solutions),
  257|  2.53k|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|      0|            QueryResultsFormat::Tsv => match FromSliceTsvQueryResultsReader::read(slice)? {
  261|      0|                FromSliceTsvQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  262|       |                FromSliceTsvQueryResultsReader::Solutions {
  263|      0|                    solutions,
  264|      0|                    variables,
  265|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  266|      0|                    variables: variables.into(),
  267|      0|                    solutions: FromSliceSolutionsReaderKind::Tsv(solutions),
  268|      0|                }),
  269|       |            },
  270|       |        })
  271|  14.5k|    }
_RNvXs3_NtCs3h5CtSje9kw_10sparesults6parserNtB5_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  642|  21.6k|    fn next(&mut self) -> Option<Self::Item> {
  643|  21.6k|        Some(
  644|  21.6k|            match &mut self.solutions {
  645|      0|                FromSliceSolutionsReaderKind::Xml(reader) => reader.read_next(),
  646|  21.6k|                FromSliceSolutionsReaderKind::Json(reader) => reader.read_next(),
  647|      0|                FromSliceSolutionsReaderKind::Tsv(reader) => reader.read_next(),
  648|       |            }
  649|  21.6k|            .transpose()?
  650|  20.0k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|       |        )
  652|  21.6k|    }
_RNCNvXs3_NtCs3h5CtSje9kw_10sparesults6parserNtB7_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  19.1k|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RINvMNtCs3h5CtSje9kw_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs5JN3rnboZqJ_13oxigraph_fuzz:
   73|      2|    pub fn serialize_boolean_to_write<W: Write>(self, write: W, value: bool) -> io::Result<W> {
   74|      2|        match self.format {
   75|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   76|      2|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   77|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   78|      0|                write_boolean_csv_result(write, value)
   79|       |            }
   80|       |        }
   81|      2|    }
_RINvMNtCs3h5CtSje9kw_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECs5JN3rnboZqJ_13oxigraph_fuzz:
  144|    840|    pub fn serialize_solutions_to_write<W: Write>(
  145|    840|        self,
  146|    840|        write: W,
  147|    840|        variables: Vec<Variable>,
  148|    840|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  149|    840|        Ok(ToWriteSolutionsWriter {
  150|    840|            formatter: match self.format {
  151|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  152|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  153|       |                ),
  154|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  155|    840|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  156|       |                ),
  157|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  158|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  159|       |                ),
  160|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  161|      0|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  162|       |                ),
  163|       |            },
  164|       |        })
  165|    840|    }
_RINvMs0_NtCs3h5CtSje9kw_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCsg6vp76A8CLh_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECs5JN3rnboZqJ_13oxigraph_fuzz:
  302|  9.30k|    pub fn write<'a>(
  303|  9.30k|        &mut self,
  304|  9.30k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  305|  9.30k|    ) -> io::Result<()> {
  306|  9.30k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  307|  9.30k|        match &mut self.formatter {
  308|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  309|  9.30k|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  310|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  311|      0|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  312|       |        }
  313|  9.30k|    }
_RNvMs0_NtCs3h5CtSje9kw_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCs5JN3rnboZqJ_13oxigraph_fuzz:
  316|    840|    pub fn finish(self) -> io::Result<W> {
  317|    840|        match self.formatter {
  318|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  319|    840|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  320|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  321|      0|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  322|       |        }
  323|    840|    }
_RNvMNtCs3h5CtSje9kw_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs5JN3rnboZqJ_13oxigraph_fuzz:
   57|    842|    pub fn from_format(format: QueryResultsFormat) -> Self {
   58|    842|        Self { format }
   59|    842|    }

_RNvMNtCs3h5CtSje9kw_10sparesults8solutionNtB2_13QuerySolution9variablesCs5JN3rnboZqJ_13oxigraph_fuzz:
  158|    829|    pub fn variables(&self) -> &[Variable] {
  159|    829|        &self.variables
  160|    829|    }
_RNvXs0_NtCs3h5CtSje9kw_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterCs5JN3rnboZqJ_13oxigraph_fuzz:
  178|  9.30k|    fn into_iter(self) -> Self::IntoIter {
  179|  9.30k|        Iter {
  180|  9.30k|            inner: self.variables.iter().zip(&self.values),
  181|  9.30k|        }
  182|  9.30k|    }
_RNvXs9_NtCs3h5CtSje9kw_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCs5JN3rnboZqJ_13oxigraph_fuzz:
  285|  9.30k|    fn next(&mut self) -> Option<Self::Item> {
  286|  86.1k|        for (variable, value) in &mut self.inner {
  287|  76.8k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|  76.8k|            }
  290|       |        }
  291|  9.30k|        None
  292|  9.30k|    }
_RNvMNtCs3h5CtSje9kw_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  18.6k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  18.6k|        self.into_iter()
  114|  18.6k|    }
_RNvXs0_NtCs3h5CtSje9kw_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  18.6k|    fn into_iter(self) -> Self::IntoIter {
  179|  18.6k|        Iter {
  180|  18.6k|            inner: self.variables.iter().zip(&self.values),
  181|  18.6k|        }
  182|  18.6k|    }
_RNvXs6_NtCs3h5CtSje9kw_10sparesults8solutionNtB5_13QuerySolutionNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  236|  9.30k|    fn eq(&self, other: &Self) -> bool {
  237|  9.30k|        for (k, v) in self.iter() {
  238|      0|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|      0|            }
  241|       |        }
  242|  9.30k|        for (k, v) in other.iter() {
  243|      0|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|      0|            }
  246|       |        }
  247|  9.30k|        true
  248|  9.30k|    }
_RNvXs9_NtCs3h5CtSje9kw_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  18.6k|    fn next(&mut self) -> Option<Self::Item> {
  286|   172k|        for (variable, value) in &mut self.inner {
  287|   153k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|   153k|            }
  290|       |        }
  291|  18.6k|        None
  292|  18.6k|    }
_RNvXs_NtCs3h5CtSje9kw_10sparesults8solutionNtB4_13QuerySolutionINtNtCscdEvteftVc2_4core7convert4FromTINtNtCs3OstG5Tqy1X_5alloc4sync3ArcSNtNtCsg6vp76A8CLh_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  19.1k|    fn from((v, s): (V, S)) -> Self {
  166|  19.1k|        Self {
  167|  19.1k|            variables: v.into(),
  168|  19.1k|            values: s.into(),
  169|  19.1k|        }
  170|  19.1k|    }


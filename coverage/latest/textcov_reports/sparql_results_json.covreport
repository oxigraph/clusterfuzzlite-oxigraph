_RINvXNtCsh3fiNsjK1jg_6anyhow7contextINtNtCs9nhK3FOW46N_4core6result6ResultINtNtCsi7rvRgybzn0_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error22QueryResultsParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCsjOdcKtOMjJI_5alloc6string6StringNCNvNtCscEMhoEbPSQt_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4e_:
   58|    293|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    293|    where
   60|    293|        C: Display + Send + Sync + 'static,
   61|    293|        F: FnOnce() -> C,
   62|    293|    {
   63|    293|        match self {
   64|    293|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    293|    }
_RINvXNtCsh3fiNsjK1jg_6anyhow7contextINtNtCs9nhK3FOW46N_4core6result6ResultINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtNtCsi7rvRgybzn0_10sparesults8solution13QuerySolutionENtNtB1L_5error22QueryResultsParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCscEMhoEbPSQt_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4g_:
   58|    293|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    293|    where
   60|    293|        C: Display + Send + Sync + 'static,
   61|    293|        F: FnOnce() -> C,
   62|    293|    {
   63|    293|        match self {
   64|    293|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    293|    }

_RNvXs1_CsbIuTKEyAQ2U_17json_event_parserNtB5_9JsonEventNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCscEMhoEbPSQt_13oxigraph_fuzz:
   29|  14.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1_CsbIuTKEyAQ2U_17json_event_parserNtB5_9JsonEventNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi7rvRgybzn0_10sparesults:
   29|  25.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNvXs8_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_10ParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_11SyntaxErrorE4fromCscEMhoEbPSQt_13oxigraph_fuzz:
 1209|  2.22k|    fn from(error: SyntaxError) -> Self {
 1210|  2.22k|        Self::Syntax(error)
 1211|  2.22k|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser4readINtB2_18FromReadJsonReaderRShE3newCscEMhoEbPSQt_13oxigraph_fuzz:
   40|  3.78k|    pub const fn new(read: R) -> Self {
   41|  3.78k|        Self {
   42|  3.78k|            input_buffer: Vec::new(),
   43|  3.78k|            input_buffer_start: 0,
   44|  3.78k|            input_buffer_end: 0,
   45|  3.78k|            max_buffer_size: MAX_BUFFER_SIZE,
   46|  3.78k|            is_ending: false,
   47|  3.78k|            read,
   48|  3.78k|            parser: LowLevelJsonReader::new(),
   49|  3.78k|        }
   50|  3.78k|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser4readINtB2_18FromReadJsonReaderRShE15read_next_eventCscEMhoEbPSQt_13oxigraph_fuzz:
   58|   231k|    pub fn read_next_event(&mut self) -> Result<JsonEvent<'_>, ParseError> {
   59|       |        loop {
   60|       |            {
   61|       |                let LowLevelJsonReaderResult {
   62|   237k|                    event,
   63|   237k|                    consumed_bytes,
   64|   237k|                } = self.parser.read_next_event(
   65|   237k|                    #[allow(unsafe_code)]
   66|   237k|                    unsafe {
   67|   237k|                        let input_buffer_ptr: *const [u8] =
   68|   237k|                            &self.input_buffer[self.input_buffer_start..self.input_buffer_end];
   69|   237k|                        &*input_buffer_ptr
   70|   237k|                    }, // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
   71|   237k|                    self.is_ending,
   72|   237k|                );
   73|   237k|                self.input_buffer_start += consumed_bytes;
   74|   237k|                if let Some(event) = event {
   75|   231k|                    return Ok(event?);
   76|  5.73k|                }
   77|  5.73k|            }
   78|  5.73k|            if self.input_buffer_start > 0 {
   79|  1.41k|                self.input_buffer
   80|  1.41k|                    .copy_within(self.input_buffer_start..self.input_buffer_end, 0);
   81|  1.41k|                self.input_buffer_end -= self.input_buffer_start;
   82|  1.41k|                self.input_buffer_start = 0;
   83|  4.31k|            }
   84|  5.73k|            if self.input_buffer.len() == self.max_buffer_size {
   85|      0|                return Err(io::Error::new(
   86|      0|                    io::ErrorKind::OutOfMemory,
   87|      0|                    format!(
   88|      0|                        "Reached the buffer maximal size of {}",
   89|      0|                        self.max_buffer_size
   90|      0|                    ),
   91|      0|                )
   92|      0|                .into());
   93|  5.73k|            }
   94|  5.73k|            let min_end = min(
   95|  5.73k|                self.input_buffer_end + MIN_BUFFER_SIZE,
   96|  5.73k|                self.max_buffer_size,
   97|  5.73k|            );
   98|  5.73k|            if self.input_buffer.len() < min_end {
   99|  4.69k|                self.input_buffer.resize(min_end, 0);
  100|  4.69k|            }
  101|  5.73k|            if self.input_buffer.len() < self.input_buffer.capacity() {
  102|    904|                // We keep extending to have as much space as available without reallocation
  103|    904|                self.input_buffer.resize(self.input_buffer.capacity(), 0);
  104|  4.82k|            }
  105|  5.73k|            let read = self
  106|  5.73k|                .read
  107|  5.73k|                .read(&mut self.input_buffer[self.input_buffer_end..])?;
  108|  5.73k|            self.input_buffer_end += read;
  109|  5.73k|            self.is_ending = read == 0;
  110|       |        }
  111|   231k|    }
_RNCNvNtCsbIuTKEyAQ2U_17json_event_parser4read11read_digits0B5_:
 1070|  7.05k|        .take_while(|c| c.is_ascii_digit())
_RNCNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_18LowLevelJsonReader15read_next_event0B9_:
  350|    940|                    let error = error.map(|e| {
  351|    940|                        self.lexer.syntax_error(
  352|    940|                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|    940|                            e,
  354|    940|                        )
  355|    940|                    });
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_numbers_0B9_:
  949|  4.38k|            |c| Some(Some(*c)),
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_number0B9_:
  948|     35|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_strings5_0B9_:
  875|    113|                    error = error.or_else(|| {
  876|    113|                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|    113|                        Some(self.syntax_error(
  878|    113|                            pos..pos + 1,
  879|    113|                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|    113|                        ))
  881|    113|                    });
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_numbers0_0B9_:
  970|     38|            || if is_ending { Some(None) } else { None },
_RNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_9JsonLexer11read_string:
  680|   135k|    fn read_string<'a>(
  681|   135k|        &mut self,
  682|   135k|        input_buffer: &'a [u8],
  683|   135k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  684|   135k|        let mut error = None;
  685|   135k|        let mut string: Option<(String, usize)> = None;
  686|   135k|        let mut next_byte_offset = 1;
  687|       |        loop {
  688|  1.06M|            match *input_buffer.get(next_byte_offset)? {
  689|       |                b'"' => {
  690|       |                    // end of string
  691|   133k|                    let result = Some(if let Some(error) = error {
  692|     99|                        Err(error)
  693|   133k|                    } else if let Some((mut string, read_until)) = string {
  694|  20.1k|                        if read_until < next_byte_offset {
  695|  16.0k|                            let (str, e) = self.decode_utf8(
  696|  16.0k|                                &input_buffer[read_until..next_byte_offset],
  697|  16.0k|                                self.file_offset + u64::try_from(read_until).unwrap(),
  698|  16.0k|                            );
  699|  16.0k|                            error = error.or(e);
  700|  16.0k|                            string.push_str(&str);
  701|  16.0k|                        }
  702|  20.1k|                        if let Some(error) = error {
  703|      5|                            Err(error)
  704|       |                        } else {
  705|  20.1k|                            Ok(JsonToken::String(Cow::Owned(string)))
  706|       |                        }
  707|       |                    } else {
  708|   113k|                        let (string, error) = self
  709|   113k|                            .decode_utf8(&input_buffer[1..next_byte_offset], self.file_offset + 1);
  710|   113k|                        if let Some(error) = error {
  711|     65|                            Err(error)
  712|       |                        } else {
  713|   113k|                            Ok(JsonToken::String(string))
  714|       |                        }
  715|       |                    });
  716|   133k|                    self.file_offset += u64::try_from(next_byte_offset).unwrap() + 1;
  717|   133k|                    return result;
  718|       |                }
  719|       |                b'\\' => {
  720|       |                    // Escape sequences
  721|  62.9k|                    if string.is_none() {
  722|  21.4k|                        string = Some((String::new(), 1))
  723|  41.4k|                    }
  724|  62.9k|                    let (string, read_until) = string.as_mut().unwrap();
  725|  62.9k|                    if *read_until < next_byte_offset {
  726|  37.3k|                        let (str, e) = self.decode_utf8(
  727|  37.3k|                            &input_buffer[*read_until..next_byte_offset],
  728|  37.3k|                            self.file_offset + u64::try_from(*read_until).unwrap(),
  729|  37.3k|                        );
  730|  37.3k|                        error = error.or(e);
  731|  37.3k|                        string.push_str(&str);
  732|  37.3k|                    }
  733|  62.9k|                    next_byte_offset += 1;
  734|  62.9k|                    match *input_buffer.get(next_byte_offset)? {
  735|  7.18k|                        b'"' => {
  736|  7.18k|                            string.push('"');
  737|  7.18k|                            next_byte_offset += 1;
  738|  7.18k|                        }
  739|  1.38k|                        b'\\' => {
  740|  1.38k|                            string.push('\\');
  741|  1.38k|                            next_byte_offset += 1;
  742|  1.38k|                        }
  743|    336|                        b'/' => {
  744|    336|                            string.push('/');
  745|    336|                            next_byte_offset += 1;
  746|    336|                        }
  747|  1.69k|                        b'b' => {
  748|  1.69k|                            string.push('\u{8}');
  749|  1.69k|                            next_byte_offset += 1;
  750|  1.69k|                        }
  751|    273|                        b'f' => {
  752|    273|                            string.push('\u{C}');
  753|    273|                            next_byte_offset += 1;
  754|    273|                        }
  755|    610|                        b'n' => {
  756|    610|                            string.push('\n');
  757|    610|                            next_byte_offset += 1;
  758|    610|                        }
  759|  3.60k|                        b'r' => {
  760|  3.60k|                            string.push('\r');
  761|  3.60k|                            next_byte_offset += 1;
  762|  3.60k|                        }
  763|  11.7k|                        b't' => {
  764|  11.7k|                            string.push('\t');
  765|  11.7k|                            next_byte_offset += 1;
  766|  11.7k|                        }
  767|       |                        b'u' => {
  768|  33.1k|                            next_byte_offset += 1;
  769|  33.1k|                            let val = input_buffer.get(next_byte_offset..next_byte_offset + 4)?;
  770|  33.0k|                            next_byte_offset += 4;
  771|  33.0k|                            let code_point = match read_hexa_char(val) {
  772|  27.5k|                                Ok(cp) => cp,
  773|  5.44k|                                Err(e) => {
  774|  5.44k|                                    error = error.or_else(|| {
  775|       |                                        let pos = self.file_offset
  776|       |                                            + u64::try_from(next_byte_offset).unwrap();
  777|       |                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  5.44k|                                    });
  779|  5.44k|                                    char::REPLACEMENT_CHARACTER.into()
  780|       |                                }
  781|       |                            };
  782|  33.0k|                            if let Some(c) = char::from_u32(code_point) {
  783|  18.5k|                                string.push(c);
  784|  18.5k|                            } else {
  785|  14.4k|                                let high_surrogate = code_point;
  786|  14.4k|                                if !(0xD800..=0xDBFF).contains(&high_surrogate) {
  787|  13.2k|                                    error = error.or_else(|| {
  788|       |                                        let pos = self.file_offset
  789|       |                                            + u64::try_from(next_byte_offset).unwrap();
  790|       |                                        Some(self.syntax_error(
  791|       |                                            pos - 6..pos,
  792|       |                                            format!(
  793|       |                                                "\\u{:X} is not a valid high surrogate",
  794|       |                                                high_surrogate
  795|       |                                            ),
  796|       |                                        ))
  797|  13.2k|                                    });
  798|  13.2k|                                }
  799|  14.4k|                                let val =
  800|  14.4k|                                    input_buffer.get(next_byte_offset..next_byte_offset + 6)?;
  801|  14.4k|                                next_byte_offset += 6;
  802|  14.4k|                                if !val.starts_with(b"\\u") {
  803|  7.32k|                                    error = error.or_else(|| {
  804|       |                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|       |                                        Some(self.syntax_error(
  806|       |                                            pos - 6..pos,
  807|       |                                            format!(
  808|       |                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|       |                                                high_surrogate
  810|       |                                            )
  811|       |                                        ))
  812|  7.32k|                                    });
  813|  7.32k|                                }
  814|  14.4k|                                let low_surrogate = match read_hexa_char(&val[2..]) {
  815|  6.25k|                                    Ok(cp) => cp,
  816|  8.16k|                                    Err(e) => {
  817|  8.16k|                                        error = error.or_else(|| {
  818|       |                                            let pos = self.file_offset
  819|       |                                                + u64::try_from(next_byte_offset).unwrap();
  820|       |                                            Some(self.syntax_error(pos - 6..pos, e))
  821|  8.16k|                                        });
  822|  8.16k|                                        char::REPLACEMENT_CHARACTER.into()
  823|       |                                    }
  824|       |                                };
  825|  14.4k|                                if !(0xDC00..=0xDFFF).contains(&low_surrogate) {
  826|  10.8k|                                    error = error.or_else(|| {
  827|       |                                        let pos = self.file_offset
  828|       |                                            + u64::try_from(next_byte_offset).unwrap();
  829|       |                                        Some(self.syntax_error(
  830|       |                                            pos - 6..pos,
  831|       |                                            format!(
  832|       |                                                "\\u{:X} is not a valid low surrogate",
  833|       |                                                low_surrogate
  834|       |                                            ),
  835|       |                                        ))
  836|  10.8k|                                    });
  837|  10.8k|                                }
  838|  14.4k|                                let code_point = 0x10000
  839|  14.4k|                                    + ((high_surrogate & 0x03FF) << 10)
  840|  14.4k|                                    + (low_surrogate & 0x03FF);
  841|  14.4k|                                if let Some(c) = char::from_u32(code_point) {
  842|  14.4k|                                    string.push(c)
  843|      0|                                } else {
  844|      0|                                    string.push(char::REPLACEMENT_CHARACTER);
  845|      0|                                    error = error.or_else(|| {
  846|       |                                        let pos = self.file_offset
  847|       |                                            + u64::try_from(next_byte_offset).unwrap();
  848|       |                                        Some(self.syntax_error(
  849|       |                                            pos - 12..pos,
  850|       |                                            format!(
  851|       |                                                "\\u{:X}\\u{:X} is an invalid surrogate pair",
  852|       |                                                high_surrogate, low_surrogate
  853|       |                                            ),
  854|       |                                        ))
  855|      0|                                    });
  856|      0|                                }
  857|       |                            }
  858|       |                        }
  859|  2.95k|                        c => {
  860|  2.95k|                            next_byte_offset += 1;
  861|  2.95k|                            error = error.or_else(|| {
  862|       |                                let pos =
  863|       |                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|       |                                Some(self.syntax_error(
  865|       |                                    pos - 2..pos,
  866|       |                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|       |                                ))
  868|  2.95k|                            });
  869|  2.95k|                            string.push(char::REPLACEMENT_CHARACTER);
  870|  2.95k|                        }
  871|       |                    }
  872|  62.7k|                    *read_until = next_byte_offset;
  873|       |                }
  874|   867k|                c @ (0..=0x1F) => {
  875|  10.3k|                    error = error.or_else(|| {
  876|       |                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|       |                        Some(self.syntax_error(
  878|       |                            pos..pos + 1,
  879|       |                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|       |                        ))
  881|  10.3k|                    });
  882|  10.3k|                    next_byte_offset += 1;
  883|  10.3k|                }
  884|   857k|                _ => {
  885|   857k|                    next_byte_offset += 1;
  886|   857k|                }
  887|       |            }
  888|       |        }
  889|   135k|    }
_RNvNtCsbIuTKEyAQ2U_17json_event_parser4read11read_digits:
 1067|  5.48k|fn read_digits(input_buffer: &[u8], is_ending: bool) -> Option<usize> {
 1068|  5.48k|    let count = input_buffer
 1069|  5.48k|        .iter()
 1070|  5.48k|        .take_while(|c| c.is_ascii_digit())
 1071|  5.48k|        .count();
 1072|  5.48k|    if count == input_buffer.len() && !is_ending {
 1073|     59|        return None;
 1074|  5.42k|    }
 1075|  5.42k|    Some(count)
 1076|  5.48k|}
_RNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_18LowLevelJsonReader16check_stack_size:
  529|   459k|    fn check_stack_size(&self) -> Result<(), String> {
  530|   459k|        if self.state_stack.len() > self.max_state_stack_size {
  531|      0|            Err(format!(
  532|      0|                "Max stack size of {} reached on an object opening",
  533|      0|                self.max_state_stack_size
  534|      0|            ))
  535|       |        } else {
  536|   459k|            Ok(())
  537|       |        }
  538|   459k|    }
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_strings4_0B9_:
  861|    143|                            error = error.or_else(|| {
  862|    143|                                let pos =
  863|    143|                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|    143|                                Some(self.syntax_error(
  865|    143|                                    pos - 2..pos,
  866|    143|                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|    143|                                ))
  868|    143|                            });
_RNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_18LowLevelJsonReader25apply_new_token_for_value:
  488|   117k|    fn apply_new_token_for_value<'a>(
  489|   117k|        &mut self,
  490|   117k|        token: JsonToken<'a>,
  491|   117k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  492|   117k|        match token {
  493|  8.24k|            JsonToken::OpeningSquareBracket => (
  494|  8.24k|                Some(JsonEvent::StartArray),
  495|  8.24k|                self.push_state_stack(JsonState::ArrayValueOrEnd).err(),
  496|  8.24k|            ),
  497|      4|            JsonToken::ClosingSquareBracket => (
  498|      4|                None,
  499|      4|                Some("Unexpected closing square bracket, no array to close".into()),
  500|      4|            ),
  501|  54.3k|            JsonToken::OpeningCurlyBracket => (
  502|  54.3k|                Some(JsonEvent::StartObject),
  503|  54.3k|                self.push_state_stack(JsonState::ObjectKeyOrEnd).err(),
  504|  54.3k|            ),
  505|      3|            JsonToken::ClosingCurlyBracket => (
  506|      3|                None,
  507|      3|                Some("Unexpected closing curly bracket, no array to close".into()),
  508|      3|            ),
  509|     19|            JsonToken::Comma => (None, Some("Unexpected comma, no values to separate".into())),
  510|      3|            JsonToken::Colon => (None, Some("Unexpected colon, no key to follow".into())),
  511|  49.6k|            JsonToken::String(string) => (Some(JsonEvent::String(string)), None),
  512|  4.27k|            JsonToken::Number(number) => (Some(JsonEvent::Number(number)), None),
  513|    386|            JsonToken::True => (Some(JsonEvent::Boolean(true)), None),
  514|     98|            JsonToken::False => (Some(JsonEvent::Boolean(false)), None),
  515|    307|            JsonToken::Null => (Some(JsonEvent::Null), None),
  516|    483|            JsonToken::Eof => (
  517|    483|                Some(JsonEvent::Eof),
  518|    483|                Some("Unexpected end of file, a value was expected".into()),
  519|    483|            ),
  520|       |        }
  521|   117k|    }
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_strings0_0B9_:
  803|     51|                                    error = error.or_else(|| {
  804|     51|                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|     51|                                        Some(self.syntax_error(
  806|     51|                                            pos - 6..pos,
  807|     51|                                            format!(
  808|     51|                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|     51|                                                high_surrogate
  810|     51|                                            )
  811|     51|                                        ))
  812|     51|                                    });
_RNvNtCsbIuTKEyAQ2U_17json_event_parser4read14read_hexa_char:
 1048|  47.4k|fn read_hexa_char(input: &[u8]) -> Result<u32, String> {
 1049|  47.4k|    let mut value = 0;
 1050|   170k|    for c in input.iter().copied() {
 1051|   170k|        value = value * 16
 1052|   170k|            + match c {
 1053|   167k|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
 1054|  28.2k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
 1055|  69.8k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
 1056|       |                _ => {
 1057|  13.6k|                    return Err(format!(
 1058|  13.6k|                        "Unexpected character in a unicode escape: '{}'",
 1059|  13.6k|                        char::from(c)
 1060|  13.6k|                    ))
 1061|       |                }
 1062|       |            }
 1063|       |    }
 1064|  33.8k|    Ok(value)
 1065|  47.4k|}
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_strings1_0B9_:
  817|     11|                                        error = error.or_else(|| {
  818|     11|                                            let pos = self.file_offset
  819|     11|                                                + u64::try_from(next_byte_offset).unwrap();
  820|     11|                                            Some(self.syntax_error(pos - 6..pos, e))
  821|     11|                                        });
_RNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_18LowLevelJsonReader16push_state_stack:
  523|   459k|    fn push_state_stack(&mut self, state: JsonState) -> Result<(), String> {
  524|   459k|        self.check_stack_size()?;
  525|   459k|        self.state_stack.push(state);
  526|   459k|        Ok(())
  527|   459k|    }
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_strings2_0B9_:
  826|      6|                                    error = error.or_else(|| {
  827|      6|                                        let pos = self.file_offset
  828|      6|                                            + u64::try_from(next_byte_offset).unwrap();
  829|      6|                                        Some(self.syntax_error(
  830|      6|                                            pos - 6..pos,
  831|      6|                                            format!(
  832|      6|                                                "\\u{:X} is not a valid low surrogate",
  833|      6|                                                low_surrogate
  834|      6|                                            ),
  835|      6|                                        ))
  836|      6|                                    });
_RNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_9JsonLexer11read_number:
  918|  4.44k|    fn read_number<'a>(
  919|  4.44k|        &mut self,
  920|  4.44k|        input_buffer: &'a [u8],
  921|  4.44k|        is_ending: bool,
  922|  4.44k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  923|  4.44k|        let mut next_byte_offset = 0;
  924|  4.44k|        if *input_buffer.get(next_byte_offset)? == b'-' {
  925|     84|            next_byte_offset += 1;
  926|  4.36k|        }
  927|       |        // integer starting with first bytes
  928|  4.44k|        match *input_buffer.get(next_byte_offset)? {
  929|    530|            b'0' => {
  930|    530|                next_byte_offset += 1;
  931|    530|            }
  932|  3.90k|            b'1'..=b'9' => {
  933|  3.90k|                next_byte_offset += 1;
  934|  3.90k|                next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  935|       |            }
  936|      1|            c => {
  937|      1|                next_byte_offset += 1;
  938|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  939|      1|                return Some(Err(self.syntax_error(
  940|      1|                    self.file_offset - 1..self.file_offset,
  941|      1|                    format!("A number is not allowed to start with '{}'", char::from(c)),
  942|      1|                )));
  943|       |            }
  944|       |        }
  945|       |
  946|       |        // Dot
  947|  4.42k|        if input_buffer.get(next_byte_offset).map_or_else(
  948|  4.42k|            || if is_ending { Some(None) } else { None },
  949|  4.42k|            |c| Some(Some(*c)),
  950|  4.42k|        )? == Some(b'.')
  951|       |        {
  952|     98|            next_byte_offset += 1;
  953|     98|            let c = *input_buffer.get(next_byte_offset)?;
  954|     91|            next_byte_offset += 1;
  955|     91|            if !c.is_ascii_digit() {
  956|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  957|      1|                return Some(Err(self.syntax_error(
  958|      1|                    self.file_offset - 1..self.file_offset,
  959|      1|                    format!(
  960|      1|                        "A number fractional part must start with a digit and not '{}'",
  961|      1|                        char::from(c)
  962|      1|                    ),
  963|      1|                )));
  964|     90|            }
  965|     90|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  966|  4.31k|        }
  967|       |
  968|       |        // Exp
  969|  4.39k|        let c = input_buffer.get(next_byte_offset).map_or_else(
  970|  4.39k|            || if is_ending { Some(None) } else { None },
  971|  4.39k|            |c| Some(Some(*c)),
  972|  4.39k|        )?;
  973|  4.39k|        if c == Some(b'e') || c == Some(b'E') {
  974|  1.53k|            next_byte_offset += 1;
  975|  1.53k|            match *input_buffer.get(next_byte_offset)? {
  976|       |                b'-' | b'+' => {
  977|  1.42k|                    next_byte_offset += 1;
  978|  1.42k|                    let c = *input_buffer.get(next_byte_offset)?;
  979|  1.38k|                    next_byte_offset += 1;
  980|  1.38k|                    if !c.is_ascii_digit() {
  981|      2|                        self.file_offset += u64::try_from(next_byte_offset).unwrap();
  982|      2|                        return Some(Err(self.syntax_error(
  983|      2|                            self.file_offset - 1..self.file_offset,
  984|      2|                            format!(
  985|      2|                                "A number exponential part must contain at least a digit, '{}' found",
  986|      2|                                char::from(c)
  987|      2|                            ),
  988|      2|                        )));
  989|  1.38k|                    }
  990|       |                }
  991|     96|                b'0'..=b'9' => {
  992|     96|                    next_byte_offset += 1;
  993|     96|                }
  994|      1|                c => {
  995|      1|                    next_byte_offset += 1;
  996|      1|                    self.file_offset += u64::try_from(next_byte_offset).unwrap();
  997|      1|                    return Some(Err(self.syntax_error(
  998|      1|                        self.file_offset - 1..self.file_offset,
  999|      1|                        format!(
 1000|      1|                            "A number exponential part must start with +, - or a digit, '{}' found",
 1001|      1|                            char::from(c)
 1002|      1|                        ),
 1003|      1|                    )));
 1004|       |                }
 1005|       |            }
 1006|  1.48k|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
 1007|  2.86k|        }
 1008|  4.31k|        self.file_offset += u64::try_from(next_byte_offset).unwrap();
 1009|  4.31k|        Some(Ok(JsonToken::Number(Cow::Borrowed(
 1010|  4.31k|            str::from_utf8(&input_buffer[..next_byte_offset]).unwrap(),
 1011|  4.31k|        ))))
 1012|  4.44k|    }
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer13read_constant0B9_:
  904|    489|            .take_while(|c| c.is_ascii_alphabetic())
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_string0B9_:
  774|    125|                                    error = error.or_else(|| {
  775|    125|                                        let pos = self.file_offset
  776|    125|                                            + u64::try_from(next_byte_offset).unwrap();
  777|    125|                                        Some(self.syntax_error(pos - 4..pos, e))
  778|    125|                                    });
_RNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_18LowLevelJsonReader3new:
  303|  3.78k|    pub const fn new() -> Self {
  304|  3.78k|        Self {
  305|  3.78k|            lexer: JsonLexer {
  306|  3.78k|                file_offset: 0,
  307|  3.78k|                file_line: 0,
  308|  3.78k|                file_start_of_last_line: 0,
  309|  3.78k|                file_start_of_last_token: 0,
  310|  3.78k|                is_start: true,
  311|  3.78k|            },
  312|  3.78k|            state_stack: Vec::new(),
  313|  3.78k|            max_state_stack_size: MAX_STATE_STACK_SIZE,
  314|  3.78k|            element_read: false,
  315|  3.78k|            buffered_event: None,
  316|  3.78k|        }
  317|  3.78k|    }
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_strings_0B9_:
  787|    204|                                    error = error.or_else(|| {
  788|    204|                                        let pos = self.file_offset
  789|    204|                                            + u64::try_from(next_byte_offset).unwrap();
  790|    204|                                        Some(self.syntax_error(
  791|    204|                                            pos - 6..pos,
  792|    204|                                            format!(
  793|    204|                                                "\\u{:X} is not a valid high surrogate",
  794|    204|                                                high_surrogate
  795|    204|                                            ),
  796|    204|                                        ))
  797|    204|                                    });
_RNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_9JsonLexer15read_next_token:
  578|   392k|    fn read_next_token<'a>(
  579|   392k|        &mut self,
  580|   392k|        mut input_buffer: &'a [u8],
  581|   392k|        is_ending: bool,
  582|   392k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  583|   392k|        // We remove BOM at the beginning
  584|   392k|        if self.is_start {
  585|  7.61k|            if input_buffer.len() < 3 && !is_ending {
  586|  3.82k|                return None;
  587|  3.78k|            }
  588|  3.78k|            self.is_start = false;
  589|  3.78k|            if input_buffer.starts_with(&[0xEF, 0xBB, 0xBF]) {
  590|     21|                input_buffer = &input_buffer[3..];
  591|     21|                self.file_offset += 3;
  592|  3.76k|            }
  593|   384k|        }
  594|       |
  595|       |        // We skip whitespaces
  596|   388k|        let mut i = 0;
  597|   398k|        while let Some(c) = input_buffer.get(i) {
  598|   396k|            match *c {
  599|  9.50k|                b' ' | b'\t' => {
  600|  9.50k|                    i += 1;
  601|  9.50k|                }
  602|    286|                b'\n' => {
  603|    286|                    i += 1;
  604|    286|                    self.file_line += 1;
  605|    286|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  606|    286|                }
  607|       |                b'\r' => {
  608|    222|                    i += 1;
  609|    222|                    if let Some(c) = input_buffer.get(i) {
  610|    208|                        if *c == b'\n' {
  611|      0|                            i += 1; // \r\n
  612|    208|                        }
  613|     14|                    } else if !is_ending {
  614|       |                        // We need an extra byte to check if followed by \n
  615|      6|                        i -= 1;
  616|      6|                        self.file_offset += u64::try_from(i).unwrap();
  617|      6|                        return None;
  618|      8|                    }
  619|    216|                    self.file_line += 1;
  620|    216|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  621|       |                }
  622|       |                _ => {
  623|   386k|                    break;
  624|       |                }
  625|       |            }
  626|       |        }
  627|   388k|        self.file_offset += u64::try_from(i).unwrap();
  628|   388k|        input_buffer = &input_buffer[i..];
  629|   388k|        self.file_start_of_last_token = self.file_offset;
  630|   388k|
  631|   388k|        if is_ending && input_buffer.is_empty() {
  632|  1.05k|            return Some(Ok(JsonToken::Eof));
  633|   387k|        }
  634|   387k|
  635|   387k|        // we get the first character
  636|   387k|        match *input_buffer.first()? {
  637|       |            b'{' => {
  638|  54.3k|                self.file_offset += 1;
  639|  54.3k|                Some(Ok(JsonToken::OpeningCurlyBracket))
  640|       |            }
  641|       |            b'}' => {
  642|  23.2k|                self.file_offset += 1;
  643|  23.2k|                Some(Ok(JsonToken::ClosingCurlyBracket))
  644|       |            }
  645|       |            b'[' => {
  646|  8.25k|                self.file_offset += 1;
  647|  8.25k|                Some(Ok(JsonToken::OpeningSquareBracket))
  648|       |            }
  649|       |            b']' => {
  650|  5.11k|                self.file_offset += 1;
  651|  5.11k|                Some(Ok(JsonToken::ClosingSquareBracket))
  652|       |            }
  653|       |            b',' => {
  654|  71.4k|                self.file_offset += 1;
  655|  71.4k|                Some(Ok(JsonToken::Comma))
  656|       |            }
  657|       |            b':' => {
  658|  83.2k|                self.file_offset += 1;
  659|  83.2k|                Some(Ok(JsonToken::Colon))
  660|       |            }
  661|   135k|            b'"' => self.read_string(input_buffer),
  662|    412|            b't' => self.read_constant(input_buffer, is_ending, "true", JsonToken::True),
  663|    105|            b'f' => self.read_constant(input_buffer, is_ending, "false", JsonToken::False),
  664|    318|            b'n' => self.read_constant(input_buffer, is_ending, "null", JsonToken::Null),
  665|  4.63k|            b'-' | b'0'..=b'9' => self.read_number(input_buffer, is_ending),
  666|    300|            c => {
  667|    300|                self.file_offset += 1;
  668|    300|                Some(Err(self.syntax_error(
  669|    300|                    self.file_offset - 1..self.file_offset,
  670|    300|                    if c < 128 {
  671|    242|                        format!("Unexpected char: '{}'", char::from(c))
  672|       |                    } else {
  673|     58|                        format!("Unexpected byte: \\x{c:X}")
  674|       |                    },
  675|       |                )))
  676|       |            }
  677|       |        }
  678|   392k|    }
_RNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_18LowLevelJsonReader15read_next_event:
  328|   237k|    pub fn read_next_event<'a>(
  329|   237k|        &mut self,
  330|   237k|        input_buffer: &'a [u8],
  331|   237k|        is_ending: bool,
  332|   237k|    ) -> LowLevelJsonReaderResult<'a> {
  333|   237k|        if let Some(event) = self.buffered_event.take() {
  334|      0|            return LowLevelJsonReaderResult {
  335|      0|                consumed_bytes: 0,
  336|      0|                event: Some(Ok(event)),
  337|      0|            };
  338|   237k|        }
  339|   237k|        let start_file_offset = self.lexer.file_offset;
  340|   392k|        while let Some(token) = self.lexer.read_next_token(
  341|   392k|            &input_buffer[usize::try_from(self.lexer.file_offset - start_file_offset).unwrap()..],
  342|   392k|            is_ending,
  343|   392k|        ) {
  344|   385k|            let consumed_bytes = (self.lexer.file_offset - start_file_offset)
  345|   385k|                .try_into()
  346|   385k|                .unwrap();
  347|   385k|            match token {
  348|   385k|                Ok(token) => {
  349|   385k|                    let (event, error) = self.apply_new_token(token);
  350|   385k|                    let error = error.map(|e| {
  351|       |                        self.lexer.syntax_error(
  352|       |                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|       |                            e,
  354|       |                        )
  355|   385k|                    });
  356|   385k|                    if let Some(error) = error {
  357|    940|                        self.buffered_event = event.map(owned_event);
  358|    940|                        return LowLevelJsonReaderResult {
  359|    940|                            consumed_bytes,
  360|    940|                            event: Some(Err(error)),
  361|    940|                        };
  362|   384k|                    }
  363|   384k|                    if let Some(event) = event {
  364|   229k|                        return LowLevelJsonReaderResult {
  365|   229k|                            consumed_bytes,
  366|   229k|                            event: Some(Ok(event)),
  367|   229k|                        };
  368|   154k|                    }
  369|       |                }
  370|    485|                Err(error) => {
  371|    485|                    return LowLevelJsonReaderResult {
  372|    485|                        consumed_bytes,
  373|    485|                        event: Some(Err(error)),
  374|    485|                    }
  375|       |                }
  376|       |            }
  377|       |        }
  378|       |        LowLevelJsonReaderResult {
  379|  6.53k|            consumed_bytes: (self.lexer.file_offset - start_file_offset)
  380|  6.53k|                .try_into()
  381|  6.53k|                .unwrap(),
  382|  6.53k|            event: if is_ending {
  383|    803|                self.buffered_event = Some(JsonEvent::Eof);
  384|    803|                Some(Err(self.lexer.syntax_error(
  385|    803|                    self.lexer.file_offset..self.lexer.file_offset + 1,
  386|    803|                    "Unexpected end of file",
  387|    803|                )))
  388|       |            } else {
  389|  5.73k|                None
  390|       |            },
  391|       |        }
  392|   237k|    }
_RNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_9JsonLexer13read_constant:
  891|    835|    fn read_constant(
  892|    835|        &mut self,
  893|    835|        input_buffer: &[u8],
  894|    835|        is_ending: bool,
  895|    835|        expected: &str,
  896|    835|        value: JsonToken<'static>,
  897|    835|    ) -> Option<Result<JsonToken<'static>, SyntaxError>> {
  898|    835|        if input_buffer.get(..expected.len())? == expected.as_bytes() {
  899|    791|            self.file_offset += u64::try_from(expected.len()).unwrap();
  900|    791|            return Some(Ok(value));
  901|     17|        }
  902|     17|        let ascii_chars = input_buffer
  903|     17|            .iter()
  904|     17|            .take_while(|c| c.is_ascii_alphabetic())
  905|     17|            .count();
  906|     17|        if ascii_chars == input_buffer.len() && !is_ending {
  907|      6|            return None; // We might read a bigger token
  908|     11|        }
  909|     11|        let read = max(1, ascii_chars); // We want to consume at least a byte
  910|     11|        let start_offset = self.file_offset;
  911|     11|        self.file_offset += u64::try_from(read).unwrap();
  912|     11|        Some(Err(self.syntax_error(
  913|     11|            start_offset..self.file_offset,
  914|     11|            format!("{} expected", expected),
  915|     11|        )))
  916|    835|    }
_RNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_9JsonLexer11decode_utf8:
 1014|   166k|    fn decode_utf8<'a>(
 1015|   166k|        &self,
 1016|   166k|        input_buffer: &'a [u8],
 1017|   166k|        start_position: u64,
 1018|   166k|    ) -> (Cow<'a, str>, Option<SyntaxError>) {
 1019|   166k|        match str::from_utf8(input_buffer) {
 1020|   161k|            Ok(str) => (Cow::Borrowed(str), None),
 1021|  5.14k|            Err(e) => (
 1022|  5.14k|                String::from_utf8_lossy(input_buffer),
 1023|  5.14k|                Some({
 1024|  5.14k|                    let pos = start_position + u64::try_from(e.valid_up_to()).unwrap();
 1025|  5.14k|                    self.syntax_error(pos..pos + 1, format!("Invalid UTF-8: {e}"))
 1026|  5.14k|                }),
 1027|  5.14k|            ),
 1028|       |        }
 1029|   166k|    }
_RINvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB6_9JsonLexer12syntax_errorNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
 1031|  7.05k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  7.05k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  7.05k|        SyntaxError {
 1034|  7.05k|            location: TextPosition {
 1035|  7.05k|                line: self.file_line,
 1036|  7.05k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  7.05k|                offset: start_file_offset,
 1038|  7.05k|            }..TextPosition {
 1039|  7.05k|                line: self.file_line,
 1040|  7.05k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  7.05k|                offset: file_offset.end,
 1042|  7.05k|            },
 1043|  7.05k|            message: message.into(),
 1044|  7.05k|        }
 1045|  7.05k|    }
_RNvNtCsbIuTKEyAQ2U_17json_event_parser4read11owned_event:
 1078|    530|fn owned_event(event: JsonEvent<'_>) -> JsonEvent<'static> {
 1079|    530|    match event {
 1080|     23|        JsonEvent::String(s) => JsonEvent::String(s.into_owned().into()),
 1081|      5|        JsonEvent::Number(n) => JsonEvent::Number(n.into_owned().into()),
 1082|      7|        JsonEvent::Boolean(b) => JsonEvent::Boolean(b),
 1083|      1|        JsonEvent::Null => JsonEvent::Null,
 1084|      1|        JsonEvent::StartArray => JsonEvent::StartArray,
 1085|      1|        JsonEvent::EndArray => JsonEvent::EndArray,
 1086|      8|        JsonEvent::StartObject => JsonEvent::StartObject,
 1087|      1|        JsonEvent::EndObject => JsonEvent::EndObject,
 1088|      0|        JsonEvent::ObjectKey(k) => JsonEvent::ObjectKey(k.into_owned().into()),
 1089|    483|        JsonEvent::Eof => JsonEvent::Eof,
 1090|       |    }
 1091|    530|}
_RNvXsl_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_9JsonTokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  553|   261k|#[derive(Eq, PartialEq, Clone, Debug)]
_RINvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB6_9JsonLexer12syntax_errorReEB8_:
 1031|    803|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|    803|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|    803|        SyntaxError {
 1034|    803|            location: TextPosition {
 1035|    803|                line: self.file_line,
 1036|    803|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|    803|                offset: start_file_offset,
 1038|    803|            }..TextPosition {
 1039|    803|                line: self.file_line,
 1040|    803|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|    803|                offset: file_offset.end,
 1042|    803|            },
 1043|    803|            message: message.into(),
 1044|    803|        }
 1045|    803|    }
_RNvMs0_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB5_18LowLevelJsonReader15apply_new_token:
  394|   429k|    fn apply_new_token<'a>(
  395|   429k|        &mut self,
  396|   429k|        token: JsonToken<'a>,
  397|   429k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  398|   429k|        match self.state_stack.pop() {
  399|       |            Some(JsonState::ObjectKeyOrEnd) => {
  400|  54.1k|                if token == JsonToken::ClosingCurlyBracket {
  401|  17.0k|                    (Some(JsonEvent::EndObject), None)
  402|       |                } else {
  403|  37.0k|                    if let Err(e) = self.push_state_stack(JsonState::ObjectKey) {
  404|      0|                        return (None, Some(e));
  405|  37.0k|                    }
  406|  37.0k|                    self.apply_new_token(token)
  407|       |                }
  408|       |            }
  409|       |            Some(JsonState::ObjectKey) => {
  410|  83.8k|                if token == JsonToken::ClosingCurlyBracket {
  411|      1|                    return (Some(JsonEvent::EndObject), Some("Trailing commas are not allowed".into()));
  412|  83.8k|                }
  413|  83.8k|                if let Err(e) = self.push_state_stack(JsonState::ObjectColon) {
  414|      0|                    return (None, Some(e));
  415|  83.8k|                }
  416|  83.8k|                if let JsonToken::String(key) = token {
  417|  83.7k|                    (Some(JsonEvent::ObjectKey(key)), None)
  418|       |                } else {
  419|    135|                    (None, Some("Object keys must be strings".into()))
  420|       |                }
  421|       |            }
  422|       |            Some(JsonState::ObjectColon) => {
  423|  83.4k|                if let Err(e) = self.push_state_stack(JsonState::ObjectValue) {
  424|      0|                    return (None, Some(e));
  425|  83.4k|                }
  426|  83.4k|                if token == JsonToken::Colon {
  427|  83.2k|                    (None, None)
  428|       |                } else {
  429|    270|                    let (event, _) = self.apply_new_token(token);
  430|    270|                    (event, Some("Object keys must be strings".into()))
  431|       |                }
  432|       |            }
  433|       |            Some(JsonState::ObjectValue) => {
  434|  83.3k|                if let Err(e) = self.push_state_stack(JsonState::ObjectCommaOrEnd) {
  435|      0|                    return (None, Some(e));
  436|  83.3k|                }
  437|  83.3k|                self.apply_new_token_for_value(token)
  438|       |            }
  439|  53.3k|            Some(JsonState::ObjectCommaOrEnd) => match token {
  440|       |                JsonToken::Comma => {
  441|  46.9k|                    (None, self.push_state_stack(JsonState::ObjectKey).err())
  442|       |                }
  443|  6.16k|                JsonToken::ClosingCurlyBracket => (Some(JsonEvent::EndObject), None),
  444|    245|                _ => (None, Some("Object values must be followed by a comma to add a new value or a curly bracket to end the object".into())),
  445|       |            },
  446|       |            Some(JsonState::ArrayValueOrEnd) =>{
  447|  8.24k|                if token == JsonToken::ClosingSquareBracket {
  448|  1.63k|                    return (Some(JsonEvent::EndArray), None);
  449|  6.60k|                }
  450|  6.60k|                if let Err(e) = self.push_state_stack(JsonState::ArrayValue) {
  451|      0|                    return (None, Some(e));
  452|  6.60k|                }
  453|  6.60k|                self.apply_new_token(token)
  454|       |            }
  455|       |            Some(JsonState::ArrayValue) => {
  456|  31.2k|                if token == JsonToken::ClosingSquareBracket {
  457|      1|                    return (Some(JsonEvent::EndArray), Some("Trailing commas are not allowed".into()));
  458|  31.2k|                }
  459|  31.2k|                if let Err(e) = self.push_state_stack(JsonState::ArrayCommaOrEnd) {
  460|      0|                    return (None, Some(e));
  461|  31.2k|                }
  462|  31.2k|                self.apply_new_token_for_value(token)
  463|       |            }
  464|  28.0k|            Some(JsonState::ArrayCommaOrEnd) => match token {
  465|       |                JsonToken::Comma => {
  466|  24.4k|                    (None, self.push_state_stack(JsonState::ArrayValue).err())
  467|       |                }
  468|  3.47k|                JsonToken::ClosingSquareBracket => (Some(JsonEvent::EndArray), None),
  469|       |                _ => {
  470|    172|                    let _ = self.push_state_stack(JsonState::ArrayValue); // We already have an error
  471|    172|                    let (event, _) = self.apply_new_token(token);
  472|    172|                    (event, Some("Array values must be followed by a comma to add a new value or a squared bracket to end the array".into()))
  473|       |                }
  474|       |            }
  475|  3.49k|            None => if self.element_read {
  476|    298|                if token == JsonToken::Eof {
  477|    297|                    (Some(JsonEvent::Eof), None)
  478|       |                } else {
  479|      1|                    (None, Some("The JSON already contains one root element".into()))
  480|       |                }
  481|       |            } else {
  482|  3.19k|                self.element_read = true;
  483|  3.19k|                self.apply_new_token_for_value(token)
  484|       |            }
  485|       |        }
  486|   429k|    }
_RNCNvMs1_NtCsbIuTKEyAQ2U_17json_event_parser4readNtB7_9JsonLexer11read_numbers1_0B9_:
  971|  4.35k|            |c| Some(Some(*c)),

_RNvMNtCsbIuTKEyAQ2U_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE11write_eventCscEMhoEbPSQt_13oxigraph_fuzz:
   33|  20.2k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|  20.2k|        self.writer.write_event(event, &mut self.write)
   35|  20.2k|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCscEMhoEbPSQt_13oxigraph_fuzz:
   37|    293|    pub fn finish(self) -> Result<W> {
   38|    293|        self.writer.validate_eof()?;
   39|    293|        Ok(self.write)
   40|    293|    }
_RINvNtCsbIuTKEyAQ2U_17json_event_parser5write25write_escaped_json_stringQQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  263|  1.17k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  1.17k|    write.write_all(b"\"")?;
  265|  1.17k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  6.73k|    for c in s.chars() {
  267|  6.73k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  6.73k|            c => {
  271|  6.73k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  6.73k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  1.17k|    write.write_all(b"\"")?;
  295|  1.17k|    Ok(())
  296|  1.17k|}
_RINvMs_NtCsbIuTKEyAQ2U_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  121|  20.2k|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|  20.2k|        match event {
  123|  3.83k|            JsonEvent::String(s) => {
  124|  3.83k|                self.before_value(&mut write)?;
  125|  3.83k|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      0|            JsonEvent::Boolean(b) => {
  132|      0|                self.before_value(&mut write)?;
  133|      0|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|    586|                self.before_value(&mut write)?;
  141|    586|                self.state_stack.push(JsonState::OpenArray);
  142|    586|                write.write_all(b"[")
  143|       |            }
  144|    586|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|    586|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|  7.05k|                self.before_value(&mut write)?;
  162|  7.05k|                self.state_stack.push(JsonState::OpenObject);
  163|  7.05k|                write.write_all(b"{")
  164|       |            }
  165|  7.05k|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|  7.05k|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|  1.17k|            JsonEvent::ObjectKey(key) => {
  182|  1.17k|                match self.state_stack.pop() {
  183|    879|                    Some(JsonState::OpenObject) => (),
  184|    293|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|  1.17k|                self.state_stack.push(JsonState::ContinuationObject);
  193|  1.17k|                self.state_stack.push(JsonState::ObjectValue);
  194|  1.17k|                write_escaped_json_string(&key, &mut write)?;
  195|  1.17k|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|  20.2k|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE3newCscEMhoEbPSQt_13oxigraph_fuzz:
   26|      2|    pub const fn new(write: W) -> Self {
   27|      2|        Self {
   28|      2|            write,
   29|      2|            writer: LowLevelJsonWriter::new(),
   30|      2|        }
   31|      2|    }
_RINvMs_NtCsbIuTKEyAQ2U_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  204|      6|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|      6|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|      0|                self.state_stack.push(JsonState::ContinuationArray);
  208|      0|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|      0|                self.state_stack.push(JsonState::ContinuationArray);
  212|      0|                write.write_all(b",")?;
  213|      0|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|      4|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|      2|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|      2|                    self.element_written = true;
  232|      2|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|      6|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE11write_eventCscEMhoEbPSQt_13oxigraph_fuzz:
   33|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|     14|        self.writer.write_event(event, &mut self.write)
   35|     14|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCscEMhoEbPSQt_13oxigraph_fuzz:
   37|      2|    pub fn finish(self) -> Result<W> {
   38|      2|        self.writer.validate_eof()?;
   39|      2|        Ok(self.write)
   40|      2|    }
_RINvNtCsbIuTKEyAQ2U_17json_event_parser5write25write_escaped_json_stringQQQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  263|      4|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|      4|    write.write_all(b"\"")?;
  265|      4|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|     22|    for c in s.chars() {
  267|     22|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|     22|            c => {
  271|     22|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|     22|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|      4|    write.write_all(b"\"")?;
  295|      4|    Ok(())
  296|      4|}
_RINvNtCsbIuTKEyAQ2U_17json_event_parser5write25write_escaped_json_stringQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  263|  3.83k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  3.83k|    write.write_all(b"\"")?;
  265|  3.83k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  22.1k|    for c in s.chars() {
  267|  22.1k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  22.1k|            c => {
  271|  22.1k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  22.1k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  3.83k|    write.write_all(b"\"")?;
  295|  3.83k|    Ok(())
  296|  3.83k|}
_RINvMs_NtCsbIuTKEyAQ2U_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  121|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|     14|        match event {
  123|      0|            JsonEvent::String(s) => {
  124|      0|                self.before_value(&mut write)?;
  125|      0|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      2|            JsonEvent::Boolean(b) => {
  132|      2|                self.before_value(&mut write)?;
  133|      2|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|      0|                self.before_value(&mut write)?;
  141|      0|                self.state_stack.push(JsonState::OpenArray);
  142|      0|                write.write_all(b"[")
  143|       |            }
  144|      0|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|      0|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|      4|                self.before_value(&mut write)?;
  162|      4|                self.state_stack.push(JsonState::OpenObject);
  163|      4|                write.write_all(b"{")
  164|       |            }
  165|      4|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|      4|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|      4|            JsonEvent::ObjectKey(key) => {
  182|      4|                match self.state_stack.pop() {
  183|      2|                    Some(JsonState::OpenObject) => (),
  184|      2|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|      4|                self.state_stack.push(JsonState::ContinuationObject);
  193|      4|                self.state_stack.push(JsonState::ObjectValue);
  194|      4|                write_escaped_json_string(&key, &mut write)?;
  195|      4|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|     14|    }
_RNvMNtCsbIuTKEyAQ2U_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE3newCscEMhoEbPSQt_13oxigraph_fuzz:
   26|    293|    pub const fn new(write: W) -> Self {
   27|    293|        Self {
   28|    293|            write,
   29|    293|            writer: LowLevelJsonWriter::new(),
   30|    293|        }
   31|    293|    }
_RINvMs_NtCsbIuTKEyAQ2U_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  204|  11.4k|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|  11.4k|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|    554|                self.state_stack.push(JsonState::ContinuationArray);
  208|    554|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|  9.45k|                self.state_stack.push(JsonState::ContinuationArray);
  212|  9.45k|                write.write_all(b",")?;
  213|  9.45k|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|  1.17k|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|    293|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|    293|                    self.element_written = true;
  232|    293|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|  11.4k|    }
_RNvMs_NtCsbIuTKEyAQ2U_17json_event_parser5writeNtB4_18LowLevelJsonWriter12validate_eof:
  238|    295|    fn validate_eof(&self) -> Result<()> {
  239|    295|        if !self.state_stack.is_empty() {
  240|      0|            return Err(Error::new(
  241|      0|                ErrorKind::InvalidInput,
  242|      0|                "The written JSON is not balanced: an object or an array has not been closed",
  243|      0|            ));
  244|    295|        }
  245|    295|        if !self.element_written {
  246|      0|            return Err(Error::new(
  247|      0|                ErrorKind::InvalidInput,
  248|      0|                "A JSON file can't be empty",
  249|      0|            ));
  250|    295|        }
  251|    295|        Ok(())
  252|    295|    }
_RNvMs_NtCsbIuTKEyAQ2U_17json_event_parser5writeNtB4_18LowLevelJsonWriter3new:
  114|    295|    pub const fn new() -> Self {
  115|    295|        Self {
  116|    295|            state_stack: Vec::new(),
  117|    295|            element_written: false,
  118|    295|        }
  119|    295|    }

_RNvNvCsjmkwEQYn0eG_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  3.49k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  3.49k|                $body
  243|  3.49k|            }
rust_fuzzer_test_input:
  209|  3.49k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  3.49k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  3.49k|                }
  223|  3.49k|
  224|  3.49k|                __libfuzzer_sys_run(bytes);
  225|  3.49k|                0
  226|  3.49k|            }
LLVMFuzzerTestOneInput:
   58|  3.49k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.49k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.49k|    });
   63|  3.49k|
   64|  3.49k|    match test_input {
   65|  3.49k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.49k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs4JyNK9ak0xV_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.49k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.49k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.49k|        rust_fuzzer_test_input(data_slice)
   62|  3.49k|    });

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCs4JyNK9ak0xV_13libfuzzer_sys:
   49|  3.49k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.49k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.49k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.49k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.49k|        // `SeqCst` operations on the slow path.
   54|  3.49k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.49k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCs4JyNK9ak0xV_13libfuzzer_sys:
  963|  3.49k|        pub fn get(&self) -> Option<&T> {
  964|  3.49k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.49k|                None
  969|       |            }
  970|  3.49k|        }

_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCs2RvTzHk1J7L_5oxrdf:
 1156|  21.5k|    fn starts_with(&self, c: char) -> bool {
 1157|  21.5k|        self.value.as_str().starts_with(c)
 1158|  21.5k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs2RvTzHk1J7L_5oxrdf:
 1065|  11.7k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2RvTzHk1J7L_5oxrdf:
 1092|  45.6k|    fn len(&self) -> usize {
 1093|  45.6k|        self.len
 1094|  45.6k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2RvTzHk1J7L_5oxrdf:
 1072|   162k|    fn push(&mut self, c: char) {
 1073|   162k|        self.len += c.len_utf8();
 1074|   162k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2RvTzHk1J7L_5oxrdf:
 1097|  26.4k|    fn as_str(&self) -> &str {
 1098|  26.4k|        ""
 1099|  26.4k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs2RvTzHk1J7L_5oxrdf:
 1082|     66|    fn clear(&mut self) {
 1083|     66|        self.len = 0;
 1084|     66|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2RvTzHk1J7L_5oxrdf:
 1087|  4.11k|    fn truncate(&mut self, new_len: usize) {
 1088|  4.11k|        self.len = new_len;
 1089|  4.11k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCs2RvTzHk1J7L_5oxrdf:
 1584|  96.0k|fn is_url_code_point(c: char) -> bool {
 1585|  96.0k|    matches!(c,
 1586|  51.7k|        'a'..='z'
 1587|  47.6k|        | 'A'..='Z'
 1588|  41.5k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|  27.3k|        | '\u{A0}'..='\u{D7FF}'
 1609|  21.5k|        | '\u{F900}'..='\u{FDCF}'
 1610|  21.5k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|  21.4k|        | '\u{10000}'..='\u{1FFFD}'
 1612|  21.4k|        | '\u{20000}'..='\u{2FFFD}'
 1613|  21.4k|        | '\u{30000}'..='\u{3FFFD}'
 1614|  21.4k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  1.30k|        | '\u{50000}'..='\u{5FFFD}'
 1616|     70|        | '\u{60000}'..='\u{6FFFD}'
 1617|     61|        | '\u{70000}'..='\u{7FFFD}'
 1618|     58|        | '\u{80000}'..='\u{8FFFD}'
 1619|     58|        | '\u{90000}'..='\u{9FFFD}'
 1620|     58|        | '\u{A0000}'..='\u{AFFFD}'
 1621|     58|        | '\u{B0000}'..='\u{BFFFD}'
 1622|     58|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      4|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      4|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  96.0k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCs2RvTzHk1J7L_5oxrdf:
 1141|   178k|    fn next(&mut self) -> Option<char> {
 1142|   178k|        if let Some(head) = self.value.next() {
 1143|   165k|            self.position += head.len_utf8();
 1144|   165k|            Some(head)
 1145|       |        } else {
 1146|  12.5k|            None
 1147|       |        }
 1148|   178k|    }
_RNvCsbOXESBDtkxG_5oxiri23is_url_query_code_pointCs2RvTzHk1J7L_5oxrdf:
 1629|  42.3k|fn is_url_query_code_point(c: char) -> bool {
 1630|  42.3k|    is_url_code_point(c)
 1631|    471|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|  42.3k|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCs2RvTzHk1J7L_5oxrdf:
 1151|  11.7k|    fn front(&self) -> Option<char> {
 1152|  11.7k|        self.value.clone().next()
 1153|  11.7k|    }
_RINvMs11_CsbOXESBDtkxG_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs2RvTzHk1J7L_5oxrdf:
 1578|    132|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|    132|        Err(IriParseError { kind })
 1580|    132|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs2RvTzHk1J7L_5oxrdf:
 1468|  10.0k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  26.5k|        loop {
 1470|  26.5k|            let c = self.input.next();
 1471|  26.5k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  13.2k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  13.2k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  13.2k|                    } else if c == Some('/') {
 1481|  3.24k|                        self.output.push('/');
 1482|  10.0k|                    }
 1483|       |
 1484|  13.2k|                    if c == Some('?') {
 1485|  3.93k|                        self.output_positions.path_end = self.output.len();
 1486|  3.93k|                        self.output.push('?');
 1487|  3.93k|                        return self.parse_query();
 1488|  9.31k|                    } else if c == Some('#') {
 1489|    674|                        self.output_positions.path_end = self.output.len();
 1490|    674|                        self.output_positions.query_end = self.output.len();
 1491|    674|                        self.output.push('#');
 1492|    674|                        return self.parse_fragment();
 1493|  8.63k|                    } else if c.is_none() {
 1494|  5.39k|                        self.output_positions.path_end = self.output.len();
 1495|  5.39k|                        self.output_positions.query_end = self.output.len();
 1496|  5.39k|                        return Ok(());
 1497|  3.24k|                    }
 1498|       |                }
 1499|  13.3k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  10.0k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs2RvTzHk1J7L_5oxrdf:
  185|  11.0k|    pub fn into_inner(self) -> T {
  186|  11.0k|        self.iri
  187|  11.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs2RvTzHk1J7L_5oxrdf:
 1256|    674|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|    674|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|    674|            self.output_positions.scheme_end = 0;
 1305|    674|            self.input_scheme_end = 0;
 1306|    674|            if self.input.starts_with('/') {
 1307|    291|                self.input.next();
 1308|    291|                self.output.push('/');
 1309|    291|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|    383|                self.output_positions.authority_end = 0;
 1312|    383|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|    674|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs2RvTzHk1J7L_5oxrdf:
 1561|  1.79k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs2RvTzHk1J7L_5oxrdf:
   58|  11.7k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  11.7k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  11.6k|        Ok(Self { iri, positions })
   61|  11.7k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs2RvTzHk1J7L_5oxrdf:
  556|  11.7k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  11.7k|        IriRef::parse(iri)?.try_into()
  558|  11.7k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCs2RvTzHk1J7L_5oxrdf:
  199|  11.6k|    pub fn is_absolute(&self) -> bool {
  200|  11.6k|        self.positions.scheme_end != 0
  201|  11.6k|    }
_RNCNvMs11_CsbOXESBDtkxG_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs2RvTzHk1J7L_5oxrdf:
 1562|  1.78k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs2RvTzHk1J7L_5oxrdf:
 1245|  5.70k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  5.70k|        if self.input.starts_with('/') {
 1247|  4.13k|            self.input.next();
 1248|  4.13k|            self.output.push('/');
 1249|  4.13k|            self.parse_authority()
 1250|       |        } else {
 1251|  1.57k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  1.57k|            self.parse_path()
 1253|       |        }
 1254|  5.70k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs2RvTzHk1J7L_5oxrdf:
 1439|  4.04k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  4.04k|        match c {
 1441|       |            None => {
 1442|    791|                self.output_positions.path_end = self.output.len();
 1443|    791|                self.output_positions.query_end = self.output.len();
 1444|    791|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    164|                self.output_positions.path_end = self.output.len();
 1448|    164|                self.output.push('?');
 1449|    164|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|    685|                self.output_positions.path_end = self.output.len();
 1453|    685|                self.output_positions.query_end = self.output.len();
 1454|    685|                self.output.push('#');
 1455|    685|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  2.40k|                self.output.push('/');
 1459|  2.40k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  4.04k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs2RvTzHk1J7L_5oxrdf:
 1558|  1.80k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  1.80k|        let c1 = self.input.next();
 1560|  1.80k|        let c2 = self.input.next();
 1561|  1.80k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  1.78k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  1.77k|            self.output.push('%');
 1565|  1.77k|            self.output.push(c1.unwrap());
 1566|  1.77k|            self.output.push(c2.unwrap());
 1567|  1.77k|            Ok(())
 1568|       |        } else {
 1569|     23|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|     23|                Some('%'),
 1571|     23|                c1,
 1572|     23|                c2,
 1573|     23|            ]))
 1574|       |        }
 1575|  1.80k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs2RvTzHk1J7L_5oxrdf:
 1174|  11.7k|    fn parse(
 1175|  11.7k|        iri: &'a str,
 1176|  11.7k|        base: Option<IriRef<&'a str>>,
 1177|  11.7k|        output: &'a mut O,
 1178|  11.7k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  11.7k|        let mut parser = Self {
 1180|  11.7k|            iri,
 1181|  11.7k|            base,
 1182|  11.7k|            input: ParserInput {
 1183|  11.7k|                value: iri.chars(),
 1184|  11.7k|                position: 0,
 1185|  11.7k|            },
 1186|  11.7k|            output,
 1187|  11.7k|            output_positions: IriElementsPositions {
 1188|  11.7k|                scheme_end: 0,
 1189|  11.7k|                authority_end: 0,
 1190|  11.7k|                path_end: 0,
 1191|  11.7k|                query_end: 0,
 1192|  11.7k|            },
 1193|  11.7k|            input_scheme_end: 0,
 1194|  11.7k|        };
 1195|  11.7k|        parser.parse_scheme_start()?;
 1196|  11.6k|        Ok(parser.output_positions)
 1197|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs2RvTzHk1J7L_5oxrdf:
 1335|  4.13k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  14.9k|        loop {
 1338|  14.9k|            let c = self.input.next();
 1339|  14.9k|            match c {
 1340|       |                Some('@') => {
 1341|     16|                    self.output.push('@');
 1342|     16|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  4.11k|                    self.input = ParserInput {
 1346|  4.11k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  4.11k|                        position: self.input_scheme_end + 2,
 1348|  4.11k|                    };
 1349|  4.11k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  4.11k|                    return self.parse_host();
 1351|       |                }
 1352|  10.8k|                Some(c) => {
 1353|  10.8k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  4.13k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs2RvTzHk1J7L_5oxrdf:
 1518|  3.27k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  22.8k|        while let Some(c) = self.input.next() {
 1520|  19.6k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  3.26k|        Ok(())
 1523|  3.27k|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2RvTzHk1J7L_5oxrdf:
  968|  11.6k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  11.6k|        if iri.is_absolute() {
  970|  11.0k|            Ok(Self(iri))
  971|       |        } else {
  972|    560|            Err(IriParseError {
  973|    560|                kind: IriParseErrorKind::NoScheme,
  974|    560|            })
  975|       |        }
  976|  11.6k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs2RvTzHk1J7L_5oxrdf:
 1213|  11.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|  31.9k|        loop {
 1215|  31.9k|            let c = self.input.next();
 1216|  31.8k|            match c {
 1217|  31.8k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  20.7k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  11.0k|                    self.output.push(':');
 1222|  11.0k|                    self.output_positions.scheme_end = self.output.len();
 1223|  11.0k|                    self.input_scheme_end = self.input.position;
 1224|  11.0k|                    return if self.input.starts_with('/') {
 1225|  5.41k|                        self.input.next();
 1226|  5.41k|                        self.output.push('/');
 1227|  5.41k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  5.65k|                        self.output_positions.authority_end = self.output.len();
 1230|  5.65k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|     66|                    self.input = ParserInput {
 1235|     66|                        value: self.iri.chars(),
 1236|     66|                        position: 0,
 1237|     66|                    }; // reset
 1238|     66|                    self.output.clear();
 1239|     66|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  11.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs2RvTzHk1J7L_5oxrdf:
 1420|  1.81k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  2.31k|        loop {
 1422|  2.31k|            let c = self.input.next();
 1423|  2.31k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  1.80k|                    self.output_positions.authority_end = self.output.len();
 1426|  1.80k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|    511|                Some(c) => {
 1429|    511|                    if UNCHECKED || c.is_ascii_digit() {
 1430|    500|                        self.output.push(c)
 1431|       |                    } else {
 1432|     11|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  1.81k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs2RvTzHk1J7L_5oxrdf:
 1534|  53.7k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  53.7k|        if UNCHECKED || is_url_code_point(c) {
 1536|  52.1k|            self.output.push(c);
 1537|  52.1k|            Ok(())
 1538|  1.58k|        } else if c == '%' {
 1539|  1.57k|            self.read_echar()
 1540|       |        } else {
 1541|     11|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  53.7k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs2RvTzHk1J7L_5oxrdf:
  665|  11.0k|    pub fn into_inner(self) -> T {
  666|  11.0k|        self.0.into_inner()
  667|  11.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCs2RvTzHk1J7L_5oxrdf:
 1546|  42.3k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|  42.3k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|  42.1k|            self.output.push(c);
 1549|  42.1k|            Ok(())
 1550|    241|        } else if c == '%' {
 1551|    227|            self.read_echar()
 1552|       |        } else {
 1553|     14|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|  42.3k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs2RvTzHk1J7L_5oxrdf:
 1504|  4.09k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|  46.4k|        while let Some(c) = self.input.next() {
 1506|  44.3k|            if c == '#' {
 1507|  1.91k|                self.output_positions.query_end = self.output.len();
 1508|  1.91k|                self.output.push('#');
 1509|  1.91k|                return self.parse_fragment();
 1510|       |            } else {
 1511|  42.3k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  2.16k|        self.output_positions.query_end = self.output.len();
 1515|  2.16k|        Ok(())
 1516|  4.09k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs2RvTzHk1J7L_5oxrdf:
 1199|  11.7k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  11.7k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      1|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      1|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  11.7k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|    608|            _ => self.parse_relative(),
 1210|       |        }
 1211|  11.7k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs2RvTzHk1J7L_5oxrdf:
 1359|  4.12k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  4.12k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|     72|            let start_position = self.input.position;
 1363|  5.60k|            while let Some(c) = self.input.next() {
 1364|  5.53k|                self.output.push(c);
 1365|  5.53k|                if c == ']' {
 1366|      2|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|      2|                    if !UNCHECKED {
 1368|      2|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      2|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  5.53k|                }
 1393|       |            }
 1394|     70|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|     70|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  13.9k|            loop {
 1404|  13.9k|                let c = self.input.next();
 1405|  13.9k|                match c {
 1406|       |                    Some(':') => {
 1407|  1.81k|                        self.output.push(':');
 1408|  1.81k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  2.23k|                        self.output_positions.authority_end = self.output.len();
 1412|  2.23k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  9.91k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  4.12k|    }
_RNvXsW_CsbOXESBDtkxG_5oxiriNtB5_13IriParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1003|    692|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|    692|        match &self.kind {
 1005|    561|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|     70|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|     70|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|      2|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|     11|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|     25|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|     25|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|     23|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|     23|                f,
 1016|     23|                "Invalid IRI percent encoding '{}'",
 1017|     23|                cs.iter().flatten().cloned().collect::<String>()
 1018|     23|            ),
 1019|       |        }
 1020|    692|    }

_RNvNtCscEMhoEbPSQt_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  3.49k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  3.49k|    let parser = QueryResultsParser::from_format(format);
    8|  3.49k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  3.49k|    let Ok(reader) = parser.parse_read(data) else {
   11|  3.10k|        return;
   12|       |    };
   13|    386|    match reader {
   14|    384|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|    384|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|     91|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|    293|            let mut writer = serializer
   21|    293|                .serialize_solutions_to_write(
   22|    293|                    Vec::new(),
   23|    293|                    solutions
   24|    293|                        .first()
   25|    293|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|    293|                )
   27|    293|                .unwrap();
   28|  6.46k|            for solution in &solutions {
   29|  6.17k|                writer.write(solution).unwrap();
   30|  6.17k|            }
   31|    293|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|    293|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|    293|                .parse_read(serialized.as_bytes())
   36|    293|                .with_context(|| format!("Parsing {serialized:?}"))
   37|    293|                .unwrap()
   38|       |            {
   39|    293|                assert_eq!(
   40|    293|                    roundtrip_solutions
   41|    293|                        .collect::<Result<Vec<_>, _>>()
   42|    293|                        .with_context(|| format!("Parsing {serialized:?}"))
   43|    293|                        .unwrap(),
   44|    293|                    solutions
   45|    293|                )
   46|      0|            }
   47|       |        }
   48|      2|        FromReadQueryResultsReader::Boolean(value) => {
   49|      2|            // We try to write again
   50|      2|            let mut serialized = Vec::new();
   51|      2|            serializer
   52|      2|                .serialize_boolean_to_write(&mut serialized, value)
   53|      2|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      2|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      2|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  3.49k|}
_RNCNvNtCscEMhoEbPSQt_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|    283|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCsi7rvRgybzn0_10sparesults:
   29|  11.0k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  11.0k|        Self::new_unchecked(iri.into_inner())
   31|  11.0k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsi7rvRgybzn0_10sparesults:
   24|  11.7k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  11.7k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  11.7k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  11.0k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  11.0k|        Self { iri: iri.into() }
   41|  11.0k|    }

_RNvXsf_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCscEMhoEbPSQt_13oxigraph_fuzz:
   13|  3.83k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB2_8Variable6as_refCsi7rvRgybzn0_10sparesults:
   50|     14|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|     14|        VariableRef { name: &self.name }
   52|     14|    }
_RNvXsb_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsi7rvRgybzn0_10sparesults:
   13|   133k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf8variableNtB4_8VariableNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsi7rvRgybzn0_10sparesults:
   57|     14|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|     14|        self.as_ref().fmt(f)
   59|     14|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB2_8Variable6as_strCsi7rvRgybzn0_10sparesults:
   40|  12.2k|    pub fn as_str(&self) -> &str {
   41|  12.2k|        &self.name
   42|  12.2k|    }
_RNvXs1_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsi7rvRgybzn0_10sparesults:
  116|     14|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|     14|        write!(f, "?{}", self.name)
  118|     14|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB3_8Variable3newINtNtCsjOdcKtOMjJI_5alloc6borrow3CoweEECsi7rvRgybzn0_10sparesults:
   22|  8.85k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  8.85k|        let name = name.into();
   24|  8.85k|        validate_variable_identifier(&name)?;
   25|  8.84k|        Ok(Self::new_unchecked(name))
   26|  8.85k|    }
_RNvXst_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  214|      9|#[derive(Debug, thiserror::Error)]
_RNvNtCs2RvTzHk1J7L_5oxrdf8variable28validate_variable_identifier:
  163|  8.85k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  8.85k|    let mut chars = id.chars();
  165|  8.85k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  8.85k|    match front {
  167|  8.85k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  8.44k|        | 'A'..='Z'
  171|  5.81k|        | 'a'..='z'
  172|    107|        | '\u{00C0}'..='\u{00D6}'
  173|    107|        | '\u{00D8}'..='\u{00F6}'
  174|    107|        | '\u{00F8}'..='\u{02FF}'
  175|     95|        | '\u{0370}'..='\u{037D}'
  176|     95|        | '\u{037F}'..='\u{1FFF}'
  177|     66|        | '\u{200C}'..='\u{200D}'
  178|     66|        | '\u{2070}'..='\u{218F}'
  179|     66|        | '\u{2C00}'..='\u{2FEF}'
  180|     66|        | '\u{3001}'..='\u{D7FF}'
  181|     55|        | '\u{F900}'..='\u{FDCF}'
  182|     55|        | '\u{FDF0}'..='\u{FFFD}'
  183|  8.84k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      4|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|  47.5k|    for c in chars {
  187|  38.6k|        match c {
  188|  38.6k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  7.38k|            | '\u{0300}'..='\u{036F}'
  191|  4.13k|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  34.0k|            | 'A'..='Z'
  194|  19.6k|            | 'a'..='z'
  195|  7.54k|            | '\u{00C0}'..='\u{00D6}'
  196|  7.54k|            | '\u{00D8}'..='\u{00F6}'
  197|  7.54k|            | '\u{00F8}'..='\u{02FF}'
  198|  7.38k|            | '\u{0370}'..='\u{037D}'
  199|  7.38k|            | '\u{037F}'..='\u{1FFF}'
  200|  4.13k|            | '\u{200C}'..='\u{200D}'
  201|  4.13k|            | '\u{2070}'..='\u{218F}'
  202|  4.00k|            | '\u{2C00}'..='\u{2FEF}'
  203|  4.00k|            | '\u{3001}'..='\u{D7FF}'
  204|    926|            | '\u{F900}'..='\u{FDCF}'
  205|    926|            | '\u{FDF0}'..='\u{FFFD}'
  206|  38.6k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      4|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  8.84k|    Ok(())
  211|  8.85k|}
_RINvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   35|  8.84k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  8.84k|        Self { name: name.into() }
   37|  8.84k|    }

_RNvXs4_NtCsi7rvRgybzn0_10sparesults5errorNtB5_23QueryResultsSyntaxErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsbIuTKEyAQ2U_17json_event_parser4read11SyntaxErrorE4from:
  150|  2.22k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  151|  2.22k|        Self(SyntaxErrorKind::Json(error))
  152|  2.22k|    }
_RNvXs9_NtCsi7rvRgybzn0_10sparesults5errorNtB5_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_23QueryResultsSyntaxErrorE4from:
    7|  3.19k|#[derive(Debug, thiserror::Error)]
_RNvXs_NtCsi7rvRgybzn0_10sparesults5errorNtB4_22QueryResultsParseErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsbIuTKEyAQ2U_17json_event_parser4read10ParseErrorE4from:
   29|  2.22k|    fn from(error: json_event_parser::ParseError) -> Self {
   30|  2.22k|        match error {
   31|  2.22k|            json_event_parser::ParseError::Syntax(error) => {
   32|  2.22k|                QueryResultsSyntaxError::from(error).into()
   33|       |            }
   34|      0|            json_event_parser::ParseError::Io(error) => error.into(),
   35|       |        }
   36|  2.22k|    }
_RINvMs2_NtCsi7rvRgybzn0_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCsjOdcKtOMjJI_5alloc6string6StringEB8_:
   87|    845|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    845|        Self(SyntaxErrorKind::Msg {
   89|    845|            msg: msg.into(),
   90|    845|            location: None,
   91|    845|        })
   92|    845|    }
_RINvMs2_NtCsi7rvRgybzn0_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|    126|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    126|        Self(SyntaxErrorKind::Msg {
   89|    126|            msg: msg.into(),
   90|    126|            location: None,
   91|    126|        })
   92|    126|    }

_RNvMNtCsi7rvRgybzn0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCscEMhoEbPSQt_13oxigraph_fuzz:
   70|    293|    pub fn finish(mut self) -> io::Result<W> {
   71|    293|        let mut buffer = Vec::with_capacity(4);
   72|    293|        self.inner.finish(&mut buffer);
   73|    293|        Self::do_write(&mut self.writer, buffer)?;
   74|    293|        self.writer.finish()
   75|    293|    }
_RINvNtCsi7rvRgybzn0_10sparesults4json25write_boolean_json_resultQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
   15|      2|pub fn write_boolean_json_result<W: Write>(write: W, value: bool) -> io::Result<W> {
   16|      2|    let mut writer = ToWriteJsonWriter::new(write);
   17|     14|    for event in inner_write_boolean_json_result(value) {
   18|     14|        writer.write_event(event)?;
   19|       |    }
   20|      2|    writer.finish()
   21|      2|}
_RNvMNtCsi7rvRgybzn0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE8do_writeCscEMhoEbPSQt_13oxigraph_fuzz:
   77|  6.76k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   78|  27.0k|        for event in output {
   79|  20.2k|            writer.write_event(event)?;
   80|       |        }
   81|  6.76k|        Ok(())
   82|  6.76k|    }
_RNvMNtCsi7rvRgybzn0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5startCscEMhoEbPSQt_13oxigraph_fuzz:
   53|    293|    pub fn start(write: W, variables: &[Variable]) -> io::Result<Self> {
   54|    293|        let mut writer = ToWriteJsonWriter::new(write);
   55|    293|        let mut buffer = Vec::with_capacity(48);
   56|    293|        let inner = InnerJsonSolutionsWriter::start(&mut buffer, variables);
   57|    293|        Self::do_write(&mut writer, buffer)?;
   58|    293|        Ok(Self { inner, writer })
   59|    293|    }
_RNvMs0_NtCsi7rvRgybzn0_10sparesults4jsonINtB5_30FromReadJsonQueryResultsReaderRShE4readCscEMhoEbPSQt_13oxigraph_fuzz:
  232|  3.78k|    pub fn read(read: R) -> Result<Self, QueryResultsParseError> {
  233|  3.78k|        let mut reader = FromReadJsonReader::new(read);
  234|  3.78k|        let mut inner = JsonInnerReader::new();
  235|       |        loop {
  236|   217k|            if let Some(result) = inner.read_event(reader.read_next_event()?)? {
  237|    681|                return match result {
  238|       |                    JsonInnerQueryResults::Solutions {
  239|    677|                        variables,
  240|    677|                        solutions,
  241|    677|                    } => Ok(Self::Solutions {
  242|    677|                        variables,
  243|    677|                        solutions: FromReadJsonSolutionsReader {
  244|    677|                            inner: solutions,
  245|    677|                            reader,
  246|    677|                        },
  247|    677|                    }),
  248|      4|                    JsonInnerQueryResults::Boolean(value) => Ok(Self::Boolean(value)),
  249|       |                };
  250|   213k|            }
  251|       |        }
  252|  3.78k|    }
_RINvMs_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_24InnerJsonSolutionsWriter5writeINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2v_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeRNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableRNtNtB42_6triple4TermRNtB23_13QuerySolutionE0EECscEMhoEbPSQt_13oxigraph_fuzz:
  150|  6.17k|    fn write<'a>(
  151|  6.17k|        &self,
  152|  6.17k|        output: &mut Vec<JsonEvent<'a>>,
  153|  6.17k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  154|  6.17k|    ) {
  155|  6.17k|        output.push(JsonEvent::StartObject);
  156|  6.17k|        for (variable, value) in solution {
  157|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  158|      0|            write_json_term(output, value);
  159|      0|        }
  160|  6.17k|        output.push(JsonEvent::EndObject);
  161|  6.17k|    }
_RNvMs1_NtCsi7rvRgybzn0_10sparesults4jsonINtB5_27FromReadJsonSolutionsReaderRShE9read_nextCscEMhoEbPSQt_13oxigraph_fuzz:
  261|  13.3k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsParseError> {
  262|  13.3k|        match &mut self.inner {
  263|  6.91k|            JsonInnerSolutions::Reader(reader) => loop {
  264|  14.7k|                let event = self.reader.read_next_event()?;
  265|  14.6k|                if event == JsonEvent::Eof {
  266|    297|                    return Ok(None);
  267|  14.3k|                }
  268|  14.3k|                if let Some(result) = reader.read_event(event)? {
  269|  6.52k|                    return Ok(Some(result));
  270|  7.84k|                }
  271|       |            },
  272|  6.46k|            JsonInnerSolutions::Iterator(iter) => iter.next(),
  273|       |        }
  274|  13.3k|    }
_RINvMNtCsi7rvRgybzn0_10sparesults4jsonINtB3_26ToWriteJsonSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB36_22ToWriteSolutionsWriterB18_E5writeRNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableRNtNtB48_6triple4TermRNtB2E_13QuerySolutionE0EECscEMhoEbPSQt_13oxigraph_fuzz:
   61|  6.17k|    pub fn write<'a>(
   62|  6.17k|        &mut self,
   63|  6.17k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   64|  6.17k|    ) -> io::Result<()> {
   65|  6.17k|        let mut buffer = Vec::with_capacity(48);
   66|  6.17k|        self.inner.write(&mut buffer, solution);
   67|  6.17k|        Self::do_write(&mut self.writer, buffer)
   68|  6.17k|    }
_RNvXs8_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_19JsonInnerTermReaderNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  783|  6.93k|#[derive(Default)]
_RNvMs5_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_29JsonBufferedSolutionsIterator4next:
 1086|  6.46k|    fn next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsParseError> {
 1087|  6.46k|        let Some((variables, values)) = self.bindings.next() else {
 1088|    289|            return Ok(None);
 1089|       |        };
 1090|  6.17k|        let mut new_bindings = vec![None; self.mapping.len()];
 1091|  6.17k|        for (variable, value) in variables.into_iter().zip(values) {
 1092|      0|            let k = *self.mapping.get(&variable).ok_or_else(|| {
 1093|       |                QueryResultsSyntaxError::msg(format!(
 1094|       |                    "The variable {variable} has not been defined in the header"
 1095|       |                ))
 1096|      0|            })?;
 1097|      0|            new_bindings[k] = Some(value);
 1098|       |        }
 1099|  6.17k|        Ok(Some(new_bindings))
 1100|  6.46k|    }
_RNvMs2_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_15JsonInnerReader3new:
  394|  3.78k|    fn new() -> Self {
  395|  3.78k|        Self {
  396|  3.78k|            state: JsonInnerReaderState::Start,
  397|  3.78k|            variables: Vec::new(),
  398|  3.78k|            current_solution_variables: Vec::new(),
  399|  3.78k|            current_solution_values: Vec::new(),
  400|  3.78k|            solutions: Vec::new(),
  401|  3.78k|            vars_read: false,
  402|  3.78k|            solutions_read: false,
  403|  3.78k|        }
  404|  3.78k|    }
_RNvMs3_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_24JsonInnerSolutionsReader10read_event:
  721|  14.3k|    fn read_event(
  722|  14.3k|        &mut self,
  723|  14.3k|        event: JsonEvent<'_>,
  724|  14.3k|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  725|  14.3k|        match &mut self.state {
  726|  6.86k|            JsonInnerSolutionsReaderState::BeforeSolution => match event {
  727|       |                JsonEvent::StartObject => {
  728|  6.56k|                    self.state = JsonInnerSolutionsReaderState::BetweenSolutionTerms;
  729|  6.56k|                    self.new_bindings = vec![None; self.mapping.len()];
  730|  6.56k|                    Ok(None)
  731|       |                }
  732|       |                JsonEvent::EndArray => {
  733|    301|                    self.state = JsonInnerSolutionsReaderState::AfterEnd;
  734|    301|                    Ok(None)
  735|       |                }
  736|      3|                _ => Err(QueryResultsSyntaxError::msg(
  737|      3|                    "Expecting a new solution object",
  738|      3|                )),
  739|       |            },
  740|  6.55k|            JsonInnerSolutionsReaderState::BetweenSolutionTerms => match event {
  741|     23|                JsonEvent::ObjectKey(key) => {
  742|     23|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  743|       |                        QueryResultsSyntaxError::msg(format!(
  744|       |                            "The variable {key} has not been defined in the header"
  745|       |                        ))
  746|     23|                    })?;
  747|     13|                    self.state = JsonInnerSolutionsReaderState::Term {
  748|     13|                        reader: JsonInnerTermReader::default(),
  749|     13|                        key,
  750|     13|                    };
  751|     13|                    Ok(None)
  752|       |                }
  753|       |                JsonEvent::EndObject => {
  754|  6.52k|                    self.state = JsonInnerSolutionsReaderState::BeforeSolution;
  755|  6.52k|                    Ok(Some(take(&mut self.new_bindings)))
  756|       |                }
  757|      0|                _ => unreachable!(),
  758|       |            },
  759|       |            JsonInnerSolutionsReaderState::Term {
  760|    371|                ref mut reader,
  761|    371|                key,
  762|    371|            } => {
  763|    371|                let result = reader.read_event(event);
  764|    371|                if let Some(term) = result? {
  765|      0|                    self.new_bindings[*key] = Some(term);
  766|      0|                    self.state = JsonInnerSolutionsReaderState::BetweenSolutionTerms;
  767|    370|                }
  768|    370|                Ok(None)
  769|       |            }
  770|       |            JsonInnerSolutionsReaderState::AfterEnd => {
  771|    599|                if event == JsonEvent::EndObject {
  772|    597|                    Ok(None)
  773|       |                } else {
  774|      2|                    Err(QueryResultsSyntaxError::msg(
  775|      2|                        "Unexpected JSON after the end of the bindings array",
  776|      2|                    ))
  777|       |                }
  778|       |            }
  779|       |        }
  780|  14.3k|    }
_RNvMs2_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_15JsonInnerReader10read_event:
  406|   214k|    fn read_event(
  407|   214k|        &mut self,
  408|   214k|        event: JsonEvent<'_>,
  409|   214k|    ) -> Result<Option<JsonInnerQueryResults>, QueryResultsSyntaxError> {
  410|   214k|        match &mut self.state {
  411|       |            JsonInnerReaderState::Start => {
  412|  3.16k|                if event == JsonEvent::StartObject {
  413|  3.08k|                    self.state = JsonInnerReaderState::InRootObject;
  414|  3.08k|                    Ok(None)
  415|       |                } else {
  416|     73|                    Err(QueryResultsSyntaxError::msg(
  417|     73|                        "SPARQL JSON results must be an object",
  418|     73|                    ))
  419|       |                }
  420|       |            }
  421|  12.7k|            JsonInnerReaderState::InRootObject => match event {
  422|  12.7k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  423|  12.7k|                    "head" => {
  424|  3.14k|                        self.state = JsonInnerReaderState::BeforeHead;
  425|  3.14k|                        Ok(None)
  426|       |                    }
  427|  9.62k|                    "results" => {
  428|  2.67k|                        self.state = JsonInnerReaderState::BeforeResults;
  429|  2.67k|                        Ok(None)
  430|       |                    }
  431|  6.94k|                    "boolean" => {
  432|      6|                        self.state = JsonInnerReaderState::BeforeBoolean;
  433|      6|                        Ok(None)
  434|       |                    }
  435|       |                    _ => {
  436|  6.93k|                        self.state = JsonInnerReaderState::Ignore {
  437|  6.93k|                            level: 0,
  438|  6.93k|                            after: JsonInnerReaderStateAfterIgnore::InRootObject,
  439|  6.93k|                        };
  440|  6.93k|                        Ok(None)
  441|       |                    }
  442|       |                },
  443|      6|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  444|      6|                    "SPARQL JSON results must contain a 'boolean' or a 'results' key",
  445|      6|                )),
  446|      0|                _ => unreachable!(),
  447|       |            },
  448|       |            JsonInnerReaderState::BeforeHead => {
  449|  3.14k|                if event == JsonEvent::StartObject {
  450|  3.14k|                    self.state = JsonInnerReaderState::InHead;
  451|  3.14k|                    Ok(None)
  452|       |                } else {
  453|      1|                    Err(QueryResultsSyntaxError::msg(
  454|      1|                        "SPARQL JSON results head must be an object",
  455|      1|                    ))
  456|       |                }
  457|       |            }
  458|  15.1k|            JsonInnerReaderState::InHead => match event {
  459|  12.6k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  460|  12.6k|                    "vars" => {
  461|  1.42k|                        self.state = JsonInnerReaderState::BeforeVars;
  462|  1.42k|                        self.vars_read = true;
  463|  1.42k|                        Ok(None)
  464|       |                    }
  465|  11.2k|                    "links" => {
  466|     12|                        self.state = JsonInnerReaderState::BeforeLinks;
  467|     12|                        Ok(None)
  468|       |                    }
  469|       |                    _ => {
  470|  11.2k|                        self.state = JsonInnerReaderState::Ignore {
  471|  11.2k|                            level: 0,
  472|  11.2k|                            after: JsonInnerReaderStateAfterIgnore::InHead,
  473|  11.2k|                        };
  474|  11.2k|                        Ok(None)
  475|       |                    }
  476|       |                },
  477|       |                JsonEvent::EndObject => {
  478|  2.49k|                    self.state = JsonInnerReaderState::InRootObject;
  479|  2.49k|                    Ok(None)
  480|       |                }
  481|      0|                _ => unreachable!(),
  482|       |            },
  483|       |            JsonInnerReaderState::BeforeVars => {
  484|  1.41k|                if event == JsonEvent::StartArray {
  485|  1.41k|                    self.state = JsonInnerReaderState::InVars;
  486|  1.41k|                    Ok(None)
  487|       |                } else {
  488|      1|                    Err(QueryResultsSyntaxError::msg(
  489|      1|                        "SPARQL JSON results vars must be an array",
  490|      1|                    ))
  491|       |                }
  492|       |            }
  493|  10.1k|            JsonInnerReaderState::InVars => match event {
  494|  8.85k|                JsonEvent::String(variable) => match Variable::new(variable.clone()) {
  495|  8.84k|                    Ok(var) => {
  496|  8.84k|                        if self.variables.contains(&var) {
  497|     14|                            return Err(QueryResultsSyntaxError::msg(format!(
  498|     14|                                "The variable {var} is declared twice"
  499|     14|                            )));
  500|  8.83k|                        }
  501|  8.83k|                        self.variables.push(var);
  502|  8.83k|                        Ok(None)
  503|       |                    }
  504|      9|                    Err(e) => Err(QueryResultsSyntaxError::msg(format!(
  505|      9|                        "Invalid variable name '{variable}': {e}"
  506|      9|                    ))),
  507|       |                },
  508|       |                JsonEvent::EndArray => {
  509|  1.28k|                    if self.solutions_read {
  510|    289|                        let mut mapping = BTreeMap::default();
  511|  3.85k|                        for (i, var) in self.variables.iter().enumerate() {
  512|  3.85k|                            mapping.insert(var.as_str().to_owned(), i);
  513|  3.85k|                        }
  514|    289|                        Ok(Some(JsonInnerQueryResults::Solutions {
  515|    289|                            variables: take(&mut self.variables),
  516|    289|                            solutions: JsonInnerSolutions::Iterator(
  517|    289|                                JsonBufferedSolutionsIterator {
  518|    289|                                    mapping,
  519|    289|                                    bindings: take(&mut self.solutions).into_iter(),
  520|    289|                                },
  521|    289|                            ),
  522|    289|                        }))
  523|       |                    } else {
  524|    998|                        self.state = JsonInnerReaderState::InHead;
  525|    998|                        Ok(None)
  526|       |                    }
  527|       |                }
  528|      1|                _ => Err(QueryResultsSyntaxError::msg(
  529|      1|                    "Variables name in the vars array must be strings",
  530|      1|                )),
  531|       |            },
  532|       |            JsonInnerReaderState::BeforeLinks => {
  533|     12|                if event == JsonEvent::StartArray {
  534|     11|                    self.state = JsonInnerReaderState::InLinks;
  535|     11|                    Ok(None)
  536|       |                } else {
  537|      1|                    Err(QueryResultsSyntaxError::msg(
  538|      1|                        "SPARQL JSON results links must be an array",
  539|      1|                    ))
  540|       |                }
  541|       |            }
  542|     73|            JsonInnerReaderState::InLinks => match event {
  543|     69|                JsonEvent::String(_) => Ok(None),
  544|       |                JsonEvent::EndArray => {
  545|      3|                    self.state = JsonInnerReaderState::InHead;
  546|      3|                    Ok(None)
  547|       |                }
  548|      1|                _ => Err(QueryResultsSyntaxError::msg(
  549|      1|                    "Links in the links array must be strings",
  550|      1|                )),
  551|       |            },
  552|       |            JsonInnerReaderState::BeforeResults => {
  553|  2.67k|                if event == JsonEvent::StartObject {
  554|  2.67k|                    self.state = JsonInnerReaderState::InResults;
  555|  2.67k|                    Ok(None)
  556|       |                } else {
  557|      1|                    Err(QueryResultsSyntaxError::msg(
  558|      1|                        "SPARQL JSON results result must be an object",
  559|      1|                    ))
  560|       |                }
  561|       |            }
  562|  7.47k|            JsonInnerReaderState::InResults => match event {
  563|  7.46k|                JsonEvent::ObjectKey(key) => {
  564|  7.46k|                    if key == "bindings" {
  565|  2.57k|                        self.state = JsonInnerReaderState::BeforeBindings;
  566|  2.57k|                        Ok(None)
  567|       |                    } else {
  568|  4.89k|                        self.state = JsonInnerReaderState::Ignore {
  569|  4.89k|                            level: 0,
  570|  4.89k|                            after: JsonInnerReaderStateAfterIgnore::InResults,
  571|  4.89k|                        };
  572|  4.89k|                        Ok(None)
  573|       |                    }
  574|       |                }
  575|     10|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  576|     10|                    "The results object must contains a 'bindings' key",
  577|     10|                )),
  578|      0|                _ => unreachable!(),
  579|       |            },
  580|       |            JsonInnerReaderState::BeforeBindings => {
  581|  2.57k|                if event == JsonEvent::StartArray {
  582|  2.57k|                    self.solutions_read = true;
  583|  2.57k|                    if self.vars_read {
  584|    388|                        let mut mapping = BTreeMap::default();
  585|  4.56k|                        for (i, var) in self.variables.iter().enumerate() {
  586|  4.56k|                            mapping.insert(var.as_str().to_owned(), i);
  587|  4.56k|                        }
  588|    388|                        Ok(Some(JsonInnerQueryResults::Solutions {
  589|    388|                            variables: take(&mut self.variables),
  590|    388|                            solutions: JsonInnerSolutions::Reader(JsonInnerSolutionsReader {
  591|    388|                                state: JsonInnerSolutionsReaderState::BeforeSolution,
  592|    388|                                mapping,
  593|    388|                                new_bindings: Vec::new(),
  594|    388|                            }),
  595|    388|                        }))
  596|       |                    } else {
  597|  2.18k|                        self.state = JsonInnerReaderState::BeforeSolution;
  598|  2.18k|                        Ok(None)
  599|       |                    }
  600|       |                } else {
  601|      1|                    Err(QueryResultsSyntaxError::msg(
  602|      1|                        "SPARQL JSON results bindings must be an array",
  603|      1|                    ))
  604|       |                }
  605|       |            }
  606|  9.60k|            JsonInnerReaderState::BeforeSolution => match event {
  607|       |                JsonEvent::StartObject => {
  608|  8.75k|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  609|  8.75k|                    Ok(None)
  610|       |                }
  611|       |                JsonEvent::EndArray => {
  612|    854|                    self.state = JsonInnerReaderState::AfterBindings;
  613|    854|                    Ok(None)
  614|       |                }
  615|      1|                _ => Err(QueryResultsSyntaxError::msg(
  616|      1|                    "Expecting a new solution object",
  617|      1|                )),
  618|       |            },
  619|  8.75k|            JsonInnerReaderState::BetweenSolutionTerms => match event {
  620|  1.31k|                JsonEvent::ObjectKey(key) => {
  621|  1.31k|                    self.state = JsonInnerReaderState::Term {
  622|  1.31k|                        reader: JsonInnerTermReader::default(),
  623|  1.31k|                        variable: key.into(),
  624|  1.31k|                    };
  625|  1.31k|                    Ok(None)
  626|       |                }
  627|       |                JsonEvent::EndObject => {
  628|  7.44k|                    self.state = JsonInnerReaderState::BeforeSolution;
  629|  7.44k|                    self.solutions.push((
  630|  7.44k|                        take(&mut self.current_solution_variables),
  631|  7.44k|                        take(&mut self.current_solution_values),
  632|  7.44k|                    ));
  633|  7.44k|                    Ok(None)
  634|       |                }
  635|      0|                _ => unreachable!(),
  636|       |            },
  637|       |            JsonInnerReaderState::Term {
  638|  53.5k|                ref mut reader,
  639|  53.5k|                variable,
  640|  53.5k|            } => {
  641|  53.5k|                let result = reader.read_event(event);
  642|  53.5k|                if let Some(term) = result? {
  643|      0|                    self.current_solution_variables.push(take(variable));
  644|      0|                    self.current_solution_values.push(term);
  645|      0|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  646|  52.7k|                }
  647|  52.7k|                Ok(None)
  648|       |            }
  649|       |            JsonInnerReaderState::AfterBindings => {
  650|  4.86k|                if event == JsonEvent::EndObject {
  651|    782|                    self.state = JsonInnerReaderState::InRootObject;
  652|    782|                } else {
  653|  4.07k|                    self.state = JsonInnerReaderState::Ignore {
  654|  4.07k|                        level: 0,
  655|  4.07k|                        after: JsonInnerReaderStateAfterIgnore::AfterBindings,
  656|  4.07k|                    }
  657|       |                }
  658|  4.86k|                Ok(None)
  659|       |            }
  660|       |            JsonInnerReaderState::BeforeBoolean => {
  661|      5|                if let JsonEvent::Boolean(v) = event {
  662|      4|                    Ok(Some(JsonInnerQueryResults::Boolean(v)))
  663|       |                } else {
  664|      1|                    Err(QueryResultsSyntaxError::msg("Unexpected boolean value"))
  665|       |                }
  666|       |            }
  667|       |            #[allow(clippy::ref_patterns)]
  668|  79.5k|            JsonInnerReaderState::Ignore { level, ref after } => {
  669|  79.5k|                let level = match event {
  670|  21.7k|                    JsonEvent::StartArray | JsonEvent::StartObject => *level + 1,
  671|  7.99k|                    JsonEvent::EndArray | JsonEvent::EndObject => *level - 1,
  672|       |                    JsonEvent::String(_)
  673|       |                    | JsonEvent::Number(_)
  674|       |                    | JsonEvent::Boolean(_)
  675|       |                    | JsonEvent::Null
  676|       |                    | JsonEvent::ObjectKey(_)
  677|  49.7k|                    | JsonEvent::Eof => *level,
  678|       |                };
  679|  79.5k|                self.state = if level == 0 {
  680|  26.5k|                    match after {
  681|       |                        JsonInnerReaderStateAfterIgnore::InRootObject => {
  682|  6.64k|                            JsonInnerReaderState::InRootObject
  683|       |                        }
  684|  11.0k|                        JsonInnerReaderStateAfterIgnore::InHead => JsonInnerReaderState::InHead,
  685|       |                        JsonInnerReaderStateAfterIgnore::InResults => {
  686|  4.81k|                            JsonInnerReaderState::InResults
  687|       |                        }
  688|       |                        JsonInnerReaderStateAfterIgnore::AfterBindings => {
  689|  4.01k|                            JsonInnerReaderState::AfterBindings
  690|       |                        }
  691|       |                    }
  692|       |                } else {
  693|  52.9k|                    JsonInnerReaderState::Ignore {
  694|  52.9k|                        level,
  695|  52.9k|                        after: *after,
  696|  52.9k|                    }
  697|       |                };
  698|  79.5k|                Ok(None)
  699|       |            }
  700|       |        }
  701|   214k|    }
_RNvMs_NtCsi7rvRgybzn0_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter6finish:
  164|    293|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  165|    293|        output.push(JsonEvent::EndArray);
  166|    293|        output.push(JsonEvent::EndObject);
  167|    293|        output.push(JsonEvent::EndObject);
  168|    293|    }
_RNvMs4_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_19JsonInnerTermReader10read_event:
  826|   946k|    fn read_event(
  827|   946k|        &mut self,
  828|   946k|        event: JsonEvent<'_>,
  829|   946k|    ) -> Result<Option<Term>, QueryResultsSyntaxError> {
  830|   946k|        match &mut self.state {
  831|       |            JsonInnerTermReaderState::Start => {
  832|  6.92k|                if event == JsonEvent::StartObject {
  833|  6.90k|                    self.state = JsonInnerTermReaderState::Middle;
  834|  6.90k|                    Ok(None)
  835|       |                } else {
  836|     14|                    Err(QueryResultsSyntaxError::msg(
  837|     14|                        "RDF terms must be encoded using objects",
  838|     14|                    ))
  839|       |                }
  840|       |            }
  841|  20.7k|            JsonInnerTermReaderState::Middle => match event {
  842|  20.7k|                JsonEvent::ObjectKey(object_key) => {
  843|  20.7k|                    self.state = match object_key.as_ref() {
  844|  20.7k|                        "type" => JsonInnerTermReaderState::TermType,
  845|  20.5k|                        "value" => JsonInnerTermReaderState::Value,
  846|  12.2k|                        "datatype" => JsonInnerTermReaderState::Datatype,
  847|    389|                        "xml:lang" => JsonInnerTermReaderState::Lang,
  848|       |                        _ => {
  849|    100|                            return Err(QueryResultsSyntaxError::msg(format!(
  850|    100|                                "Unsupported term key: {object_key}"
  851|    100|                            )));
  852|       |                        }
  853|       |                    };
  854|  20.6k|                    Ok(None)
  855|       |                }
  856|       |                JsonEvent::EndObject => {
  857|      5|                    self.state = JsonInnerTermReaderState::Start;
  858|      5|                    match self.term_type.take() {
  859|      1|                        None => Err(QueryResultsSyntaxError::msg(
  860|      1|                            "Term serialization should have a 'type' key",
  861|      1|                        )),
  862|       |                        Some(TermType::Uri) => Ok(Some(
  863|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  864|       |                                QueryResultsSyntaxError::msg(
  865|       |                                    "uri serialization should have a 'value' key",
  866|       |                                )
  867|      1|                            })?)
  868|      0|                            .map_err(|e| {
  869|       |                                QueryResultsSyntaxError::msg(format!("Invalid uri value: {e}"))
  870|      0|                            })?
  871|      0|                            .into(),
  872|       |                        )),
  873|       |                        Some(TermType::BNode) => Ok(Some(
  874|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  875|       |                                QueryResultsSyntaxError::msg(
  876|       |                                    "bnode serialization should have a 'value' key",
  877|       |                                )
  878|      1|                            })?)
  879|      0|                            .map_err(|e| {
  880|       |                                QueryResultsSyntaxError::msg(format!("Invalid bnode value: {e}"))
  881|      0|                            })?
  882|      0|                            .into(),
  883|       |                        )),
  884|       |                        Some(TermType::Literal) => {
  885|      1|                            let value = self.value.take().ok_or_else(|| {
  886|       |                                QueryResultsSyntaxError::msg(
  887|       |                                    "literal serialization should have a 'value' key",
  888|       |                                )
  889|      1|                            })?;
  890|      0|                            Ok(Some(match self.lang.take() {
  891|      0|                                    Some(lang) => {
  892|      0|                                        if let Some(datatype) = &self.datatype {
  893|      0|                                            if datatype.as_ref() != rdf::LANG_STRING {
  894|      0|                                                return Err(QueryResultsSyntaxError::msg(format!(
  895|      0|                                                    "xml:lang value '{lang}' provided with the datatype {datatype}"
  896|      0|                                                )));
  897|      0|                                            }
  898|      0|                                        }
  899|      0|                                        Literal::new_language_tagged_literal(value, &*lang)
  900|      0|                                            .map_err(|e| {
  901|       |                                                QueryResultsSyntaxError::msg(format!(
  902|       |                                                    "Invalid xml:lang value '{lang}': {e}"
  903|       |                                                ))
  904|      0|                                            })?
  905|       |                                    }
  906|       |                                    None => {
  907|      0|                                        if let Some(datatype) = self.datatype.take() {
  908|      0|                                            Literal::new_typed_literal(value, datatype)
  909|       |                                        } else {
  910|      0|                                            Literal::new_simple_literal(value)
  911|       |                                        }
  912|       |                                    }
  913|      0|                                }.into()))
  914|       |                        }
  915|       |                        #[cfg(feature = "rdf-star")]
  916|       |                        Some(TermType::Triple) => Ok(Some(
  917|       |                            Triple::new(
  918|      1|                                match self.subject.take().ok_or_else(|| {
  919|       |                                    QueryResultsSyntaxError::msg(
  920|       |                                        "triple serialization should have a 'subject' key",
  921|       |                                    )
  922|      1|                                })? {
  923|      0|                                    Term::NamedNode(subject) => subject.into(),
  924|      0|                                    Term::BlankNode(subject) => subject.into(),
  925|      0|                                    Term::Triple(subject) => Subject::Triple(subject),
  926|       |                                    Term::Literal(_) => {
  927|      0|                                        return Err(QueryResultsSyntaxError::msg(
  928|      0|                                            "The 'subject' value should not be a literal",
  929|      0|                                        ));
  930|       |                                    }
  931|       |                                },
  932|      0|                                match self.predicate.take().ok_or_else(|| {
  933|       |                                    QueryResultsSyntaxError::msg(
  934|       |                                        "triple serialization should have a 'predicate' key",
  935|       |                                    )
  936|      0|                                })? {
  937|      0|                                    Term::NamedNode(predicate) => predicate,
  938|       |                                    _ => {
  939|      0|                                        return Err(QueryResultsSyntaxError::msg(
  940|      0|                                            "The 'predicate' value should be a uri",
  941|      0|                                        ));
  942|       |                                    }
  943|       |                                },
  944|      0|                                self.object.take().ok_or_else(|| {
  945|       |                                    QueryResultsSyntaxError::msg(
  946|       |                                        "triple serialization should have a 'object' key",
  947|       |                                    )
  948|      0|                                })?,
  949|       |                            )
  950|      0|                            .into(),
  951|       |                        )),
  952|       |                    }
  953|       |                }
  954|      0|                _ => unreachable!(),
  955|       |            },
  956|       |            JsonInnerTermReaderState::TermType => {
  957|    152|                self.state = JsonInnerTermReaderState::Middle;
  958|    152|                if let JsonEvent::String(value) = event {
  959|    151|                    match value.as_ref() {
  960|    151|                        "uri" => {
  961|     75|                            self.term_type = Some(TermType::Uri);
  962|     75|                            Ok(None)
  963|       |                        }
  964|     76|                        "bnode" => {
  965|     19|                            self.term_type = Some(TermType::BNode);
  966|     19|                            Ok(None)
  967|       |                        }
  968|     57|                        "literal" | "typed-literal" => {
  969|     30|                            self.term_type = Some(TermType::Literal);
  970|     30|                            Ok(None)
  971|       |                        }
  972|       |                        #[cfg(feature = "rdf-star")]
  973|     27|                        "triple" => {
  974|     20|                            self.term_type = Some(TermType::Triple);
  975|     20|                            Ok(None)
  976|       |                        }
  977|      7|                        _ => Err(QueryResultsSyntaxError::msg(format!(
  978|      7|                            "Unexpected term type: '{value}'"
  979|      7|                        ))),
  980|       |                    }
  981|       |                } else {
  982|      1|                    Err(QueryResultsSyntaxError::msg("Term type must be a string"))
  983|       |                }
  984|       |            }
  985|  8.37k|            JsonInnerTermReaderState::Value => match event {
  986|  2.67k|                JsonEvent::String(value) => {
  987|  2.67k|                    self.value = Some(value.into_owned());
  988|  2.67k|                    self.state = JsonInnerTermReaderState::Middle;
  989|  2.67k|                    Ok(None)
  990|       |                }
  991|       |                #[cfg(feature = "rdf-star")]
  992|       |                JsonEvent::StartObject => {
  993|  5.69k|                    self.state = JsonInnerTermReaderState::InValue;
  994|  5.69k|                    Ok(None)
  995|       |                }
  996|       |                _ => {
  997|      1|                    self.state = JsonInnerTermReaderState::Middle;
  998|      1|
  999|      1|                    Err(QueryResultsSyntaxError::msg("Term value must be a string"))
 1000|       |                }
 1001|       |            },
 1002|       |            JsonInnerTermReaderState::Lang => {
 1003|    286|                let result = if let JsonEvent::String(value) = event {
 1004|    285|                    self.lang = Some(value.into_owned());
 1005|    285|                    Ok(None)
 1006|       |                } else {
 1007|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1008|       |                };
 1009|    286|                self.state = JsonInnerTermReaderState::Middle;
 1010|    286|
 1011|    286|                result
 1012|       |            }
 1013|       |            JsonInnerTermReaderState::Datatype => {
 1014|  11.7k|                let result = if let JsonEvent::String(value) = event {
 1015|  11.7k|                    match NamedNode::new(value) {
 1016|  11.0k|                        Ok(datatype) => {
 1017|  11.0k|                            self.datatype = Some(datatype);
 1018|  11.0k|                            Ok(None)
 1019|       |                        }
 1020|    692|                        Err(e) => Err(QueryResultsSyntaxError::msg(format!(
 1021|    692|                            "Invalid datatype: {e}"
 1022|    692|                        ))),
 1023|       |                    }
 1024|       |                } else {
 1025|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1026|       |                };
 1027|  11.7k|                self.state = JsonInnerTermReaderState::Middle;
 1028|  11.7k|
 1029|  11.7k|                result
 1030|       |            }
 1031|       |            #[cfg(feature = "rdf-star")]
 1032|  5.69k|            JsonInnerTermReaderState::InValue => match event {
 1033|  5.62k|                JsonEvent::ObjectKey(object_key) => {
 1034|  5.62k|                    self.state = match object_key.as_ref() {
 1035|  5.62k|                        "subject" => JsonInnerTermReaderState::Subject(Box::default()),
 1036|  5.58k|                        "predicate" => JsonInnerTermReaderState::Predicate(Box::default()),
 1037|     46|                        "object" => JsonInnerTermReaderState::Object(Box::default()),
 1038|       |                        _ => {
 1039|     13|                            return Err(QueryResultsSyntaxError::msg(format!(
 1040|     13|                                "Unsupported value key: {object_key}"
 1041|     13|                            )));
 1042|       |                        }
 1043|       |                    };
 1044|  5.61k|                    Ok(None)
 1045|       |                }
 1046|       |                JsonEvent::EndObject => {
 1047|     66|                    self.state = JsonInnerTermReaderState::Middle;
 1048|     66|                    Ok(None)
 1049|       |                }
 1050|      0|                _ => unreachable!(),
 1051|       |            },
 1052|       |            #[cfg(feature = "rdf-star")]
 1053|    670|            JsonInnerTermReaderState::Subject(ref mut inner_state) => {
 1054|    670|                if let Some(term) = inner_state.read_event(event)? {
 1055|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1056|      0|                    self.subject = Some(term);
 1057|    652|                }
 1058|    652|                Ok(None)
 1059|       |            }
 1060|       |            #[cfg(feature = "rdf-star")]
 1061|   891k|            JsonInnerTermReaderState::Predicate(ref mut inner_state) => {
 1062|   891k|                if let Some(term) = inner_state.read_event(event)? {
 1063|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1064|      0|                    self.predicate = Some(term);
 1065|   889k|                }
 1066|   889k|                Ok(None)
 1067|       |            }
 1068|       |            #[cfg(feature = "rdf-star")]
 1069|    528|            JsonInnerTermReaderState::Object(ref mut inner_state) => {
 1070|    528|                if let Some(term) = inner_state.read_event(event)? {
 1071|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1072|      0|                    self.object = Some(term);
 1073|    504|                }
 1074|    504|                Ok(None)
 1075|       |            }
 1076|       |        }
 1077|   946k|    }
_RNvMs_NtCsi7rvRgybzn0_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter5start:
  131|    293|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  132|    293|        output.push(JsonEvent::StartObject);
  133|    293|        output.push(JsonEvent::ObjectKey("head".into()));
  134|    293|        output.push(JsonEvent::StartObject);
  135|    293|        output.push(JsonEvent::ObjectKey("vars".into()));
  136|    293|        output.push(JsonEvent::StartArray);
  137|  4.12k|        for variable in variables {
  138|  3.83k|            output.push(JsonEvent::String(variable.as_str().into()));
  139|  3.83k|        }
  140|    293|        output.push(JsonEvent::EndArray);
  141|    293|        output.push(JsonEvent::EndObject);
  142|    293|        output.push(JsonEvent::ObjectKey("results".into()));
  143|    293|        output.push(JsonEvent::StartObject);
  144|    293|        output.push(JsonEvent::ObjectKey("bindings".into()));
  145|    293|        output.push(JsonEvent::StartArray);
  146|    293|        Self {}
  147|    293|    }
_RNvNtCsi7rvRgybzn0_10sparesults4json31inner_write_boolean_json_result:
   35|      2|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   36|      2|    [
   37|      2|        JsonEvent::StartObject,
   38|      2|        JsonEvent::ObjectKey("head".into()),
   39|      2|        JsonEvent::StartObject,
   40|      2|        JsonEvent::EndObject,
   41|      2|        JsonEvent::ObjectKey("boolean".into()),
   42|      2|        JsonEvent::Boolean(value),
   43|      2|        JsonEvent::EndObject,
   44|      2|    ]
   45|      2|}
_RNvXs9_NtCsi7rvRgybzn0_10sparesults4jsonNtB5_24JsonInnerTermReaderStateNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  798|  6.93k|#[derive(Default)]
_RNCNvMs4_NtCsi7rvRgybzn0_10sparesults4jsonNtB7_19JsonInnerTermReader10read_event0B9_:
  863|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  864|      1|                                QueryResultsSyntaxError::msg(
  865|      1|                                    "uri serialization should have a 'value' key",
  866|      1|                                )
  867|      1|                            })?)
_RNCNvMs4_NtCsi7rvRgybzn0_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events4_0B9_:
  918|      1|                                match self.subject.take().ok_or_else(|| {
  919|      1|                                    QueryResultsSyntaxError::msg(
  920|      1|                                        "triple serialization should have a 'subject' key",
  921|      1|                                    )
  922|      1|                                })? {
_RNCNvMs3_NtCsi7rvRgybzn0_10sparesults4jsonNtB7_24JsonInnerSolutionsReader10read_event0B9_:
  742|     10|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  743|     10|                        QueryResultsSyntaxError::msg(format!(
  744|     10|                            "The variable {key} has not been defined in the header"
  745|     10|                        ))
  746|     10|                    })?;
_RNCNvMs4_NtCsi7rvRgybzn0_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events0_0B9_:
  874|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  875|      1|                                QueryResultsSyntaxError::msg(
  876|      1|                                    "bnode serialization should have a 'value' key",
  877|      1|                                )
  878|      1|                            })?)
_RNCNvMs4_NtCsi7rvRgybzn0_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events2_0B9_:
  885|      1|                            let value = self.value.take().ok_or_else(|| {
  886|      1|                                QueryResultsSyntaxError::msg(
  887|      1|                                    "literal serialization should have a 'value' key",
  888|      1|                                )
  889|      1|                            })?;

_RNvXs1_NtCsi7rvRgybzn0_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCscEMhoEbPSQt_13oxigraph_fuzz:
  309|  13.3k|    fn next(&mut self) -> Option<Self::Item> {
  310|  13.3k|        Some(
  311|  13.3k|            match &mut self.solutions {
  312|      0|                FromReadSolutionsReaderKind::Xml(reader) => reader.read_next(),
  313|  13.3k|                FromReadSolutionsReaderKind::Json(reader) => reader.read_next(),
  314|      0|                FromReadSolutionsReaderKind::Tsv(reader) => reader.read_next(),
  315|       |            }
  316|  13.3k|            .transpose()?
  317|  12.7k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  318|       |        )
  319|  13.3k|    }
_RNCNvXs1_NtCsi7rvRgybzn0_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0CscEMhoEbPSQt_13oxigraph_fuzz:
  317|  12.7k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RINvMNtCsi7rvRgybzn0_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECscEMhoEbPSQt_13oxigraph_fuzz:
   83|  3.78k|    pub fn parse_read<R: Read>(
   84|  3.78k|        &self,
   85|  3.78k|        reader: R,
   86|  3.78k|    ) -> Result<FromReadQueryResultsReader<R>, QueryResultsParseError> {
   87|  3.78k|        Ok(match self.format {
   88|      0|            QueryResultsFormat::Xml => match FromReadXmlQueryResultsReader::read(reader)? {
   89|      0|                FromReadXmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                FromReadXmlQueryResultsReader::Solutions {
   91|      0|                    solutions,
   92|      0|                    variables,
   93|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|      0|                    variables: variables.into(),
   95|      0|                    solutions: FromReadSolutionsReaderKind::Xml(solutions),
   96|      0|                }),
   97|       |            },
   98|  3.78k|            QueryResultsFormat::Json => match FromReadJsonQueryResultsReader::read(reader)? {
   99|      4|                FromReadJsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  100|       |                FromReadJsonQueryResultsReader::Solutions {
  101|    677|                    solutions,
  102|    677|                    variables,
  103|    677|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  104|    677|                    variables: variables.into(),
  105|    677|                    solutions: FromReadSolutionsReaderKind::Json(solutions),
  106|    677|                }),
  107|       |            },
  108|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  109|      0|            QueryResultsFormat::Tsv => match FromReadTsvQueryResultsReader::read(reader)? {
  110|      0|                FromReadTsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  111|       |                FromReadTsvQueryResultsReader::Solutions {
  112|      0|                    solutions,
  113|      0|                    variables,
  114|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  115|      0|                    variables: variables.into(),
  116|      0|                    solutions: FromReadSolutionsReaderKind::Tsv(solutions),
  117|      0|                }),
  118|       |            },
  119|       |        })
  120|  3.78k|    }
_RNvMNtCsi7rvRgybzn0_10sparesults6parserNtB2_18QueryResultsParser11from_formatCscEMhoEbPSQt_13oxigraph_fuzz:
   54|  3.49k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   55|  3.49k|        Self { format }
   56|  3.49k|    }

_RNvMs0_NtCsi7rvRgybzn0_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE6finishCscEMhoEbPSQt_13oxigraph_fuzz:
  311|    293|    pub fn finish(self) -> io::Result<W> {
  312|    293|        match self.formatter {
  313|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  314|    293|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  315|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  316|      0|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  317|       |        }
  318|    293|    }
_RINvMNtCsi7rvRgybzn0_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
   71|      2|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      2|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      2|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      0|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      2|    }
_RINvMs0_NtCsi7rvRgybzn0_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCsjOdcKtOMjJI_5alloc3vec3VechEE5writeRNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECscEMhoEbPSQt_13oxigraph_fuzz:
  297|  6.17k|    pub fn write<'a>(
  298|  6.17k|        &mut self,
  299|  6.17k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  300|  6.17k|    ) -> io::Result<()> {
  301|  6.17k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  302|  6.17k|        match &mut self.formatter {
  303|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  304|  6.17k|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  305|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  306|      0|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  307|       |        }
  308|  6.17k|    }
_RINvMNtCsi7rvRgybzn0_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCsjOdcKtOMjJI_5alloc3vec3VechEECscEMhoEbPSQt_13oxigraph_fuzz:
  142|    293|    pub fn serialize_solutions_to_write<W: Write>(
  143|    293|        &self,
  144|    293|        write: W,
  145|    293|        variables: Vec<Variable>,
  146|    293|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  147|    293|        Ok(ToWriteSolutionsWriter {
  148|    293|            formatter: match self.format {
  149|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  150|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  151|       |                ),
  152|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  153|    293|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  154|       |                ),
  155|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  156|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  157|       |                ),
  158|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  159|      0|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  160|       |                ),
  161|       |            },
  162|       |        })
  163|    293|    }
_RNvMNtCsi7rvRgybzn0_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCscEMhoEbPSQt_13oxigraph_fuzz:
   55|  3.49k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  3.49k|        Self { format }
   57|  3.49k|    }

_RNvXs_NtCsi7rvRgybzn0_10sparesults8solutionNtB4_13QuerySolutionINtNtCs9nhK3FOW46N_4core7convert4FromTINtNtCsjOdcKtOMjJI_5alloc4sync3ArcSNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCscEMhoEbPSQt_13oxigraph_fuzz:
  165|  12.7k|    fn from((v, s): (V, S)) -> Self {
  166|  12.7k|        Self {
  167|  12.7k|            variables: v.into(),
  168|  12.7k|            values: s.into(),
  169|  12.7k|        }
  170|  12.7k|    }
_RNvMNtCsi7rvRgybzn0_10sparesults8solutionNtB2_13QuerySolution9variablesCscEMhoEbPSQt_13oxigraph_fuzz:
  158|    283|    pub fn variables(&self) -> &[Variable] {
  159|    283|        &self.variables
  160|    283|    }
_RNvXs0_NtCsi7rvRgybzn0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iterCscEMhoEbPSQt_13oxigraph_fuzz:
  178|  6.17k|    fn into_iter(self) -> Self::IntoIter {
  179|  6.17k|        Iter {
  180|  6.17k|            inner: self.variables.iter().zip(&self.values),
  181|  6.17k|        }
  182|  6.17k|    }
_RNvXs9_NtCsi7rvRgybzn0_10sparesults8solutionNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCscEMhoEbPSQt_13oxigraph_fuzz:
  285|  6.17k|    fn next(&mut self) -> Option<Self::Item> {
  286|  20.6k|        for (variable, value) in &mut self.inner {
  287|  14.4k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|  14.4k|            }
  290|       |        }
  291|  6.17k|        None
  292|  6.17k|    }
_RNvXs6_NtCsi7rvRgybzn0_10sparesults8solutionNtB5_13QuerySolutionNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  236|  6.17k|    fn eq(&self, other: &Self) -> bool {
  237|  6.17k|        for (k, v) in self.iter() {
  238|      0|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|      0|            }
  241|       |        }
  242|  6.17k|        for (k, v) in other.iter() {
  243|      0|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|      0|            }
  246|       |        }
  247|  6.17k|        true
  248|  6.17k|    }
_RNvMNtCsi7rvRgybzn0_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  12.3k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  12.3k|        self.into_iter()
  114|  12.3k|    }
_RNvXs0_NtCsi7rvRgybzn0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  12.3k|    fn into_iter(self) -> Self::IntoIter {
  179|  12.3k|        Iter {
  180|  12.3k|            inner: self.variables.iter().zip(&self.values),
  181|  12.3k|        }
  182|  12.3k|    }
_RNvXs9_NtCsi7rvRgybzn0_10sparesults8solutionNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  12.3k|    fn next(&mut self) -> Option<Self::Item> {
  286|  41.3k|        for (variable, value) in &mut self.inner {
  287|  28.9k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|  28.9k|            }
  290|       |        }
  291|  12.3k|        None
  292|  12.3k|    }


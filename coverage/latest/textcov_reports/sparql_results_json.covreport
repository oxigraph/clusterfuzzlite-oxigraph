_RINvXNtCskKBxWhS5x10_6anyhow7contextINtNtCsewp07EQjaMZ_4core6result6ResultINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs7SkuAFpjVRX_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCs19LGvG89wkE_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|     29|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|     29|    where
   60|     29|        C: Display + Send + Sync + 'static,
   61|     29|        F: FnOnce() -> C,
   62|     29|    {
   63|     29|        match self {
   64|     29|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|     29|    }
_RINvXNtCskKBxWhS5x10_6anyhow7contextINtNtCsewp07EQjaMZ_4core6result6ResultINtCs7SkuAFpjVRX_10sparesults18QueryResultsReaderRShENtNtB1d_5error10ParseErrorEINtB5_7ContextB1a_B21_E12with_contextNtNtCsgGlVtr8vkIt_5alloc6string6StringNCNvNtCs19LGvG89wkE_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB3L_:
   58|     29|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|     29|    where
   60|     29|        C: Display + Send + Sync + 'static,
   61|     29|        F: FnOnce() -> C,
   62|     29|    {
   63|     29|        match self {
   64|     29|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|     29|    }

_RNvXs1_Cscx7YaArZmxF_17json_event_parserNtB5_9JsonEventNtNtCsewp07EQjaMZ_4core3cmp9PartialEq2eqCs19LGvG89wkE_13oxigraph_fuzz:
   47|  10.4k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]

_RNCINvMNtCscx7YaArZmxF_17json_event_parser4readINtB5_10JsonReaderRShE14parse_constantKj5_E0Cs19LGvG89wkE_13oxigraph_fuzz:
  266|      1|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE12lookup_frontCs19LGvG89wkE_13oxigraph_fuzz:
  469|  96.3k|    fn lookup_front(&mut self) -> Result<Option<u8>> {
  470|  96.3k|        loop {
  471|  96.3k|            match self.reader.fill_buf() {
  472|  96.3k|                Ok(buf) => return Ok(if buf.is_empty() { None } else { Some(buf[0]) }),
  473|      0|                Err(error) => {
  474|      0|                    if error.kind() != ErrorKind::Interrupted {
  475|      0|                        return Err(error);
  476|      0|                    }
  477|       |                }
  478|       |            }
  479|       |        }
  480|  96.3k|    }
_RNCNvMNtCscx7YaArZmxF_17json_event_parser4readINtB4_10JsonReaderRShE12parse_numbers_0Cs19LGvG89wkE_13oxigraph_fuzz:
  316|    858|                        self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
_RINvMNtCscx7YaArZmxF_17json_event_parser4readINtB3_10JsonReaderRShE9read_charNCNvB2_12parse_numbers_0ECs19LGvG89wkE_13oxigraph_fuzz:
  338|    859|    fn read_char(&mut self, valid: impl Fn(u8) -> bool, output: &mut Vec<u8>) -> Result<()> {
  339|    859|        let c = self.lookup_mandatory_front()?;
  340|    858|        if valid(c) {
  341|    856|            output.push(c);
  342|    856|            self.reader.consume(1);
  343|    856|            Ok(())
  344|       |        } else {
  345|      2|            Err(Error::new(
  346|      2|                ErrorKind::InvalidData,
  347|      2|                format!("Invalid number. Found char {}", char::from(c)),
  348|      2|            ))
  349|       |        }
  350|    859|    }
_RINvMNtCscx7YaArZmxF_17json_event_parser4readINtB3_10JsonReaderRShE14parse_constantKj5_ECs19LGvG89wkE_13oxigraph_fuzz:
  250|      3|    fn parse_constant<'a, const SIZE: usize>(
  251|      3|        &mut self,
  252|      3|        expected: &str,
  253|      3|        value: JsonEvent<'a>,
  254|      3|    ) -> Result<JsonEvent<'a>> {
  255|      0|        debug_assert_eq!(expected.len(), SIZE);
  256|      3|        let mut buf = [0u8; SIZE];
  257|      3|        self.reader.read_exact(&mut buf)?;
  258|      2|        if buf == expected.as_bytes() {
  259|      0|            self.read_after_value(value)
  260|       |        } else {
  261|       |            Err(Error::new(
  262|      2|                ErrorKind::InvalidData,
  263|      2|                format!(
  264|      2|                    "{} expected, found {}",
  265|      2|                    expected,
  266|      2|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
  267|       |                ),
  268|       |            ))
  269|       |        }
  270|      3|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE16check_stack_sizeCs19LGvG89wkE_13oxigraph_fuzz:
  483|  61.9k|        if let Some(max_stack_size) = self.max_stack_size {
  484|      0|            if self.state_stack.len() > max_stack_size {
  485|      0|                Err(Error::new(
  486|      0|                    ErrorKind::InvalidData,
  487|      0|                    format!(
  488|      0|                        "Max stack size of {} reached on an object opening",
  489|      0|                        max_stack_size
  490|      0|                    ),
  491|      0|                ))
  492|       |            } else {
  493|      0|                Ok(())
  494|       |            }
  495|       |        } else {
  496|  61.9k|            Ok(())
  497|       |        }
  498|  61.9k|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE10read_eventCs19LGvG89wkE_13oxigraph_fuzz:
   50|   140k|    pub fn read_event<'a>(&mut self, buffer: &'a mut Vec<u8>) -> Result<JsonEvent<'a>> {
   51|   140k|        let front = if let Some(b) = self.lookup_front_skipping_whitespaces()? {
   52|   140k|            b
   53|       |        } else {
   54|    433|            return if self.state_stack.is_empty() && self.element_read {
   55|     10|                Ok(JsonEvent::Eof)
   56|       |            } else {
   57|    423|                Err(Error::from(ErrorKind::UnexpectedEof))
   58|       |            };
   59|       |        };
   60|   140k|        match front {
   61|       |            b'{' => {
   62|  43.1k|                self.reader.consume(1);
   63|  43.1k|                self.check_stack_size()?;
   64|  43.1k|                self.state_stack.push(JsonState::FirstObjectKey);
   65|  43.1k|                Ok(JsonEvent::StartObject)
   66|       |            }
   67|       |            b'}' => {
   68|  24.2k|                self.reader.consume(1);
   69|     31|                if matches!(
   70|  24.2k|                    self.state_stack.pop(),
   71|       |                    Some(JsonState::FirstObjectKey) | Some(JsonState::LastObjectKey)
   72|       |                ) {
   73|  24.2k|                    self.read_after_value(JsonEvent::EndObject)
   74|       |                } else {
   75|     31|                    Err(Error::new(
   76|     31|                        ErrorKind::InvalidData,
   77|     31|                        "Closing a not opened object",
   78|     31|                    ))
   79|       |                }
   80|       |            }
   81|       |            b'[' => {
   82|  18.8k|                self.reader.consume(1);
   83|  18.8k|                self.check_stack_size()?;
   84|  18.8k|                self.state_stack.push(JsonState::FirstArray);
   85|  18.8k|                Ok(JsonEvent::StartArray)
   86|       |            }
   87|       |            b']' => {
   88|  11.3k|                self.reader.consume(1);
   89|      6|                if matches!(
   90|  11.3k|                    self.state_stack.pop(),
   91|       |                    Some(JsonState::FirstArray) | Some(JsonState::LastArray)
   92|       |                ) {
   93|  11.3k|                    self.read_after_value(JsonEvent::EndArray)
   94|       |                } else {
   95|      6|                    Err(Error::new(
   96|      6|                        ErrorKind::InvalidData,
   97|      6|                        "Closing a not opened array",
   98|      6|                    ))
   99|       |                }
  100|       |            }
  101|  33.5k|            b'"' => self.parse_string(buffer),
  102|     13|            b't' => self.parse_constant::<4>("true", JsonEvent::Boolean(true)),
  103|      3|            b'f' => self.parse_constant::<5>("false", JsonEvent::Boolean(false)),
  104|      2|            b'n' => self.parse_constant::<4>("null", JsonEvent::Null),
  105|  9.01k|            b'-' | b'0'..=b'9' => self.parse_number(front, buffer),
  106|    269|            c => {
  107|    269|                self.reader.consume(1);
  108|    269|                Err(Error::new(
  109|    269|                    ErrorKind::InvalidData,
  110|    269|                    format!("Unexpected char: {}", char::from(c)),
  111|    269|                ))
  112|       |            }
  113|       |        }
  114|   140k|    }
_RNCNvMNtCscx7YaArZmxF_17json_event_parser4readINtB4_10JsonReaderRShE12parse_string0Cs19LGvG89wkE_13oxigraph_fuzz:
  154|     10|                                        .map_err(|e| Error::new(ErrorKind::InvalidData, e))?,
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE22lookup_mandatory_frontCs19LGvG89wkE_13oxigraph_fuzz:
  461|  64.7k|    fn lookup_mandatory_front(&mut self) -> Result<u8> {
  462|  64.7k|        if let Some(v) = self.lookup_front()? {
  463|  64.6k|            Ok(v)
  464|       |        } else {
  465|     72|            Err(Error::from(ErrorKind::UnexpectedEof))
  466|       |        }
  467|  64.7k|    }
_RINvMNtCscx7YaArZmxF_17json_event_parser4readINtB3_10JsonReaderRShE14parse_constantKj4_ECs19LGvG89wkE_13oxigraph_fuzz:
  250|     15|    fn parse_constant<'a, const SIZE: usize>(
  251|     15|        &mut self,
  252|     15|        expected: &str,
  253|     15|        value: JsonEvent<'a>,
  254|     15|    ) -> Result<JsonEvent<'a>> {
  255|      0|        debug_assert_eq!(expected.len(), SIZE);
  256|     15|        let mut buf = [0u8; SIZE];
  257|     15|        self.reader.read_exact(&mut buf)?;
  258|      7|        if buf == expected.as_bytes() {
  259|      3|            self.read_after_value(value)
  260|       |        } else {
  261|       |            Err(Error::new(
  262|      4|                ErrorKind::InvalidData,
  263|      4|                format!(
  264|      4|                    "{} expected, found {}",
  265|      4|                    expected,
  266|      4|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
  267|       |                ),
  268|       |            ))
  269|       |        }
  270|     15|    }
_RNCINvMNtCscx7YaArZmxF_17json_event_parser4readINtB5_10JsonReaderRShE14parse_constantKj4_E0Cs19LGvG89wkE_13oxigraph_fuzz:
  266|      1|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
_RNCNvMNtCscx7YaArZmxF_17json_event_parser4readINtB4_10JsonReaderRShE12parse_number0Cs19LGvG89wkE_13oxigraph_fuzz:
  302|    128|            self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE11from_readerCs19LGvG89wkE_13oxigraph_fuzz:
   35|  2.72k|    pub fn from_reader(reader: R) -> Self {
   36|  2.72k|        Self {
   37|  2.72k|            reader,
   38|  2.72k|            state_stack: Vec::new(),
   39|  2.72k|            element_read: false,
   40|  2.72k|            max_stack_size: None,
   41|  2.72k|        }
   42|  2.72k|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE11read_digitsCs19LGvG89wkE_13oxigraph_fuzz:
  352|  9.11k|    fn read_digits(&mut self, output: &mut Vec<u8>) -> Result<()> {
  353|  13.9k|        while let Some(c) = self.lookup_front()? {
  354|  13.8k|            if matches!(c, b'0'..=b'9') {
  355|  4.81k|                output.push(c);
  356|  4.81k|                self.reader.consume(1);
  357|  4.81k|            } else {
  358|  9.05k|                break;
  359|       |            }
  360|       |        }
  361|  9.11k|        Ok(())
  362|  9.11k|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE12parse_numberCs19LGvG89wkE_13oxigraph_fuzz:
  272|  8.87k|    fn parse_number<'a>(
  273|  8.87k|        &mut self,
  274|  8.87k|        first_byte: u8,
  275|  8.87k|        output: &'a mut Vec<u8>,
  276|  8.87k|    ) -> Result<JsonEvent<'a>> {
  277|  8.87k|        output.clear();
  278|  8.87k|        if first_byte == b'-' {
  279|     39|            output.push(b'-');
  280|     39|            self.reader.consume(1);
  281|  8.83k|        }
  282|       |        // integer starting with first bytes
  283|       |        // TODO: avoid too many fill_buf
  284|  8.87k|        let c = self.lookup_mandatory_front()?;
  285|  8.86k|        match c {
  286|    836|            b'0' => {
  287|    836|                output.push(b'0');
  288|    836|                self.reader.consume(1);
  289|    836|            }
  290|  8.02k|            b'1'..=b'9' => {
  291|  8.02k|                output.push(c);
  292|  8.02k|                self.reader.consume(1);
  293|  8.02k|                self.read_digits(output)?;
  294|       |            }
  295|      5|            _ => return Err(Error::new(ErrorKind::InvalidData, "Invalid number")),
  296|       |        }
  297|       |
  298|       |        // Dot
  299|  8.85k|        if self.lookup_front()? == Some(b'.') {
  300|    130|            output.push(b'.');
  301|    130|            self.reader.consume(1);
  302|    130|            self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
  303|    126|            self.read_digits(output)?;
  304|  8.72k|        }
  305|       |
  306|       |        // Exp
  307|  8.85k|        if let Some(c) = self.lookup_front()? {
  308|  8.80k|            if c == b'e' || c == b'E' {
  309|    995|                output.push(c);
  310|    995|                self.reader.consume(1);
  311|    995|                let c = self.lookup_mandatory_front()?;
  312|    968|                match c {
  313|       |                    b'-' | b'+' => {
  314|    859|                        output.push(c);
  315|    859|                        self.reader.consume(1);
  316|    859|                        self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
  317|       |                    }
  318|    108|                    b'0'..=b'9' => {
  319|    107|                        output.push(c);
  320|    107|                        self.reader.consume(1);
  321|    107|                    }
  322|       |                    _ => {
  323|      2|                        return Err(Error::new(
  324|      2|                            ErrorKind::InvalidData,
  325|      2|                            format!("Invalid number. Found char {}", char::from(c)),
  326|      2|                        ))
  327|       |                    }
  328|       |                }
  329|    963|                self.read_digits(output)?;
  330|  7.80k|            }
  331|     51|        }
  332|       |
  333|       |        self.read_after_value(JsonEvent::Number(
  334|  8.82k|            str::from_utf8(output.as_slice()).map_err(|e| Error::new(ErrorKind::InvalidData, e))?,
  335|       |        ))
  336|  8.87k|    }
_RINvMNtCscx7YaArZmxF_17json_event_parser4readINtB3_10JsonReaderRShE9read_charNCNvB2_12parse_number0ECs19LGvG89wkE_13oxigraph_fuzz:
  338|    130|    fn read_char(&mut self, valid: impl Fn(u8) -> bool, output: &mut Vec<u8>) -> Result<()> {
  339|    130|        let c = self.lookup_mandatory_front()?;
  340|    128|        if valid(c) {
  341|    126|            output.push(c);
  342|    126|            self.reader.consume(1);
  343|    126|            Ok(())
  344|       |        } else {
  345|      2|            Err(Error::new(
  346|      2|                ErrorKind::InvalidData,
  347|      2|                format!("Invalid number. Found char {}", char::from(c)),
  348|      2|            ))
  349|       |        }
  350|    130|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE16read_after_valueCs19LGvG89wkE_13oxigraph_fuzz:
  365|  76.8k|        match self.state_stack.pop() {
  366|       |            Some(JsonState::FirstObjectKey) | Some(JsonState::NextObjectKey) => {
  367|  31.9k|                if self.lookup_front_skipping_whitespaces()? == Some(b':') {
  368|  31.6k|                    self.reader.consume(1);
  369|  31.6k|                    self.state_stack.push(JsonState::ObjectValue);
  370|  31.6k|                    if let JsonEvent::String(value) = value {
  371|  31.6k|                        Ok(JsonEvent::ObjectKey(value))
  372|       |                    } else {
  373|      4|                        Err(Error::new(
  374|      4|                            ErrorKind::InvalidData,
  375|      4|                            "Object keys should strings",
  376|      4|                        ))
  377|       |                    }
  378|       |                } else {
  379|    238|                    Err(Error::new(
  380|    238|                        ErrorKind::InvalidData,
  381|    238|                        "Object keys should be followed by ':'",
  382|    238|                    ))
  383|       |                }
  384|       |            }
  385|  19.3k|            Some(JsonState::ObjectValue) => match self.lookup_front_skipping_whitespaces()? {
  386|       |                Some(b',') => {
  387|  10.8k|                    self.reader.consume(1);
  388|  10.8k|                    self.state_stack.push(JsonState::NextObjectKey);
  389|  10.8k|                    Ok(value)
  390|       |                }
  391|       |                Some(b'}') => {
  392|  8.37k|                    self.state_stack.push(JsonState::LastObjectKey);
  393|  8.37k|                    Ok(value)
  394|       |                }
  395|    149|                _ => Err(Error::new(
  396|    149|                    ErrorKind::InvalidData,
  397|    149|                    "Object values should be followed by a comma or the object end",
  398|    149|                )),
  399|       |            },
  400|       |            Some(JsonState::FirstArray) | Some(JsonState::NextArray) => {
  401|  25.4k|                match self.lookup_front_skipping_whitespaces()? {
  402|       |                    Some(b',') => {
  403|  22.9k|                        self.reader.consume(1);
  404|  22.9k|                        self.state_stack.push(JsonState::NextArray);
  405|  22.9k|                        Ok(value)
  406|       |                    }
  407|       |                    Some(b']') => {
  408|  2.42k|                        self.state_stack.push(JsonState::LastArray);
  409|  2.42k|                        Ok(value)
  410|       |                    }
  411|    100|                    _ => Err(Error::new(
  412|    100|                        ErrorKind::InvalidData,
  413|    100|                        "Array values should be followed by a comma or the array end",
  414|    100|                    )),
  415|       |                }
  416|       |            }
  417|       |            None => {
  418|     82|                if self.element_read {
  419|      2|                    Err(Error::new(ErrorKind::InvalidData, "JSON trailing content"))
  420|       |                } else {
  421|     80|                    self.element_read = true;
  422|     80|                    Ok(value)
  423|       |                }
  424|       |            }
  425|      0|            Some(JsonState::LastObjectKey) => Err(Error::new(
  426|      0|                ErrorKind::InvalidData,
  427|      0|                "JSON object elements should be separated by commas",
  428|      0|            )),
  429|      0|            Some(JsonState::LastArray) => Err(Error::new(
  430|      0|                ErrorKind::InvalidData,
  431|      0|                "JSON array elements should be separated by commas",
  432|      0|            )),
  433|       |        }
  434|  76.8k|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE12parse_stringCs19LGvG89wkE_13oxigraph_fuzz:
  116|  33.5k|    fn parse_string<'a>(&mut self, output: &'a mut Vec<u8>) -> Result<JsonEvent<'a>> {
  117|  33.5k|        output.clear();
  118|  33.5k|        self.reader.consume(1);
  119|  33.5k|
  120|  33.5k|        #[derive(Eq, PartialEq, Copy, Clone)]
  121|  33.5k|        enum StringState {
  122|  33.5k|            Default,
  123|  33.5k|            Escape,
  124|  33.5k|        }
  125|  33.5k|
  126|  33.5k|        let mut state = StringState::Default;
  127|   141k|        loop {
  128|   141k|            match state {
  129|       |                StringState::Default => {
  130|  87.7k|                    let buffer = match self.reader.fill_buf() {
  131|  87.7k|                        Ok(buf) => {
  132|  87.7k|                            if buf.is_empty() {
  133|    892|                                return Err(Error::from(ErrorKind::UnexpectedEof));
  134|       |                            } else {
  135|  86.8k|                                buf
  136|       |                            }
  137|       |                        }
  138|      0|                        Err(e) => {
  139|      0|                            if e.kind() == ErrorKind::Interrupted {
  140|      0|                                continue;
  141|       |                            } else {
  142|      0|                                return Err(e);
  143|       |                            }
  144|       |                        }
  145|       |                    };
  146|  86.8k|                    let mut i = 0;
  147|   438k|                    for c in buffer {
  148|   438k|                        i += 1;
  149|   438k|                        match *c {
  150|       |                            b'"' => {
  151|  32.3k|                                self.reader.consume(i);
  152|  32.3k|                                return self.read_after_value(JsonEvent::String(
  153|  32.3k|                                    str::from_utf8(output.as_slice())
  154|  32.3k|                                        .map_err(|e| Error::new(ErrorKind::InvalidData, e))?,
  155|       |                                ));
  156|       |                            }
  157|       |                            b'\\' => {
  158|  53.8k|                                state = StringState::Escape;
  159|  53.8k|                                break;
  160|       |                            }
  161|   351k|                            0..=0x1F => {
  162|     49|                                self.reader.consume(i);
  163|     49|                                return Err(Error::new(
  164|     49|                                    ErrorKind::InvalidData,
  165|     49|                                    "Control characters are not allowed in JSON",
  166|     49|                                ));
  167|       |                            }
  168|   351k|                            c => output.push(c),
  169|       |                        }
  170|       |                    }
  171|  54.4k|                    self.reader.consume(i);
  172|       |                }
  173|       |                StringState::Escape => {
  174|  53.8k|                    let c = self.lookup_mandatory_front()?;
  175|  53.8k|                    self.reader.consume(1);
  176|  53.8k|                    match c {
  177|    423|                        b'"' => {
  178|    423|                            output.push(b'"');
  179|    423|                        }
  180|  12.9k|                        b'\\' => {
  181|  12.9k|                            output.push(b'\\');
  182|  12.9k|                        }
  183|  1.78k|                        b'/' => {
  184|  1.78k|                            output.push(b'/');
  185|  1.78k|                        }
  186|  6.27k|                        b'b' => {
  187|  6.27k|                            output.push(8);
  188|  6.27k|                        }
  189|  4.49k|                        b'f' => {
  190|  4.49k|                            output.push(12);
  191|  4.49k|                        }
  192|  1.15k|                        b'n' => {
  193|  1.15k|                            output.push(b'\n');
  194|  1.15k|                        }
  195|  5.55k|                        b'r' => {
  196|  5.55k|                            output.push(b'\r');
  197|  5.55k|                        }
  198|  6.31k|                        b't' => {
  199|  6.31k|                            output.push(b'\t');
  200|  6.31k|                        }
  201|       |                        b'u' => {
  202|  14.7k|                            let mut buf = [0u8; 4];
  203|  14.7k|                            self.reader.read_exact(&mut buf)?;
  204|  14.7k|                            let code_point = read_hexa_char(&buf)?;
  205|  14.6k|                            if let Some(c) = char::from_u32(code_point) {
  206|  12.7k|                                output.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  207|  12.7k|                            } else {
  208|  1.91k|                                let high_surrogate = code_point;
  209|  1.91k|                                let mut buf = [0u8; 6];
  210|  1.91k|                                self.reader.read_exact(&mut buf)?;
  211|  1.91k|                                if !buf.starts_with(b"\\u") {
  212|      4|                                    return Err(Error::new(
  213|      4|                                            ErrorKind::InvalidData,
  214|      4|                                            format!(
  215|      4|                                                "\\u{:X} is a surrogate should be followed by an other surrogate",
  216|      4|                                                high_surrogate
  217|      4|                                            ),
  218|      4|                                        ));
  219|  1.91k|                                }
  220|  1.91k|                                let low_surrogate = read_hexa_char(&buf[2..])?;
  221|  1.91k|                                let code_point = 0x10000
  222|  1.91k|                                    + ((high_surrogate & 0x03FF) << 10)
  223|  1.91k|                                    + (low_surrogate & 0x03FF);
  224|  1.91k|                                if let Some(c) = char::from_u32(code_point) {
  225|  1.91k|                                    output.extend_from_slice(c.encode_utf8(&mut buf).as_bytes())
  226|       |                                } else {
  227|      0|                                    return Err(Error::new(
  228|      0|                                        ErrorKind::InvalidData,
  229|      0|                                        format!(
  230|      0|                                            "\\u{:X}\\u{:X} is an invalid surrogate pair",
  231|      0|                                            high_surrogate, low_surrogate
  232|      0|                                        ),
  233|      0|                                    ));
  234|       |                                }
  235|       |                            }
  236|       |                        }
  237|       |                        _ => {
  238|     64|                            return Err(Error::new(
  239|     64|                                ErrorKind::InvalidData,
  240|     64|                                "Invalid string escape",
  241|     64|                            ));
  242|       |                        }
  243|       |                    }
  244|  53.6k|                    state = StringState::Default;
  245|       |                }
  246|       |            }
  247|       |        }
  248|  33.5k|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser4readINtB2_10JsonReaderRShE33lookup_front_skipping_whitespacesCs19LGvG89wkE_13oxigraph_fuzz:
  436|   217k|    fn lookup_front_skipping_whitespaces(&mut self) -> Result<Option<u8>> {
  437|   217k|        loop {
  438|   217k|            match self.reader.fill_buf() {
  439|   217k|                Ok(buf) => {
  440|   217k|                    if buf.is_empty() {
  441|    557|                        return Ok(None);
  442|   216k|                    }
  443|   216k|                    let skipped = skip_whitespaces(buf);
  444|   216k|                    if skipped == buf.len() {
  445|     75|                        self.reader.consume(skipped);
  446|     75|                    } else {
  447|   216k|                        let result = Some(buf[skipped]);
  448|   216k|                        self.reader.consume(skipped);
  449|   216k|                        return Ok(result);
  450|       |                    }
  451|       |                }
  452|      0|                Err(error) => {
  453|      0|                    if error.kind() != ErrorKind::Interrupted {
  454|      0|                        return Err(error);
  455|      0|                    }
  456|       |                }
  457|       |            }
  458|       |        }
  459|   217k|    }
_RNvNtCscx7YaArZmxF_17json_event_parser4read16skip_whitespaces:
  512|   216k|fn skip_whitespaces(buf: &[u8]) -> usize {
  513|   246k|    for (i, c) in buf.iter().enumerate() {
  514|   246k|        if !matches!(c, b' ' | b'\t' | b'\n' | b'\r') {
  515|   216k|            return i;
  516|  30.0k|        }
  517|       |    }
  518|     75|    buf.len()
  519|   216k|}
_RNvNtCscx7YaArZmxF_17json_event_parser4read14read_hexa_char:
  521|  16.6k|fn read_hexa_char(input: &[u8]) -> Result<u32> {
  522|  16.6k|    let mut value = 0;
  523|  66.5k|    for c in input.iter().copied() {
  524|  66.5k|        value = value * 16
  525|  66.5k|            + match c {
  526|  66.5k|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
  527|  4.76k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
  528|  8.45k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
  529|       |                _ => {
  530|     55|                    return Err(Error::new(
  531|     55|                        ErrorKind::InvalidData,
  532|     55|                        "Unexpected character in a unicode escape",
  533|     55|                    ))
  534|       |                }
  535|       |            }
  536|       |    }
  537|  16.6k|    Ok(value)
  538|  16.6k|}

_RNvMNtCscx7YaArZmxF_17json_event_parser5writeINtB2_10JsonWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE11write_eventCs19LGvG89wkE_13oxigraph_fuzz:
   43|  6.26k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   44|  6.26k|        match event {
   45|      0|            JsonEvent::String(s) => {
   46|      0|                self.before_value()?;
   47|      0|                write_escaped_json_string(s, &mut self.writer)
   48|       |            }
   49|      0|            JsonEvent::Number(number) => {
   50|      0|                self.before_value()?;
   51|      0|                self.writer.write_all(number.as_bytes())
   52|       |            }
   53|      0|            JsonEvent::Boolean(b) => {
   54|      0|                self.before_value()?;
   55|      0|                self.writer.write_all(if b { b"true" } else { b"false" })
   56|       |            }
   57|       |            JsonEvent::Null => {
   58|      0|                self.before_value()?;
   59|      0|                self.writer.write_all(b"null")
   60|       |            }
   61|       |            JsonEvent::StartArray => {
   62|     58|                self.before_value()?;
   63|     58|                self.state_stack.push(JsonState::OpenArray);
   64|     58|                self.writer.write_all(b"[")
   65|       |            }
   66|     58|            JsonEvent::EndArray => match self.state_stack.pop() {
   67|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
   68|     58|                    self.writer.write_all(b"]")
   69|       |                }
   70|      0|                Some(s) => {
   71|      0|                    self.state_stack.push(s);
   72|      0|                    Err(Error::new(
   73|      0|                        ErrorKind::InvalidInput,
   74|      0|                        "Closing a not opened array",
   75|      0|                    ))
   76|       |                }
   77|      0|                None => Err(Error::new(
   78|      0|                    ErrorKind::InvalidInput,
   79|      0|                    "Closing a not opened array",
   80|      0|                )),
   81|       |            },
   82|       |            JsonEvent::StartObject => {
   83|  3.01k|                self.before_value()?;
   84|  3.01k|                self.state_stack.push(JsonState::OpenObject);
   85|  3.01k|                self.writer.write_all(b"{")
   86|       |            }
   87|  3.01k|            JsonEvent::EndObject => match self.state_stack.pop() {
   88|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
   89|  3.01k|                    self.writer.write_all(b"}")
   90|       |                }
   91|      0|                Some(s) => {
   92|      0|                    self.state_stack.push(s);
   93|      0|                    Err(Error::new(
   94|      0|                        ErrorKind::InvalidInput,
   95|      0|                        "Closing a not opened object",
   96|      0|                    ))
   97|       |                }
   98|      0|                None => Err(Error::new(
   99|      0|                    ErrorKind::InvalidInput,
  100|      0|                    "Closing a not opened object",
  101|      0|                )),
  102|       |            },
  103|    116|            JsonEvent::ObjectKey(key) => {
  104|    116|                match self.state_stack.pop() {
  105|     87|                    Some(JsonState::OpenObject) => (),
  106|     29|                    Some(JsonState::ContinuationObject) => self.writer.write_all(b",")?,
  107|       |                    _ => {
  108|      0|                        return Err(Error::new(
  109|      0|                            ErrorKind::InvalidInput,
  110|      0|                            "Trying to write an object key in an not object",
  111|      0|                        ))
  112|       |                    }
  113|       |                }
  114|    116|                self.state_stack.push(JsonState::ContinuationObject);
  115|    116|                self.state_stack.push(JsonState::ObjectValue);
  116|    116|                write_escaped_json_string(key, &mut self.writer)?;
  117|    116|                self.writer.write_all(b":")
  118|       |            }
  119|      0|            JsonEvent::Eof => Err(Error::new(
  120|      0|                ErrorKind::InvalidInput,
  121|      0|                "EOF is not allowed in JSON writer",
  122|      0|            )),
  123|       |        }
  124|  6.26k|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser5writeINtB2_10JsonWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE12before_valueCs19LGvG89wkE_13oxigraph_fuzz:
  127|  3.07k|        match self.state_stack.pop() {
  128|       |            Some(JsonState::OpenArray) => {
  129|     27|                self.state_stack.push(JsonState::ContinuationArray);
  130|     27|                Ok(())
  131|       |            }
  132|       |            Some(JsonState::ContinuationArray) => {
  133|  2.90k|                self.state_stack.push(JsonState::ContinuationArray);
  134|  2.90k|                self.writer.write_all(b",")?;
  135|  2.90k|                Ok(())
  136|       |            }
  137|      0|            Some(last_state @ JsonState::OpenObject)
  138|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  139|      0|                self.state_stack.push(last_state);
  140|      0|                Err(Error::new(
  141|      0|                    ErrorKind::InvalidInput,
  142|      0|                    "Object key expected, string found",
  143|      0|                ))
  144|       |            }
  145|    116|            Some(JsonState::ObjectValue) => Ok(()),
  146|       |            None => {
  147|     29|                if self.element_written {
  148|      0|                    Err(Error::new(
  149|      0|                        ErrorKind::InvalidInput,
  150|      0|                        "A root JSON value has already been written",
  151|      0|                    ))
  152|       |                } else {
  153|     29|                    self.element_written = true;
  154|     29|                    Ok(())
  155|       |                }
  156|       |            }
  157|       |        }
  158|  3.07k|    }
_RINvNtCscx7YaArZmxF_17json_event_parser5write25write_escaped_json_stringINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs19LGvG89wkE_13oxigraph_fuzz:
  170|    116|    sink.write_all(b"\"")?;
  171|    116|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  172|    667|    for c in s.chars() {
  173|    667|        match c {
  174|      0|            '\\' => sink.write_all(b"\\\\"),
  175|      0|            '"' => sink.write_all(b"\\\""),
  176|    667|            c => {
  177|    667|                if c < char::from(32) {
  178|      0|                    match c {
  179|      0|                        '\u{08}' => sink.write_all(b"\\b"),
  180|      0|                        '\u{0C}' => sink.write_all(b"\\f"),
  181|      0|                        '\n' => sink.write_all(b"\\n"),
  182|      0|                        '\r' => sink.write_all(b"\\r"),
  183|      0|                        '\t' => sink.write_all(b"\\t"),
  184|      0|                        c => {
  185|      0|                            let mut c = c as u8;
  186|      0|                            for i in (2..6).rev() {
  187|      0|                                let ch = c % 16;
  188|      0|                                buffer[i] = ch + if ch < 10 { b'0' } else { b'A' };
  189|      0|                                c /= 16;
  190|       |                            }
  191|      0|                            sink.write_all(&buffer)
  192|       |                        }
  193|       |                    }
  194|       |                } else {
  195|    667|                    sink.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  196|       |                }
  197|       |            }
  198|      0|        }?;
  199|       |    }
  200|    116|    sink.write_all(b"\"")?;
  201|    116|    Ok(())
  202|    116|}
_RNvMNtCscx7YaArZmxF_17json_event_parser5writeINtB2_10JsonWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE11from_writerCs19LGvG89wkE_13oxigraph_fuzz:
   27|     29|    pub fn from_writer(writer: W) -> Self {
   28|     29|        Self {
   29|     29|            writer,
   30|     29|            state_stack: Vec::new(),
   31|     29|            element_written: false,
   32|     29|        }
   33|     29|    }
_RNvMNtCscx7YaArZmxF_17json_event_parser5writeINtB2_10JsonWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE10into_innerCs19LGvG89wkE_13oxigraph_fuzz:
   35|     29|    pub fn into_inner(self) -> W {
   36|     29|        self.writer
   37|     29|    }

_RNvNvCsaP5RBtlDVPo_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  2.69k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  2.69k|                $body
  243|  2.69k|            }
rust_fuzzer_test_input:
  215|  2.69k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  2.69k|                }
  223|  2.69k|
  224|  2.69k|                __libfuzzer_sys_run(bytes);
  225|  2.69k|                0
  226|  2.69k|            }
LLVMFuzzerTestOneInput:
   58|  2.69k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.69k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.69k|    });
   63|  2.69k|
   64|  2.69k|    match test_input {
   65|  2.69k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.69k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsjiqEitFvUQw_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.69k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.69k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.69k|        rust_fuzzer_test_input(data_slice)
   62|  2.69k|    });

_RNvMs2_NtCsihGzv2ZnbOq_9once_cell3impINtB5_8OnceCellNtNtCsgGlVtr8vkIt_5alloc6string6StringE14is_initializedCsjiqEitFvUQw_13libfuzzer_sys:
   49|  2.69k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.69k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.69k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.69k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.69k|        // `SeqCst` operations on the slow path.
   54|  2.69k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.69k|    }

_RNvMs4_NtCsihGzv2ZnbOq_9once_cell4syncINtB5_8OnceCellNtNtCsgGlVtr8vkIt_5alloc6string6StringE3getCsjiqEitFvUQw_13libfuzzer_sys:
  965|  2.69k|        pub fn get(&self) -> Option<&T> {
  966|  2.69k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  2.69k|                None
  971|       |            }
  972|  2.69k|        }

_RNvNtCs19LGvG89wkE_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  2.69k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  2.69k|    let parser = QueryResultsParser::from_format(format);
    8|  2.69k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  2.69k|    let Ok(reader) = parser.read_results(data) else {
   11|  2.61k|        return;
   12|       |    };
   13|     77|    match reader {
   14|     77|        QueryResultsReader::Solutions(solutions) => {
   15|     77|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|     48|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|     29|            let mut writer = serializer
   21|     29|                .solutions_writer(
   22|     29|                    Vec::new(),
   23|     29|                    solutions
   24|     29|                        .get(0)
   25|     29|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|     29|                )
   27|     29|                .unwrap();
   28|  2.95k|            for solution in &solutions {
   29|  2.93k|                writer.write(solution).unwrap();
   30|  2.93k|            }
   31|     29|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|     29|            if let QueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|     29|                .read_results(serialized.as_bytes())
   36|     29|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|     29|                .unwrap()
   38|       |            {
   39|     29|                assert_eq!(
   40|     29|                    roundtrip_solutions
   41|     29|                        .collect::<Result<Vec<_>, _>>()
   42|     29|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|     29|                        .unwrap(),
   44|     29|                    solutions
   45|     29|                )
   46|      0|            }
   47|       |        }
   48|      0|        QueryResultsReader::Boolean(value) => {
   49|      0|            // We try to write again
   50|      0|            let mut serialized = Vec::new();
   51|      0|            serializer
   52|      0|                .write_boolean_result(&mut serialized, value)
   53|      0|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      0|            if let QueryResultsReader::Boolean(roundtrip_value) =
   57|      0|                parser.read_results(serialized.as_slice()).unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  2.69k|}
_RNCNvNtCs19LGvG89wkE_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|     27|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvXs1_NtCs5s8rvrQHfnt_5oxrdf8variableNtB5_11VariableRefNtNtCsewp07EQjaMZ_4core3fmt7Display3fmtCs19LGvG89wkE_13oxigraph_fuzz:
  123|     14|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|     14|        write!(f, "?{}", self.name)
  125|     14|    }
_RNvXs_NtCs5s8rvrQHfnt_5oxrdf8variableNtB4_8VariableNtNtCsewp07EQjaMZ_4core3fmt7Display3fmtCs19LGvG89wkE_13oxigraph_fuzz:
   61|     14|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|     14|        self.as_ref().fmt(f)
   63|     14|    }
_RNvMNtCs5s8rvrQHfnt_5oxrdf8variableNtB2_8Variable6as_refCs19LGvG89wkE_13oxigraph_fuzz:
   54|     14|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|     14|        VariableRef { name: &self.name }
   56|     14|    }
_RNvXs8_NtCs5s8rvrQHfnt_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCsewp07EQjaMZ_4core3fmt7Display3fmtCs19LGvG89wkE_13oxigraph_fuzz:
  226|     20|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     20|        write!(f, "The variable name is invalid")
  228|     20|    }
_RNvXsd_NtCs5s8rvrQHfnt_5oxrdf8variableNtB5_8VariableNtNtCsewp07EQjaMZ_4core3cmp9PartialEq2eqCs19LGvG89wkE_13oxigraph_fuzz:
   17|  1.22k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCs5s8rvrQHfnt_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsgGlVtr8vkIt_5alloc6string6StringEB5_:
   39|    332|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|    332|        Self { name: name.into() }
   41|    332|    }
_RINvMNtCs5s8rvrQHfnt_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|    352|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|    352|        let name = name.into();
   28|    352|        validate_variable_identifier(&name)?;
   29|    332|        Ok(Self::new_unchecked(name))
   30|    352|    }
_RNvNtCs5s8rvrQHfnt_5oxrdf8variable28validate_variable_identifier:
  170|    352|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|    352|    let mut chars = id.chars();
  172|    352|    let front = chars.next().ok_or(VariableNameParseError {})?;
  173|    350|    match front {
  174|    348|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|    275|        | 'A'..='Z'
  178|     69|        | 'a'..='z'
  179|      5|        | '\u{00C0}'..='\u{00D6}'
  180|      5|        | '\u{00D8}'..='\u{00F6}'
  181|      5|        | '\u{00F8}'..='\u{02FF}'
  182|      3|        | '\u{0370}'..='\u{037D}'
  183|      3|        | '\u{037F}'..='\u{1FFF}'
  184|      3|        | '\u{200C}'..='\u{200D}'
  185|      3|        | '\u{2070}'..='\u{218F}'
  186|      3|        | '\u{2C00}'..='\u{2FEF}'
  187|      3|        | '\u{3001}'..='\u{D7FF}'
  188|      2|        | '\u{F900}'..='\u{FDCF}'
  189|      2|        | '\u{FDF0}'..='\u{FFFD}'
  190|    345|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      5|        _ => return Err(VariableNameParseError {}),
  192|       |    }
  193|  2.60k|    for c in chars {
  194|  2.26k|        match c {
  195|  2.26k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|    118|            | '\u{00300}'..='\u{036F}'
  198|     99|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  1.76k|            | 'A'..='Z'
  201|    873|            | 'a'..='z'
  202|    185|            | '\u{00C0}'..='\u{00D6}'
  203|    185|            | '\u{00D8}'..='\u{00F6}'
  204|    185|            | '\u{00F8}'..='\u{02FF}'
  205|    118|            | '\u{0370}'..='\u{037D}'
  206|    118|            | '\u{037F}'..='\u{1FFF}'
  207|     99|            | '\u{200C}'..='\u{200D}'
  208|     99|            | '\u{2070}'..='\u{218F}'
  209|     96|            | '\u{2C00}'..='\u{2FEF}'
  210|     96|            | '\u{3001}'..='\u{D7FF}'
  211|     38|            | '\u{F900}'..='\u{FDCF}'
  212|     38|            | '\u{FDF0}'..='\u{FFFD}'
  213|  2.25k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|     13|            _ => return Err(VariableNameParseError {}),
  215|       |        }
  216|       |    }
  217|    332|    Ok(())
  218|    352|}

_RNvXs1_NtCs7SkuAFpjVRX_10sparesults5errorNtB5_10ParseErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtB5_11SyntaxErrorE4fromCs19LGvG89wkE_13oxigraph_fuzz:
   43|    227|    fn from(error: SyntaxError) -> Self {
   44|    227|        Self::Syntax(error)
   45|    227|    }
_RNvXs0_NtCs7SkuAFpjVRX_10sparesults5errorNtB5_10ParseErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtNtCs41l67bscAfL_3std2io5error5ErrorE4fromCs19LGvG89wkE_13oxigraph_fuzz:
   36|  2.43k|    fn from(error: io::Error) -> Self {
   37|  2.43k|        Self::Io(error)
   38|  2.43k|    }
_RINvMs4_NtCs7SkuAFpjVRX_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsgGlVtr8vkIt_5alloc6string6StringECs19LGvG89wkE_13oxigraph_fuzz:
   86|     84|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|     84|        Self {
   88|     84|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|     84|        }
   90|     84|    }
_RINvMs4_NtCs7SkuAFpjVRX_10sparesults5errorNtB6_11SyntaxError3msgReECs19LGvG89wkE_13oxigraph_fuzz:
   86|    143|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    143|        Self {
   88|    143|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|    143|        }
   90|    143|    }

_RINvNtCs7SkuAFpjVRX_10sparesults4json12ignore_valueRShECs19LGvG89wkE_13oxigraph_fuzz:
  578|  5.02k|fn ignore_value<R: BufRead>(
  579|  5.02k|    reader: &mut JsonReader<R>,
  580|  5.02k|    buffer: &mut Vec<u8>,
  581|  5.02k|) -> Result<(), ParseError> {
  582|  5.02k|    let mut nesting = 0;
  583|       |    loop {
  584|  92.7k|        match reader.read_event(buffer)? {
  585|       |            JsonEvent::Boolean(_)
  586|       |            | JsonEvent::Null
  587|       |            | JsonEvent::Number(_)
  588|       |            | JsonEvent::String(_) => {
  589|  8.69k|                if nesting == 0 {
  590|  1.77k|                    return Ok(());
  591|  6.91k|                }
  592|       |            }
  593|  17.7k|            JsonEvent::ObjectKey(_) => (),
  594|  41.6k|            JsonEvent::StartArray | JsonEvent::StartObject => nesting += 1,
  595|       |            JsonEvent::EndArray | JsonEvent::EndObject => {
  596|  24.0k|                nesting -= 1;
  597|  24.0k|                if nesting == 0 {
  598|  2.54k|                    return Ok(());
  599|  21.4k|                }
  600|       |            }
  601|      0|            JsonEvent::Eof => return Err(SyntaxError::msg("Unexpected end of file").into()),
  602|       |        }
  603|       |    }
  604|  5.02k|}
_RNCINvNtCs7SkuAFpjVRX_10sparesults4json9read_headRShE0Cs19LGvG89wkE_13oxigraph_fuzz:
  534|     20|                                let new_var = Variable::new(s).map_err(|e| {
  535|     20|                                    SyntaxError::msg(format!(
  536|     20|                                        "Invalid variable declaration '{s}': {e}"
  537|     20|                                    ))
  538|     20|                                })?;
_RNvMNtCs7SkuAFpjVRX_10sparesults4jsonINtB2_19JsonSolutionsWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE5startCs19LGvG89wkE_13oxigraph_fuzz:
   33|     29|    pub fn start(sink: W, variables: &[Variable]) -> io::Result<Self> {
   34|     29|        let mut writer = JsonWriter::from_writer(sink);
   35|     29|        writer.write_event(JsonEvent::StartObject)?;
   36|     29|        writer.write_event(JsonEvent::ObjectKey("head"))?;
   37|     29|        writer.write_event(JsonEvent::StartObject)?;
   38|     29|        writer.write_event(JsonEvent::ObjectKey("vars"))?;
   39|     29|        writer.write_event(JsonEvent::StartArray)?;
   40|     29|        for variable in variables {
   41|      0|            writer.write_event(JsonEvent::String(variable.as_str()))?;
   42|       |        }
   43|     29|        writer.write_event(JsonEvent::EndArray)?;
   44|     29|        writer.write_event(JsonEvent::EndObject)?;
   45|     29|        writer.write_event(JsonEvent::ObjectKey("results"))?;
   46|     29|        writer.write_event(JsonEvent::StartObject)?;
   47|     29|        writer.write_event(JsonEvent::ObjectKey("bindings"))?;
   48|     29|        writer.write_event(JsonEvent::StartArray)?;
   49|     29|        Ok(Self { writer })
   50|     29|    }
_RINvMNtCs7SkuAFpjVRX_10sparesults4jsonINtB3_19JsonSolutionsWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE5writeINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs3_B5_INtB5_15SolutionsWriterB11_E5writeRNtNtCs5s8rvrQHfnt_5oxrdf8variable8VariableRNtNtB3F_6triple4TermRNtB2x_13QuerySolutionE0EECs19LGvG89wkE_13oxigraph_fuzz:
   56|  2.93k|        self.writer.write_event(JsonEvent::StartObject)?;
   57|  2.93k|        for (variable, value) in solution {
   58|      0|            self.writer
   59|      0|                .write_event(JsonEvent::ObjectKey(variable.as_str()))?;
   60|      0|            write_json_term(value, &mut self.writer)?;
   61|       |        }
   62|  2.93k|        self.writer.write_event(JsonEvent::EndObject)?;
   63|  2.93k|        Ok(())
   64|  2.93k|    }
_RINvNtCs7SkuAFpjVRX_10sparesults4json9read_headRShECs19LGvG89wkE_13oxigraph_fuzz:
  516|  2.93k|fn read_head<R: BufRead>(
  517|  2.93k|    reader: &mut JsonReader<R>,
  518|  2.93k|    buffer: &mut Vec<u8>,
  519|  2.93k|) -> Result<Vec<Variable>, ParseError> {
  520|  2.93k|    if reader.read_event(buffer)? != JsonEvent::StartObject {
  521|      2|        return Err(SyntaxError::msg("head should be an object").into());
  522|  2.92k|    }
  523|  2.92k|    let mut variables = Vec::new();
  524|       |    loop {
  525|  6.39k|        match reader.read_event(buffer)? {
  526|  4.21k|            JsonEvent::ObjectKey(key) => match key {
  527|  4.21k|                "vars" => {
  528|    152|                    if reader.read_event(buffer)? != JsonEvent::StartArray {
  529|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  530|    150|                    }
  531|       |                    loop {
  532|    468|                        match reader.read_event(buffer)? {
  533|    352|                            JsonEvent::String(s) => {
  534|    352|                                let new_var = Variable::new(s).map_err(|e| {
  535|       |                                    SyntaxError::msg(format!(
  536|       |                                        "Invalid variable declaration '{s}': {e}"
  537|       |                                    ))
  538|    352|                                })?;
  539|    332|                                if variables.contains(&new_var) {
  540|     14|                                    return Err(SyntaxError::msg(format!(
  541|     14|                                        "The variable {new_var} is declared twice"
  542|     14|                                    ))
  543|     14|                                    .into());
  544|    318|                                }
  545|    318|                                variables.push(new_var);
  546|       |                            }
  547|     29|                            JsonEvent::EndArray => break,
  548|       |                            _ => {
  549|      2|                                return Err(
  550|      2|                                    SyntaxError::msg("Variable names should be strings").into()
  551|      2|                                )
  552|       |                            }
  553|       |                        }
  554|       |                    }
  555|       |                }
  556|  4.06k|                "link" => {
  557|     13|                    if reader.read_event(buffer)? != JsonEvent::StartArray {
  558|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  559|     11|                    }
  560|       |                    loop {
  561|     83|                        match reader.read_event(buffer)? {
  562|     72|                            JsonEvent::String(_) => (),
  563|      1|                            JsonEvent::EndArray => break,
  564|       |                            _ => {
  565|      1|                                return Err(SyntaxError::msg("Link names should be strings").into())
  566|       |                            }
  567|       |                        }
  568|       |                    }
  569|       |                }
  570|  4.05k|                _ => ignore_value(reader, buffer)?,
  571|       |            },
  572|  2.00k|            JsonEvent::EndObject => return Ok(variables),
  573|     11|            _ => return Err(SyntaxError::msg("Invalid head serialization").into()),
  574|       |        }
  575|       |    }
  576|  2.93k|}
_RNvMs_NtCs7SkuAFpjVRX_10sparesults4jsonINtB4_22JsonQueryResultsReaderRShE4readCs19LGvG89wkE_13oxigraph_fuzz:
  138|  2.72k|    pub fn read(source: R) -> Result<Self, ParseError> {
  139|  2.72k|        let mut reader = JsonReader::from_reader(source);
  140|  2.72k|        let mut buffer = Vec::default();
  141|  2.72k|        let mut variables = None;
  142|  2.72k|        let mut buffered_bindings: Option<Vec<_>> = None;
  143|  2.72k|        let mut output_iter = None;
  144|  2.72k|
  145|  2.72k|        if reader.read_event(&mut buffer)? != JsonEvent::StartObject {
  146|     63|            return Err(SyntaxError::msg("SPARQL JSON results should be an object").into());
  147|  1.62k|        }
  148|       |
  149|       |        loop {
  150|  4.62k|            let event = reader.read_event(&mut buffer)?;
  151|  4.45k|            match event {
  152|  4.38k|                JsonEvent::ObjectKey(key) => match key {
  153|  4.38k|                    "head" => {
  154|  2.93k|                        let extracted_variables = read_head(&mut reader, &mut buffer)?;
  155|  2.00k|                        if let Some(buffered_bindings) = buffered_bindings.take() {
  156|    281|                            let mut mapping = BTreeMap::default();
  157|    281|                            for (i, var) in extracted_variables.iter().enumerate() {
  158|      0|                                mapping.insert(var.as_str().to_owned(), i);
  159|      0|                            }
  160|    281|                            output_iter = Some(Self::Solutions {
  161|    281|                                variables: extracted_variables,
  162|    281|                                solutions: JsonSolutionsReader {
  163|    281|                                    kind: JsonSolutionsReaderKind::Buffered {
  164|    281|                                        bindings: buffered_bindings.into_iter(),
  165|    281|                                    },
  166|    281|                                    mapping,
  167|    281|                                },
  168|    281|                            });
  169|  1.72k|                        } else {
  170|  1.72k|                            variables = Some(extracted_variables);
  171|  1.72k|                        }
  172|       |                    }
  173|  1.44k|                    "results" => {
  174|  1.42k|                        if reader.read_event(&mut buffer)? != JsonEvent::StartObject {
  175|      2|                            return Err(SyntaxError::msg("'results' should be an object").into());
  176|  1.42k|                        }
  177|       |                        loop {
  178|  2.29k|                            match reader.read_event(&mut buffer)? {
  179|  2.21k|                                JsonEvent::ObjectKey("bindings") => break, // Found
  180|    975|                                JsonEvent::ObjectKey(_) => ignore_value(&mut reader, &mut buffer)?,
  181|       |                                _ => {
  182|     21|                                    return Err(SyntaxError::msg(
  183|     21|                                        "'results' should contain a 'bindings' key",
  184|     21|                                    )
  185|     21|                                    .into())
  186|       |                                }
  187|       |                            }
  188|       |                        }
  189|  1.24k|                        if reader.read_event(&mut buffer)? != JsonEvent::StartArray {
  190|      1|                            return Err(SyntaxError::msg("'bindings' should be an object").into());
  191|  1.23k|                        }
  192|  1.23k|                        if let Some(variables) = variables {
  193|    103|                            let mut mapping = BTreeMap::default();
  194|    103|                            for (i, var) in variables.iter().enumerate() {
  195|      0|                                mapping.insert(var.as_str().to_owned(), i);
  196|      0|                            }
  197|    103|                            return Ok(Self::Solutions {
  198|    103|                                variables,
  199|    103|                                solutions: JsonSolutionsReader {
  200|    103|                                    kind: JsonSolutionsReaderKind::Streaming { reader, buffer },
  201|    103|                                    mapping,
  202|    103|                                },
  203|    103|                            });
  204|  1.13k|                        }
  205|  1.13k|                        // We buffer all results before being able to read the header
  206|  1.13k|                        let mut bindings = Vec::new();
  207|  1.13k|                        let mut variables = Vec::new();
  208|  1.13k|                        let mut values = Vec::new();
  209|       |                        loop {
  210|  6.35k|                            match reader.read_event(&mut buffer)? {
  211|  3.15k|                                JsonEvent::StartObject => (),
  212|  2.07k|                                JsonEvent::EndObject => {
  213|  2.07k|                                    bindings.push((take(&mut variables), take(&mut values)));
  214|  2.07k|                                }
  215|       |                                JsonEvent::EndArray | JsonEvent::Eof => {
  216|    934|                                    buffered_bindings = Some(bindings);
  217|    934|                                    break;
  218|       |                                }
  219|    157|                                JsonEvent::ObjectKey(key) => {
  220|    157|                                    variables.push(key.to_owned());
  221|    157|                                    values.push(read_value(&mut reader, &mut buffer, 0)?);
  222|       |                                }
  223|       |                                _ => {
  224|      2|                                    return Err(
  225|      2|                                        SyntaxError::msg("Invalid result serialization").into()
  226|      2|                                    )
  227|       |                                }
  228|       |                            }
  229|       |                        }
  230|       |                    }
  231|     18|                    "boolean" => {
  232|      2|                        return if let JsonEvent::Boolean(v) = reader.read_event(&mut buffer)? {
  233|      0|                            Ok(Self::Boolean(v))
  234|       |                        } else {
  235|      1|                            Err(SyntaxError::msg("Unexpected boolean value").into())
  236|       |                        }
  237|       |                    }
  238|       |                    _ => {
  239|     16|                        return Err(SyntaxError::msg(format!(
  240|     16|                            "Expecting head or result key, found {key}"
  241|     16|                        ))
  242|     16|                        .into());
  243|       |                    }
  244|       |                },
  245|     60|                JsonEvent::EndObject => (),
  246|       |                JsonEvent::Eof => {
  247|     10|                    return if let Some(output_iter) = output_iter {
  248|      3|                        Ok(output_iter)
  249|       |                    } else {
  250|      7|                        Err(SyntaxError::msg(
  251|      7|                            "Unexpected end of JSON object without 'results' or 'boolean' key",
  252|      7|                        )
  253|      7|                        .into())
  254|       |                    }
  255|       |                }
  256|      7|                _ => return Err(SyntaxError::msg("Invalid SPARQL results serialization").into()),
  257|       |            }
  258|       |        }
  259|  2.72k|    }
_RNvMs0_NtCs7SkuAFpjVRX_10sparesults4jsonINtB5_19JsonSolutionsReaderRShE9read_nextCs19LGvG89wkE_13oxigraph_fuzz:
  278|  6.33k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  279|  6.33k|        match &mut self.kind {
  280|  6.33k|            JsonSolutionsReaderKind::Streaming { reader, buffer } => {
  281|  6.33k|                let mut new_bindings = vec![None; self.mapping.len()];
  282|       |                loop {
  283|  12.8k|                    match reader.read_event(buffer)? {
  284|  6.50k|                        JsonEvent::StartObject => (),
  285|  6.22k|                        JsonEvent::EndObject => return Ok(Some(new_bindings)),
  286|     55|                        JsonEvent::EndArray | JsonEvent::Eof => return Ok(None),
  287|      4|                        JsonEvent::ObjectKey(key) => {
  288|      4|                            let k = *self.mapping.get(key).ok_or_else(|| {
  289|       |                                SyntaxError::msg(format!(
  290|       |                                    "The variable {key} has not been defined in the header"
  291|       |                                ))
  292|      4|                            })?;
  293|      0|                            new_bindings[k] = Some(read_value(reader, buffer, 0)?)
  294|       |                        }
  295|      8|                        _ => return Err(SyntaxError::msg("Invalid result serialization").into()),
  296|       |                    }
  297|       |                }
  298|       |            }
  299|      6|            JsonSolutionsReaderKind::Buffered { bindings } => {
  300|      6|                Ok(if let Some((variables, values)) = bindings.next() {
  301|      3|                    let mut new_bindings = vec![None; self.mapping.len()];
  302|      3|                    for (variable, value) in variables.into_iter().zip(values) {
  303|      0|                        let k = *self.mapping.get(&variable).ok_or_else(|| {
  304|       |                            SyntaxError::msg(format!(
  305|       |                                "The variable {variable} has not been defined in the header"
  306|       |                            ))
  307|      0|                        })?;
  308|      0|                        new_bindings[k] = Some(value)
  309|       |                    }
  310|      3|                    Some(new_bindings)
  311|       |                } else {
  312|      3|                    None
  313|       |                })
  314|       |            }
  315|       |        }
  316|  6.33k|    }
_RNCNvMs0_NtCs7SkuAFpjVRX_10sparesults4jsonINtB7_19JsonSolutionsReaderRShE9read_next0Cs19LGvG89wkE_13oxigraph_fuzz:
  288|      4|                            let k = *self.mapping.get(key).ok_or_else(|| {
  289|      4|                                SyntaxError::msg(format!(
  290|      4|                                    "The variable {key} has not been defined in the header"
  291|      4|                                ))
  292|      4|                            })?;
_RNvMNtCs7SkuAFpjVRX_10sparesults4jsonINtB2_19JsonSolutionsWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE6finishCs19LGvG89wkE_13oxigraph_fuzz:
   67|     29|        self.writer.write_event(JsonEvent::EndArray)?;
   68|     29|        self.writer.write_event(JsonEvent::EndObject)?;
   69|     29|        self.writer.write_event(JsonEvent::EndObject)?;
   70|     29|        let mut inner = self.writer.into_inner();
   71|     29|        inner.flush()?;
   72|     29|        Ok(inner)
   73|     29|    }
_RINvNtCs7SkuAFpjVRX_10sparesults4json10read_valueRShECs19LGvG89wkE_13oxigraph_fuzz:
  319|  3.10k|fn read_value<R: BufRead>(
  320|  3.10k|    reader: &mut JsonReader<R>,
  321|  3.10k|    buffer: &mut Vec<u8>,
  322|  3.10k|    number_of_recursive_calls: usize,
  323|  3.10k|) -> Result<Term, ParseError> {
  324|  3.10k|    enum Type {
  325|  3.10k|        Uri,
  326|  3.10k|        BNode,
  327|  3.10k|        Literal,
  328|  3.10k|        #[cfg(feature = "rdf-star")]
  329|  3.10k|        Triple,
  330|  3.10k|    }
  331|  3.10k|    #[derive(Eq, PartialEq)]
  332|  3.10k|    enum State {
  333|  3.10k|        Type,
  334|  3.10k|        Value,
  335|  3.10k|        Lang,
  336|  3.10k|        Datatype,
  337|  3.10k|    }
  338|  3.10k|
  339|  3.10k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  340|      2|        return Err(SyntaxError::msg(format!(
  341|      2|            "Too many nested triples ({MAX_NUMBER_OF_NESTED_TRIPLES}). The parser fails here to avoid a stack overflow."
  342|      2|        ))
  343|      2|            .into());
  344|  3.09k|    }
  345|  3.09k|    let mut state = None;
  346|  3.09k|    let mut t = None;
  347|  3.09k|    let mut value = None;
  348|  3.09k|    let mut lang = None;
  349|  3.09k|    let mut datatype = None;
  350|  3.09k|    #[cfg(feature = "rdf-star")]
  351|  3.09k|    let mut subject = None;
  352|  3.09k|    #[cfg(feature = "rdf-star")]
  353|  3.09k|    let mut predicate = None;
  354|  3.09k|    #[cfg(feature = "rdf-star")]
  355|  3.09k|    let mut object = None;
  356|  3.09k|    if reader.read_event(buffer)? != JsonEvent::StartObject {
  357|      4|        return Err(SyntaxError::msg("Term serializations should be an object").into());
  358|  3.05k|    }
  359|       |    loop {
  360|  3.30k|        match reader.read_event(buffer)? {
  361|  3.00k|            JsonEvent::ObjectKey(key) => match key {
  362|  3.00k|                "type" => state = Some(State::Type),
  363|  3.00k|                "value" => state = Some(State::Value),
  364|  2.97k|                "xml:lang" => state = Some(State::Lang),
  365|  2.97k|                "datatype" => state = Some(State::Datatype),
  366|       |                #[cfg(feature = "rdf-star")]
  367|  2.97k|                "subject" => {
  368|      1|                    subject = Some(read_value(reader, buffer, number_of_recursive_calls + 1)?)
  369|       |                }
  370|       |                #[cfg(feature = "rdf-star")]
  371|  2.97k|                "predicate" => {
  372|  2.92k|                    predicate = Some(read_value(reader, buffer, number_of_recursive_calls + 1)?)
  373|       |                }
  374|       |                #[cfg(feature = "rdf-star")]
  375|     49|                "object" => {
  376|     21|                    object = Some(read_value(reader, buffer, number_of_recursive_calls + 1)?)
  377|       |                }
  378|       |                _ => {
  379|     28|                    return Err(SyntaxError::msg(format!(
  380|     28|                        "Unexpected key in term serialization: '{key}'"
  381|     28|                    ))
  382|     28|                    .into())
  383|       |                }
  384|       |            },
  385|       |            JsonEvent::StartObject => {
  386|    214|                if state != Some(State::Value) {
  387|      4|                    return Err(
  388|      4|                        SyntaxError::msg("Unexpected nested object in term serialization").into(),
  389|      4|                    );
  390|    210|                }
  391|       |            }
  392|      0|            JsonEvent::String(s) => match state {
  393|       |                Some(State::Type) => {
  394|      0|                    match s {
  395|      0|                        "uri" => t = Some(Type::Uri),
  396|      0|                        "bnode" => t = Some(Type::BNode),
  397|      0|                        "literal" | "typed-literal" => t = Some(Type::Literal),
  398|       |                        #[cfg(feature = "rdf-star")]
  399|      0|                        "triple" => t = Some(Type::Triple),
  400|       |                        _ => {
  401|      0|                            return Err(
  402|      0|                                SyntaxError::msg(format!("Unexpected term type: '{s}'")).into()
  403|      0|                            )
  404|       |                        }
  405|       |                    };
  406|      0|                    state = None;
  407|       |                }
  408|      0|                Some(State::Value) => {
  409|      0|                    value = Some(s.to_owned());
  410|      0|                    state = None;
  411|      0|                }
  412|      0|                Some(State::Lang) => {
  413|      0|                    lang = Some(s.to_owned());
  414|      0|                    state = None;
  415|      0|                }
  416|      0|                Some(State::Datatype) => {
  417|      0|                    datatype = Some(
  418|      0|                        NamedNode::new(s)
  419|      0|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
  420|       |                    );
  421|      0|                    state = None;
  422|       |                }
  423|      0|                _ => (), // impossible
  424|       |            },
  425|       |            JsonEvent::EndObject => {
  426|      3|                if let Some(s) = state {
  427|      2|                    if s == State::Value {
  428|      2|                        state = None; //End of triple
  429|      2|                    } else {
  430|      0|                        return Err(
  431|      0|                            SyntaxError::msg("Term description values should be string").into()
  432|      0|                        );
  433|       |                    }
  434|       |                } else {
  435|      0|                    return match t {
  436|      1|                        None => Err(SyntaxError::msg(
  437|      1|                            "Term serialization should have a 'type' key",
  438|      1|                        )
  439|      1|                        .into()),
  440|      0|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  441|       |                            SyntaxError::msg("uri serialization should have a 'value' key")
  442|      0|                        })?)
  443|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid uri value: {e}")))?
  444|      0|                        .into()),
  445|      0|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  446|       |                            SyntaxError::msg("bnode serialization should have a 'value' key")
  447|      0|                        })?)
  448|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid bnode value: {e}")))?
  449|      0|                        .into()),
  450|       |                        Some(Type::Literal) => {
  451|      0|                            let value = value.ok_or_else(|| {
  452|       |                                SyntaxError::msg("literal serialization should have a 'value' key")
  453|      0|                            })?;
  454|      0|                            Ok(match lang {
  455|      0|                                Some(lang) => {
  456|      0|                                    if let Some(datatype) = datatype {
  457|      0|                                        if datatype.as_ref() != rdf::LANG_STRING {
  458|      0|                                            return Err(SyntaxError::msg(format!(
  459|      0|                                                "xml:lang value '{lang}' provided with the datatype {datatype}"
  460|      0|                                            )).into())
  461|      0|                                        }
  462|      0|                                    }
  463|      0|                                    Literal::new_language_tagged_literal(value, &lang).map_err(|e| {
  464|       |                                        SyntaxError::msg(format!("Invalid xml:lang value '{lang}': {e}"))
  465|      0|                                    })?
  466|       |                                }
  467|      0|                                None => if let Some(datatype) = datatype {
  468|      0|                                    Literal::new_typed_literal(value, datatype)
  469|       |                                } else {
  470|      0|                                    Literal::new_simple_literal(value)
  471|       |                                }
  472|       |                            }
  473|      0|                                .into())
  474|       |                        }
  475|       |                        #[cfg(feature = "rdf-star")]
  476|       |                        Some(Type::Triple) => Ok(Triple::new(
  477|      0|                            match subject.ok_or_else(|| {
  478|       |                                SyntaxError::msg("triple serialization should have a 'subject' key")
  479|      0|                            })? {
  480|      0|                                Term::NamedNode(subject) => subject.into(),
  481|      0|                                Term::BlankNode(subject) => subject.into(),
  482|      0|                                Term::Triple(subject) => Subject::Triple(subject),
  483|       |                                Term::Literal(_) => {
  484|      0|                                    return Err(SyntaxError::msg(
  485|      0|                                        "The 'subject' value should not be a literal",
  486|      0|                                    )
  487|      0|                                    .into())
  488|       |                                }
  489|       |                            },
  490|      0|                            match predicate.ok_or_else(|| {
  491|       |                                SyntaxError::msg(
  492|       |                                    "triple serialization should have a 'predicate' key",
  493|       |                                )
  494|      0|                            })? {
  495|      0|                                Term::NamedNode(predicate) => predicate,
  496|       |                                _ => {
  497|      0|                                    return Err(SyntaxError::msg(
  498|      0|                                        "The 'predicate' value should be a uri",
  499|      0|                                    )
  500|      0|                                    .into())
  501|       |                                }
  502|       |                            },
  503|      0|                            object.ok_or_else(|| {
  504|       |                                SyntaxError::msg("triple serialization should have a 'object' key")
  505|      0|                            })?,
  506|       |                        )
  507|      0|                        .into()),
  508|       |                    };
  509|       |                }
  510|       |            }
  511|      4|            _ => return Err(SyntaxError::msg("Invalid term serialization").into()),
  512|       |        }
  513|       |    }
  514|  3.10k|}
_RNvXs1_NvNtCs7SkuAFpjVRX_10sparesults4json10read_valueNtB5_5StateNtNtCsewp07EQjaMZ_4core3cmp9PartialEq2eqCs19LGvG89wkE_13oxigraph_fuzz:
  331|    213|    #[derive(Eq, PartialEq)]

_RNvMs_Cs7SkuAFpjVRX_10sparesultsNtB4_18QueryResultsParser11from_formatCs19LGvG89wkE_13oxigraph_fuzz:
  166|  2.69k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  167|  2.69k|        Self { format }
  168|  2.69k|    }
_RNvMs2_Cs7SkuAFpjVRX_10sparesultsNtB5_22QueryResultsSerializer11from_formatCs19LGvG89wkE_13oxigraph_fuzz:
  362|  2.69k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  363|  2.69k|        Self { format }
  364|  2.69k|    }
_RINvMs_Cs7SkuAFpjVRX_10sparesultsNtB5_18QueryResultsParser12read_resultsRShECs19LGvG89wkE_13oxigraph_fuzz:
  193|  2.72k|    pub fn read_results<R: BufRead>(&self, reader: R) -> Result<QueryResultsReader<R>, ParseError> {
  194|  2.72k|        Ok(match self.format {
  195|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
  196|      0|                XmlQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  197|       |                XmlQueryResultsReader::Solutions {
  198|      0|                    solutions,
  199|      0|                    variables,
  200|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  201|      0|                    variables: Rc::new(variables),
  202|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
  203|      0|                }),
  204|       |            },
  205|  2.72k|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
  206|      0|                JsonQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  207|       |                JsonQueryResultsReader::Solutions {
  208|    106|                    solutions,
  209|    106|                    variables,
  210|    106|                } => QueryResultsReader::Solutions(SolutionsReader {
  211|    106|                    variables: Rc::new(variables),
  212|    106|                    solutions: SolutionsReaderKind::Json(solutions),
  213|    106|                }),
  214|       |            },
  215|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  216|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  217|      0|                TsvQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  218|       |                TsvQueryResultsReader::Solutions {
  219|      0|                    solutions,
  220|      0|                    variables,
  221|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  222|      0|                    variables: Rc::new(variables),
  223|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  224|      0|                }),
  225|       |            },
  226|       |        })
  227|  2.72k|    }
_RINvMs2_Cs7SkuAFpjVRX_10sparesultsNtB6_22QueryResultsSerializer16solutions_writerINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs19LGvG89wkE_13oxigraph_fuzz:
  403|     29|    pub fn solutions_writer<W: Write>(
  404|     29|        &self,
  405|     29|        writer: W,
  406|     29|        variables: Vec<Variable>,
  407|     29|    ) -> io::Result<SolutionsWriter<W>> {
  408|     29|        Ok(SolutionsWriter {
  409|     29|            formatter: match self.format {
  410|       |                QueryResultsFormat::Xml => {
  411|      0|                    SolutionsWriterKind::Xml(XmlSolutionsWriter::start(writer, &variables)?)
  412|       |                }
  413|       |                QueryResultsFormat::Json => {
  414|     29|                    SolutionsWriterKind::Json(JsonSolutionsWriter::start(writer, &variables)?)
  415|       |                }
  416|       |                QueryResultsFormat::Csv => {
  417|      0|                    SolutionsWriterKind::Csv(CsvSolutionsWriter::start(writer, variables)?)
  418|       |                }
  419|       |                QueryResultsFormat::Tsv => {
  420|      0|                    SolutionsWriterKind::Tsv(TsvSolutionsWriter::start(writer, variables)?)
  421|       |                }
  422|       |            },
  423|       |        })
  424|     29|    }
_RNCNvXs1_Cs7SkuAFpjVRX_10sparesultsINtB7_15SolutionsReaderRShENtNtNtNtCsewp07EQjaMZ_4core4iter6traits8iterator8Iterator4next0Cs19LGvG89wkE_13oxigraph_fuzz:
  321|  6.23k|            .map(|values| (Rc::clone(&self.variables), values).into()),
_RINvMs3_Cs7SkuAFpjVRX_10sparesultsINtB6_15SolutionsWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE5writeRNtNtCs5s8rvrQHfnt_5oxrdf8variable8VariableRNtNtB1E_6triple4TermRNtNtB6_8solution13QuerySolutionECs19LGvG89wkE_13oxigraph_fuzz:
  476|  2.93k|    pub fn write<'a>(
  477|  2.93k|        &mut self,
  478|  2.93k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  479|  2.93k|    ) -> io::Result<()> {
  480|  2.93k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  481|  2.93k|        match &mut self.formatter {
  482|      0|            SolutionsWriterKind::Xml(writer) => writer.write(solution),
  483|  2.93k|            SolutionsWriterKind::Json(writer) => writer.write(solution),
  484|      0|            SolutionsWriterKind::Csv(writer) => writer.write(solution),
  485|      0|            SolutionsWriterKind::Tsv(writer) => writer.write(solution),
  486|       |        }
  487|  2.93k|    }
_RNvMs3_Cs7SkuAFpjVRX_10sparesultsINtB5_15SolutionsWriterINtNtCsgGlVtr8vkIt_5alloc3vec3VechEE6finishCs19LGvG89wkE_13oxigraph_fuzz:
  490|     29|    pub fn finish(self) -> io::Result<W> {
  491|     29|        match self.formatter {
  492|      0|            SolutionsWriterKind::Xml(write) => write.finish(),
  493|     29|            SolutionsWriterKind::Json(write) => write.finish(),
  494|      0|            SolutionsWriterKind::Csv(write) => write.finish(),
  495|      0|            SolutionsWriterKind::Tsv(write) => write.finish(),
  496|       |        }
  497|     29|    }
_RNvXs1_Cs7SkuAFpjVRX_10sparesultsINtB5_15SolutionsReaderRShENtNtNtNtCsewp07EQjaMZ_4core4iter6traits8iterator8Iterator4nextCs19LGvG89wkE_13oxigraph_fuzz:
  313|  6.33k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  314|  6.33k|        Some(
  315|  6.33k|            match &mut self.solutions {
  316|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  317|  6.33k|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  318|      0|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  319|       |            }
  320|  6.33k|            .transpose()?
  321|  6.27k|            .map(|values| (Rc::clone(&self.variables), values).into()),
  322|       |        )
  323|  6.33k|    }

_RNvXs_NtCs7SkuAFpjVRX_10sparesults8solutionNtB4_13QuerySolutionINtNtCsewp07EQjaMZ_4core7convert4FromTINtNtCsgGlVtr8vkIt_5alloc2rc2RcINtNtB1G_3vec3VecNtNtCs5s8rvrQHfnt_5oxrdf8variable8VariableEEIB27_INtNtB14_6option6OptionNtNtB2r_6triple4TermEEEE4fromCs19LGvG89wkE_13oxigraph_fuzz:
  121|  6.23k|    fn from((v, s): (V, S)) -> Self {
  122|  6.23k|        Self {
  123|  6.23k|            variables: v.into(),
  124|  6.23k|            values: s.into(),
  125|  6.23k|        }
  126|  6.23k|    }
_RNvMNtCs7SkuAFpjVRX_10sparesults8solutionNtB2_13QuerySolution9variablesCs19LGvG89wkE_13oxigraph_fuzz:
  114|     27|    pub fn variables(&self) -> &[Variable] {
  115|     27|        &self.variables
  116|     27|    }
_RNvXs0_NtCs7SkuAFpjVRX_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsewp07EQjaMZ_4core4iter6traits7collect12IntoIterator9into_iterCs19LGvG89wkE_13oxigraph_fuzz:
  134|  2.93k|    fn into_iter(self) -> Iter<'a> {
  135|  2.93k|        Iter {
  136|  2.93k|            inner: self.variables.iter().zip(&self.values),
  137|  2.93k|        }
  138|  2.93k|    }
_RNvXs9_NtCs7SkuAFpjVRX_10sparesults8solutionNtB5_4IterNtNtNtNtCsewp07EQjaMZ_4core4iter6traits8iterator8Iterator4nextCs19LGvG89wkE_13oxigraph_fuzz:
  229|  2.93k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|  2.93k|        for (variable, value) in &mut self.inner {
  231|      0|            if let Some(value) = value {
  232|      0|                return Some((variable, value));
  233|      0|            }
  234|       |        }
  235|  2.93k|        None
  236|  2.93k|    }
_RNvXs9_NtCs7SkuAFpjVRX_10sparesults8solutionNtB5_4IterNtNtNtNtCsewp07EQjaMZ_4core4iter6traits8iterator8Iterator4nextB7_:
  229|  5.86k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|  5.86k|        for (variable, value) in &mut self.inner {
  231|      0|            if let Some(value) = value {
  232|      0|                return Some((variable, value));
  233|      0|            }
  234|       |        }
  235|  5.86k|        None
  236|  5.86k|    }
_RNvXs6_NtCs7SkuAFpjVRX_10sparesults8solutionNtB5_13QuerySolutionNtNtCsewp07EQjaMZ_4core3cmp9PartialEq2eq:
  189|  2.93k|    fn eq(&self, other: &Self) -> bool {
  190|  2.93k|        for (k, v) in self.iter() {
  191|      0|            if other.get(k) != Some(v) {
  192|      0|                return false;
  193|      0|            }
  194|       |        }
  195|  2.93k|        for (k, v) in other.iter() {
  196|      0|            if self.get(k) != Some(v) {
  197|      0|                return false;
  198|      0|            }
  199|       |        }
  200|  2.93k|        true
  201|  2.93k|    }
_RNvMNtCs7SkuAFpjVRX_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   86|  5.86k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   87|  5.86k|        self.into_iter()
   88|  5.86k|    }
_RNvXs0_NtCs7SkuAFpjVRX_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsewp07EQjaMZ_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  134|  5.86k|    fn into_iter(self) -> Iter<'a> {
  135|  5.86k|        Iter {
  136|  5.86k|            inner: self.variables.iter().zip(&self.values),
  137|  5.86k|        }
  138|  5.86k|    }


_RINvXNtCs33IGOEyt7dd_6anyhow7contextINtNtCsl2lhD68vXAd_4core6result6ResultINtNtCsdBW21Yiwikk_5alloc3vec3VecNtNtCsbBgSuRnHgd0_10sparesults8solution13QuerySolutionENtNtB1L_5error10ParseErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCs9k6xcToz8Tk_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB44_:
   58|    299|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    299|    where
   60|    299|        C: Display + Send + Sync + 'static,
   61|    299|        F: FnOnce() -> C,
   62|    299|    {
   63|    299|        match self {
   64|    299|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    299|    }
_RINvXNtCs33IGOEyt7dd_6anyhow7contextINtNtCsl2lhD68vXAd_4core6result6ResultINtNtCsbBgSuRnHgd0_10sparesults6parser26FromReadQueryResultsReaderRShENtNtB1f_5error10ParseErrorEINtB5_7ContextB1a_B2i_E12with_contextNtNtCsdBW21Yiwikk_5alloc6string6StringNCNvNtCs9k6xcToz8Tk_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB42_:
   58|    299|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    299|    where
   60|    299|        C: Display + Send + Sync + 'static,
   61|    299|        F: FnOnce() -> C,
   62|    299|    {
   63|    299|        match self {
   64|    299|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    299|    }

_RNvXs1_Csfypg28Pvccj_17json_event_parserNtB5_9JsonEventNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9k6xcToz8Tk_13oxigraph_fuzz:
   29|  21.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]

_RNvMNtCsfypg28Pvccj_17json_event_parser4readINtB2_18FromReadJsonReaderRShE3newCs9k6xcToz8Tk_13oxigraph_fuzz:
   40|  7.67k|    pub const fn new(read: R) -> Self {
   41|  7.67k|        Self {
   42|  7.67k|            input_buffer: Vec::new(),
   43|  7.67k|            input_buffer_start: 0,
   44|  7.67k|            input_buffer_end: 0,
   45|  7.67k|            max_buffer_size: MAX_BUFFER_SIZE,
   46|  7.67k|            is_ending: false,
   47|  7.67k|            read,
   48|  7.67k|            parser: LowLevelJsonReader::new(),
   49|  7.67k|        }
   50|  7.67k|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser4readINtB2_18FromReadJsonReaderRShE15read_next_eventCs9k6xcToz8Tk_13oxigraph_fuzz:
   58|   146k|    pub fn read_next_event(&mut self) -> Result<JsonEvent<'_>, ParseError> {
   59|       |        loop {
   60|       |            {
   61|       |                let LowLevelJsonReaderResult {
   62|   158k|                    event,
   63|   158k|                    consumed_bytes,
   64|   158k|                } = self.parser.read_next_event(
   65|   158k|                    #[allow(unsafe_code)]
   66|   158k|                    unsafe {
   67|   158k|                        let input_buffer_ptr: *const [u8] =
   68|   158k|                            &self.input_buffer[self.input_buffer_start..self.input_buffer_end];
   69|   158k|                        &*input_buffer_ptr
   70|   158k|                    }, // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
   71|   158k|                    self.is_ending,
   72|   158k|                );
   73|   158k|                self.input_buffer_start += consumed_bytes;
   74|   158k|                if let Some(event) = event {
   75|   146k|                    return Ok(event?);
   76|  12.1k|                }
   77|  12.1k|            }
   78|  12.1k|            if self.input_buffer_start > 0 {
   79|  2.45k|                self.input_buffer
   80|  2.45k|                    .copy_within(self.input_buffer_start..self.input_buffer_end, 0);
   81|  2.45k|                self.input_buffer_end -= self.input_buffer_start;
   82|  2.45k|                self.input_buffer_start = 0;
   83|  9.66k|            }
   84|  12.1k|            if self.input_buffer.len() == self.max_buffer_size {
   85|      0|                return Err(io::Error::new(
   86|      0|                    io::ErrorKind::OutOfMemory,
   87|      0|                    format!(
   88|      0|                        "Reached the buffer maximal size of {}",
   89|      0|                        self.max_buffer_size
   90|      0|                    ),
   91|      0|                )
   92|      0|                .into());
   93|  12.1k|            }
   94|  12.1k|            let min_end = min(
   95|  12.1k|                self.input_buffer_end + MIN_BUFFER_SIZE,
   96|  12.1k|                self.max_buffer_size,
   97|  12.1k|            );
   98|  12.1k|            if self.input_buffer.len() < min_end {
   99|  11.2k|                self.input_buffer.resize(min_end, 0);
  100|  11.2k|            }
  101|  12.1k|            if self.input_buffer.len() < self.input_buffer.capacity() {
  102|  3.56k|                // We keep extending to have as much space as available without reallocation
  103|  3.56k|                self.input_buffer.resize(self.input_buffer.capacity(), 0);
  104|  8.55k|            }
  105|  12.1k|            let read = self
  106|  12.1k|                .read
  107|  12.1k|                .read(&mut self.input_buffer[self.input_buffer_end..])?;
  108|  12.1k|            self.input_buffer_end += read;
  109|  12.1k|            self.is_ending = read == 0;
  110|       |        }
  111|   146k|    }
_RNvXs8_NtCsfypg28Pvccj_17json_event_parser4readNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromCs9k6xcToz8Tk_13oxigraph_fuzz:
 1209|  5.62k|    fn from(error: SyntaxError) -> Self {
 1210|  5.62k|        Self::Syntax(error)
 1211|  5.62k|    }
_RNCNvNtCsfypg28Pvccj_17json_event_parser4read11read_digits0B5_:
 1070|  4.26k|        .take_while(|c| c.is_ascii_digit())
_RNCNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB7_18LowLevelJsonReader15read_next_event0B9_:
  350|  1.26k|                    let error = error.map(|e| {
  351|  1.26k|                        self.lexer.syntax_error(
  352|  1.26k|                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|  1.26k|                            e,
  354|  1.26k|                        )
  355|  1.26k|                    });
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_numbers_0B9_:
  949|  2.25k|            |c| Some(Some(*c)),
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_number0B9_:
  948|    101|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings5_0B9_:
  875|    850|                    error = error.or_else(|| {
  876|    850|                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|    850|                        Some(self.syntax_error(
  878|    850|                            pos..pos + 1,
  879|    850|                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|    850|                        ))
  881|    850|                    });
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_numbers0_0B9_:
  970|     77|            || if is_ending { Some(None) } else { None },
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer11read_string:
  680|  73.6k|    fn read_string<'a>(
  681|  73.6k|        &mut self,
  682|  73.6k|        input_buffer: &'a [u8],
  683|  73.6k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  684|  73.6k|        let mut error = None;
  685|  73.6k|        let mut string: Option<(String, usize)> = None;
  686|  73.6k|        let mut next_byte_offset = 1;
  687|       |        loop {
  688|  1.53M|            match *input_buffer.get(next_byte_offset)? {
  689|       |                b'"' => {
  690|       |                    // end of string
  691|  66.9k|                    let result = Some(if let Some(error) = error {
  692|    538|                        Err(error)
  693|  66.3k|                    } else if let Some((mut string, read_until)) = string {
  694|  8.66k|                        if read_until < next_byte_offset {
  695|  8.16k|                            let (str, e) = self.decode_utf8(
  696|  8.16k|                                &input_buffer[read_until..next_byte_offset],
  697|  8.16k|                                self.file_offset + u64::try_from(read_until).unwrap(),
  698|  8.16k|                            );
  699|  8.16k|                            error = error.or(e);
  700|  8.16k|                            string.push_str(&str);
  701|  8.16k|                        }
  702|  8.66k|                        if let Some(error) = error {
  703|     15|                            Err(error)
  704|       |                        } else {
  705|  8.64k|                            Ok(JsonToken::String(Cow::Owned(string)))
  706|       |                        }
  707|       |                    } else {
  708|  57.7k|                        let (string, error) = self
  709|  57.7k|                            .decode_utf8(&input_buffer[1..next_byte_offset], self.file_offset + 1);
  710|  57.7k|                        if let Some(error) = error {
  711|     19|                            Err(error)
  712|       |                        } else {
  713|  57.7k|                            Ok(JsonToken::String(string))
  714|       |                        }
  715|       |                    });
  716|  66.9k|                    self.file_offset += u64::try_from(next_byte_offset).unwrap() + 1;
  717|  66.9k|                    return result;
  718|       |                }
  719|       |                b'\\' => {
  720|       |                    // Escape sequences
  721|   293k|                    if string.is_none() {
  722|  15.6k|                        string = Some((String::new(), 1))
  723|   277k|                    }
  724|   293k|                    let (string, read_until) = string.as_mut().unwrap();
  725|   293k|                    if *read_until < next_byte_offset {
  726|   170k|                        let (str, e) = self.decode_utf8(
  727|   170k|                            &input_buffer[*read_until..next_byte_offset],
  728|   170k|                            self.file_offset + u64::try_from(*read_until).unwrap(),
  729|   170k|                        );
  730|   170k|                        error = error.or(e);
  731|   170k|                        string.push_str(&str);
  732|   170k|                    }
  733|   293k|                    next_byte_offset += 1;
  734|   293k|                    match *input_buffer.get(next_byte_offset)? {
  735|  5.72k|                        b'"' => {
  736|  5.72k|                            string.push('"');
  737|  5.72k|                            next_byte_offset += 1;
  738|  5.72k|                        }
  739|  5.34k|                        b'\\' => {
  740|  5.34k|                            string.push('\\');
  741|  5.34k|                            next_byte_offset += 1;
  742|  5.34k|                        }
  743|  4.12k|                        b'/' => {
  744|  4.12k|                            string.push('/');
  745|  4.12k|                            next_byte_offset += 1;
  746|  4.12k|                        }
  747|  6.07k|                        b'b' => {
  748|  6.07k|                            string.push('\u{8}');
  749|  6.07k|                            next_byte_offset += 1;
  750|  6.07k|                        }
  751|  2.27k|                        b'f' => {
  752|  2.27k|                            string.push('\u{C}');
  753|  2.27k|                            next_byte_offset += 1;
  754|  2.27k|                        }
  755|  1.93k|                        b'n' => {
  756|  1.93k|                            string.push('\n');
  757|  1.93k|                            next_byte_offset += 1;
  758|  1.93k|                        }
  759|  2.29k|                        b'r' => {
  760|  2.29k|                            string.push('\r');
  761|  2.29k|                            next_byte_offset += 1;
  762|  2.29k|                        }
  763|  2.88k|                        b't' => {
  764|  2.88k|                            string.push('\t');
  765|  2.88k|                            next_byte_offset += 1;
  766|  2.88k|                        }
  767|       |                        b'u' => {
  768|   236k|                            next_byte_offset += 1;
  769|   236k|                            let val = input_buffer.get(next_byte_offset..next_byte_offset + 4)?;
  770|   235k|                            next_byte_offset += 4;
  771|   235k|                            let code_point = match read_hexa_char(val) {
  772|   168k|                                Ok(cp) => cp,
  773|  67.6k|                                Err(e) => {
  774|  67.6k|                                    error = error.or_else(|| {
  775|       |                                        let pos = self.file_offset
  776|       |                                            + u64::try_from(next_byte_offset).unwrap();
  777|       |                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  67.6k|                                    });
  779|  67.6k|                                    char::REPLACEMENT_CHARACTER.into()
  780|       |                                }
  781|       |                            };
  782|   235k|                            if let Some(c) = char::from_u32(code_point) {
  783|   131k|                                string.push(c);
  784|   131k|                            } else {
  785|   104k|                                let high_surrogate = code_point;
  786|   104k|                                if !(0xD800..=0xDBFF).contains(&high_surrogate) {
  787|  89.6k|                                    error = error.or_else(|| {
  788|       |                                        let pos = self.file_offset
  789|       |                                            + u64::try_from(next_byte_offset).unwrap();
  790|       |                                        Some(self.syntax_error(
  791|       |                                            pos - 6..pos,
  792|       |                                            format!(
  793|       |                                                "\\u{:X} is not a valid high surrogate",
  794|       |                                                high_surrogate
  795|       |                                            ),
  796|       |                                        ))
  797|  89.6k|                                    });
  798|  89.6k|                                }
  799|   104k|                                let val =
  800|   104k|                                    input_buffer.get(next_byte_offset..next_byte_offset + 6)?;
  801|   104k|                                next_byte_offset += 6;
  802|   104k|                                if !val.starts_with(b"\\u") {
  803|  36.1k|                                    error = error.or_else(|| {
  804|       |                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|       |                                        Some(self.syntax_error(
  806|       |                                            pos - 6..pos,
  807|       |                                            format!(
  808|       |                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|       |                                                high_surrogate
  810|       |                                            )
  811|       |                                        ))
  812|  36.1k|                                    });
  813|  67.8k|                                }
  814|   104k|                                let low_surrogate = match read_hexa_char(&val[2..]) {
  815|  61.1k|                                    Ok(cp) => cp,
  816|  42.9k|                                    Err(e) => {
  817|  42.9k|                                        error = error.or_else(|| {
  818|       |                                            let pos = self.file_offset
  819|       |                                                + u64::try_from(next_byte_offset).unwrap();
  820|       |                                            Some(self.syntax_error(pos - 6..pos, e))
  821|  42.9k|                                        });
  822|  42.9k|                                        char::REPLACEMENT_CHARACTER.into()
  823|       |                                    }
  824|       |                                };
  825|   104k|                                if !(0xDC00..=0xDFFF).contains(&low_surrogate) {
  826|  64.0k|                                    error = error.or_else(|| {
  827|       |                                        let pos = self.file_offset
  828|       |                                            + u64::try_from(next_byte_offset).unwrap();
  829|       |                                        Some(self.syntax_error(
  830|       |                                            pos - 6..pos,
  831|       |                                            format!(
  832|       |                                                "\\u{:X} is not a valid low surrogate",
  833|       |                                                low_surrogate
  834|       |                                            ),
  835|       |                                        ))
  836|  64.0k|                                    });
  837|  64.0k|                                }
  838|   104k|                                let code_point = 0x10000
  839|   104k|                                    + ((high_surrogate & 0x03FF) << 10)
  840|   104k|                                    + (low_surrogate & 0x03FF);
  841|   104k|                                if let Some(c) = char::from_u32(code_point) {
  842|   104k|                                    string.push(c)
  843|      0|                                } else {
  844|      0|                                    string.push(char::REPLACEMENT_CHARACTER);
  845|      0|                                    error = error.or_else(|| {
  846|       |                                        let pos = self.file_offset
  847|       |                                            + u64::try_from(next_byte_offset).unwrap();
  848|       |                                        Some(self.syntax_error(
  849|       |                                            pos - 12..pos,
  850|       |                                            format!(
  851|       |                                                "\\u{:X}\\u{:X} is an invalid surrogate pair",
  852|       |                                                high_surrogate, low_surrogate
  853|       |                                            ),
  854|       |                                        ))
  855|      0|                                    });
  856|      0|                                }
  857|       |                            }
  858|       |                        }
  859|  26.0k|                        c => {
  860|  26.0k|                            next_byte_offset += 1;
  861|  26.0k|                            error = error.or_else(|| {
  862|       |                                let pos =
  863|       |                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|       |                                Some(self.syntax_error(
  865|       |                                    pos - 2..pos,
  866|       |                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|       |                                ))
  868|  26.0k|                            });
  869|  26.0k|                            string.push(char::REPLACEMENT_CHARACTER);
  870|  26.0k|                        }
  871|       |                    }
  872|   291k|                    *read_until = next_byte_offset;
  873|       |                }
  874|  1.16M|                c @ (0..=0x1F) => {
  875|  43.1k|                    error = error.or_else(|| {
  876|       |                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|       |                        Some(self.syntax_error(
  878|       |                            pos..pos + 1,
  879|       |                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|       |                        ))
  881|  43.1k|                    });
  882|  43.1k|                    next_byte_offset += 1;
  883|  43.1k|                }
  884|  1.12M|                _ => {
  885|  1.12M|                    next_byte_offset += 1;
  886|  1.12M|                }
  887|       |            }
  888|       |        }
  889|  73.6k|    }
_RNvNtCsfypg28Pvccj_17json_event_parser4read11read_digits:
 1067|  2.94k|fn read_digits(input_buffer: &[u8], is_ending: bool) -> Option<usize> {
 1068|  2.94k|    let count = input_buffer
 1069|  2.94k|        .iter()
 1070|  2.94k|        .take_while(|c| c.is_ascii_digit())
 1071|  2.94k|        .count();
 1072|  2.94k|    if count == input_buffer.len() && !is_ending {
 1073|     52|        return None;
 1074|  2.89k|    }
 1075|  2.89k|    Some(count)
 1076|  2.94k|}
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader16check_stack_size:
  529|   285k|    fn check_stack_size(&self) -> Result<(), String> {
  530|   285k|        if self.state_stack.len() > self.max_state_stack_size {
  531|      0|            Err(format!(
  532|      0|                "Max stack size of {} reached on an object opening",
  533|      0|                self.max_state_stack_size
  534|      0|            ))
  535|       |        } else {
  536|   285k|            Ok(())
  537|       |        }
  538|   285k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings4_0B9_:
  861|    780|                            error = error.or_else(|| {
  862|    780|                                let pos =
  863|    780|                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|    780|                                Some(self.syntax_error(
  865|    780|                                    pos - 2..pos,
  866|    780|                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|    780|                                ))
  868|    780|                            });
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader25apply_new_token_for_value:
  488|  78.5k|    fn apply_new_token_for_value<'a>(
  489|  78.5k|        &mut self,
  490|  78.5k|        token: JsonToken<'a>,
  491|  78.5k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  492|  78.5k|        match token {
  493|  10.2k|            JsonToken::OpeningSquareBracket => (
  494|  10.2k|                Some(JsonEvent::StartArray),
  495|  10.2k|                self.push_state_stack(JsonState::ArrayValueOrEnd).err(),
  496|  10.2k|            ),
  497|      1|            JsonToken::ClosingSquareBracket => (
  498|      1|                None,
  499|      1|                Some("Unexpected closing square bracket, no array to close".into()),
  500|      1|            ),
  501|  41.8k|            JsonToken::OpeningCurlyBracket => (
  502|  41.8k|                Some(JsonEvent::StartObject),
  503|  41.8k|                self.push_state_stack(JsonState::ObjectKeyOrEnd).err(),
  504|  41.8k|            ),
  505|     13|            JsonToken::ClosingCurlyBracket => (
  506|     13|                None,
  507|     13|                Some("Unexpected closing curly bracket, no array to close".into()),
  508|     13|            ),
  509|      7|            JsonToken::Comma => (None, Some("Unexpected comma, no values to separate".into())),
  510|     10|            JsonToken::Colon => (None, Some("Unexpected colon, no key to follow".into())),
  511|  23.5k|            JsonToken::String(string) => (Some(JsonEvent::String(string)), None),
  512|  2.17k|            JsonToken::Number(number) => (Some(JsonEvent::Number(number)), None),
  513|    271|            JsonToken::True => (Some(JsonEvent::Boolean(true)), None),
  514|     80|            JsonToken::False => (Some(JsonEvent::Boolean(false)), None),
  515|      4|            JsonToken::Null => (Some(JsonEvent::Null), None),
  516|    457|            JsonToken::Eof => (
  517|    457|                Some(JsonEvent::Eof),
  518|    457|                Some("Unexpected end of file, a value was expected".into()),
  519|    457|            ),
  520|       |        }
  521|  78.5k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings0_0B9_:
  803|     81|                                    error = error.or_else(|| {
  804|     81|                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|     81|                                        Some(self.syntax_error(
  806|     81|                                            pos - 6..pos,
  807|     81|                                            format!(
  808|     81|                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|     81|                                                high_surrogate
  810|     81|                                            )
  811|     81|                                        ))
  812|     81|                                    });
_RNvNtCsfypg28Pvccj_17json_event_parser4read14read_hexa_char:
 1048|   339k|fn read_hexa_char(input: &[u8]) -> Result<u32, String> {
 1049|   339k|    let mut value = 0;
 1050|  1.18M|    for c in input.iter().copied() {
 1051|  1.18M|        value = value * 16
 1052|  1.18M|            + match c {
 1053|  1.16M|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
 1054|   213k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
 1055|   535k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
 1056|       |                _ => {
 1057|   110k|                    return Err(format!(
 1058|   110k|                        "Unexpected character in a unicode escape: '{}'",
 1059|   110k|                        char::from(c)
 1060|   110k|                    ))
 1061|       |                }
 1062|       |            }
 1063|       |    }
 1064|   229k|    Ok(value)
 1065|   339k|}
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings1_0B9_:
  817|     77|                                        error = error.or_else(|| {
  818|     77|                                            let pos = self.file_offset
  819|     77|                                                + u64::try_from(next_byte_offset).unwrap();
  820|     77|                                            Some(self.syntax_error(pos - 6..pos, e))
  821|     77|                                        });
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader16push_state_stack:
  523|   285k|    fn push_state_stack(&mut self, state: JsonState) -> Result<(), String> {
  524|   285k|        self.check_stack_size()?;
  525|   285k|        self.state_stack.push(state);
  526|   285k|        Ok(())
  527|   285k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings2_0B9_:
  826|     49|                                    error = error.or_else(|| {
  827|     49|                                        let pos = self.file_offset
  828|     49|                                            + u64::try_from(next_byte_offset).unwrap();
  829|     49|                                        Some(self.syntax_error(
  830|     49|                                            pos - 6..pos,
  831|     49|                                            format!(
  832|     49|                                                "\\u{:X} is not a valid low surrogate",
  833|     49|                                                low_surrogate
  834|     49|                                            ),
  835|     49|                                        ))
  836|     49|                                    });
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer11read_number:
  918|  2.39k|    fn read_number<'a>(
  919|  2.39k|        &mut self,
  920|  2.39k|        input_buffer: &'a [u8],
  921|  2.39k|        is_ending: bool,
  922|  2.39k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  923|  2.39k|        let mut next_byte_offset = 0;
  924|  2.39k|        if *input_buffer.get(next_byte_offset)? == b'-' {
  925|     76|            next_byte_offset += 1;
  926|  2.32k|        }
  927|       |        // integer starting with first bytes
  928|  2.39k|        match *input_buffer.get(next_byte_offset)? {
  929|    284|            b'0' => {
  930|    284|                next_byte_offset += 1;
  931|    284|            }
  932|  2.09k|            b'1'..=b'9' => {
  933|  2.09k|                next_byte_offset += 1;
  934|  2.09k|                next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  935|       |            }
  936|      1|            c => {
  937|      1|                next_byte_offset += 1;
  938|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  939|      1|                return Some(Err(self.syntax_error(
  940|      1|                    self.file_offset - 1..self.file_offset,
  941|      1|                    format!("A number is not allowed to start with '{}'", char::from(c)),
  942|      1|                )));
  943|       |            }
  944|       |        }
  945|       |
  946|       |        // Dot
  947|  2.35k|        if input_buffer.get(next_byte_offset).map_or_else(
  948|  2.35k|            || if is_ending { Some(None) } else { None },
  949|  2.35k|            |c| Some(Some(*c)),
  950|  2.35k|        )? == Some(b'.')
  951|       |        {
  952|    123|            next_byte_offset += 1;
  953|    123|            let c = *input_buffer.get(next_byte_offset)?;
  954|    116|            next_byte_offset += 1;
  955|    116|            if !c.is_ascii_digit() {
  956|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  957|      1|                return Some(Err(self.syntax_error(
  958|      1|                    self.file_offset - 1..self.file_offset,
  959|      1|                    format!(
  960|      1|                        "A number fractional part must start with a digit and not '{}'",
  961|      1|                        char::from(c)
  962|      1|                    ),
  963|      1|                )));
  964|    115|            }
  965|    115|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  966|  2.19k|        }
  967|       |
  968|       |        // Exp
  969|  2.30k|        let c = input_buffer.get(next_byte_offset).map_or_else(
  970|  2.30k|            || if is_ending { Some(None) } else { None },
  971|  2.30k|            |c| Some(Some(*c)),
  972|  2.30k|        )?;
  973|  2.30k|        if c == Some(b'e') || c == Some(b'E') {
  974|    773|            next_byte_offset += 1;
  975|    773|            match *input_buffer.get(next_byte_offset)? {
  976|       |                b'-' | b'+' => {
  977|    626|                    next_byte_offset += 1;
  978|    626|                    let c = *input_buffer.get(next_byte_offset)?;
  979|    596|                    next_byte_offset += 1;
  980|    596|                    if !c.is_ascii_digit() {
  981|      2|                        self.file_offset += u64::try_from(next_byte_offset).unwrap();
  982|      2|                        return Some(Err(self.syntax_error(
  983|      2|                            self.file_offset - 1..self.file_offset,
  984|      2|                            format!(
  985|      2|                                "A number exponential part must contain at least a digit, '{}' found",
  986|      2|                                char::from(c)
  987|      2|                            ),
  988|      2|                        )));
  989|    594|                    }
  990|       |                }
  991|    139|                b'0'..=b'9' => {
  992|    139|                    next_byte_offset += 1;
  993|    139|                }
  994|      1|                c => {
  995|      1|                    next_byte_offset += 1;
  996|      1|                    self.file_offset += u64::try_from(next_byte_offset).unwrap();
  997|      1|                    return Some(Err(self.syntax_error(
  998|      1|                        self.file_offset - 1..self.file_offset,
  999|      1|                        format!(
 1000|      1|                            "A number exponential part must start with +, - or a digit, '{}' found",
 1001|      1|                            char::from(c)
 1002|      1|                        ),
 1003|      1|                    )));
 1004|       |                }
 1005|       |            }
 1006|    733|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
 1007|  1.52k|        }
 1008|  2.24k|        self.file_offset += u64::try_from(next_byte_offset).unwrap();
 1009|  2.24k|        Some(Ok(JsonToken::Number(Cow::Borrowed(
 1010|  2.24k|            str::from_utf8(&input_buffer[..next_byte_offset]).unwrap(),
 1011|  2.24k|        ))))
 1012|  2.39k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer13read_constant0B9_:
  904|    489|            .take_while(|c| c.is_ascii_alphabetic())
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_string0B9_:
  774|  1.50k|                                    error = error.or_else(|| {
  775|  1.50k|                                        let pos = self.file_offset
  776|  1.50k|                                            + u64::try_from(next_byte_offset).unwrap();
  777|  1.50k|                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  1.50k|                                    });
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader3new:
  303|  7.67k|    pub const fn new() -> Self {
  304|  7.67k|        Self {
  305|  7.67k|            lexer: JsonLexer {
  306|  7.67k|                file_offset: 0,
  307|  7.67k|                file_line: 0,
  308|  7.67k|                file_start_of_last_line: 0,
  309|  7.67k|                file_start_of_last_token: 0,
  310|  7.67k|                is_start: true,
  311|  7.67k|            },
  312|  7.67k|            state_stack: Vec::new(),
  313|  7.67k|            max_state_stack_size: MAX_STATE_STACK_SIZE,
  314|  7.67k|            element_read: false,
  315|  7.67k|            buffered_event: None,
  316|  7.67k|        }
  317|  7.67k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_strings_0B9_:
  787|  1.32k|                                    error = error.or_else(|| {
  788|  1.32k|                                        let pos = self.file_offset
  789|  1.32k|                                            + u64::try_from(next_byte_offset).unwrap();
  790|  1.32k|                                        Some(self.syntax_error(
  791|  1.32k|                                            pos - 6..pos,
  792|  1.32k|                                            format!(
  793|  1.32k|                                                "\\u{:X} is not a valid high surrogate",
  794|  1.32k|                                                high_surrogate
  795|  1.32k|                                            ),
  796|  1.32k|                                        ))
  797|  1.32k|                                    });
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer15read_next_token:
  578|   237k|    fn read_next_token<'a>(
  579|   237k|        &mut self,
  580|   237k|        mut input_buffer: &'a [u8],
  581|   237k|        is_ending: bool,
  582|   237k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  583|   237k|        // We remove BOM at the beginning
  584|   237k|        if self.is_start {
  585|  15.3k|            if input_buffer.len() < 3 && !is_ending {
  586|  7.71k|                return None;
  587|  7.67k|            }
  588|  7.67k|            self.is_start = false;
  589|  7.67k|            if input_buffer.starts_with(&[0xEF, 0xBB, 0xBF]) {
  590|      3|                input_buffer = &input_buffer[3..];
  591|      3|                self.file_offset += 3;
  592|  7.67k|            }
  593|   222k|        }
  594|       |
  595|       |        // We skip whitespaces
  596|   230k|        let mut i = 0;
  597|   235k|        while let Some(c) = input_buffer.get(i) {
  598|   233k|            match *c {
  599|  4.51k|                b' ' | b'\t' => {
  600|  4.51k|                    i += 1;
  601|  4.51k|                }
  602|    262|                b'\n' => {
  603|    262|                    i += 1;
  604|    262|                    self.file_line += 1;
  605|    262|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  606|    262|                }
  607|       |                b'\r' => {
  608|    259|                    i += 1;
  609|    259|                    if let Some(c) = input_buffer.get(i) {
  610|    233|                        if *c == b'\n' {
  611|      0|                            i += 1; // \r\n
  612|    233|                        }
  613|     26|                    } else if !is_ending {
  614|       |                        // We need an extra byte to check if followed by \n
  615|     12|                        i -= 1;
  616|     12|                        self.file_offset += u64::try_from(i).unwrap();
  617|     12|                        return None;
  618|     14|                    }
  619|    247|                    self.file_line += 1;
  620|    247|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  621|       |                }
  622|       |                _ => {
  623|   228k|                    break;
  624|       |                }
  625|       |            }
  626|       |        }
  627|   230k|        self.file_offset += u64::try_from(i).unwrap();
  628|   230k|        input_buffer = &input_buffer[i..];
  629|   230k|        self.file_start_of_last_token = self.file_offset;
  630|   230k|
  631|   230k|        if is_ending && input_buffer.is_empty() {
  632|    904|            return Some(Ok(JsonToken::Eof));
  633|   229k|        }
  634|   229k|
  635|   229k|        // we get the first character
  636|   229k|        match *input_buffer.first()? {
  637|       |            b'{' => {
  638|  41.8k|                self.file_offset += 1;
  639|  41.8k|                Some(Ok(JsonToken::OpeningCurlyBracket))
  640|       |            }
  641|       |            b'}' => {
  642|  16.1k|                self.file_offset += 1;
  643|  16.1k|                Some(Ok(JsonToken::ClosingCurlyBracket))
  644|       |            }
  645|       |            b'[' => {
  646|  10.2k|                self.file_offset += 1;
  647|  10.2k|                Some(Ok(JsonToken::OpeningSquareBracket))
  648|       |            }
  649|       |            b']' => {
  650|  3.88k|                self.file_offset += 1;
  651|  3.88k|                Some(Ok(JsonToken::ClosingSquareBracket))
  652|       |            }
  653|       |            b',' => {
  654|  36.7k|                self.file_offset += 1;
  655|  36.7k|                Some(Ok(JsonToken::Comma))
  656|       |            }
  657|       |            b':' => {
  658|  42.6k|                self.file_offset += 1;
  659|  42.6k|                Some(Ok(JsonToken::Colon))
  660|       |            }
  661|  73.6k|            b'"' => self.read_string(input_buffer),
  662|    310|            b't' => self.read_constant(input_buffer, is_ending, "true", JsonToken::True),
  663|    115|            b'f' => self.read_constant(input_buffer, is_ending, "false", JsonToken::False),
  664|     43|            b'n' => self.read_constant(input_buffer, is_ending, "null", JsonToken::Null),
  665|  2.57k|            b'-' | b'0'..=b'9' => self.read_number(input_buffer, is_ending),
  666|    327|            c => {
  667|    327|                self.file_offset += 1;
  668|    327|                Some(Err(self.syntax_error(
  669|    327|                    self.file_offset - 1..self.file_offset,
  670|    327|                    if c < 128 {
  671|    306|                        format!("Unexpected char: '{}'", char::from(c))
  672|       |                    } else {
  673|     21|                        format!("Unexpected byte: \\x{c:X}")
  674|       |                    },
  675|       |                )))
  676|       |            }
  677|       |        }
  678|   237k|    }
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader15read_next_event:
  328|   158k|    pub fn read_next_event<'a>(
  329|   158k|        &mut self,
  330|   158k|        input_buffer: &'a [u8],
  331|   158k|        is_ending: bool,
  332|   158k|    ) -> LowLevelJsonReaderResult<'a> {
  333|   158k|        if let Some(event) = self.buffered_event.take() {
  334|      0|            return LowLevelJsonReaderResult {
  335|      0|                consumed_bytes: 0,
  336|      0|                event: Some(Ok(event)),
  337|      0|            };
  338|   158k|        }
  339|   158k|        let start_file_offset = self.lexer.file_offset;
  340|   237k|        while let Some(token) = self.lexer.read_next_token(
  341|   237k|            &input_buffer[usize::try_from(self.lexer.file_offset - start_file_offset).unwrap()..],
  342|   237k|            is_ending,
  343|   237k|        ) {
  344|   222k|            let consumed_bytes = (self.lexer.file_offset - start_file_offset)
  345|   222k|                .try_into()
  346|   222k|                .unwrap();
  347|   222k|            match token {
  348|   221k|                Ok(token) => {
  349|   221k|                    let (event, error) = self.apply_new_token(token);
  350|   221k|                    let error = error.map(|e| {
  351|       |                        self.lexer.syntax_error(
  352|       |                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|       |                            e,
  354|       |                        )
  355|   221k|                    });
  356|   221k|                    if let Some(error) = error {
  357|  1.26k|                        self.buffered_event = event.map(owned_event);
  358|  1.26k|                        return LowLevelJsonReaderResult {
  359|  1.26k|                            consumed_bytes,
  360|  1.26k|                            event: Some(Err(error)),
  361|  1.26k|                        };
  362|   220k|                    }
  363|   220k|                    if let Some(event) = event {
  364|   140k|                        return LowLevelJsonReaderResult {
  365|   140k|                            consumed_bytes,
  366|   140k|                            event: Some(Ok(event)),
  367|   140k|                        };
  368|  79.2k|                    }
  369|       |                }
  370|    946|                Err(error) => {
  371|    946|                    return LowLevelJsonReaderResult {
  372|    946|                        consumed_bytes,
  373|    946|                        event: Some(Err(error)),
  374|    946|                    }
  375|       |                }
  376|       |            }
  377|       |        }
  378|       |        LowLevelJsonReaderResult {
  379|  15.5k|            consumed_bytes: (self.lexer.file_offset - start_file_offset)
  380|  15.5k|                .try_into()
  381|  15.5k|                .unwrap(),
  382|  15.5k|            event: if is_ending {
  383|  3.41k|                self.buffered_event = Some(JsonEvent::Eof);
  384|  3.41k|                Some(Err(self.lexer.syntax_error(
  385|  3.41k|                    self.lexer.file_offset..self.lexer.file_offset + 1,
  386|  3.41k|                    "Unexpected end of file",
  387|  3.41k|                )))
  388|       |            } else {
  389|  12.1k|                None
  390|       |            },
  391|       |        }
  392|   158k|    }
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer13read_constant:
  891|    468|    fn read_constant(
  892|    468|        &mut self,
  893|    468|        input_buffer: &[u8],
  894|    468|        is_ending: bool,
  895|    468|        expected: &str,
  896|    468|        value: JsonToken<'static>,
  897|    468|    ) -> Option<Result<JsonToken<'static>, SyntaxError>> {
  898|    468|        if input_buffer.get(..expected.len())? == expected.as_bytes() {
  899|    355|            self.file_offset += u64::try_from(expected.len()).unwrap();
  900|    355|            return Some(Ok(value));
  901|     70|        }
  902|     70|        let ascii_chars = input_buffer
  903|     70|            .iter()
  904|     70|            .take_while(|c| c.is_ascii_alphabetic())
  905|     70|            .count();
  906|     70|        if ascii_chars == input_buffer.len() && !is_ending {
  907|     28|            return None; // We might read a bigger token
  908|     42|        }
  909|     42|        let read = max(1, ascii_chars); // We want to consume at least a byte
  910|     42|        let start_offset = self.file_offset;
  911|     42|        self.file_offset += u64::try_from(read).unwrap();
  912|     42|        Some(Err(self.syntax_error(
  913|     42|            start_offset..self.file_offset,
  914|     42|            format!("{} expected", expected),
  915|     42|        )))
  916|    468|    }
_RNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonLexer11decode_utf8:
 1014|   236k|    fn decode_utf8<'a>(
 1015|   236k|        &self,
 1016|   236k|        input_buffer: &'a [u8],
 1017|   236k|        start_position: u64,
 1018|   236k|    ) -> (Cow<'a, str>, Option<SyntaxError>) {
 1019|   236k|        match str::from_utf8(input_buffer) {
 1020|   193k|            Ok(str) => (Cow::Borrowed(str), None),
 1021|  42.6k|            Err(e) => (
 1022|  42.6k|                String::from_utf8_lossy(input_buffer),
 1023|  42.6k|                Some({
 1024|  42.6k|                    let pos = start_position + u64::try_from(e.valid_up_to()).unwrap();
 1025|  42.6k|                    self.syntax_error(pos..pos + 1, format!("Invalid UTF-8: {e}"))
 1026|  42.6k|                }),
 1027|  42.6k|            ),
 1028|       |        }
 1029|   236k|    }
_RINvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB6_9JsonLexer12syntax_errorNtNtCsdBW21Yiwikk_5alloc6string6StringEB8_:
 1031|  48.9k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  48.9k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  48.9k|        SyntaxError {
 1034|  48.9k|            location: TextPosition {
 1035|  48.9k|                line: self.file_line,
 1036|  48.9k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  48.9k|                offset: start_file_offset,
 1038|  48.9k|            }..TextPosition {
 1039|  48.9k|                line: self.file_line,
 1040|  48.9k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  48.9k|                offset: file_offset.end,
 1042|  48.9k|            },
 1043|  48.9k|            message: message.into(),
 1044|  48.9k|        }
 1045|  48.9k|    }
_RNvNtCsfypg28Pvccj_17json_event_parser4read11owned_event:
 1078|    536|fn owned_event(event: JsonEvent<'_>) -> JsonEvent<'static> {
 1079|    536|    match event {
 1080|     27|        JsonEvent::String(s) => JsonEvent::String(s.into_owned().into()),
 1081|     22|        JsonEvent::Number(n) => JsonEvent::Number(n.into_owned().into()),
 1082|     11|        JsonEvent::Boolean(b) => JsonEvent::Boolean(b),
 1083|      1|        JsonEvent::Null => JsonEvent::Null,
 1084|      1|        JsonEvent::StartArray => JsonEvent::StartArray,
 1085|      5|        JsonEvent::EndArray => JsonEvent::EndArray,
 1086|      9|        JsonEvent::StartObject => JsonEvent::StartObject,
 1087|      3|        JsonEvent::EndObject => JsonEvent::EndObject,
 1088|      0|        JsonEvent::ObjectKey(k) => JsonEvent::ObjectKey(k.into_owned().into()),
 1089|    457|        JsonEvent::Eof => JsonEvent::Eof,
 1090|       |    }
 1091|    536|}
_RNvXsl_NtCsfypg28Pvccj_17json_event_parser4readNtB5_9JsonTokenNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqB7_:
  553|   167k|#[derive(Eq, PartialEq, Clone, Debug)]
_RINvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB6_9JsonLexer12syntax_errorReEB8_:
 1031|  3.41k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  3.41k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  3.41k|        SyntaxError {
 1034|  3.41k|            location: TextPosition {
 1035|  3.41k|                line: self.file_line,
 1036|  3.41k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  3.41k|                offset: start_file_offset,
 1038|  3.41k|            }..TextPosition {
 1039|  3.41k|                line: self.file_line,
 1040|  3.41k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  3.41k|                offset: file_offset.end,
 1042|  3.41k|            },
 1043|  3.41k|            message: message.into(),
 1044|  3.41k|        }
 1045|  3.41k|    }
_RNvMs0_NtCsfypg28Pvccj_17json_event_parser4readNtB5_18LowLevelJsonReader15apply_new_token:
  394|   258k|    fn apply_new_token<'a>(
  395|   258k|        &mut self,
  396|   258k|        token: JsonToken<'a>,
  397|   258k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  398|   258k|        match self.state_stack.pop() {
  399|       |            Some(JsonState::ObjectKeyOrEnd) => {
  400|  40.5k|                if token == JsonToken::ClosingCurlyBracket {
  401|  12.7k|                    (Some(JsonEvent::EndObject), None)
  402|       |                } else {
  403|  27.8k|                    if let Err(e) = self.push_state_stack(JsonState::ObjectKey) {
  404|      0|                        return (None, Some(e));
  405|  27.8k|                    }
  406|  27.8k|                    self.apply_new_token(token)
  407|       |                }
  408|       |            }
  409|       |            Some(JsonState::ObjectKey) => {
  410|  43.0k|                if token == JsonToken::ClosingCurlyBracket {
  411|      3|                    return (Some(JsonEvent::EndObject), Some("Trailing commas are not allowed".into()));
  412|  43.0k|                }
  413|  43.0k|                if let Err(e) = self.push_state_stack(JsonState::ObjectColon) {
  414|      0|                    return (None, Some(e));
  415|  43.0k|                }
  416|  43.0k|                if let JsonToken::String(key) = token {
  417|  42.7k|                    (Some(JsonEvent::ObjectKey(key)), None)
  418|       |                } else {
  419|    288|                    (None, Some("Object keys must be strings".into()))
  420|       |                }
  421|       |            }
  422|       |            Some(JsonState::ObjectColon) => {
  423|  42.6k|                if let Err(e) = self.push_state_stack(JsonState::ObjectValue) {
  424|      0|                    return (None, Some(e));
  425|  42.6k|                }
  426|  42.6k|                if token == JsonToken::Colon {
  427|  42.5k|                    (None, None)
  428|       |                } else {
  429|     93|                    let (event, _) = self.apply_new_token(token);
  430|     93|                    (event, Some("Object keys must be strings".into()))
  431|       |                }
  432|       |            }
  433|       |            Some(JsonState::ObjectValue) => {
  434|  42.3k|                if let Err(e) = self.push_state_stack(JsonState::ObjectCommaOrEnd) {
  435|      0|                    return (None, Some(e));
  436|  42.3k|                }
  437|  42.3k|                self.apply_new_token_for_value(token)
  438|       |            }
  439|  19.1k|            Some(JsonState::ObjectCommaOrEnd) => match token {
  440|       |                JsonToken::Comma => {
  441|  15.3k|                    (None, self.push_state_stack(JsonState::ObjectKey).err())
  442|       |                }
  443|  3.37k|                JsonToken::ClosingCurlyBracket => (Some(JsonEvent::EndObject), None),
  444|    406|                _ => (None, Some("Object values must be followed by a comma to add a new value or a curly bracket to end the object".into())),
  445|       |            },
  446|       |            Some(JsonState::ArrayValueOrEnd) =>{
  447|  10.1k|                if token == JsonToken::ClosingSquareBracket {
  448|    806|                    return (Some(JsonEvent::EndArray), None);
  449|  9.33k|                }
  450|  9.33k|                if let Err(e) = self.push_state_stack(JsonState::ArrayValue) {
  451|      0|                    return (None, Some(e));
  452|  9.33k|                }
  453|  9.33k|                self.apply_new_token(token)
  454|       |            }
  455|       |            Some(JsonState::ArrayValue) => {
  456|  30.9k|                if token == JsonToken::ClosingSquareBracket {
  457|      5|                    return (Some(JsonEvent::EndArray), Some("Trailing commas are not allowed".into()));
  458|  30.8k|                }
  459|  30.8k|                if let Err(e) = self.push_state_stack(JsonState::ArrayCommaOrEnd) {
  460|      0|                    return (None, Some(e));
  461|  30.8k|                }
  462|  30.8k|                self.apply_new_token_for_value(token)
  463|       |            }
  464|  24.6k|            Some(JsonState::ArrayCommaOrEnd) => match token {
  465|       |                JsonToken::Comma => {
  466|  21.3k|                    (None, self.push_state_stack(JsonState::ArrayValue).err())
  467|       |                }
  468|  3.07k|                JsonToken::ClosingSquareBracket => (Some(JsonEvent::EndArray), None),
  469|       |                _ => {
  470|    210|                    let _ = self.push_state_stack(JsonState::ArrayValue); // We already have an error
  471|    210|                    let (event, _) = self.apply_new_token(token);
  472|    210|                    (event, Some("Array values must be followed by a comma to add a new value or a squared bracket to end the array".into()))
  473|       |                }
  474|       |            }
  475|  5.29k|            None => if self.element_read {
  476|     32|                if token == JsonToken::Eof {
  477|     29|                    (Some(JsonEvent::Eof), None)
  478|       |                } else {
  479|      3|                    (None, Some("The JSON already contains one root element".into()))
  480|       |                }
  481|       |            } else {
  482|  5.26k|                self.element_read = true;
  483|  5.26k|                self.apply_new_token_for_value(token)
  484|       |            }
  485|       |        }
  486|   258k|    }
_RNCNvMs1_NtCsfypg28Pvccj_17json_event_parser4readNtB7_9JsonLexer11read_numbers1_0B9_:
  971|  2.22k|            |c| Some(Some(*c)),

_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs9k6xcToz8Tk_13oxigraph_fuzz:
   37|    299|    pub fn finish(self) -> Result<W> {
   38|    299|        self.writer.validate_eof()?;
   39|    299|        Ok(self.write)
   40|    299|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  121|     21|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|     21|        match event {
  123|      0|            JsonEvent::String(s) => {
  124|      0|                self.before_value(&mut write)?;
  125|      0|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      3|            JsonEvent::Boolean(b) => {
  132|      3|                self.before_value(&mut write)?;
  133|      3|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|      0|                self.before_value(&mut write)?;
  141|      0|                self.state_stack.push(JsonState::OpenArray);
  142|      0|                write.write_all(b"[")
  143|       |            }
  144|      0|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|      0|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|      6|                self.before_value(&mut write)?;
  162|      6|                self.state_stack.push(JsonState::OpenObject);
  163|      6|                write.write_all(b"{")
  164|       |            }
  165|      6|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|      6|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|      6|            JsonEvent::ObjectKey(key) => {
  182|      6|                match self.state_stack.pop() {
  183|      3|                    Some(JsonState::OpenObject) => (),
  184|      3|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|      6|                self.state_stack.push(JsonState::ContinuationObject);
  193|      6|                self.state_stack.push(JsonState::ObjectValue);
  194|      6|                write_escaped_json_string(&key, &mut write)?;
  195|      6|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|     21|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  121|  16.1k|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|  16.1k|        match event {
  123|  2.08k|            JsonEvent::String(s) => {
  124|  2.08k|                self.before_value(&mut write)?;
  125|  2.08k|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      0|            JsonEvent::Boolean(b) => {
  132|      0|                self.before_value(&mut write)?;
  133|      0|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|    598|                self.before_value(&mut write)?;
  141|    598|                self.state_stack.push(JsonState::OpenArray);
  142|    598|                write.write_all(b"[")
  143|       |            }
  144|    598|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|    598|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|  5.85k|                self.before_value(&mut write)?;
  162|  5.85k|                self.state_stack.push(JsonState::OpenObject);
  163|  5.85k|                write.write_all(b"{")
  164|       |            }
  165|  5.85k|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|  5.85k|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|  1.19k|            JsonEvent::ObjectKey(key) => {
  182|  1.19k|                match self.state_stack.pop() {
  183|    897|                    Some(JsonState::OpenObject) => (),
  184|    299|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|  1.19k|                self.state_stack.push(JsonState::ContinuationObject);
  193|  1.19k|                self.state_stack.push(JsonState::ObjectValue);
  194|  1.19k|                write_escaped_json_string(&key, &mut write)?;
  195|  1.19k|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|  16.1k|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  204|  8.53k|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|  8.53k|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|    549|                self.state_stack.push(JsonState::ContinuationArray);
  208|    549|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|  6.48k|                self.state_stack.push(JsonState::ContinuationArray);
  212|  6.48k|                write.write_all(b",")?;
  213|  6.48k|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|  1.19k|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|    299|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|    299|                    self.element_written = true;
  232|    299|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|  8.53k|    }
_RINvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  204|      9|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|      9|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|      0|                self.state_stack.push(JsonState::ContinuationArray);
  208|      0|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|      0|                self.state_stack.push(JsonState::ContinuationArray);
  212|      0|                write.write_all(b",")?;
  213|      0|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|      6|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|      3|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|      3|                    self.element_written = true;
  232|      3|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|      9|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsdBW21Yiwikk_5alloc3vec3VechEE11write_eventCs9k6xcToz8Tk_13oxigraph_fuzz:
   33|     21|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|     21|        self.writer.write_event(event, &mut self.write)
   35|     21|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsdBW21Yiwikk_5alloc3vec3VechEE3newCs9k6xcToz8Tk_13oxigraph_fuzz:
   26|      3|    pub const fn new(write: W) -> Self {
   27|      3|        Self {
   28|      3|            write,
   29|      3|            writer: LowLevelJsonWriter::new(),
   30|      3|        }
   31|      3|    }
_RINvNtCsfypg28Pvccj_17json_event_parser5write25write_escaped_json_stringQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  263|  2.08k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  2.08k|    write.write_all(b"\"")?;
  265|  2.08k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  12.7k|    for c in s.chars() {
  267|  12.7k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  12.7k|            c => {
  271|  12.7k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  12.7k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  2.08k|    write.write_all(b"\"")?;
  295|  2.08k|    Ok(())
  296|  2.08k|}
_RINvNtCsfypg28Pvccj_17json_event_parser5write25write_escaped_json_stringQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  263|  1.19k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  1.19k|    write.write_all(b"\"")?;
  265|  1.19k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  6.87k|    for c in s.chars() {
  267|  6.87k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  6.87k|            c => {
  271|  6.87k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  6.87k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  1.19k|    write.write_all(b"\"")?;
  295|  1.19k|    Ok(())
  296|  1.19k|}
_RINvNtCsfypg28Pvccj_17json_event_parser5write25write_escaped_json_stringQQQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  263|      6|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|      6|    write.write_all(b"\"")?;
  265|      6|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|     33|    for c in s.chars() {
  267|     33|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|     33|            c => {
  271|     33|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|     33|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|      6|    write.write_all(b"\"")?;
  295|      6|    Ok(())
  296|      6|}
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE3newCs9k6xcToz8Tk_13oxigraph_fuzz:
   26|    299|    pub const fn new(write: W) -> Self {
   27|    299|        Self {
   28|    299|            write,
   29|    299|            writer: LowLevelJsonWriter::new(),
   30|    299|        }
   31|    299|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs9k6xcToz8Tk_13oxigraph_fuzz:
   37|      3|    pub fn finish(self) -> Result<W> {
   38|      3|        self.writer.validate_eof()?;
   39|      3|        Ok(self.write)
   40|      3|    }
_RNvMNtCsfypg28Pvccj_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE11write_eventCs9k6xcToz8Tk_13oxigraph_fuzz:
   33|  16.1k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|  16.1k|        self.writer.write_event(event, &mut self.write)
   35|  16.1k|    }
_RNvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB4_18LowLevelJsonWriter12validate_eof:
  238|    302|    fn validate_eof(&self) -> Result<()> {
  239|    302|        if !self.state_stack.is_empty() {
  240|      0|            return Err(Error::new(
  241|      0|                ErrorKind::InvalidInput,
  242|      0|                "The written JSON is not balanced: an object or an array has not been closed",
  243|      0|            ));
  244|    302|        }
  245|    302|        if !self.element_written {
  246|      0|            return Err(Error::new(
  247|      0|                ErrorKind::InvalidInput,
  248|      0|                "A JSON file can't be empty",
  249|      0|            ));
  250|    302|        }
  251|    302|        Ok(())
  252|    302|    }
_RNvMs_NtCsfypg28Pvccj_17json_event_parser5writeNtB4_18LowLevelJsonWriter3new:
  114|    302|    pub const fn new() -> Self {
  115|    302|        Self {
  116|    302|            state_stack: Vec::new(),
  117|    302|            element_written: false,
  118|    302|        }
  119|    302|    }

_RNvNvCswwb1bXrW7b_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  7.37k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  7.37k|                $body
  243|  7.37k|            }
rust_fuzzer_test_input:
  209|  7.37k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  7.37k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  7.37k|                }
  223|  7.37k|
  224|  7.37k|                __libfuzzer_sys_run(bytes);
  225|  7.37k|                0
  226|  7.37k|            }
LLVMFuzzerTestOneInput:
   58|  7.37k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  7.37k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  7.37k|    });
   63|  7.37k|
   64|  7.37k|    match test_input {
   65|  7.37k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  7.37k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs6YwqOVjEKi8_13libfuzzer_sys15test_input_wrap0B3_:
   59|  7.37k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  7.37k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  7.37k|        rust_fuzzer_test_input(data_slice)
   62|  7.37k|    });

_RNvMs2_NtCsfr4O1C3G5Ja_9once_cell3impINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE14is_initializedCs6YwqOVjEKi8_13libfuzzer_sys:
   49|  7.37k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  7.37k|        // An `Acquire` load is enough because that makes all the initialization
   51|  7.37k|        // operations visible to us, and, this being a fast path, weaker
   52|  7.37k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  7.37k|        // `SeqCst` operations on the slow path.
   54|  7.37k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  7.37k|    }

_RNvMs4_NtCsfr4O1C3G5Ja_9once_cell4syncINtB5_8OnceCellNtNtCsdBW21Yiwikk_5alloc6string6StringE3getCs6YwqOVjEKi8_13libfuzzer_sys:
  963|  7.37k|        pub fn get(&self) -> Option<&T> {
  964|  7.37k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  7.37k|                None
  969|       |            }
  970|  7.37k|        }

_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCsbrE1BkJ52QU_5oxrdf:
 1152|  1.10k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1153|  1.10k|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|  1.10k|            self.output_positions.scheme_end = 0;
 1201|  1.10k|            self.input_scheme_end = 0;
 1202|  1.10k|            if self.input.starts_with('/') {
 1203|    441|                self.input.next();
 1204|    441|                self.output.push('/');
 1205|    441|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|    664|                self.output_positions.authority_end = 0;
 1208|    664|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|  1.10k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCsbrE1BkJ52QU_5oxrdf:
 1344|  3.77k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  17.7k|        loop {
 1346|  17.7k|            let c = self.input.next();
 1347|  17.7k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  5.05k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  5.05k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  5.05k|                    } else if c == Some('/') {
 1357|  1.32k|                        self.output.push('/');
 1358|  3.72k|                    }
 1359|       |
 1360|  5.05k|                    if c == Some('?') {
 1361|    499|                        self.output_positions.path_end = self.output.len();
 1362|    499|                        self.output.push('?');
 1363|    499|                        return self.parse_query();
 1364|  4.55k|                    } else if c == Some('#') {
 1365|    514|                        self.output_positions.path_end = self.output.len();
 1366|    514|                        self.output_positions.query_end = self.output.len();
 1367|    514|                        self.output.push('#');
 1368|    514|                        return self.parse_fragment();
 1369|  4.04k|                    } else if c == None {
 1370|  2.71k|                        self.output_positions.path_end = self.output.len();
 1371|  2.71k|                        self.output_positions.query_end = self.output.len();
 1372|  2.71k|                        return Ok(());
 1373|  1.32k|                    }
 1374|       |                }
 1375|  12.7k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  3.77k|    }
_RINvMs11_Cs72NQLJxIjgJ_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECsbrE1BkJ52QU_5oxrdf:
 1454|    242|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|    242|        Err(IriParseError { kind })
 1456|    242|    }
_RNvXsV_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringEINtNtCsl2lhD68vXAd_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsbrE1BkJ52QU_5oxrdf:
  871|  5.07k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  5.07k|        if iri.is_absolute() {
  873|  4.19k|            Ok(Self(iri))
  874|       |        } else {
  875|    880|            Err(IriParseError {
  876|    880|                kind: IriParseErrorKind::NoScheme,
  877|    880|            })
  878|       |        }
  879|  5.07k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCsbrE1BkJ52QU_5oxrdf:
 1101|  5.31k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1102|  5.31k|        match self.input.front() {
 1103|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|  5.31k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|    955|            _ => self.parse_relative(),
 1106|       |        }
 1107|  5.31k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCsbrE1BkJ52QU_5oxrdf:
 1255|  2.43k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|  2.43k|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|    137|            let start_position = self.input.position;
 1259|  14.8k|            while let Some(c) = self.input.next() {
 1260|  14.7k|                self.output.push(c);
 1261|  14.7k|                if c == ']' {
 1262|      3|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      3|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      3|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  14.7k|                }
 1280|       |            }
 1281|    134|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  8.20k|            loop {
 1285|  8.20k|                let c = self.input.next();
 1286|  8.20k|                match c {
 1287|       |                    Some(':') => {
 1288|  1.20k|                        self.output.push(':');
 1289|  1.20k|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|  1.09k|                        self.output_positions.authority_end = self.output.len();
 1293|  1.09k|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  5.90k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|  2.43k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCsbrE1BkJ52QU_5oxrdf:
 1315|  2.27k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|  2.27k|        match c {
 1317|       |            None => {
 1318|    758|                self.output_positions.path_end = self.output.len();
 1319|    758|                self.output_positions.query_end = self.output.len();
 1320|    758|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|    117|                self.output_positions.path_end = self.output.len();
 1324|    117|                self.output.push('?');
 1325|    117|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|    496|                self.output_positions.path_end = self.output.len();
 1329|    496|                self.output_positions.query_end = self.output.len();
 1330|    496|                self.output.push('#');
 1331|    496|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|    900|                self.output.push('/');
 1335|    900|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|  2.27k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1422|  11.9k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  11.9k|        if c == '%' {
 1424|    205|            self.read_echar()
 1425|  11.7k|        } else if is_url_query_code_point(c) {
 1426|  11.7k|            self.output.push(c);
 1427|  11.7k|            Ok(())
 1428|       |        } else {
 1429|     16|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  11.9k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCsbrE1BkJ52QU_5oxrdf:
 1434|  1.82k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  1.82k|        let c1 = self.input.next();
 1436|  1.82k|        let c2 = self.input.next();
 1437|  1.82k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.78k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.77k|            self.output.push('%');
 1441|  1.77k|            self.output.push(c1.unwrap());
 1442|  1.77k|            self.output.push(c2.unwrap());
 1443|  1.77k|            Ok(())
 1444|       |        } else {
 1445|     56|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|     56|                Some('%'),
 1447|     56|                c1,
 1448|     56|                c2,
 1449|     56|            ]))
 1450|       |        }
 1451|  1.82k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCsbrE1BkJ52QU_5oxrdf:
 1076|  5.31k|    fn parse(
 1077|  5.31k|        iri: &'a str,
 1078|  5.31k|        base: Option<IriRef<&'a str>>,
 1079|  5.31k|        output: &'a mut O,
 1080|  5.31k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  5.31k|        let mut parser = Self {
 1082|  5.31k|            iri,
 1083|  5.31k|            base,
 1084|  5.31k|            input: ParserInput {
 1085|  5.31k|                value: iri.chars(),
 1086|  5.31k|                position: 0,
 1087|  5.31k|            },
 1088|  5.31k|            output,
 1089|  5.31k|            output_positions: IriElementsPositions {
 1090|  5.31k|                scheme_end: 0,
 1091|  5.31k|                authority_end: 0,
 1092|  5.31k|                path_end: 0,
 1093|  5.31k|                query_end: 0,
 1094|  5.31k|            },
 1095|  5.31k|            input_scheme_end: 0,
 1096|  5.31k|        };
 1097|  5.31k|        parser.parse_scheme_start()?;
 1098|  5.07k|        Ok(parser.output_positions)
 1099|  5.31k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCsbrE1BkJ52QU_5oxrdf:
 1394|  1.03k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  10.5k|        while let Some(c) = self.input.next() {
 1396|  9.50k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|  1.02k|        Ok(())
 1399|  1.03k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCsbrE1BkJ52QU_5oxrdf:
 1109|  4.36k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  13.9k|        loop {
 1111|  13.9k|            let c = self.input.next();
 1112|  13.9k|            match c {
 1113|  13.9k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  9.62k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|  4.21k|                    self.output.push(':');
 1118|  4.21k|                    self.output_positions.scheme_end = self.output.len();
 1119|  4.21k|                    self.input_scheme_end = self.input.position;
 1120|  4.21k|                    return if self.input.starts_with('/') {
 1121|  2.54k|                        self.input.next();
 1122|  2.54k|                        self.output.push('/');
 1123|  2.54k|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|  1.66k|                        self.output_positions.authority_end = self.output.len();
 1126|  1.66k|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|    150|                    self.input = ParserInput {
 1131|    150|                        value: self.iri.chars(),
 1132|    150|                        position: 0,
 1133|    150|                    }; // reset
 1134|    150|                    self.output.clear();
 1135|    150|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|  4.36k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
  501|  5.31k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  502|  5.31k|        IriRef::parse(iri)?.try_into()
  503|  5.31k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCsbrE1BkJ52QU_5oxrdf:
 1141|  2.98k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|  2.98k|        if self.input.starts_with('/') {
 1143|  2.43k|            self.input.next();
 1144|  2.43k|            self.output.push('/');
 1145|  2.43k|            self.parse_authority()
 1146|       |        } else {
 1147|    547|            self.output_positions.authority_end = self.output.len() - 1;
 1148|    547|            self.parse_path()
 1149|       |        }
 1150|  2.98k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE5parseCsbrE1BkJ52QU_5oxrdf:
   55|  5.31k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  5.31k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  5.07k|        Ok(Self { iri, positions })
   58|  5.31k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE11is_absoluteCsbrE1BkJ52QU_5oxrdf:
  146|  5.07k|    pub fn is_absolute(&self) -> bool {
  147|  5.07k|        self.positions.scheme_end != 0
  148|  5.07k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0CsbrE1BkJ52QU_5oxrdf:
 1438|  1.77k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCsbrE1BkJ52QU_5oxrdf:
 1380|    616|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  12.5k|        while let Some(c) = self.input.next() {
 1382|  11.9k|            if c == '#' {
 1383|     22|                self.output_positions.query_end = self.output.len();
 1384|     22|                self.output.push('#');
 1385|     22|                return self.parse_fragment();
 1386|       |            } else {
 1387|  11.9k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    577|        self.output_positions.query_end = self.output.len();
 1391|    577|        Ok(())
 1392|    616|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCsbrE1BkJ52QU_5oxrdf:
 1231|  2.43k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  9.87k|        loop {
 1234|  9.87k|            let c = self.input.next();
 1235|  9.87k|            match c {
 1236|       |                Some('@') => {
 1237|     11|                    self.output.push('@');
 1238|     11|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|  2.42k|                    self.input = ParserInput {
 1242|  2.42k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|  2.42k|                        position: self.input_scheme_end + 2,
 1244|  2.42k|                    };
 1245|  2.42k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|  2.42k|                    return self.parse_host();
 1247|       |                }
 1248|  7.44k|                Some(c) => {
 1249|  7.44k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|  2.43k|    }
_RNvMsp_Cs72NQLJxIjgJ_5oxiriINtB5_3IriNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  568|  4.19k|    pub fn into_inner(self) -> T {
  569|  4.19k|        self.0.into_inner()
  570|  4.19k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCsbrE1BkJ52QU_5oxrdf:
 1301|  1.20k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|  1.50k|        loop {
 1303|  1.50k|            let c = self.input.next();
 1304|  1.12k|            match c {
 1305|  1.12k|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|  1.17k|                    self.output_positions.authority_end = self.output.len();
 1308|  1.17k|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     25|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|  1.20k|    }
_RNvMCs72NQLJxIjgJ_5oxiriINtB2_6IriRefNtNtCsdBW21Yiwikk_5alloc6string6StringE10into_innerCsbrE1BkJ52QU_5oxrdf:
  132|  4.19k|    pub fn into_inner(self) -> T {
  133|  4.19k|        self.iri
  134|  4.19k|    }
_RNvMs11_Cs72NQLJxIjgJ_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCsbrE1BkJ52QU_5oxrdf:
 1410|  35.5k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  35.5k|        if c == '%' {
 1412|  1.62k|            self.read_echar()
 1413|  33.9k|        } else if is_url_code_point(c) {
 1414|  33.9k|            self.output.push(c);
 1415|  33.9k|            Ok(())
 1416|       |        } else {
 1417|      7|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  35.5k|    }
_RNCNvMs11_Cs72NQLJxIjgJ_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0CsbrE1BkJ52QU_5oxrdf:
 1437|  1.81k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput5frontCsbrE1BkJ52QU_5oxrdf:
 1053|  5.31k|    fn front(&self) -> Option<char> {
 1054|  5.31k|        self.value.clone().next()
 1055|  5.31k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsbrE1BkJ52QU_5oxrdf:
  985|    150|    fn clear(&mut self) {
  986|    150|        self.len = 0;
  987|    150|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput11starts_withCsbrE1BkJ52QU_5oxrdf:
 1058|  10.7k|    fn starts_with(&self, c: char) -> bool {
 1059|  10.7k|        self.value.as_str().starts_with(c)
 1060|  10.7k|    }
_RNvXs1b_Cs72NQLJxIjgJ_5oxiriNtB6_16VoidOutputBufferNtNtCsl2lhD68vXAd_4core7default7Default7defaultCsbrE1BkJ52QU_5oxrdf:
  968|  5.31k|#[derive(Default)]
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsbrE1BkJ52QU_5oxrdf:
  990|  2.42k|    fn truncate(&mut self, new_len: usize) {
  991|  2.42k|        self.len = new_len;
  992|  2.42k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsbrE1BkJ52QU_5oxrdf:
  995|  18.8k|    fn len(&self) -> usize {
  996|  18.8k|        self.len
  997|  18.8k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsbrE1BkJ52QU_5oxrdf:
 1000|  10.1k|    fn as_str(&self) -> &str {
 1001|  10.1k|        ""
 1002|  10.1k|    }
_RNvXsY_Cs72NQLJxIjgJ_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsbrE1BkJ52QU_5oxrdf:
  975|  90.3k|    fn push(&mut self, c: char) {
  976|  90.3k|        self.len += c.len_utf8();
  977|  90.3k|    }
_RNvMs10_Cs72NQLJxIjgJ_5oxiriNtB6_11ParserInput4nextCsbrE1BkJ52QU_5oxrdf:
 1043|  98.3k|    fn next(&mut self) -> Option<char> {
 1044|  98.3k|        if let Some(head) = self.value.next() {
 1045|  92.3k|            self.position += head.len_utf8();
 1046|  92.3k|            Some(head)
 1047|       |        } else {
 1048|  6.06k|            None
 1049|       |        }
 1050|  98.3k|    }
_RNvCs72NQLJxIjgJ_5oxiri17is_url_code_point:
 1459|  45.6k|fn is_url_code_point(c: char) -> bool {
 1460|  45.6k|    matches!(c,
 1461|  16.0k|        'a'..='z'
 1462|  20.5k|        | 'A'..='Z'
 1463|  18.8k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  8.42k|        | '\u{A0}'..='\u{D7FF}'
 1484|  4.99k|        | '\u{F900}'..='\u{FDCF}'
 1485|  4.99k|        | '\u{FDF0}'..='\u{FFEF}'
 1486|  4.99k|        | '\u{10000}'..='\u{1FFFD}'
 1487|  4.99k|        | '\u{20000}'..='\u{2FFFD}'
 1488|  4.99k|        | '\u{30000}'..='\u{3FFFD}'
 1489|  4.99k|        | '\u{40000}'..='\u{4FFFD}'
 1490|    173|        | '\u{50000}'..='\u{5FFFD}'
 1491|    146|        | '\u{60000}'..='\u{6FFFD}'
 1492|     71|        | '\u{70000}'..='\u{7FFFD}'
 1493|     59|        | '\u{80000}'..='\u{8FFFD}'
 1494|     59|        | '\u{90000}'..='\u{9FFFD}'
 1495|     59|        | '\u{A0000}'..='\u{AFFFD}'
 1496|     59|        | '\u{B0000}'..='\u{BFFFD}'
 1497|     59|        | '\u{C0000}'..='\u{CFFFD}'
 1498|     39|        | '\u{D0000}'..='\u{DFFFD}'
 1499|     39|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  45.6k|}
_RNvXsW_Cs72NQLJxIjgJ_5oxiriNtB5_13IriParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmt:
  906|  1.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|  1.12k|        match &self.kind {
  908|    881|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|    134|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|    134|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|      3|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|     25|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|     23|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|     23|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|     56|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|     56|                f,
  919|     56|                "Invalid IRI percent encoding '{}'",
  920|     56|                cs.iter().flatten().cloned().collect::<String>()
  921|     56|            ),
  922|       |        }
  923|  1.12k|    }
_RNvCs72NQLJxIjgJ_5oxiri23is_url_query_code_point:
 1503|  11.7k|fn is_url_query_code_point(c: char) -> bool {
 1504|  11.7k|    is_url_code_point(c)
 1505|    196|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  11.7k|}

_RNvNtCs9k6xcToz8Tk_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  7.37k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  7.37k|    let parser = QueryResultsParser::from_format(format);
    8|  7.37k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  7.37k|    let Ok(reader) = parser.parse_read(data) else {
   11|  6.99k|        return;
   12|       |    };
   13|    385|    match reader {
   14|    382|        FromReadQueryResultsReader::Solutions(solutions) => {
   15|    382|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|     83|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|    299|            let mut writer = serializer
   21|    299|                .serialize_solutions_to_write(
   22|    299|                    Vec::new(),
   23|    299|                    solutions
   24|    299|                        .get(0)
   25|    299|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|    299|                )
   27|    299|                .unwrap();
   28|  5.25k|            for solution in &solutions {
   29|  4.95k|                writer.write(solution).unwrap();
   30|  4.95k|            }
   31|    299|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|    299|            if let FromReadQueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|    299|                .parse_read(serialized.as_bytes())
   36|    299|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|    299|                .unwrap()
   38|       |            {
   39|    299|                assert_eq!(
   40|    299|                    roundtrip_solutions
   41|    299|                        .collect::<Result<Vec<_>, _>>()
   42|    299|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|    299|                        .unwrap(),
   44|    299|                    solutions
   45|    299|                )
   46|      0|            }
   47|       |        }
   48|      3|        FromReadQueryResultsReader::Boolean(value) => {
   49|      3|            // We try to write again
   50|      3|            let mut serialized = Vec::new();
   51|      3|            serializer
   52|      3|                .serialize_boolean_to_write(&mut serialized, value)
   53|      3|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      3|            if let FromReadQueryResultsReader::Boolean(roundtrip_value) =
   57|      3|                parser.parse_read(serialized.as_slice()).unwrap()
   58|       |            {
   59|      3|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  7.37k|}
_RNCNvNtCs9k6xcToz8Tk_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|    291|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCs9k6xcToz8Tk_13oxigraph_fuzz:
   29|  4.19k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  4.19k|        Self::new_unchecked(iri.into_inner())
   31|  4.19k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCsdBW21Yiwikk_5alloc6borrow3CoweEECs9k6xcToz8Tk_13oxigraph_fuzz:
   24|  5.31k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  5.31k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  5.31k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   39|  4.19k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  4.19k|        Self { iri: iri.into() }
   41|  4.19k|    }

_RNvXs_NtCsbrE1BkJ52QU_5oxrdf8variableNtB4_8VariableNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9k6xcToz8Tk_13oxigraph_fuzz:
   61|     27|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|     27|        self.as_ref().fmt(f)
   63|     27|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_strCs9k6xcToz8Tk_13oxigraph_fuzz:
   44|  5.92k|    pub fn as_str(&self) -> &str {
   45|  5.92k|        &self.name
   46|  5.92k|    }
_RNvXsd_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9k6xcToz8Tk_13oxigraph_fuzz:
   17|  77.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_8VariableNtNtCsl2lhD68vXAd_4core5clone5Clone5cloneCs9k6xcToz8Tk_13oxigraph_fuzz:
   17|  2.08k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_refCs9k6xcToz8Tk_13oxigraph_fuzz:
   54|     27|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|     27|        VariableRef { name: &self.name }
   56|     27|    }
_RNvXs1_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_11VariableRefNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9k6xcToz8Tk_13oxigraph_fuzz:
  123|     27|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|     27|        write!(f, "?{}", self.name)
  125|     27|    }
_RNvXs8_NtCsbrE1BkJ52QU_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCsl2lhD68vXAd_4core3fmt7Display3fmtCs9k6xcToz8Tk_13oxigraph_fuzz:
  226|     31|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     31|        write!(f, "The variable name is invalid")
  228|     31|    }
_RNvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB2_8Variable6as_strCsbBgSuRnHgd0_10sparesults:
   44|  2.08k|    pub fn as_str(&self) -> &str {
   45|  2.08k|        &self.name
   46|  2.08k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsdBW21Yiwikk_5alloc6string6StringEB5_:
   39|  10.4k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  10.4k|        Self { name: name.into() }
   41|  10.4k|    }
_RINvMNtCsbrE1BkJ52QU_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  10.4k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  10.4k|        let name = name.into();
   28|  10.4k|        validate_variable_identifier(&name)?;
   29|  10.4k|        Ok(Self::new_unchecked(name))
   30|  10.4k|    }
_RNvNtCsbrE1BkJ52QU_5oxrdf8variable28validate_variable_identifier:
  170|  10.4k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  10.4k|    let mut chars = id.chars();
  172|  10.4k|    let front = chars.next().ok_or(VariableNameParseError)?;
  173|  10.4k|    match front {
  174|  10.4k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  9.50k|        | 'A'..='Z'
  178|  6.42k|        | 'a'..='z'
  179|    287|        | '\u{00C0}'..='\u{00D6}'
  180|    287|        | '\u{00D8}'..='\u{00F6}'
  181|    287|        | '\u{00F8}'..='\u{02FF}'
  182|    249|        | '\u{0370}'..='\u{037D}'
  183|    249|        | '\u{037F}'..='\u{1FFF}'
  184|    187|        | '\u{200C}'..='\u{200D}'
  185|    187|        | '\u{2070}'..='\u{218F}'
  186|    187|        | '\u{2C00}'..='\u{2FEF}'
  187|    187|        | '\u{3001}'..='\u{D7FF}'
  188|    142|        | '\u{F900}'..='\u{FDCF}'
  189|    142|        | '\u{FDF0}'..='\u{FFFD}'
  190|  10.4k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      6|        _ => return Err(VariableNameParseError),
  192|       |    }
  193|  41.8k|    for c in chars {
  194|  31.4k|        match c {
  195|  31.3k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|  3.80k|            | '\u{00300}'..='\u{036F}'
  198|  2.18k|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  25.4k|            | 'A'..='Z'
  201|  17.2k|            | 'a'..='z'
  202|  4.00k|            | '\u{00C0}'..='\u{00D6}'
  203|  4.00k|            | '\u{00D8}'..='\u{00F6}'
  204|  4.00k|            | '\u{00F8}'..='\u{02FF}'
  205|  3.80k|            | '\u{0370}'..='\u{037D}'
  206|  3.80k|            | '\u{037F}'..='\u{1FFF}'
  207|  2.18k|            | '\u{200C}'..='\u{200D}'
  208|  2.18k|            | '\u{2070}'..='\u{218F}'
  209|  2.17k|            | '\u{2C00}'..='\u{2FEF}'
  210|  2.17k|            | '\u{3001}'..='\u{D7FF}'
  211|  1.64k|            | '\u{F900}'..='\u{FDCF}'
  212|  1.64k|            | '\u{FDF0}'..='\u{FFFD}'
  213|  31.3k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|     20|            _ => return Err(VariableNameParseError),
  215|       |        }
  216|       |    }
  217|  10.4k|    Ok(())
  218|  10.4k|}

_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsdBW21Yiwikk_5alloc6string6StringECs9k6xcToz8Tk_13oxigraph_fuzz:
  108|  1.27k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|  1.27k|        Self {
  110|  1.27k|            inner: SyntaxErrorKind::Msg {
  111|  1.27k|                msg: msg.into(),
  112|  1.27k|                location: None,
  113|  1.27k|            },
  114|  1.27k|        }
  115|  1.27k|    }
_RINvMs5_NtCsbBgSuRnHgd0_10sparesults5errorNtB6_11SyntaxError3msgReECs9k6xcToz8Tk_13oxigraph_fuzz:
  108|    175|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
  109|    175|        Self {
  110|    175|            inner: SyntaxErrorKind::Msg {
  111|    175|                msg: msg.into(),
  112|    175|                location: None,
  113|    175|            },
  114|    175|        }
  115|    175|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromCs9k6xcToz8Tk_13oxigraph_fuzz:
   45|  1.17k|    fn from(error: SyntaxError) -> Self {
   46|  1.17k|        Self::Syntax(error)
   47|  1.17k|    }
_RNvXs3_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsfypg28Pvccj_17json_event_parser4read10ParseErrorE4from:
   61|  5.62k|    fn from(error: json_event_parser::ParseError) -> Self {
   62|  5.62k|        match error {
   63|  5.62k|            json_event_parser::ParseError::Syntax(error) => SyntaxError::from(error).into(),
   64|      0|            json_event_parser::ParseError::Io(error) => error.into(),
   65|       |        }
   66|  5.62k|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_10ParseErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtB5_11SyntaxErrorE4fromB7_:
   45|  5.89k|    fn from(error: SyntaxError) -> Self {
   46|  5.89k|        Self::Syntax(error)
   47|  5.89k|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults5errorNtB5_11SyntaxErrorINtNtCsl2lhD68vXAd_4core7convert4FromNtNtCsfypg28Pvccj_17json_event_parser4read11SyntaxErrorE4from:
  203|  5.62k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  204|  5.62k|        Self {
  205|  5.62k|            inner: SyntaxErrorKind::Json(error),
  206|  5.62k|        }
  207|  5.62k|    }

_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs5_0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  574|      2|                            match subject.ok_or_else(|| {
  575|      2|                                SyntaxError::msg("triple serialization should have a 'subject' key")
  576|      2|                            })? {
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json9read_headRShE0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  628|     31|                                let new_var = Variable::new(s.as_ref()).map_err(|e| {
  629|     31|                                    SyntaxError::msg(format!(
  630|     31|                                        "Invalid variable declaration '{s}': {e}"
  631|     31|                                    ))
  632|     31|                                })?;
_RINvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB3_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB36_22ToWriteSolutionsWriterB18_E5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB48_6triple4TermRNtB2E_13QuerySolutionE0EECs9k6xcToz8Tk_13oxigraph_fuzz:
   66|  4.95k|    pub fn write<'a>(
   67|  4.95k|        &mut self,
   68|  4.95k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   69|  4.95k|    ) -> io::Result<()> {
   70|  4.95k|        let mut buffer = Vec::with_capacity(48);
   71|  4.95k|        self.inner.write(&mut buffer, solution);
   72|  4.95k|        Self::do_write(&mut self.writer, buffer)
   73|  4.95k|    }
_RNCNvMs1_NtCsbBgSuRnHgd0_10sparesults4jsonINtB7_19JsonSolutionsReaderRShE9read_next0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  385|     16|                            let k = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  386|     16|                                SyntaxError::msg(format!(
  387|     16|                                    "The variable {key} has not been defined in the header"
  388|     16|                                ))
  389|     16|                            })?;
_RINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShECs9k6xcToz8Tk_13oxigraph_fuzz:
  416|  4.45k|fn read_value<R: Read>(
  417|  4.45k|    reader: &mut FromReadJsonReader<R>,
  418|  4.45k|    number_of_recursive_calls: usize,
  419|  4.45k|) -> Result<Term, ParseError> {
  420|  4.45k|    enum Type {
  421|  4.45k|        Uri,
  422|  4.45k|        BNode,
  423|  4.45k|        Literal,
  424|  4.45k|        #[cfg(feature = "rdf-star")]
  425|  4.45k|        Triple,
  426|  4.45k|    }
  427|  4.45k|    #[derive(Eq, PartialEq)]
  428|  4.45k|    enum State {
  429|  4.45k|        Type,
  430|  4.45k|        Value,
  431|  4.45k|        Lang,
  432|  4.45k|        Datatype,
  433|  4.45k|    }
  434|  4.45k|
  435|  4.45k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  436|      1|        return Err(SyntaxError::msg(format!(
  437|      1|            "Too many nested triples ({MAX_NUMBER_OF_NESTED_TRIPLES}). The parser fails here to avoid a stack overflow."
  438|      1|        ))
  439|      1|            .into());
  440|  4.45k|    }
  441|  4.45k|    let mut state = None;
  442|  4.45k|    let mut t = None;
  443|  4.45k|    let mut value = None;
  444|  4.45k|    let mut lang = None;
  445|  4.45k|    let mut datatype = None;
  446|  4.45k|    #[cfg(feature = "rdf-star")]
  447|  4.45k|    let mut subject = None;
  448|  4.45k|    #[cfg(feature = "rdf-star")]
  449|  4.45k|    let mut predicate = None;
  450|  4.45k|    #[cfg(feature = "rdf-star")]
  451|  4.45k|    let mut object = None;
  452|  4.45k|    if reader.read_next_event()? != JsonEvent::StartObject {
  453|     12|        return Err(SyntaxError::msg("Term serializations should be an object").into());
  454|  4.37k|    }
  455|       |    loop {
  456|       |        #[allow(unsafe_code)]
  457|       |        // SAFETY: Borrow checker workaround https://github.com/rust-lang/rust/issues/70255
  458|  14.9k|        let next_event = unsafe {
  459|  15.3k|            let r: *mut FromReadJsonReader<R> = reader;
  460|  15.3k|            &mut *r
  461|  15.3k|        }
  462|  15.3k|        .read_next_event()?;
  463|  14.9k|        match next_event {
  464|  8.88k|            JsonEvent::ObjectKey(key) => match key.as_ref() {
  465|  8.88k|                "type" => state = Some(State::Type),
  466|  8.76k|                "value" => state = Some(State::Value),
  467|  8.41k|                "xml:lang" => state = Some(State::Lang),
  468|  8.19k|                "datatype" => state = Some(State::Datatype),
  469|       |                #[cfg(feature = "rdf-star")]
  470|  2.79k|                "subject" => subject = Some(read_value(reader, number_of_recursive_calls + 1)?),
  471|       |                #[cfg(feature = "rdf-star")]
  472|  2.70k|                "predicate" => predicate = Some(read_value(reader, number_of_recursive_calls + 1)?),
  473|       |                #[cfg(feature = "rdf-star")]
  474|    118|                "object" => object = Some(read_value(reader, number_of_recursive_calls + 1)?),
  475|       |                _ => {
  476|     38|                    return Err(SyntaxError::msg(format!(
  477|     38|                        "Unexpected key in term serialization: '{key}'"
  478|     38|                    ))
  479|     38|                    .into())
  480|       |                }
  481|       |            },
  482|       |            JsonEvent::StartObject => {
  483|     72|                if state != Some(State::Value) {
  484|      4|                    return Err(
  485|      4|                        SyntaxError::msg("Unexpected nested object in term serialization").into(),
  486|      4|                    );
  487|     68|                }
  488|       |            }
  489|  5.92k|            JsonEvent::String(s) => match state {
  490|       |                Some(State::Type) => {
  491|    121|                    match s.as_ref() {
  492|    121|                        "uri" => t = Some(Type::Uri),
  493|     97|                        "bnode" => t = Some(Type::BNode),
  494|     75|                        "literal" | "typed-literal" => t = Some(Type::Literal),
  495|       |                        #[cfg(feature = "rdf-star")]
  496|     42|                        "triple" => t = Some(Type::Triple),
  497|       |                        _ => {
  498|     15|                            return Err(
  499|     15|                                SyntaxError::msg(format!("Unexpected term type: '{s}'")).into()
  500|     15|                            )
  501|       |                        }
  502|       |                    };
  503|    106|                    state = None;
  504|       |                }
  505|    267|                Some(State::Value) => {
  506|    267|                    value = Some(s.into_owned());
  507|    267|                    state = None;
  508|    267|                }
  509|    218|                Some(State::Lang) => {
  510|    218|                    lang = Some(s.into_owned());
  511|    218|                    state = None;
  512|    218|                }
  513|  4.19k|                Some(State::Datatype) => {
  514|  4.19k|                    datatype = Some(
  515|  5.31k|                        NamedNode::new(s)
  516|  5.31k|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
  517|       |                    );
  518|  4.19k|                    state = None;
  519|       |                }
  520|      0|                _ => (), // impossible
  521|       |            },
  522|       |            JsonEvent::EndObject => {
  523|     43|                if let Some(s) = state {
  524|     36|                    if s == State::Value {
  525|     36|                        state = None; //End of triple
  526|     36|                    } else {
  527|      0|                        return Err(
  528|      0|                            SyntaxError::msg("Term description values should be string").into()
  529|      0|                        );
  530|       |                    }
  531|       |                } else {
  532|      6|                    return match t {
  533|      1|                        None => Err(SyntaxError::msg(
  534|      1|                            "Term serialization should have a 'type' key",
  535|      1|                        )
  536|      1|                        .into()),
  537|      1|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  538|       |                            SyntaxError::msg("uri serialization should have a 'value' key")
  539|      1|                        })?)
  540|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid uri value: {e}")))?
  541|      0|                        .into()),
  542|      1|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  543|       |                            SyntaxError::msg("bnode serialization should have a 'value' key")
  544|      1|                        })?)
  545|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid bnode value: {e}")))?
  546|      0|                        .into()),
  547|       |                        Some(Type::Literal) => {
  548|      2|                            let value = value.ok_or_else(|| {
  549|       |                                SyntaxError::msg("literal serialization should have a 'value' key")
  550|      2|                            })?;
  551|      0|                            Ok(match lang {
  552|      0|                                Some(lang) => {
  553|      0|                                    if let Some(datatype) = datatype {
  554|      0|                                        if datatype.as_ref() != rdf::LANG_STRING {
  555|      0|                                            return Err(SyntaxError::msg(format!(
  556|      0|                                                "xml:lang value '{lang}' provided with the datatype {datatype}"
  557|      0|                                            )).into())
  558|      0|                                        }
  559|      0|                                    }
  560|      0|                                    Literal::new_language_tagged_literal(value, &*lang).map_err(|e| {
  561|       |                                        SyntaxError::msg(format!("Invalid xml:lang value '{lang}': {e}"))
  562|      0|                                    })?
  563|       |                                }
  564|      0|                                None => if let Some(datatype) = datatype {
  565|      0|                                    Literal::new_typed_literal(value, datatype)
  566|       |                                } else {
  567|      0|                                    Literal::new_simple_literal(value)
  568|       |                                }
  569|       |                            }
  570|      0|                                .into())
  571|       |                        }
  572|       |                        #[cfg(feature = "rdf-star")]
  573|       |                        Some(Type::Triple) => Ok(Triple::new(
  574|      2|                            match subject.ok_or_else(|| {
  575|       |                                SyntaxError::msg("triple serialization should have a 'subject' key")
  576|      2|                            })? {
  577|      0|                                Term::NamedNode(subject) => subject.into(),
  578|      0|                                Term::BlankNode(subject) => subject.into(),
  579|      0|                                Term::Triple(subject) => Subject::Triple(subject),
  580|       |                                Term::Literal(_) => {
  581|      0|                                    return Err(SyntaxError::msg(
  582|      0|                                        "The 'subject' value should not be a literal",
  583|      0|                                    )
  584|      0|                                    .into())
  585|       |                                }
  586|       |                            },
  587|      0|                            match predicate.ok_or_else(|| {
  588|       |                                SyntaxError::msg(
  589|       |                                    "triple serialization should have a 'predicate' key",
  590|       |                                )
  591|      0|                            })? {
  592|      0|                                Term::NamedNode(predicate) => predicate,
  593|       |                                _ => {
  594|      0|                                    return Err(SyntaxError::msg(
  595|      0|                                        "The 'predicate' value should be a uri",
  596|      0|                                    )
  597|      0|                                    .into())
  598|       |                                }
  599|       |                            },
  600|      0|                            object.ok_or_else(|| {
  601|       |                                SyntaxError::msg("triple serialization should have a 'object' key")
  602|      0|                            })?,
  603|       |                        )
  604|      0|                        .into()),
  605|       |                    };
  606|       |                }
  607|       |            }
  608|      2|            _ => return Err(SyntaxError::msg("Invalid term serialization").into()),
  609|       |        }
  610|       |    }
  611|  4.45k|}
_RNvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5startCs9k6xcToz8Tk_13oxigraph_fuzz:
   58|    299|    pub fn start(write: W, variables: &[Variable]) -> io::Result<Self> {
   59|    299|        let mut writer = ToWriteJsonWriter::new(write);
   60|    299|        let mut buffer = Vec::with_capacity(48);
   61|    299|        let inner = InnerJsonSolutionsWriter::start(&mut buffer, variables);
   62|    299|        Self::do_write(&mut writer, buffer)?;
   63|    299|        Ok(Self { inner, writer })
   64|    299|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs9k6xcToz8Tk_13oxigraph_fuzz:
   75|    299|    pub fn finish(mut self) -> io::Result<W> {
   76|    299|        let mut buffer = Vec::with_capacity(4);
   77|    299|        self.inner.finish(&mut buffer);
   78|    299|        Self::do_write(&mut self.writer, buffer)?;
   79|    299|        self.writer.finish()
   80|    299|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE8do_writeCs9k6xcToz8Tk_13oxigraph_fuzz:
   82|  5.55k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   83|  21.7k|        for event in output {
   84|  16.1k|            writer.write_event(event)?;
   85|       |        }
   86|  5.55k|        Ok(())
   87|  5.55k|    }
_RNvMs1_NtCsbBgSuRnHgd0_10sparesults4jsonINtB5_19JsonSolutionsReaderRShE9read_nextCs9k6xcToz8Tk_13oxigraph_fuzz:
  375|  10.8k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  376|  10.8k|        match &mut self.kind {
  377|  10.6k|            JsonSolutionsReaderKind::Streaming { reader } => {
  378|  10.6k|                let mut new_bindings = vec![None; self.mapping.len()];
  379|       |                loop {
  380|  20.7k|                    match reader.read_next_event()? {
  381|  10.0k|                        JsonEvent::StartObject => (),
  382|  10.0k|                        JsonEvent::EndObject => return Ok(Some(new_bindings)),
  383|    583|                        JsonEvent::EndArray | JsonEvent::Eof => return Ok(None),
  384|     18|                        JsonEvent::ObjectKey(key) => {
  385|     18|                            let k = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  386|       |                                SyntaxError::msg(format!(
  387|       |                                    "The variable {key} has not been defined in the header"
  388|       |                                ))
  389|     18|                            })?;
  390|      2|                            new_bindings[k] = Some(read_value(reader, 0)?)
  391|       |                        }
  392|     18|                        _ => return Err(SyntaxError::msg("Invalid result serialization").into()),
  393|       |                    }
  394|       |                }
  395|       |            }
  396|    213|            JsonSolutionsReaderKind::Buffered { bindings } => {
  397|    213|                Ok(if let Some((variables, values)) = bindings.next() {
  398|    198|                    let mut new_bindings = vec![None; self.mapping.len()];
  399|    198|                    for (variable, value) in variables.into_iter().zip(values) {
  400|      0|                        let k = *self.mapping.get(&variable).ok_or_else(|| {
  401|       |                            SyntaxError::msg(format!(
  402|       |                                "The variable {variable} has not been defined in the header"
  403|       |                            ))
  404|      0|                        })?;
  405|      0|                        new_bindings[k] = Some(value)
  406|       |                    }
  407|    198|                    Some(new_bindings)
  408|       |                } else {
  409|     15|                    None
  410|       |                })
  411|       |            }
  412|       |        }
  413|  10.8k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults4json9read_headRShECs9k6xcToz8Tk_13oxigraph_fuzz:
  613|  3.23k|fn read_head<R: Read>(reader: &mut FromReadJsonReader<R>) -> Result<Vec<Variable>, ParseError> {
  614|  3.23k|    if reader.read_next_event()? != JsonEvent::StartObject {
  615|      4|        return Err(SyntaxError::msg("head should be an object").into());
  616|  3.20k|    }
  617|  3.20k|    let mut variables = Vec::new();
  618|       |    loop {
  619|  7.95k|        match reader.read_next_event()? {
  620|  5.39k|            JsonEvent::ObjectKey(key) => match key.as_ref() {
  621|  5.39k|                "vars" => {
  622|  1.82k|                    if reader.read_next_event()? != JsonEvent::StartArray {
  623|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  624|  1.82k|                    }
  625|       |                    loop {
  626|  12.2k|                        match reader.read_next_event()? {
  627|  10.4k|                            JsonEvent::String(s) => {
  628|  10.4k|                                let new_var = Variable::new(s.as_ref()).map_err(|e| {
  629|       |                                    SyntaxError::msg(format!(
  630|       |                                        "Invalid variable declaration '{s}': {e}"
  631|       |                                    ))
  632|  10.4k|                                })?;
  633|  10.4k|                                if variables.contains(&new_var) {
  634|     27|                                    return Err(SyntaxError::msg(format!(
  635|     27|                                        "The variable {new_var} is declared twice"
  636|     27|                                    ))
  637|     27|                                    .into());
  638|  10.3k|                                }
  639|  10.3k|                                variables.push(new_var);
  640|       |                            }
  641|  1.55k|                            JsonEvent::EndArray => break,
  642|       |                            _ => {
  643|      2|                                return Err(
  644|      2|                                    SyntaxError::msg("Variable names should be strings").into()
  645|      2|                                )
  646|       |                            }
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|  3.56k|                "link" => {
  651|    136|                    if reader.read_next_event()? != JsonEvent::StartArray {
  652|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  653|    131|                    }
  654|       |                    loop {
  655|    508|                        match reader.read_next_event()? {
  656|    377|                            JsonEvent::String(_) => (),
  657|     99|                            JsonEvent::EndArray => break,
  658|       |                            _ => {
  659|      4|                                return Err(SyntaxError::msg("Link names should be strings").into())
  660|       |                            }
  661|       |                        }
  662|       |                    }
  663|       |                }
  664|  3.42k|                _ => ignore_value(reader)?,
  665|       |            },
  666|  2.33k|            JsonEvent::EndObject => return Ok(variables),
  667|      0|            _ => return Err(SyntaxError::msg("Invalid head serialization").into()),
  668|       |        }
  669|       |    }
  670|  3.23k|}
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults4jsonINtB5_22JsonQueryResultsReaderRShE4readCs9k6xcToz8Tk_13oxigraph_fuzz:
  237|  7.67k|    pub fn read(read: R) -> Result<Self, ParseError> {
  238|  7.67k|        let mut reader = FromReadJsonReader::new(read);
  239|  7.67k|        let mut variables = None;
  240|  7.67k|        let mut buffered_bindings: Option<Vec<_>> = None;
  241|  7.67k|        let mut output_iter = None;
  242|  7.67k|
  243|  7.67k|        if reader.read_next_event()? != JsonEvent::StartObject {
  244|     94|            return Err(SyntaxError::msg("SPARQL JSON results should be an object").into());
  245|  5.13k|        }
  246|       |
  247|       |        loop {
  248|  8.51k|            let event = reader.read_next_event()?;
  249|  7.41k|            match event {
  250|  7.03k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  251|  7.03k|                    "head" => {
  252|  3.23k|                        let extracted_variables = read_head(&mut reader)?;
  253|  2.33k|                        if let Some(buffered_bindings) = buffered_bindings.take() {
  254|    457|                            let mut mapping = BTreeMap::default();
  255|  1.40k|                            for (i, var) in extracted_variables.iter().enumerate() {
  256|  1.40k|                                mapping.insert(var.as_str().to_owned(), i);
  257|  1.40k|                            }
  258|    457|                            output_iter = Some(Self::Solutions {
  259|    457|                                variables: extracted_variables,
  260|    457|                                solutions: JsonSolutionsReader {
  261|    457|                                    kind: JsonSolutionsReaderKind::Buffered {
  262|    457|                                        bindings: buffered_bindings.into_iter(),
  263|    457|                                    },
  264|    457|                                    mapping,
  265|    457|                                },
  266|    457|                            });
  267|  1.88k|                        } else {
  268|  1.88k|                            variables = Some(extracted_variables);
  269|  1.88k|                        }
  270|       |                    }
  271|  3.80k|                    "results" => {
  272|  3.77k|                        if reader.read_next_event()? != JsonEvent::StartObject {
  273|      4|                            return Err(SyntaxError::msg("'results' should be an object").into());
  274|  3.76k|                        }
  275|       |                        loop {
  276|  8.08k|                            match reader.read_next_event()? {
  277|  7.75k|                                JsonEvent::ObjectKey(k) if k == "bindings" => break, // Found
  278|  4.67k|                                JsonEvent::ObjectKey(_) => ignore_value(&mut reader)?,
  279|       |                                _ => {
  280|      5|                                    return Err(SyntaxError::msg(
  281|      5|                                        "'results' should contain a 'bindings' key",
  282|      5|                                    )
  283|      5|                                    .into())
  284|       |                                }
  285|       |                            }
  286|       |                        }
  287|  3.07k|                        if reader.read_next_event()? != JsonEvent::StartArray {
  288|      1|                            return Err(SyntaxError::msg("'bindings' should be an object").into());
  289|  3.07k|                        }
  290|  3.07k|                        if let Some(variables) = variables {
  291|    666|                            let mut mapping = BTreeMap::default();
  292|  4.51k|                            for (i, var) in variables.iter().enumerate() {
  293|  4.51k|                                mapping.insert(var.as_str().to_owned(), i);
  294|  4.51k|                            }
  295|    666|                            return Ok(Self::Solutions {
  296|    666|                                variables,
  297|    666|                                solutions: JsonSolutionsReader {
  298|    666|                                    kind: JsonSolutionsReaderKind::Streaming { reader },
  299|    666|                                    mapping,
  300|    666|                                },
  301|    666|                            });
  302|  2.41k|                        }
  303|  2.41k|                        // We buffer all results before being able to read the header
  304|  2.41k|                        let mut bindings = Vec::new();
  305|  2.41k|                        let mut variables = Vec::new();
  306|  2.41k|                        let mut values = Vec::new();
  307|       |                        loop {
  308|  6.90k|                            match reader.read_next_event()? {
  309|  3.09k|                                JsonEvent::StartObject => (),
  310|  1.40k|                                JsonEvent::EndObject => {
  311|  1.40k|                                    bindings.push((take(&mut variables), take(&mut values)));
  312|  1.40k|                                }
  313|       |                                JsonEvent::EndArray | JsonEvent::Eof => {
  314|    692|                                    buffered_bindings = Some(bindings);
  315|    692|                                    break;
  316|       |                                }
  317|  1.69k|                                JsonEvent::ObjectKey(key) => {
  318|  1.69k|                                    variables.push(key.into_owned());
  319|  1.69k|                                    values.push(read_value(&mut reader, 0)?);
  320|       |                                }
  321|       |                                _ => {
  322|      1|                                    return Err(
  323|      1|                                        SyntaxError::msg("Invalid result serialization").into()
  324|      1|                                    )
  325|       |                                }
  326|       |                            }
  327|       |                        }
  328|       |                    }
  329|     30|                    "boolean" => {
  330|      8|                        return if let JsonEvent::Boolean(v) = reader.read_next_event()? {
  331|      6|                            Ok(Self::Boolean(v))
  332|       |                        } else {
  333|      1|                            Err(SyntaxError::msg("Unexpected boolean value").into())
  334|       |                        }
  335|       |                    }
  336|       |                    _ => {
  337|     22|                        return Err(SyntaxError::msg(format!(
  338|     22|                            "Expecting head or result key, found {key}"
  339|     22|                        ))
  340|     22|                        .into());
  341|       |                    }
  342|       |                },
  343|    347|                JsonEvent::EndObject => (),
  344|       |                JsonEvent::Eof => {
  345|     29|                    return if let Some(output_iter) = output_iter {
  346|     15|                        Ok(output_iter)
  347|       |                    } else {
  348|     14|                        Err(SyntaxError::msg(
  349|     14|                            "Unexpected end of JSON object without 'results' or 'boolean' key",
  350|     14|                        )
  351|     14|                        .into())
  352|       |                    }
  353|       |                }
  354|      0|                _ => return Err(SyntaxError::msg("Invalid SPARQL results serialization").into()),
  355|       |            }
  356|       |        }
  357|  7.67k|    }
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs1_0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  542|      1|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  543|      1|                            SyntaxError::msg("bnode serialization should have a 'value' key")
  544|      1|                        })?)
_RINvMs_NtCsbBgSuRnHgd0_10sparesults4jsonNtB5_24InnerJsonSolutionsWriter5writeINtNtNtNtCsl2lhD68vXAd_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2v_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB42_6triple4TermRNtB23_13QuerySolutionE0EECs9k6xcToz8Tk_13oxigraph_fuzz:
  155|  4.95k|    fn write<'a>(
  156|  4.95k|        &self,
  157|  4.95k|        output: &mut Vec<JsonEvent<'a>>,
  158|  4.95k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  159|  4.95k|    ) {
  160|  4.95k|        output.push(JsonEvent::StartObject);
  161|  4.95k|        for (variable, value) in solution {
  162|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  163|      0|            write_json_term(output, value);
  164|      0|        }
  165|  4.95k|        output.push(JsonEvent::EndObject);
  166|  4.95k|    }
_RINvNtCsbBgSuRnHgd0_10sparesults4json25write_boolean_json_resultQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
   20|      3|pub fn write_boolean_json_result<W: Write>(write: W, value: bool) -> io::Result<W> {
   21|      3|    let mut writer = ToWriteJsonWriter::new(write);
   22|     21|    for event in inner_write_boolean_json_result(value) {
   23|     21|        writer.write_event(event)?;
   24|       |    }
   25|      3|    writer.finish()
   26|      3|}
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs3_0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  548|      2|                            let value = value.ok_or_else(|| {
  549|      2|                                SyntaxError::msg("literal serialization should have a 'value' key")
  550|      2|                            })?;
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShE0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  516|  1.12k|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
_RINvNtCsbBgSuRnHgd0_10sparesults4json12ignore_valueRShECs9k6xcToz8Tk_13oxigraph_fuzz:
  672|  8.10k|fn ignore_value<R: Read>(reader: &mut FromReadJsonReader<R>) -> Result<(), ParseError> {
  673|  8.10k|    let mut nesting = 0;
  674|       |    loop {
  675|  41.9k|        match reader.read_next_event()? {
  676|       |            JsonEvent::Boolean(_)
  677|       |            | JsonEvent::Null
  678|       |            | JsonEvent::Number(_)
  679|       |            | JsonEvent::String(_) => {
  680|  9.09k|                if nesting == 0 {
  681|  6.47k|                    return Ok(());
  682|  2.61k|                }
  683|       |            }
  684|  12.0k|            JsonEvent::ObjectKey(_) => (),
  685|  17.2k|            JsonEvent::StartArray | JsonEvent::StartObject => nesting += 1,
  686|       |            JsonEvent::EndArray | JsonEvent::EndObject => {
  687|  2.90k|                nesting -= 1;
  688|  2.90k|                if nesting == 0 {
  689|    943|                    return Ok(());
  690|  1.96k|                }
  691|       |            }
  692|      0|            JsonEvent::Eof => return Err(SyntaxError::msg("Unexpected end of file").into()),
  693|       |        }
  694|       |    }
  695|  8.10k|}
_RNCINvNtCsbBgSuRnHgd0_10sparesults4json10read_valueRShEs_0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  537|      1|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  538|      1|                            SyntaxError::msg("uri serialization should have a 'value' key")
  539|      1|                        })?)
_RNvXs1_NvNtCsbBgSuRnHgd0_10sparesults4json10read_valueNtB5_5StateNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eqCs9k6xcToz8Tk_13oxigraph_fuzz:
  427|    108|    #[derive(Eq, PartialEq)]
_RNvMs_NtCsbBgSuRnHgd0_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter5start:
  136|    299|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  137|    299|        output.push(JsonEvent::StartObject);
  138|    299|        output.push(JsonEvent::ObjectKey("head".into()));
  139|    299|        output.push(JsonEvent::StartObject);
  140|    299|        output.push(JsonEvent::ObjectKey("vars".into()));
  141|    299|        output.push(JsonEvent::StartArray);
  142|  2.38k|        for variable in variables {
  143|  2.08k|            output.push(JsonEvent::String(variable.as_str().into()));
  144|  2.08k|        }
  145|    299|        output.push(JsonEvent::EndArray);
  146|    299|        output.push(JsonEvent::EndObject);
  147|    299|        output.push(JsonEvent::ObjectKey("results".into()));
  148|    299|        output.push(JsonEvent::StartObject);
  149|    299|        output.push(JsonEvent::ObjectKey("bindings".into()));
  150|    299|        output.push(JsonEvent::StartArray);
  151|    299|        Self {}
  152|    299|    }
_RNvNtCsbBgSuRnHgd0_10sparesults4json31inner_write_boolean_json_result:
   40|      3|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   41|      3|    [
   42|      3|        JsonEvent::StartObject,
   43|      3|        JsonEvent::ObjectKey("head".into()),
   44|      3|        JsonEvent::StartObject,
   45|      3|        JsonEvent::EndObject,
   46|      3|        JsonEvent::ObjectKey("boolean".into()),
   47|      3|        JsonEvent::Boolean(value),
   48|      3|        JsonEvent::EndObject,
   49|      3|    ]
   50|      3|}
_RNvMs_NtCsbBgSuRnHgd0_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter6finish:
  169|    299|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  170|    299|        output.push(JsonEvent::EndArray);
  171|    299|        output.push(JsonEvent::EndObject);
  172|    299|        output.push(JsonEvent::EndObject);
  173|    299|    }

_RNvMNtCsbBgSuRnHgd0_10sparesults6parserNtB2_18QueryResultsParser11from_formatCs9k6xcToz8Tk_13oxigraph_fuzz:
   44|  7.37k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   45|  7.37k|        Self { format }
   46|  7.37k|    }
_RNCNvXs1_NtCsbBgSuRnHgd0_10sparesults6parserINtB7_23FromReadSolutionsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4next0Cs9k6xcToz8Tk_13oxigraph_fuzz:
  217|  10.2k|            .map(|values| (Arc::clone(&self.variables), values).into()),
_RINvMNtCsbBgSuRnHgd0_10sparesults6parserNtB3_18QueryResultsParser10parse_readRShECs9k6xcToz8Tk_13oxigraph_fuzz:
   73|  7.67k|    pub fn parse_read<R: Read>(
   74|  7.67k|        &self,
   75|  7.67k|        reader: R,
   76|  7.67k|    ) -> Result<FromReadQueryResultsReader<R>, ParseError> {
   77|  7.67k|        Ok(match self.format {
   78|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
   79|      0|                XmlQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   80|       |                XmlQueryResultsReader::Solutions {
   81|      0|                    solutions,
   82|      0|                    variables,
   83|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   84|      0|                    variables: variables.into(),
   85|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
   86|      0|                }),
   87|       |            },
   88|  7.67k|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
   89|      6|                JsonQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
   90|       |                JsonQueryResultsReader::Solutions {
   91|    681|                    solutions,
   92|    681|                    variables,
   93|    681|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
   94|    681|                    variables: variables.into(),
   95|    681|                    solutions: SolutionsReaderKind::Json(solutions),
   96|    681|                }),
   97|       |            },
   98|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
   99|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  100|      0|                TsvQueryResultsReader::Boolean(r) => FromReadQueryResultsReader::Boolean(r),
  101|       |                TsvQueryResultsReader::Solutions {
  102|      0|                    solutions,
  103|      0|                    variables,
  104|      0|                } => FromReadQueryResultsReader::Solutions(FromReadSolutionsReader {
  105|      0|                    variables: variables.into(),
  106|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  107|      0|                }),
  108|       |            },
  109|       |        })
  110|  7.67k|    }
_RNvXs1_NtCsbBgSuRnHgd0_10sparesults6parserINtB5_23FromReadSolutionsReaderRShENtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs9k6xcToz8Tk_13oxigraph_fuzz:
  209|  10.8k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  210|  10.8k|        Some(
  211|  10.8k|            match &mut self.solutions {
  212|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  213|  10.8k|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  214|      0|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  215|       |            }
  216|  10.8k|            .transpose()?
  217|  10.3k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  218|       |        )
  219|  10.8k|    }

_RINvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
   71|      3|    pub fn serialize_boolean_to_write<W: Write>(&self, write: W, value: bool) -> io::Result<W> {
   72|      3|        match self.format {
   73|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   74|      3|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   75|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   76|      0|                write_boolean_csv_result(write, value)
   77|       |            }
   78|       |        }
   79|      3|    }
_RINvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE5writeRNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECs9k6xcToz8Tk_13oxigraph_fuzz:
  274|  4.95k|    pub fn write<'a>(
  275|  4.95k|        &mut self,
  276|  4.95k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  277|  4.95k|    ) -> io::Result<()> {
  278|  4.95k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  279|  4.95k|        match &mut self.formatter {
  280|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  281|  4.95k|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  282|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  283|      0|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  284|       |        }
  285|  4.95k|    }
_RINvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCsdBW21Yiwikk_5alloc3vec3VechEECs9k6xcToz8Tk_13oxigraph_fuzz:
  136|    299|    pub fn serialize_solutions_to_write<W: Write>(
  137|    299|        &self,
  138|    299|        write: W,
  139|    299|        variables: Vec<Variable>,
  140|    299|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  141|    299|        Ok(ToWriteSolutionsWriter {
  142|    299|            formatter: match self.format {
  143|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  144|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  145|       |                ),
  146|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  147|    299|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  148|       |                ),
  149|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  150|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  151|       |                ),
  152|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  153|      0|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  154|       |                ),
  155|       |            },
  156|       |        })
  157|    299|    }
_RNvMs0_NtCsbBgSuRnHgd0_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCsdBW21Yiwikk_5alloc3vec3VechEE6finishCs9k6xcToz8Tk_13oxigraph_fuzz:
  288|    299|    pub fn finish(self) -> io::Result<W> {
  289|    299|        match self.formatter {
  290|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  291|    299|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  292|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  293|      0|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  294|       |        }
  295|    299|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCs9k6xcToz8Tk_13oxigraph_fuzz:
   55|  7.37k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   56|  7.37k|        Self { format }
   57|  7.37k|    }

_RNvXs_NtCsbBgSuRnHgd0_10sparesults8solutionNtB4_13QuerySolutionINtNtCsl2lhD68vXAd_4core7convert4FromTINtNtCsdBW21Yiwikk_5alloc4sync3ArcSNtNtCsbrE1BkJ52QU_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromCs9k6xcToz8Tk_13oxigraph_fuzz:
  120|  10.2k|    fn from((v, s): (V, S)) -> Self {
  121|  10.2k|        Self {
  122|  10.2k|            variables: v.into(),
  123|  10.2k|            values: s.into(),
  124|  10.2k|        }
  125|  10.2k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iterCs9k6xcToz8Tk_13oxigraph_fuzz:
  133|  4.95k|    fn into_iter(self) -> Iter<'a> {
  134|  4.95k|        Iter {
  135|  4.95k|            inner: self.variables.iter().zip(&self.values),
  136|  4.95k|        }
  137|  4.95k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB2_13QuerySolution9variablesCs9k6xcToz8Tk_13oxigraph_fuzz:
  113|    291|    pub fn variables(&self) -> &[Variable] {
  114|    291|        &self.variables
  115|    291|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextCs9k6xcToz8Tk_13oxigraph_fuzz:
  231|  4.95k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|  10.3k|        for (variable, value) in &mut self.inner {
  233|  5.37k|            if let Some(value) = value {
  234|      0|                return Some((variable, value));
  235|  5.37k|            }
  236|       |        }
  237|  4.95k|        None
  238|  4.95k|    }
_RNvXs6_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_13QuerySolutionNtNtCsl2lhD68vXAd_4core3cmp9PartialEq2eq:
  191|  4.95k|    fn eq(&self, other: &Self) -> bool {
  192|  4.95k|        for (k, v) in self.iter() {
  193|      0|            if other.get(k) != Some(v) {
  194|      0|                return false;
  195|      0|            }
  196|       |        }
  197|  4.95k|        for (k, v) in other.iter() {
  198|      0|            if self.get(k) != Some(v) {
  199|      0|                return false;
  200|      0|            }
  201|       |        }
  202|  4.95k|        true
  203|  4.95k|    }
_RNvMNtCsbBgSuRnHgd0_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   85|  9.90k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   86|  9.90k|        self.into_iter()
   87|  9.90k|    }
_RNvXs0_NtCsbBgSuRnHgd0_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsl2lhD68vXAd_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  133|  9.90k|    fn into_iter(self) -> Iter<'a> {
  134|  9.90k|        Iter {
  135|  9.90k|            inner: self.variables.iter().zip(&self.values),
  136|  9.90k|        }
  137|  9.90k|    }
_RNvXs9_NtCsbBgSuRnHgd0_10sparesults8solutionNtB5_4IterNtNtNtNtCsl2lhD68vXAd_4core4iter6traits8iterator8Iterator4nextB7_:
  231|  9.90k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  232|  20.6k|        for (variable, value) in &mut self.inner {
  233|  10.7k|            if let Some(value) = value {
  234|      0|                return Some((variable, value));
  235|  10.7k|            }
  236|       |        }
  237|  9.90k|        None
  238|  9.90k|    }


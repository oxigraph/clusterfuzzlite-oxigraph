_RINvXNtCs9SFDWUDXas2_6anyhow7contextINtNtCshZc3FwCJ069_4core6result6ResultINtNtCs8f6x4lOZV33_5alloc3vec3VecNtNtCskZHUDZgyOMC_10sparesults8solution13QuerySolutionENtNtB1L_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCsfCIapqu81O5_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4h_:
   58|  1.21k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.21k|    where
   60|  1.21k|        C: Display + Send + Sync + 'static,
   61|  1.21k|        F: FnOnce() -> C,
   62|  1.21k|    {
   63|  1.21k|        match self {
   64|  1.21k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.21k|    }
_RINvXNtCs9SFDWUDXas2_6anyhow7contextINtNtCshZc3FwCJ069_4core6result6ResultNtNtCskZHUDZgyOMC_10sparesults6parser29SliceQueryResultsParserOutputNtNtB1e_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2g_E12with_contextNtNtCs8f6x4lOZV33_5alloc6string6StringNCNvNtCsfCIapqu81O5_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4d_:
   58|  1.21k|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|  1.21k|    where
   60|  1.21k|        C: Display + Send + Sync + 'static,
   61|  1.21k|        F: FnOnce() -> C,
   62|  1.21k|    {
   63|  1.21k|        match self {
   64|  1.21k|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|  1.21k|    }

_RNvMs_NtCseBhFvBT36b8_17json_event_parser4readNtB4_20FromBufferJsonReader3new:
  237|  23.2k|    pub const fn new(buffer: &'a [u8]) -> Self {
  238|  23.2k|        Self {
  239|  23.2k|            input_buffer: buffer,
  240|  23.2k|            parser: LowLevelJsonReader::new(),
  241|  23.2k|        }
  242|  23.2k|    }
_RNvMs_NtCseBhFvBT36b8_17json_event_parser4readNtB4_20FromBufferJsonReader15read_next_event:
  244|  1.65M|    pub fn read_next_event(&mut self) -> Result<JsonEvent<'_>, SyntaxError> {
  245|       |        loop {
  246|       |            let LowLevelJsonReaderResult {
  247|  1.65M|                event,
  248|  1.65M|                consumed_bytes,
  249|  1.65M|            } = self.parser.read_next_event(self.input_buffer, true);
  250|  1.65M|            self.input_buffer = &self.input_buffer[consumed_bytes..];
  251|  1.65M|            if let Some(event) = event {
  252|  1.65M|                return event;
  253|      0|            }
  254|       |        }
  255|  1.65M|    }
_RNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB5_18LowLevelJsonReader3new:
  303|  23.2k|    pub const fn new() -> Self {
  304|  23.2k|        Self {
  305|  23.2k|            lexer: JsonLexer {
  306|  23.2k|                file_offset: 0,
  307|  23.2k|                file_line: 0,
  308|  23.2k|                file_start_of_last_line: 0,
  309|  23.2k|                file_start_of_last_token: 0,
  310|  23.2k|                is_start: true,
  311|  23.2k|            },
  312|  23.2k|            state_stack: Vec::new(),
  313|  23.2k|            max_state_stack_size: MAX_STATE_STACK_SIZE,
  314|  23.2k|            element_read: false,
  315|  23.2k|            buffered_event: None,
  316|  23.2k|        }
  317|  23.2k|    }
_RNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB5_18LowLevelJsonReader15read_next_event:
  328|  1.65M|    pub fn read_next_event<'a>(
  329|  1.65M|        &mut self,
  330|  1.65M|        input_buffer: &'a [u8],
  331|  1.65M|        is_ending: bool,
  332|  1.65M|    ) -> LowLevelJsonReaderResult<'a> {
  333|  1.65M|        if let Some(event) = self.buffered_event.take() {
  334|      0|            return LowLevelJsonReaderResult {
  335|      0|                consumed_bytes: 0,
  336|      0|                event: Some(Ok(event)),
  337|      0|            };
  338|  1.65M|        }
  339|  1.65M|        let start_file_offset = self.lexer.file_offset;
  340|  2.81M|        while let Some(token) = self.lexer.read_next_token(
  341|  2.81M|            &input_buffer[usize::try_from(self.lexer.file_offset - start_file_offset).unwrap()..],
  342|  2.81M|            is_ending,
  343|  2.81M|        ) {
  344|  2.80M|            let consumed_bytes = (self.lexer.file_offset - start_file_offset)
  345|  2.80M|                .try_into()
  346|  2.80M|                .unwrap();
  347|  2.80M|            match token {
  348|  2.80M|                Ok(token) => {
  349|  2.80M|                    let (event, error) = self.apply_new_token(token);
  350|  2.80M|                    let error = error.map(|e| {
  351|       |                        self.lexer.syntax_error(
  352|       |                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|       |                            e,
  354|       |                        )
  355|  2.80M|                    });
  356|  2.80M|                    if let Some(error) = error {
  357|  3.53k|                        self.buffered_event = event.map(owned_event);
  358|  3.53k|                        return LowLevelJsonReaderResult {
  359|  3.53k|                            consumed_bytes,
  360|  3.53k|                            event: Some(Err(error)),
  361|  3.53k|                        };
  362|  2.80M|                    }
  363|  2.80M|                    if let Some(event) = event {
  364|  1.64M|                        return LowLevelJsonReaderResult {
  365|  1.64M|                            consumed_bytes,
  366|  1.64M|                            event: Some(Ok(event)),
  367|  1.64M|                        };
  368|  1.16M|                    }
  369|       |                }
  370|  3.50k|                Err(error) => {
  371|  3.50k|                    return LowLevelJsonReaderResult {
  372|  3.50k|                        consumed_bytes,
  373|  3.50k|                        event: Some(Err(error)),
  374|  3.50k|                    }
  375|       |                }
  376|       |            }
  377|       |        }
  378|       |        LowLevelJsonReaderResult {
  379|  6.59k|            consumed_bytes: (self.lexer.file_offset - start_file_offset)
  380|  6.59k|                .try_into()
  381|  6.59k|                .unwrap(),
  382|  6.59k|            event: if is_ending {
  383|  6.59k|                self.buffered_event = Some(JsonEvent::Eof);
  384|  6.59k|                Some(Err(self.lexer.syntax_error(
  385|  6.59k|                    self.lexer.file_offset..self.lexer.file_offset + 1,
  386|  6.59k|                    "Unexpected end of file",
  387|  6.59k|                )))
  388|       |            } else {
  389|      0|                None
  390|       |            },
  391|       |        }
  392|  1.65M|    }
_RNCNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB7_18LowLevelJsonReader15read_next_event0B9_:
  350|  3.53k|                    let error = error.map(|e| {
  351|  3.53k|                        self.lexer.syntax_error(
  352|  3.53k|                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|  3.53k|                            e,
  354|  3.53k|                        )
  355|  3.53k|                    });
_RNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB5_18LowLevelJsonReader15apply_new_token:
  394|  3.14M|    fn apply_new_token<'a>(
  395|  3.14M|        &mut self,
  396|  3.14M|        token: JsonToken<'a>,
  397|  3.14M|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  398|  3.14M|        match self.state_stack.pop() {
  399|       |            Some(JsonState::ObjectKeyOrEnd) => {
  400|   335k|                if token == JsonToken::ClosingCurlyBracket {
  401|  37.9k|                    (Some(JsonEvent::EndObject), None)
  402|       |                } else {
  403|   297k|                    if let Err(e) = self.push_state_stack(JsonState::ObjectKey) {
  404|      0|                        return (None, Some(e));
  405|   297k|                    }
  406|   297k|                    self.apply_new_token(token)
  407|       |                }
  408|       |            }
  409|       |            Some(JsonState::ObjectKey) => {
  410|   672k|                if token == JsonToken::ClosingCurlyBracket {
  411|      1|                    return (Some(JsonEvent::EndObject), Some("Trailing commas are not allowed".into()));
  412|   672k|                }
  413|   672k|                if let Err(e) = self.push_state_stack(JsonState::ObjectColon) {
  414|      0|                    return (None, Some(e));
  415|   672k|                }
  416|   672k|                if let JsonToken::String(key) = token {
  417|   671k|                    (Some(JsonEvent::ObjectKey(key)), None)
  418|       |                } else {
  419|    636|                    (None, Some("Object keys must be strings".into()))
  420|       |                }
  421|       |            }
  422|       |            Some(JsonState::ObjectColon) => {
  423|   669k|                if let Err(e) = self.push_state_stack(JsonState::ObjectValue) {
  424|      0|                    return (None, Some(e));
  425|   669k|                }
  426|   669k|                if token == JsonToken::Colon {
  427|   668k|                    (None, None)
  428|       |                } else {
  429|  1.05k|                    let (event, _) = self.apply_new_token(token);
  430|  1.05k|                    (event, Some("Object keys must be strings".into()))
  431|       |                }
  432|       |            }
  433|       |            Some(JsonState::ObjectValue) => {
  434|   669k|                if let Err(e) = self.push_state_stack(JsonState::ObjectCommaOrEnd) {
  435|      0|                    return (None, Some(e));
  436|   669k|                }
  437|   669k|                self.apply_new_token_for_value(token)
  438|       |            }
  439|   427k|            Some(JsonState::ObjectCommaOrEnd) => match token {
  440|       |                JsonToken::Comma => {
  441|   376k|                    (None, self.push_state_stack(JsonState::ObjectKey).err())
  442|       |                }
  443|  49.9k|                JsonToken::ClosingCurlyBracket => (Some(JsonEvent::EndObject), None),
  444|  1.22k|                _ => (None, Some("Object values must be followed by a comma to add a new value or a curly bracket to end the object".into())),
  445|       |            },
  446|       |            Some(JsonState::ArrayValueOrEnd) =>{
  447|  57.2k|                if token == JsonToken::ClosingSquareBracket {
  448|  17.3k|                    return (Some(JsonEvent::EndArray), None);
  449|  39.9k|                }
  450|  39.9k|                if let Err(e) = self.push_state_stack(JsonState::ArrayValue) {
  451|      0|                    return (None, Some(e));
  452|  39.9k|                }
  453|  39.9k|                self.apply_new_token(token)
  454|       |            }
  455|       |            Some(JsonState::ArrayValue) => {
  456|   158k|                if token == JsonToken::ClosingSquareBracket {
  457|      2|                    return (Some(JsonEvent::EndArray), Some("Trailing commas are not allowed".into()));
  458|   158k|                }
  459|   158k|                if let Err(e) = self.push_state_stack(JsonState::ArrayCommaOrEnd) {
  460|      0|                    return (None, Some(e));
  461|   158k|                }
  462|   158k|                self.apply_new_token_for_value(token)
  463|       |            }
  464|   134k|            Some(JsonState::ArrayCommaOrEnd) => match token {
  465|       |                JsonToken::Comma => {
  466|   117k|                    (None, self.push_state_stack(JsonState::ArrayValue).err())
  467|       |                }
  468|  16.7k|                JsonToken::ClosingSquareBracket => (Some(JsonEvent::EndArray), None),
  469|       |                _ => {
  470|    266|                    let _ = self.push_state_stack(JsonState::ArrayValue); // We already have an error
  471|    266|                    let (event, _) = self.apply_new_token(token);
  472|    266|                    (event, Some("Array values must be followed by a comma to add a new value or a squared bracket to end the array".into()))
  473|       |                }
  474|       |            }
  475|  21.0k|            None => if self.element_read {
  476|  1.22k|                if token == JsonToken::Eof {
  477|  1.21k|                    (Some(JsonEvent::Eof), None)
  478|       |                } else {
  479|      1|                    (None, Some("The JSON already contains one root element".into()))
  480|       |                }
  481|       |            } else {
  482|  19.7k|                self.element_read = true;
  483|  19.7k|                self.apply_new_token_for_value(token)
  484|       |            }
  485|       |        }
  486|  3.14M|    }
_RNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB5_18LowLevelJsonReader25apply_new_token_for_value:
  488|   846k|    fn apply_new_token_for_value<'a>(
  489|   846k|        &mut self,
  490|   846k|        token: JsonToken<'a>,
  491|   846k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  492|   846k|        match token {
  493|  57.2k|            JsonToken::OpeningSquareBracket => (
  494|  57.2k|                Some(JsonEvent::StartArray),
  495|  57.2k|                self.push_state_stack(JsonState::ArrayValueOrEnd).err(),
  496|  57.2k|            ),
  497|      4|            JsonToken::ClosingSquareBracket => (
  498|      4|                None,
  499|      4|                Some("Unexpected closing square bracket, no array to close".into()),
  500|      4|            ),
  501|   338k|            JsonToken::OpeningCurlyBracket => (
  502|   338k|                Some(JsonEvent::StartObject),
  503|   338k|                self.push_state_stack(JsonState::ObjectKeyOrEnd).err(),
  504|   338k|            ),
  505|      7|            JsonToken::ClosingCurlyBracket => (
  506|      7|                None,
  507|      7|                Some("Unexpected closing curly bracket, no array to close".into()),
  508|      7|            ),
  509|     64|            JsonToken::Comma => (None, Some("Unexpected comma, no values to separate".into())),
  510|     10|            JsonToken::Colon => (None, Some("Unexpected colon, no key to follow".into())),
  511|   415k|            JsonToken::String(string) => (Some(JsonEvent::String(string)), None),
  512|  32.8k|            JsonToken::Number(number) => (Some(JsonEvent::Number(number)), None),
  513|    540|            JsonToken::True => (Some(JsonEvent::Boolean(true)), None),
  514|    130|            JsonToken::False => (Some(JsonEvent::Boolean(false)), None),
  515|    824|            JsonToken::Null => (Some(JsonEvent::Null), None),
  516|  1.25k|            JsonToken::Eof => (
  517|  1.25k|                Some(JsonEvent::Eof),
  518|  1.25k|                Some("Unexpected end of file, a value was expected".into()),
  519|  1.25k|            ),
  520|       |        }
  521|   846k|    }
_RNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB5_18LowLevelJsonReader16push_state_stack:
  523|  3.39M|    fn push_state_stack(&mut self, state: JsonState) -> Result<(), String> {
  524|  3.39M|        self.check_stack_size()?;
  525|  3.39M|        self.state_stack.push(state);
  526|  3.39M|        Ok(())
  527|  3.39M|    }
_RNvMs0_NtCseBhFvBT36b8_17json_event_parser4readNtB5_18LowLevelJsonReader16check_stack_size:
  529|  3.39M|    fn check_stack_size(&self) -> Result<(), String> {
  530|  3.39M|        if self.state_stack.len() > self.max_state_stack_size {
  531|      0|            Err(format!(
  532|      0|                "Max stack size of {} reached on an object opening",
  533|      0|                self.max_state_stack_size
  534|      0|            ))
  535|       |        } else {
  536|  3.39M|            Ok(())
  537|       |        }
  538|  3.39M|    }
_RNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB5_9JsonLexer15read_next_token:
  578|  2.81M|    fn read_next_token<'a>(
  579|  2.81M|        &mut self,
  580|  2.81M|        mut input_buffer: &'a [u8],
  581|  2.81M|        is_ending: bool,
  582|  2.81M|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  583|  2.81M|        // We remove BOM at the beginning
  584|  2.81M|        if self.is_start {
  585|  23.2k|            if input_buffer.len() < 3 && !is_ending {
  586|      0|                return None;
  587|  23.2k|            }
  588|  23.2k|            self.is_start = false;
  589|  23.2k|            if input_buffer.starts_with(&[0xEF, 0xBB, 0xBF]) {
  590|    466|                input_buffer = &input_buffer[3..];
  591|    466|                self.file_offset += 3;
  592|  22.7k|            }
  593|  2.79M|        }
  594|       |
  595|       |        // We skip whitespaces
  596|  2.81M|        let mut i = 0;
  597|  2.88M|        while let Some(c) = input_buffer.get(i) {
  598|  2.88M|            match *c {
  599|  71.0k|                b' ' | b'\t' => {
  600|  71.0k|                    i += 1;
  601|  71.0k|                }
  602|    497|                b'\n' => {
  603|    497|                    i += 1;
  604|    497|                    self.file_line += 1;
  605|    497|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  606|    497|                }
  607|       |                b'\r' => {
  608|    955|                    i += 1;
  609|    955|                    if let Some(c) = input_buffer.get(i) {
  610|    947|                        if *c == b'\n' {
  611|      0|                            i += 1; // \r\n
  612|    947|                        }
  613|      8|                    } else if !is_ending {
  614|       |                        // We need an extra byte to check if followed by \n
  615|      0|                        i -= 1;
  616|      0|                        self.file_offset += u64::try_from(i).unwrap();
  617|      0|                        return None;
  618|      8|                    }
  619|    955|                    self.file_line += 1;
  620|    955|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  621|       |                }
  622|       |                _ => {
  623|  2.81M|                    break;
  624|       |                }
  625|       |            }
  626|       |        }
  627|  2.81M|        self.file_offset += u64::try_from(i).unwrap();
  628|  2.81M|        input_buffer = &input_buffer[i..];
  629|  2.81M|        self.file_start_of_last_token = self.file_offset;
  630|  2.81M|
  631|  2.81M|        if is_ending && input_buffer.is_empty() {
  632|  3.38k|            return Some(Ok(JsonToken::Eof));
  633|  2.81M|        }
  634|  2.81M|
  635|  2.81M|        // we get the first character
  636|  2.81M|        match *input_buffer.first()? {
  637|       |            b'{' => {
  638|   338k|                self.file_offset += 1;
  639|   338k|                Some(Ok(JsonToken::OpeningCurlyBracket))
  640|       |            }
  641|       |            b'}' => {
  642|  87.8k|                self.file_offset += 1;
  643|  87.8k|                Some(Ok(JsonToken::ClosingCurlyBracket))
  644|       |            }
  645|       |            b'[' => {
  646|  57.2k|                self.file_offset += 1;
  647|  57.2k|                Some(Ok(JsonToken::OpeningSquareBracket))
  648|       |            }
  649|       |            b']' => {
  650|  34.0k|                self.file_offset += 1;
  651|  34.0k|                Some(Ok(JsonToken::ClosingSquareBracket))
  652|       |            }
  653|       |            b',' => {
  654|   494k|                self.file_offset += 1;
  655|   494k|                Some(Ok(JsonToken::Comma))
  656|       |            }
  657|       |            b':' => {
  658|   669k|                self.file_offset += 1;
  659|   669k|                Some(Ok(JsonToken::Colon))
  660|       |            }
  661|  1.09M|            b'"' => self.read_string(input_buffer),
  662|    709|            b't' => self.read_constant(input_buffer, is_ending, "true", JsonToken::True),
  663|    137|            b'f' => self.read_constant(input_buffer, is_ending, "false", JsonToken::False),
  664|    978|            b'n' => self.read_constant(input_buffer, is_ending, "null", JsonToken::Null),
  665|  35.0k|            b'-' | b'0'..=b'9' => self.read_number(input_buffer, is_ending),
  666|  2.14k|            c => {
  667|  2.14k|                self.file_offset += 1;
  668|  2.14k|                Some(Err(self.syntax_error(
  669|  2.14k|                    self.file_offset - 1..self.file_offset,
  670|  2.14k|                    if c < 128 {
  671|  1.82k|                        format!("Unexpected char: '{}'", char::from(c))
  672|       |                    } else {
  673|    326|                        format!("Unexpected byte: \\x{c:X}")
  674|       |                    },
  675|       |                )))
  676|       |            }
  677|       |        }
  678|  2.81M|    }
_RNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB5_9JsonLexer11read_string:
  680|  1.09M|    fn read_string<'a>(
  681|  1.09M|        &mut self,
  682|  1.09M|        input_buffer: &'a [u8],
  683|  1.09M|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  684|  1.09M|        let mut error = None;
  685|  1.09M|        let mut string: Option<(String, usize)> = None;
  686|  1.09M|        let mut next_byte_offset = 1;
  687|       |        loop {
  688|  8.59M|            match *input_buffer.get(next_byte_offset)? {
  689|       |                b'"' => {
  690|       |                    // end of string
  691|  1.08M|                    let result = Some(if let Some(error) = error {
  692|    824|                        Err(error)
  693|  1.08M|                    } else if let Some((mut string, read_until)) = string {
  694|   164k|                        if read_until < next_byte_offset {
  695|   121k|                            let (str, e) = self.decode_utf8(
  696|   121k|                                &input_buffer[read_until..next_byte_offset],
  697|   121k|                                self.file_offset + u64::try_from(read_until).unwrap(),
  698|   121k|                            );
  699|   121k|                            error = error.or(e);
  700|   121k|                            string.push_str(&str);
  701|   121k|                        }
  702|   164k|                        if let Some(error) = error {
  703|      9|                            Err(error)
  704|       |                        } else {
  705|   164k|                            Ok(JsonToken::String(Cow::Owned(string)))
  706|       |                        }
  707|       |                    } else {
  708|   923k|                        let (string, error) = self
  709|   923k|                            .decode_utf8(&input_buffer[1..next_byte_offset], self.file_offset + 1);
  710|   923k|                        if let Some(error) = error {
  711|    238|                            Err(error)
  712|       |                        } else {
  713|   923k|                            Ok(JsonToken::String(string))
  714|       |                        }
  715|       |                    });
  716|  1.08M|                    self.file_offset += u64::try_from(next_byte_offset).unwrap() + 1;
  717|  1.08M|                    return result;
  718|       |                }
  719|       |                b'\\' => {
  720|       |                    // Escape sequences
  721|   738k|                    if string.is_none() {
  722|   170k|                        string = Some((String::new(), 1))
  723|   567k|                    }
  724|   738k|                    let (string, read_until) = string.as_mut().unwrap();
  725|   738k|                    if *read_until < next_byte_offset {
  726|   376k|                        let (str, e) = self.decode_utf8(
  727|   376k|                            &input_buffer[*read_until..next_byte_offset],
  728|   376k|                            self.file_offset + u64::try_from(*read_until).unwrap(),
  729|   376k|                        );
  730|   376k|                        error = error.or(e);
  731|   376k|                        string.push_str(&str);
  732|   376k|                    }
  733|   738k|                    next_byte_offset += 1;
  734|   738k|                    match *input_buffer.get(next_byte_offset)? {
  735|  29.8k|                        b'"' => {
  736|  29.8k|                            string.push('"');
  737|  29.8k|                            next_byte_offset += 1;
  738|  29.8k|                        }
  739|  65.4k|                        b'\\' => {
  740|  65.4k|                            string.push('\\');
  741|  65.4k|                            next_byte_offset += 1;
  742|  65.4k|                        }
  743|  14.1k|                        b'/' => {
  744|  14.1k|                            string.push('/');
  745|  14.1k|                            next_byte_offset += 1;
  746|  14.1k|                        }
  747|  17.5k|                        b'b' => {
  748|  17.5k|                            string.push('\u{8}');
  749|  17.5k|                            next_byte_offset += 1;
  750|  17.5k|                        }
  751|  4.53k|                        b'f' => {
  752|  4.53k|                            string.push('\u{C}');
  753|  4.53k|                            next_byte_offset += 1;
  754|  4.53k|                        }
  755|  29.9k|                        b'n' => {
  756|  29.9k|                            string.push('\n');
  757|  29.9k|                            next_byte_offset += 1;
  758|  29.9k|                        }
  759|  51.5k|                        b'r' => {
  760|  51.5k|                            string.push('\r');
  761|  51.5k|                            next_byte_offset += 1;
  762|  51.5k|                        }
  763|   114k|                        b't' => {
  764|   114k|                            string.push('\t');
  765|   114k|                            next_byte_offset += 1;
  766|   114k|                        }
  767|       |                        b'u' => {
  768|   375k|                            next_byte_offset += 1;
  769|   375k|                            let val = input_buffer.get(next_byte_offset..next_byte_offset + 4)?;
  770|   375k|                            next_byte_offset += 4;
  771|   375k|                            let code_point = match read_hexa_char(val) {
  772|   282k|                                Ok(cp) => cp,
  773|  92.7k|                                Err(e) => {
  774|  92.7k|                                    error = error.or_else(|| {
  775|       |                                        let pos = self.file_offset
  776|       |                                            + u64::try_from(next_byte_offset).unwrap();
  777|       |                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  92.7k|                                    });
  779|  92.7k|                                    char::REPLACEMENT_CHARACTER.into()
  780|       |                                }
  781|       |                            };
  782|   375k|                            if let Some(c) = char::from_u32(code_point) {
  783|   218k|                                string.push(c);
  784|   218k|                            } else {
  785|   156k|                                let high_surrogate = code_point;
  786|   156k|                                if !(0xD800..=0xDBFF).contains(&high_surrogate) {
  787|   129k|                                    error = error.or_else(|| {
  788|       |                                        let pos = self.file_offset
  789|       |                                            + u64::try_from(next_byte_offset).unwrap();
  790|       |                                        Some(self.syntax_error(
  791|       |                                            pos - 6..pos,
  792|       |                                            format!(
  793|       |                                                "\\u{:X} is not a valid high surrogate",
  794|       |                                                high_surrogate
  795|       |                                            ),
  796|       |                                        ))
  797|   129k|                                    });
  798|   129k|                                }
  799|   156k|                                let val =
  800|   156k|                                    input_buffer.get(next_byte_offset..next_byte_offset + 6)?;
  801|   156k|                                next_byte_offset += 6;
  802|   156k|                                if !val.starts_with(b"\\u") {
  803|  81.8k|                                    error = error.or_else(|| {
  804|       |                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|       |                                        Some(self.syntax_error(
  806|       |                                            pos - 6..pos,
  807|       |                                            format!(
  808|       |                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|       |                                                high_surrogate
  810|       |                                            )
  811|       |                                        ))
  812|  81.8k|                                    });
  813|  81.8k|                                }
  814|   156k|                                let low_surrogate = match read_hexa_char(&val[2..]) {
  815|  74.2k|                                    Ok(cp) => cp,
  816|  82.2k|                                    Err(e) => {
  817|  82.2k|                                        error = error.or_else(|| {
  818|       |                                            let pos = self.file_offset
  819|       |                                                + u64::try_from(next_byte_offset).unwrap();
  820|       |                                            Some(self.syntax_error(pos - 6..pos, e))
  821|  82.2k|                                        });
  822|  82.2k|                                        char::REPLACEMENT_CHARACTER.into()
  823|       |                                    }
  824|       |                                };
  825|   156k|                                if !(0xDC00..=0xDFFF).contains(&low_surrogate) {
  826|   110k|                                    error = error.or_else(|| {
  827|       |                                        let pos = self.file_offset
  828|       |                                            + u64::try_from(next_byte_offset).unwrap();
  829|       |                                        Some(self.syntax_error(
  830|       |                                            pos - 6..pos,
  831|       |                                            format!(
  832|       |                                                "\\u{:X} is not a valid low surrogate",
  833|       |                                                low_surrogate
  834|       |                                            ),
  835|       |                                        ))
  836|   110k|                                    });
  837|   110k|                                }
  838|   156k|                                let code_point = 0x10000
  839|   156k|                                    + ((high_surrogate & 0x03FF) << 10)
  840|   156k|                                    + (low_surrogate & 0x03FF);
  841|   156k|                                if let Some(c) = char::from_u32(code_point) {
  842|   156k|                                    string.push(c)
  843|      0|                                } else {
  844|      0|                                    string.push(char::REPLACEMENT_CHARACTER);
  845|      0|                                    error = error.or_else(|| {
  846|       |                                        let pos = self.file_offset
  847|       |                                            + u64::try_from(next_byte_offset).unwrap();
  848|       |                                        Some(self.syntax_error(
  849|       |                                            pos - 12..pos,
  850|       |                                            format!(
  851|       |                                                "\\u{:X}\\u{:X} is an invalid surrogate pair",
  852|       |                                                high_surrogate, low_surrogate
  853|       |                                            ),
  854|       |                                        ))
  855|      0|                                    });
  856|      0|                                }
  857|       |                            }
  858|       |                        }
  859|  33.8k|                        c => {
  860|  33.8k|                            next_byte_offset += 1;
  861|  33.8k|                            error = error.or_else(|| {
  862|       |                                let pos =
  863|       |                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|       |                                Some(self.syntax_error(
  865|       |                                    pos - 2..pos,
  866|       |                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|       |                                ))
  868|  33.8k|                            });
  869|  33.8k|                            string.push(char::REPLACEMENT_CHARACTER);
  870|  33.8k|                        }
  871|       |                    }
  872|   736k|                    *read_until = next_byte_offset;
  873|       |                }
  874|  6.76M|                c @ (0..=0x1F) => {
  875|  67.3k|                    error = error.or_else(|| {
  876|       |                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|       |                        Some(self.syntax_error(
  878|       |                            pos..pos + 1,
  879|       |                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|       |                        ))
  881|  67.3k|                    });
  882|  67.3k|                    next_byte_offset += 1;
  883|  67.3k|                }
  884|  6.69M|                _ => {
  885|  6.69M|                    next_byte_offset += 1;
  886|  6.69M|                }
  887|       |            }
  888|       |        }
  889|  1.09M|    }
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_string0B9_:
  774|  1.06k|                                    error = error.or_else(|| {
  775|  1.06k|                                        let pos = self.file_offset
  776|  1.06k|                                            + u64::try_from(next_byte_offset).unwrap();
  777|  1.06k|                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  1.06k|                                    });
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_strings_0B9_:
  787|    816|                                    error = error.or_else(|| {
  788|    816|                                        let pos = self.file_offset
  789|    816|                                            + u64::try_from(next_byte_offset).unwrap();
  790|    816|                                        Some(self.syntax_error(
  791|    816|                                            pos - 6..pos,
  792|    816|                                            format!(
  793|    816|                                                "\\u{:X} is not a valid high surrogate",
  794|    816|                                                high_surrogate
  795|    816|                                            ),
  796|    816|                                        ))
  797|    816|                                    });
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_strings0_0B9_:
  803|    130|                                    error = error.or_else(|| {
  804|    130|                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|    130|                                        Some(self.syntax_error(
  806|    130|                                            pos - 6..pos,
  807|    130|                                            format!(
  808|    130|                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|    130|                                                high_surrogate
  810|    130|                                            )
  811|    130|                                        ))
  812|    130|                                    });
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_strings1_0B9_:
  817|      7|                                        error = error.or_else(|| {
  818|      7|                                            let pos = self.file_offset
  819|      7|                                                + u64::try_from(next_byte_offset).unwrap();
  820|      7|                                            Some(self.syntax_error(pos - 6..pos, e))
  821|      7|                                        });
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_strings2_0B9_:
  826|      5|                                    error = error.or_else(|| {
  827|      5|                                        let pos = self.file_offset
  828|      5|                                            + u64::try_from(next_byte_offset).unwrap();
  829|      5|                                        Some(self.syntax_error(
  830|      5|                                            pos - 6..pos,
  831|      5|                                            format!(
  832|      5|                                                "\\u{:X} is not a valid low surrogate",
  833|      5|                                                low_surrogate
  834|      5|                                            ),
  835|      5|                                        ))
  836|      5|                                    });
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_strings4_0B9_:
  861|  1.21k|                            error = error.or_else(|| {
  862|  1.21k|                                let pos =
  863|  1.21k|                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|  1.21k|                                Some(self.syntax_error(
  865|  1.21k|                                    pos - 2..pos,
  866|  1.21k|                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|  1.21k|                                ))
  868|  1.21k|                            });
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_strings5_0B9_:
  875|    909|                    error = error.or_else(|| {
  876|    909|                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|    909|                        Some(self.syntax_error(
  878|    909|                            pos..pos + 1,
  879|    909|                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|    909|                        ))
  881|    909|                    });
_RNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB5_9JsonLexer13read_constant:
  891|  1.82k|    fn read_constant(
  892|  1.82k|        &mut self,
  893|  1.82k|        input_buffer: &[u8],
  894|  1.82k|        is_ending: bool,
  895|  1.82k|        expected: &str,
  896|  1.82k|        value: JsonToken<'static>,
  897|  1.82k|    ) -> Option<Result<JsonToken<'static>, SyntaxError>> {
  898|  1.82k|        if input_buffer.get(..expected.len())? == expected.as_bytes() {
  899|  1.49k|            self.file_offset += u64::try_from(expected.len()).unwrap();
  900|  1.49k|            return Some(Ok(value));
  901|    191|        }
  902|    191|        let ascii_chars = input_buffer
  903|    191|            .iter()
  904|    191|            .take_while(|c| c.is_ascii_alphabetic())
  905|    191|            .count();
  906|    191|        if ascii_chars == input_buffer.len() && !is_ending {
  907|      0|            return None; // We might read a bigger token
  908|    191|        }
  909|    191|        let read = max(1, ascii_chars); // We want to consume at least a byte
  910|    191|        let start_offset = self.file_offset;
  911|    191|        self.file_offset += u64::try_from(read).unwrap();
  912|    191|        Some(Err(self.syntax_error(
  913|    191|            start_offset..self.file_offset,
  914|    191|            format!("{} expected", expected),
  915|    191|        )))
  916|  1.82k|    }
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer13read_constant0B9_:
  904|  2.31k|            .take_while(|c| c.is_ascii_alphabetic())
_RNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB5_9JsonLexer11read_number:
  918|  33.3k|    fn read_number<'a>(
  919|  33.3k|        &mut self,
  920|  33.3k|        input_buffer: &'a [u8],
  921|  33.3k|        is_ending: bool,
  922|  33.3k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  923|  33.3k|        let mut next_byte_offset = 0;
  924|  33.3k|        if *input_buffer.get(next_byte_offset)? == b'-' {
  925|    247|            next_byte_offset += 1;
  926|  33.1k|        }
  927|       |        // integer starting with first bytes
  928|  33.3k|        match *input_buffer.get(next_byte_offset)? {
  929|  2.67k|            b'0' => {
  930|  2.67k|                next_byte_offset += 1;
  931|  2.67k|            }
  932|  30.6k|            b'1'..=b'9' => {
  933|  30.6k|                next_byte_offset += 1;
  934|  30.6k|                next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  935|       |            }
  936|     24|            c => {
  937|     24|                next_byte_offset += 1;
  938|     24|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  939|     24|                return Some(Err(self.syntax_error(
  940|     24|                    self.file_offset - 1..self.file_offset,
  941|     24|                    format!("A number is not allowed to start with '{}'", char::from(c)),
  942|     24|                )));
  943|       |            }
  944|       |        }
  945|       |
  946|       |        // Dot
  947|  33.3k|        if input_buffer.get(next_byte_offset).map_or_else(
  948|  33.3k|            || if is_ending { Some(None) } else { None },
  949|  33.3k|            |c| Some(Some(*c)),
  950|  33.3k|        )? == Some(b'.')
  951|       |        {
  952|    149|            next_byte_offset += 1;
  953|    149|            let c = *input_buffer.get(next_byte_offset)?;
  954|    145|            next_byte_offset += 1;
  955|    145|            if !c.is_ascii_digit() {
  956|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  957|      1|                return Some(Err(self.syntax_error(
  958|      1|                    self.file_offset - 1..self.file_offset,
  959|      1|                    format!(
  960|      1|                        "A number fractional part must start with a digit and not '{}'",
  961|      1|                        char::from(c)
  962|      1|                    ),
  963|      1|                )));
  964|    144|            }
  965|    144|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  966|  33.1k|        }
  967|       |
  968|       |        // Exp
  969|  33.3k|        let c = input_buffer.get(next_byte_offset).map_or_else(
  970|  33.3k|            || if is_ending { Some(None) } else { None },
  971|  33.3k|            |c| Some(Some(*c)),
  972|  33.3k|        )?;
  973|  33.3k|        if c == Some(b'e') || c == Some(b'E') {
  974|  15.2k|            next_byte_offset += 1;
  975|  15.2k|            match *input_buffer.get(next_byte_offset)? {
  976|       |                b'-' | b'+' => {
  977|  14.9k|                    next_byte_offset += 1;
  978|  14.9k|                    let c = *input_buffer.get(next_byte_offset)?;
  979|  14.9k|                    next_byte_offset += 1;
  980|  14.9k|                    if !c.is_ascii_digit() {
  981|     70|                        self.file_offset += u64::try_from(next_byte_offset).unwrap();
  982|     70|                        return Some(Err(self.syntax_error(
  983|     70|                            self.file_offset - 1..self.file_offset,
  984|     70|                            format!(
  985|     70|                                "A number exponential part must contain at least a digit, '{}' found",
  986|     70|                                char::from(c)
  987|     70|                            ),
  988|     70|                        )));
  989|  14.8k|                    }
  990|       |                }
  991|    203|                b'0'..=b'9' => {
  992|    203|                    next_byte_offset += 1;
  993|    203|                }
  994|      1|                c => {
  995|      1|                    next_byte_offset += 1;
  996|      1|                    self.file_offset += u64::try_from(next_byte_offset).unwrap();
  997|      1|                    return Some(Err(self.syntax_error(
  998|      1|                        self.file_offset - 1..self.file_offset,
  999|      1|                        format!(
 1000|      1|                            "A number exponential part must start with +, - or a digit, '{}' found",
 1001|      1|                            char::from(c)
 1002|      1|                        ),
 1003|      1|                    )));
 1004|       |                }
 1005|       |            }
 1006|  15.0k|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
 1007|  18.0k|        }
 1008|  33.1k|        self.file_offset += u64::try_from(next_byte_offset).unwrap();
 1009|  33.1k|        Some(Ok(JsonToken::Number(Cow::Borrowed(
 1010|  33.1k|            str::from_utf8(&input_buffer[..next_byte_offset]).unwrap(),
 1011|  33.1k|        ))))
 1012|  33.3k|    }
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_number0B9_:
  948|     82|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_numbers_0B9_:
  949|  33.2k|            |c| Some(Some(*c)),
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_numbers0_0B9_:
  970|    100|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB7_9JsonLexer11read_numbers1_0B9_:
  971|  33.2k|            |c| Some(Some(*c)),
_RNvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB5_9JsonLexer11decode_utf8:
 1014|  1.42M|    fn decode_utf8<'a>(
 1015|  1.42M|        &self,
 1016|  1.42M|        input_buffer: &'a [u8],
 1017|  1.42M|        start_position: u64,
 1018|  1.42M|    ) -> (Cow<'a, str>, Option<SyntaxError>) {
 1019|  1.42M|        match str::from_utf8(input_buffer) {
 1020|  1.35M|            Ok(str) => (Cow::Borrowed(str), None),
 1021|  61.8k|            Err(e) => (
 1022|  61.8k|                String::from_utf8_lossy(input_buffer),
 1023|  61.8k|                Some({
 1024|  61.8k|                    let pos = start_position + u64::try_from(e.valid_up_to()).unwrap();
 1025|  61.8k|                    self.syntax_error(pos..pos + 1, format!("Invalid UTF-8: {e}"))
 1026|  61.8k|                }),
 1027|  61.8k|            ),
 1028|       |        }
 1029|  1.42M|    }
_RINvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB6_9JsonLexer12syntax_errorNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
 1031|  71.9k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  71.9k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  71.9k|        SyntaxError {
 1034|  71.9k|            location: TextPosition {
 1035|  71.9k|                line: self.file_line,
 1036|  71.9k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  71.9k|                offset: start_file_offset,
 1038|  71.9k|            }..TextPosition {
 1039|  71.9k|                line: self.file_line,
 1040|  71.9k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  71.9k|                offset: file_offset.end,
 1042|  71.9k|            },
 1043|  71.9k|            message: message.into(),
 1044|  71.9k|        }
 1045|  71.9k|    }
_RINvMs1_NtCseBhFvBT36b8_17json_event_parser4readNtB6_9JsonLexer12syntax_errorReEB8_:
 1031|  6.59k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  6.59k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  6.59k|        SyntaxError {
 1034|  6.59k|            location: TextPosition {
 1035|  6.59k|                line: self.file_line,
 1036|  6.59k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  6.59k|                offset: start_file_offset,
 1038|  6.59k|            }..TextPosition {
 1039|  6.59k|                line: self.file_line,
 1040|  6.59k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  6.59k|                offset: file_offset.end,
 1042|  6.59k|            },
 1043|  6.59k|            message: message.into(),
 1044|  6.59k|        }
 1045|  6.59k|    }
_RNvNtCseBhFvBT36b8_17json_event_parser4read14read_hexa_char:
 1048|   531k|fn read_hexa_char(input: &[u8]) -> Result<u32, String> {
 1049|   531k|    let mut value = 0;
 1050|  1.90M|    for c in input.iter().copied() {
 1051|  1.90M|        value = value * 16
 1052|  1.90M|            + match c {
 1053|  1.87M|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
 1054|   360k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
 1055|   716k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
 1056|       |                _ => {
 1057|   174k|                    return Err(format!(
 1058|   174k|                        "Unexpected character in a unicode escape: '{}'",
 1059|   174k|                        char::from(c)
 1060|   174k|                    ))
 1061|       |                }
 1062|       |            }
 1063|       |    }
 1064|   356k|    Ok(value)
 1065|   531k|}
_RNvNtCseBhFvBT36b8_17json_event_parser4read11read_digits:
 1067|  45.8k|fn read_digits(input_buffer: &[u8], is_ending: bool) -> Option<usize> {
 1068|  45.8k|    let count = input_buffer
 1069|  45.8k|        .iter()
 1070|  45.8k|        .take_while(|c| c.is_ascii_digit())
 1071|  45.8k|        .count();
 1072|  45.8k|    if count == input_buffer.len() && !is_ending {
 1073|      0|        return None;
 1074|  45.8k|    }
 1075|  45.8k|    Some(count)
 1076|  45.8k|}
_RNCNvNtCseBhFvBT36b8_17json_event_parser4read11read_digits0B5_:
 1070|  60.9k|        .take_while(|c| c.is_ascii_digit())
_RNvNtCseBhFvBT36b8_17json_event_parser4read11owned_event:
 1078|  1.59k|fn owned_event(event: JsonEvent<'_>) -> JsonEvent<'static> {
 1079|  1.59k|    match event {
 1080|    236|        JsonEvent::String(s) => JsonEvent::String(s.into_owned().into()),
 1081|     45|        JsonEvent::Number(n) => JsonEvent::Number(n.into_owned().into()),
 1082|      8|        JsonEvent::Boolean(b) => JsonEvent::Boolean(b),
 1083|      2|        JsonEvent::Null => JsonEvent::Null,
 1084|      1|        JsonEvent::StartArray => JsonEvent::StartArray,
 1085|      2|        JsonEvent::EndArray => JsonEvent::EndArray,
 1086|     42|        JsonEvent::StartObject => JsonEvent::StartObject,
 1087|      1|        JsonEvent::EndObject => JsonEvent::EndObject,
 1088|      0|        JsonEvent::ObjectKey(k) => JsonEvent::ObjectKey(k.into_owned().into()),
 1089|  1.25k|        JsonEvent::Eof => JsonEvent::Eof,
 1090|       |    }
 1091|  1.59k|}

_RINvMs_NtCseBhFvBT36b8_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  121|  81.7k|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|  81.7k|        match event {
  123|  41.8k|            JsonEvent::String(s) => {
  124|  41.8k|                self.before_value(&mut write)?;
  125|  41.8k|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      0|            JsonEvent::Boolean(b) => {
  132|      0|                self.before_value(&mut write)?;
  133|      0|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|  2.42k|                self.before_value(&mut write)?;
  141|  2.42k|                self.state_stack.push(JsonState::OpenArray);
  142|  2.42k|                write.write_all(b"[")
  143|       |            }
  144|  2.42k|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|  2.42k|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|  15.1k|                self.before_value(&mut write)?;
  162|  15.1k|                self.state_stack.push(JsonState::OpenObject);
  163|  15.1k|                write.write_all(b"{")
  164|       |            }
  165|  15.1k|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|  15.1k|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|  4.85k|            JsonEvent::ObjectKey(key) => {
  182|  4.85k|                match self.state_stack.pop() {
  183|  3.64k|                    Some(JsonState::OpenObject) => (),
  184|  1.21k|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|  4.85k|                self.state_stack.push(JsonState::ContinuationObject);
  193|  4.85k|                self.state_stack.push(JsonState::ObjectValue);
  194|  4.85k|                write_escaped_json_string(&key, &mut write)?;
  195|  4.85k|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|  81.7k|    }
_RINvMs_NtCseBhFvBT36b8_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  121|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|     14|        match event {
  123|      0|            JsonEvent::String(s) => {
  124|      0|                self.before_value(&mut write)?;
  125|      0|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      2|            JsonEvent::Boolean(b) => {
  132|      2|                self.before_value(&mut write)?;
  133|      2|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|      0|                self.before_value(&mut write)?;
  141|      0|                self.state_stack.push(JsonState::OpenArray);
  142|      0|                write.write_all(b"[")
  143|       |            }
  144|      0|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|      0|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|      4|                self.before_value(&mut write)?;
  162|      4|                self.state_stack.push(JsonState::OpenObject);
  163|      4|                write.write_all(b"{")
  164|       |            }
  165|      4|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|      4|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|      4|            JsonEvent::ObjectKey(key) => {
  182|      4|                match self.state_stack.pop() {
  183|      2|                    Some(JsonState::OpenObject) => (),
  184|      2|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|      4|                self.state_stack.push(JsonState::ContinuationObject);
  193|      4|                self.state_stack.push(JsonState::ObjectValue);
  194|      4|                write_escaped_json_string(&key, &mut write)?;
  195|      4|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|     14|    }
_RINvMs_NtCseBhFvBT36b8_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  204|  59.3k|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|  59.3k|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|  2.39k|                self.state_stack.push(JsonState::ContinuationArray);
  208|  2.39k|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|  50.9k|                self.state_stack.push(JsonState::ContinuationArray);
  212|  50.9k|                write.write_all(b",")?;
  213|  50.9k|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|  4.85k|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|  1.21k|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|  1.21k|                    self.element_written = true;
  232|  1.21k|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|  59.3k|    }
_RINvMs_NtCseBhFvBT36b8_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  204|      6|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|      6|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|      0|                self.state_stack.push(JsonState::ContinuationArray);
  208|      0|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|      0|                self.state_stack.push(JsonState::ContinuationArray);
  212|      0|                write.write_all(b",")?;
  213|      0|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|      4|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|      2|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|      2|                    self.element_written = true;
  232|      2|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|      6|    }
_RINvNtCseBhFvBT36b8_17json_event_parser5write25write_escaped_json_stringQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  263|  41.8k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  41.8k|    write.write_all(b"\"")?;
  265|  41.8k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|   176k|    for c in s.chars() {
  267|   176k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|   176k|            c => {
  271|   176k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|   176k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  41.8k|    write.write_all(b"\"")?;
  295|  41.8k|    Ok(())
  296|  41.8k|}
_RINvNtCseBhFvBT36b8_17json_event_parser5write25write_escaped_json_stringQQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  263|  4.85k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  4.85k|    write.write_all(b"\"")?;
  265|  4.85k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  27.9k|    for c in s.chars() {
  267|  27.9k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  27.9k|            c => {
  271|  27.9k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  27.9k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  4.85k|    write.write_all(b"\"")?;
  295|  4.85k|    Ok(())
  296|  4.85k|}
_RINvNtCseBhFvBT36b8_17json_event_parser5write25write_escaped_json_stringQQQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  263|      4|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|      4|    write.write_all(b"\"")?;
  265|      4|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|     22|    for c in s.chars() {
  267|     22|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|     22|            c => {
  271|     22|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|     22|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|      4|    write.write_all(b"\"")?;
  295|      4|    Ok(())
  296|      4|}
_RNvMNtCseBhFvBT36b8_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE11write_eventCsfCIapqu81O5_13oxigraph_fuzz:
   33|  81.7k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|  81.7k|        self.writer.write_event(event, &mut self.write)
   35|  81.7k|    }
_RNvMNtCseBhFvBT36b8_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE3newCsfCIapqu81O5_13oxigraph_fuzz:
   26|  1.21k|    pub const fn new(write: W) -> Self {
   27|  1.21k|        Self {
   28|  1.21k|            write,
   29|  1.21k|            writer: LowLevelJsonWriter::new(),
   30|  1.21k|        }
   31|  1.21k|    }
_RNvMNtCseBhFvBT36b8_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsfCIapqu81O5_13oxigraph_fuzz:
   37|  1.21k|    pub fn finish(self) -> Result<W> {
   38|  1.21k|        self.writer.validate_eof()?;
   39|  1.21k|        Ok(self.write)
   40|  1.21k|    }
_RNvMNtCseBhFvBT36b8_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE11write_eventCsfCIapqu81O5_13oxigraph_fuzz:
   33|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|     14|        self.writer.write_event(event, &mut self.write)
   35|     14|    }
_RNvMNtCseBhFvBT36b8_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE3newCsfCIapqu81O5_13oxigraph_fuzz:
   26|      2|    pub const fn new(write: W) -> Self {
   27|      2|        Self {
   28|      2|            write,
   29|      2|            writer: LowLevelJsonWriter::new(),
   30|      2|        }
   31|      2|    }
_RNvMNtCseBhFvBT36b8_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsfCIapqu81O5_13oxigraph_fuzz:
   37|      2|    pub fn finish(self) -> Result<W> {
   38|      2|        self.writer.validate_eof()?;
   39|      2|        Ok(self.write)
   40|      2|    }
_RNvMs_NtCseBhFvBT36b8_17json_event_parser5writeNtB4_18LowLevelJsonWriter3new:
  114|  1.21k|    pub const fn new() -> Self {
  115|  1.21k|        Self {
  116|  1.21k|            state_stack: Vec::new(),
  117|  1.21k|            element_written: false,
  118|  1.21k|        }
  119|  1.21k|    }
_RNvMs_NtCseBhFvBT36b8_17json_event_parser5writeNtB4_18LowLevelJsonWriter12validate_eof:
  238|  1.21k|    fn validate_eof(&self) -> Result<()> {
  239|  1.21k|        if !self.state_stack.is_empty() {
  240|      0|            return Err(Error::new(
  241|      0|                ErrorKind::InvalidInput,
  242|      0|                "The written JSON is not balanced: an object or an array has not been closed",
  243|      0|            ));
  244|  1.21k|        }
  245|  1.21k|        if !self.element_written {
  246|      0|            return Err(Error::new(
  247|      0|                ErrorKind::InvalidInput,
  248|      0|                "A JSON file can't be empty",
  249|      0|            ));
  250|  1.21k|        }
  251|  1.21k|        Ok(())
  252|  1.21k|    }

rust_fuzzer_test_input:
  209|  22.0k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  22.0k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  22.0k|                }
  223|  22.0k|
  224|  22.0k|                __libfuzzer_sys_run(bytes);
  225|  22.0k|                0
  226|       |            }
_RNvNvCscO21Ai1eYiq_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  22.0k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  22.0k|                $body
  243|  22.0k|            }
LLVMFuzzerTestOneInput:
   58|  22.0k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  22.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  22.0k|    });
   63|  22.0k|
   64|  22.0k|    match test_input {
   65|  22.0k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  22.0k|}
_RNCNvCsiqeAZnF9yJF_13libfuzzer_sys15test_input_wrap0B3_:
   59|  22.0k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  22.0k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  22.0k|        rust_fuzzer_test_input(data_slice)
   62|  22.0k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCsjdbBOGgcNBY_9once_cell3impINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE14is_initializedCsiqeAZnF9yJF_13libfuzzer_sys:
   49|  22.0k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  22.0k|        // An `Acquire` load is enough because that makes all the initialization
   51|  22.0k|        // operations visible to us, and, this being a fast path, weaker
   52|  22.0k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  22.0k|        // `SeqCst` operations on the slow path.
   54|  22.0k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  22.0k|    }

_RNvMs4_NtCsjdbBOGgcNBY_9once_cell4syncINtB5_8OnceCellNtNtCs8f6x4lOZV33_5alloc6string6StringE3getCsiqeAZnF9yJF_13libfuzzer_sys:
  963|  22.0k|        pub fn get(&self) -> Option<&T> {
  964|  22.0k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  22.0k|                None
  969|       |            }
  970|  22.0k|        }

_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECs4x4bMiUCp0I_5oxrdf:
 1739|  3.32k|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1740|  3.32k|        Err(IriParseError { kind })
 1741|  3.32k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_10parse_path0ECs4x4bMiUCp0I_5oxrdf:
 1705|   111k|    fn read_url_codepoint_or_echar(
 1706|   111k|        &mut self,
 1707|   111k|        c: char,
 1708|   111k|        valid: impl Fn(char) -> bool,
 1709|   111k|    ) -> Result<(), IriParseError> {
 1710|   111k|        if UNCHECKED || valid(c) {
 1711|   110k|            self.output.push(c);
 1712|   110k|            Ok(())
 1713|  1.05k|        } else if c == '%' {
 1714|    982|            self.read_echar()
 1715|       |        } else {
 1716|     77|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   111k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_11parse_query0ECs4x4bMiUCp0I_5oxrdf:
 1705|   341k|    fn read_url_codepoint_or_echar(
 1706|   341k|        &mut self,
 1707|   341k|        c: char,
 1708|   341k|        valid: impl Fn(char) -> bool,
 1709|   341k|    ) -> Result<(), IriParseError> {
 1710|   341k|        if UNCHECKED || valid(c) {
 1711|   340k|            self.output.push(c);
 1712|   340k|            Ok(())
 1713|    843|        } else if c == '%' {
 1714|    743|            self.read_echar()
 1715|       |        } else {
 1716|    100|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   341k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_14parse_fragment0ECs4x4bMiUCp0I_5oxrdf:
 1705|   159k|    fn read_url_codepoint_or_echar(
 1706|   159k|        &mut self,
 1707|   159k|        c: char,
 1708|   159k|        valid: impl Fn(char) -> bool,
 1709|   159k|    ) -> Result<(), IriParseError> {
 1710|   159k|        if UNCHECKED || valid(c) {
 1711|   158k|            self.output.push(c);
 1712|   158k|            Ok(())
 1713|  1.03k|        } else if c == '%' {
 1714|    977|            self.read_echar()
 1715|       |        } else {
 1716|     61|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|   159k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_15parse_authority0ECs4x4bMiUCp0I_5oxrdf:
 1705|  37.8k|    fn read_url_codepoint_or_echar(
 1706|  37.8k|        &mut self,
 1707|  37.8k|        c: char,
 1708|  37.8k|        valid: impl Fn(char) -> bool,
 1709|  37.8k|    ) -> Result<(), IriParseError> {
 1710|  37.8k|        if UNCHECKED || valid(c) {
 1711|  36.6k|            self.output.push(c);
 1712|  36.6k|            Ok(())
 1713|  1.25k|        } else if c == '%' {
 1714|  1.25k|            self.read_echar()
 1715|       |        } else {
 1716|      1|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  37.8k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNCNvB2_19parse_relative_path0ECs4x4bMiUCp0I_5oxrdf:
 1705|  10.2k|    fn read_url_codepoint_or_echar(
 1706|  10.2k|        &mut self,
 1707|  10.2k|        c: char,
 1708|  10.2k|        valid: impl Fn(char) -> bool,
 1709|  10.2k|    ) -> Result<(), IriParseError> {
 1710|  10.2k|        if UNCHECKED || valid(c) {
 1711|  9.55k|            self.output.push(c);
 1712|  9.55k|            Ok(())
 1713|    683|        } else if c == '%' {
 1714|    628|            self.read_echar()
 1715|       |        } else {
 1716|     55|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  10.2k|    }
_RINvMs13_CsikbtAEUxupI_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarNvB7_28is_iunreserved_or_sub_delimsECs4x4bMiUCp0I_5oxrdf:
 1705|  26.5k|    fn read_url_codepoint_or_echar(
 1706|  26.5k|        &mut self,
 1707|  26.5k|        c: char,
 1708|  26.5k|        valid: impl Fn(char) -> bool,
 1709|  26.5k|    ) -> Result<(), IriParseError> {
 1710|  26.5k|        if UNCHECKED || valid(c) {
 1711|  25.2k|            self.output.push(c);
 1712|  25.2k|            Ok(())
 1713|  1.25k|        } else if c == '%' {
 1714|  1.25k|            self.read_echar()
 1715|       |        } else {
 1716|      1|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1717|       |        }
 1718|  26.5k|    }
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10parse_path0Cs4x4bMiUCp0I_5oxrdf:
 1665|   111k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|   111k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|   111k|                })?,
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0Cs4x4bMiUCp0I_5oxrdf:
 1723|  5.80k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0Cs4x4bMiUCp0I_5oxrdf:
 1724|  5.75k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E11parse_query0Cs4x4bMiUCp0I_5oxrdf:
 1679|   341k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|   341k|                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   306k|                })?
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E14parse_fragment0Cs4x4bMiUCp0I_5oxrdf:
 1690|   159k|            self.read_url_codepoint_or_echar(c, |c| {
 1691|   159k|                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|   159k|            })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E15parse_authority0Cs4x4bMiUCp0I_5oxrdf:
 1513|  37.8k|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|  37.8k|                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|  37.8k|                    })?;
_RNCNvMs13_CsikbtAEUxupI_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E19parse_relative_path0Cs4x4bMiUCp0I_5oxrdf:
 1472|  10.2k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
  185|  91.6k|    pub fn into_inner(self) -> T {
  186|  91.6k|        self.iri
  187|  91.6k|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE11is_absoluteCs4x4bMiUCp0I_5oxrdf:
  199|  94.2k|    pub fn is_absolute(&self) -> bool {
  200|  94.2k|        self.positions.scheme_end != 0
  201|  94.2k|    }
_RNvMCsikbtAEUxupI_5oxiriINtB2_6IriRefNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
   58|  97.5k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  97.5k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  94.2k|        Ok(Self { iri, positions })
   61|  97.5k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs4x4bMiUCp0I_5oxrdf:
 1521|  26.9k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1522|  26.9k|        if self.input.starts_with('[') {
 1523|       |            // IP v6
 1524|  3.53k|            let start_position = self.input.position;
 1525|   278k|            while let Some(c) = self.input.next() {
 1526|   278k|                self.output.push(c);
 1527|   278k|                if c == ']' {
 1528|  3.38k|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1529|  3.38k|                    if !UNCHECKED {
 1530|  3.38k|                        if ip.starts_with('v') || ip.starts_with('V') {
 1531|  3.37k|                            self.validate_ip_v_future(ip)?;
 1532|      9|                        } else if let Err(error) = Ipv6Addr::from_str(ip) {
 1533|      7|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1534|      2|                        }
 1535|      0|                    }
 1536|       |
 1537|  2.48k|                    let c = self.input.next();
 1538|  2.48k|                    return match c {
 1539|       |                        Some(':') => {
 1540|    112|                            self.output.push(':');
 1541|    112|                            self.parse_port()
 1542|       |                        }
 1543|       |                        None | Some('/') | Some('?') | Some('#') => {
 1544|    543|                            self.output_positions.authority_end = self.output.len();
 1545|    543|                            self.parse_path_start(c)
 1546|       |                        }
 1547|  1.79k|                        Some(c) => {
 1548|  1.79k|                            if UNCHECKED {
 1549|      0|                                self.output.push(c);
 1550|      0|                                continue;
 1551|       |                            } else {
 1552|  1.79k|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1553|       |                            }
 1554|       |                        }
 1555|       |                    };
 1556|   275k|                }
 1557|       |            }
 1558|    142|            if UNCHECKED {
 1559|       |                // We consider it's valid even if it's not finished
 1560|      0|                self.output_positions.authority_end = self.output.len();
 1561|      0|                self.parse_path_start(None)
 1562|       |            } else {
 1563|    142|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1564|       |            }
 1565|       |        } else {
 1566|       |            // Other host
 1567|       |            loop {
 1568|  49.9k|                let c = self.input.next();
 1569|  49.9k|                match c {
 1570|       |                    Some(':') => {
 1571|  12.0k|                        self.output.push(':');
 1572|  12.0k|                        return self.parse_port();
 1573|       |                    }
 1574|       |                    None | Some('/') | Some('?') | Some('#') => {
 1575|  10.6k|                        self.output_positions.authority_end = self.output.len();
 1576|  10.6k|                        return self.parse_path_start(c);
 1577|       |                    }
 1578|  26.5k|                    Some(c) => self.read_url_codepoint_or_echar(c, is_iunreserved_or_sub_delims)?,
 1579|       |                }
 1580|       |            }
 1581|       |        }
 1582|  26.1k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs4x4bMiUCp0I_5oxrdf:
 1634|  83.2k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1635|       |        loop {
 1636|   212k|            let c = self.input.next();
 1637|   212k|            match c {
 1638|       |                None | Some('/') | Some('?') | Some('#') => {
 1639|  53.9k|                    if self.output.as_str().ends_with("/..") {
 1640|      0|                        self.remove_last_segment();
 1641|      0|                        self.remove_last_segment();
 1642|      0|                        self.output.push('/');
 1643|  53.9k|                    } else if self.output.as_str().ends_with("/.") {
 1644|      0|                        self.remove_last_segment();
 1645|      0|                        self.output.push('/');
 1646|  53.9k|                    } else if c == Some('/') {
 1647|  17.6k|                        self.output.push('/');
 1648|  83.1k|                    }
 1649|       |
 1650|   100k|                    if c == Some('?') {
 1651|  38.8k|                        self.output_positions.path_end = self.output.len();
 1652|  38.8k|                        self.output.push('?');
 1653|  38.8k|                        return self.parse_query();
 1654|  61.9k|                    } else if c == Some('#') {
 1655|  7.96k|                        self.output_positions.path_end = self.output.len();
 1656|  7.96k|                        self.output_positions.query_end = self.output.len();
 1657|  7.96k|                        self.output.push('#');
 1658|  7.96k|                        return self.parse_fragment();
 1659|  53.9k|                    } else if c.is_none() {
 1660|  36.2k|                        self.output_positions.path_end = self.output.len();
 1661|  36.2k|                        self.output_positions.query_end = self.output.len();
 1662|  36.2k|                        return Ok(());
 1663|  17.6k|                    }
 1664|       |                }
 1665|   111k|                Some(c) => self.read_url_codepoint_or_echar(c, |c| {
 1666|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1667|   111k|                })?,
 1668|       |            }
 1669|       |        }
 1670|  83.2k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCs4x4bMiUCp0I_5oxrdf:
 1584|  12.1k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1585|       |        loop {
 1586|  14.1k|            let c = self.input.next();
 1587|  14.1k|            match c {
 1588|       |                Some('/') | Some('?') | Some('#') | None => {
 1589|  5.97k|                    self.output_positions.authority_end = self.output.len();
 1590|  5.97k|                    return self.parse_path_start(c);
 1591|       |                }
 1592|  2.09k|                Some(c) => {
 1593|  2.09k|                    if UNCHECKED || c.is_ascii_digit() {
 1594|  2.03k|                        self.output.push(c)
 1595|       |                    } else {
 1596|     66|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1597|       |                    }
 1598|       |                }
 1599|       |            }
 1600|       |        }
 1601|  6.04k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCs4x4bMiUCp0I_5oxrdf:
 1720|  5.83k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1721|  5.83k|        let c1 = self.input.next();
 1722|  5.83k|        let c2 = self.input.next();
 1723|  5.83k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1724|  5.76k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1725|       |        {
 1726|  5.72k|            self.output.push('%');
 1727|  5.72k|            self.output.push(c1.unwrap());
 1728|  5.72k|            self.output.push(c2.unwrap());
 1729|  5.72k|            Ok(())
 1730|       |        } else {
 1731|    110|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1732|    110|                Some('%'),
 1733|    110|                c1,
 1734|    110|                c2,
 1735|    110|            ]))
 1736|       |        }
 1737|  5.83k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCs4x4bMiUCp0I_5oxrdf:
 1672|  39.8k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1673|   381k|        while let Some(c) = self.input.next() {
 1674|   364k|            if c == '#' {
 1675|  22.9k|                self.output_positions.query_end = self.output.len();
 1676|  22.9k|                self.output.push('#');
 1677|  22.9k|                return self.parse_fragment();
 1678|       |            } else {
 1679|   341k|                self.read_url_codepoint_or_echar(c, |c| {
 1680|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?' | '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1681|   341k|                })?
 1682|       |            }
 1683|       |        }
 1684|  16.8k|        self.output_positions.query_end = self.output.len();
 1685|  16.8k|        Ok(())
 1686|  39.8k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs4x4bMiUCp0I_5oxrdf:
 1362|  92.2k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1363|       |        loop {
 1364|   238k|            let c = self.input.next();
 1365|   238k|            match c {
 1366|   238k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1367|   146k|                    self.output.push(c)
 1368|       |                }
 1369|       |                Some(':') => {
 1370|  91.7k|                    self.output.push(':');
 1371|  91.7k|                    self.output_positions.scheme_end = self.output.len();
 1372|  91.7k|                    self.input_scheme_end = self.input.position;
 1373|  91.7k|                    return if self.input.starts_with('/') {
 1374|  31.5k|                        self.input.next();
 1375|  31.5k|                        self.output.push('/');
 1376|  31.5k|                        self.parse_path_or_authority()
 1377|       |                    } else {
 1378|  60.2k|                        self.output_positions.authority_end = self.output.len();
 1379|  60.2k|                        self.parse_path()
 1380|       |                    };
 1381|       |                }
 1382|       |                _ => {
 1383|    496|                    self.input = ParserInput {
 1384|    496|                        value: self.iri.chars(),
 1385|    496|                        position: 0,
 1386|    496|                    }; // reset
 1387|    496|                    self.output.clear();
 1388|    496|                    return self.parse_relative();
 1389|       |                }
 1390|       |            }
 1391|       |        }
 1392|  92.2k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs4x4bMiUCp0I_5oxrdf:
 1688|  36.7k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1689|   196k|        while let Some(c) = self.input.next() {
 1690|   159k|            self.read_url_codepoint_or_echar(c, |c| {
 1691|       |                is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@' | '/' | '?')
 1692|   159k|            })?;
 1693|       |        }
 1694|  36.7k|        Ok(())
 1695|  36.7k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCs4x4bMiUCp0I_5oxrdf:
 1405|  5.73k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1406|  5.73k|        if let Some(base) = self.base {
 1407|      0|            match self.input.front() {
 1408|       |                None => {
 1409|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1410|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1411|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1412|      0|                    self.output_positions.path_end = base.positions.path_end;
 1413|      0|                    self.output_positions.query_end = base.positions.query_end;
 1414|      0|                    Ok(())
 1415|       |                }
 1416|       |                Some('/') => {
 1417|      0|                    self.input.next();
 1418|      0|                    self.parse_relative_slash(&base)
 1419|       |                }
 1420|       |                Some('?') => {
 1421|      0|                    self.input.next();
 1422|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1423|      0|                    self.output.push('?');
 1424|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1425|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1426|      0|                    self.output_positions.path_end = base.positions.path_end;
 1427|      0|                    self.parse_query()
 1428|       |                }
 1429|       |                Some('#') => {
 1430|      0|                    self.input.next();
 1431|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1432|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1433|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1434|      0|                    self.output_positions.path_end = base.positions.path_end;
 1435|      0|                    self.output_positions.query_end = base.positions.query_end;
 1436|      0|                    self.output.push('#');
 1437|      0|                    self.parse_fragment()
 1438|       |                }
 1439|       |                _ => {
 1440|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1441|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1442|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1443|      0|                    self.output_positions.path_end = base.positions.path_end;
 1444|      0|                    self.remove_last_segment();
 1445|      0|                    if self.output.len() > base.positions.scheme_end {
 1446|      0|                        // We have some path or authority, we keep a base '/'
 1447|      0|                        self.output.push('/');
 1448|      0|                    }
 1449|      0|                    self.parse_relative_path()
 1450|       |                }
 1451|       |            }
 1452|       |        } else {
 1453|  5.73k|            self.output_positions.scheme_end = 0;
 1454|  5.73k|            self.input_scheme_end = 0;
 1455|  5.73k|            if self.input.starts_with('/') {
 1456|  4.09k|                self.input.next();
 1457|  4.09k|                self.output.push('/');
 1458|  4.09k|                self.parse_path_or_authority()
 1459|       |            } else {
 1460|  1.64k|                self.output_positions.authority_end = 0;
 1461|  1.64k|                self.parse_relative_path()
 1462|       |            }
 1463|       |        }
 1464|  5.73k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs4x4bMiUCp0I_5oxrdf:
 1495|  26.9k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1496|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1497|       |        loop {
 1498|  64.8k|            let c = self.input.next();
 1499|  64.8k|            match c {
 1500|       |                Some('@') => {
 1501|     33|                    self.output.push('@');
 1502|     33|                    return self.parse_host();
 1503|       |                }
 1504|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1505|  7.34k|                    self.input = ParserInput {
 1506|  7.34k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1507|  7.34k|                        position: self.input_scheme_end + 2,
 1508|  7.34k|                    };
 1509|  7.34k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1510|  7.34k|                    return self.parse_host();
 1511|       |                }
 1512|  37.8k|                Some(c) => {
 1513|  37.8k|                    self.read_url_codepoint_or_echar(c, |c| {
 1514|       |                        is_iunreserved_or_sub_delims(c) || c == ':'
 1515|  37.8k|                    })?;
 1516|       |                }
 1517|       |            }
 1518|       |        }
 1519|  7.37k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs4x4bMiUCp0I_5oxrdf:
 1603|  24.0k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1604|  24.0k|        match c {
 1605|       |            None => {
 1606|  4.40k|                self.output_positions.path_end = self.output.len();
 1607|  4.40k|                self.output_positions.query_end = self.output.len();
 1608|  4.40k|                Ok(())
 1609|       |            }
 1610|       |            Some('?') => {
 1611|    974|                self.output_positions.path_end = self.output.len();
 1612|    974|                self.output.push('?');
 1613|    974|                self.parse_query()
 1614|       |            }
 1615|       |            Some('#') => {
 1616|  5.90k|                self.output_positions.path_end = self.output.len();
 1617|  5.90k|                self.output_positions.query_end = self.output.len();
 1618|  5.90k|                self.output.push('#');
 1619|  5.90k|                self.parse_fragment()
 1620|       |            }
 1621|       |            Some('/') => {
 1622|  12.7k|                self.output.push('/');
 1623|  12.7k|                self.parse_path()
 1624|       |            }
 1625|      0|            Some(c) => {
 1626|      0|                self.read_url_codepoint_or_echar(c, |c| {
 1627|       |                    is_iunreserved_or_sub_delims(c) || matches!(c, ':' | '@')
 1628|      0|                })?;
 1629|      0|                self.parse_path()
 1630|       |            }
 1631|       |        }
 1632|  24.0k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs4x4bMiUCp0I_5oxrdf:
 1348|  97.5k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1349|  97.5k|        match self.input.front() {
 1350|       |            Some(':') => {
 1351|      9|                if UNCHECKED {
 1352|      0|                    self.parse_scheme()
 1353|       |                } else {
 1354|      9|                    self.parse_error(IriParseErrorKind::NoScheme)
 1355|       |                }
 1356|       |            }
 1357|  97.5k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1358|  5.24k|            _ => self.parse_relative(),
 1359|       |        }
 1360|  97.5k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E19parse_relative_pathCs4x4bMiUCp0I_5oxrdf:
 1466|  1.64k|    fn parse_relative_path(&mut self) -> Result<(), IriParseError> {
 1467|  11.8k|        while let Some(c) = self.input.front() {
 1468|  11.5k|            if matches!(c, '/' | '?' | '#') {
 1469|  1.30k|                break;
 1470|  10.2k|            }
 1471|  10.2k|            self.input.next();
 1472|  10.2k|            self.read_url_codepoint_or_echar(c, |c| is_iunreserved_or_sub_delims(c) || c == '@')?;
 1473|       |        }
 1474|  1.57k|        self.parse_path()
 1475|  1.64k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E20validate_ip_v_futureCs4x4bMiUCp0I_5oxrdf:
 1744|  3.37k|    fn validate_ip_v_future(&self, ip: &str) -> Result<(), IriParseError> {
 1745|  3.37k|        let mut chars = ip.chars();
 1746|       |
 1747|  3.37k|        let c = chars.next().ok_or(IriParseError {
 1748|  3.37k|            kind: IriParseErrorKind::InvalidHostCharacter(']'),
 1749|  3.37k|        })?;
 1750|  3.37k|        if !matches!(c, 'v' | 'V') {
 1751|      0|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1752|  3.37k|        };
 1753|  3.37k|
 1754|  3.37k|        let mut with_a_version = false;
 1755|  10.4k|        for c in &mut chars {
 1756|  10.3k|            if c == '.' {
 1757|  3.23k|                break;
 1758|  7.16k|            } else if c.is_ascii_hexdigit() {
 1759|  7.03k|                with_a_version = true;
 1760|  7.03k|            } else {
 1761|    124|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1762|       |            }
 1763|       |        }
 1764|  3.25k|        if !with_a_version {
 1765|     47|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(
 1766|     47|                chars.next().unwrap_or(']'),
 1767|     47|            ));
 1768|  3.20k|        }
 1769|  3.20k|
 1770|  3.20k|        if chars.as_str().is_empty() {
 1771|     17|            return self.parse_error(IriParseErrorKind::InvalidHostCharacter(']'));
 1772|  3.19k|        };
 1773|   227k|        for c in chars {
 1774|   225k|            if !is_unreserved_or_sub_delims(c) && c != ':' {
 1775|    705|                return self.parse_error(IriParseErrorKind::InvalidHostCharacter(c));
 1776|   224k|            }
 1777|       |        }
 1778|       |
 1779|  2.48k|        Ok(())
 1780|  3.37k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs4x4bMiUCp0I_5oxrdf:
 1394|  35.6k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1395|  35.6k|        if self.input.starts_with('/') {
 1396|  26.9k|            self.input.next();
 1397|  26.9k|            self.output.push('/');
 1398|  26.9k|            self.parse_authority()
 1399|       |        } else {
 1400|  8.71k|            self.output_positions.authority_end = self.output.len() - 1;
 1401|  8.71k|            self.parse_path()
 1402|       |        }
 1403|  35.6k|    }
_RNvMs13_CsikbtAEUxupI_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs4x4bMiUCp0I_5oxrdf:
 1323|  97.5k|    fn parse(
 1324|  97.5k|        iri: &'a str,
 1325|  97.5k|        base: Option<IriRef<&'a str>>,
 1326|  97.5k|        output: &'a mut O,
 1327|  97.5k|    ) -> Result<IriElementsPositions, IriParseError> {
 1328|  97.5k|        let mut parser = Self {
 1329|  97.5k|            iri,
 1330|  97.5k|            base,
 1331|  97.5k|            input: ParserInput {
 1332|  97.5k|                value: iri.chars(),
 1333|  97.5k|                position: 0,
 1334|  97.5k|            },
 1335|  97.5k|            output,
 1336|  97.5k|            output_positions: IriElementsPositions {
 1337|  97.5k|                scheme_end: 0,
 1338|  97.5k|                authority_end: 0,
 1339|  97.5k|                path_end: 0,
 1340|  97.5k|                query_end: 0,
 1341|  97.5k|            },
 1342|  97.5k|            input_scheme_end: 0,
 1343|  97.5k|        };
 1344|  97.5k|        parser.parse_scheme_start()?;
 1345|  94.2k|        Ok(parser.output_positions)
 1346|  97.5k|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE10into_innerCs4x4bMiUCp0I_5oxrdf:
  796|  91.6k|    pub fn into_inner(self) -> T {
  797|  91.6k|        self.0.into_inner()
  798|  91.6k|    }
_RNvMsp_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringE5parseCs4x4bMiUCp0I_5oxrdf:
  556|  97.5k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  97.5k|        IriRef::parse(iri)?.try_into()
  558|  97.5k|    }
_RNvXsV_CsikbtAEUxupI_5oxiriINtB5_3IriNtNtCs8f6x4lOZV33_5alloc6string6StringEINtNtCshZc3FwCJ069_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs4x4bMiUCp0I_5oxrdf:
 1099|  94.2k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
 1100|  94.2k|        if iri.is_absolute() {
 1101|  91.6k|            Ok(Self(iri))
 1102|       |        } else {
 1103|  2.59k|            Err(IriParseError {
 1104|  2.59k|                kind: IriParseErrorKind::NoScheme,
 1105|  2.59k|            })
 1106|       |        }
 1107|  94.2k|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput11starts_withCs4x4bMiUCp0I_5oxrdf:
 1305|   160k|    fn starts_with(&self, c: char) -> bool {
 1306|   160k|        self.value.as_str().starts_with(c)
 1307|   160k|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput4nextCs4x4bMiUCp0I_5oxrdf:
 1290|  1.52M|    fn next(&mut self) -> Option<char> {
 1291|  1.52M|        if let Some(head) = self.value.next() {
 1292|  1.42M|            self.position += head.len_utf8();
 1293|  1.42M|            Some(head)
 1294|       |        } else {
 1295|  98.3k|            None
 1296|       |        }
 1297|  1.52M|    }
_RNvMs12_CsikbtAEUxupI_5oxiriNtB6_11ParserInput5frontCs4x4bMiUCp0I_5oxrdf:
 1300|   109k|    fn front(&self) -> Option<char> {
 1301|   109k|        self.value.clone().next()
 1302|   109k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer3lenCs4x4bMiUCp0I_5oxrdf:
 1241|   373k|    fn len(&self) -> usize {
 1242|   373k|        self.len
 1243|   373k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer4pushCs4x4bMiUCp0I_5oxrdf:
 1221|  1.39M|    fn push(&mut self, c: char) {
 1222|  1.39M|        self.len += c.len_utf8();
 1223|  1.39M|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer5clearCs4x4bMiUCp0I_5oxrdf:
 1231|    496|    fn clear(&mut self) {
 1232|    496|        self.len = 0;
 1233|    496|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer6as_strCs4x4bMiUCp0I_5oxrdf:
 1246|   201k|    fn as_str(&self) -> &str {
 1247|   201k|        ""
 1248|   201k|    }
_RNvXs10_CsikbtAEUxupI_5oxiriNtB6_16VoidOutputBufferNtB6_12OutputBuffer8truncateCs4x4bMiUCp0I_5oxrdf:
 1236|  26.9k|    fn truncate(&mut self, new_len: usize) {
 1237|  26.9k|        self.len = new_len;
 1238|  26.9k|    }
_RNvXsW_CsikbtAEUxupI_5oxiriNtB5_13IriParseErrorNtNtCshZc3FwCJ069_4core3fmt7Display3fmt:
 1134|  5.91k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1135|  5.91k|        match &self.kind {
 1136|  2.60k|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1137|  2.83k|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1138|  2.83k|                write!(f, "Invalid character '{c}' in host")
 1139|       |            }
 1140|      7|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1141|     66|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1142|    295|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1143|    295|                write!(f, "Invalid IRI code point '{c}'")
 1144|       |            }
 1145|    110|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1146|    110|                f,
 1147|    110|                "Invalid IRI percent encoding '{}'",
 1148|    110|                cs.iter().flatten().cloned().collect::<String>()
 1149|    110|            ),
 1150|       |        }
 1151|  5.91k|    }
_RNvCsikbtAEUxupI_5oxiri28is_iunreserved_or_sub_delims:
 1783|   687k|fn is_iunreserved_or_sub_delims(c: char) -> bool {
 1784|   687k|    matches!(c,
 1785|   364k|        'a'..='z'
 1786|   307k|        | 'A'..='Z'
 1787|   296k|        | '0'..='9'
 1788|       |        | '!'
 1789|       |        | '$'
 1790|       |        | '&'
 1791|       |        | '\''
 1792|       |        | '('
 1793|       |        | ')'
 1794|       |        | '*'
 1795|       |        | '+'
 1796|       |        | ','
 1797|       |        | '-'
 1798|       |        | '.'
 1799|       |        | ';'
 1800|       |        | '='
 1801|       |        | '_'
 1802|       |        | '~'
 1803|   170k|        | '\u{A0}'..='\u{D7FF}'
 1804|   141k|        | '\u{F900}'..='\u{FDCF}'
 1805|   141k|        | '\u{FDF0}'..='\u{FFEF}'
 1806|   141k|        | '\u{10000}'..='\u{1FFFD}'
 1807|   141k|        | '\u{20000}'..='\u{2FFFD}'
 1808|   141k|        | '\u{30000}'..='\u{3FFFD}'
 1809|   141k|        | '\u{40000}'..='\u{4FFFD}'
 1810|  9.36k|        | '\u{50000}'..='\u{5FFFD}'
 1811|    223|        | '\u{60000}'..='\u{6FFFD}'
 1812|    179|        | '\u{70000}'..='\u{7FFFD}'
 1813|    151|        | '\u{80000}'..='\u{8FFFD}'
 1814|    151|        | '\u{90000}'..='\u{9FFFD}'
 1815|    151|        | '\u{A0000}'..='\u{AFFFD}'
 1816|    151|        | '\u{B0000}'..='\u{BFFFD}'
 1817|    151|        | '\u{C0000}'..='\u{CFFFD}'
 1818|     22|        | '\u{D0000}'..='\u{DFFFD}'
 1819|     22|        | '\u{E1000}'..='\u{EFFFD}'
 1820|       |    )
 1821|   629k|}
_RNvCsikbtAEUxupI_5oxiri27is_unreserved_or_sub_delims:
 1823|   225k|fn is_unreserved_or_sub_delims(c: char) -> bool {
 1824|   225k|    matches!(c,
 1825|  50.5k|        'a'..='z'
 1826|  45.3k|        | 'A'..='Z'
 1827|  56.0k|        | '0'..='9'
 1828|       |        | '!'
 1829|       |        | '$'
 1830|       |        | '&'
 1831|       |        | '\''
 1832|       |        | '('
 1833|       |        | ')'
 1834|       |        | '*'
 1835|       |        | '+'
 1836|       |        | ','
 1837|       |        | '-'
 1838|       |        | '.'
 1839|       |        | ';'
 1840|       |        | '='
 1841|       |        | '_'
 1842|       |        | '~'
 1843|       |    )
 1844|  41.8k|}

_RNvNtCsfCIapqu81O5_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  22.0k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  22.0k|    let Ok(reader) = QueryResultsParser::from_format(format).for_slice(data) else {
    8|  19.8k|        return;
    9|       |    };
   10|  2.19k|    match reader {
   11|  2.19k|        SliceQueryResultsParserOutput::Solutions(solutions) => {
   12|  2.19k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|    980|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|  1.21k|            let mut serializer = QueryResultsSerializer::from_format(format)
   18|  1.21k|                .serialize_solutions_to_writer(
   19|  1.21k|                    Vec::new(),
   20|  1.21k|                    solutions
   21|  1.21k|                        .first()
   22|  1.21k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|  1.21k|                )
   24|  1.21k|                .unwrap();
   25|  12.6k|            for solution in &solutions {
   26|  11.4k|                serializer.serialize(solution).unwrap();
   27|  11.4k|            }
   28|  1.21k|            let serialized = serializer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|  1.21k|            if let SliceQueryResultsParserOutput::Solutions(roundtrip_solutions) =
   32|  1.21k|                QueryResultsParser::from_format(format)
   33|  1.21k|                    .for_slice(&serialized)
   34|  1.21k|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|  1.21k|                    .unwrap()
   36|       |            {
   37|  1.21k|                assert_eq!(
   38|  1.21k|                    roundtrip_solutions
   39|  1.21k|                        .collect::<Result<Vec<_>, _>>()
   40|  1.21k|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|  1.21k|                        .unwrap(),
   42|  1.21k|                    solutions
   43|  1.21k|                )
   44|      0|            }
   45|       |        }
   46|      2|        SliceQueryResultsParserOutput::Boolean(value) => {
   47|      2|            // We try to write again
   48|      2|            let mut serialized = Vec::new();
   49|      2|            QueryResultsSerializer::from_format(format)
   50|      2|                .serialize_boolean_to_writer(&mut serialized, value)
   51|      2|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      2|            if let SliceQueryResultsParserOutput::Boolean(roundtrip_value) =
   55|      2|                QueryResultsParser::from_format(format)
   56|      2|                    .for_slice(&serialized)
   57|      2|                    .unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  22.0k|}
_RNCNvNtCsfCIapqu81O5_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|  1.20k|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCskZHUDZgyOMC_10sparesults:
   29|  91.6k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  91.6k|        Self::new_unchecked(iri.into_inner())
   31|  91.6k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCs8f6x4lOZV33_5alloc6borrow3CoweEECskZHUDZgyOMC_10sparesults:
   24|  97.5k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  97.5k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  97.5k|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   39|  91.6k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  91.6k|        Self { iri: iri.into() }
   41|  91.6k|    }

_RNvMNtCs4x4bMiUCp0I_5oxrdf8variableNtB2_8Variable6as_refCskZHUDZgyOMC_10sparesults:
   50|     15|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|     15|        VariableRef { name: &self.name }
   52|     15|    }
_RNvMNtCs4x4bMiUCp0I_5oxrdf8variableNtB2_8Variable6as_strCskZHUDZgyOMC_10sparesults:
   40|   128k|    pub fn as_str(&self) -> &str {
   41|   128k|        &self.name
   42|   128k|    }
_RNvXs1_NtCs4x4bMiUCp0I_5oxrdf8variableNtB5_11VariableRefNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCskZHUDZgyOMC_10sparesults:
  116|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|     15|        write!(f, "?{}", self.name)
  118|     15|    }
_RNvXs_NtCs4x4bMiUCp0I_5oxrdf8variableNtB4_8VariableNtNtCshZc3FwCJ069_4core3fmt7Display3fmtCskZHUDZgyOMC_10sparesults:
   57|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|     15|        self.as_ref().fmt(f)
   59|     15|    }
_RINvMNtCs4x4bMiUCp0I_5oxrdf8variableNtB3_8Variable3newINtNtCs8f6x4lOZV33_5alloc6borrow3CoweEECskZHUDZgyOMC_10sparesults:
   22|  87.6k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  87.6k|        let name = name.into();
   24|  87.6k|        validate_variable_identifier(&name)?;
   25|  87.5k|        Ok(Self::new_unchecked(name))
   26|  87.6k|    }
_RNvNtCs4x4bMiUCp0I_5oxrdf8variable28validate_variable_identifier:
  163|  87.6k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  87.6k|    let mut chars = id.chars();
  165|  87.6k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  87.6k|    match front {
  167|  87.5k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  85.4k|        | 'A'..='Z'
  171|  60.4k|        | 'a'..='z'
  172|    291|        | '\u{00C0}'..='\u{00D6}'
  173|    291|        | '\u{00D8}'..='\u{00F6}'
  174|    291|        | '\u{00F8}'..='\u{02FF}'
  175|    279|        | '\u{0370}'..='\u{037D}'
  176|    279|        | '\u{037F}'..='\u{1FFF}'
  177|    206|        | '\u{200C}'..='\u{200D}'
  178|    206|        | '\u{2070}'..='\u{218F}'
  179|    206|        | '\u{2C00}'..='\u{2FEF}'
  180|    206|        | '\u{3001}'..='\u{D7FF}'
  181|    143|        | '\u{F900}'..='\u{FDCF}'
  182|    143|        | '\u{FDF0}'..='\u{FFFD}'
  183|  87.2k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      4|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|   363k|    for c in chars {
  187|   275k|        match c {
  188|   276k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  50.1k|            | '\u{0300}'..='\u{036F}'
  191|  35.8k|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|   261k|            | 'A'..='Z'
  194|   163k|            | 'a'..='z'
  195|  50.5k|            | '\u{00C0}'..='\u{00D6}'
  196|  50.5k|            | '\u{00D8}'..='\u{00F6}'
  197|  50.4k|            | '\u{00F8}'..='\u{02FF}'
  198|  50.1k|            | '\u{0370}'..='\u{037D}'
  199|  50.1k|            | '\u{037F}'..='\u{1FFF}'
  200|  35.8k|            | '\u{200C}'..='\u{200D}'
  201|  35.8k|            | '\u{2070}'..='\u{218F}'
  202|  35.4k|            | '\u{2C00}'..='\u{2FEF}'
  203|  35.4k|            | '\u{3001}'..='\u{D7FF}'
  204|  24.1k|            | '\u{F900}'..='\u{FDCF}'
  205|  24.1k|            | '\u{FDF0}'..='\u{FFFD}'
  206|   276k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      4|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  87.5k|    Ok(())
  211|  87.6k|}
_RINvMNtCs4x4bMiUCp0I_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs8f6x4lOZV33_5alloc6string6StringEB5_:
   35|  87.5k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  87.5k|        Self { name: name.into() }
   37|  87.5k|    }

_RINvMs2_NtCskZHUDZgyOMC_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs8f6x4lOZV33_5alloc6string6StringEB8_:
   86|  6.93k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|  6.93k|        Self(SyntaxErrorKind::Msg {
   88|  6.93k|            msg: msg.into(),
   89|  6.93k|            location: None,
   90|  6.93k|        })
   91|  6.93k|    }
_RINvMs2_NtCskZHUDZgyOMC_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   86|    248|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    248|        Self(SyntaxErrorKind::Msg {
   88|    248|            msg: msg.into(),
   89|    248|            location: None,
   90|    248|        })
   91|    248|    }
_RNvXs4_NtCskZHUDZgyOMC_10sparesults5errorNtB5_23QueryResultsSyntaxErrorINtNtCshZc3FwCJ069_4core7convert4FromNtNtCseBhFvBT36b8_17json_event_parser4read11SyntaxErrorE4from:
  154|  13.6k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  155|  13.6k|        Self(SyntaxErrorKind::Json(error))
  156|  13.6k|    }

_RINvMNtCskZHUDZgyOMC_10sparesults4jsonINtB3_29WriterJsonSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeINtNtNtNtCshZc3FwCJ069_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB3d_25WriterSolutionsSerializerB1b_E9serializeRNtNtCs4x4bMiUCp0I_5oxrdf8variable8VariableRNtNtB4m_6triple4TermRNtB2L_13QuerySolutionE0EECsfCIapqu81O5_13oxigraph_fuzz:
   61|  11.4k|    pub fn serialize<'a>(
   62|  11.4k|        &mut self,
   63|  11.4k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   64|  11.4k|    ) -> io::Result<()> {
   65|  11.4k|        let mut buffer = Vec::with_capacity(48);
   66|  11.4k|        self.inner.write(&mut buffer, solution);
   67|  11.4k|        Self::do_write(&mut self.writer, buffer)
   68|  11.4k|    }
_RINvMs_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_28InnerJsonSolutionsSerializer5writeINtNtNtNtCshZc3FwCJ069_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2z_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeRNtNtCs4x4bMiUCp0I_5oxrdf8variable8VariableRNtNtB4d_6triple4TermRNtB27_13QuerySolutionE0EECsfCIapqu81O5_13oxigraph_fuzz:
  150|  11.4k|    fn write<'a>(
  151|  11.4k|        &self,
  152|  11.4k|        output: &mut Vec<JsonEvent<'a>>,
  153|  11.4k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  154|  11.4k|    ) {
  155|  11.4k|        output.push(JsonEvent::StartObject);
  156|  11.4k|        for (variable, value) in solution {
  157|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  158|      0|            write_json_term(output, value);
  159|      0|        }
  160|  11.4k|        output.push(JsonEvent::EndObject);
  161|  11.4k|    }
_RINvNtCskZHUDZgyOMC_10sparesults4json25write_boolean_json_resultQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
   15|      2|pub fn write_boolean_json_result<W: Write>(writer: W, value: bool) -> io::Result<W> {
   16|      2|    let mut serializer = ToWriteJsonWriter::new(writer);
   17|     14|    for event in inner_write_boolean_json_result(value) {
   18|     14|        serializer.write_event(event)?;
   19|       |    }
   20|      2|    serializer.finish()
   21|      2|}
_RNvMNtCskZHUDZgyOMC_10sparesults4jsonINtB2_29WriterJsonSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE5startCsfCIapqu81O5_13oxigraph_fuzz:
   53|  1.21k|    pub fn start(writer: W, variables: &[Variable]) -> io::Result<Self> {
   54|  1.21k|        let mut writer = ToWriteJsonWriter::new(writer);
   55|  1.21k|        let mut buffer = Vec::with_capacity(48);
   56|  1.21k|        let inner = InnerJsonSolutionsSerializer::start(&mut buffer, variables);
   57|  1.21k|        Self::do_write(&mut writer, buffer)?;
   58|  1.21k|        Ok(Self { inner, writer })
   59|  1.21k|    }
_RNvMNtCskZHUDZgyOMC_10sparesults4jsonINtB2_29WriterJsonSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsfCIapqu81O5_13oxigraph_fuzz:
   70|  1.21k|    pub fn finish(mut self) -> io::Result<W> {
   71|  1.21k|        let mut buffer = Vec::with_capacity(4);
   72|  1.21k|        self.inner.finish(&mut buffer);
   73|  1.21k|        Self::do_write(&mut self.writer, buffer)?;
   74|  1.21k|        self.writer.finish()
   75|  1.21k|    }
_RNvMNtCskZHUDZgyOMC_10sparesults4jsonINtB2_29WriterJsonSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE8do_writeCsfCIapqu81O5_13oxigraph_fuzz:
   77|  13.9k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   78|  95.6k|        for event in output {
   79|  81.7k|            writer.write_event(event)?;
   80|       |        }
   81|  13.9k|        Ok(())
   82|  13.9k|    }
_RNvNtCskZHUDZgyOMC_10sparesults4json31inner_write_boolean_json_result:
   35|      2|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   36|      2|    [
   37|      2|        JsonEvent::StartObject,
   38|      2|        JsonEvent::ObjectKey("head".into()),
   39|      2|        JsonEvent::StartObject,
   40|      2|        JsonEvent::EndObject,
   41|      2|        JsonEvent::ObjectKey("boolean".into()),
   42|      2|        JsonEvent::Boolean(value),
   43|      2|        JsonEvent::EndObject,
   44|      2|    ]
   45|      2|}
_RNvMs_NtCskZHUDZgyOMC_10sparesults4jsonNtB4_28InnerJsonSolutionsSerializer5start:
  131|  1.21k|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  132|  1.21k|        output.push(JsonEvent::StartObject);
  133|  1.21k|        output.push(JsonEvent::ObjectKey("head".into()));
  134|  1.21k|        output.push(JsonEvent::StartObject);
  135|  1.21k|        output.push(JsonEvent::ObjectKey("vars".into()));
  136|  1.21k|        output.push(JsonEvent::StartArray);
  137|  43.0k|        for variable in variables {
  138|  41.8k|            output.push(JsonEvent::String(variable.as_str().into()));
  139|  41.8k|        }
  140|  1.21k|        output.push(JsonEvent::EndArray);
  141|  1.21k|        output.push(JsonEvent::EndObject);
  142|  1.21k|        output.push(JsonEvent::ObjectKey("results".into()));
  143|  1.21k|        output.push(JsonEvent::StartObject);
  144|  1.21k|        output.push(JsonEvent::ObjectKey("bindings".into()));
  145|  1.21k|        output.push(JsonEvent::StartArray);
  146|  1.21k|        Self {}
  147|  1.21k|    }
_RNvMs_NtCskZHUDZgyOMC_10sparesults4jsonNtB4_28InnerJsonSolutionsSerializer6finish:
  164|  1.21k|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  165|  1.21k|        output.push(JsonEvent::EndArray);
  166|  1.21k|        output.push(JsonEvent::EndObject);
  167|  1.21k|        output.push(JsonEvent::EndObject);
  168|  1.21k|    }
_RNvMs2_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_33SliceJsonQueryResultsParserOutput4read:
  346|  23.2k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  347|  23.2k|        let mut json_reader = FromBufferJsonReader::new(slice);
  348|  23.2k|        let mut inner = JsonInnerReader::new();
  349|       |        loop {
  350|  1.55M|            if let Some(result) = inner.read_event(json_reader.read_next_event()?)? {
  351|  3.41k|                return match result {
  352|       |                    JsonInnerQueryResults::Solutions {
  353|  3.40k|                        variables,
  354|  3.40k|                        solutions,
  355|  3.40k|                    } => Ok(Self::Solutions {
  356|  3.40k|                        variables,
  357|  3.40k|                        solutions: SliceJsonSolutionsParser {
  358|  3.40k|                            inner: solutions,
  359|  3.40k|                            json_reader,
  360|  3.40k|                        },
  361|  3.40k|                    }),
  362|      4|                    JsonInnerQueryResults::Boolean(value) => Ok(Self::Boolean(value)),
  363|       |                };
  364|  1.52M|            }
  365|       |        }
  366|  23.2k|    }
_RNvMs3_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_24SliceJsonSolutionsParser10parse_next:
  375|  26.9k|    pub fn parse_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  376|  26.9k|        match &mut self.inner {
  377|  14.2k|            JsonInnerSolutions::Reader(reader) => loop {
  378|   101k|                let event = self.json_reader.read_next_event()?;
  379|   100k|                if event == JsonEvent::Eof {
  380|  1.21k|                    return Ok(None);
  381|  99.3k|                }
  382|  99.3k|                if let Some(result) = reader.read_event(event)? {
  383|  12.0k|                    return Ok(Some(result));
  384|  86.9k|                }
  385|       |            },
  386|  12.6k|            JsonInnerSolutions::Iterator(iter) => iter.next(),
  387|       |        }
  388|  26.9k|    }
_RNvMs4_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_15JsonInnerReader3new:
  450|  23.2k|    fn new() -> Self {
  451|  23.2k|        Self {
  452|  23.2k|            state: JsonInnerReaderState::Start,
  453|  23.2k|            variables: Vec::new(),
  454|  23.2k|            current_solution_variables: Vec::new(),
  455|  23.2k|            current_solution_values: Vec::new(),
  456|  23.2k|            solutions: Vec::new(),
  457|  23.2k|            vars_read: false,
  458|  23.2k|            solutions_read: false,
  459|  23.2k|        }
  460|  23.2k|    }
_RNvMs4_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_15JsonInnerReader10read_event:
  462|  1.53M|    fn read_event(
  463|  1.53M|        &mut self,
  464|  1.53M|        event: JsonEvent<'_>,
  465|  1.53M|    ) -> Result<Option<JsonInnerQueryResults>, QueryResultsSyntaxError> {
  466|  1.53M|        match &mut self.state {
  467|       |            JsonInnerReaderState::Start => {
  468|  19.7k|                if event == JsonEvent::StartObject {
  469|  19.6k|                    self.state = JsonInnerReaderState::InRootObject;
  470|  19.6k|                    Ok(None)
  471|       |                } else {
  472|    111|                    Err(QueryResultsSyntaxError::msg(
  473|    111|                        "SPARQL JSON results must be an object",
  474|    111|                    ))
  475|       |                }
  476|       |            }
  477|   111k|            JsonInnerReaderState::InRootObject => match event {
  478|   111k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  479|   111k|                    "head" => {
  480|  17.2k|                        self.state = JsonInnerReaderState::BeforeHead;
  481|  17.2k|                        Ok(None)
  482|       |                    }
  483|  93.7k|                    "results" => {
  484|  16.2k|                        self.state = JsonInnerReaderState::BeforeResults;
  485|  16.2k|                        Ok(None)
  486|       |                    }
  487|  77.5k|                    "boolean" => {
  488|      6|                        self.state = JsonInnerReaderState::BeforeBoolean;
  489|      6|                        Ok(None)
  490|       |                    }
  491|       |                    _ => {
  492|  77.5k|                        self.state = JsonInnerReaderState::Ignore {
  493|  77.5k|                            level: 0,
  494|  77.5k|                            after: JsonInnerReaderStateAfterIgnore::InRootObject,
  495|  77.5k|                        };
  496|  77.5k|                        Ok(None)
  497|       |                    }
  498|       |                },
  499|     41|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  500|     41|                    "SPARQL JSON results must contain a 'boolean' or a 'results' key",
  501|     41|                )),
  502|      0|                _ => unreachable!(),
  503|       |            },
  504|       |            JsonInnerReaderState::BeforeHead => {
  505|  17.2k|                if event == JsonEvent::StartObject {
  506|  17.2k|                    self.state = JsonInnerReaderState::InHead;
  507|  17.2k|                    Ok(None)
  508|       |                } else {
  509|      1|                    Err(QueryResultsSyntaxError::msg(
  510|      1|                        "SPARQL JSON results head must be an object",
  511|      1|                    ))
  512|       |                }
  513|       |            }
  514|   109k|            JsonInnerReaderState::InHead => match event {
  515|  94.3k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  516|  94.3k|                    "vars" => {
  517|  7.01k|                        self.state = JsonInnerReaderState::BeforeVars;
  518|  7.01k|                        self.vars_read = true;
  519|  7.01k|                        Ok(None)
  520|       |                    }
  521|  87.3k|                    "links" => {
  522|     28|                        self.state = JsonInnerReaderState::BeforeLinks;
  523|     28|                        Ok(None)
  524|       |                    }
  525|       |                    _ => {
  526|  87.3k|                        self.state = JsonInnerReaderState::Ignore {
  527|  87.3k|                            level: 0,
  528|  87.3k|                            after: JsonInnerReaderStateAfterIgnore::InHead,
  529|  87.3k|                        };
  530|  87.3k|                        Ok(None)
  531|       |                    }
  532|       |                },
  533|       |                JsonEvent::EndObject => {
  534|  15.0k|                    self.state = JsonInnerReaderState::InRootObject;
  535|  15.0k|                    Ok(None)
  536|       |                }
  537|      0|                _ => unreachable!(),
  538|       |            },
  539|       |            JsonInnerReaderState::BeforeVars => {
  540|  7.00k|                if event == JsonEvent::StartArray {
  541|  7.00k|                    self.state = JsonInnerReaderState::InVars;
  542|  7.00k|                    Ok(None)
  543|       |                } else {
  544|      1|                    Err(QueryResultsSyntaxError::msg(
  545|      1|                        "SPARQL JSON results vars must be an array",
  546|      1|                    ))
  547|       |                }
  548|       |            }
  549|  94.4k|            JsonInnerReaderState::InVars => match event {
  550|  87.6k|                JsonEvent::String(variable) => match Variable::new(variable.clone()) {
  551|  87.5k|                    Ok(var) => {
  552|  87.5k|                        if self.variables.contains(&var) {
  553|     15|                            return Err(QueryResultsSyntaxError::msg(format!(
  554|     15|                                "The variable {var} is declared twice"
  555|     15|                            )));
  556|  87.5k|                        }
  557|  87.5k|                        self.variables.push(var);
  558|  87.5k|                        Ok(None)
  559|       |                    }
  560|      9|                    Err(e) => Err(QueryResultsSyntaxError::msg(format!(
  561|      9|                        "Invalid variable name '{variable}': {e}"
  562|      9|                    ))),
  563|       |                },
  564|       |                JsonEvent::EndArray => {
  565|  6.85k|                    if self.solutions_read {
  566|  1.20k|                        let mut mapping = BTreeMap::default();
  567|  41.8k|                        for (i, var) in self.variables.iter().enumerate() {
  568|  41.8k|                            mapping.insert(var.as_str().to_owned(), i);
  569|  41.8k|                        }
  570|  1.20k|                        Ok(Some(JsonInnerQueryResults::Solutions {
  571|  1.20k|                            variables: take(&mut self.variables),
  572|  1.20k|                            solutions: JsonInnerSolutions::Iterator(
  573|  1.20k|                                JsonBufferedSolutionsIterator {
  574|  1.20k|                                    mapping,
  575|  1.20k|                                    bindings: take(&mut self.solutions).into_iter(),
  576|  1.20k|                                },
  577|  1.20k|                            ),
  578|  1.20k|                        }))
  579|       |                    } else {
  580|  5.64k|                        self.state = JsonInnerReaderState::InHead;
  581|  5.64k|                        Ok(None)
  582|       |                    }
  583|       |                }
  584|      1|                _ => Err(QueryResultsSyntaxError::msg(
  585|      1|                    "Variables name in the vars array must be strings",
  586|      1|                )),
  587|       |            },
  588|       |            JsonInnerReaderState::BeforeLinks => {
  589|     28|                if event == JsonEvent::StartArray {
  590|     27|                    self.state = JsonInnerReaderState::InLinks;
  591|     27|                    Ok(None)
  592|       |                } else {
  593|      1|                    Err(QueryResultsSyntaxError::msg(
  594|      1|                        "SPARQL JSON results links must be an array",
  595|      1|                    ))
  596|       |                }
  597|       |            }
  598|  2.13k|            JsonInnerReaderState::InLinks => match event {
  599|  2.13k|                JsonEvent::String(_) => Ok(None),
  600|       |                JsonEvent::EndArray => {
  601|      3|                    self.state = JsonInnerReaderState::InHead;
  602|      3|                    Ok(None)
  603|       |                }
  604|      1|                _ => Err(QueryResultsSyntaxError::msg(
  605|      1|                    "Links in the links array must be strings",
  606|      1|                )),
  607|       |            },
  608|       |            JsonInnerReaderState::BeforeResults => {
  609|  16.2k|                if event == JsonEvent::StartObject {
  610|  16.2k|                    self.state = JsonInnerReaderState::InResults;
  611|  16.2k|                    Ok(None)
  612|       |                } else {
  613|      1|                    Err(QueryResultsSyntaxError::msg(
  614|      1|                        "SPARQL JSON results result must be an object",
  615|      1|                    ))
  616|       |                }
  617|       |            }
  618|  40.4k|            JsonInnerReaderState::InResults => match event {
  619|  40.4k|                JsonEvent::ObjectKey(key) => {
  620|  40.4k|                    if key == "bindings" {
  621|  15.8k|                        self.state = JsonInnerReaderState::BeforeBindings;
  622|  15.8k|                        Ok(None)
  623|       |                    } else {
  624|  24.6k|                        self.state = JsonInnerReaderState::Ignore {
  625|  24.6k|                            level: 0,
  626|  24.6k|                            after: JsonInnerReaderStateAfterIgnore::InResults,
  627|  24.6k|                        };
  628|  24.6k|                        Ok(None)
  629|       |                    }
  630|       |                }
  631|     36|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  632|     36|                    "The results object must contains a 'bindings' key",
  633|     36|                )),
  634|      0|                _ => unreachable!(),
  635|       |            },
  636|       |            JsonInnerReaderState::BeforeBindings => {
  637|  15.8k|                if event == JsonEvent::StartArray {
  638|  15.8k|                    self.solutions_read = true;
  639|  15.8k|                    if self.vars_read {
  640|  2.19k|                        let mut mapping = BTreeMap::default();
  641|  45.2k|                        for (i, var) in self.variables.iter().enumerate() {
  642|  45.2k|                            mapping.insert(var.as_str().to_owned(), i);
  643|  45.2k|                        }
  644|  2.19k|                        Ok(Some(JsonInnerQueryResults::Solutions {
  645|  2.19k|                            variables: take(&mut self.variables),
  646|  2.19k|                            solutions: JsonInnerSolutions::Reader(JsonInnerSolutionsParser {
  647|  2.19k|                                state: JsonInnerSolutionsParserState::BeforeSolution,
  648|  2.19k|                                mapping,
  649|  2.19k|                                new_bindings: Vec::new(),
  650|  2.19k|                            }),
  651|  2.19k|                        }))
  652|       |                    } else {
  653|  13.6k|                        self.state = JsonInnerReaderState::BeforeSolution;
  654|  13.6k|                        Ok(None)
  655|       |                    }
  656|       |                } else {
  657|      1|                    Err(QueryResultsSyntaxError::msg(
  658|      1|                        "SPARQL JSON results bindings must be an array",
  659|      1|                    ))
  660|       |                }
  661|       |            }
  662|  27.1k|            JsonInnerReaderState::BeforeSolution => match event {
  663|       |                JsonEvent::StartObject => {
  664|  23.0k|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  665|  23.0k|                    Ok(None)
  666|       |                }
  667|       |                JsonEvent::EndArray => {
  668|  4.03k|                    self.state = JsonInnerReaderState::AfterBindings;
  669|  4.03k|                    Ok(None)
  670|       |                }
  671|      1|                _ => Err(QueryResultsSyntaxError::msg(
  672|      1|                    "Expecting a new solution object",
  673|      1|                )),
  674|       |            },
  675|  23.0k|            JsonInnerReaderState::BetweenSolutionTerms => match event {
  676|  9.56k|                JsonEvent::ObjectKey(key) => {
  677|  9.56k|                    self.state = JsonInnerReaderState::Term {
  678|  9.56k|                        reader: JsonInnerTermReader::default(),
  679|  9.56k|                        variable: key.into(),
  680|  9.56k|                    };
  681|  9.56k|                    Ok(None)
  682|       |                }
  683|       |                JsonEvent::EndObject => {
  684|  13.5k|                    self.state = JsonInnerReaderState::BeforeSolution;
  685|  13.5k|                    self.solutions.push((
  686|  13.5k|                        take(&mut self.current_solution_variables),
  687|  13.5k|                        take(&mut self.current_solution_values),
  688|  13.5k|                    ));
  689|  13.5k|                    Ok(None)
  690|       |                }
  691|      0|                _ => unreachable!(),
  692|       |            },
  693|       |            JsonInnerReaderState::Term {
  694|   389k|                ref mut reader,
  695|   389k|                variable,
  696|   389k|            } => {
  697|   389k|                let result = reader.read_event(event);
  698|   389k|                if let Some(term) = result? {
  699|      0|                    self.current_solution_variables.push(take(variable));
  700|      0|                    self.current_solution_values.push(term);
  701|      0|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  702|   382k|                }
  703|   382k|                Ok(None)
  704|       |            }
  705|       |            JsonInnerReaderState::AfterBindings => {
  706|  29.9k|                if event == JsonEvent::EndObject {
  707|  3.72k|                    self.state = JsonInnerReaderState::InRootObject;
  708|  3.72k|                } else {
  709|  26.1k|                    self.state = JsonInnerReaderState::Ignore {
  710|  26.1k|                        level: 0,
  711|  26.1k|                        after: JsonInnerReaderStateAfterIgnore::AfterBindings,
  712|  26.1k|                    }
  713|       |                }
  714|  29.9k|                Ok(None)
  715|       |            }
  716|       |            JsonInnerReaderState::BeforeBoolean => {
  717|      5|                if let JsonEvent::Boolean(v) = event {
  718|      4|                    Ok(Some(JsonInnerQueryResults::Boolean(v)))
  719|       |                } else {
  720|      1|                    Err(QueryResultsSyntaxError::msg("Unexpected boolean value"))
  721|       |                }
  722|       |            }
  723|       |            #[allow(clippy::ref_patterns)]
  724|   636k|            JsonInnerReaderState::Ignore { level, ref after } => {
  725|   636k|                let level = match event {
  726|   171k|                    JsonEvent::StartArray | JsonEvent::StartObject => *level + 1,
  727|  62.8k|                    JsonEvent::EndArray | JsonEvent::EndObject => *level - 1,
  728|       |                    JsonEvent::String(_)
  729|       |                    | JsonEvent::Number(_)
  730|       |                    | JsonEvent::Boolean(_)
  731|       |                    | JsonEvent::Null
  732|       |                    | JsonEvent::ObjectKey(_)
  733|   402k|                    | JsonEvent::Eof => *level,
  734|       |                };
  735|   636k|                self.state = if level == 0 {
  736|   211k|                    match after {
  737|       |                        JsonInnerReaderStateAfterIgnore::InRootObject => {
  738|  74.6k|                            JsonInnerReaderState::InRootObject
  739|       |                        }
  740|  86.9k|                        JsonInnerReaderStateAfterIgnore::InHead => JsonInnerReaderState::InHead,
  741|       |                        JsonInnerReaderStateAfterIgnore::InResults => {
  742|  24.2k|                            JsonInnerReaderState::InResults
  743|       |                        }
  744|       |                        JsonInnerReaderStateAfterIgnore::AfterBindings => {
  745|  25.8k|                            JsonInnerReaderState::AfterBindings
  746|       |                        }
  747|       |                    }
  748|       |                } else {
  749|   424k|                    JsonInnerReaderState::Ignore {
  750|   424k|                        level,
  751|   424k|                        after: *after,
  752|   424k|                    }
  753|       |                };
  754|   636k|                Ok(None)
  755|       |            }
  756|       |        }
  757|  1.53M|    }
_RNvMs5_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_24JsonInnerSolutionsParser10read_event:
  777|  99.3k|    fn read_event(
  778|  99.3k|        &mut self,
  779|  99.3k|        event: JsonEvent<'_>,
  780|  99.3k|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  781|  99.3k|        match &mut self.state {
  782|  14.1k|            JsonInnerSolutionsParserState::BeforeSolution => match event {
  783|       |                JsonEvent::StartObject => {
  784|  12.9k|                    self.state = JsonInnerSolutionsParserState::BetweenSolutionTerms;
  785|  12.9k|                    self.new_bindings = vec![None; self.mapping.len()];
  786|  12.9k|                    Ok(None)
  787|       |                }
  788|       |                JsonEvent::EndArray => {
  789|  1.22k|                    self.state = JsonInnerSolutionsParserState::AfterEnd;
  790|  1.22k|                    Ok(None)
  791|       |                }
  792|      3|                _ => Err(QueryResultsSyntaxError::msg(
  793|      3|                    "Expecting a new solution object",
  794|      3|                )),
  795|       |            },
  796|  12.9k|            JsonInnerSolutionsParserState::BetweenSolutionTerms => match event {
  797|    835|                JsonEvent::ObjectKey(key) => {
  798|    835|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  799|       |                        QueryResultsSyntaxError::msg(format!(
  800|       |                            "The variable {key} has not been defined in the header"
  801|       |                        ))
  802|    835|                    })?;
  803|    824|                    self.state = JsonInnerSolutionsParserState::Term {
  804|    824|                        reader: JsonInnerTermReader::default(),
  805|    824|                        key,
  806|    824|                    };
  807|    824|                    Ok(None)
  808|       |                }
  809|       |                JsonEvent::EndObject => {
  810|  12.0k|                    self.state = JsonInnerSolutionsParserState::BeforeSolution;
  811|  12.0k|                    Ok(Some(take(&mut self.new_bindings)))
  812|       |                }
  813|      0|                _ => unreachable!(),
  814|       |            },
  815|       |            JsonInnerSolutionsParserState::Term {
  816|  69.8k|                ref mut reader,
  817|  69.8k|                key,
  818|  69.8k|            } => {
  819|  69.8k|                let result = reader.read_event(event);
  820|  69.8k|                if let Some(term) = result? {
  821|      0|                    self.new_bindings[*key] = Some(term);
  822|      0|                    self.state = JsonInnerSolutionsParserState::BetweenSolutionTerms;
  823|  69.5k|                }
  824|  69.5k|                Ok(None)
  825|       |            }
  826|       |            JsonInnerSolutionsParserState::AfterEnd => {
  827|  2.44k|                if event == JsonEvent::EndObject {
  828|  2.44k|                    Ok(None)
  829|       |                } else {
  830|      2|                    Err(QueryResultsSyntaxError::msg(
  831|      2|                        "Unexpected JSON after the end of the bindings array",
  832|      2|                    ))
  833|       |                }
  834|       |            }
  835|       |        }
  836|  99.3k|    }
_RNvMs6_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_19JsonInnerTermReader10read_event:
  882|  8.49M|    fn read_event(
  883|  8.49M|        &mut self,
  884|  8.49M|        event: JsonEvent<'_>,
  885|  8.49M|    ) -> Result<Option<Term>, QueryResultsSyntaxError> {
  886|  8.49M|        match &mut self.state {
  887|       |            JsonInnerTermReaderState::Start => {
  888|  61.1k|                if event == JsonEvent::StartObject {
  889|  61.1k|                    self.state = JsonInnerTermReaderState::Middle;
  890|  61.1k|                    Ok(None)
  891|       |                } else {
  892|     34|                    Err(QueryResultsSyntaxError::msg(
  893|     34|                        "RDF terms must be encoded using objects",
  894|     34|                    ))
  895|       |                }
  896|       |            }
  897|   174k|            JsonInnerTermReaderState::Middle => match event {
  898|   174k|                JsonEvent::ObjectKey(object_key) => {
  899|   174k|                    self.state = match object_key.as_ref() {
  900|   174k|                        "type" => JsonInnerTermReaderState::TermType,
  901|   173k|                        "value" => JsonInnerTermReaderState::Value,
  902|   101k|                        "datatype" => JsonInnerTermReaderState::Datatype,
  903|  4.14k|                        "xml:lang" => JsonInnerTermReaderState::Lang,
  904|       |                        _ => {
  905|    888|                            return Err(QueryResultsSyntaxError::msg(format!(
  906|    888|                                "Unsupported term key: {object_key}"
  907|    888|                            )));
  908|       |                        }
  909|       |                    };
  910|   173k|                    Ok(None)
  911|       |                }
  912|       |                JsonEvent::EndObject => {
  913|      5|                    self.state = JsonInnerTermReaderState::Start;
  914|      5|                    match self.term_type.take() {
  915|      1|                        None => Err(QueryResultsSyntaxError::msg(
  916|      1|                            "Term serialization should have a 'type' key",
  917|      1|                        )),
  918|       |                        Some(TermType::Uri) => Ok(Some(
  919|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  920|       |                                QueryResultsSyntaxError::msg(
  921|       |                                    "uri serialization should have a 'value' key",
  922|       |                                )
  923|      1|                            })?)
  924|      0|                            .map_err(|e| {
  925|       |                                QueryResultsSyntaxError::msg(format!("Invalid uri value: {e}"))
  926|      0|                            })?
  927|      0|                            .into(),
  928|       |                        )),
  929|       |                        Some(TermType::BNode) => Ok(Some(
  930|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  931|       |                                QueryResultsSyntaxError::msg(
  932|       |                                    "bnode serialization should have a 'value' key",
  933|       |                                )
  934|      1|                            })?)
  935|      0|                            .map_err(|e| {
  936|       |                                QueryResultsSyntaxError::msg(format!("Invalid bnode value: {e}"))
  937|      0|                            })?
  938|      0|                            .into(),
  939|       |                        )),
  940|       |                        Some(TermType::Literal) => {
  941|      1|                            let value = self.value.take().ok_or_else(|| {
  942|       |                                QueryResultsSyntaxError::msg(
  943|       |                                    "literal serialization should have a 'value' key",
  944|       |                                )
  945|      1|                            })?;
  946|      0|                            Ok(Some(match self.lang.take() {
  947|      0|                                    Some(lang) => {
  948|      0|                                        if let Some(datatype) = &self.datatype {
  949|      0|                                            if datatype.as_ref() != rdf::LANG_STRING {
  950|      0|                                                return Err(QueryResultsSyntaxError::msg(format!(
  951|      0|                                                    "xml:lang value '{lang}' provided with the datatype {datatype}"
  952|      0|                                                )));
  953|      0|                                            }
  954|      0|                                        }
  955|      0|                                        Literal::new_language_tagged_literal(value, &*lang)
  956|      0|                                            .map_err(|e| {
  957|       |                                                QueryResultsSyntaxError::msg(format!(
  958|       |                                                    "Invalid xml:lang value '{lang}': {e}"
  959|       |                                                ))
  960|      0|                                            })?
  961|       |                                    }
  962|       |                                    None => {
  963|      0|                                        if let Some(datatype) = self.datatype.take() {
  964|      0|                                            Literal::new_typed_literal(value, datatype)
  965|       |                                        } else {
  966|      0|                                            Literal::new_simple_literal(value)
  967|       |                                        }
  968|       |                                    }
  969|      0|                                }.into()))
  970|       |                        }
  971|       |                        #[cfg(feature = "rdf-star")]
  972|       |                        Some(TermType::Triple) => Ok(Some(
  973|       |                            Triple::new(
  974|      1|                                match self.subject.take().ok_or_else(|| {
  975|       |                                    QueryResultsSyntaxError::msg(
  976|       |                                        "triple serialization should have a 'subject' key",
  977|       |                                    )
  978|      1|                                })? {
  979|      0|                                    Term::NamedNode(subject) => subject.into(),
  980|      0|                                    Term::BlankNode(subject) => subject.into(),
  981|      0|                                    Term::Triple(subject) => Subject::Triple(subject),
  982|       |                                    Term::Literal(_) => {
  983|      0|                                        return Err(QueryResultsSyntaxError::msg(
  984|      0|                                            "The 'subject' value should not be a literal",
  985|      0|                                        ));
  986|       |                                    }
  987|       |                                },
  988|      0|                                match self.predicate.take().ok_or_else(|| {
  989|       |                                    QueryResultsSyntaxError::msg(
  990|       |                                        "triple serialization should have a 'predicate' key",
  991|       |                                    )
  992|      0|                                })? {
  993|      0|                                    Term::NamedNode(predicate) => predicate,
  994|       |                                    _ => {
  995|      0|                                        return Err(QueryResultsSyntaxError::msg(
  996|      0|                                            "The 'predicate' value should be a uri",
  997|      0|                                        ));
  998|       |                                    }
  999|       |                                },
 1000|      0|                                self.object.take().ok_or_else(|| {
 1001|       |                                    QueryResultsSyntaxError::msg(
 1002|       |                                        "triple serialization should have a 'object' key",
 1003|       |                                    )
 1004|      0|                                })?,
 1005|       |                            )
 1006|      0|                            .into(),
 1007|       |                        )),
 1008|       |                    }
 1009|       |                }
 1010|      0|                _ => unreachable!(),
 1011|       |            },
 1012|       |            JsonInnerTermReaderState::TermType => {
 1013|    171|                self.state = JsonInnerTermReaderState::Middle;
 1014|    171|                if let JsonEvent::String(value) = event {
 1015|    167|                    match value.as_ref() {
 1016|    167|                        "uri" => {
 1017|     91|                            self.term_type = Some(TermType::Uri);
 1018|     91|                            Ok(None)
 1019|       |                        }
 1020|     76|                        "bnode" => {
 1021|     19|                            self.term_type = Some(TermType::BNode);
 1022|     19|                            Ok(None)
 1023|       |                        }
 1024|     57|                        "literal" | "typed-literal" => {
 1025|     30|                            self.term_type = Some(TermType::Literal);
 1026|     30|                            Ok(None)
 1027|       |                        }
 1028|       |                        #[cfg(feature = "rdf-star")]
 1029|     27|                        "triple" => {
 1030|     20|                            self.term_type = Some(TermType::Triple);
 1031|     20|                            Ok(None)
 1032|       |                        }
 1033|      7|                        _ => Err(QueryResultsSyntaxError::msg(format!(
 1034|      7|                            "Unexpected term type: '{value}'"
 1035|      7|                        ))),
 1036|       |                    }
 1037|       |                } else {
 1038|      4|                    Err(QueryResultsSyntaxError::msg("Term type must be a string"))
 1039|       |                }
 1040|       |            }
 1041|  71.8k|            JsonInnerTermReaderState::Value => match event {
 1042|  20.7k|                JsonEvent::String(value) => {
 1043|  20.7k|                    self.value = Some(value.into_owned());
 1044|  20.7k|                    self.state = JsonInnerTermReaderState::Middle;
 1045|  20.7k|                    Ok(None)
 1046|       |                }
 1047|       |                #[cfg(feature = "rdf-star")]
 1048|       |                JsonEvent::StartObject => {
 1049|  51.1k|                    self.state = JsonInnerTermReaderState::InValue;
 1050|  51.1k|                    Ok(None)
 1051|       |                }
 1052|       |                _ => {
 1053|      1|                    self.state = JsonInnerTermReaderState::Middle;
 1054|      1|
 1055|      1|                    Err(QueryResultsSyntaxError::msg("Term value must be a string"))
 1056|       |                }
 1057|       |            },
 1058|       |            JsonInnerTermReaderState::Lang => {
 1059|  3.24k|                let result = if let JsonEvent::String(value) = event {
 1060|  3.24k|                    self.lang = Some(value.into_owned());
 1061|  3.24k|                    Ok(None)
 1062|       |                } else {
 1063|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1064|       |                };
 1065|  3.24k|                self.state = JsonInnerTermReaderState::Middle;
 1066|  3.24k|
 1067|  3.24k|                result
 1068|       |            }
 1069|       |            JsonInnerTermReaderState::Datatype => {
 1070|  97.5k|                let result = if let JsonEvent::String(value) = event {
 1071|  97.5k|                    match NamedNode::new(value) {
 1072|  91.6k|                        Ok(datatype) => {
 1073|  91.6k|                            self.datatype = Some(datatype);
 1074|  91.6k|                            Ok(None)
 1075|       |                        }
 1076|  5.91k|                        Err(e) => Err(QueryResultsSyntaxError::msg(format!(
 1077|  5.91k|                            "Invalid datatype: {e}"
 1078|  5.91k|                        ))),
 1079|       |                    }
 1080|       |                } else {
 1081|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1082|       |                };
 1083|  97.5k|                self.state = JsonInnerTermReaderState::Middle;
 1084|  97.5k|
 1085|  97.5k|                result
 1086|       |            }
 1087|       |            #[cfg(feature = "rdf-star")]
 1088|  51.0k|            JsonInnerTermReaderState::InValue => match event {
 1089|  51.0k|                JsonEvent::ObjectKey(object_key) => {
 1090|  51.0k|                    self.state = match object_key.as_ref() {
 1091|  51.0k|                        "subject" => JsonInnerTermReaderState::Subject(Box::default()),
 1092|  50.1k|                        "predicate" => JsonInnerTermReaderState::Predicate(Box::default()),
 1093|  1.43k|                        "object" => JsonInnerTermReaderState::Object(Box::default()),
 1094|       |                        _ => {
 1095|     87|                            return Err(QueryResultsSyntaxError::msg(format!(
 1096|     87|                                "Unsupported value key: {object_key}"
 1097|     87|                            )));
 1098|       |                        }
 1099|       |                    };
 1100|  50.9k|                    Ok(None)
 1101|       |                }
 1102|       |                JsonEvent::EndObject => {
 1103|     66|                    self.state = JsonInnerTermReaderState::Middle;
 1104|     66|                    Ok(None)
 1105|       |                }
 1106|      0|                _ => unreachable!(),
 1107|       |            },
 1108|       |            #[cfg(feature = "rdf-star")]
 1109|  24.3k|            JsonInnerTermReaderState::Subject(ref mut inner_state) => {
 1110|  24.3k|                if let Some(term) = inner_state.read_event(event)? {
 1111|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1112|      0|                    self.subject = Some(term);
 1113|  24.0k|                }
 1114|  24.0k|                Ok(None)
 1115|       |            }
 1116|       |            #[cfg(feature = "rdf-star")]
 1117|  7.90M|            JsonInnerTermReaderState::Predicate(ref mut inner_state) => {
 1118|  7.90M|                if let Some(term) = inner_state.read_event(event)? {
 1119|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1120|      0|                    self.predicate = Some(term);
 1121|  7.87M|                }
 1122|  7.87M|                Ok(None)
 1123|       |            }
 1124|       |            #[cfg(feature = "rdf-star")]
 1125|   106k|            JsonInnerTermReaderState::Object(ref mut inner_state) => {
 1126|   106k|                if let Some(term) = inner_state.read_event(event)? {
 1127|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1128|      0|                    self.object = Some(term);
 1129|   105k|                }
 1130|   105k|                Ok(None)
 1131|       |            }
 1132|       |        }
 1133|  8.49M|    }
_RNvMs7_NtCskZHUDZgyOMC_10sparesults4jsonNtB5_29JsonBufferedSolutionsIterator4next:
 1142|  12.6k|    fn next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
 1143|  12.6k|        let Some((variables, values)) = self.bindings.next() else {
 1144|  1.20k|            return Ok(None);
 1145|       |        };
 1146|  11.4k|        let mut new_bindings = vec![None; self.mapping.len()];
 1147|  11.4k|        for (variable, value) in variables.into_iter().zip(values) {
 1148|      0|            let k = *self.mapping.get(&variable).ok_or_else(|| {
 1149|       |                QueryResultsSyntaxError::msg(format!(
 1150|       |                    "The variable {variable} has not been defined in the header"
 1151|       |                ))
 1152|      0|            })?;
 1153|      0|            new_bindings[k] = Some(value);
 1154|       |        }
 1155|  11.4k|        Ok(Some(new_bindings))
 1156|  12.6k|    }
_RNCNvMs5_NtCskZHUDZgyOMC_10sparesults4jsonNtB7_24JsonInnerSolutionsParser10read_event0B9_:
  798|     11|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  799|     11|                        QueryResultsSyntaxError::msg(format!(
  800|     11|                            "The variable {key} has not been defined in the header"
  801|     11|                        ))
  802|     11|                    })?;
_RNCNvMs6_NtCskZHUDZgyOMC_10sparesults4jsonNtB7_19JsonInnerTermReader10read_event0B9_:
  919|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  920|      1|                                QueryResultsSyntaxError::msg(
  921|      1|                                    "uri serialization should have a 'value' key",
  922|      1|                                )
  923|      1|                            })?)
_RNCNvMs6_NtCskZHUDZgyOMC_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events0_0B9_:
  930|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  931|      1|                                QueryResultsSyntaxError::msg(
  932|      1|                                    "bnode serialization should have a 'value' key",
  933|      1|                                )
  934|      1|                            })?)
_RNCNvMs6_NtCskZHUDZgyOMC_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events2_0B9_:
  941|      1|                            let value = self.value.take().ok_or_else(|| {
  942|      1|                                QueryResultsSyntaxError::msg(
  943|      1|                                    "literal serialization should have a 'value' key",
  944|      1|                                )
  945|      1|                            })?;
_RNCNvMs6_NtCskZHUDZgyOMC_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events4_0B9_:
  974|      1|                                match self.subject.take().ok_or_else(|| {
  975|      1|                                    QueryResultsSyntaxError::msg(
  976|      1|                                        "triple serialization should have a 'subject' key",
  977|      1|                                    )
  978|      1|                                })? {

_RNvMNtCskZHUDZgyOMC_10sparesults6parserNtB2_18QueryResultsParser11from_formatCsfCIapqu81O5_13oxigraph_fuzz:
   65|  23.2k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  23.2k|        Self { format }
   67|  23.2k|    }
_RNvMNtCskZHUDZgyOMC_10sparesults6parserNtB2_18QueryResultsParser9for_slice:
  234|  23.2k|    pub fn for_slice(
  235|  23.2k|        self,
  236|  23.2k|        slice: &[u8],
  237|  23.2k|    ) -> Result<SliceQueryResultsParserOutput<'_>, QueryResultsSyntaxError> {
  238|  23.2k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match SliceXmlQueryResultsParserOutput::read(slice)? {
  240|      0|                SliceXmlQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  241|       |                SliceXmlQueryResultsParserOutput::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: SliceSolutionsParserKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|  23.2k|            QueryResultsFormat::Json => match SliceJsonQueryResultsParserOutput::read(slice)? {
  250|      4|                SliceJsonQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  251|       |                SliceJsonQueryResultsParserOutput::Solutions {
  252|  3.40k|                    solutions,
  253|  3.40k|                    variables,
  254|  3.40k|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  255|  3.40k|                    variables: variables.into(),
  256|  3.40k|                    solutions: SliceSolutionsParserKind::Json(solutions),
  257|  3.40k|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|      0|            QueryResultsFormat::Tsv => match SliceTsvQueryResultsParserOutput::read(slice)? {
  261|      0|                SliceTsvQueryResultsParserOutput::Boolean(r) => SliceQueryResultsParserOutput::Boolean(r),
  262|       |                SliceTsvQueryResultsParserOutput::Solutions {
  263|      0|                    solutions,
  264|      0|                    variables,
  265|      0|                } => SliceQueryResultsParserOutput::Solutions(SliceSolutionsParser {
  266|      0|                    variables: variables.into(),
  267|      0|                    solutions: SliceSolutionsParserKind::Tsv(solutions),
  268|      0|                }),
  269|       |            },
  270|       |        })
  271|  23.2k|    }
_RNvXs3_NtCskZHUDZgyOMC_10sparesults6parserNtB5_20SliceSolutionsParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next:
  642|  26.9k|    fn next(&mut self) -> Option<Self::Item> {
  643|  26.9k|        Some(
  644|  26.9k|            match &mut self.solutions {
  645|      0|                SliceSolutionsParserKind::Xml(reader) => reader.parse_next(),
  646|  26.9k|                SliceSolutionsParserKind::Json(reader) => reader.parse_next(),
  647|      0|                SliceSolutionsParserKind::Tsv(reader) => reader.parse_next(),
  648|       |            }
  649|  26.9k|            .transpose()?
  650|  24.5k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|  24.5k|        )
  652|  26.9k|    }
_RNCNvXs3_NtCskZHUDZgyOMC_10sparesults6parserNtB7_20SliceSolutionsParserNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  23.5k|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RINvMNtCskZHUDZgyOMC_10sparesults10serializerNtB3_22QueryResultsSerializer27serialize_boolean_to_writerQINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
   75|      2|    pub fn serialize_boolean_to_writer<W: Write>(self, writer: W, value: bool) -> io::Result<W> {
   76|      2|        match self.format {
   77|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(writer, value),
   78|      2|            QueryResultsFormat::Json => write_boolean_json_result(writer, value),
   79|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   80|      0|                write_boolean_csv_result(writer, value)
   81|       |            }
   82|       |        }
   83|      2|    }
_RINvMNtCskZHUDZgyOMC_10sparesults10serializerNtB3_22QueryResultsSerializer29serialize_solutions_to_writerINtNtCs8f6x4lOZV33_5alloc3vec3VechEECsfCIapqu81O5_13oxigraph_fuzz:
  146|  1.21k|    pub fn serialize_solutions_to_writer<W: Write>(
  147|  1.21k|        self,
  148|  1.21k|        writer: W,
  149|  1.21k|        variables: Vec<Variable>,
  150|  1.21k|    ) -> io::Result<WriterSolutionsSerializer<W>> {
  151|  1.21k|        Ok(WriterSolutionsSerializer {
  152|  1.21k|            formatter: match self.format {
  153|       |                QueryResultsFormat::Xml => WriterSolutionsSerializerKind::Xml(
  154|      0|                    WriterXmlSolutionsSerializer::start(writer, &variables)?,
  155|       |                ),
  156|       |                QueryResultsFormat::Json => WriterSolutionsSerializerKind::Json(
  157|  1.21k|                    WriterJsonSolutionsSerializer::start(writer, &variables)?,
  158|       |                ),
  159|       |                QueryResultsFormat::Csv => WriterSolutionsSerializerKind::Csv(
  160|      0|                    WriterCsvSolutionsSerializer::start(writer, variables)?,
  161|       |                ),
  162|       |                QueryResultsFormat::Tsv => WriterSolutionsSerializerKind::Tsv(
  163|      0|                    WriterTsvSolutionsSerializer::start(writer, variables)?,
  164|       |                ),
  165|       |            },
  166|       |        })
  167|  1.21k|    }
_RINvMs0_NtCskZHUDZgyOMC_10sparesults10serializerINtB6_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE9serializeRNtNtCs4x4bMiUCp0I_5oxrdf8variable8VariableRNtNtB26_6triple4TermRNtNtB8_8solution13QuerySolutionECsfCIapqu81O5_13oxigraph_fuzz:
  304|  11.4k|    pub fn serialize<'a>(
  305|  11.4k|        &mut self,
  306|  11.4k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  307|  11.4k|    ) -> io::Result<()> {
  308|  11.4k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  309|  11.4k|        match &mut self.formatter {
  310|      0|            WriterSolutionsSerializerKind::Xml(writer) => writer.serialize(solution),
  311|  11.4k|            WriterSolutionsSerializerKind::Json(writer) => writer.serialize(solution),
  312|      0|            WriterSolutionsSerializerKind::Csv(writer) => writer.serialize(solution),
  313|      0|            WriterSolutionsSerializerKind::Tsv(writer) => writer.serialize(solution),
  314|       |        }
  315|  11.4k|    }
_RNvMs0_NtCskZHUDZgyOMC_10sparesults10serializerINtB5_25WriterSolutionsSerializerINtNtCs8f6x4lOZV33_5alloc3vec3VechEE6finishCsfCIapqu81O5_13oxigraph_fuzz:
  318|  1.21k|    pub fn finish(self) -> io::Result<W> {
  319|  1.21k|        match self.formatter {
  320|      0|            WriterSolutionsSerializerKind::Xml(serializer) => serializer.finish(),
  321|  1.21k|            WriterSolutionsSerializerKind::Json(serializer) => serializer.finish(),
  322|      0|            WriterSolutionsSerializerKind::Csv(serializer) => Ok(serializer.finish()),
  323|      0|            WriterSolutionsSerializerKind::Tsv(serializer) => Ok(serializer.finish()),
  324|       |        }
  325|  1.21k|    }
_RNvMNtCskZHUDZgyOMC_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCsfCIapqu81O5_13oxigraph_fuzz:
   59|  1.21k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   60|  1.21k|        Self { format }
   61|  1.21k|    }

_RNvMNtCskZHUDZgyOMC_10sparesults8solutionNtB2_13QuerySolution9variablesCsfCIapqu81O5_13oxigraph_fuzz:
  158|  1.20k|    pub fn variables(&self) -> &[Variable] {
  159|  1.20k|        &self.variables
  160|  1.20k|    }
_RNvXs0_NtCskZHUDZgyOMC_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterCsfCIapqu81O5_13oxigraph_fuzz:
  178|  11.4k|    fn into_iter(self) -> Self::IntoIter {
  179|  11.4k|        Iter {
  180|  11.4k|            inner: self.variables.iter().zip(&self.values),
  181|  11.4k|        }
  182|  11.4k|    }
_RNvXs9_NtCskZHUDZgyOMC_10sparesults8solutionNtB5_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextCsfCIapqu81O5_13oxigraph_fuzz:
  285|  11.4k|    fn next(&mut self) -> Option<Self::Item> {
  286|   117k|        for (variable, value) in &mut self.inner {
  287|   106k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|   106k|            }
  290|       |        }
  291|  11.4k|        None
  292|  11.4k|    }
_RNvMNtCskZHUDZgyOMC_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  22.9k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  22.9k|        self.into_iter()
  114|  22.9k|    }
_RNvXs0_NtCskZHUDZgyOMC_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCshZc3FwCJ069_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  22.9k|    fn into_iter(self) -> Self::IntoIter {
  179|  22.9k|        Iter {
  180|  22.9k|            inner: self.variables.iter().zip(&self.values),
  181|  22.9k|        }
  182|  22.9k|    }
_RNvXs6_NtCskZHUDZgyOMC_10sparesults8solutionNtB5_13QuerySolutionNtNtCshZc3FwCJ069_4core3cmp9PartialEq2eq:
  236|  11.4k|    fn eq(&self, other: &Self) -> bool {
  237|  11.4k|        for (k, v) in self.iter() {
  238|      0|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|      0|            }
  241|       |        }
  242|  11.4k|        for (k, v) in other.iter() {
  243|      0|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|      0|            }
  246|       |        }
  247|  11.4k|        true
  248|  11.4k|    }
_RNvXs9_NtCskZHUDZgyOMC_10sparesults8solutionNtB5_4IterNtNtNtNtCshZc3FwCJ069_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  22.9k|    fn next(&mut self) -> Option<Self::Item> {
  286|   235k|        for (variable, value) in &mut self.inner {
  287|   212k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|   212k|            }
  290|       |        }
  291|  22.9k|        None
  292|  22.9k|    }
_RNvXs_NtCskZHUDZgyOMC_10sparesults8solutionNtB4_13QuerySolutionINtNtCshZc3FwCJ069_4core7convert4FromTINtNtCs8f6x4lOZV33_5alloc4sync3ArcSNtNtCs4x4bMiUCp0I_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  23.5k|    fn from((v, s): (V, S)) -> Self {
  166|  23.5k|        Self {
  167|  23.5k|            variables: v.into(),
  168|  23.5k|            values: s.into(),
  169|  23.5k|        }
  170|  23.5k|    }


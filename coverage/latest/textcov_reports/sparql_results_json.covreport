






_RNvNtCsdEqEch4FefN_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  14.1k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  14.1k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|  12.3k|        return;
    9|       |    };
   10|  1.80k|    match reader {
   11|  1.80k|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|  1.80k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|    877|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|    926|            let mut writer = QueryResultsSerializer::from_format(format)
   18|    926|                .serialize_solutions_to_write(
   19|    926|                    Vec::new(),
   20|    926|                    solutions
   21|    926|                        .first()
   22|    926|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|    926|                )
   24|    926|                .unwrap();
   25|  10.3k|            for solution in &solutions {
   26|  9.39k|                writer.write(solution).unwrap();
   27|  9.39k|            }
   28|    926|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|    926|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|    926|                QueryResultsParser::from_format(format)
   33|    926|                    .parse_slice(&serialized)
   34|    926|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|    926|                    .unwrap()
   36|       |            {
   37|    926|                assert_eq!(
   38|    926|                    roundtrip_solutions
   39|    926|                        .collect::<Result<Vec<_>, _>>()
   40|    926|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|    926|                        .unwrap(),
   42|    926|                    solutions
   43|    926|                )
   44|      0|            }
   45|       |        }
   46|      2|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      2|            // We try to write again
   48|      2|            let mut serialized = Vec::new();
   49|      2|            QueryResultsSerializer::from_format(format)
   50|      2|                .serialize_boolean_to_write(&mut serialized, value)
   51|      2|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      2|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      2|                QueryResultsParser::from_format(format)
   56|      2|                    .parse_slice(&serialized)
   57|      2|                    .unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  14.1k|}
_RNCNvNtCsdEqEch4FefN_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|    915|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),









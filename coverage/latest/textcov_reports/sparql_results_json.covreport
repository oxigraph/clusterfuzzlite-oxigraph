_RINvXNtCsaCKCoQQNRcr_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultINtNtCs3OstG5Tqy1X_5alloc3vec3VecNtNtCs8ymoBFYi2FH_10sparesults8solution13QuerySolutionENtNtB1L_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2A_E12with_contextNtNtB1f_6string6StringNCNvNtCseAC53pAIE9m_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB4h_:
   58|    506|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    506|    where
   60|    506|        C: Display + Send + Sync + 'static,
   61|    506|        F: FnOnce() -> C,
   62|    506|    {
   63|    506|        match self {
   64|    506|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    506|    }
_RINvXNtCsaCKCoQQNRcr_6anyhow7contextINtNtCscdEvteftVc2_4core6result6ResultNtNtCs8ymoBFYi2FH_10sparesults6parser27FromSliceQueryResultsReaderNtNtB1e_5error23QueryResultsSyntaxErrorEINtB5_7ContextB1a_B2e_E12with_contextNtNtCs3OstG5Tqy1X_5alloc6string6StringNCNvNtCseAC53pAIE9m_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB4b_:
   58|    506|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    506|    where
   60|    506|        C: Display + Send + Sync + 'static,
   61|    506|        F: FnOnce() -> C,
   62|    506|    {
   63|    506|        match self {
   64|    506|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    506|    }

_RNvMs_NtCsiS85MHDKMvU_17json_event_parser4readNtB4_20FromBufferJsonReader3new:
  237|  11.1k|    pub const fn new(buffer: &'a [u8]) -> Self {
  238|  11.1k|        Self {
  239|  11.1k|            input_buffer: buffer,
  240|  11.1k|            parser: LowLevelJsonReader::new(),
  241|  11.1k|        }
  242|  11.1k|    }
_RNvMs_NtCsiS85MHDKMvU_17json_event_parser4readNtB4_20FromBufferJsonReader15read_next_event:
  244|   835k|    pub fn read_next_event(&mut self) -> Result<JsonEvent<'_>, SyntaxError> {
  245|   835k|        loop {
  246|   835k|            let LowLevelJsonReaderResult {
  247|   835k|                event,
  248|   835k|                consumed_bytes,
  249|   835k|            } = self.parser.read_next_event(self.input_buffer, true);
  250|   835k|            self.input_buffer = &self.input_buffer[consumed_bytes..];
  251|   835k|            if let Some(event) = event {
  252|   835k|                return event;
  253|      0|            }
  254|       |        }
  255|   835k|    }
_RNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_18LowLevelJsonReader3new:
  303|  11.1k|    pub const fn new() -> Self {
  304|  11.1k|        Self {
  305|  11.1k|            lexer: JsonLexer {
  306|  11.1k|                file_offset: 0,
  307|  11.1k|                file_line: 0,
  308|  11.1k|                file_start_of_last_line: 0,
  309|  11.1k|                file_start_of_last_token: 0,
  310|  11.1k|                is_start: true,
  311|  11.1k|            },
  312|  11.1k|            state_stack: Vec::new(),
  313|  11.1k|            max_state_stack_size: MAX_STATE_STACK_SIZE,
  314|  11.1k|            element_read: false,
  315|  11.1k|            buffered_event: None,
  316|  11.1k|        }
  317|  11.1k|    }
_RNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_18LowLevelJsonReader15read_next_event:
  328|   835k|    pub fn read_next_event<'a>(
  329|   835k|        &mut self,
  330|   835k|        input_buffer: &'a [u8],
  331|   835k|        is_ending: bool,
  332|   835k|    ) -> LowLevelJsonReaderResult<'a> {
  333|   835k|        if let Some(event) = self.buffered_event.take() {
  334|      0|            return LowLevelJsonReaderResult {
  335|      0|                consumed_bytes: 0,
  336|      0|                event: Some(Ok(event)),
  337|      0|            };
  338|   835k|        }
  339|   835k|        let start_file_offset = self.lexer.file_offset;
  340|  1.41M|        while let Some(token) = self.lexer.read_next_token(
  341|  1.41M|            &input_buffer[usize::try_from(self.lexer.file_offset - start_file_offset).unwrap()..],
  342|  1.41M|            is_ending,
  343|  1.41M|        ) {
  344|  1.41M|            let consumed_bytes = (self.lexer.file_offset - start_file_offset)
  345|  1.41M|                .try_into()
  346|  1.41M|                .unwrap();
  347|  1.41M|            match token {
  348|  1.41M|                Ok(token) => {
  349|  1.41M|                    let (event, error) = self.apply_new_token(token);
  350|  1.41M|                    let error = error.map(|e| {
  351|       |                        self.lexer.syntax_error(
  352|       |                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|       |                            e,
  354|       |                        )
  355|  1.41M|                    });
  356|  1.41M|                    if let Some(error) = error {
  357|  2.07k|                        self.buffered_event = event.map(owned_event);
  358|  2.07k|                        return LowLevelJsonReaderResult {
  359|  2.07k|                            consumed_bytes,
  360|  2.07k|                            event: Some(Err(error)),
  361|  2.07k|                        };
  362|  1.41M|                    }
  363|  1.41M|                    if let Some(event) = event {
  364|   827k|                        return LowLevelJsonReaderResult {
  365|   827k|                            consumed_bytes,
  366|   827k|                            event: Some(Ok(event)),
  367|   827k|                        };
  368|   583k|                    }
  369|       |                }
  370|  2.02k|                Err(error) => {
  371|  2.02k|                    return LowLevelJsonReaderResult {
  372|  2.02k|                        consumed_bytes,
  373|  2.02k|                        event: Some(Err(error)),
  374|  2.02k|                    }
  375|       |                }
  376|       |            }
  377|       |        }
  378|       |        LowLevelJsonReaderResult {
  379|  3.92k|            consumed_bytes: (self.lexer.file_offset - start_file_offset)
  380|  3.92k|                .try_into()
  381|  3.92k|                .unwrap(),
  382|  3.92k|            event: if is_ending {
  383|  3.92k|                self.buffered_event = Some(JsonEvent::Eof);
  384|  3.92k|                Some(Err(self.lexer.syntax_error(
  385|  3.92k|                    self.lexer.file_offset..self.lexer.file_offset + 1,
  386|  3.92k|                    "Unexpected end of file",
  387|  3.92k|                )))
  388|       |            } else {
  389|      0|                None
  390|       |            },
  391|       |        }
  392|   835k|    }
_RNCNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_18LowLevelJsonReader15read_next_event0B9_:
  350|  2.07k|                    let error = error.map(|e| {
  351|  2.07k|                        self.lexer.syntax_error(
  352|  2.07k|                            self.lexer.file_start_of_last_token..self.lexer.file_offset,
  353|  2.07k|                            e,
  354|  2.07k|                        )
  355|  2.07k|                    });
_RNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_18LowLevelJsonReader15apply_new_token:
  394|  1.58M|    fn apply_new_token<'a>(
  395|  1.58M|        &mut self,
  396|  1.58M|        token: JsonToken<'a>,
  397|  1.58M|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  398|  1.58M|        match self.state_stack.pop() {
  399|       |            Some(JsonState::ObjectKeyOrEnd) => {
  400|   175k|                if token == JsonToken::ClosingCurlyBracket {
  401|  27.4k|                    (Some(JsonEvent::EndObject), None)
  402|       |                } else {
  403|   147k|                    if let Err(e) = self.push_state_stack(JsonState::ObjectKey) {
  404|      0|                        return (None, Some(e));
  405|   147k|                    }
  406|   147k|                    self.apply_new_token(token)
  407|       |                }
  408|       |            }
  409|       |            Some(JsonState::ObjectKey) => {
  410|   345k|                if token == JsonToken::ClosingCurlyBracket {
  411|      1|                    return (Some(JsonEvent::EndObject), Some("Trailing commas are not allowed".into()));
  412|   345k|                }
  413|   345k|                if let Err(e) = self.push_state_stack(JsonState::ObjectColon) {
  414|      0|                    return (None, Some(e));
  415|   345k|                }
  416|   345k|                if let JsonToken::String(key) = token {
  417|   345k|                    (Some(JsonEvent::ObjectKey(key)), None)
  418|       |                } else {
  419|    381|                    (None, Some("Object keys must be strings".into()))
  420|       |                }
  421|       |            }
  422|       |            Some(JsonState::ObjectColon) => {
  423|   344k|                if let Err(e) = self.push_state_stack(JsonState::ObjectValue) {
  424|      0|                    return (None, Some(e));
  425|   344k|                }
  426|   344k|                if token == JsonToken::Colon {
  427|   343k|                    (None, None)
  428|       |                } else {
  429|    651|                    let (event, _) = self.apply_new_token(token);
  430|    651|                    (event, Some("Object keys must be strings".into()))
  431|       |                }
  432|       |            }
  433|       |            Some(JsonState::ObjectValue) => {
  434|   343k|                if let Err(e) = self.push_state_stack(JsonState::ObjectCommaOrEnd) {
  435|      0|                    return (None, Some(e));
  436|   343k|                }
  437|   343k|                self.apply_new_token_for_value(token)
  438|       |            }
  439|   223k|            Some(JsonState::ObjectCommaOrEnd) => match token {
  440|       |                JsonToken::Comma => {
  441|   198k|                    (None, self.push_state_stack(JsonState::ObjectKey).err())
  442|       |                }
  443|  24.6k|                JsonToken::ClosingCurlyBracket => (Some(JsonEvent::EndObject), None),
  444|    593|                _ => (None, Some("Object values must be followed by a comma to add a new value or a curly bracket to end the object".into())),
  445|       |            },
  446|       |            Some(JsonState::ArrayValueOrEnd) =>{
  447|  27.0k|                if token == JsonToken::ClosingSquareBracket {
  448|  7.46k|                    return (Some(JsonEvent::EndArray), None);
  449|  19.5k|                }
  450|  19.5k|                if let Err(e) = self.push_state_stack(JsonState::ArrayValue) {
  451|      0|                    return (None, Some(e));
  452|  19.5k|                }
  453|  19.5k|                self.apply_new_token(token)
  454|       |            }
  455|       |            Some(JsonState::ArrayValue) => {
  456|  61.1k|                if token == JsonToken::ClosingSquareBracket {
  457|      2|                    return (Some(JsonEvent::EndArray), Some("Trailing commas are not allowed".into()));
  458|  61.1k|                }
  459|  61.1k|                if let Err(e) = self.push_state_stack(JsonState::ArrayCommaOrEnd) {
  460|      0|                    return (None, Some(e));
  461|  61.1k|                }
  462|  61.1k|                self.apply_new_token_for_value(token)
  463|       |            }
  464|  50.9k|            Some(JsonState::ArrayCommaOrEnd) => match token {
  465|       |                JsonToken::Comma => {
  466|  41.3k|                    (None, self.push_state_stack(JsonState::ArrayValue).err())
  467|       |                }
  468|  9.39k|                JsonToken::ClosingSquareBracket => (Some(JsonEvent::EndArray), None),
  469|       |                _ => {
  470|    233|                    let _ = self.push_state_stack(JsonState::ArrayValue); // We already have an error
  471|    233|                    let (event, _) = self.apply_new_token(token);
  472|    233|                    (event, Some("Array values must be followed by a comma to add a new value or a squared bracket to end the array".into()))
  473|       |                }
  474|       |            }
  475|  9.38k|            None => if self.element_read {
  476|    512|                if token == JsonToken::Eof {
  477|    511|                    (Some(JsonEvent::Eof), None)
  478|       |                } else {
  479|      1|                    (None, Some("The JSON already contains one root element".into()))
  480|       |                }
  481|       |            } else {
  482|  8.86k|                self.element_read = true;
  483|  8.86k|                self.apply_new_token_for_value(token)
  484|       |            }
  485|       |        }
  486|  1.58M|    }
_RNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_18LowLevelJsonReader25apply_new_token_for_value:
  488|   413k|    fn apply_new_token_for_value<'a>(
  489|   413k|        &mut self,
  490|   413k|        token: JsonToken<'a>,
  491|   413k|    ) -> (Option<JsonEvent<'a>>, Option<String>) {
  492|   413k|        match token {
  493|  27.0k|            JsonToken::OpeningSquareBracket => (
  494|  27.0k|                Some(JsonEvent::StartArray),
  495|  27.0k|                self.push_state_stack(JsonState::ArrayValueOrEnd).err(),
  496|  27.0k|            ),
  497|      4|            JsonToken::ClosingSquareBracket => (
  498|      4|                None,
  499|      4|                Some("Unexpected closing square bracket, no array to close".into()),
  500|      4|            ),
  501|   176k|            JsonToken::OpeningCurlyBracket => (
  502|   176k|                Some(JsonEvent::StartObject),
  503|   176k|                self.push_state_stack(JsonState::ObjectKeyOrEnd).err(),
  504|   176k|            ),
  505|      3|            JsonToken::ClosingCurlyBracket => (
  506|      3|                None,
  507|      3|                Some("Unexpected closing curly bracket, no array to close".into()),
  508|      3|            ),
  509|     61|            JsonToken::Comma => (None, Some("Unexpected comma, no values to separate".into())),
  510|      8|            JsonToken::Colon => (None, Some("Unexpected colon, no key to follow".into())),
  511|   189k|            JsonToken::String(string) => (Some(JsonEvent::String(string)), None),
  512|  18.6k|            JsonToken::Number(number) => (Some(JsonEvent::Number(number)), None),
  513|    540|            JsonToken::True => (Some(JsonEvent::Boolean(true)), None),
  514|     98|            JsonToken::False => (Some(JsonEvent::Boolean(false)), None),
  515|    792|            JsonToken::Null => (Some(JsonEvent::Null), None),
  516|    835|            JsonToken::Eof => (
  517|    835|                Some(JsonEvent::Eof),
  518|    835|                Some("Unexpected end of file, a value was expected".into()),
  519|    835|            ),
  520|       |        }
  521|   413k|    }
_RNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_18LowLevelJsonReader16push_state_stack:
  523|  1.70M|    fn push_state_stack(&mut self, state: JsonState) -> Result<(), String> {
  524|  1.70M|        self.check_stack_size()?;
  525|  1.70M|        self.state_stack.push(state);
  526|  1.70M|        Ok(())
  527|  1.70M|    }
_RNvMs0_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_18LowLevelJsonReader16check_stack_size:
  529|  1.70M|    fn check_stack_size(&self) -> Result<(), String> {
  530|  1.70M|        if self.state_stack.len() > self.max_state_stack_size {
  531|      0|            Err(format!(
  532|      0|                "Max stack size of {} reached on an object opening",
  533|      0|                self.max_state_stack_size
  534|      0|            ))
  535|       |        } else {
  536|  1.70M|            Ok(())
  537|       |        }
  538|  1.70M|    }
_RNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_9JsonLexer15read_next_token:
  578|  1.41M|    fn read_next_token<'a>(
  579|  1.41M|        &mut self,
  580|  1.41M|        mut input_buffer: &'a [u8],
  581|  1.41M|        is_ending: bool,
  582|  1.41M|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  583|  1.41M|        // We remove BOM at the beginning
  584|  1.41M|        if self.is_start {
  585|  11.1k|            if input_buffer.len() < 3 && !is_ending {
  586|      0|                return None;
  587|  11.1k|            }
  588|  11.1k|            self.is_start = false;
  589|  11.1k|            if input_buffer.starts_with(&[0xEF, 0xBB, 0xBF]) {
  590|    244|                input_buffer = &input_buffer[3..];
  591|    244|                self.file_offset += 3;
  592|  10.8k|            }
  593|  1.40M|        }
  594|       |
  595|       |        // We skip whitespaces
  596|  1.41M|        let mut i = 0;
  597|  1.45M|        while let Some(c) = input_buffer.get(i) {
  598|  1.45M|            match *c {
  599|  37.4k|                b' ' | b'\t' => {
  600|  37.4k|                    i += 1;
  601|  37.4k|                }
  602|    437|                b'\n' => {
  603|    437|                    i += 1;
  604|    437|                    self.file_line += 1;
  605|    437|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  606|    437|                }
  607|       |                b'\r' => {
  608|    831|                    i += 1;
  609|    831|                    if let Some(c) = input_buffer.get(i) {
  610|    823|                        if *c == b'\n' {
  611|      0|                            i += 1; // \r\n
  612|    823|                        }
  613|      8|                    } else if !is_ending {
  614|       |                        // We need an extra byte to check if followed by \n
  615|      0|                        i -= 1;
  616|      0|                        self.file_offset += u64::try_from(i).unwrap();
  617|      0|                        return None;
  618|      8|                    }
  619|    831|                    self.file_line += 1;
  620|    831|                    self.file_start_of_last_line = self.file_offset + u64::try_from(i).unwrap();
  621|       |                }
  622|       |                _ => {
  623|  1.41M|                    break;
  624|       |                }
  625|       |            }
  626|       |        }
  627|  1.41M|        self.file_offset += u64::try_from(i).unwrap();
  628|  1.41M|        input_buffer = &input_buffer[i..];
  629|  1.41M|        self.file_start_of_last_token = self.file_offset;
  630|  1.41M|
  631|  1.41M|        if is_ending && input_buffer.is_empty() {
  632|  1.82k|            return Some(Ok(JsonToken::Eof));
  633|  1.41M|        }
  634|  1.41M|
  635|  1.41M|        // we get the first character
  636|  1.41M|        match *input_buffer.first()? {
  637|       |            b'{' => {
  638|   176k|                self.file_offset += 1;
  639|   176k|                Some(Ok(JsonToken::OpeningCurlyBracket))
  640|       |            }
  641|       |            b'}' => {
  642|  52.0k|                self.file_offset += 1;
  643|  52.0k|                Some(Ok(JsonToken::ClosingCurlyBracket))
  644|       |            }
  645|       |            b'[' => {
  646|  27.0k|                self.file_offset += 1;
  647|  27.0k|                Some(Ok(JsonToken::OpeningSquareBracket))
  648|       |            }
  649|       |            b']' => {
  650|  16.8k|                self.file_offset += 1;
  651|  16.8k|                Some(Ok(JsonToken::ClosingSquareBracket))
  652|       |            }
  653|       |            b',' => {
  654|   240k|                self.file_offset += 1;
  655|   240k|                Some(Ok(JsonToken::Comma))
  656|       |            }
  657|       |            b':' => {
  658|   343k|                self.file_offset += 1;
  659|   343k|                Some(Ok(JsonToken::Colon))
  660|       |            }
  661|   538k|            b'"' => self.read_string(input_buffer),
  662|    612|            b't' => self.read_constant(input_buffer, is_ending, "true", JsonToken::True),
  663|    105|            b'f' => self.read_constant(input_buffer, is_ending, "false", JsonToken::False),
  664|    909|            b'n' => self.read_constant(input_buffer, is_ending, "null", JsonToken::Null),
  665|  19.7k|            b'-' | b'0'..=b'9' => self.read_number(input_buffer, is_ending),
  666|  1.21k|            c => {
  667|  1.21k|                self.file_offset += 1;
  668|  1.21k|                Some(Err(self.syntax_error(
  669|  1.21k|                    self.file_offset - 1..self.file_offset,
  670|  1.21k|                    if c < 128 {
  671|  1.03k|                        format!("Unexpected char: '{}'", char::from(c))
  672|       |                    } else {
  673|    180|                        format!("Unexpected byte: \\x{c:X}")
  674|       |                    },
  675|       |                )))
  676|       |            }
  677|       |        }
  678|  1.41M|    }
_RNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_9JsonLexer11read_string:
  680|   538k|    fn read_string<'a>(
  681|   538k|        &mut self,
  682|   538k|        input_buffer: &'a [u8],
  683|   538k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  684|   538k|        let mut error = None;
  685|   538k|        let mut string: Option<(String, usize)> = None;
  686|   538k|        let mut next_byte_offset = 1;
  687|       |        loop {
  688|  4.63M|            match *input_buffer.get(next_byte_offset)? {
  689|       |                b'"' => {
  690|       |                    // end of string
  691|   535k|                    let result = Some(if let Some(error) = error {
  692|    407|                        Err(error)
  693|   534k|                    } else if let Some((mut string, read_until)) = string {
  694|  75.5k|                        if read_until < next_byte_offset {
  695|  59.0k|                            let (str, e) = self.decode_utf8(
  696|  59.0k|                                &input_buffer[read_until..next_byte_offset],
  697|  59.0k|                                self.file_offset + u64::try_from(read_until).unwrap(),
  698|  59.0k|                            );
  699|  59.0k|                            error = error.or(e);
  700|  59.0k|                            string.push_str(&str);
  701|  59.0k|                        }
  702|  75.5k|                        if let Some(error) = error {
  703|      5|                            Err(error)
  704|       |                        } else {
  705|  75.4k|                            Ok(JsonToken::String(Cow::Owned(string)))
  706|       |                        }
  707|       |                    } else {
  708|   459k|                        let (string, error) = self
  709|   459k|                            .decode_utf8(&input_buffer[1..next_byte_offset], self.file_offset + 1);
  710|   459k|                        if let Some(error) = error {
  711|    190|                            Err(error)
  712|       |                        } else {
  713|   459k|                            Ok(JsonToken::String(string))
  714|       |                        }
  715|       |                    });
  716|   535k|                    self.file_offset += u64::try_from(next_byte_offset).unwrap() + 1;
  717|   535k|                    return result;
  718|       |                }
  719|       |                b'\\' => {
  720|       |                    // Escape sequences
  721|   365k|                    if string.is_none() {
  722|  78.9k|                        string = Some((String::new(), 1))
  723|   286k|                    }
  724|   365k|                    let (string, read_until) = string.as_mut().unwrap();
  725|   365k|                    if *read_until < next_byte_offset {
  726|   193k|                        let (str, e) = self.decode_utf8(
  727|   193k|                            &input_buffer[*read_until..next_byte_offset],
  728|   193k|                            self.file_offset + u64::try_from(*read_until).unwrap(),
  729|   193k|                        );
  730|   193k|                        error = error.or(e);
  731|   193k|                        string.push_str(&str);
  732|   193k|                    }
  733|   365k|                    next_byte_offset += 1;
  734|   365k|                    match *input_buffer.get(next_byte_offset)? {
  735|  19.5k|                        b'"' => {
  736|  19.5k|                            string.push('"');
  737|  19.5k|                            next_byte_offset += 1;
  738|  19.5k|                        }
  739|  17.4k|                        b'\\' => {
  740|  17.4k|                            string.push('\\');
  741|  17.4k|                            next_byte_offset += 1;
  742|  17.4k|                        }
  743|  2.56k|                        b'/' => {
  744|  2.56k|                            string.push('/');
  745|  2.56k|                            next_byte_offset += 1;
  746|  2.56k|                        }
  747|  9.15k|                        b'b' => {
  748|  9.15k|                            string.push('\u{8}');
  749|  9.15k|                            next_byte_offset += 1;
  750|  9.15k|                        }
  751|  3.70k|                        b'f' => {
  752|  3.70k|                            string.push('\u{C}');
  753|  3.70k|                            next_byte_offset += 1;
  754|  3.70k|                        }
  755|  19.8k|                        b'n' => {
  756|  19.8k|                            string.push('\n');
  757|  19.8k|                            next_byte_offset += 1;
  758|  19.8k|                        }
  759|  26.9k|                        b'r' => {
  760|  26.9k|                            string.push('\r');
  761|  26.9k|                            next_byte_offset += 1;
  762|  26.9k|                        }
  763|  44.0k|                        b't' => {
  764|  44.0k|                            string.push('\t');
  765|  44.0k|                            next_byte_offset += 1;
  766|  44.0k|                        }
  767|       |                        b'u' => {
  768|   202k|                            next_byte_offset += 1;
  769|   202k|                            let val = input_buffer.get(next_byte_offset..next_byte_offset + 4)?;
  770|   201k|                            next_byte_offset += 4;
  771|   201k|                            let code_point = match read_hexa_char(val) {
  772|   155k|                                Ok(cp) => cp,
  773|  46.3k|                                Err(e) => {
  774|  46.3k|                                    error = error.or_else(|| {
  775|       |                                        let pos = self.file_offset
  776|       |                                            + u64::try_from(next_byte_offset).unwrap();
  777|       |                                        Some(self.syntax_error(pos - 4..pos, e))
  778|  46.3k|                                    });
  779|  46.3k|                                    char::REPLACEMENT_CHARACTER.into()
  780|       |                                }
  781|       |                            };
  782|   201k|                            if let Some(c) = char::from_u32(code_point) {
  783|   120k|                                string.push(c);
  784|   120k|                            } else {
  785|  81.4k|                                let high_surrogate = code_point;
  786|  81.4k|                                if !(0xD800..=0xDBFF).contains(&high_surrogate) {
  787|  69.2k|                                    error = error.or_else(|| {
  788|       |                                        let pos = self.file_offset
  789|       |                                            + u64::try_from(next_byte_offset).unwrap();
  790|       |                                        Some(self.syntax_error(
  791|       |                                            pos - 6..pos,
  792|       |                                            format!(
  793|       |                                                "\\u{:X} is not a valid high surrogate",
  794|       |                                                high_surrogate
  795|       |                                            ),
  796|       |                                        ))
  797|  69.2k|                                    });
  798|  69.2k|                                }
  799|  81.4k|                                let val =
  800|  81.4k|                                    input_buffer.get(next_byte_offset..next_byte_offset + 6)?;
  801|  81.4k|                                next_byte_offset += 6;
  802|  81.4k|                                if !val.starts_with(b"\\u") {
  803|  43.2k|                                    error = error.or_else(|| {
  804|       |                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|       |                                        Some(self.syntax_error(
  806|       |                                            pos - 6..pos,
  807|       |                                            format!(
  808|       |                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|       |                                                high_surrogate
  810|       |                                            )
  811|       |                                        ))
  812|  43.2k|                                    });
  813|  43.2k|                                }
  814|  81.4k|                                let low_surrogate = match read_hexa_char(&val[2..]) {
  815|  36.7k|                                    Ok(cp) => cp,
  816|  44.6k|                                    Err(e) => {
  817|  44.6k|                                        error = error.or_else(|| {
  818|       |                                            let pos = self.file_offset
  819|       |                                                + u64::try_from(next_byte_offset).unwrap();
  820|       |                                            Some(self.syntax_error(pos - 6..pos, e))
  821|  44.6k|                                        });
  822|  44.6k|                                        char::REPLACEMENT_CHARACTER.into()
  823|       |                                    }
  824|       |                                };
  825|  81.4k|                                if !(0xDC00..=0xDFFF).contains(&low_surrogate) {
  826|  59.6k|                                    error = error.or_else(|| {
  827|       |                                        let pos = self.file_offset
  828|       |                                            + u64::try_from(next_byte_offset).unwrap();
  829|       |                                        Some(self.syntax_error(
  830|       |                                            pos - 6..pos,
  831|       |                                            format!(
  832|       |                                                "\\u{:X} is not a valid low surrogate",
  833|       |                                                low_surrogate
  834|       |                                            ),
  835|       |                                        ))
  836|  59.6k|                                    });
  837|  59.6k|                                }
  838|  81.4k|                                let code_point = 0x10000
  839|  81.4k|                                    + ((high_surrogate & 0x03FF) << 10)
  840|  81.4k|                                    + (low_surrogate & 0x03FF);
  841|  81.4k|                                if let Some(c) = char::from_u32(code_point) {
  842|  81.4k|                                    string.push(c)
  843|      0|                                } else {
  844|      0|                                    string.push(char::REPLACEMENT_CHARACTER);
  845|      0|                                    error = error.or_else(|| {
  846|       |                                        let pos = self.file_offset
  847|       |                                            + u64::try_from(next_byte_offset).unwrap();
  848|       |                                        Some(self.syntax_error(
  849|       |                                            pos - 12..pos,
  850|       |                                            format!(
  851|       |                                                "\\u{:X}\\u{:X} is an invalid surrogate pair",
  852|       |                                                high_surrogate, low_surrogate
  853|       |                                            ),
  854|       |                                        ))
  855|      0|                                    });
  856|      0|                                }
  857|       |                            }
  858|       |                        }
  859|  20.1k|                        c => {
  860|  20.1k|                            next_byte_offset += 1;
  861|  20.1k|                            error = error.or_else(|| {
  862|       |                                let pos =
  863|       |                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|       |                                Some(self.syntax_error(
  865|       |                                    pos - 2..pos,
  866|       |                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|       |                                ))
  868|  20.1k|                            });
  869|  20.1k|                            string.push(char::REPLACEMENT_CHARACTER);
  870|  20.1k|                        }
  871|       |                    }
  872|   365k|                    *read_until = next_byte_offset;
  873|       |                }
  874|  3.72M|                c @ (0..=0x1F) => {
  875|  50.1k|                    error = error.or_else(|| {
  876|       |                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|       |                        Some(self.syntax_error(
  878|       |                            pos..pos + 1,
  879|       |                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|       |                        ))
  881|  50.1k|                    });
  882|  50.1k|                    next_byte_offset += 1;
  883|  50.1k|                }
  884|  3.67M|                _ => {
  885|  3.67M|                    next_byte_offset += 1;
  886|  3.67M|                }
  887|       |            }
  888|       |        }
  889|   538k|    }
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_string0B9_:
  774|    577|                                    error = error.or_else(|| {
  775|    577|                                        let pos = self.file_offset
  776|    577|                                            + u64::try_from(next_byte_offset).unwrap();
  777|    577|                                        Some(self.syntax_error(pos - 4..pos, e))
  778|    577|                                    });
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_strings_0B9_:
  787|    463|                                    error = error.or_else(|| {
  788|    463|                                        let pos = self.file_offset
  789|    463|                                            + u64::try_from(next_byte_offset).unwrap();
  790|    463|                                        Some(self.syntax_error(
  791|    463|                                            pos - 6..pos,
  792|    463|                                            format!(
  793|    463|                                                "\\u{:X} is not a valid high surrogate",
  794|    463|                                                high_surrogate
  795|    463|                                            ),
  796|    463|                                        ))
  797|    463|                                    });
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_strings0_0B9_:
  803|    130|                                    error = error.or_else(|| {
  804|    130|                                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  805|    130|                                        Some(self.syntax_error(
  806|    130|                                            pos - 6..pos,
  807|    130|                                            format!(
  808|    130|                                                "\\u{:X} is a high surrogate and should be followed by a low surrogate \\uXXXX",
  809|    130|                                                high_surrogate
  810|    130|                                            )
  811|    130|                                        ))
  812|    130|                                    });
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_strings1_0B9_:
  817|      7|                                        error = error.or_else(|| {
  818|      7|                                            let pos = self.file_offset
  819|      7|                                                + u64::try_from(next_byte_offset).unwrap();
  820|      7|                                            Some(self.syntax_error(pos - 6..pos, e))
  821|      7|                                        });
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_strings2_0B9_:
  826|      5|                                    error = error.or_else(|| {
  827|      5|                                        let pos = self.file_offset
  828|      5|                                            + u64::try_from(next_byte_offset).unwrap();
  829|      5|                                        Some(self.syntax_error(
  830|      5|                                            pos - 6..pos,
  831|      5|                                            format!(
  832|      5|                                                "\\u{:X} is not a valid low surrogate",
  833|      5|                                                low_surrogate
  834|      5|                                            ),
  835|      5|                                        ))
  836|      5|                                    });
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_strings4_0B9_:
  861|    587|                            error = error.or_else(|| {
  862|    587|                                let pos =
  863|    587|                                    self.file_offset + u64::try_from(next_byte_offset).unwrap();
  864|    587|                                Some(self.syntax_error(
  865|    587|                                    pos - 2..pos,
  866|    587|                                    format!("'\\{}' is not a valid escape sequence", char::from(c)),
  867|    587|                                ))
  868|    587|                            });
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_strings5_0B9_:
  875|    479|                    error = error.or_else(|| {
  876|    479|                        let pos = self.file_offset + u64::try_from(next_byte_offset).unwrap();
  877|    479|                        Some(self.syntax_error(
  878|    479|                            pos..pos + 1,
  879|    479|                            format!("'{}' is not allowed in JSON strings", char::from(c)),
  880|    479|                        ))
  881|    479|                    });
_RNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_9JsonLexer13read_constant:
  891|  1.62k|    fn read_constant(
  892|  1.62k|        &mut self,
  893|  1.62k|        input_buffer: &[u8],
  894|  1.62k|        is_ending: bool,
  895|  1.62k|        expected: &str,
  896|  1.62k|        value: JsonToken<'static>,
  897|  1.62k|    ) -> Option<Result<JsonToken<'static>, SyntaxError>> {
  898|  1.62k|        if input_buffer.get(..expected.len())? == expected.as_bytes() {
  899|  1.43k|            self.file_offset += u64::try_from(expected.len()).unwrap();
  900|  1.43k|            return Some(Ok(value));
  901|    152|        }
  902|    152|        let ascii_chars = input_buffer
  903|    152|            .iter()
  904|    152|            .take_while(|c| c.is_ascii_alphabetic())
  905|    152|            .count();
  906|    152|        if ascii_chars == input_buffer.len() && !is_ending {
  907|      0|            return None; // We might read a bigger token
  908|    152|        }
  909|    152|        let read = max(1, ascii_chars); // We want to consume at least a byte
  910|    152|        let start_offset = self.file_offset;
  911|    152|        self.file_offset += u64::try_from(read).unwrap();
  912|    152|        Some(Err(self.syntax_error(
  913|    152|            start_offset..self.file_offset,
  914|    152|            format!("{} expected", expected),
  915|    152|        )))
  916|  1.62k|    }
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer13read_constant0B9_:
  904|  2.17k|            .take_while(|c| c.is_ascii_alphabetic())
_RNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_9JsonLexer11read_number:
  918|  18.9k|    fn read_number<'a>(
  919|  18.9k|        &mut self,
  920|  18.9k|        input_buffer: &'a [u8],
  921|  18.9k|        is_ending: bool,
  922|  18.9k|    ) -> Option<Result<JsonToken<'a>, SyntaxError>> {
  923|  18.9k|        let mut next_byte_offset = 0;
  924|  18.9k|        if *input_buffer.get(next_byte_offset)? == b'-' {
  925|    247|            next_byte_offset += 1;
  926|  18.7k|        }
  927|       |        // integer starting with first bytes
  928|  18.9k|        match *input_buffer.get(next_byte_offset)? {
  929|  1.62k|            b'0' => {
  930|  1.62k|                next_byte_offset += 1;
  931|  1.62k|            }
  932|  17.3k|            b'1'..=b'9' => {
  933|  17.3k|                next_byte_offset += 1;
  934|  17.3k|                next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  935|       |            }
  936|     24|            c => {
  937|     24|                next_byte_offset += 1;
  938|     24|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  939|     24|                return Some(Err(self.syntax_error(
  940|     24|                    self.file_offset - 1..self.file_offset,
  941|     24|                    format!("A number is not allowed to start with '{}'", char::from(c)),
  942|     24|                )));
  943|       |            }
  944|       |        }
  945|       |
  946|       |        // Dot
  947|  18.9k|        if input_buffer.get(next_byte_offset).map_or_else(
  948|  18.9k|            || if is_ending { Some(None) } else { None },
  949|  18.9k|            |c| Some(Some(*c)),
  950|  18.9k|        )? == Some(b'.')
  951|       |        {
  952|    149|            next_byte_offset += 1;
  953|    149|            let c = *input_buffer.get(next_byte_offset)?;
  954|    145|            next_byte_offset += 1;
  955|    145|            if !c.is_ascii_digit() {
  956|      1|                self.file_offset += u64::try_from(next_byte_offset).unwrap();
  957|      1|                return Some(Err(self.syntax_error(
  958|      1|                    self.file_offset - 1..self.file_offset,
  959|      1|                    format!(
  960|      1|                        "A number fractional part must start with a digit and not '{}'",
  961|      1|                        char::from(c)
  962|      1|                    ),
  963|      1|                )));
  964|    144|            }
  965|    144|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
  966|  18.8k|        }
  967|       |
  968|       |        // Exp
  969|  18.9k|        let c = input_buffer.get(next_byte_offset).map_or_else(
  970|  18.9k|            || if is_ending { Some(None) } else { None },
  971|  18.9k|            |c| Some(Some(*c)),
  972|  18.9k|        )?;
  973|  18.9k|        if c == Some(b'e') || c == Some(b'E') {
  974|  10.1k|            next_byte_offset += 1;
  975|  10.1k|            match *input_buffer.get(next_byte_offset)? {
  976|       |                b'-' | b'+' => {
  977|  9.91k|                    next_byte_offset += 1;
  978|  9.91k|                    let c = *input_buffer.get(next_byte_offset)?;
  979|  9.84k|                    next_byte_offset += 1;
  980|  9.84k|                    if !c.is_ascii_digit() {
  981|     34|                        self.file_offset += u64::try_from(next_byte_offset).unwrap();
  982|     34|                        return Some(Err(self.syntax_error(
  983|     34|                            self.file_offset - 1..self.file_offset,
  984|     34|                            format!(
  985|     34|                                "A number exponential part must contain at least a digit, '{}' found",
  986|     34|                                char::from(c)
  987|     34|                            ),
  988|     34|                        )));
  989|  9.80k|                    }
  990|       |                }
  991|    196|                b'0'..=b'9' => {
  992|    196|                    next_byte_offset += 1;
  993|    196|                }
  994|      1|                c => {
  995|      1|                    next_byte_offset += 1;
  996|      1|                    self.file_offset += u64::try_from(next_byte_offset).unwrap();
  997|      1|                    return Some(Err(self.syntax_error(
  998|      1|                        self.file_offset - 1..self.file_offset,
  999|      1|                        format!(
 1000|      1|                            "A number exponential part must start with +, - or a digit, '{}' found",
 1001|      1|                            char::from(c)
 1002|      1|                        ),
 1003|      1|                    )));
 1004|       |                }
 1005|       |            }
 1006|  10.0k|            next_byte_offset += read_digits(&input_buffer[next_byte_offset..], is_ending)?;
 1007|  8.82k|        }
 1008|  18.8k|        self.file_offset += u64::try_from(next_byte_offset).unwrap();
 1009|  18.8k|        Some(Ok(JsonToken::Number(Cow::Borrowed(
 1010|  18.8k|            str::from_utf8(&input_buffer[..next_byte_offset]).unwrap(),
 1011|  18.8k|        ))))
 1012|  18.9k|    }
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_number0B9_:
  948|     82|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_numbers_0B9_:
  949|  18.8k|            |c| Some(Some(*c)),
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_numbers0_0B9_:
  970|    100|            || if is_ending { Some(None) } else { None },
_RNCNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB7_9JsonLexer11read_numbers1_0B9_:
  971|  18.8k|            |c| Some(Some(*c)),
_RNvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB5_9JsonLexer11decode_utf8:
 1014|   711k|    fn decode_utf8<'a>(
 1015|   711k|        &self,
 1016|   711k|        input_buffer: &'a [u8],
 1017|   711k|        start_position: u64,
 1018|   711k|    ) -> (Cow<'a, str>, Option<SyntaxError>) {
 1019|   711k|        match str::from_utf8(input_buffer) {
 1020|   673k|            Ok(str) => (Cow::Borrowed(str), None),
 1021|  38.1k|            Err(e) => (
 1022|  38.1k|                String::from_utf8_lossy(input_buffer),
 1023|  38.1k|                Some({
 1024|  38.1k|                    let pos = start_position + u64::try_from(e.valid_up_to()).unwrap();
 1025|  38.1k|                    self.syntax_error(pos..pos + 1, format!("Invalid UTF-8: {e}"))
 1026|  38.1k|                }),
 1027|  38.1k|            ),
 1028|       |        }
 1029|   711k|    }
_RINvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB6_9JsonLexer12syntax_errorNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
 1031|  43.8k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  43.8k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  43.8k|        SyntaxError {
 1034|  43.8k|            location: TextPosition {
 1035|  43.8k|                line: self.file_line,
 1036|  43.8k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  43.8k|                offset: start_file_offset,
 1038|  43.8k|            }..TextPosition {
 1039|  43.8k|                line: self.file_line,
 1040|  43.8k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  43.8k|                offset: file_offset.end,
 1042|  43.8k|            },
 1043|  43.8k|            message: message.into(),
 1044|  43.8k|        }
 1045|  43.8k|    }
_RINvMs1_NtCsiS85MHDKMvU_17json_event_parser4readNtB6_9JsonLexer12syntax_errorReEB8_:
 1031|  3.92k|    fn syntax_error(&self, file_offset: Range<u64>, message: impl Into<String>) -> SyntaxError {
 1032|  3.92k|        let start_file_offset = max(file_offset.start, self.file_start_of_last_line);
 1033|  3.92k|        SyntaxError {
 1034|  3.92k|            location: TextPosition {
 1035|  3.92k|                line: self.file_line,
 1036|  3.92k|                column: start_file_offset - self.file_start_of_last_line, //TODO: unicode
 1037|  3.92k|                offset: start_file_offset,
 1038|  3.92k|            }..TextPosition {
 1039|  3.92k|                line: self.file_line,
 1040|  3.92k|                column: file_offset.end - self.file_start_of_last_line, //TODO: unicode
 1041|  3.92k|                offset: file_offset.end,
 1042|  3.92k|            },
 1043|  3.92k|            message: message.into(),
 1044|  3.92k|        }
 1045|  3.92k|    }
_RNvNtCsiS85MHDKMvU_17json_event_parser4read14read_hexa_char:
 1048|   283k|fn read_hexa_char(input: &[u8]) -> Result<u32, String> {
 1049|   283k|    let mut value = 0;
 1050|  1.01M|    for c in input.iter().copied() {
 1051|  1.01M|        value = value * 16
 1052|  1.01M|            + match c {
 1053|   994k|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
 1054|   177k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
 1055|   366k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
 1056|       |                _ => {
 1057|  91.0k|                    return Err(format!(
 1058|  91.0k|                        "Unexpected character in a unicode escape: '{}'",
 1059|  91.0k|                        char::from(c)
 1060|  91.0k|                    ))
 1061|       |                }
 1062|       |            }
 1063|       |    }
 1064|   192k|    Ok(value)
 1065|   283k|}
_RNvNtCsiS85MHDKMvU_17json_event_parser4read11read_digits:
 1067|  27.4k|fn read_digits(input_buffer: &[u8], is_ending: bool) -> Option<usize> {
 1068|  27.4k|    let count = input_buffer
 1069|  27.4k|        .iter()
 1070|  27.4k|        .take_while(|c| c.is_ascii_digit())
 1071|  27.4k|        .count();
 1072|  27.4k|    if count == input_buffer.len() && !is_ending {
 1073|      0|        return None;
 1074|  27.4k|    }
 1075|  27.4k|    Some(count)
 1076|  27.4k|}
_RNCNvNtCsiS85MHDKMvU_17json_event_parser4read11read_digits0B5_:
 1070|  39.0k|        .take_while(|c| c.is_ascii_digit())
_RNvNtCsiS85MHDKMvU_17json_event_parser4read11owned_event:
 1078|  1.02k|fn owned_event(event: JsonEvent<'_>) -> JsonEvent<'static> {
 1079|  1.02k|    match event {
 1080|    126|        JsonEvent::String(s) => JsonEvent::String(s.into_owned().into()),
 1081|     19|        JsonEvent::Number(n) => JsonEvent::Number(n.into_owned().into()),
 1082|      7|        JsonEvent::Boolean(b) => JsonEvent::Boolean(b),
 1083|      2|        JsonEvent::Null => JsonEvent::Null,
 1084|      1|        JsonEvent::StartArray => JsonEvent::StartArray,
 1085|      2|        JsonEvent::EndArray => JsonEvent::EndArray,
 1086|     30|        JsonEvent::StartObject => JsonEvent::StartObject,
 1087|      1|        JsonEvent::EndObject => JsonEvent::EndObject,
 1088|      0|        JsonEvent::ObjectKey(k) => JsonEvent::ObjectKey(k.into_owned().into()),
 1089|    835|        JsonEvent::Eof => JsonEvent::Eof,
 1090|       |    }
 1091|  1.02k|}

_RINvMs_NtCsiS85MHDKMvU_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  121|  31.6k|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|  31.6k|        match event {
  123|  7.21k|            JsonEvent::String(s) => {
  124|  7.21k|                self.before_value(&mut write)?;
  125|  7.21k|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      0|            JsonEvent::Boolean(b) => {
  132|      0|                self.before_value(&mut write)?;
  133|      0|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|  1.01k|                self.before_value(&mut write)?;
  141|  1.01k|                self.state_stack.push(JsonState::OpenArray);
  142|  1.01k|                write.write_all(b"[")
  143|       |            }
  144|  1.01k|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|  1.01k|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|  10.2k|                self.before_value(&mut write)?;
  162|  10.2k|                self.state_stack.push(JsonState::OpenObject);
  163|  10.2k|                write.write_all(b"{")
  164|       |            }
  165|  10.2k|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|  10.2k|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|  2.02k|            JsonEvent::ObjectKey(key) => {
  182|  2.02k|                match self.state_stack.pop() {
  183|  1.51k|                    Some(JsonState::OpenObject) => (),
  184|    506|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|  2.02k|                self.state_stack.push(JsonState::ContinuationObject);
  193|  2.02k|                self.state_stack.push(JsonState::ObjectValue);
  194|  2.02k|                write_escaped_json_string(&key, &mut write)?;
  195|  2.02k|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|  31.6k|    }
_RINvMs_NtCsiS85MHDKMvU_17json_event_parser5writeNtB5_18LowLevelJsonWriter11write_eventQQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  121|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>, mut write: impl Write) -> Result<()> {
  122|     14|        match event {
  123|      0|            JsonEvent::String(s) => {
  124|      0|                self.before_value(&mut write)?;
  125|      0|                write_escaped_json_string(&s, write)
  126|       |            }
  127|      0|            JsonEvent::Number(number) => {
  128|      0|                self.before_value(&mut write)?;
  129|      0|                write.write_all(number.as_bytes())
  130|       |            }
  131|      2|            JsonEvent::Boolean(b) => {
  132|      2|                self.before_value(&mut write)?;
  133|      2|                write.write_all(if b { b"true" } else { b"false" })
  134|       |            }
  135|       |            JsonEvent::Null => {
  136|      0|                self.before_value(&mut write)?;
  137|      0|                write.write_all(b"null")
  138|       |            }
  139|       |            JsonEvent::StartArray => {
  140|      0|                self.before_value(&mut write)?;
  141|      0|                self.state_stack.push(JsonState::OpenArray);
  142|      0|                write.write_all(b"[")
  143|       |            }
  144|      0|            JsonEvent::EndArray => match self.state_stack.pop() {
  145|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
  146|      0|                    write.write_all(b"]")
  147|       |                }
  148|      0|                Some(s) => {
  149|      0|                    self.state_stack.push(s);
  150|      0|                    Err(Error::new(
  151|      0|                        ErrorKind::InvalidInput,
  152|      0|                        "Closing a not opened array",
  153|      0|                    ))
  154|       |                }
  155|      0|                None => Err(Error::new(
  156|      0|                    ErrorKind::InvalidInput,
  157|      0|                    "Closing a not opened array",
  158|      0|                )),
  159|       |            },
  160|       |            JsonEvent::StartObject => {
  161|      4|                self.before_value(&mut write)?;
  162|      4|                self.state_stack.push(JsonState::OpenObject);
  163|      4|                write.write_all(b"{")
  164|       |            }
  165|      4|            JsonEvent::EndObject => match self.state_stack.pop() {
  166|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
  167|      4|                    write.write_all(b"}")
  168|       |                }
  169|      0|                Some(s) => {
  170|      0|                    self.state_stack.push(s);
  171|      0|                    Err(Error::new(
  172|      0|                        ErrorKind::InvalidInput,
  173|      0|                        "Closing a not opened object",
  174|      0|                    ))
  175|       |                }
  176|      0|                None => Err(Error::new(
  177|      0|                    ErrorKind::InvalidInput,
  178|      0|                    "Closing a not opened object",
  179|      0|                )),
  180|       |            },
  181|      4|            JsonEvent::ObjectKey(key) => {
  182|      4|                match self.state_stack.pop() {
  183|      2|                    Some(JsonState::OpenObject) => (),
  184|      2|                    Some(JsonState::ContinuationObject) => write.write_all(b",")?,
  185|       |                    _ => {
  186|      0|                        return Err(Error::new(
  187|      0|                            ErrorKind::InvalidInput,
  188|      0|                            "Trying to write an object key in an not object",
  189|      0|                        ))
  190|       |                    }
  191|       |                }
  192|      4|                self.state_stack.push(JsonState::ContinuationObject);
  193|      4|                self.state_stack.push(JsonState::ObjectValue);
  194|      4|                write_escaped_json_string(&key, &mut write)?;
  195|      4|                write.write_all(b":")
  196|       |            }
  197|      0|            JsonEvent::Eof => Err(Error::new(
  198|      0|                ErrorKind::InvalidInput,
  199|      0|                "EOF is not allowed in JSON writer",
  200|      0|            )),
  201|       |        }
  202|     14|    }
_RINvMs_NtCsiS85MHDKMvU_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  204|  18.4k|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|  18.4k|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|    974|                self.state_stack.push(JsonState::ContinuationArray);
  208|    974|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|  14.9k|                self.state_stack.push(JsonState::ContinuationArray);
  212|  14.9k|                write.write_all(b",")?;
  213|  14.9k|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|  2.02k|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|    506|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|    506|                    self.element_written = true;
  232|    506|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|  18.4k|    }
_RINvMs_NtCsiS85MHDKMvU_17json_event_parser5writeNtB5_18LowLevelJsonWriter12before_valueQQQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  204|      6|    fn before_value(&mut self, mut write: impl Write) -> Result<()> {
  205|      6|        match self.state_stack.pop() {
  206|       |            Some(JsonState::OpenArray) => {
  207|      0|                self.state_stack.push(JsonState::ContinuationArray);
  208|      0|                Ok(())
  209|       |            }
  210|       |            Some(JsonState::ContinuationArray) => {
  211|      0|                self.state_stack.push(JsonState::ContinuationArray);
  212|      0|                write.write_all(b",")?;
  213|      0|                Ok(())
  214|       |            }
  215|      0|            Some(last_state @ JsonState::OpenObject)
  216|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  217|      0|                self.state_stack.push(last_state);
  218|      0|                Err(Error::new(
  219|      0|                    ErrorKind::InvalidInput,
  220|      0|                    "Object key expected, string found",
  221|      0|                ))
  222|       |            }
  223|      4|            Some(JsonState::ObjectValue) => Ok(()),
  224|       |            None => {
  225|      2|                if self.element_written {
  226|      0|                    Err(Error::new(
  227|      0|                        ErrorKind::InvalidInput,
  228|      0|                        "A root JSON value has already been written",
  229|      0|                    ))
  230|       |                } else {
  231|      2|                    self.element_written = true;
  232|      2|                    Ok(())
  233|       |                }
  234|       |            }
  235|       |        }
  236|      6|    }
_RINvNtCsiS85MHDKMvU_17json_event_parser5write25write_escaped_json_stringQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  263|  7.21k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  7.21k|    write.write_all(b"\"")?;
  265|  7.21k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  60.5k|    for c in s.chars() {
  267|  60.5k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  60.5k|            c => {
  271|  60.5k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  60.5k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  7.21k|    write.write_all(b"\"")?;
  295|  7.21k|    Ok(())
  296|  7.21k|}
_RINvNtCsiS85MHDKMvU_17json_event_parser5write25write_escaped_json_stringQQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  263|  2.02k|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|  2.02k|    write.write_all(b"\"")?;
  265|  2.02k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|  11.6k|    for c in s.chars() {
  267|  11.6k|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|  11.6k|            c => {
  271|  11.6k|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|  11.6k|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|  2.02k|    write.write_all(b"\"")?;
  295|  2.02k|    Ok(())
  296|  2.02k|}
_RINvNtCsiS85MHDKMvU_17json_event_parser5write25write_escaped_json_stringQQQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  263|      4|fn write_escaped_json_string(s: &str, mut write: impl Write) -> Result<()> {
  264|      4|    write.write_all(b"\"")?;
  265|      4|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  266|     22|    for c in s.chars() {
  267|     22|        match c {
  268|      0|            '\\' => write.write_all(b"\\\\"),
  269|      0|            '"' => write.write_all(b"\\\""),
  270|     22|            c => {
  271|     22|                if c < char::from(32) {
  272|      0|                    match c {
  273|      0|                        '\u{08}' => write.write_all(b"\\b"),
  274|      0|                        '\u{0C}' => write.write_all(b"\\f"),
  275|      0|                        '\n' => write.write_all(b"\\n"),
  276|      0|                        '\r' => write.write_all(b"\\r"),
  277|      0|                        '\t' => write.write_all(b"\\t"),
  278|      0|                        c => {
  279|      0|                            let mut c = c as u8;
  280|      0|                            for i in (2..6).rev() {
  281|      0|                                let ch = c % 16;
  282|      0|                                buffer[i] = if ch < 10 { b'0' + ch } else { b'A' + ch - 10 };
  283|      0|                                c /= 16;
  284|       |                            }
  285|      0|                            write.write_all(&buffer)
  286|       |                        }
  287|       |                    }
  288|       |                } else {
  289|     22|                    write.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  290|       |                }
  291|       |            }
  292|      0|        }?;
  293|       |    }
  294|      4|    write.write_all(b"\"")?;
  295|      4|    Ok(())
  296|      4|}
_RNvMNtCsiS85MHDKMvU_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE11write_eventCseAC53pAIE9m_13oxigraph_fuzz:
   33|  31.6k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|  31.6k|        self.writer.write_event(event, &mut self.write)
   35|  31.6k|    }
_RNvMNtCsiS85MHDKMvU_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE3newCseAC53pAIE9m_13oxigraph_fuzz:
   26|    506|    pub const fn new(write: W) -> Self {
   27|    506|        Self {
   28|    506|            write,
   29|    506|            writer: LowLevelJsonWriter::new(),
   30|    506|        }
   31|    506|    }
_RNvMNtCsiS85MHDKMvU_17json_event_parser5writeINtB2_17ToWriteJsonWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCseAC53pAIE9m_13oxigraph_fuzz:
   37|    506|    pub fn finish(self) -> Result<W> {
   38|    506|        self.writer.validate_eof()?;
   39|    506|        Ok(self.write)
   40|    506|    }
_RNvMNtCsiS85MHDKMvU_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE11write_eventCseAC53pAIE9m_13oxigraph_fuzz:
   33|     14|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   34|     14|        self.writer.write_event(event, &mut self.write)
   35|     14|    }
_RNvMNtCsiS85MHDKMvU_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE3newCseAC53pAIE9m_13oxigraph_fuzz:
   26|      2|    pub const fn new(write: W) -> Self {
   27|      2|        Self {
   28|      2|            write,
   29|      2|            writer: LowLevelJsonWriter::new(),
   30|      2|        }
   31|      2|    }
_RNvMNtCsiS85MHDKMvU_17json_event_parser5writeINtB2_17ToWriteJsonWriterQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCseAC53pAIE9m_13oxigraph_fuzz:
   37|      2|    pub fn finish(self) -> Result<W> {
   38|      2|        self.writer.validate_eof()?;
   39|      2|        Ok(self.write)
   40|      2|    }
_RNvMs_NtCsiS85MHDKMvU_17json_event_parser5writeNtB4_18LowLevelJsonWriter3new:
  114|    508|    pub const fn new() -> Self {
  115|    508|        Self {
  116|    508|            state_stack: Vec::new(),
  117|    508|            element_written: false,
  118|    508|        }
  119|    508|    }
_RNvMs_NtCsiS85MHDKMvU_17json_event_parser5writeNtB4_18LowLevelJsonWriter12validate_eof:
  238|    508|    fn validate_eof(&self) -> Result<()> {
  239|    508|        if !self.state_stack.is_empty() {
  240|      0|            return Err(Error::new(
  241|      0|                ErrorKind::InvalidInput,
  242|      0|                "The written JSON is not balanced: an object or an array has not been closed",
  243|      0|            ));
  244|    508|        }
  245|    508|        if !self.element_written {
  246|      0|            return Err(Error::new(
  247|      0|                ErrorKind::InvalidInput,
  248|      0|                "A JSON file can't be empty",
  249|      0|            ));
  250|    508|        }
  251|    508|        Ok(())
  252|    508|    }

rust_fuzzer_test_input:
  209|  10.6k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|  10.6k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  10.6k|                }
  223|  10.6k|
  224|  10.6k|                __libfuzzer_sys_run(bytes);
  225|  10.6k|                0
  226|       |            }
_RNvNvCsiRedsXKKzM0_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  10.6k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  10.6k|                $body
  243|  10.6k|            }
LLVMFuzzerTestOneInput:
   58|  10.6k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  10.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  10.6k|    });
   63|  10.6k|
   64|  10.6k|    match test_input {
   65|  10.6k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  10.6k|}
_RNCNvCsfJW8UfT50Vi_13libfuzzer_sys15test_input_wrap0B3_:
   59|  10.6k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  10.6k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  10.6k|        rust_fuzzer_test_input(data_slice)
   62|  10.6k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCskvfXHrT6OsD_9once_cell3impINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE14is_initializedCsfJW8UfT50Vi_13libfuzzer_sys:
   49|  10.6k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  10.6k|        // An `Acquire` load is enough because that makes all the initialization
   51|  10.6k|        // operations visible to us, and, this being a fast path, weaker
   52|  10.6k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  10.6k|        // `SeqCst` operations on the slow path.
   54|  10.6k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  10.6k|    }

_RNvMs4_NtCskvfXHrT6OsD_9once_cell4syncINtB5_8OnceCellNtNtCs3OstG5Tqy1X_5alloc6string6StringE3getCsfJW8UfT50Vi_13libfuzzer_sys:
  963|  10.6k|        pub fn get(&self) -> Option<&T> {
  964|  10.6k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  10.6k|                None
  969|       |            }
  970|  10.6k|        }

_RINvMs11_Csa9OvQYE6bC8_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferKb0_E11parse_erroruECsjHb8aGRHKzq_5oxrdf:
 1578|    228|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1579|    228|        Err(IriParseError { kind })
 1580|    228|    }
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echar0CsjHb8aGRHKzq_5oxrdf:
 1561|  2.72k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNCNvMs11_Csa9OvQYE6bC8_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferKb0_E10read_echars_0CsjHb8aGRHKzq_5oxrdf:
 1562|  2.70k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsjHb8aGRHKzq_5oxrdf:
  185|  58.8k|    pub fn into_inner(self) -> T {
  186|  58.8k|        self.iri
  187|  58.8k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE11is_absoluteCsjHb8aGRHKzq_5oxrdf:
  199|  59.8k|    pub fn is_absolute(&self) -> bool {
  200|  59.8k|        self.positions.scheme_end != 0
  201|  59.8k|    }
_RNvMCsa9OvQYE6bC8_5oxiriINtB2_6IriRefNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsjHb8aGRHKzq_5oxrdf:
   58|  60.0k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  60.0k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  59.8k|        Ok(Self { iri, positions })
   61|  60.0k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCsjHb8aGRHKzq_5oxrdf:
 1359|  12.2k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  12.2k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|    105|            let start_position = self.input.position;
 1363|  10.4k|            while let Some(c) = self.input.next() {
 1364|  10.3k|                self.output.push(c);
 1365|  10.3k|                if c == ']' {
 1366|      2|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|      2|                    if !UNCHECKED {
 1368|      2|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      2|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|  10.3k|                }
 1393|       |            }
 1394|    103|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|    103|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|  29.4k|            loop {
 1404|  29.4k|                let c = self.input.next();
 1405|  29.4k|                match c {
 1406|       |                    Some(':') => {
 1407|  5.52k|                        self.output.push(':');
 1408|  5.52k|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  6.58k|                        self.output_positions.authority_end = self.output.len();
 1412|  6.58k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|  17.3k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  12.2k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCsjHb8aGRHKzq_5oxrdf:
 1468|  55.1k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   141k|        loop {
 1470|   141k|            let c = self.input.next();
 1471|   141k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  63.7k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  63.7k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  63.7k|                    } else if c == Some('/') {
 1481|  8.62k|                        self.output.push('/');
 1482|  55.1k|                    }
 1483|       |
 1484|  63.7k|                    if c == Some('?') {
 1485|  29.3k|                        self.output_positions.path_end = self.output.len();
 1486|  29.3k|                        self.output.push('?');
 1487|  29.3k|                        return self.parse_query();
 1488|  34.3k|                    } else if c == Some('#') {
 1489|  2.68k|                        self.output_positions.path_end = self.output.len();
 1490|  2.68k|                        self.output_positions.query_end = self.output.len();
 1491|  2.68k|                        self.output.push('#');
 1492|  2.68k|                        return self.parse_fragment();
 1493|  31.7k|                    } else if c.is_none() {
 1494|  23.0k|                        self.output_positions.path_end = self.output.len();
 1495|  23.0k|                        self.output_positions.query_end = self.output.len();
 1496|  23.0k|                        return Ok(());
 1497|  8.62k|                    }
 1498|       |                }
 1499|  77.2k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  55.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_portCsjHb8aGRHKzq_5oxrdf:
 1420|  5.52k|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1421|  6.25k|        loop {
 1422|  6.25k|            let c = self.input.next();
 1423|  6.25k|            match c {
 1424|       |                Some('/') | Some('?') | Some('#') | None => {
 1425|  5.51k|                    self.output_positions.authority_end = self.output.len();
 1426|  5.51k|                    return self.parse_path_start(c);
 1427|       |                }
 1428|    735|                Some(c) => {
 1429|    735|                    if UNCHECKED || c.is_ascii_digit() {
 1430|    724|                        self.output.push(c)
 1431|       |                    } else {
 1432|     11|                        return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c));
 1433|       |                    }
 1434|       |                }
 1435|       |            }
 1436|       |        }
 1437|  5.52k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10read_echarCsjHb8aGRHKzq_5oxrdf:
 1558|  2.73k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1559|  2.73k|        let c1 = self.input.next();
 1560|  2.73k|        let c2 = self.input.next();
 1561|  2.73k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1562|  2.70k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1563|       |        {
 1564|  2.69k|            self.output.push('%');
 1565|  2.69k|            self.output.push(c1.unwrap());
 1566|  2.69k|            self.output.push(c2.unwrap());
 1567|  2.69k|            Ok(())
 1568|       |        } else {
 1569|     33|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1570|     33|                Some('%'),
 1571|     33|                c1,
 1572|     33|                c2,
 1573|     33|            ]))
 1574|       |        }
 1575|  2.73k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E11parse_queryCsjHb8aGRHKzq_5oxrdf:
 1504|  29.9k|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1505|   275k|        while let Some(c) = self.input.next() {
 1506|   263k|            if c == '#' {
 1507|  18.3k|                self.output_positions.query_end = self.output.len();
 1508|  18.3k|                self.output.push('#');
 1509|  18.3k|                return self.parse_fragment();
 1510|       |            } else {
 1511|   245k|                self.read_url_query_codepoint_or_echar(c)?
 1512|       |            }
 1513|       |        }
 1514|  11.6k|        self.output_positions.query_end = self.output.len();
 1515|  11.6k|        Ok(())
 1516|  29.9k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCsjHb8aGRHKzq_5oxrdf:
 1213|  59.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   150k|        loop {
 1215|   150k|            let c = self.input.next();
 1216|   150k|            match c {
 1217|   150k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|  91.0k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  58.9k|                    self.output.push(':');
 1222|  58.9k|                    self.output_positions.scheme_end = self.output.len();
 1223|  58.9k|                    self.input_scheme_end = self.input.position;
 1224|  58.9k|                    return if self.input.starts_with('/') {
 1225|  17.4k|                        self.input.next();
 1226|  17.4k|                        self.output.push('/');
 1227|  17.4k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|  41.4k|                        self.output_positions.authority_end = self.output.len();
 1230|  41.4k|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|    216|                    self.input = ParserInput {
 1235|    216|                        value: self.iri.chars(),
 1236|    216|                        position: 0,
 1237|    216|                    }; // reset
 1238|    216|                    self.output.clear();
 1239|    216|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  59.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCsjHb8aGRHKzq_5oxrdf:
 1518|  23.2k|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|   141k|        while let Some(c) = self.input.next() {
 1520|   118k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|  23.2k|        Ok(())
 1523|  23.2k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_relativeCsjHb8aGRHKzq_5oxrdf:
 1256|  1.11k|    fn parse_relative(&mut self) -> Result<(), IriParseError> {
 1257|  1.11k|        if let Some(base) = self.base {
 1258|      0|            match self.input.front() {
 1259|       |                None => {
 1260|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1261|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1262|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1263|      0|                    self.output_positions.path_end = base.positions.path_end;
 1264|      0|                    self.output_positions.query_end = base.positions.query_end;
 1265|      0|                    Ok(())
 1266|       |                }
 1267|       |                Some('/') => {
 1268|      0|                    self.input.next();
 1269|      0|                    self.parse_relative_slash(&base)
 1270|       |                }
 1271|       |                Some('?') => {
 1272|      0|                    self.input.next();
 1273|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1274|      0|                    self.output.push('?');
 1275|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1276|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1277|      0|                    self.output_positions.path_end = base.positions.path_end;
 1278|      0|                    self.parse_query()
 1279|       |                }
 1280|       |                Some('#') => {
 1281|      0|                    self.input.next();
 1282|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1283|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1284|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1285|      0|                    self.output_positions.path_end = base.positions.path_end;
 1286|      0|                    self.output_positions.query_end = base.positions.query_end;
 1287|      0|                    self.output.push('#');
 1288|      0|                    self.parse_fragment()
 1289|       |                }
 1290|       |                _ => {
 1291|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1292|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1293|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1294|      0|                    self.output_positions.path_end = base.positions.path_end;
 1295|      0|                    self.remove_last_segment();
 1296|      0|                    if self.output.len() > base.positions.scheme_end {
 1297|      0|                        // We have some path or authority, we keep a base '/'
 1298|      0|                        self.output.push('/');
 1299|      0|                    }
 1300|      0|                    self.parse_path()
 1301|       |                }
 1302|       |            }
 1303|       |        } else {
 1304|  1.11k|            self.output_positions.scheme_end = 0;
 1305|  1.11k|            self.input_scheme_end = 0;
 1306|  1.11k|            if self.input.starts_with('/') {
 1307|    403|                self.input.next();
 1308|    403|                self.output.push('/');
 1309|    403|                self.parse_path_or_authority()
 1310|       |            } else {
 1311|    716|                self.output_positions.authority_end = 0;
 1312|    716|                self.parse_path()
 1313|       |            }
 1314|       |        }
 1315|  1.11k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCsjHb8aGRHKzq_5oxrdf:
 1335|  12.2k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|  34.4k|        loop {
 1338|  34.4k|            let c = self.input.next();
 1339|  34.4k|            match c {
 1340|       |                Some('@') => {
 1341|     24|                    self.output.push('@');
 1342|     24|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  12.1k|                    self.input = ParserInput {
 1346|  12.1k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  12.1k|                        position: self.input_scheme_end + 2,
 1348|  12.1k|                    };
 1349|  12.1k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  12.1k|                    return self.parse_host();
 1351|       |                }
 1352|  22.2k|                Some(c) => {
 1353|  22.2k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  12.2k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCsjHb8aGRHKzq_5oxrdf:
 1439|  12.1k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  12.1k|        match c {
 1441|       |            None => {
 1442|  1.88k|                self.output_positions.path_end = self.output.len();
 1443|  1.88k|                self.output_positions.query_end = self.output.len();
 1444|  1.88k|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|    592|                self.output_positions.path_end = self.output.len();
 1448|    592|                self.output.push('?');
 1449|    592|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|  2.25k|                self.output_positions.path_end = self.output.len();
 1453|  2.25k|                self.output_positions.query_end = self.output.len();
 1454|  2.25k|                self.output.push('#');
 1455|  2.25k|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  7.37k|                self.output.push('/');
 1459|  7.37k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  12.1k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCsjHb8aGRHKzq_5oxrdf:
 1199|  60.0k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  60.0k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      1|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      1|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  60.0k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|    903|            _ => self.parse_relative(),
 1210|       |        }
 1211|  60.0k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCsjHb8aGRHKzq_5oxrdf:
 1245|  17.8k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  17.8k|        if self.input.starts_with('/') {
 1247|  12.2k|            self.input.next();
 1248|  12.2k|            self.output.push('/');
 1249|  12.2k|            self.parse_authority()
 1250|       |        } else {
 1251|  5.63k|            self.output_positions.authority_end = self.output.len() - 1;
 1252|  5.63k|            self.parse_path()
 1253|       |        }
 1254|  17.8k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCsjHb8aGRHKzq_5oxrdf:
 1534|   234k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|   234k|        if UNCHECKED || is_url_code_point(c) {
 1536|   232k|            self.output.push(c);
 1537|   232k|            Ok(())
 1538|  2.53k|        } else if c == '%' {
 1539|  2.50k|            self.read_echar()
 1540|       |        } else {
 1541|     29|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|   234k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E33read_url_query_codepoint_or_echarCsjHb8aGRHKzq_5oxrdf:
 1546|   245k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1547|   245k|        if UNCHECKED || is_url_query_code_point(c) {
 1548|   245k|            self.output.push(c);
 1549|   245k|            Ok(())
 1550|    276|        } else if c == '%' {
 1551|    227|            self.read_echar()
 1552|       |        } else {
 1553|     49|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1554|       |        }
 1555|   245k|    }
_RNvMs11_Csa9OvQYE6bC8_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCsjHb8aGRHKzq_5oxrdf:
 1174|  60.0k|    fn parse(
 1175|  60.0k|        iri: &'a str,
 1176|  60.0k|        base: Option<IriRef<&'a str>>,
 1177|  60.0k|        output: &'a mut O,
 1178|  60.0k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  60.0k|        let mut parser = Self {
 1180|  60.0k|            iri,
 1181|  60.0k|            base,
 1182|  60.0k|            input: ParserInput {
 1183|  60.0k|                value: iri.chars(),
 1184|  60.0k|                position: 0,
 1185|  60.0k|            },
 1186|  60.0k|            output,
 1187|  60.0k|            output_positions: IriElementsPositions {
 1188|  60.0k|                scheme_end: 0,
 1189|  60.0k|                authority_end: 0,
 1190|  60.0k|                path_end: 0,
 1191|  60.0k|                query_end: 0,
 1192|  60.0k|            },
 1193|  60.0k|            input_scheme_end: 0,
 1194|  60.0k|        };
 1195|  60.0k|        parser.parse_scheme_start()?;
 1196|  59.8k|        Ok(parser.output_positions)
 1197|  60.0k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE10into_innerCsjHb8aGRHKzq_5oxrdf:
  665|  58.8k|    pub fn into_inner(self) -> T {
  666|  58.8k|        self.0.into_inner()
  667|  58.8k|    }
_RNvMsp_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringE5parseCsjHb8aGRHKzq_5oxrdf:
  556|  60.0k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  60.0k|        IriRef::parse(iri)?.try_into()
  558|  60.0k|    }
_RNvXsV_Csa9OvQYE6bC8_5oxiriINtB5_3IriNtNtCs3OstG5Tqy1X_5alloc6string6StringEINtNtCscdEvteftVc2_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCsjHb8aGRHKzq_5oxrdf:
  968|  59.8k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  59.8k|        if iri.is_absolute() {
  970|  58.8k|            Ok(Self(iri))
  971|       |        } else {
  972|    969|            Err(IriParseError {
  973|    969|                kind: IriParseErrorKind::NoScheme,
  974|    969|            })
  975|       |        }
  976|  59.8k|    }
_RNvCsa9OvQYE6bC8_5oxiri17is_url_code_pointCsjHb8aGRHKzq_5oxrdf:
 1584|   480k|fn is_url_code_point(c: char) -> bool {
 1585|   480k|    matches!(c,
 1586|   267k|        'a'..='z'
 1587|   227k|        | 'A'..='Z'
 1588|   188k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|   121k|        | '\u{A0}'..='\u{D7FF}'
 1609|   110k|        | '\u{F900}'..='\u{FDCF}'
 1610|   110k|        | '\u{FDF0}'..='\u{FFEF}'
 1611|   110k|        | '\u{10000}'..='\u{1FFFD}'
 1612|   110k|        | '\u{20000}'..='\u{2FFFD}'
 1613|   110k|        | '\u{30000}'..='\u{3FFFD}'
 1614|   110k|        | '\u{40000}'..='\u{4FFFD}'
 1615|  7.47k|        | '\u{50000}'..='\u{5FFFD}'
 1616|    172|        | '\u{60000}'..='\u{6FFFD}'
 1617|    155|        | '\u{70000}'..='\u{7FFFD}'
 1618|    132|        | '\u{80000}'..='\u{8FFFD}'
 1619|    132|        | '\u{90000}'..='\u{9FFFD}'
 1620|    132|        | '\u{A0000}'..='\u{AFFFD}'
 1621|    132|        | '\u{B0000}'..='\u{BFFFD}'
 1622|    132|        | '\u{C0000}'..='\u{CFFFD}'
 1623|     22|        | '\u{D0000}'..='\u{DFFFD}'
 1624|     22|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|   480k|}
_RNvCsa9OvQYE6bC8_5oxiri23is_url_query_code_pointCsjHb8aGRHKzq_5oxrdf:
 1629|   245k|fn is_url_query_code_point(c: char) -> bool {
 1630|   245k|    is_url_code_point(c)
 1631|    620|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1632|   245k|}
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput11starts_withCsjHb8aGRHKzq_5oxrdf:
 1156|  90.1k|    fn starts_with(&self, c: char) -> bool {
 1157|  90.1k|        self.value.as_str().starts_with(c)
 1158|  90.1k|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput4nextCsjHb8aGRHKzq_5oxrdf:
 1141|   824k|    fn next(&mut self) -> Option<char> {
 1142|   824k|        if let Some(head) = self.value.next() {
 1143|   762k|            self.position += head.len_utf8();
 1144|   762k|            Some(head)
 1145|       |        } else {
 1146|  61.8k|            None
 1147|       |        }
 1148|   824k|    }
_RNvMs10_Csa9OvQYE6bC8_5oxiriNtB6_11ParserInput5frontCsjHb8aGRHKzq_5oxrdf:
 1151|  60.0k|    fn front(&self) -> Option<char> {
 1152|  60.0k|        self.value.clone().next()
 1153|  60.0k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCsjHb8aGRHKzq_5oxrdf:
 1092|   237k|    fn len(&self) -> usize {
 1093|   237k|        self.len
 1094|   237k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCsjHb8aGRHKzq_5oxrdf:
 1072|   751k|    fn push(&mut self, c: char) {
 1073|   751k|        self.len += c.len_utf8();
 1074|   751k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCsjHb8aGRHKzq_5oxrdf:
 1082|    216|    fn clear(&mut self) {
 1083|    216|        self.len = 0;
 1084|    216|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCsjHb8aGRHKzq_5oxrdf:
 1097|   127k|    fn as_str(&self) -> &str {
 1098|   127k|        ""
 1099|   127k|    }
_RNvXsY_Csa9OvQYE6bC8_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCsjHb8aGRHKzq_5oxrdf:
 1087|  12.1k|    fn truncate(&mut self, new_len: usize) {
 1088|  12.1k|        self.len = new_len;
 1089|  12.1k|    }
_RNvXsW_Csa9OvQYE6bC8_5oxiriNtB5_13IriParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
 1003|  1.19k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1004|  1.19k|        match &self.kind {
 1005|    970|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
 1006|    103|            IriParseErrorKind::InvalidHostCharacter(c) => {
 1007|    103|                write!(f, "Invalid character '{c}' in host")
 1008|       |            }
 1009|      2|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({e})"),
 1010|     11|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{c}'"),
 1011|     78|            IriParseErrorKind::InvalidIriCodePoint(c) => {
 1012|     78|                write!(f, "Invalid IRI code point '{c}'")
 1013|       |            }
 1014|     33|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
 1015|     33|                f,
 1016|     33|                "Invalid IRI percent encoding '{}'",
 1017|     33|                cs.iter().flatten().cloned().collect::<String>()
 1018|     33|            ),
 1019|       |        }
 1020|  1.19k|    }

_RNvNtCseAC53pAIE9m_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  10.6k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  10.6k|    let Ok(reader) = QueryResultsParser::from_format(format).parse_slice(data) else {
    8|  9.42k|        return;
    9|       |    };
   10|  1.18k|    match reader {
   11|  1.18k|        FromSliceQueryResultsReader::Solutions(solutions) => {
   12|  1.18k|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   13|    678|                return;
   14|       |            };
   15|       |
   16|       |            // We try to write again
   17|    506|            let mut writer = QueryResultsSerializer::from_format(format)
   18|    506|                .serialize_solutions_to_write(
   19|    506|                    Vec::new(),
   20|    506|                    solutions
   21|    506|                        .first()
   22|    506|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   23|    506|                )
   24|    506|                .unwrap();
   25|  9.19k|            for solution in &solutions {
   26|  8.68k|                writer.write(solution).unwrap();
   27|  8.68k|            }
   28|    506|            let serialized = writer.finish().unwrap();
   29|       |
   30|       |            // And to parse again
   31|    506|            if let FromSliceQueryResultsReader::Solutions(roundtrip_solutions) =
   32|    506|                QueryResultsParser::from_format(format)
   33|    506|                    .parse_slice(&serialized)
   34|    506|                    .with_context(|| format!("Parsing {:?}", String::from_utf8_lossy(&serialized)))
   35|    506|                    .unwrap()
   36|       |            {
   37|    506|                assert_eq!(
   38|    506|                    roundtrip_solutions
   39|    506|                        .collect::<Result<Vec<_>, _>>()
   40|    506|                        .with_context(|| format!("Parsing {serialized:?}"))
   41|    506|                        .unwrap(),
   42|    506|                    solutions
   43|    506|                )
   44|      0|            }
   45|       |        }
   46|      2|        FromSliceQueryResultsReader::Boolean(value) => {
   47|      2|            // We try to write again
   48|      2|            let mut serialized = Vec::new();
   49|      2|            QueryResultsSerializer::from_format(format)
   50|      2|                .serialize_boolean_to_write(&mut serialized, value)
   51|      2|                .unwrap();
   52|       |
   53|       |            // And to parse again
   54|      2|            if let FromSliceQueryResultsReader::Boolean(roundtrip_value) =
   55|      2|                QueryResultsParser::from_format(format)
   56|      2|                    .parse_slice(&serialized)
   57|      2|                    .unwrap()
   58|       |            {
   59|      2|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  10.6k|}
_RNCNvNtCseAC53pAIE9m_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   22|    495|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RINvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB3_9NamedNode3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs8ymoBFYi2FH_10sparesults:
   24|  60.0k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  60.0k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  60.0k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriCs8ymoBFYi2FH_10sparesults:
   29|  58.8k|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|  58.8k|        Self::new_unchecked(iri.into_inner())
   31|  58.8k|    }
_RINvMNtCsjHb8aGRHKzq_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   39|  58.8k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  58.8k|        Self { iri: iri.into() }
   41|  58.8k|    }

_RINvMNtCsjHb8aGRHKzq_5oxrdf8variableNtB3_8Variable3newINtNtCs3OstG5Tqy1X_5alloc6borrow3CoweEECs8ymoBFYi2FH_10sparesults:
   22|  16.5k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   23|  16.5k|        let name = name.into();
   24|  16.5k|        validate_variable_identifier(&name)?;
   25|  16.5k|        Ok(Self::new_unchecked(name))
   26|  16.5k|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf8variableNtB2_8Variable6as_refCs8ymoBFYi2FH_10sparesults:
   50|     15|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|     15|        VariableRef { name: &self.name }
   52|     15|    }
_RNvMNtCsjHb8aGRHKzq_5oxrdf8variableNtB2_8Variable6as_strCs8ymoBFYi2FH_10sparesults:
   40|  23.3k|    pub fn as_str(&self) -> &str {
   41|  23.3k|        &self.name
   42|  23.3k|    }
_RNvXs1_NtCsjHb8aGRHKzq_5oxrdf8variableNtB5_11VariableRefNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs8ymoBFYi2FH_10sparesults:
  116|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|     15|        write!(f, "?{}", self.name)
  118|     15|    }
_RNvXs_NtCsjHb8aGRHKzq_5oxrdf8variableNtB4_8VariableNtNtCscdEvteftVc2_4core3fmt7Display3fmtCs8ymoBFYi2FH_10sparesults:
   57|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|     15|        self.as_ref().fmt(f)
   59|     15|    }
_RNvNtCsjHb8aGRHKzq_5oxrdf8variable28validate_variable_identifier:
  163|  16.5k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  164|  16.5k|    let mut chars = id.chars();
  165|  16.5k|    let front = chars.next().ok_or(VariableNameParseError)?;
  166|  16.5k|    match front {
  167|  16.5k|        '0'..='9'
  168|       |        | '_'
  169|       |        | ':'
  170|  15.9k|        | 'A'..='Z'
  171|  10.7k|        | 'a'..='z'
  172|    169|        | '\u{00C0}'..='\u{00D6}'
  173|    169|        | '\u{00D8}'..='\u{00F6}'
  174|    169|        | '\u{00F8}'..='\u{02FF}'
  175|    157|        | '\u{0370}'..='\u{037D}'
  176|    157|        | '\u{037F}'..='\u{1FFF}'
  177|    122|        | '\u{200C}'..='\u{200D}'
  178|    122|        | '\u{2070}'..='\u{218F}'
  179|    122|        | '\u{2C00}'..='\u{2FEF}'
  180|    122|        | '\u{3001}'..='\u{D7FF}'
  181|     63|        | '\u{F900}'..='\u{FDCF}'
  182|     63|        | '\u{FDF0}'..='\u{FFFD}'
  183|  16.5k|        | '\u{10000}'..='\u{EFFFF}' => (),
  184|      4|        _ => return Err(VariableNameParseError),
  185|       |    }
  186|   125k|    for c in chars {
  187|   109k|        match c {
  188|   109k|            '0'..='9'
  189|       |            | '\u{00B7}'
  190|  27.6k|            | '\u{0300}'..='\u{036F}'
  191|  19.6k|            | '\u{203F}'..='\u{2040}'
  192|       |            | '_'
  193|  99.7k|            | 'A'..='Z'
  194|  53.4k|            | 'a'..='z'
  195|  27.9k|            | '\u{00C0}'..='\u{00D6}'
  196|  27.9k|            | '\u{00D8}'..='\u{00F6}'
  197|  27.9k|            | '\u{00F8}'..='\u{02FF}'
  198|  27.6k|            | '\u{0370}'..='\u{037D}'
  199|  27.6k|            | '\u{037F}'..='\u{1FFF}'
  200|  19.6k|            | '\u{200C}'..='\u{200D}'
  201|  19.6k|            | '\u{2070}'..='\u{218F}'
  202|  19.3k|            | '\u{2C00}'..='\u{2FEF}'
  203|  19.3k|            | '\u{3001}'..='\u{D7FF}'
  204|  13.3k|            | '\u{F900}'..='\u{FDCF}'
  205|  13.3k|            | '\u{FDF0}'..='\u{FFFD}'
  206|   109k|            | '\u{10000}'..='\u{EFFFF}' => (),
  207|      4|            _ => return Err(VariableNameParseError),
  208|       |        }
  209|       |    }
  210|  16.5k|    Ok(())
  211|  16.5k|}
_RNvXsr_NtCsjHb8aGRHKzq_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCscdEvteftVc2_4core3fmt7Display3fmt:
  214|      9|#[derive(Debug, thiserror::Error)]
_RINvMNtCsjHb8aGRHKzq_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCs3OstG5Tqy1X_5alloc6string6StringEB5_:
   35|  16.5k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  16.5k|        Self { name: name.into() }
   37|  16.5k|    }

_RNvXs4_NtCs8ymoBFYi2FH_10sparesults5errorNtB5_23QueryResultsSyntaxErrorINtNtCscdEvteftVc2_4core7convert4FromNtNtCsiS85MHDKMvU_17json_event_parser4read11SyntaxErrorE4from:
  147|  8.02k|    fn from(error: json_event_parser::SyntaxError) -> Self {
  148|  8.02k|        Self(SyntaxErrorKind::Json(error))
  149|  8.02k|    }
_RINvMs2_NtCs8ymoBFYi2FH_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgNtNtCs3OstG5Tqy1X_5alloc6string6StringEB8_:
   87|  1.87k|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|  1.87k|        Self(SyntaxErrorKind::Msg {
   89|  1.87k|            msg: msg.into(),
   90|  1.87k|            location: None,
   91|  1.87k|        })
   92|  1.87k|    }
_RINvMs2_NtCs8ymoBFYi2FH_10sparesults5errorNtB6_23QueryResultsSyntaxError3msgReEB8_:
   87|    204|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   88|    204|        Self(SyntaxErrorKind::Msg {
   89|    204|            msg: msg.into(),
   90|    204|            location: None,
   91|    204|        })
   92|    204|    }

_RINvMNtCs8ymoBFYi2FH_10sparesults4jsonINtB3_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs0_NtB5_10serializerINtB36_22ToWriteSolutionsWriterB18_E5writeRNtNtCsjHb8aGRHKzq_5oxrdf8variable8VariableRNtNtB48_6triple4TermRNtB2E_13QuerySolutionE0EECseAC53pAIE9m_13oxigraph_fuzz:
   61|  8.68k|    pub fn write<'a>(
   62|  8.68k|        &mut self,
   63|  8.68k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
   64|  8.68k|    ) -> io::Result<()> {
   65|  8.68k|        let mut buffer = Vec::with_capacity(48);
   66|  8.68k|        self.inner.write(&mut buffer, solution);
   67|  8.68k|        Self::do_write(&mut self.writer, buffer)
   68|  8.68k|    }
_RINvMs_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_24InnerJsonSolutionsWriter5writeINtNtNtNtCscdEvteftVc2_4core4iter8adapters3map3MapNtNtB7_8solution4IterNCINvMs0_NtB7_10serializerINtB2v_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCsjHb8aGRHKzq_5oxrdf8variable8VariableRNtNtB42_6triple4TermRNtB23_13QuerySolutionE0EECseAC53pAIE9m_13oxigraph_fuzz:
  150|  8.68k|    fn write<'a>(
  151|  8.68k|        &self,
  152|  8.68k|        output: &mut Vec<JsonEvent<'a>>,
  153|  8.68k|        solution: impl IntoIterator<Item = (VariableRef<'a>, TermRef<'a>)>,
  154|  8.68k|    ) {
  155|  8.68k|        output.push(JsonEvent::StartObject);
  156|  8.68k|        for (variable, value) in solution {
  157|      0|            output.push(JsonEvent::ObjectKey(variable.as_str().into()));
  158|      0|            write_json_term(output, value);
  159|      0|        }
  160|  8.68k|        output.push(JsonEvent::EndObject);
  161|  8.68k|    }
_RINvNtCs8ymoBFYi2FH_10sparesults4json25write_boolean_json_resultQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
   15|      2|pub fn write_boolean_json_result<W: Write>(write: W, value: bool) -> io::Result<W> {
   16|      2|    let mut writer = ToWriteJsonWriter::new(write);
   17|     14|    for event in inner_write_boolean_json_result(value) {
   18|     14|        writer.write_event(event)?;
   19|       |    }
   20|      2|    writer.finish()
   21|      2|}
_RNvMNtCs8ymoBFYi2FH_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5startCseAC53pAIE9m_13oxigraph_fuzz:
   53|    506|    pub fn start(write: W, variables: &[Variable]) -> io::Result<Self> {
   54|    506|        let mut writer = ToWriteJsonWriter::new(write);
   55|    506|        let mut buffer = Vec::with_capacity(48);
   56|    506|        let inner = InnerJsonSolutionsWriter::start(&mut buffer, variables);
   57|    506|        Self::do_write(&mut writer, buffer)?;
   58|    506|        Ok(Self { inner, writer })
   59|    506|    }
_RNvMNtCs8ymoBFYi2FH_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCseAC53pAIE9m_13oxigraph_fuzz:
   70|    506|    pub fn finish(mut self) -> io::Result<W> {
   71|    506|        let mut buffer = Vec::with_capacity(4);
   72|    506|        self.inner.finish(&mut buffer);
   73|    506|        Self::do_write(&mut self.writer, buffer)?;
   74|    506|        self.writer.finish()
   75|    506|    }
_RNvMNtCs8ymoBFYi2FH_10sparesults4jsonINtB2_26ToWriteJsonSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE8do_writeCseAC53pAIE9m_13oxigraph_fuzz:
   77|  9.69k|    fn do_write(writer: &mut ToWriteJsonWriter<W>, output: Vec<JsonEvent<'_>>) -> io::Result<()> {
   78|  41.3k|        for event in output {
   79|  31.6k|            writer.write_event(event)?;
   80|       |        }
   81|  9.69k|        Ok(())
   82|  9.69k|    }
_RNCNvMs5_NtCs8ymoBFYi2FH_10sparesults4jsonNtB7_24JsonInnerSolutionsReader10read_event0B9_:
  796|     10|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  797|     10|                        QueryResultsSyntaxError::msg(format!(
  798|     10|                            "The variable {key} has not been defined in the header"
  799|     10|                        ))
  800|     10|                    })?;
_RNCNvMs6_NtCs8ymoBFYi2FH_10sparesults4jsonNtB7_19JsonInnerTermReader10read_event0B9_:
  917|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  918|      1|                                QueryResultsSyntaxError::msg(
  919|      1|                                    "uri serialization should have a 'value' key",
  920|      1|                                )
  921|      1|                            })?)
_RNCNvMs6_NtCs8ymoBFYi2FH_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events0_0B9_:
  928|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  929|      1|                                QueryResultsSyntaxError::msg(
  930|      1|                                    "bnode serialization should have a 'value' key",
  931|      1|                                )
  932|      1|                            })?)
_RNCNvMs6_NtCs8ymoBFYi2FH_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events2_0B9_:
  939|      1|                            let value = self.value.take().ok_or_else(|| {
  940|      1|                                QueryResultsSyntaxError::msg(
  941|      1|                                    "literal serialization should have a 'value' key",
  942|      1|                                )
  943|      1|                            })?;
_RNCNvMs6_NtCs8ymoBFYi2FH_10sparesults4jsonNtB7_19JsonInnerTermReader10read_events4_0B9_:
  972|      1|                                match self.subject.take().ok_or_else(|| {
  973|      1|                                    QueryResultsSyntaxError::msg(
  974|      1|                                        "triple serialization should have a 'subject' key",
  975|      1|                                    )
  976|      1|                                })? {
_RNvNtCs8ymoBFYi2FH_10sparesults4json31inner_write_boolean_json_result:
   35|      2|fn inner_write_boolean_json_result(value: bool) -> [JsonEvent<'static>; 7] {
   36|      2|    [
   37|      2|        JsonEvent::StartObject,
   38|      2|        JsonEvent::ObjectKey("head".into()),
   39|      2|        JsonEvent::StartObject,
   40|      2|        JsonEvent::EndObject,
   41|      2|        JsonEvent::ObjectKey("boolean".into()),
   42|      2|        JsonEvent::Boolean(value),
   43|      2|        JsonEvent::EndObject,
   44|      2|    ]
   45|      2|}
_RNvMs_NtCs8ymoBFYi2FH_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter5start:
  131|    506|    fn start<'a>(output: &mut Vec<JsonEvent<'a>>, variables: &'a [Variable]) -> Self {
  132|    506|        output.push(JsonEvent::StartObject);
  133|    506|        output.push(JsonEvent::ObjectKey("head".into()));
  134|    506|        output.push(JsonEvent::StartObject);
  135|    506|        output.push(JsonEvent::ObjectKey("vars".into()));
  136|    506|        output.push(JsonEvent::StartArray);
  137|  7.72k|        for variable in variables {
  138|  7.21k|            output.push(JsonEvent::String(variable.as_str().into()));
  139|  7.21k|        }
  140|    506|        output.push(JsonEvent::EndArray);
  141|    506|        output.push(JsonEvent::EndObject);
  142|    506|        output.push(JsonEvent::ObjectKey("results".into()));
  143|    506|        output.push(JsonEvent::StartObject);
  144|    506|        output.push(JsonEvent::ObjectKey("bindings".into()));
  145|    506|        output.push(JsonEvent::StartArray);
  146|    506|        Self {}
  147|    506|    }
_RNvMs_NtCs8ymoBFYi2FH_10sparesults4jsonNtB4_24InnerJsonSolutionsWriter6finish:
  164|    506|    fn finish(self, output: &mut Vec<JsonEvent<'_>>) {
  165|    506|        output.push(JsonEvent::EndArray);
  166|    506|        output.push(JsonEvent::EndObject);
  167|    506|        output.push(JsonEvent::EndObject);
  168|    506|    }
_RNvMs2_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_31FromSliceJsonQueryResultsReader4read:
  344|  11.1k|    pub fn read(slice: &'a [u8]) -> Result<Self, QueryResultsSyntaxError> {
  345|  11.1k|        let mut reader = FromBufferJsonReader::new(slice);
  346|  11.1k|        let mut inner = JsonInnerReader::new();
  347|       |        loop {
  348|   773k|            if let Some(result) = inner.read_event(reader.read_next_event()?)? {
  349|  1.69k|                return match result {
  350|       |                    JsonInnerQueryResults::Solutions {
  351|  1.69k|                        variables,
  352|  1.69k|                        solutions,
  353|  1.69k|                    } => Ok(Self::Solutions {
  354|  1.69k|                        variables,
  355|  1.69k|                        solutions: FromSliceJsonSolutionsReader {
  356|  1.69k|                            inner: solutions,
  357|  1.69k|                            reader,
  358|  1.69k|                        },
  359|  1.69k|                    }),
  360|      4|                    JsonInnerQueryResults::Boolean(value) => Ok(Self::Boolean(value)),
  361|       |                };
  362|   762k|            }
  363|       |        }
  364|  11.1k|    }
_RNvMs3_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_28FromSliceJsonSolutionsReader9read_next:
  373|  19.6k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  374|  19.6k|        match &mut self.inner {
  375|  10.4k|            JsonInnerSolutions::Reader(reader) => loop {
  376|  62.2k|                let event = self.reader.read_next_event()?;
  377|  61.8k|                if event == JsonEvent::Eof {
  378|    511|                    return Ok(None);
  379|  61.3k|                }
  380|  61.3k|                if let Some(result) = reader.read_event(event)? {
  381|  9.24k|                    return Ok(Some(result));
  382|  51.8k|                }
  383|       |            },
  384|  9.18k|            JsonInnerSolutions::Iterator(iter) => iter.next(),
  385|       |        }
  386|  19.6k|    }
_RNvMs4_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_15JsonInnerReader3new:
  448|  11.1k|    fn new() -> Self {
  449|  11.1k|        Self {
  450|  11.1k|            state: JsonInnerReaderState::Start,
  451|  11.1k|            variables: Vec::new(),
  452|  11.1k|            current_solution_variables: Vec::new(),
  453|  11.1k|            current_solution_values: Vec::new(),
  454|  11.1k|            solutions: Vec::new(),
  455|  11.1k|            vars_read: false,
  456|  11.1k|            solutions_read: false,
  457|  11.1k|        }
  458|  11.1k|    }
_RNvMs4_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_15JsonInnerReader10read_event:
  460|   765k|    fn read_event(
  461|   765k|        &mut self,
  462|   765k|        event: JsonEvent<'_>,
  463|   765k|    ) -> Result<Option<JsonInnerQueryResults>, QueryResultsSyntaxError> {
  464|   765k|        match &mut self.state {
  465|       |            JsonInnerReaderState::Start => {
  466|  8.82k|                if event == JsonEvent::StartObject {
  467|  8.71k|                    self.state = JsonInnerReaderState::InRootObject;
  468|  8.71k|                    Ok(None)
  469|       |                } else {
  470|    111|                    Err(QueryResultsSyntaxError::msg(
  471|    111|                        "SPARQL JSON results must be an object",
  472|    111|                    ))
  473|       |                }
  474|       |            }
  475|  52.7k|            JsonInnerReaderState::InRootObject => match event {
  476|  52.7k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  477|  52.7k|                    "head" => {
  478|  8.81k|                        self.state = JsonInnerReaderState::BeforeHead;
  479|  8.81k|                        Ok(None)
  480|       |                    }
  481|  43.9k|                    "results" => {
  482|  7.01k|                        self.state = JsonInnerReaderState::BeforeResults;
  483|  7.01k|                        Ok(None)
  484|       |                    }
  485|  36.9k|                    "boolean" => {
  486|      6|                        self.state = JsonInnerReaderState::BeforeBoolean;
  487|      6|                        Ok(None)
  488|       |                    }
  489|       |                    _ => {
  490|  36.9k|                        self.state = JsonInnerReaderState::Ignore {
  491|  36.9k|                            level: 0,
  492|  36.9k|                            after: JsonInnerReaderStateAfterIgnore::InRootObject,
  493|  36.9k|                        };
  494|  36.9k|                        Ok(None)
  495|       |                    }
  496|       |                },
  497|      8|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  498|      8|                    "SPARQL JSON results must contain a 'boolean' or a 'results' key",
  499|      8|                )),
  500|      0|                _ => unreachable!(),
  501|       |            },
  502|       |            JsonInnerReaderState::BeforeHead => {
  503|  8.80k|                if event == JsonEvent::StartObject {
  504|  8.80k|                    self.state = JsonInnerReaderState::InHead;
  505|  8.80k|                    Ok(None)
  506|       |                } else {
  507|      1|                    Err(QueryResultsSyntaxError::msg(
  508|      1|                        "SPARQL JSON results head must be an object",
  509|      1|                    ))
  510|       |                }
  511|       |            }
  512|  46.9k|            JsonInnerReaderState::InHead => match event {
  513|  39.2k|                JsonEvent::ObjectKey(key) => match key.as_ref() {
  514|  39.2k|                    "vars" => {
  515|  3.65k|                        self.state = JsonInnerReaderState::BeforeVars;
  516|  3.65k|                        self.vars_read = true;
  517|  3.65k|                        Ok(None)
  518|       |                    }
  519|  35.6k|                    "links" => {
  520|     23|                        self.state = JsonInnerReaderState::BeforeLinks;
  521|     23|                        Ok(None)
  522|       |                    }
  523|       |                    _ => {
  524|  35.5k|                        self.state = JsonInnerReaderState::Ignore {
  525|  35.5k|                            level: 0,
  526|  35.5k|                            after: JsonInnerReaderStateAfterIgnore::InHead,
  527|  35.5k|                        };
  528|  35.5k|                        Ok(None)
  529|       |                    }
  530|       |                },
  531|       |                JsonEvent::EndObject => {
  532|  7.64k|                    self.state = JsonInnerReaderState::InRootObject;
  533|  7.64k|                    Ok(None)
  534|       |                }
  535|      0|                _ => unreachable!(),
  536|       |            },
  537|       |            JsonInnerReaderState::BeforeVars => {
  538|  3.63k|                if event == JsonEvent::StartArray {
  539|  3.63k|                    self.state = JsonInnerReaderState::InVars;
  540|  3.63k|                    Ok(None)
  541|       |                } else {
  542|      1|                    Err(QueryResultsSyntaxError::msg(
  543|      1|                        "SPARQL JSON results vars must be an array",
  544|      1|                    ))
  545|       |                }
  546|       |            }
  547|  20.0k|            JsonInnerReaderState::InVars => match event {
  548|  16.5k|                JsonEvent::String(variable) => match Variable::new(variable.clone()) {
  549|  16.5k|                    Ok(var) => {
  550|  16.5k|                        if self.variables.contains(&var) {
  551|     15|                            return Err(QueryResultsSyntaxError::msg(format!(
  552|     15|                                "The variable {var} is declared twice"
  553|     15|                            )));
  554|  16.5k|                        }
  555|  16.5k|                        self.variables.push(var);
  556|  16.5k|                        Ok(None)
  557|       |                    }
  558|      9|                    Err(e) => Err(QueryResultsSyntaxError::msg(format!(
  559|      9|                        "Invalid variable name '{variable}': {e}"
  560|      9|                    ))),
  561|       |                },
  562|       |                JsonEvent::EndArray => {
  563|  3.50k|                    if self.solutions_read {
  564|    501|                        let mut mapping = BTreeMap::default();
  565|  7.23k|                        for (i, var) in self.variables.iter().enumerate() {
  566|  7.23k|                            mapping.insert(var.as_str().to_owned(), i);
  567|  7.23k|                        }
  568|    501|                        Ok(Some(JsonInnerQueryResults::Solutions {
  569|    501|                            variables: take(&mut self.variables),
  570|    501|                            solutions: JsonInnerSolutions::Iterator(
  571|    501|                                JsonBufferedSolutionsIterator {
  572|    501|                                    mapping,
  573|    501|                                    bindings: take(&mut self.solutions).into_iter(),
  574|    501|                                },
  575|    501|                            ),
  576|    501|                        }))
  577|       |                    } else {
  578|  3.00k|                        self.state = JsonInnerReaderState::InHead;
  579|  3.00k|                        Ok(None)
  580|       |                    }
  581|       |                }
  582|      1|                _ => Err(QueryResultsSyntaxError::msg(
  583|      1|                    "Variables name in the vars array must be strings",
  584|      1|                )),
  585|       |            },
  586|       |            JsonInnerReaderState::BeforeLinks => {
  587|     23|                if event == JsonEvent::StartArray {
  588|     22|                    self.state = JsonInnerReaderState::InLinks;
  589|     22|                    Ok(None)
  590|       |                } else {
  591|      1|                    Err(QueryResultsSyntaxError::msg(
  592|      1|                        "SPARQL JSON results links must be an array",
  593|      1|                    ))
  594|       |                }
  595|       |            }
  596|  1.49k|            JsonInnerReaderState::InLinks => match event {
  597|  1.49k|                JsonEvent::String(_) => Ok(None),
  598|       |                JsonEvent::EndArray => {
  599|      3|                    self.state = JsonInnerReaderState::InHead;
  600|      3|                    Ok(None)
  601|       |                }
  602|      1|                _ => Err(QueryResultsSyntaxError::msg(
  603|      1|                    "Links in the links array must be strings",
  604|      1|                )),
  605|       |            },
  606|       |            JsonInnerReaderState::BeforeResults => {
  607|  7.01k|                if event == JsonEvent::StartObject {
  608|  7.01k|                    self.state = JsonInnerReaderState::InResults;
  609|  7.01k|                    Ok(None)
  610|       |                } else {
  611|      1|                    Err(QueryResultsSyntaxError::msg(
  612|      1|                        "SPARQL JSON results result must be an object",
  613|      1|                    ))
  614|       |                }
  615|       |            }
  616|  20.6k|            JsonInnerReaderState::InResults => match event {
  617|  20.6k|                JsonEvent::ObjectKey(key) => {
  618|  20.6k|                    if key == "bindings" {
  619|  6.74k|                        self.state = JsonInnerReaderState::BeforeBindings;
  620|  6.74k|                        Ok(None)
  621|       |                    } else {
  622|  13.8k|                        self.state = JsonInnerReaderState::Ignore {
  623|  13.8k|                            level: 0,
  624|  13.8k|                            after: JsonInnerReaderStateAfterIgnore::InResults,
  625|  13.8k|                        };
  626|  13.8k|                        Ok(None)
  627|       |                    }
  628|       |                }
  629|     29|                JsonEvent::EndObject => Err(QueryResultsSyntaxError::msg(
  630|     29|                    "The results object must contains a 'bindings' key",
  631|     29|                )),
  632|      0|                _ => unreachable!(),
  633|       |            },
  634|       |            JsonInnerReaderState::BeforeBindings => {
  635|  6.74k|                if event == JsonEvent::StartArray {
  636|  6.74k|                    self.solutions_read = true;
  637|  6.74k|                    if self.vars_read {
  638|  1.18k|                        let mut mapping = BTreeMap::default();
  639|  8.86k|                        for (i, var) in self.variables.iter().enumerate() {
  640|  8.86k|                            mapping.insert(var.as_str().to_owned(), i);
  641|  8.86k|                        }
  642|  1.18k|                        Ok(Some(JsonInnerQueryResults::Solutions {
  643|  1.18k|                            variables: take(&mut self.variables),
  644|  1.18k|                            solutions: JsonInnerSolutions::Reader(JsonInnerSolutionsReader {
  645|  1.18k|                                state: JsonInnerSolutionsReaderState::BeforeSolution,
  646|  1.18k|                                mapping,
  647|  1.18k|                                new_bindings: Vec::new(),
  648|  1.18k|                            }),
  649|  1.18k|                        }))
  650|       |                    } else {
  651|  5.55k|                        self.state = JsonInnerReaderState::BeforeSolution;
  652|  5.55k|                        Ok(None)
  653|       |                    }
  654|       |                } else {
  655|      1|                    Err(QueryResultsSyntaxError::msg(
  656|      1|                        "SPARQL JSON results bindings must be an array",
  657|      1|                    ))
  658|       |                }
  659|       |            }
  660|  15.7k|            JsonInnerReaderState::BeforeSolution => match event {
  661|       |                JsonEvent::StartObject => {
  662|  13.5k|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  663|  13.5k|                    Ok(None)
  664|       |                }
  665|       |                JsonEvent::EndArray => {
  666|  2.17k|                    self.state = JsonInnerReaderState::AfterBindings;
  667|  2.17k|                    Ok(None)
  668|       |                }
  669|      1|                _ => Err(QueryResultsSyntaxError::msg(
  670|      1|                    "Expecting a new solution object",
  671|      1|                )),
  672|       |            },
  673|  13.5k|            JsonInnerReaderState::BetweenSolutionTerms => match event {
  674|  3.36k|                JsonEvent::ObjectKey(key) => {
  675|  3.36k|                    self.state = JsonInnerReaderState::Term {
  676|  3.36k|                        reader: JsonInnerTermReader::default(),
  677|  3.36k|                        variable: key.into(),
  678|  3.36k|                    };
  679|  3.36k|                    Ok(None)
  680|       |                }
  681|       |                JsonEvent::EndObject => {
  682|  10.2k|                    self.state = JsonInnerReaderState::BeforeSolution;
  683|  10.2k|                    self.solutions.push((
  684|  10.2k|                        take(&mut self.current_solution_variables),
  685|  10.2k|                        take(&mut self.current_solution_values),
  686|  10.2k|                    ));
  687|  10.2k|                    Ok(None)
  688|       |                }
  689|      0|                _ => unreachable!(),
  690|       |            },
  691|       |            JsonInnerReaderState::Term {
  692|   232k|                ref mut reader,
  693|   232k|                variable,
  694|   232k|            } => {
  695|   232k|                let result = reader.read_event(event);
  696|   232k|                if let Some(term) = result? {
  697|      0|                    self.current_solution_variables.push(take(variable));
  698|      0|                    self.current_solution_values.push(term);
  699|      0|                    self.state = JsonInnerReaderState::BetweenSolutionTerms;
  700|   230k|                }
  701|   230k|                Ok(None)
  702|       |            }
  703|       |            JsonInnerReaderState::AfterBindings => {
  704|  17.0k|                if event == JsonEvent::EndObject {
  705|  1.97k|                    self.state = JsonInnerReaderState::InRootObject;
  706|  1.97k|                } else {
  707|  15.1k|                    self.state = JsonInnerReaderState::Ignore {
  708|  15.1k|                        level: 0,
  709|  15.1k|                        after: JsonInnerReaderStateAfterIgnore::AfterBindings,
  710|  15.1k|                    }
  711|       |                }
  712|  17.0k|                Ok(None)
  713|       |            }
  714|       |            JsonInnerReaderState::BeforeBoolean => {
  715|      5|                if let JsonEvent::Boolean(v) = event {
  716|      4|                    Ok(Some(JsonInnerQueryResults::Boolean(v)))
  717|       |                } else {
  718|      1|                    Err(QueryResultsSyntaxError::msg("Unexpected boolean value"))
  719|       |                }
  720|       |            }
  721|       |            #[allow(clippy::ref_patterns)]
  722|   309k|            JsonInnerReaderState::Ignore { level, ref after } => {
  723|   309k|                let level = match event {
  724|  81.6k|                    JsonEvent::StartArray | JsonEvent::StartObject => *level + 1,
  725|  32.5k|                    JsonEvent::EndArray | JsonEvent::EndObject => *level - 1,
  726|       |                    JsonEvent::String(_)
  727|       |                    | JsonEvent::Number(_)
  728|       |                    | JsonEvent::Boolean(_)
  729|       |                    | JsonEvent::Null
  730|       |                    | JsonEvent::ObjectKey(_)
  731|   195k|                    | JsonEvent::Eof => *level,
  732|       |                };
  733|   309k|                self.state = if level == 0 {
  734|  99.4k|                    match after {
  735|       |                        JsonInnerReaderStateAfterIgnore::InRootObject => {
  736|  35.6k|                            JsonInnerReaderState::InRootObject
  737|       |                        }
  738|  35.3k|                        JsonInnerReaderStateAfterIgnore::InHead => JsonInnerReaderState::InHead,
  739|       |                        JsonInnerReaderStateAfterIgnore::InResults => {
  740|  13.6k|                            JsonInnerReaderState::InResults
  741|       |                        }
  742|       |                        JsonInnerReaderStateAfterIgnore::AfterBindings => {
  743|  14.9k|                            JsonInnerReaderState::AfterBindings
  744|       |                        }
  745|       |                    }
  746|       |                } else {
  747|   210k|                    JsonInnerReaderState::Ignore {
  748|   210k|                        level,
  749|   210k|                        after: *after,
  750|   210k|                    }
  751|       |                };
  752|   309k|                Ok(None)
  753|       |            }
  754|       |        }
  755|   765k|    }
_RNvMs5_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_24JsonInnerSolutionsReader10read_event:
  775|  61.3k|    fn read_event(
  776|  61.3k|        &mut self,
  777|  61.3k|        event: JsonEvent<'_>,
  778|  61.3k|    ) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
  779|  61.3k|        match &mut self.state {
  780|  10.3k|            JsonInnerSolutionsReaderState::BeforeSolution => match event {
  781|       |                JsonEvent::StartObject => {
  782|  9.85k|                    self.state = JsonInnerSolutionsReaderState::BetweenSolutionTerms;
  783|  9.85k|                    self.new_bindings = vec![None; self.mapping.len()];
  784|  9.85k|                    Ok(None)
  785|       |                }
  786|       |                JsonEvent::EndArray => {
  787|    516|                    self.state = JsonInnerSolutionsReaderState::AfterEnd;
  788|    516|                    Ok(None)
  789|       |                }
  790|      3|                _ => Err(QueryResultsSyntaxError::msg(
  791|      3|                    "Expecting a new solution object",
  792|      3|                )),
  793|       |            },
  794|  9.83k|            JsonInnerSolutionsReaderState::BetweenSolutionTerms => match event {
  795|    592|                JsonEvent::ObjectKey(key) => {
  796|    592|                    let key = *self.mapping.get(key.as_ref()).ok_or_else(|| {
  797|       |                        QueryResultsSyntaxError::msg(format!(
  798|       |                            "The variable {key} has not been defined in the header"
  799|       |                        ))
  800|    592|                    })?;
  801|    582|                    self.state = JsonInnerSolutionsReaderState::Term {
  802|    582|                        reader: JsonInnerTermReader::default(),
  803|    582|                        key,
  804|    582|                    };
  805|    582|                    Ok(None)
  806|       |                }
  807|       |                JsonEvent::EndObject => {
  808|  9.24k|                    self.state = JsonInnerSolutionsReaderState::BeforeSolution;
  809|  9.24k|                    Ok(Some(take(&mut self.new_bindings)))
  810|       |                }
  811|      0|                _ => unreachable!(),
  812|       |            },
  813|       |            JsonInnerSolutionsReaderState::Term {
  814|  40.0k|                ref mut reader,
  815|  40.0k|                key,
  816|  40.0k|            } => {
  817|  40.0k|                let result = reader.read_event(event);
  818|  40.0k|                if let Some(term) = result? {
  819|      0|                    self.new_bindings[*key] = Some(term);
  820|      0|                    self.state = JsonInnerSolutionsReaderState::BetweenSolutionTerms;
  821|  39.8k|                }
  822|  39.8k|                Ok(None)
  823|       |            }
  824|       |            JsonInnerSolutionsReaderState::AfterEnd => {
  825|  1.02k|                if event == JsonEvent::EndObject {
  826|  1.02k|                    Ok(None)
  827|       |                } else {
  828|      2|                    Err(QueryResultsSyntaxError::msg(
  829|      2|                        "Unexpected JSON after the end of the bindings array",
  830|      2|                    ))
  831|       |                }
  832|       |            }
  833|       |        }
  834|  61.3k|    }
_RNvMs6_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_19JsonInnerTermReader10read_event:
  880|  4.97M|    fn read_event(
  881|  4.97M|        &mut self,
  882|  4.97M|        event: JsonEvent<'_>,
  883|  4.97M|    ) -> Result<Option<Term>, QueryResultsSyntaxError> {
  884|  4.97M|        match &mut self.state {
  885|       |            JsonInnerTermReaderState::Start => {
  886|  33.7k|                if event == JsonEvent::StartObject {
  887|  33.6k|                    self.state = JsonInnerTermReaderState::Middle;
  888|  33.6k|                    Ok(None)
  889|       |                } else {
  890|     30|                    Err(QueryResultsSyntaxError::msg(
  891|     30|                        "RDF terms must be encoded using objects",
  892|     30|                    ))
  893|       |                }
  894|       |            }
  895|   104k|            JsonInnerTermReaderState::Middle => match event {
  896|   104k|                JsonEvent::ObjectKey(object_key) => {
  897|   104k|                    self.state = match object_key.as_ref() {
  898|   104k|                        "type" => JsonInnerTermReaderState::TermType,
  899|   104k|                        "value" => JsonInnerTermReaderState::Value,
  900|  62.6k|                        "datatype" => JsonInnerTermReaderState::Datatype,
  901|  2.32k|                        "xml:lang" => JsonInnerTermReaderState::Lang,
  902|       |                        _ => {
  903|    570|                            return Err(QueryResultsSyntaxError::msg(format!(
  904|    570|                                "Unsupported term key: {object_key}"
  905|    570|                            )));
  906|       |                        }
  907|       |                    };
  908|   104k|                    Ok(None)
  909|       |                }
  910|       |                JsonEvent::EndObject => {
  911|      5|                    self.state = JsonInnerTermReaderState::Start;
  912|      5|                    match self.term_type.take() {
  913|      1|                        None => Err(QueryResultsSyntaxError::msg(
  914|      1|                            "Term serialization should have a 'type' key",
  915|      1|                        )),
  916|       |                        Some(TermType::Uri) => Ok(Some(
  917|      1|                            NamedNode::new(self.value.take().ok_or_else(|| {
  918|       |                                QueryResultsSyntaxError::msg(
  919|       |                                    "uri serialization should have a 'value' key",
  920|       |                                )
  921|      1|                            })?)
  922|      0|                            .map_err(|e| {
  923|       |                                QueryResultsSyntaxError::msg(format!("Invalid uri value: {e}"))
  924|      0|                            })?
  925|      0|                            .into(),
  926|       |                        )),
  927|       |                        Some(TermType::BNode) => Ok(Some(
  928|      1|                            BlankNode::new(self.value.take().ok_or_else(|| {
  929|       |                                QueryResultsSyntaxError::msg(
  930|       |                                    "bnode serialization should have a 'value' key",
  931|       |                                )
  932|      1|                            })?)
  933|      0|                            .map_err(|e| {
  934|       |                                QueryResultsSyntaxError::msg(format!("Invalid bnode value: {e}"))
  935|      0|                            })?
  936|      0|                            .into(),
  937|       |                        )),
  938|       |                        Some(TermType::Literal) => {
  939|      1|                            let value = self.value.take().ok_or_else(|| {
  940|       |                                QueryResultsSyntaxError::msg(
  941|       |                                    "literal serialization should have a 'value' key",
  942|       |                                )
  943|      1|                            })?;
  944|      0|                            Ok(Some(match self.lang.take() {
  945|      0|                                    Some(lang) => {
  946|      0|                                        if let Some(datatype) = &self.datatype {
  947|      0|                                            if datatype.as_ref() != rdf::LANG_STRING {
  948|      0|                                                return Err(QueryResultsSyntaxError::msg(format!(
  949|      0|                                                    "xml:lang value '{lang}' provided with the datatype {datatype}"
  950|      0|                                                )));
  951|      0|                                            }
  952|      0|                                        }
  953|      0|                                        Literal::new_language_tagged_literal(value, &*lang)
  954|      0|                                            .map_err(|e| {
  955|       |                                                QueryResultsSyntaxError::msg(format!(
  956|       |                                                    "Invalid xml:lang value '{lang}': {e}"
  957|       |                                                ))
  958|      0|                                            })?
  959|       |                                    }
  960|       |                                    None => {
  961|      0|                                        if let Some(datatype) = self.datatype.take() {
  962|      0|                                            Literal::new_typed_literal(value, datatype)
  963|       |                                        } else {
  964|      0|                                            Literal::new_simple_literal(value)
  965|       |                                        }
  966|       |                                    }
  967|      0|                                }.into()))
  968|       |                        }
  969|       |                        #[cfg(feature = "rdf-star")]
  970|       |                        Some(TermType::Triple) => Ok(Some(
  971|       |                            Triple::new(
  972|      1|                                match self.subject.take().ok_or_else(|| {
  973|       |                                    QueryResultsSyntaxError::msg(
  974|       |                                        "triple serialization should have a 'subject' key",
  975|       |                                    )
  976|      1|                                })? {
  977|      0|                                    Term::NamedNode(subject) => subject.into(),
  978|      0|                                    Term::BlankNode(subject) => subject.into(),
  979|      0|                                    Term::Triple(subject) => Subject::Triple(subject),
  980|       |                                    Term::Literal(_) => {
  981|      0|                                        return Err(QueryResultsSyntaxError::msg(
  982|      0|                                            "The 'subject' value should not be a literal",
  983|      0|                                        ));
  984|       |                                    }
  985|       |                                },
  986|      0|                                match self.predicate.take().ok_or_else(|| {
  987|       |                                    QueryResultsSyntaxError::msg(
  988|       |                                        "triple serialization should have a 'predicate' key",
  989|       |                                    )
  990|      0|                                })? {
  991|      0|                                    Term::NamedNode(predicate) => predicate,
  992|       |                                    _ => {
  993|      0|                                        return Err(QueryResultsSyntaxError::msg(
  994|      0|                                            "The 'predicate' value should be a uri",
  995|      0|                                        ));
  996|       |                                    }
  997|       |                                },
  998|      0|                                self.object.take().ok_or_else(|| {
  999|       |                                    QueryResultsSyntaxError::msg(
 1000|       |                                        "triple serialization should have a 'object' key",
 1001|       |                                    )
 1002|      0|                                })?,
 1003|       |                            )
 1004|      0|                            .into(),
 1005|       |                        )),
 1006|       |                    }
 1007|       |                }
 1008|      0|                _ => unreachable!(),
 1009|       |            },
 1010|       |            JsonInnerTermReaderState::TermType => {
 1011|    155|                self.state = JsonInnerTermReaderState::Middle;
 1012|    155|                if let JsonEvent::String(value) = event {
 1013|    151|                    match value.as_ref() {
 1014|    151|                        "uri" => {
 1015|     75|                            self.term_type = Some(TermType::Uri);
 1016|     75|                            Ok(None)
 1017|       |                        }
 1018|     76|                        "bnode" => {
 1019|     19|                            self.term_type = Some(TermType::BNode);
 1020|     19|                            Ok(None)
 1021|       |                        }
 1022|     57|                        "literal" | "typed-literal" => {
 1023|     30|                            self.term_type = Some(TermType::Literal);
 1024|     30|                            Ok(None)
 1025|       |                        }
 1026|       |                        #[cfg(feature = "rdf-star")]
 1027|     27|                        "triple" => {
 1028|     20|                            self.term_type = Some(TermType::Triple);
 1029|     20|                            Ok(None)
 1030|       |                        }
 1031|      7|                        _ => Err(QueryResultsSyntaxError::msg(format!(
 1032|      7|                            "Unexpected term type: '{value}'"
 1033|      7|                        ))),
 1034|       |                    }
 1035|       |                } else {
 1036|      4|                    Err(QueryResultsSyntaxError::msg("Term type must be a string"))
 1037|       |                }
 1038|       |            }
 1039|  42.1k|            JsonInnerTermReaderState::Value => match event {
 1040|  12.0k|                JsonEvent::String(value) => {
 1041|  12.0k|                    self.value = Some(value.into_owned());
 1042|  12.0k|                    self.state = JsonInnerTermReaderState::Middle;
 1043|  12.0k|                    Ok(None)
 1044|       |                }
 1045|       |                #[cfg(feature = "rdf-star")]
 1046|       |                JsonEvent::StartObject => {
 1047|  30.0k|                    self.state = JsonInnerTermReaderState::InValue;
 1048|  30.0k|                    Ok(None)
 1049|       |                }
 1050|       |                _ => {
 1051|      1|                    self.state = JsonInnerTermReaderState::Middle;
 1052|      1|
 1053|      1|                    Err(QueryResultsSyntaxError::msg("Term value must be a string"))
 1054|       |                }
 1055|       |            },
 1056|       |            JsonInnerTermReaderState::Lang => {
 1057|  1.74k|                let result = if let JsonEvent::String(value) = event {
 1058|  1.74k|                    self.lang = Some(value.into_owned());
 1059|  1.74k|                    Ok(None)
 1060|       |                } else {
 1061|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1062|       |                };
 1063|  1.74k|                self.state = JsonInnerTermReaderState::Middle;
 1064|  1.74k|
 1065|  1.74k|                result
 1066|       |            }
 1067|       |            JsonInnerTermReaderState::Datatype => {
 1068|  60.0k|                let result = if let JsonEvent::String(value) = event {
 1069|  60.0k|                    match NamedNode::new(value) {
 1070|  58.8k|                        Ok(datatype) => {
 1071|  58.8k|                            self.datatype = Some(datatype);
 1072|  58.8k|                            Ok(None)
 1073|       |                        }
 1074|  1.19k|                        Err(e) => Err(QueryResultsSyntaxError::msg(format!(
 1075|  1.19k|                            "Invalid datatype: {e}"
 1076|  1.19k|                        ))),
 1077|       |                    }
 1078|       |                } else {
 1079|      1|                    Err(QueryResultsSyntaxError::msg("Term lang must be strings"))
 1080|       |                };
 1081|  60.0k|                self.state = JsonInnerTermReaderState::Middle;
 1082|  60.0k|
 1083|  60.0k|                result
 1084|       |            }
 1085|       |            #[cfg(feature = "rdf-star")]
 1086|  30.0k|            JsonInnerTermReaderState::InValue => match event {
 1087|  29.9k|                JsonEvent::ObjectKey(object_key) => {
 1088|  29.9k|                    self.state = match object_key.as_ref() {
 1089|  29.9k|                        "subject" => JsonInnerTermReaderState::Subject(Box::default()),
 1090|  29.2k|                        "predicate" => JsonInnerTermReaderState::Predicate(Box::default()),
 1091|    771|                        "object" => JsonInnerTermReaderState::Object(Box::default()),
 1092|       |                        _ => {
 1093|     66|                            return Err(QueryResultsSyntaxError::msg(format!(
 1094|     66|                                "Unsupported value key: {object_key}"
 1095|     66|                            )));
 1096|       |                        }
 1097|       |                    };
 1098|  29.8k|                    Ok(None)
 1099|       |                }
 1100|       |                JsonEvent::EndObject => {
 1101|     66|                    self.state = JsonInnerTermReaderState::Middle;
 1102|     66|                    Ok(None)
 1103|       |                }
 1104|      0|                _ => unreachable!(),
 1105|       |            },
 1106|       |            #[cfg(feature = "rdf-star")]
 1107|  20.7k|            JsonInnerTermReaderState::Subject(ref mut inner_state) => {
 1108|  20.7k|                if let Some(term) = inner_state.read_event(event)? {
 1109|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1110|      0|                    self.subject = Some(term);
 1111|  20.5k|                }
 1112|  20.5k|                Ok(None)
 1113|       |            }
 1114|       |            #[cfg(feature = "rdf-star")]
 1115|  4.62M|            JsonInnerTermReaderState::Predicate(ref mut inner_state) => {
 1116|  4.62M|                if let Some(term) = inner_state.read_event(event)? {
 1117|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1118|      0|                    self.predicate = Some(term);
 1119|  4.61M|                }
 1120|  4.61M|                Ok(None)
 1121|       |            }
 1122|       |            #[cfg(feature = "rdf-star")]
 1123|  57.1k|            JsonInnerTermReaderState::Object(ref mut inner_state) => {
 1124|  57.1k|                if let Some(term) = inner_state.read_event(event)? {
 1125|      0|                    self.state = JsonInnerTermReaderState::InValue;
 1126|      0|                    self.object = Some(term);
 1127|  56.6k|                }
 1128|  56.6k|                Ok(None)
 1129|       |            }
 1130|       |        }
 1131|  4.97M|    }
_RNvMs7_NtCs8ymoBFYi2FH_10sparesults4jsonNtB5_29JsonBufferedSolutionsIterator4next:
 1140|  9.18k|    fn next(&mut self) -> Result<Option<Vec<Option<Term>>>, QueryResultsSyntaxError> {
 1141|  9.18k|        let Some((variables, values)) = self.bindings.next() else {
 1142|    501|            return Ok(None);
 1143|       |        };
 1144|  8.68k|        let mut new_bindings = vec![None; self.mapping.len()];
 1145|  8.68k|        for (variable, value) in variables.into_iter().zip(values) {
 1146|      0|            let k = *self.mapping.get(&variable).ok_or_else(|| {
 1147|       |                QueryResultsSyntaxError::msg(format!(
 1148|       |                    "The variable {variable} has not been defined in the header"
 1149|       |                ))
 1150|      0|            })?;
 1151|      0|            new_bindings[k] = Some(value);
 1152|       |        }
 1153|  8.68k|        Ok(Some(new_bindings))
 1154|  9.18k|    }

_RNvMNtCs8ymoBFYi2FH_10sparesults6parserNtB2_18QueryResultsParser11from_formatCseAC53pAIE9m_13oxigraph_fuzz:
   65|  11.1k|    pub fn from_format(format: QueryResultsFormat) -> Self {
   66|  11.1k|        Self { format }
   67|  11.1k|    }
_RNvMNtCs8ymoBFYi2FH_10sparesults6parserNtB2_18QueryResultsParser11parse_slice:
  234|  11.1k|    pub fn parse_slice(
  235|  11.1k|        self,
  236|  11.1k|        slice: &[u8],
  237|  11.1k|    ) -> Result<FromSliceQueryResultsReader<'_>, QueryResultsSyntaxError> {
  238|  11.1k|        Ok(match self.format {
  239|      0|            QueryResultsFormat::Xml => match FromSliceXmlQueryResultsReader::read(slice)? {
  240|      0|                FromSliceXmlQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  241|       |                FromSliceXmlQueryResultsReader::Solutions {
  242|      0|                    solutions,
  243|      0|                    variables,
  244|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  245|      0|                    variables: variables.into(),
  246|      0|                    solutions: FromSliceSolutionsReaderKind::Xml(solutions),
  247|      0|                }),
  248|       |            },
  249|  11.1k|            QueryResultsFormat::Json => match FromSliceJsonQueryResultsReader::read(slice)? {
  250|      4|                FromSliceJsonQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  251|       |                FromSliceJsonQueryResultsReader::Solutions {
  252|  1.69k|                    solutions,
  253|  1.69k|                    variables,
  254|  1.69k|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  255|  1.69k|                    variables: variables.into(),
  256|  1.69k|                    solutions: FromSliceSolutionsReaderKind::Json(solutions),
  257|  1.69k|                }),
  258|       |            },
  259|      0|            QueryResultsFormat::Csv => return Err(QueryResultsSyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation")),
  260|      0|            QueryResultsFormat::Tsv => match FromSliceTsvQueryResultsReader::read(slice)? {
  261|      0|                FromSliceTsvQueryResultsReader::Boolean(r) => FromSliceQueryResultsReader::Boolean(r),
  262|       |                FromSliceTsvQueryResultsReader::Solutions {
  263|      0|                    solutions,
  264|      0|                    variables,
  265|      0|                } => FromSliceQueryResultsReader::Solutions(FromSliceSolutionsReader {
  266|      0|                    variables: variables.into(),
  267|      0|                    solutions: FromSliceSolutionsReaderKind::Tsv(solutions),
  268|      0|                }),
  269|       |            },
  270|       |        })
  271|  11.1k|    }
_RNvXs3_NtCs8ymoBFYi2FH_10sparesults6parserNtB5_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next:
  642|  19.6k|    fn next(&mut self) -> Option<Self::Item> {
  643|  19.6k|        Some(
  644|  19.6k|            match &mut self.solutions {
  645|      0|                FromSliceSolutionsReaderKind::Xml(reader) => reader.read_next(),
  646|  19.6k|                FromSliceSolutionsReaderKind::Json(reader) => reader.read_next(),
  647|      0|                FromSliceSolutionsReaderKind::Tsv(reader) => reader.read_next(),
  648|       |            }
  649|  19.6k|            .transpose()?
  650|  18.6k|            .map(|values| (Arc::clone(&self.variables), values).into()),
  651|       |        )
  652|  19.6k|    }
_RNCNvXs3_NtCs8ymoBFYi2FH_10sparesults6parserNtB7_24FromSliceSolutionsReaderNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4next0B9_:
  650|  17.9k|            .map(|values| (Arc::clone(&self.variables), values).into()),

_RINvMNtCs8ymoBFYi2FH_10sparesults10serializerNtB3_22QueryResultsSerializer26serialize_boolean_to_writeQINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
   73|      2|    pub fn serialize_boolean_to_write<W: Write>(self, write: W, value: bool) -> io::Result<W> {
   74|      2|        match self.format {
   75|      0|            QueryResultsFormat::Xml => write_boolean_xml_result(write, value),
   76|      2|            QueryResultsFormat::Json => write_boolean_json_result(write, value),
   77|       |            QueryResultsFormat::Csv | QueryResultsFormat::Tsv => {
   78|      0|                write_boolean_csv_result(write, value)
   79|       |            }
   80|       |        }
   81|      2|    }
_RINvMNtCs8ymoBFYi2FH_10sparesults10serializerNtB3_22QueryResultsSerializer28serialize_solutions_to_writeINtNtCs3OstG5Tqy1X_5alloc3vec3VechEECseAC53pAIE9m_13oxigraph_fuzz:
  144|    506|    pub fn serialize_solutions_to_write<W: Write>(
  145|    506|        self,
  146|    506|        write: W,
  147|    506|        variables: Vec<Variable>,
  148|    506|    ) -> io::Result<ToWriteSolutionsWriter<W>> {
  149|    506|        Ok(ToWriteSolutionsWriter {
  150|    506|            formatter: match self.format {
  151|       |                QueryResultsFormat::Xml => ToWriteSolutionsWriterKind::Xml(
  152|      0|                    ToWriteXmlSolutionsWriter::start(write, &variables)?,
  153|       |                ),
  154|       |                QueryResultsFormat::Json => ToWriteSolutionsWriterKind::Json(
  155|    506|                    ToWriteJsonSolutionsWriter::start(write, &variables)?,
  156|       |                ),
  157|       |                QueryResultsFormat::Csv => ToWriteSolutionsWriterKind::Csv(
  158|      0|                    ToWriteCsvSolutionsWriter::start(write, variables)?,
  159|       |                ),
  160|       |                QueryResultsFormat::Tsv => ToWriteSolutionsWriterKind::Tsv(
  161|      0|                    ToWriteTsvSolutionsWriter::start(write, variables)?,
  162|       |                ),
  163|       |            },
  164|       |        })
  165|    506|    }
_RINvMs0_NtCs8ymoBFYi2FH_10sparesults10serializerINtB6_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE5writeRNtNtCsjHb8aGRHKzq_5oxrdf8variable8VariableRNtNtB1Z_6triple4TermRNtNtB8_8solution13QuerySolutionECseAC53pAIE9m_13oxigraph_fuzz:
  302|  8.68k|    pub fn write<'a>(
  303|  8.68k|        &mut self,
  304|  8.68k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  305|  8.68k|    ) -> io::Result<()> {
  306|  8.68k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  307|  8.68k|        match &mut self.formatter {
  308|      0|            ToWriteSolutionsWriterKind::Xml(writer) => writer.write(solution),
  309|  8.68k|            ToWriteSolutionsWriterKind::Json(writer) => writer.write(solution),
  310|      0|            ToWriteSolutionsWriterKind::Csv(writer) => writer.write(solution),
  311|      0|            ToWriteSolutionsWriterKind::Tsv(writer) => writer.write(solution),
  312|       |        }
  313|  8.68k|    }
_RNvMs0_NtCs8ymoBFYi2FH_10sparesults10serializerINtB5_22ToWriteSolutionsWriterINtNtCs3OstG5Tqy1X_5alloc3vec3VechEE6finishCseAC53pAIE9m_13oxigraph_fuzz:
  316|    506|    pub fn finish(self) -> io::Result<W> {
  317|    506|        match self.formatter {
  318|      0|            ToWriteSolutionsWriterKind::Xml(write) => write.finish(),
  319|    506|            ToWriteSolutionsWriterKind::Json(write) => write.finish(),
  320|      0|            ToWriteSolutionsWriterKind::Csv(write) => Ok(write.finish()),
  321|      0|            ToWriteSolutionsWriterKind::Tsv(write) => Ok(write.finish()),
  322|       |        }
  323|    506|    }
_RNvMNtCs8ymoBFYi2FH_10sparesults10serializerNtB2_22QueryResultsSerializer11from_formatCseAC53pAIE9m_13oxigraph_fuzz:
   57|    508|    pub fn from_format(format: QueryResultsFormat) -> Self {
   58|    508|        Self { format }
   59|    508|    }

_RNvMNtCs8ymoBFYi2FH_10sparesults8solutionNtB2_13QuerySolution9variablesCseAC53pAIE9m_13oxigraph_fuzz:
  158|    495|    pub fn variables(&self) -> &[Variable] {
  159|    495|        &self.variables
  160|    495|    }
_RNvXs0_NtCs8ymoBFYi2FH_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterCseAC53pAIE9m_13oxigraph_fuzz:
  178|  8.68k|    fn into_iter(self) -> Self::IntoIter {
  179|  8.68k|        Iter {
  180|  8.68k|            inner: self.variables.iter().zip(&self.values),
  181|  8.68k|        }
  182|  8.68k|    }
_RNvXs9_NtCs8ymoBFYi2FH_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextCseAC53pAIE9m_13oxigraph_fuzz:
  285|  8.68k|    fn next(&mut self) -> Option<Self::Item> {
  286|  66.2k|        for (variable, value) in &mut self.inner {
  287|  57.5k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|  57.5k|            }
  290|       |        }
  291|  8.68k|        None
  292|  8.68k|    }
_RNvMNtCs8ymoBFYi2FH_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
  112|  17.3k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
  113|  17.3k|        self.into_iter()
  114|  17.3k|    }
_RNvXs0_NtCs8ymoBFYi2FH_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCscdEvteftVc2_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  178|  17.3k|    fn into_iter(self) -> Self::IntoIter {
  179|  17.3k|        Iter {
  180|  17.3k|            inner: self.variables.iter().zip(&self.values),
  181|  17.3k|        }
  182|  17.3k|    }
_RNvXs6_NtCs8ymoBFYi2FH_10sparesults8solutionNtB5_13QuerySolutionNtNtCscdEvteftVc2_4core3cmp9PartialEq2eq:
  236|  8.68k|    fn eq(&self, other: &Self) -> bool {
  237|  8.68k|        for (k, v) in self.iter() {
  238|      0|            if other.get(k) != Some(v) {
  239|      0|                return false;
  240|      0|            }
  241|       |        }
  242|  8.68k|        for (k, v) in other.iter() {
  243|      0|            if self.get(k) != Some(v) {
  244|      0|                return false;
  245|      0|            }
  246|       |        }
  247|  8.68k|        true
  248|  8.68k|    }
_RNvXs9_NtCs8ymoBFYi2FH_10sparesults8solutionNtB5_4IterNtNtNtNtCscdEvteftVc2_4core4iter6traits8iterator8Iterator4nextB7_:
  285|  17.3k|    fn next(&mut self) -> Option<Self::Item> {
  286|   132k|        for (variable, value) in &mut self.inner {
  287|   115k|            if let Some(value) = value {
  288|      0|                return Some((variable, value));
  289|   115k|            }
  290|       |        }
  291|  17.3k|        None
  292|  17.3k|    }
_RNvXs_NtCs8ymoBFYi2FH_10sparesults8solutionNtB4_13QuerySolutionINtNtCscdEvteftVc2_4core7convert4FromTINtNtCs3OstG5Tqy1X_5alloc4sync3ArcSNtNtCsjHb8aGRHKzq_5oxrdf8variable8VariableEINtNtB1G_3vec3VecINtNtB14_6option6OptionNtNtB2e_6triple4TermEEEE4fromB6_:
  165|  17.9k|    fn from((v, s): (V, S)) -> Self {
  166|  17.9k|        Self {
  167|  17.9k|            variables: v.into(),
  168|  17.9k|            values: s.into(),
  169|  17.9k|        }
  170|  17.9k|    }


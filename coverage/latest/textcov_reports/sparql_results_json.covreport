_RINvXNtCsb3Q1P7Ac2t8_6anyhow7contextINtNtCsf4yKkFD4Bbx_4core6result6ResultINtNtCsYFqBAFw4ZB_5alloc3vec3VecNtNtCs4OyvW57uV0o_10sparesults8solution13QuerySolutionENtNtB1K_5error10ParseErrorEINtB5_7ContextB1a_B2z_E12with_contextNtNtB1f_6string6StringNCNvNtCscWvUm8eIJtl_13oxigraph_fuzz13result_format18fuzz_result_formats0_0EB43_:
   58|    129|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    129|    where
   60|    129|        C: Display + Send + Sync + 'static,
   61|    129|        F: FnOnce() -> C,
   62|    129|    {
   63|    129|        match self {
   64|    129|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    129|    }
_RINvXNtCsb3Q1P7Ac2t8_6anyhow7contextINtNtCsf4yKkFD4Bbx_4core6result6ResultINtCs4OyvW57uV0o_10sparesults18QueryResultsReaderRShENtNtB1d_5error10ParseErrorEINtB5_7ContextB1a_B21_E12with_contextNtNtCsYFqBAFw4ZB_5alloc6string6StringNCNvNtCscWvUm8eIJtl_13oxigraph_fuzz13result_format18fuzz_result_formats_0EB3K_:
   58|    129|    fn with_context<C, F>(self, context: F) -> Result<T, Error>
   59|    129|    where
   60|    129|        C: Display + Send + Sync + 'static,
   61|    129|        F: FnOnce() -> C,
   62|    129|    {
   63|    129|        match self {
   64|    129|            Ok(ok) => Ok(ok),
   65|      0|            Err(error) => Err(error.ext_context(context())),
   66|       |        }
   67|    129|    }

_RNvXs1_CslkAaEoiZcfh_17json_event_parserNtB5_9JsonEventNtNtCsf4yKkFD4Bbx_4core3cmp9PartialEq2eqCscWvUm8eIJtl_13oxigraph_fuzz:
   47|  9.95k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]

_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE16check_stack_sizeCscWvUm8eIJtl_13oxigraph_fuzz:
  483|  25.0k|        if let Some(max_stack_size) = self.max_stack_size {
  484|      0|            if self.state_stack.len() > max_stack_size {
  485|      0|                Err(Error::new(
  486|      0|                    ErrorKind::InvalidData,
  487|      0|                    format!(
  488|      0|                        "Max stack size of {} reached on an object opening",
  489|      0|                        max_stack_size
  490|      0|                    ),
  491|      0|                ))
  492|       |            } else {
  493|      0|                Ok(())
  494|       |            }
  495|       |        } else {
  496|  25.0k|            Ok(())
  497|       |        }
  498|  25.0k|    }
_RINvMNtCslkAaEoiZcfh_17json_event_parser4readINtB3_10JsonReaderRShE14parse_constantKj5_ECscWvUm8eIJtl_13oxigraph_fuzz:
  250|      3|    fn parse_constant<'a, const SIZE: usize>(
  251|      3|        &mut self,
  252|      3|        expected: &str,
  253|      3|        value: JsonEvent<'a>,
  254|      3|    ) -> Result<JsonEvent<'a>> {
  255|      0|        debug_assert_eq!(expected.len(), SIZE);
  256|      3|        let mut buf = [0u8; SIZE];
  257|      3|        self.reader.read_exact(&mut buf)?;
  258|      2|        if buf == expected.as_bytes() {
  259|      0|            self.read_after_value(value)
  260|       |        } else {
  261|       |            Err(Error::new(
  262|      2|                ErrorKind::InvalidData,
  263|      2|                format!(
  264|      2|                    "{} expected, found {}",
  265|      2|                    expected,
  266|      2|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
  267|       |                ),
  268|       |            ))
  269|       |        }
  270|      3|    }
_RNCINvMNtCslkAaEoiZcfh_17json_event_parser4readINtB5_10JsonReaderRShE14parse_constantKj5_E0CscWvUm8eIJtl_13oxigraph_fuzz:
  266|      1|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE12parse_stringCscWvUm8eIJtl_13oxigraph_fuzz:
  116|  20.6k|    fn parse_string<'a>(&mut self, output: &'a mut Vec<u8>) -> Result<JsonEvent<'a>> {
  117|  20.6k|        output.clear();
  118|  20.6k|        self.reader.consume(1);
  119|  20.6k|
  120|  20.6k|        #[derive(Eq, PartialEq, Copy, Clone)]
  121|  20.6k|        enum StringState {
  122|  20.6k|            Default,
  123|  20.6k|            Escape,
  124|  20.6k|        }
  125|  20.6k|
  126|  20.6k|        let mut state = StringState::Default;
  127|  31.7k|        loop {
  128|  31.7k|            match state {
  129|       |                StringState::Default => {
  130|  26.1k|                    let buffer = match self.reader.fill_buf() {
  131|  26.1k|                        Ok(buf) => {
  132|  26.1k|                            if buf.is_empty() {
  133|    199|                                return Err(Error::from(ErrorKind::UnexpectedEof));
  134|       |                            } else {
  135|  26.0k|                                buf
  136|       |                            }
  137|       |                        }
  138|      0|                        Err(e) => {
  139|      0|                            if e.kind() == ErrorKind::Interrupted {
  140|      0|                                continue;
  141|       |                            } else {
  142|      0|                                return Err(e);
  143|       |                            }
  144|       |                        }
  145|       |                    };
  146|  26.0k|                    let mut i = 0;
  147|   198k|                    for c in buffer {
  148|   198k|                        i += 1;
  149|   198k|                        match *c {
  150|       |                            b'"' => {
  151|  20.4k|                                self.reader.consume(i);
  152|  20.4k|                                return self.read_after_value(JsonEvent::String(
  153|  20.4k|                                    str::from_utf8(output.as_slice())
  154|  20.4k|                                        .map_err(|e| Error::new(ErrorKind::InvalidData, e))?,
  155|       |                                ));
  156|       |                            }
  157|       |                            b'\\' => {
  158|  5.52k|                                state = StringState::Escape;
  159|  5.52k|                                break;
  160|       |                            }
  161|   172k|                            0..=0x1F => {
  162|      9|                                self.reader.consume(i);
  163|      9|                                return Err(Error::new(
  164|      9|                                    ErrorKind::InvalidData,
  165|      9|                                    "Control characters are not allowed in JSON",
  166|      9|                                ));
  167|       |                            }
  168|   172k|                            c => output.push(c),
  169|       |                        }
  170|       |                    }
  171|  5.58k|                    self.reader.consume(i);
  172|       |                }
  173|       |                StringState::Escape => {
  174|  5.52k|                    let c = self.lookup_mandatory_front()?;
  175|  5.52k|                    self.reader.consume(1);
  176|  5.52k|                    match c {
  177|     79|                        b'"' => {
  178|     79|                            output.push(b'"');
  179|     79|                        }
  180|    490|                        b'\\' => {
  181|    490|                            output.push(b'\\');
  182|    490|                        }
  183|    205|                        b'/' => {
  184|    205|                            output.push(b'/');
  185|    205|                        }
  186|    255|                        b'b' => {
  187|    255|                            output.push(8);
  188|    255|                        }
  189|    222|                        b'f' => {
  190|    222|                            output.push(12);
  191|    222|                        }
  192|    229|                        b'n' => {
  193|    229|                            output.push(b'\n');
  194|    229|                        }
  195|    204|                        b'r' => {
  196|    204|                            output.push(b'\r');
  197|    204|                        }
  198|    233|                        b't' => {
  199|    233|                            output.push(b'\t');
  200|    233|                        }
  201|       |                        b'u' => {
  202|  3.60k|                            let mut buf = [0u8; 4];
  203|  3.60k|                            self.reader.read_exact(&mut buf)?;
  204|  3.60k|                            let code_point = read_hexa_char(&buf)?;
  205|  3.59k|                            if let Some(c) = char::from_u32(code_point) {
  206|  1.79k|                                output.extend_from_slice(c.encode_utf8(&mut buf).as_bytes());
  207|  1.79k|                            } else {
  208|  1.79k|                                let high_surrogate = code_point;
  209|  1.79k|                                let mut buf = [0u8; 6];
  210|  1.79k|                                self.reader.read_exact(&mut buf)?;
  211|  1.79k|                                if !buf.starts_with(b"\\u") {
  212|      2|                                    return Err(Error::new(
  213|      2|                                            ErrorKind::InvalidData,
  214|      2|                                            format!(
  215|      2|                                                "\\u{:X} is a surrogate should be followed by an other surrogate",
  216|      2|                                                high_surrogate
  217|      2|                                            ),
  218|      2|                                        ));
  219|  1.79k|                                }
  220|  1.79k|                                let low_surrogate = read_hexa_char(&buf[2..])?;
  221|  1.79k|                                let code_point = 0x10000
  222|  1.79k|                                    + ((high_surrogate & 0x03FF) << 10)
  223|  1.79k|                                    + (low_surrogate & 0x03FF);
  224|  1.79k|                                if let Some(c) = char::from_u32(code_point) {
  225|  1.79k|                                    output.extend_from_slice(c.encode_utf8(&mut buf).as_bytes())
  226|       |                                } else {
  227|      0|                                    return Err(Error::new(
  228|      0|                                        ErrorKind::InvalidData,
  229|      0|                                        format!(
  230|      0|                                            "\\u{:X}\\u{:X} is an invalid surrogate pair",
  231|      0|                                            high_surrogate, low_surrogate
  232|      0|                                        ),
  233|      0|                                    ));
  234|       |                                }
  235|       |                            }
  236|       |                        }
  237|       |                        _ => {
  238|      4|                            return Err(Error::new(
  239|      4|                                ErrorKind::InvalidData,
  240|      4|                                "Invalid string escape",
  241|      4|                            ));
  242|       |                        }
  243|       |                    }
  244|  5.50k|                    state = StringState::Default;
  245|       |                }
  246|       |            }
  247|       |        }
  248|  20.6k|    }
_RNCNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB4_10JsonReaderRShE12parse_numbers_0CscWvUm8eIJtl_13oxigraph_fuzz:
  316|    504|                        self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
_RNCNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB4_10JsonReaderRShE12parse_string0CscWvUm8eIJtl_13oxigraph_fuzz:
  154|      1|                                        .map_err(|e| Error::new(ErrorKind::InvalidData, e))?,
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE22lookup_mandatory_frontCscWvUm8eIJtl_13oxigraph_fuzz:
  461|  8.10k|    fn lookup_mandatory_front(&mut self) -> Result<u8> {
  462|  8.10k|        if let Some(v) = self.lookup_front()? {
  463|  8.09k|            Ok(v)
  464|       |        } else {
  465|     18|            Err(Error::from(ErrorKind::UnexpectedEof))
  466|       |        }
  467|  8.10k|    }
_RINvMNtCslkAaEoiZcfh_17json_event_parser4readINtB3_10JsonReaderRShE9read_charNCNvB2_12parse_numbers_0ECscWvUm8eIJtl_13oxigraph_fuzz:
  338|    507|    fn read_char(&mut self, valid: impl Fn(u8) -> bool, output: &mut Vec<u8>) -> Result<()> {
  339|    507|        let c = self.lookup_mandatory_front()?;
  340|    504|        if valid(c) {
  341|    499|            output.push(c);
  342|    499|            self.reader.consume(1);
  343|    499|            Ok(())
  344|       |        } else {
  345|      5|            Err(Error::new(
  346|      5|                ErrorKind::InvalidData,
  347|      5|                format!("Invalid number. Found char {}", char::from(c)),
  348|      5|            ))
  349|       |        }
  350|    507|    }
_RINvMNtCslkAaEoiZcfh_17json_event_parser4readINtB3_10JsonReaderRShE14parse_constantKj4_ECscWvUm8eIJtl_13oxigraph_fuzz:
  250|     11|    fn parse_constant<'a, const SIZE: usize>(
  251|     11|        &mut self,
  252|     11|        expected: &str,
  253|     11|        value: JsonEvent<'a>,
  254|     11|    ) -> Result<JsonEvent<'a>> {
  255|      0|        debug_assert_eq!(expected.len(), SIZE);
  256|     11|        let mut buf = [0u8; SIZE];
  257|     11|        self.reader.read_exact(&mut buf)?;
  258|      6|        if buf == expected.as_bytes() {
  259|      2|            self.read_after_value(value)
  260|       |        } else {
  261|       |            Err(Error::new(
  262|      4|                ErrorKind::InvalidData,
  263|      4|                format!(
  264|      4|                    "{} expected, found {}",
  265|      4|                    expected,
  266|      4|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
  267|       |                ),
  268|       |            ))
  269|       |        }
  270|     11|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE11from_readerCscWvUm8eIJtl_13oxigraph_fuzz:
   35|  1.75k|    pub fn from_reader(reader: R) -> Self {
   36|  1.75k|        Self {
   37|  1.75k|            reader,
   38|  1.75k|            state_stack: Vec::new(),
   39|  1.75k|            element_read: false,
   40|  1.75k|            max_stack_size: None,
   41|  1.75k|        }
   42|  1.75k|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE11read_digitsCscWvUm8eIJtl_13oxigraph_fuzz:
  352|  1.94k|    fn read_digits(&mut self, output: &mut Vec<u8>) -> Result<()> {
  353|  6.70k|        while let Some(c) = self.lookup_front()? {
  354|  6.65k|            if matches!(c, b'0'..=b'9') {
  355|  4.76k|                output.push(c);
  356|  4.76k|                self.reader.consume(1);
  357|  4.76k|            } else {
  358|  1.89k|                break;
  359|       |            }
  360|       |        }
  361|  1.94k|        Ok(())
  362|  1.94k|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE12lookup_frontCscWvUm8eIJtl_13oxigraph_fuzz:
  469|  17.7k|    fn lookup_front(&mut self) -> Result<Option<u8>> {
  470|  17.7k|        loop {
  471|  17.7k|            match self.reader.fill_buf() {
  472|  17.7k|                Ok(buf) => return Ok(if buf.is_empty() { None } else { Some(buf[0]) }),
  473|      0|                Err(error) => {
  474|      0|                    if error.kind() != ErrorKind::Interrupted {
  475|      0|                        return Err(error);
  476|      0|                    }
  477|       |                }
  478|       |            }
  479|       |        }
  480|  17.7k|    }
_RNCINvMNtCslkAaEoiZcfh_17json_event_parser4readINtB5_10JsonReaderRShE14parse_constantKj4_E0CscWvUm8eIJtl_13oxigraph_fuzz:
  266|      1|                    str::from_utf8(&buf).map_err(|e| Error::new(ErrorKind::InvalidData, e))?
_RNCNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB4_10JsonReaderRShE12parse_number0CscWvUm8eIJtl_13oxigraph_fuzz:
  302|     35|            self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE10read_eventCscWvUm8eIJtl_13oxigraph_fuzz:
   50|  62.2k|    pub fn read_event<'a>(&mut self, buffer: &'a mut Vec<u8>) -> Result<JsonEvent<'a>> {
   51|  62.2k|        let front = if let Some(b) = self.lookup_front_skipping_whitespaces()? {
   52|  61.8k|            b
   53|       |        } else {
   54|    336|            return if self.state_stack.is_empty() && self.element_read {
   55|     11|                Ok(JsonEvent::Eof)
   56|       |            } else {
   57|    325|                Err(Error::from(ErrorKind::UnexpectedEof))
   58|       |            };
   59|       |        };
   60|  61.8k|        match front {
   61|       |            b'{' => {
   62|  21.0k|                self.reader.consume(1);
   63|  21.0k|                self.check_stack_size()?;
   64|  21.0k|                self.state_stack.push(JsonState::FirstObjectKey);
   65|  21.0k|                Ok(JsonEvent::StartObject)
   66|       |            }
   67|       |            b'}' => {
   68|  12.0k|                self.reader.consume(1);
   69|      5|                if matches!(
   70|  12.0k|                    self.state_stack.pop(),
   71|       |                    Some(JsonState::FirstObjectKey) | Some(JsonState::LastObjectKey)
   72|       |                ) {
   73|  12.0k|                    self.read_after_value(JsonEvent::EndObject)
   74|       |                } else {
   75|      5|                    Err(Error::new(
   76|      5|                        ErrorKind::InvalidData,
   77|      5|                        "Closing a not opened object",
   78|      5|                    ))
   79|       |                }
   80|       |            }
   81|       |            b'[' => {
   82|  3.99k|                self.reader.consume(1);
   83|  3.99k|                self.check_stack_size()?;
   84|  3.99k|                self.state_stack.push(JsonState::FirstArray);
   85|  3.99k|                Ok(JsonEvent::StartArray)
   86|       |            }
   87|       |            b']' => {
   88|  2.60k|                self.reader.consume(1);
   89|      5|                if matches!(
   90|  2.60k|                    self.state_stack.pop(),
   91|       |                    Some(JsonState::FirstArray) | Some(JsonState::LastArray)
   92|       |                ) {
   93|  2.59k|                    self.read_after_value(JsonEvent::EndArray)
   94|       |                } else {
   95|      5|                    Err(Error::new(
   96|      5|                        ErrorKind::InvalidData,
   97|      5|                        "Closing a not opened array",
   98|      5|                    ))
   99|       |                }
  100|       |            }
  101|  20.6k|            b'"' => self.parse_string(buffer),
  102|      7|            b't' => self.parse_constant::<4>("true", JsonEvent::Boolean(true)),
  103|      3|            b'f' => self.parse_constant::<5>("false", JsonEvent::Boolean(false)),
  104|      4|            b'n' => self.parse_constant::<4>("null", JsonEvent::Null),
  105|  1.53k|            b'-' | b'0'..=b'9' => self.parse_number(front, buffer),
  106|     81|            c => {
  107|     81|                self.reader.consume(1);
  108|     81|                Err(Error::new(
  109|     81|                    ErrorKind::InvalidData,
  110|     81|                    format!("Unexpected char: {}", char::from(c)),
  111|     81|                ))
  112|       |            }
  113|       |        }
  114|  62.2k|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE16read_after_valueCscWvUm8eIJtl_13oxigraph_fuzz:
  365|  36.5k|        match self.state_stack.pop() {
  366|       |            Some(JsonState::FirstObjectKey) | Some(JsonState::NextObjectKey) => {
  367|  13.5k|                if self.lookup_front_skipping_whitespaces()? == Some(b':') {
  368|  13.4k|                    self.reader.consume(1);
  369|  13.4k|                    self.state_stack.push(JsonState::ObjectValue);
  370|  13.4k|                    if let JsonEvent::String(value) = value {
  371|  13.4k|                        Ok(JsonEvent::ObjectKey(value))
  372|       |                    } else {
  373|      1|                        Err(Error::new(
  374|      1|                            ErrorKind::InvalidData,
  375|      1|                            "Object keys should strings",
  376|      1|                        ))
  377|       |                    }
  378|       |                } else {
  379|     67|                    Err(Error::new(
  380|     67|                        ErrorKind::InvalidData,
  381|     67|                        "Object keys should be followed by ':'",
  382|     67|                    ))
  383|       |                }
  384|       |            }
  385|  7.92k|            Some(JsonState::ObjectValue) => match self.lookup_front_skipping_whitespaces()? {
  386|       |                Some(b',') => {
  387|  5.28k|                    self.reader.consume(1);
  388|  5.28k|                    self.state_stack.push(JsonState::NextObjectKey);
  389|  5.28k|                    Ok(value)
  390|       |                }
  391|       |                Some(b'}') => {
  392|  2.60k|                    self.state_stack.push(JsonState::LastObjectKey);
  393|  2.60k|                    Ok(value)
  394|       |                }
  395|     37|                _ => Err(Error::new(
  396|     37|                    ErrorKind::InvalidData,
  397|     37|                    "Object values should be followed by a comma or the object end",
  398|     37|                )),
  399|       |            },
  400|       |            Some(JsonState::FirstArray) | Some(JsonState::NextArray) => {
  401|  14.9k|                match self.lookup_front_skipping_whitespaces()? {
  402|       |                    Some(b',') => {
  403|  13.3k|                        self.reader.consume(1);
  404|  13.3k|                        self.state_stack.push(JsonState::NextArray);
  405|  13.3k|                        Ok(value)
  406|       |                    }
  407|       |                    Some(b']') => {
  408|  1.64k|                        self.state_stack.push(JsonState::LastArray);
  409|  1.64k|                        Ok(value)
  410|       |                    }
  411|     22|                    _ => Err(Error::new(
  412|     22|                        ErrorKind::InvalidData,
  413|     22|                        "Array values should be followed by a comma or the array end",
  414|     22|                    )),
  415|       |                }
  416|       |            }
  417|       |            None => {
  418|     71|                if self.element_read {
  419|      2|                    Err(Error::new(ErrorKind::InvalidData, "JSON trailing content"))
  420|       |                } else {
  421|     69|                    self.element_read = true;
  422|     69|                    Ok(value)
  423|       |                }
  424|       |            }
  425|      0|            Some(JsonState::LastObjectKey) => Err(Error::new(
  426|      0|                ErrorKind::InvalidData,
  427|      0|                "JSON object elements should be separated by commas",
  428|      0|            )),
  429|      0|            Some(JsonState::LastArray) => Err(Error::new(
  430|      0|                ErrorKind::InvalidData,
  431|      0|                "JSON array elements should be separated by commas",
  432|      0|            )),
  433|       |        }
  434|  36.5k|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE33lookup_front_skipping_whitespacesCscWvUm8eIJtl_13oxigraph_fuzz:
  436|  98.6k|    fn lookup_front_skipping_whitespaces(&mut self) -> Result<Option<u8>> {
  437|  98.7k|        loop {
  438|  98.7k|            match self.reader.fill_buf() {
  439|  98.7k|                Ok(buf) => {
  440|  98.7k|                    if buf.is_empty() {
  441|    403|                        return Ok(None);
  442|  98.3k|                    }
  443|  98.3k|                    let skipped = skip_whitespaces(buf);
  444|  98.3k|                    if skipped == buf.len() {
  445|     37|                        self.reader.consume(skipped);
  446|     37|                    } else {
  447|  98.2k|                        let result = Some(buf[skipped]);
  448|  98.2k|                        self.reader.consume(skipped);
  449|  98.2k|                        return Ok(result);
  450|       |                    }
  451|       |                }
  452|      0|                Err(error) => {
  453|      0|                    if error.kind() != ErrorKind::Interrupted {
  454|      0|                        return Err(error);
  455|      0|                    }
  456|       |                }
  457|       |            }
  458|       |        }
  459|  98.6k|    }
_RINvMNtCslkAaEoiZcfh_17json_event_parser4readINtB3_10JsonReaderRShE9read_charNCNvB2_12parse_number0ECscWvUm8eIJtl_13oxigraph_fuzz:
  338|     37|    fn read_char(&mut self, valid: impl Fn(u8) -> bool, output: &mut Vec<u8>) -> Result<()> {
  339|     37|        let c = self.lookup_mandatory_front()?;
  340|     35|        if valid(c) {
  341|     34|            output.push(c);
  342|     34|            self.reader.consume(1);
  343|     34|            Ok(())
  344|       |        } else {
  345|      1|            Err(Error::new(
  346|      1|                ErrorKind::InvalidData,
  347|      1|                format!("Invalid number. Found char {}", char::from(c)),
  348|      1|            ))
  349|       |        }
  350|     37|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser4readINtB2_10JsonReaderRShE12parse_numberCscWvUm8eIJtl_13oxigraph_fuzz:
  272|  1.49k|    fn parse_number<'a>(
  273|  1.49k|        &mut self,
  274|  1.49k|        first_byte: u8,
  275|  1.49k|        output: &'a mut Vec<u8>,
  276|  1.49k|    ) -> Result<JsonEvent<'a>> {
  277|  1.49k|        output.clear();
  278|  1.49k|        if first_byte == b'-' {
  279|     15|            output.push(b'-');
  280|     15|            self.reader.consume(1);
  281|  1.47k|        }
  282|       |        // integer starting with first bytes
  283|       |        // TODO: avoid too many fill_buf
  284|  1.49k|        let c = self.lookup_mandatory_front()?;
  285|  1.48k|        match c {
  286|    108|            b'0' => {
  287|    108|                output.push(b'0');
  288|    108|                self.reader.consume(1);
  289|    108|            }
  290|  1.37k|            b'1'..=b'9' => {
  291|  1.37k|                output.push(c);
  292|  1.37k|                self.reader.consume(1);
  293|  1.37k|                self.read_digits(output)?;
  294|       |            }
  295|      1|            _ => return Err(Error::new(ErrorKind::InvalidData, "Invalid number")),
  296|       |        }
  297|       |
  298|       |        // Dot
  299|  1.48k|        if self.lookup_front()? == Some(b'.') {
  300|     37|            output.push(b'.');
  301|     37|            self.reader.consume(1);
  302|     37|            self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
  303|     34|            self.read_digits(output)?;
  304|  1.44k|        }
  305|       |
  306|       |        // Exp
  307|  1.48k|        if let Some(c) = self.lookup_front()? {
  308|  1.43k|            if c == b'e' || c == b'E' {
  309|    547|                output.push(c);
  310|    547|                self.reader.consume(1);
  311|    547|                let c = self.lookup_mandatory_front()?;
  312|    542|                match c {
  313|       |                    b'-' | b'+' => {
  314|    507|                        output.push(c);
  315|    507|                        self.reader.consume(1);
  316|    507|                        self.read_char(|c| matches!(c, b'0'..=b'9'), output)?;
  317|       |                    }
  318|     34|                    b'0'..=b'9' => {
  319|     33|                        output.push(c);
  320|     33|                        self.reader.consume(1);
  321|     33|                    }
  322|       |                    _ => {
  323|      2|                        return Err(Error::new(
  324|      2|                            ErrorKind::InvalidData,
  325|      2|                            format!("Invalid number. Found char {}", char::from(c)),
  326|      2|                        ))
  327|       |                    }
  328|       |                }
  329|    532|                self.read_digits(output)?;
  330|    890|            }
  331|     44|        }
  332|       |
  333|       |        self.read_after_value(JsonEvent::Number(
  334|  1.46k|            str::from_utf8(output.as_slice()).map_err(|e| Error::new(ErrorKind::InvalidData, e))?,
  335|       |        ))
  336|  1.49k|    }
_RNvNtCslkAaEoiZcfh_17json_event_parser4read16skip_whitespaces:
  512|  98.3k|fn skip_whitespaces(buf: &[u8]) -> usize {
  513|   103k|    for (i, c) in buf.iter().enumerate() {
  514|   103k|        if !matches!(c, b' ' | b'\t' | b'\n' | b'\r') {
  515|  98.2k|            return i;
  516|  4.80k|        }
  517|       |    }
  518|     37|    buf.len()
  519|  98.3k|}
_RNvNtCslkAaEoiZcfh_17json_event_parser4read14read_hexa_char:
  521|  5.39k|fn read_hexa_char(input: &[u8]) -> Result<u32> {
  522|  5.39k|    let mut value = 0;
  523|  21.5k|    for c in input.iter().copied() {
  524|  21.5k|        value = value * 16
  525|  21.5k|            + match c {
  526|  21.5k|                b'0'..=b'9' => u32::from(c) - u32::from(b'0'),
  527|  2.83k|                b'a'..=b'f' => u32::from(c) - u32::from(b'a') + 10,
  528|  9.90k|                b'A'..=b'F' => u32::from(c) - u32::from(b'A') + 10,
  529|       |                _ => {
  530|      9|                    return Err(Error::new(
  531|      9|                        ErrorKind::InvalidData,
  532|      9|                        "Unexpected character in a unicode escape",
  533|      9|                    ))
  534|       |                }
  535|       |            }
  536|       |    }
  537|  5.38k|    Ok(value)
  538|  5.39k|}

_RINvNtCslkAaEoiZcfh_17json_event_parser5write25write_escaped_json_stringINtNtCsYFqBAFw4ZB_5alloc3vec3VechEECscWvUm8eIJtl_13oxigraph_fuzz:
  170|  1.07k|    sink.write_all(b"\"")?;
  171|  1.07k|    let mut buffer = [b'\\', b'u', 0, 0, 0, 0];
  172|  17.0k|    for c in s.chars() {
  173|  17.0k|        match c {
  174|      0|            '\\' => sink.write_all(b"\\\\"),
  175|      0|            '"' => sink.write_all(b"\\\""),
  176|  17.0k|            c => {
  177|  17.0k|                if c < char::from(32) {
  178|      0|                    match c {
  179|      0|                        '\u{08}' => sink.write_all(b"\\b"),
  180|      0|                        '\u{0C}' => sink.write_all(b"\\f"),
  181|      0|                        '\n' => sink.write_all(b"\\n"),
  182|      0|                        '\r' => sink.write_all(b"\\r"),
  183|      0|                        '\t' => sink.write_all(b"\\t"),
  184|      0|                        c => {
  185|      0|                            let mut c = c as u8;
  186|      0|                            for i in (2..6).rev() {
  187|      0|                                let ch = c % 16;
  188|      0|                                buffer[i] = ch + if ch < 10 { b'0' } else { b'A' };
  189|      0|                                c /= 16;
  190|       |                            }
  191|      0|                            sink.write_all(&buffer)
  192|       |                        }
  193|       |                    }
  194|       |                } else {
  195|  17.0k|                    sink.write_all(c.encode_utf8(&mut buffer[2..]).as_bytes())
  196|       |                }
  197|       |            }
  198|      0|        }?;
  199|       |    }
  200|  1.07k|    sink.write_all(b"\"")?;
  201|  1.07k|    Ok(())
  202|  1.07k|}
_RNvMNtCslkAaEoiZcfh_17json_event_parser5writeINtB2_10JsonWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE11from_writerCscWvUm8eIJtl_13oxigraph_fuzz:
   27|    129|    pub fn from_writer(writer: W) -> Self {
   28|    129|        Self {
   29|    129|            writer,
   30|    129|            state_stack: Vec::new(),
   31|    129|            element_written: false,
   32|    129|        }
   33|    129|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser5writeINtB2_10JsonWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE10into_innerCscWvUm8eIJtl_13oxigraph_fuzz:
   35|    129|    pub fn into_inner(self) -> W {
   36|    129|        self.writer
   37|    129|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser5writeINtB2_10JsonWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE11write_eventCscWvUm8eIJtl_13oxigraph_fuzz:
   43|  9.42k|    pub fn write_event(&mut self, event: JsonEvent<'_>) -> Result<()> {
   44|  9.42k|        match event {
   45|    556|            JsonEvent::String(s) => {
   46|    556|                self.before_value()?;
   47|    556|                write_escaped_json_string(s, &mut self.writer)
   48|       |            }
   49|      0|            JsonEvent::Number(number) => {
   50|      0|                self.before_value()?;
   51|      0|                self.writer.write_all(number.as_bytes())
   52|       |            }
   53|      0|            JsonEvent::Boolean(b) => {
   54|      0|                self.before_value()?;
   55|      0|                self.writer.write_all(if b { b"true" } else { b"false" })
   56|       |            }
   57|       |            JsonEvent::Null => {
   58|      0|                self.before_value()?;
   59|      0|                self.writer.write_all(b"null")
   60|       |            }
   61|       |            JsonEvent::StartArray => {
   62|    258|                self.before_value()?;
   63|    258|                self.state_stack.push(JsonState::OpenArray);
   64|    258|                self.writer.write_all(b"[")
   65|       |            }
   66|    258|            JsonEvent::EndArray => match self.state_stack.pop() {
   67|       |                Some(JsonState::OpenArray) | Some(JsonState::ContinuationArray) => {
   68|    258|                    self.writer.write_all(b"]")
   69|       |                }
   70|      0|                Some(s) => {
   71|      0|                    self.state_stack.push(s);
   72|      0|                    Err(Error::new(
   73|      0|                        ErrorKind::InvalidInput,
   74|      0|                        "Closing a not opened array",
   75|      0|                    ))
   76|       |                }
   77|      0|                None => Err(Error::new(
   78|      0|                    ErrorKind::InvalidInput,
   79|      0|                    "Closing a not opened array",
   80|      0|                )),
   81|       |            },
   82|       |            JsonEvent::StartObject => {
   83|  3.91k|                self.before_value()?;
   84|  3.91k|                self.state_stack.push(JsonState::OpenObject);
   85|  3.91k|                self.writer.write_all(b"{")
   86|       |            }
   87|  3.91k|            JsonEvent::EndObject => match self.state_stack.pop() {
   88|       |                Some(JsonState::OpenObject) | Some(JsonState::ContinuationObject) => {
   89|  3.91k|                    self.writer.write_all(b"}")
   90|       |                }
   91|      0|                Some(s) => {
   92|      0|                    self.state_stack.push(s);
   93|      0|                    Err(Error::new(
   94|      0|                        ErrorKind::InvalidInput,
   95|      0|                        "Closing a not opened object",
   96|      0|                    ))
   97|       |                }
   98|      0|                None => Err(Error::new(
   99|      0|                    ErrorKind::InvalidInput,
  100|      0|                    "Closing a not opened object",
  101|      0|                )),
  102|       |            },
  103|    516|            JsonEvent::ObjectKey(key) => {
  104|    516|                match self.state_stack.pop() {
  105|    387|                    Some(JsonState::OpenObject) => (),
  106|    129|                    Some(JsonState::ContinuationObject) => self.writer.write_all(b",")?,
  107|       |                    _ => {
  108|      0|                        return Err(Error::new(
  109|      0|                            ErrorKind::InvalidInput,
  110|      0|                            "Trying to write an object key in an not object",
  111|      0|                        ))
  112|       |                    }
  113|       |                }
  114|    516|                self.state_stack.push(JsonState::ContinuationObject);
  115|    516|                self.state_stack.push(JsonState::ObjectValue);
  116|    516|                write_escaped_json_string(key, &mut self.writer)?;
  117|    516|                self.writer.write_all(b":")
  118|       |            }
  119|      0|            JsonEvent::Eof => Err(Error::new(
  120|      0|                ErrorKind::InvalidInput,
  121|      0|                "EOF is not allowed in JSON writer",
  122|      0|            )),
  123|       |        }
  124|  9.42k|    }
_RNvMNtCslkAaEoiZcfh_17json_event_parser5writeINtB2_10JsonWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE12before_valueCscWvUm8eIJtl_13oxigraph_fuzz:
  127|  4.73k|        match self.state_stack.pop() {
  128|       |            Some(JsonState::OpenArray) => {
  129|    230|                self.state_stack.push(JsonState::ContinuationArray);
  130|    230|                Ok(())
  131|       |            }
  132|       |            Some(JsonState::ContinuationArray) => {
  133|  3.85k|                self.state_stack.push(JsonState::ContinuationArray);
  134|  3.85k|                self.writer.write_all(b",")?;
  135|  3.85k|                Ok(())
  136|       |            }
  137|      0|            Some(last_state @ JsonState::OpenObject)
  138|      0|            | Some(last_state @ JsonState::ContinuationObject) => {
  139|      0|                self.state_stack.push(last_state);
  140|      0|                Err(Error::new(
  141|      0|                    ErrorKind::InvalidInput,
  142|      0|                    "Object key expected, string found",
  143|      0|                ))
  144|       |            }
  145|    516|            Some(JsonState::ObjectValue) => Ok(()),
  146|       |            None => {
  147|    129|                if self.element_written {
  148|      0|                    Err(Error::new(
  149|      0|                        ErrorKind::InvalidInput,
  150|      0|                        "A root JSON value has already been written",
  151|      0|                    ))
  152|       |                } else {
  153|    129|                    self.element_written = true;
  154|    129|                    Ok(())
  155|       |                }
  156|       |            }
  157|       |        }
  158|  4.73k|    }

_RNvNvCsiy2U10wG2Uc_19sparql_results_json1__19___libfuzzer_sys_run:
  241|  1.62k|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|  1.62k|                $body
  243|  1.62k|            }
rust_fuzzer_test_input:
  215|  1.62k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|  1.62k|                }
  223|  1.62k|
  224|  1.62k|                __libfuzzer_sys_run(bytes);
  225|  1.62k|                0
  226|  1.62k|            }
LLVMFuzzerTestOneInput:
   58|  1.62k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.62k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.62k|    });
   63|  1.62k|
   64|  1.62k|    match test_input {
   65|  1.62k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.62k|}
_RNCNvCsgtPPW9ZRYO_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.62k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.62k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.62k|        rust_fuzzer_test_input(data_slice)
   62|  1.62k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCsiM1GbNTdIHY_9once_cell3impINtB5_8OnceCellNtNtCsYFqBAFw4ZB_5alloc6string6StringE14is_initializedCsgtPPW9ZRYO_13libfuzzer_sys:
   49|  1.62k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.62k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.62k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.62k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.62k|        // `SeqCst` operations on the slow path.
   54|  1.62k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.62k|    }

_RNvMs4_NtCsiM1GbNTdIHY_9once_cell4syncINtB5_8OnceCellNtNtCsYFqBAFw4ZB_5alloc6string6StringE3getCsgtPPW9ZRYO_13libfuzzer_sys:
  965|  1.62k|        pub fn get(&self) -> Option<&T> {
  966|  1.62k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  1.62k|                None
  971|       |            }
  972|  1.62k|        }

_RNvMsp_Cs9fMv0xg6JFD_5oxiriINtB5_3IriNtNtCsYFqBAFw4ZB_5alloc6string6StringE5parseCs9A29yfdLmIx_5oxrdf:
  502|  1.43k|        IriRef::parse(iri)?.try_into()
  503|  1.43k|    }
_RNvMCs9fMv0xg6JFD_5oxiriINtB2_6IriRefNtNtCsYFqBAFw4ZB_5alloc6string6StringE5parseCs9A29yfdLmIx_5oxrdf:
   55|  1.43k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   56|  1.43k|        let positions = IriParser::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   57|  1.32k|        Ok(Self { iri, positions })
   58|  1.43k|    }
_RNvMCs9fMv0xg6JFD_5oxiriINtB2_6IriRefNtNtCsYFqBAFw4ZB_5alloc6string6StringE11is_absoluteCs9A29yfdLmIx_5oxrdf:
  146|  1.32k|    pub fn is_absolute(&self) -> bool {
  147|  1.32k|        self.positions.scheme_end != 0
  148|  1.32k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE15parse_authorityCs9A29yfdLmIx_5oxrdf:
 1231|    217|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1232|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1233|  7.76k|        loop {
 1234|  7.76k|            let c = self.input.next();
 1235|  7.76k|            match c {
 1236|       |                Some('@') => {
 1237|      1|                    self.output.push('@');
 1238|      1|                    return self.parse_host();
 1239|       |                }
 1240|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1241|    214|                    self.input = ParserInput {
 1242|    214|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1243|    214|                        position: self.input_scheme_end + 2,
 1244|    214|                    };
 1245|    214|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1246|    214|                    return self.parse_host();
 1247|       |                }
 1248|  7.54k|                Some(c) => {
 1249|  7.54k|                    self.read_url_codepoint_or_echar(c)?;
 1250|       |                }
 1251|       |            }
 1252|       |        }
 1253|    217|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_fragmentCs9A29yfdLmIx_5oxrdf:
 1394|    192|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1395|  4.23k|        while let Some(c) = self.input.next() {
 1396|  4.04k|            self.read_url_codepoint_or_echar(c)?
 1397|       |        }
 1398|    183|        Ok(())
 1399|    192|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE12parse_schemeCs9A29yfdLmIx_5oxrdf:
 1109|    987|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1110|  3.32k|        loop {
 1111|  3.32k|            let c = self.input.next();
 1112|  3.28k|            match c {
 1113|  3.28k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1114|  2.33k|                    self.output.push(c)
 1115|       |                }
 1116|       |                Some(':') => {
 1117|    901|                    self.output.push(':');
 1118|    901|                    self.output_positions.scheme_end = self.output.len();
 1119|    901|                    self.input_scheme_end = self.input.position;
 1120|    901|                    return if self.input.starts_with('/') {
 1121|     21|                        self.input.next();
 1122|     21|                        self.output.push('/');
 1123|     21|                        self.parse_path_or_authority()
 1124|       |                    } else {
 1125|    880|                        self.output_positions.authority_end = self.output.len();
 1126|    880|                        self.parse_path()
 1127|       |                    };
 1128|       |                }
 1129|       |                _ => {
 1130|     86|                    self.input = ParserInput {
 1131|     86|                        value: self.iri.chars(),
 1132|     86|                        position: 0,
 1133|     86|                    }; // reset
 1134|     86|                    self.output.clear();
 1135|     86|                    return self.parse_relative();
 1136|       |                }
 1137|       |            }
 1138|       |        }
 1139|    987|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_portCs9A29yfdLmIx_5oxrdf:
 1301|     26|    fn parse_port(&mut self) -> Result<(), IriParseError> {
 1302|    261|        loop {
 1303|    261|            let c = self.input.next();
 1304|    256|            match c {
 1305|    235|                Some(c) if c.is_ascii_digit() => self.output.push(c),
 1306|       |                Some('/') | Some('?') | Some('#') | None => {
 1307|      8|                    self.output_positions.authority_end = self.output.len();
 1308|      8|                    return self.parse_path_start(c);
 1309|       |                }
 1310|     18|                Some(c) => return self.parse_error(IriParseErrorKind::InvalidPortCharacter(c)),
 1311|       |            }
 1312|       |        }
 1313|     26|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE27read_url_codepoint_or_echarCs9A29yfdLmIx_5oxrdf:
 1410|  32.5k|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1411|  32.5k|        if c == '%' {
 1412|  1.49k|            self.read_echar()
 1413|  31.0k|        } else if is_url_code_point(c) {
 1414|  31.0k|            self.output.push(c);
 1415|  31.0k|            Ok(())
 1416|       |        } else {
 1417|      9|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1418|       |        }
 1419|  32.5k|    }
_RNvMsp_Cs9fMv0xg6JFD_5oxiriINtB5_3IriNtNtCsYFqBAFw4ZB_5alloc6string6StringE10into_innerCs9A29yfdLmIx_5oxrdf:
  568|    900|    pub fn into_inner(self) -> T {
  569|    900|        self.0.into_inner()
  570|    900|    }
_RNvMCs9fMv0xg6JFD_5oxiriINtB2_6IriRefNtNtCsYFqBAFw4ZB_5alloc6string6StringE10into_innerCs9A29yfdLmIx_5oxrdf:
  132|    900|    pub fn into_inner(self) -> T {
  133|    900|        self.iri
  134|    900|    }
_RNCNvMs11_Cs9fMv0xg6JFD_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echars_0Cs9A29yfdLmIx_5oxrdf:
 1438|  1.87k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
_RINvMs11_Cs9fMv0xg6JFD_5oxiriINtB7_9IriParserNtB7_16VoidOutputBufferE11parse_erroruECs9A29yfdLmIx_5oxrdf:
 1454|    110|    fn parse_error<T>(&self, kind: IriParseErrorKind) -> Result<T, IriParseError> {
 1455|    110|        Err(IriParseError { kind })
 1456|    110|    }
_RNCNvMs11_Cs9fMv0xg6JFD_5oxiriINtB8_9IriParserNtB8_16VoidOutputBufferE10read_echar0Cs9A29yfdLmIx_5oxrdf:
 1437|  1.88k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
_RNvXsV_Cs9fMv0xg6JFD_5oxiriINtB5_3IriNtNtCsYFqBAFw4ZB_5alloc6string6StringEINtNtCsf4yKkFD4Bbx_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs9A29yfdLmIx_5oxrdf:
  871|  1.32k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  872|  1.32k|        if iri.is_absolute() {
  873|    900|            Ok(Self(iri))
  874|       |        } else {
  875|    421|            Err(IriParseError {
  876|    421|                kind: IriParseErrorKind::NoScheme,
  877|    421|            })
  878|       |        }
  879|  1.32k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE14parse_relativeCs9A29yfdLmIx_5oxrdf:
 1153|    529|        if let Some(base) = self.base {
 1154|      0|            match self.input.front() {
 1155|       |                None => {
 1156|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1157|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1158|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1159|      0|                    self.output_positions.path_end = base.positions.path_end;
 1160|      0|                    self.output_positions.query_end = base.positions.query_end;
 1161|      0|                    Ok(())
 1162|       |                }
 1163|       |                Some('/') => {
 1164|      0|                    self.input.next();
 1165|      0|                    self.parse_relative_slash(&base)
 1166|       |                }
 1167|       |                Some('?') => {
 1168|      0|                    self.input.next();
 1169|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1170|      0|                    self.output.push('?');
 1171|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1172|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1173|      0|                    self.output_positions.path_end = base.positions.path_end;
 1174|      0|                    self.parse_query()
 1175|       |                }
 1176|       |                Some('#') => {
 1177|      0|                    self.input.next();
 1178|      0|                    self.output.push_str(&base.iri[..base.positions.query_end]);
 1179|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1180|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1181|      0|                    self.output_positions.path_end = base.positions.path_end;
 1182|      0|                    self.output_positions.query_end = base.positions.query_end;
 1183|      0|                    self.output.push('#');
 1184|      0|                    self.parse_fragment()
 1185|       |                }
 1186|       |                _ => {
 1187|      0|                    self.output.push_str(&base.iri[..base.positions.path_end]);
 1188|      0|                    self.output_positions.scheme_end = base.positions.scheme_end;
 1189|      0|                    self.output_positions.authority_end = base.positions.authority_end;
 1190|      0|                    self.output_positions.path_end = base.positions.path_end;
 1191|      0|                    self.remove_last_segment();
 1192|      0|                    if self.output.len() > base.positions.scheme_end {
 1193|      0|                        // We have some path or authority, we keep a base '/'
 1194|      0|                        self.output.push('/');
 1195|      0|                    }
 1196|      0|                    self.parse_path()
 1197|       |                }
 1198|       |            }
 1199|       |        } else {
 1200|    529|            self.output_positions.scheme_end = 0;
 1201|    529|            self.input_scheme_end = 0;
 1202|    529|            if self.input.starts_with('/') {
 1203|    240|                self.input.next();
 1204|    240|                self.output.push('/');
 1205|    240|                self.parse_path_or_authority()
 1206|       |            } else {
 1207|    289|                self.output_positions.authority_end = 0;
 1208|    289|                self.parse_path()
 1209|       |            }
 1210|       |        }
 1211|    529|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_pathCs9A29yfdLmIx_5oxrdf:
 1344|  1.22k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1345|  16.1k|        loop {
 1346|  16.1k|            let c = self.input.next();
 1347|  16.1k|            match c {
 1348|       |                None | Some('/') | Some('?') | Some('#') => {
 1349|  1.41k|                    if self.output.as_str().ends_with("/..") {
 1350|      0|                        self.remove_last_segment();
 1351|      0|                        self.remove_last_segment();
 1352|      0|                        self.output.push('/');
 1353|  1.41k|                    } else if self.output.as_str().ends_with("/.") {
 1354|      0|                        self.remove_last_segment();
 1355|      0|                        self.output.push('/');
 1356|  1.41k|                    } else if c == Some('/') {
 1357|    210|                        self.output.push('/');
 1358|  1.20k|                    }
 1359|       |
 1360|  1.41k|                    if c == Some('?') {
 1361|    232|                        self.output_positions.path_end = self.output.len();
 1362|    232|                        self.output.push('?');
 1363|    232|                        return self.parse_query();
 1364|  1.18k|                    } else if c == Some('#') {
 1365|    161|                        self.output_positions.path_end = self.output.len();
 1366|    161|                        self.output_positions.query_end = self.output.len();
 1367|    161|                        self.output.push('#');
 1368|    161|                        return self.parse_fragment();
 1369|  1.02k|                    } else if c == None {
 1370|    811|                        self.output_positions.path_end = self.output.len();
 1371|    811|                        self.output_positions.query_end = self.output.len();
 1372|    811|                        return Ok(());
 1373|    210|                    }
 1374|       |                }
 1375|  14.7k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1376|       |            }
 1377|       |        }
 1378|  1.22k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10read_echarCs9A29yfdLmIx_5oxrdf:
 1434|  1.89k|    fn read_echar(&mut self) -> Result<(), IriParseError> {
 1435|  1.89k|        let c1 = self.input.next();
 1436|  1.89k|        let c2 = self.input.next();
 1437|  1.89k|        if c1.map_or(false, |c| c.is_ascii_hexdigit())
 1438|  1.87k|            && c2.map_or(false, |c| c.is_ascii_hexdigit())
 1439|       |        {
 1440|  1.87k|            self.output.push('%');
 1441|  1.87k|            self.output.push(c1.unwrap());
 1442|  1.87k|            self.output.push(c2.unwrap());
 1443|  1.87k|            Ok(())
 1444|       |        } else {
 1445|     26|            self.parse_error(IriParseErrorKind::InvalidPercentEncoding([
 1446|     26|                Some('%'),
 1447|     26|                c1,
 1448|     26|                c2,
 1449|     26|            ]))
 1450|       |        }
 1451|  1.89k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE5parseCs9A29yfdLmIx_5oxrdf:
 1076|  1.43k|    fn parse(
 1077|  1.43k|        iri: &'a str,
 1078|  1.43k|        base: Option<IriRef<&'a str>>,
 1079|  1.43k|        output: &'a mut O,
 1080|  1.43k|    ) -> Result<IriElementsPositions, IriParseError> {
 1081|  1.43k|        let mut parser = Self {
 1082|  1.43k|            iri,
 1083|  1.43k|            base,
 1084|  1.43k|            input: ParserInput {
 1085|  1.43k|                value: iri.chars(),
 1086|  1.43k|                position: 0,
 1087|  1.43k|            },
 1088|  1.43k|            output,
 1089|  1.43k|            output_positions: IriElementsPositions {
 1090|  1.43k|                scheme_end: 0,
 1091|  1.43k|                authority_end: 0,
 1092|  1.43k|                path_end: 0,
 1093|  1.43k|                query_end: 0,
 1094|  1.43k|            },
 1095|  1.43k|            input_scheme_end: 0,
 1096|  1.43k|        };
 1097|  1.43k|        parser.parse_scheme_start()?;
 1098|  1.32k|        Ok(parser.output_positions)
 1099|  1.43k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE18parse_scheme_startCs9A29yfdLmIx_5oxrdf:
 1102|  1.43k|        match self.input.front() {
 1103|      1|            Some(':') => self.parse_error(IriParseErrorKind::NoScheme),
 1104|    987|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1105|    443|            _ => self.parse_relative(),
 1106|       |        }
 1107|  1.43k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE10parse_hostCs9A29yfdLmIx_5oxrdf:
 1255|    215|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1256|    215|        if self.input.starts_with('[') {
 1257|       |            // IP v6
 1258|     42|            let start_position = self.input.position;
 1259|  2.60k|            while let Some(c) = self.input.next() {
 1260|  2.56k|                self.output.push(c);
 1261|  2.56k|                if c == ']' {
 1262|      3|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1263|      3|                    if let Err(error) = Ipv6Addr::from_str(ip) {
 1264|      3|                        return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1265|      0|                    }
 1266|      0|
 1267|      0|                    let c = self.input.next();
 1268|      0|                    return match c {
 1269|       |                        Some(':') => {
 1270|      0|                            self.output.push(':');
 1271|      0|                            self.parse_port()
 1272|       |                        }
 1273|       |                        None | Some('/') | Some('?') | Some('#') => {
 1274|      0|                            self.output_positions.authority_end = self.output.len();
 1275|      0|                            self.parse_path_start(c)
 1276|       |                        }
 1277|      0|                        Some(c) => self.parse_error(IriParseErrorKind::InvalidHostCharacter(c)),
 1278|       |                    };
 1279|  2.56k|                }
 1280|       |            }
 1281|     39|            self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1282|       |        } else {
 1283|       |            // Other host
 1284|  6.40k|            loop {
 1285|  6.40k|                let c = self.input.next();
 1286|  6.40k|                match c {
 1287|       |                    Some(':') => {
 1288|     26|                        self.output.push(':');
 1289|     26|                        return self.parse_port();
 1290|       |                    }
 1291|       |                    None | Some('/') | Some('?') | Some('#') => {
 1292|    145|                        self.output_positions.authority_end = self.output.len();
 1293|    145|                        return self.parse_path_start(c);
 1294|       |                    }
 1295|  6.23k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1296|       |                }
 1297|       |            }
 1298|       |        }
 1299|    215|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE23parse_path_or_authorityCs9A29yfdLmIx_5oxrdf:
 1141|    261|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1142|    261|        if self.input.starts_with('/') {
 1143|    217|            self.input.next();
 1144|    217|            self.output.push('/');
 1145|    217|            self.parse_authority()
 1146|       |        } else {
 1147|     44|            self.output_positions.authority_end = self.output.len() - 1;
 1148|     44|            self.parse_path()
 1149|       |        }
 1150|    261|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE16parse_path_startCs9A29yfdLmIx_5oxrdf:
 1315|    153|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1316|    153|        match c {
 1317|       |            None => {
 1318|    115|                self.output_positions.path_end = self.output.len();
 1319|    115|                self.output_positions.query_end = self.output.len();
 1320|    115|                Ok(())
 1321|       |            }
 1322|       |            Some('?') => {
 1323|     10|                self.output_positions.path_end = self.output.len();
 1324|     10|                self.output.push('?');
 1325|     10|                self.parse_query()
 1326|       |            }
 1327|       |            Some('#') => {
 1328|     17|                self.output_positions.path_end = self.output.len();
 1329|     17|                self.output_positions.query_end = self.output.len();
 1330|     17|                self.output.push('#');
 1331|     17|                self.parse_fragment()
 1332|       |            }
 1333|       |            Some('/') => {
 1334|     11|                self.output.push('/');
 1335|     11|                self.parse_path()
 1336|       |            }
 1337|      0|            Some(c) => {
 1338|      0|                self.read_url_codepoint_or_echar(c)?;
 1339|      0|                self.parse_path()
 1340|       |            }
 1341|       |        }
 1342|    153|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE33read_url_query_codepoint_or_echarCs9A29yfdLmIx_5oxrdf:
 1422|  7.36k|    fn read_url_query_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1423|  7.36k|        if c == '%' {
 1424|    400|            self.read_echar()
 1425|  6.96k|        } else if is_url_query_code_point(c) {
 1426|  6.94k|            self.output.push(c);
 1427|  6.94k|            Ok(())
 1428|       |        } else {
 1429|     14|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1430|       |        }
 1431|  7.36k|    }
_RNvMs11_Cs9fMv0xg6JFD_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferE11parse_queryCs9A29yfdLmIx_5oxrdf:
 1380|    242|    fn parse_query(&mut self) -> Result<(), IriParseError> {
 1381|  7.58k|        while let Some(c) = self.input.next() {
 1382|  7.37k|            if c == '#' {
 1383|     14|                self.output_positions.query_end = self.output.len();
 1384|     14|                self.output.push('#');
 1385|     14|                return self.parse_fragment();
 1386|       |            } else {
 1387|  7.36k|                self.read_url_query_codepoint_or_echar(c)?
 1388|       |            }
 1389|       |        }
 1390|    212|        self.output_positions.query_end = self.output.len();
 1391|    212|        Ok(())
 1392|    242|    }
_RNvXsY_Cs9fMv0xg6JFD_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer5clearCs9A29yfdLmIx_5oxrdf:
  985|     86|    fn clear(&mut self) {
  986|     86|        self.len = 0;
  987|     86|    }
_RNvMs10_Cs9fMv0xg6JFD_5oxiriNtB6_11ParserInput4nextCs9A29yfdLmIx_5oxrdf:
 1044|  52.6k|        if let Some(head) = self.value.next() {
 1045|  51.0k|            self.position += head.len_utf8();
 1046|  51.0k|            Some(head)
 1047|       |        } else {
 1048|  1.55k|            None
 1049|       |        }
 1050|  52.6k|    }
_RNvXs1b_Cs9fMv0xg6JFD_5oxiriNtB6_16VoidOutputBufferNtNtCsf4yKkFD4Bbx_4core7default7Default7defaultCs9A29yfdLmIx_5oxrdf:
  968|  1.43k|#[derive(Default)]
_RNvMs10_Cs9fMv0xg6JFD_5oxiriNtB6_11ParserInput5frontCs9A29yfdLmIx_5oxrdf:
 1053|  1.43k|    fn front(&self) -> Option<char> {
 1054|  1.43k|        self.value.clone().next()
 1055|  1.43k|    }
_RNvXsY_Cs9fMv0xg6JFD_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs9A29yfdLmIx_5oxrdf:
  995|  4.65k|    fn len(&self) -> usize {
  996|  4.65k|        self.len
  997|  4.65k|    }
_RNvMs10_Cs9fMv0xg6JFD_5oxiriNtB6_11ParserInput11starts_withCs9A29yfdLmIx_5oxrdf:
 1058|  1.90k|    fn starts_with(&self, c: char) -> bool {
 1059|  1.90k|        self.value.as_str().starts_with(c)
 1060|  1.90k|    }
_RNvXsY_Cs9fMv0xg6JFD_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs9A29yfdLmIx_5oxrdf:
 1000|  2.82k|    fn as_str(&self) -> &str {
 1001|  2.82k|        ""
 1002|  2.82k|    }
_RNvXsY_Cs9fMv0xg6JFD_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs9A29yfdLmIx_5oxrdf:
  975|  50.8k|    fn push(&mut self, c: char) {
  976|  50.8k|        self.len += c.len_utf8();
  977|  50.8k|    }
_RNvXsY_Cs9fMv0xg6JFD_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs9A29yfdLmIx_5oxrdf:
  990|    214|    fn truncate(&mut self, new_len: usize) {
  991|    214|        self.len = new_len;
  992|    214|    }
_RNvXsW_Cs9fMv0xg6JFD_5oxiriNtB5_13IriParseErrorNtNtCsf4yKkFD4Bbx_4core3fmt7Display3fmt:
  906|    531|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  907|    531|        match &self.kind {
  908|    422|            IriParseErrorKind::NoScheme => write!(f, "No scheme found in an absolute IRI"),
  909|     39|            IriParseErrorKind::InvalidHostCharacter(c) => {
  910|     39|                write!(f, "Invalid character '{}' in host", c)
  911|       |            }
  912|      3|            IriParseErrorKind::InvalidHostIp(e) => write!(f, "Invalid host IP ({})", e),
  913|     18|            IriParseErrorKind::InvalidPortCharacter(c) => write!(f, "Invalid character '{}'", c),
  914|     23|            IriParseErrorKind::InvalidIriCodePoint(c) => {
  915|     23|                write!(f, "Invalid IRI code point '{}'", c)
  916|       |            }
  917|     26|            IriParseErrorKind::InvalidPercentEncoding(cs) => write!(
  918|     26|                f,
  919|     26|                "Invalid IRI percent encoding '{}'",
  920|     26|                cs.iter().flatten().cloned().collect::<String>()
  921|     26|            ),
  922|       |        }
  923|    531|    }
_RNvCs9fMv0xg6JFD_5oxiri23is_url_query_code_point:
 1503|  6.96k|fn is_url_query_code_point(c: char) -> bool {
 1504|  6.96k|    is_url_code_point(c)
 1505|    109|        || matches!(c, '\u{E000}'..='\u{F8FF}' | '\u{F0000}'..='\u{FFFFD}' | '\u{100000}'..='\u{10FFFD}')
 1506|  6.96k|}
_RNvCs9fMv0xg6JFD_5oxiri17is_url_code_point:
 1459|  38.0k|fn is_url_code_point(c: char) -> bool {
 1460|  38.0k|    matches!(c,
 1461|  10.0k|        'a'..='z'
 1462|  6.84k|        | 'A'..='Z'
 1463|  17.9k|        | '0'..='9'
 1464|       |        | '!'
 1465|       |        | '$'
 1466|       |        | '&'
 1467|       |        | '\''
 1468|       |        | '('
 1469|       |        | ')'
 1470|       |        | '*'
 1471|       |        | '+'
 1472|       |        | ','
 1473|       |        | '-'
 1474|       |        | '.'
 1475|       |        | '/'
 1476|       |        | ':'
 1477|       |        | ';'
 1478|       |        | '='
 1479|       |        | '?'
 1480|       |        | '@'
 1481|       |        | '_'
 1482|       |        | '~'
 1483|  2.83k|        | '\u{A0}'..='\u{D7FF}'
 1484|  1.38k|        | '\u{F900}'..='\u{FDCF}'
 1485|  1.38k|        | '\u{FDF0}'..='\u{FFEF}'
 1486|  1.38k|        | '\u{10000}'..='\u{1FFFD}'
 1487|  1.07k|        | '\u{20000}'..='\u{2FFFD}'
 1488|  1.06k|        | '\u{30000}'..='\u{3FFFD}'
 1489|  1.06k|        | '\u{40000}'..='\u{4FFFD}'
 1490|      7|        | '\u{50000}'..='\u{5FFFD}'
 1491|      7|        | '\u{60000}'..='\u{6FFFD}'
 1492|      7|        | '\u{70000}'..='\u{7FFFD}'
 1493|      7|        | '\u{80000}'..='\u{8FFFD}'
 1494|      6|        | '\u{90000}'..='\u{9FFFD}'
 1495|      6|        | '\u{A0000}'..='\u{AFFFD}'
 1496|      6|        | '\u{B0000}'..='\u{BFFFD}'
 1497|      6|        | '\u{C0000}'..='\u{CFFFD}'
 1498|      6|        | '\u{D0000}'..='\u{DFFFD}'
 1499|      6|        | '\u{E1000}'..='\u{EFFFD}'
 1500|       |    )
 1501|  38.0k|}

_RNvNtCscWvUm8eIJtl_13oxigraph_fuzz13result_format18fuzz_result_format:
    6|  1.62k|pub fn fuzz_result_format(format: QueryResultsFormat, data: &[u8]) {
    7|  1.62k|    let parser = QueryResultsParser::from_format(format);
    8|  1.62k|    let serializer = QueryResultsSerializer::from_format(format);
    9|       |
   10|  1.62k|    let Ok(reader) = parser.read_results(data) else {
   11|  1.44k|        return;
   12|       |    };
   13|    183|    match reader {
   14|    183|        QueryResultsReader::Solutions(solutions) => {
   15|    183|            let Ok(solutions) = solutions.collect::<Result<Vec<_>, _>>() else {
   16|     54|                return;
   17|       |            };
   18|       |
   19|       |            // We try to write again
   20|    129|            let mut writer = serializer
   21|    129|                .solutions_writer(
   22|    129|                    Vec::new(),
   23|    129|                    solutions
   24|    129|                        .get(0)
   25|    129|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),
   26|    129|                )
   27|    129|                .unwrap();
   28|  3.66k|            for solution in &solutions {
   29|  3.53k|                writer.write(solution).unwrap();
   30|  3.53k|            }
   31|    129|            let serialized = String::from_utf8(writer.finish().unwrap()).unwrap();
   32|       |
   33|       |            // And to parse again
   34|    129|            if let QueryResultsReader::Solutions(roundtrip_solutions) = parser
   35|    129|                .read_results(serialized.as_bytes())
   36|    129|                .with_context(|| format!("Parsing {:?}", &serialized))
   37|    129|                .unwrap()
   38|       |            {
   39|    129|                assert_eq!(
   40|    129|                    roundtrip_solutions
   41|    129|                        .collect::<Result<Vec<_>, _>>()
   42|    129|                        .with_context(|| format!("Parsing {:?}", &serialized))
   43|    129|                        .unwrap(),
   44|    129|                    solutions
   45|    129|                )
   46|      0|            }
   47|       |        }
   48|      0|        QueryResultsReader::Boolean(value) => {
   49|      0|            // We try to write again
   50|      0|            let mut serialized = Vec::new();
   51|      0|            serializer
   52|      0|                .write_boolean_result(&mut serialized, value)
   53|      0|                .unwrap();
   54|       |
   55|       |            // And to parse again
   56|      0|            if let QueryResultsReader::Boolean(roundtrip_value) =
   57|      0|                parser.read_results(serialized.as_slice()).unwrap()
   58|       |            {
   59|      0|                assert_eq!(roundtrip_value, value)
   60|      0|            }
   61|       |        }
   62|       |    }
   63|  1.62k|}
_RNCNvNtCscWvUm8eIJtl_13oxigraph_fuzz13result_format18fuzz_result_format0B5_:
   25|    126|                        .map_or_else(Vec::new, |s| s.variables().to_vec()),

_RNvMNtCs9A29yfdLmIx_5oxrdf10named_nodeNtB2_9NamedNode12new_from_iriB4_:
   29|    900|    pub(crate) fn new_from_iri(iri: Iri<String>) -> Self {
   30|    900|        Self::new_unchecked(iri.into_inner())
   31|    900|    }
_RINvMNtCs9A29yfdLmIx_5oxrdf10named_nodeNtB3_9NamedNode3newReEB5_:
   24|  1.43k|    pub fn new(iri: impl Into<String>) -> Result<Self, IriParseError> {
   25|  1.43k|        Ok(Self::new_from_iri(Iri::parse(iri.into())?))
   26|  1.43k|    }
_RINvMNtCs9A29yfdLmIx_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsYFqBAFw4ZB_5alloc6string6StringEB5_:
   39|    900|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|    900|        Self { iri: iri.into() }
   41|    900|    }

_RNvXs_NtCs9A29yfdLmIx_5oxrdf8variableNtB4_8VariableNtNtCsf4yKkFD4Bbx_4core3fmt7Display3fmtCscWvUm8eIJtl_13oxigraph_fuzz:
   61|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|     10|        self.as_ref().fmt(f)
   63|     10|    }
_RNvMNtCs9A29yfdLmIx_5oxrdf8variableNtB2_8Variable6as_strCscWvUm8eIJtl_13oxigraph_fuzz:
   44|  3.09k|    pub fn as_str(&self) -> &str {
   45|  3.09k|        &self.name
   46|  3.09k|    }
_RNvMNtCs9A29yfdLmIx_5oxrdf8variableNtB2_8Variable6as_refCscWvUm8eIJtl_13oxigraph_fuzz:
   54|     10|    pub fn as_ref(&self) -> VariableRef<'_> {
   55|     10|        VariableRef { name: &self.name }
   56|     10|    }
_RNvXs1_NtCs9A29yfdLmIx_5oxrdf8variableNtB5_11VariableRefNtNtCsf4yKkFD4Bbx_4core3fmt7Display3fmtCscWvUm8eIJtl_13oxigraph_fuzz:
  123|     10|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  124|     10|        write!(f, "?{}", self.name)
  125|     10|    }
_RNvXs8_NtCs9A29yfdLmIx_5oxrdf8variableNtB5_22VariableNameParseErrorNtNtCsf4yKkFD4Bbx_4core3fmt7Display3fmtCscWvUm8eIJtl_13oxigraph_fuzz:
  226|     16|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  227|     16|        write!(f, "The variable name is invalid")
  228|     16|    }
_RNvXsd_NtCs9A29yfdLmIx_5oxrdf8variableNtB5_8VariableNtNtCsf4yKkFD4Bbx_4core3cmp9PartialEq2eqCscWvUm8eIJtl_13oxigraph_fuzz:
   17|  23.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsh_NtCs9A29yfdLmIx_5oxrdf8variableNtB5_8VariableNtNtCsf4yKkFD4Bbx_4core5clone5Clone5cloneCscWvUm8eIJtl_13oxigraph_fuzz:
   17|    556|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCs9A29yfdLmIx_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsYFqBAFw4ZB_5alloc6string6StringEB5_:
   39|  4.88k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   40|  4.88k|        Self { name: name.into() }
   41|  4.88k|    }
_RINvMNtCs9A29yfdLmIx_5oxrdf8variableNtB3_8Variable3newReEB5_:
   26|  4.90k|    pub fn new(name: impl Into<String>) -> Result<Self, VariableNameParseError> {
   27|  4.90k|        let name = name.into();
   28|  4.90k|        validate_variable_identifier(&name)?;
   29|  4.88k|        Ok(Self::new_unchecked(name))
   30|  4.90k|    }
_RNvNtCs9A29yfdLmIx_5oxrdf8variable28validate_variable_identifier:
  170|  4.90k|fn validate_variable_identifier(id: &str) -> Result<(), VariableNameParseError> {
  171|  4.90k|    let mut chars = id.chars();
  172|  4.90k|    let front = chars.next().ok_or(VariableNameParseError {})?;
  173|  4.90k|    match front {
  174|  4.89k|        '0'..='9'
  175|       |        | '_'
  176|       |        | ':'
  177|  4.43k|        | 'A'..='Z'
  178|  3.04k|        | 'a'..='z'
  179|     76|        | '\u{00C0}'..='\u{00D6}'
  180|     76|        | '\u{00D8}'..='\u{00F6}'
  181|     76|        | '\u{00F8}'..='\u{02FF}'
  182|     56|        | '\u{0370}'..='\u{037D}'
  183|     56|        | '\u{037F}'..='\u{1FFF}'
  184|     54|        | '\u{200C}'..='\u{200D}'
  185|     54|        | '\u{2070}'..='\u{218F}'
  186|     54|        | '\u{2C00}'..='\u{2FEF}'
  187|     54|        | '\u{3001}'..='\u{D7FF}'
  188|     42|        | '\u{F900}'..='\u{FDCF}'
  189|     42|        | '\u{FDF0}'..='\u{FFFD}'
  190|  4.89k|        | '\u{10000}'..='\u{EFFFF}' => (),
  191|      3|        _ => return Err(VariableNameParseError {}),
  192|       |    }
  193|  41.8k|    for c in chars {
  194|  36.9k|        match c {
  195|  36.9k|            '0'..='9'
  196|       |            | '\u{00B7}'
  197|  1.81k|            | '\u{00300}'..='\u{036F}'
  198|  1.06k|            | '\u{203F}'..='\u{2040}'
  199|       |            | '_'
  200|  19.7k|            | 'A'..='Z'
  201|  13.0k|            | 'a'..='z'
  202|  2.01k|            | '\u{00C0}'..='\u{00D6}'
  203|  2.01k|            | '\u{00D8}'..='\u{00F6}'
  204|  2.01k|            | '\u{00F8}'..='\u{02FF}'
  205|  1.81k|            | '\u{0370}'..='\u{037D}'
  206|  1.81k|            | '\u{037F}'..='\u{1FFF}'
  207|  1.06k|            | '\u{200C}'..='\u{200D}'
  208|  1.06k|            | '\u{2070}'..='\u{218F}'
  209|  1.06k|            | '\u{2C00}'..='\u{2FEF}'
  210|  1.06k|            | '\u{3001}'..='\u{D7FF}'
  211|    570|            | '\u{F900}'..='\u{FDCF}'
  212|    568|            | '\u{FDF0}'..='\u{FFFD}'
  213|  36.9k|            | '\u{10000}'..='\u{EFFFF}' => (),
  214|     11|            _ => return Err(VariableNameParseError {}),
  215|       |        }
  216|       |    }
  217|  4.88k|    Ok(())
  218|  4.90k|}

_RINvMs4_NtCs4OyvW57uV0o_10sparesults5errorNtB6_11SyntaxError3msgNtNtCsYFqBAFw4ZB_5alloc6string6StringECscWvUm8eIJtl_13oxigraph_fuzz:
   86|    592|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|    592|        Self {
   88|    592|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|    592|        }
   90|    592|    }
_RINvMs4_NtCs4OyvW57uV0o_10sparesults5errorNtB6_11SyntaxError3msgReECscWvUm8eIJtl_13oxigraph_fuzz:
   86|     91|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   87|     91|        Self {
   88|     91|            inner: SyntaxErrorKind::Msg { msg: msg.into() },
   89|     91|        }
   90|     91|    }
_RNvXs1_NtCs4OyvW57uV0o_10sparesults5errorNtB5_10ParseErrorINtNtCsf4yKkFD4Bbx_4core7convert4FromNtB5_11SyntaxErrorE4fromCscWvUm8eIJtl_13oxigraph_fuzz:
   43|    683|    fn from(error: SyntaxError) -> Self {
   44|    683|        Self::Syntax(error)
   45|    683|    }
_RNvXs0_NtCs4OyvW57uV0o_10sparesults5errorNtB5_10ParseErrorINtNtCsf4yKkFD4Bbx_4core7convert4FromNtNtNtCsPHjnSxhDP7_3std2io5error5ErrorE4fromCscWvUm8eIJtl_13oxigraph_fuzz:
   36|    812|    fn from(error: io::Error) -> Self {
   37|    812|        Self::Io(error)
   38|    812|    }

_RINvMNtCs4OyvW57uV0o_10sparesults4jsonINtB3_19JsonSolutionsWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE5writeINtNtNtNtCsf4yKkFD4Bbx_4core4iter8adapters3map3MapNtNtB5_8solution4IterNCINvMs3_B5_INtB5_15SolutionsWriterB11_E5writeRNtNtCs9A29yfdLmIx_5oxrdf8variable8VariableRNtNtB3E_6triple4TermRNtB2w_13QuerySolutionE0EECscWvUm8eIJtl_13oxigraph_fuzz:
   56|  3.53k|        self.writer.write_event(JsonEvent::StartObject)?;
   57|  3.53k|        for (variable, value) in solution {
   58|      0|            self.writer
   59|      0|                .write_event(JsonEvent::ObjectKey(variable.as_str()))?;
   60|      0|            write_json_term(value, &mut self.writer)?;
   61|       |        }
   62|  3.53k|        self.writer.write_event(JsonEvent::EndObject)?;
   63|  3.53k|        Ok(())
   64|  3.53k|    }
_RINvNtCs4OyvW57uV0o_10sparesults4json10read_valueRShECscWvUm8eIJtl_13oxigraph_fuzz:
  319|  2.34k|fn read_value<R: BufRead>(
  320|  2.34k|    reader: &mut JsonReader<R>,
  321|  2.34k|    buffer: &mut Vec<u8>,
  322|  2.34k|    number_of_recursive_calls: usize,
  323|  2.34k|) -> Result<Term, ParseError> {
  324|  2.34k|    enum Type {
  325|  2.34k|        Uri,
  326|  2.34k|        BNode,
  327|  2.34k|        Literal,
  328|  2.34k|        #[cfg(feature = "rdf-star")]
  329|  2.34k|        Triple,
  330|  2.34k|    }
  331|  2.34k|    #[derive(Eq, PartialEq)]
  332|  2.34k|    enum State {
  333|  2.34k|        Type,
  334|  2.34k|        Value,
  335|  2.34k|        Lang,
  336|  2.34k|        Datatype,
  337|  2.34k|    }
  338|  2.34k|
  339|  2.34k|    if number_of_recursive_calls == MAX_NUMBER_OF_NESTED_TRIPLES {
  340|      1|        return Err(SyntaxError::msg(format!(
  341|      1|            "Too many nested triples ({MAX_NUMBER_OF_NESTED_TRIPLES}). The parser fails here to avoid a stack overflow."
  342|      1|        ))
  343|      1|            .into());
  344|  2.34k|    }
  345|  2.34k|    let mut state = None;
  346|  2.34k|    let mut t = None;
  347|  2.34k|    let mut value = None;
  348|  2.34k|    let mut lang = None;
  349|  2.34k|    let mut datatype = None;
  350|  2.34k|    #[cfg(feature = "rdf-star")]
  351|  2.34k|    let mut subject = None;
  352|  2.34k|    #[cfg(feature = "rdf-star")]
  353|  2.34k|    let mut predicate = None;
  354|  2.34k|    #[cfg(feature = "rdf-star")]
  355|  2.34k|    let mut object = None;
  356|  2.34k|    if reader.read_event(buffer)? != JsonEvent::StartObject {
  357|      1|        return Err(SyntaxError::msg("Term serializations should be an object").into());
  358|  2.30k|    }
  359|       |    loop {
  360|  5.10k|        match reader.read_event(buffer)? {
  361|  3.23k|            JsonEvent::ObjectKey(key) => match key {
  362|  3.23k|                "type" => state = Some(State::Type),
  363|  3.22k|                "value" => state = Some(State::Value),
  364|  3.18k|                "xml:lang" => state = Some(State::Lang),
  365|  3.09k|                "datatype" => state = Some(State::Datatype),
  366|       |                #[cfg(feature = "rdf-star")]
  367|  1.66k|                "subject" => {
  368|     10|                    subject = Some(read_value(reader, buffer, number_of_recursive_calls + 1)?)
  369|       |                }
  370|       |                #[cfg(feature = "rdf-star")]
  371|  1.65k|                "predicate" => {
  372|  1.62k|                    predicate = Some(read_value(reader, buffer, number_of_recursive_calls + 1)?)
  373|       |                }
  374|       |                #[cfg(feature = "rdf-star")]
  375|     28|                "object" => {
  376|     18|                    object = Some(read_value(reader, buffer, number_of_recursive_calls + 1)?)
  377|       |                }
  378|       |                _ => {
  379|     10|                    return Err(SyntaxError::msg(format!(
  380|     10|                        "Unexpected key in term serialization: '{key}'"
  381|     10|                    ))
  382|     10|                    .into())
  383|       |                }
  384|       |            },
  385|       |            JsonEvent::StartObject => {
  386|    221|                if state != Some(State::Value) {
  387|      4|                    return Err(
  388|      4|                        SyntaxError::msg("Unexpected nested object in term serialization").into(),
  389|      4|                    );
  390|    217|                }
  391|       |            }
  392|  1.53k|            JsonEvent::String(s) => match state {
  393|       |                Some(State::Type) => {
  394|     10|                    match s {
  395|     10|                        "uri" => t = Some(Type::Uri),
  396|     10|                        "bnode" => t = Some(Type::BNode),
  397|     10|                        "literal" | "typed-literal" => t = Some(Type::Literal),
  398|       |                        #[cfg(feature = "rdf-star")]
  399|      8|                        "triple" => t = Some(Type::Triple),
  400|       |                        _ => {
  401|      6|                            return Err(
  402|      6|                                SyntaxError::msg(format!("Unexpected term type: '{s}'")).into()
  403|      6|                            )
  404|       |                        }
  405|       |                    };
  406|      4|                    state = None;
  407|       |                }
  408|      2|                Some(State::Value) => {
  409|      2|                    value = Some(s.to_owned());
  410|      2|                    state = None;
  411|      2|                }
  412|     92|                Some(State::Lang) => {
  413|     92|                    lang = Some(s.to_owned());
  414|     92|                    state = None;
  415|     92|                }
  416|    900|                Some(State::Datatype) => {
  417|    900|                    datatype = Some(
  418|  1.43k|                        NamedNode::new(s)
  419|  1.43k|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
  420|       |                    );
  421|    900|                    state = None;
  422|       |                }
  423|      0|                _ => (), // impossible
  424|       |            },
  425|       |            JsonEvent::EndObject => {
  426|     12|                if let Some(s) = state {
  427|     10|                    if s == State::Value {
  428|     10|                        state = None; //End of triple
  429|     10|                    } else {
  430|      0|                        return Err(
  431|      0|                            SyntaxError::msg("Term description values should be string").into()
  432|      0|                        );
  433|       |                    }
  434|       |                } else {
  435|      1|                    return match t {
  436|      1|                        None => Err(SyntaxError::msg(
  437|      1|                            "Term serialization should have a 'type' key",
  438|      1|                        )
  439|      1|                        .into()),
  440|      0|                        Some(Type::Uri) => Ok(NamedNode::new(value.ok_or_else(|| {
  441|       |                            SyntaxError::msg("uri serialization should have a 'value' key")
  442|      0|                        })?)
  443|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid uri value: {e}")))?
  444|      0|                        .into()),
  445|      0|                        Some(Type::BNode) => Ok(BlankNode::new(value.ok_or_else(|| {
  446|       |                            SyntaxError::msg("bnode serialization should have a 'value' key")
  447|      0|                        })?)
  448|      0|                        .map_err(|e| SyntaxError::msg(format!("Invalid bnode value: {e}")))?
  449|      0|                        .into()),
  450|       |                        Some(Type::Literal) => {
  451|      0|                            let value = value.ok_or_else(|| {
  452|       |                                SyntaxError::msg("literal serialization should have a 'value' key")
  453|      0|                            })?;
  454|      0|                            Ok(match lang {
  455|      0|                                Some(lang) => {
  456|      0|                                    if let Some(datatype) = datatype {
  457|      0|                                        if datatype.as_ref() != rdf::LANG_STRING {
  458|      0|                                            return Err(SyntaxError::msg(format!(
  459|      0|                                                "xml:lang value '{lang}' provided with the datatype {datatype}"
  460|      0|                                            )).into())
  461|      0|                                        }
  462|      0|                                    }
  463|      0|                                    Literal::new_language_tagged_literal(value, &lang).map_err(|e| {
  464|       |                                        SyntaxError::msg(format!("Invalid xml:lang value '{lang}': {e}"))
  465|      0|                                    })?
  466|       |                                }
  467|      0|                                None => if let Some(datatype) = datatype {
  468|      0|                                    Literal::new_typed_literal(value, datatype)
  469|       |                                } else {
  470|      0|                                    Literal::new_simple_literal(value)
  471|       |                                }
  472|       |                            }
  473|      0|                                .into())
  474|       |                        }
  475|       |                        #[cfg(feature = "rdf-star")]
  476|       |                        Some(Type::Triple) => Ok(Triple::new(
  477|      1|                            match subject.ok_or_else(|| {
  478|       |                                SyntaxError::msg("triple serialization should have a 'subject' key")
  479|      1|                            })? {
  480|      0|                                Term::NamedNode(subject) => subject.into(),
  481|      0|                                Term::BlankNode(subject) => subject.into(),
  482|      0|                                Term::Triple(subject) => Subject::Triple(subject),
  483|       |                                Term::Literal(_) => {
  484|      0|                                    return Err(SyntaxError::msg(
  485|      0|                                        "The 'subject' value should not be a literal",
  486|      0|                                    )
  487|      0|                                    .into())
  488|       |                                }
  489|       |                            },
  490|      0|                            match predicate.ok_or_else(|| {
  491|       |                                SyntaxError::msg(
  492|       |                                    "triple serialization should have a 'predicate' key",
  493|       |                                )
  494|      0|                            })? {
  495|      0|                                Term::NamedNode(predicate) => predicate,
  496|       |                                _ => {
  497|      0|                                    return Err(SyntaxError::msg(
  498|      0|                                        "The 'predicate' value should be a uri",
  499|      0|                                    )
  500|      0|                                    .into())
  501|       |                                }
  502|       |                            },
  503|      0|                            object.ok_or_else(|| {
  504|       |                                SyntaxError::msg("triple serialization should have a 'object' key")
  505|      0|                            })?,
  506|       |                        )
  507|      0|                        .into()),
  508|       |                    };
  509|       |                }
  510|       |            }
  511|      1|            _ => return Err(SyntaxError::msg("Invalid term serialization").into()),
  512|       |        }
  513|       |    }
  514|  2.34k|}
_RNCINvNtCs4OyvW57uV0o_10sparesults4json10read_valueRShEs5_0CscWvUm8eIJtl_13oxigraph_fuzz:
  477|      1|                            match subject.ok_or_else(|| {
  478|      1|                                SyntaxError::msg("triple serialization should have a 'subject' key")
  479|      1|                            })? {
_RINvNtCs4OyvW57uV0o_10sparesults4json12ignore_valueRShECscWvUm8eIJtl_13oxigraph_fuzz:
  578|    894|fn ignore_value<R: BufRead>(
  579|    894|    reader: &mut JsonReader<R>,
  580|    894|    buffer: &mut Vec<u8>,
  581|    894|) -> Result<(), ParseError> {
  582|    894|    let mut nesting = 0;
  583|       |    loop {
  584|  11.5k|        match reader.read_event(buffer)? {
  585|       |            JsonEvent::Boolean(_)
  586|       |            | JsonEvent::Null
  587|       |            | JsonEvent::Number(_)
  588|       |            | JsonEvent::String(_) => {
  589|  1.75k|                if nesting == 0 {
  590|    485|                    return Ok(());
  591|  1.27k|                }
  592|       |            }
  593|  2.47k|            JsonEvent::ObjectKey(_) => (),
  594|  4.96k|            JsonEvent::StartArray | JsonEvent::StartObject => nesting += 1,
  595|       |            JsonEvent::EndArray | JsonEvent::EndObject => {
  596|  2.25k|                nesting -= 1;
  597|  2.25k|                if nesting == 0 {
  598|    306|                    return Ok(());
  599|  1.94k|                }
  600|       |            }
  601|      0|            JsonEvent::Eof => return Err(SyntaxError::msg("Unexpected end of file").into()),
  602|       |        }
  603|       |    }
  604|    894|}
_RNCINvNtCs4OyvW57uV0o_10sparesults4json10read_valueRShE0CscWvUm8eIJtl_13oxigraph_fuzz:
  419|    531|                            .map_err(|e| SyntaxError::msg(format!("Invalid datatype IRI: {e}")))?,
_RNvMNtCs4OyvW57uV0o_10sparesults4jsonINtB2_19JsonSolutionsWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE5startCscWvUm8eIJtl_13oxigraph_fuzz:
   33|    129|    pub fn start(sink: W, variables: &[Variable]) -> io::Result<Self> {
   34|    129|        let mut writer = JsonWriter::from_writer(sink);
   35|    129|        writer.write_event(JsonEvent::StartObject)?;
   36|    129|        writer.write_event(JsonEvent::ObjectKey("head"))?;
   37|    129|        writer.write_event(JsonEvent::StartObject)?;
   38|    129|        writer.write_event(JsonEvent::ObjectKey("vars"))?;
   39|    129|        writer.write_event(JsonEvent::StartArray)?;
   40|    685|        for variable in variables {
   41|    556|            writer.write_event(JsonEvent::String(variable.as_str()))?;
   42|       |        }
   43|    129|        writer.write_event(JsonEvent::EndArray)?;
   44|    129|        writer.write_event(JsonEvent::EndObject)?;
   45|    129|        writer.write_event(JsonEvent::ObjectKey("results"))?;
   46|    129|        writer.write_event(JsonEvent::StartObject)?;
   47|    129|        writer.write_event(JsonEvent::ObjectKey("bindings"))?;
   48|    129|        writer.write_event(JsonEvent::StartArray)?;
   49|    129|        Ok(Self { writer })
   50|    129|    }
_RINvNtCs4OyvW57uV0o_10sparesults4json9read_headRShECscWvUm8eIJtl_13oxigraph_fuzz:
  516|  1.60k|fn read_head<R: BufRead>(
  517|  1.60k|    reader: &mut JsonReader<R>,
  518|  1.60k|    buffer: &mut Vec<u8>,
  519|  1.60k|) -> Result<Vec<Variable>, ParseError> {
  520|  1.60k|    if reader.read_event(buffer)? != JsonEvent::StartObject {
  521|      3|        return Err(SyntaxError::msg("head should be an object").into());
  522|  1.59k|    }
  523|  1.59k|    let mut variables = Vec::new();
  524|       |    loop {
  525|  2.98k|        match reader.read_event(buffer)? {
  526|  1.60k|            JsonEvent::ObjectKey(key) => match key {
  527|  1.60k|                "vars" => {
  528|    975|                    if reader.read_event(buffer)? != JsonEvent::StartArray {
  529|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  530|    973|                    }
  531|       |                    loop {
  532|  5.84k|                        match reader.read_event(buffer)? {
  533|  4.90k|                            JsonEvent::String(s) => {
  534|  4.90k|                                let new_var = Variable::new(s).map_err(|e| {
  535|       |                                    SyntaxError::msg(format!(
  536|       |                                        "Invalid variable declaration '{s}': {e}"
  537|       |                                    ))
  538|  4.90k|                                })?;
  539|  4.88k|                                if variables.contains(&new_var) {
  540|     10|                                    return Err(SyntaxError::msg(format!(
  541|     10|                                        "The variable {new_var} is declared twice"
  542|     10|                                    ))
  543|     10|                                    .into());
  544|  4.87k|                                }
  545|  4.87k|                                variables.push(new_var);
  546|       |                            }
  547|    858|                            JsonEvent::EndArray => break,
  548|       |                            _ => {
  549|      1|                                return Err(
  550|      1|                                    SyntaxError::msg("Variable names should be strings").into()
  551|      1|                                )
  552|       |                            }
  553|       |                        }
  554|       |                    }
  555|       |                }
  556|    632|                "link" => {
  557|     40|                    if reader.read_event(buffer)? != JsonEvent::StartArray {
  558|      1|                        return Err(SyntaxError::msg("Variable list should be an array").into());
  559|     37|                    }
  560|       |                    loop {
  561|    106|                        match reader.read_event(buffer)? {
  562|     69|                            JsonEvent::String(_) => (),
  563|     27|                            JsonEvent::EndArray => break,
  564|       |                            _ => {
  565|      1|                                return Err(SyntaxError::msg("Link names should be strings").into())
  566|       |                            }
  567|       |                        }
  568|       |                    }
  569|       |                }
  570|    592|                _ => ignore_value(reader, buffer)?,
  571|       |            },
  572|  1.33k|            JsonEvent::EndObject => return Ok(variables),
  573|      1|            _ => return Err(SyntaxError::msg("Invalid head serialization").into()),
  574|       |        }
  575|       |    }
  576|  1.60k|}
_RNvMs_NtCs4OyvW57uV0o_10sparesults4jsonINtB4_22JsonQueryResultsReaderRShE4readCscWvUm8eIJtl_13oxigraph_fuzz:
  138|  1.75k|    pub fn read(source: R) -> Result<Self, ParseError> {
  139|  1.75k|        let mut reader = JsonReader::from_reader(source);
  140|  1.75k|        let mut buffer = Vec::default();
  141|  1.75k|        let mut variables = None;
  142|  1.75k|        let mut buffered_bindings: Option<Vec<_>> = None;
  143|  1.75k|        let mut output_iter = None;
  144|  1.75k|
  145|  1.75k|        if reader.read_event(&mut buffer)? != JsonEvent::StartObject {
  146|     56|            return Err(SyntaxError::msg("SPARQL JSON results should be an object").into());
  147|  1.46k|        }
  148|       |
  149|       |        loop {
  150|  3.83k|            let event = reader.read_event(&mut buffer)?;
  151|  3.73k|            match event {
  152|  3.39k|                JsonEvent::ObjectKey(key) => match key {
  153|  3.39k|                    "head" => {
  154|  1.60k|                        let extracted_variables = read_head(&mut reader, &mut buffer)?;
  155|  1.33k|                        if let Some(buffered_bindings) = buffered_bindings.take() {
  156|    449|                            let mut mapping = BTreeMap::default();
  157|  1.07k|                            for (i, var) in extracted_variables.iter().enumerate() {
  158|  1.07k|                                mapping.insert(var.as_str().to_owned(), i);
  159|  1.07k|                            }
  160|    449|                            output_iter = Some(Self::Solutions {
  161|    449|                                variables: extracted_variables,
  162|    449|                                solutions: JsonSolutionsReader {
  163|    449|                                    kind: JsonSolutionsReaderKind::Buffered {
  164|    449|                                        bindings: buffered_bindings.into_iter(),
  165|    449|                                    },
  166|    449|                                    mapping,
  167|    449|                                },
  168|    449|                            });
  169|    884|                        } else {
  170|    884|                            variables = Some(extracted_variables);
  171|    884|                        }
  172|       |                    }
  173|  1.78k|                    "results" => {
  174|  1.77k|                        if reader.read_event(&mut buffer)? != JsonEvent::StartObject {
  175|      1|                            return Err(SyntaxError::msg("'results' should be an object").into());
  176|  1.77k|                        }
  177|       |                        loop {
  178|  2.05k|                            match reader.read_event(&mut buffer)? {
  179|  2.04k|                                JsonEvent::ObjectKey("bindings") => break, // Found
  180|    302|                                JsonEvent::ObjectKey(_) => ignore_value(&mut reader, &mut buffer)?,
  181|       |                                _ => {
  182|      3|                                    return Err(SyntaxError::msg(
  183|      3|                                        "'results' should contain a 'bindings' key",
  184|      3|                                    )
  185|      3|                                    .into())
  186|       |                                }
  187|       |                            }
  188|       |                        }
  189|  1.74k|                        if reader.read_event(&mut buffer)? != JsonEvent::StartArray {
  190|      1|                            return Err(SyntaxError::msg("'bindings' should be an object").into());
  191|  1.74k|                        }
  192|  1.74k|                        if let Some(variables) = variables {
  193|    309|                            let mut mapping = BTreeMap::default();
  194|  1.46k|                            for (i, var) in variables.iter().enumerate() {
  195|  1.46k|                                mapping.insert(var.as_str().to_owned(), i);
  196|  1.46k|                            }
  197|    309|                            return Ok(Self::Solutions {
  198|    309|                                variables,
  199|    309|                                solutions: JsonSolutionsReader {
  200|    309|                                    kind: JsonSolutionsReaderKind::Streaming { reader, buffer },
  201|    309|                                    mapping,
  202|    309|                                },
  203|    309|                            });
  204|  1.43k|                        }
  205|  1.43k|                        // We buffer all results before being able to read the header
  206|  1.43k|                        let mut bindings = Vec::new();
  207|  1.43k|                        let mut variables = Vec::new();
  208|  1.43k|                        let mut values = Vec::new();
  209|       |                        loop {
  210|  5.39k|                            match reader.read_event(&mut buffer)? {
  211|  2.41k|                                JsonEvent::StartObject => (),
  212|  1.54k|                                JsonEvent::EndObject => {
  213|  1.54k|                                    bindings.push((take(&mut variables), take(&mut values)));
  214|  1.54k|                                }
  215|       |                                JsonEvent::EndArray | JsonEvent::Eof => {
  216|    714|                                    buffered_bindings = Some(bindings);
  217|    714|                                    break;
  218|       |                                }
  219|    692|                                JsonEvent::ObjectKey(key) => {
  220|    692|                                    variables.push(key.to_owned());
  221|    692|                                    values.push(read_value(&mut reader, &mut buffer, 0)?);
  222|       |                                }
  223|       |                                _ => {
  224|      1|                                    return Err(
  225|      1|                                        SyntaxError::msg("Invalid result serialization").into()
  226|      1|                                    )
  227|       |                                }
  228|       |                            }
  229|       |                        }
  230|       |                    }
  231|     10|                    "boolean" => {
  232|      2|                        return if let JsonEvent::Boolean(v) = reader.read_event(&mut buffer)? {
  233|      0|                            Ok(Self::Boolean(v))
  234|       |                        } else {
  235|      1|                            Err(SyntaxError::msg("Unexpected boolean value").into())
  236|       |                        }
  237|       |                    }
  238|       |                    _ => {
  239|      8|                        return Err(SyntaxError::msg(format!(
  240|      8|                            "Expecting head or result key, found {key}"
  241|      8|                        ))
  242|      8|                        .into());
  243|       |                    }
  244|       |                },
  245|    325|                JsonEvent::EndObject => (),
  246|       |                JsonEvent::Eof => {
  247|     11|                    return if let Some(output_iter) = output_iter {
  248|      3|                        Ok(output_iter)
  249|       |                    } else {
  250|      8|                        Err(SyntaxError::msg(
  251|      8|                            "Unexpected end of JSON object without 'results' or 'boolean' key",
  252|      8|                        )
  253|      8|                        .into())
  254|       |                    }
  255|       |                }
  256|      3|                _ => return Err(SyntaxError::msg("Invalid SPARQL results serialization").into()),
  257|       |            }
  258|       |        }
  259|  1.75k|    }
_RNvMs0_NtCs4OyvW57uV0o_10sparesults4jsonINtB5_19JsonSolutionsReaderRShE9read_nextCscWvUm8eIJtl_13oxigraph_fuzz:
  278|  7.60k|    pub fn read_next(&mut self) -> Result<Option<Vec<Option<Term>>>, ParseError> {
  279|  7.60k|        match &mut self.kind {
  280|  7.59k|            JsonSolutionsReaderKind::Streaming { reader, buffer } => {
  281|  7.59k|                let mut new_bindings = vec![None; self.mapping.len()];
  282|       |                loop {
  283|  15.0k|                    match reader.read_event(buffer)? {
  284|  7.49k|                        JsonEvent::StartObject => (),
  285|  7.29k|                        JsonEvent::EndObject => return Ok(Some(new_bindings)),
  286|    255|                        JsonEvent::EndArray | JsonEvent::Eof => return Ok(None),
  287|     11|                        JsonEvent::ObjectKey(key) => {
  288|     11|                            let k = *self.mapping.get(key).ok_or_else(|| {
  289|       |                                SyntaxError::msg(format!(
  290|       |                                    "The variable {key} has not been defined in the header"
  291|       |                                ))
  292|     11|                            })?;
  293|      1|                            new_bindings[k] = Some(read_value(reader, buffer, 0)?)
  294|       |                        }
  295|      1|                        _ => return Err(SyntaxError::msg("Invalid result serialization").into()),
  296|       |                    }
  297|       |                }
  298|       |            }
  299|      6|            JsonSolutionsReaderKind::Buffered { bindings } => {
  300|      6|                Ok(if let Some((variables, values)) = bindings.next() {
  301|      3|                    let mut new_bindings = vec![None; self.mapping.len()];
  302|      3|                    for (variable, value) in variables.into_iter().zip(values) {
  303|      0|                        let k = *self.mapping.get(&variable).ok_or_else(|| {
  304|       |                            SyntaxError::msg(format!(
  305|       |                                "The variable {variable} has not been defined in the header"
  306|       |                            ))
  307|      0|                        })?;
  308|      0|                        new_bindings[k] = Some(value)
  309|       |                    }
  310|      3|                    Some(new_bindings)
  311|       |                } else {
  312|      3|                    None
  313|       |                })
  314|       |            }
  315|       |        }
  316|  7.60k|    }
_RNCNvMs0_NtCs4OyvW57uV0o_10sparesults4jsonINtB7_19JsonSolutionsReaderRShE9read_next0CscWvUm8eIJtl_13oxigraph_fuzz:
  288|     10|                            let k = *self.mapping.get(key).ok_or_else(|| {
  289|     10|                                SyntaxError::msg(format!(
  290|     10|                                    "The variable {key} has not been defined in the header"
  291|     10|                                ))
  292|     10|                            })?;
_RNvMNtCs4OyvW57uV0o_10sparesults4jsonINtB2_19JsonSolutionsWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE6finishCscWvUm8eIJtl_13oxigraph_fuzz:
   67|    129|        self.writer.write_event(JsonEvent::EndArray)?;
   68|    129|        self.writer.write_event(JsonEvent::EndObject)?;
   69|    129|        self.writer.write_event(JsonEvent::EndObject)?;
   70|    129|        let mut inner = self.writer.into_inner();
   71|    129|        inner.flush()?;
   72|    129|        Ok(inner)
   73|    129|    }
_RNCINvNtCs4OyvW57uV0o_10sparesults4json9read_headRShE0CscWvUm8eIJtl_13oxigraph_fuzz:
  534|     16|                                let new_var = Variable::new(s).map_err(|e| {
  535|     16|                                    SyntaxError::msg(format!(
  536|     16|                                        "Invalid variable declaration '{s}': {e}"
  537|     16|                                    ))
  538|     16|                                })?;
_RNvXs1_NvNtCs4OyvW57uV0o_10sparesults4json10read_valueNtB5_5StateNtNtCsf4yKkFD4Bbx_4core3cmp9PartialEq2eqCscWvUm8eIJtl_13oxigraph_fuzz:
  331|    227|    #[derive(Eq, PartialEq)]

_RINvMs3_Cs4OyvW57uV0o_10sparesultsINtB6_15SolutionsWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE5writeRNtNtCs9A29yfdLmIx_5oxrdf8variable8VariableRNtNtB1D_6triple4TermRNtNtB6_8solution13QuerySolutionECscWvUm8eIJtl_13oxigraph_fuzz:
  476|  3.53k|    pub fn write<'a>(
  477|  3.53k|        &mut self,
  478|  3.53k|        solution: impl IntoIterator<Item = (impl Into<VariableRef<'a>>, impl Into<TermRef<'a>>)>,
  479|  3.53k|    ) -> io::Result<()> {
  480|  3.53k|        let solution = solution.into_iter().map(|(v, s)| (v.into(), s.into()));
  481|  3.53k|        match &mut self.formatter {
  482|      0|            SolutionsWriterKind::Xml(writer) => writer.write(solution),
  483|  3.53k|            SolutionsWriterKind::Json(writer) => writer.write(solution),
  484|      0|            SolutionsWriterKind::Csv(writer) => writer.write(solution),
  485|      0|            SolutionsWriterKind::Tsv(writer) => writer.write(solution),
  486|       |        }
  487|  3.53k|    }
_RNvMs3_Cs4OyvW57uV0o_10sparesultsINtB5_15SolutionsWriterINtNtCsYFqBAFw4ZB_5alloc3vec3VechEE6finishCscWvUm8eIJtl_13oxigraph_fuzz:
  490|    129|    pub fn finish(self) -> io::Result<W> {
  491|    129|        match self.formatter {
  492|      0|            SolutionsWriterKind::Xml(write) => write.finish(),
  493|    129|            SolutionsWriterKind::Json(write) => write.finish(),
  494|      0|            SolutionsWriterKind::Csv(write) => write.finish(),
  495|      0|            SolutionsWriterKind::Tsv(write) => write.finish(),
  496|       |        }
  497|    129|    }
_RNvXs1_Cs4OyvW57uV0o_10sparesultsINtB5_15SolutionsReaderRShENtNtNtNtCsf4yKkFD4Bbx_4core4iter6traits8iterator8Iterator4nextCscWvUm8eIJtl_13oxigraph_fuzz:
  313|  7.60k|    fn next(&mut self) -> Option<Result<QuerySolution, ParseError>> {
  314|  7.60k|        Some(
  315|  7.60k|            match &mut self.solutions {
  316|      0|                SolutionsReaderKind::Xml(reader) => reader.read_next(),
  317|  7.60k|                SolutionsReaderKind::Json(reader) => reader.read_next(),
  318|      0|                SolutionsReaderKind::Tsv(reader) => reader.read_next(),
  319|       |            }
  320|  7.60k|            .transpose()?
  321|  7.34k|            .map(|values| (Rc::clone(&self.variables), values).into()),
  322|       |        )
  323|  7.60k|    }
_RNCNvXs1_Cs4OyvW57uV0o_10sparesultsINtB7_15SolutionsReaderRShENtNtNtNtCsf4yKkFD4Bbx_4core4iter6traits8iterator8Iterator4next0CscWvUm8eIJtl_13oxigraph_fuzz:
  321|  7.29k|            .map(|values| (Rc::clone(&self.variables), values).into()),
_RINvMs_Cs4OyvW57uV0o_10sparesultsNtB5_18QueryResultsParser12read_resultsRShECscWvUm8eIJtl_13oxigraph_fuzz:
  193|  1.75k|    pub fn read_results<R: BufRead>(&self, reader: R) -> Result<QueryResultsReader<R>, ParseError> {
  194|  1.75k|        Ok(match self.format {
  195|      0|            QueryResultsFormat::Xml => match XmlQueryResultsReader::read(reader)? {
  196|      0|                XmlQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  197|       |                XmlQueryResultsReader::Solutions {
  198|      0|                    solutions,
  199|      0|                    variables,
  200|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  201|      0|                    variables: Rc::new(variables),
  202|      0|                    solutions: SolutionsReaderKind::Xml(solutions),
  203|      0|                }),
  204|       |            },
  205|  1.75k|            QueryResultsFormat::Json => match JsonQueryResultsReader::read(reader)? {
  206|      0|                JsonQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  207|       |                JsonQueryResultsReader::Solutions {
  208|    312|                    solutions,
  209|    312|                    variables,
  210|    312|                } => QueryResultsReader::Solutions(SolutionsReader {
  211|    312|                    variables: Rc::new(variables),
  212|    312|                    solutions: SolutionsReaderKind::Json(solutions),
  213|    312|                }),
  214|       |            },
  215|      0|            QueryResultsFormat::Csv => return Err(SyntaxError::msg("CSV SPARQL results syntax is lossy and can't be parsed to a proper RDF representation").into()),
  216|      0|            QueryResultsFormat::Tsv => match TsvQueryResultsReader::read(reader)? {
  217|      0|                TsvQueryResultsReader::Boolean(r) => QueryResultsReader::Boolean(r),
  218|       |                TsvQueryResultsReader::Solutions {
  219|      0|                    solutions,
  220|      0|                    variables,
  221|      0|                } => QueryResultsReader::Solutions(SolutionsReader {
  222|      0|                    variables: Rc::new(variables),
  223|      0|                    solutions: SolutionsReaderKind::Tsv(solutions),
  224|      0|                }),
  225|       |            },
  226|       |        })
  227|  1.75k|    }
_RINvMs2_Cs4OyvW57uV0o_10sparesultsNtB6_22QueryResultsSerializer16solutions_writerINtNtCsYFqBAFw4ZB_5alloc3vec3VechEECscWvUm8eIJtl_13oxigraph_fuzz:
  403|    129|    pub fn solutions_writer<W: Write>(
  404|    129|        &self,
  405|    129|        writer: W,
  406|    129|        variables: Vec<Variable>,
  407|    129|    ) -> io::Result<SolutionsWriter<W>> {
  408|    129|        Ok(SolutionsWriter {
  409|    129|            formatter: match self.format {
  410|       |                QueryResultsFormat::Xml => {
  411|      0|                    SolutionsWriterKind::Xml(XmlSolutionsWriter::start(writer, &variables)?)
  412|       |                }
  413|       |                QueryResultsFormat::Json => {
  414|    129|                    SolutionsWriterKind::Json(JsonSolutionsWriter::start(writer, &variables)?)
  415|       |                }
  416|       |                QueryResultsFormat::Csv => {
  417|      0|                    SolutionsWriterKind::Csv(CsvSolutionsWriter::start(writer, variables)?)
  418|       |                }
  419|       |                QueryResultsFormat::Tsv => {
  420|      0|                    SolutionsWriterKind::Tsv(TsvSolutionsWriter::start(writer, variables)?)
  421|       |                }
  422|       |            },
  423|       |        })
  424|    129|    }
_RNvMs_Cs4OyvW57uV0o_10sparesultsNtB4_18QueryResultsParser11from_formatCscWvUm8eIJtl_13oxigraph_fuzz:
  166|  1.62k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  167|  1.62k|        Self { format }
  168|  1.62k|    }
_RNvMs2_Cs4OyvW57uV0o_10sparesultsNtB5_22QueryResultsSerializer11from_formatCscWvUm8eIJtl_13oxigraph_fuzz:
  362|  1.62k|    pub fn from_format(format: QueryResultsFormat) -> Self {
  363|  1.62k|        Self { format }
  364|  1.62k|    }

_RNvXs_NtCs4OyvW57uV0o_10sparesults8solutionNtB4_13QuerySolutionINtNtCsf4yKkFD4Bbx_4core7convert4FromTINtNtCsYFqBAFw4ZB_5alloc2rc2RcINtNtB1G_3vec3VecNtNtCs9A29yfdLmIx_5oxrdf8variable8VariableEEIB26_INtNtB14_6option6OptionNtNtB2q_6triple4TermEEEE4fromCscWvUm8eIJtl_13oxigraph_fuzz:
  121|  7.29k|    fn from((v, s): (V, S)) -> Self {
  122|  7.29k|        Self {
  123|  7.29k|            variables: v.into(),
  124|  7.29k|            values: s.into(),
  125|  7.29k|        }
  126|  7.29k|    }
_RNvMNtCs4OyvW57uV0o_10sparesults8solutionNtB2_13QuerySolution9variablesCscWvUm8eIJtl_13oxigraph_fuzz:
  114|    126|    pub fn variables(&self) -> &[Variable] {
  115|    126|        &self.variables
  116|    126|    }
_RNvXs0_NtCs4OyvW57uV0o_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsf4yKkFD4Bbx_4core4iter6traits7collect12IntoIterator9into_iterCscWvUm8eIJtl_13oxigraph_fuzz:
  134|  3.53k|    fn into_iter(self) -> Iter<'a> {
  135|  3.53k|        Iter {
  136|  3.53k|            inner: self.variables.iter().zip(&self.values),
  137|  3.53k|        }
  138|  3.53k|    }
_RNvXs9_NtCs4OyvW57uV0o_10sparesults8solutionNtB5_4IterNtNtNtNtCsf4yKkFD4Bbx_4core4iter6traits8iterator8Iterator4nextCscWvUm8eIJtl_13oxigraph_fuzz:
  229|  3.53k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|  5.01k|        for (variable, value) in &mut self.inner {
  231|  1.47k|            if let Some(value) = value {
  232|      0|                return Some((variable, value));
  233|  1.47k|            }
  234|       |        }
  235|  3.53k|        None
  236|  3.53k|    }
_RNvXs9_NtCs4OyvW57uV0o_10sparesults8solutionNtB5_4IterNtNtNtNtCsf4yKkFD4Bbx_4core4iter6traits8iterator8Iterator4nextB7_:
  229|  7.06k|    fn next(&mut self) -> Option<(&'a Variable, &'a Term)> {
  230|  10.0k|        for (variable, value) in &mut self.inner {
  231|  2.95k|            if let Some(value) = value {
  232|      0|                return Some((variable, value));
  233|  2.95k|            }
  234|       |        }
  235|  7.06k|        None
  236|  7.06k|    }
_RNvXs6_NtCs4OyvW57uV0o_10sparesults8solutionNtB5_13QuerySolutionNtNtCsf4yKkFD4Bbx_4core3cmp9PartialEq2eq:
  189|  3.53k|    fn eq(&self, other: &Self) -> bool {
  190|  3.53k|        for (k, v) in self.iter() {
  191|      0|            if other.get(k) != Some(v) {
  192|      0|                return false;
  193|      0|            }
  194|       |        }
  195|  3.53k|        for (k, v) in other.iter() {
  196|      0|            if self.get(k) != Some(v) {
  197|      0|                return false;
  198|      0|            }
  199|       |        }
  200|  3.53k|        true
  201|  3.53k|    }
_RNvMNtCs4OyvW57uV0o_10sparesults8solutionNtB2_13QuerySolution4iterB4_:
   86|  7.06k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &Term)> {
   87|  7.06k|        self.into_iter()
   88|  7.06k|    }
_RNvXs0_NtCs4OyvW57uV0o_10sparesults8solutionRNtB5_13QuerySolutionNtNtNtNtCsf4yKkFD4Bbx_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  134|  7.06k|    fn into_iter(self) -> Iter<'a> {
  135|  7.06k|        Iter {
  136|  7.06k|            inner: self.variables.iter().zip(&self.values),
  137|  7.06k|        }
  138|  7.06k|    }

